
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ead8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ecc  0801ec10  0801ec10  0002ec10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fadc  0801fadc  0002fadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fbb4  0801fbb4  0003016c  2**0
                  CONTENTS
  5 .ARM          00000008  0801fbb4  0801fbb4  0002fbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fbbc  0801fbbc  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fbbc  0801fbbc  0002fbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fbc4  0801fbc4  0002fbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000016c  20000000  0801fbc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f4c  2000016c  0801fd34  0003016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020b8  0801fd34  000320b8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004d327  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ba85  00000000  00000000  0007d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003ee8  00000000  00000000  00088f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002ff0  00000000  00000000  0008ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bec1  00000000  00000000  0008fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004dccf  00000000  00000000  000bbd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db2f5  00000000  00000000  001099f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00010778  00000000  00000000  001e4ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001f5460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000016c 	.word	0x2000016c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ebf8 	.word	0x0801ebf8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000170 	.word	0x20000170
 8000174:	0801ebf8 	.word	0x0801ebf8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <CS_Select+0x14>)
 8001094:	f005 f884 	bl	80061a0 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000400 	.word	0x48000400

080010a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CS_UnSelect+0x14>)
 80010ac:	f005 f878 	bl	80061a0 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <CE_Enable>:


void CE_Enable (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <CE_Enable+0x14>)
 80010c4:	f005 f86c 	bl	80061a0 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <CE_Disable>:

void CE_Disable (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CE_Disable+0x14>)
 80010dc:	f005 f860 	bl	80061a0 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000400 	.word	0x48000400

080010e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001106:	f7ff ffbf 	bl	8001088 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110a:	f7ff ffc9 	bl	80010a0 <CS_UnSelect>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	b2db      	uxtb	r3, r3
 800112e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001130:	f7ff ffaa 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800113e:	f007 fdc3 	bl	8008cc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800114e:	f007 fdbb 	bl	8008cc8 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001152:	f7ff ffa5 	bl	80010a0 <CS_UnSelect>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000033c 	.word	0x2000033c

08001164 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001172:	f7ff ff89 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800117e:	f007 fda3 	bl	8008cc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800118c:	f007 ff2c 	bl	8008fe8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001190:	f7ff ff86 	bl	80010a0 <CS_UnSelect>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000033c 	.word	0x2000033c

080011a4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011b2:	f7ff ff69 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011c0:	f007 fd82 	bl	8008cc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011d0:	f007 ff0a 	bl	8008fe8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011d4:	f7ff ff64 	bl	80010a0 <CS_UnSelect>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000033c 	.word	0x2000033c

080011e4 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d104      	bne.n	80011fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff ff76 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011fc:	e090      	b.n	8001320 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b17      	cmp	r3, #23
 8001202:	d104      	bne.n	800120e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff ff6e 	bl	80010e8 <nrf24_WriteReg>
}
 800120c:	e088      	b.n	8001320 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff69 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001216:	213f      	movs	r1, #63	; 0x3f
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff65 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800121e:	2103      	movs	r1, #3
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff61 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff ff5d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800122e:	2103      	movs	r1, #3
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff ff59 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001236:	2102      	movs	r1, #2
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ff55 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800123e:	210e      	movs	r1, #14
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff51 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001246:	2100      	movs	r1, #0
 8001248:	2007      	movs	r0, #7
 800124a:	f7ff ff4d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800124e:	2100      	movs	r1, #0
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001256:	2100      	movs	r1, #0
 8001258:	2009      	movs	r0, #9
 800125a:	f7ff ff45 	bl	80010e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <nrf24_reset+0x144>)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2205      	movs	r2, #5
 8001274:	4619      	mov	r1, r3
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff ff4e 	bl	8001118 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <nrf24_reset+0x148>)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff ff3f 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800129a:	21c3      	movs	r1, #195	; 0xc3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff23 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012a2:	21c4      	movs	r1, #196	; 0xc4
 80012a4:	200d      	movs	r0, #13
 80012a6:	f7ff ff1f 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012aa:	21c5      	movs	r1, #197	; 0xc5
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff ff1b 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012b2:	21c6      	movs	r1, #198	; 0xc6
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff17 	bl	80010e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <nrf24_reset+0x144>)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2205      	movs	r2, #5
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff20 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff ff04 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2012      	movs	r0, #18
 80012e4:	f7ff ff00 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2013      	movs	r0, #19
 80012ec:	f7ff fefc 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fef8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fef4 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2016      	movs	r0, #22
 8001304:	f7ff fef0 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff feec 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f7ff fee8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f7ff fee4 	bl	80010e8 <nrf24_WriteReg>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801ec10 	.word	0x0801ec10
 800132c:	0801ec18 	.word	0x0801ec18

08001330 <NRF24_Init>:




void NRF24_Init (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001334:	f7ff fecc 	bl	80010d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff53 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fed1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fecd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fec9 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001356:	2103      	movs	r1, #3
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec5 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fec1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff febd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800136e:	210e      	movs	r1, #14
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff feb9 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe9f 	bl	80010b8 <CE_Enable>

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800138a:	f7ff fea1 	bl	80010d0 <CE_Disable>

	nrf24_reset (STATUS);
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff ff28 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	2005      	movs	r0, #5
 800139a:	f7ff fea5 	bl	80010e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fee0 	bl	8001164 <nrf24_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ba:	2205      	movs	r2, #5
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff feaa 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff fe8e 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80013cc:	2120      	movs	r1, #32
 80013ce:	2013      	movs	r0, #19
 80013d0:	f7ff fe8a 	bl	80010e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fec5 	bl	8001164 <nrf24_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe7c 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe62 	bl	80010b8 <CE_Enable>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fead 	bl	8001164 <nrf24_ReadReg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <isDataAvailable+0x34>
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff fe5e 	bl	80010e8 <nrf24_WriteReg>

		return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <isDataAvailable+0x36>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00c      	b.n	8001462 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff fe86 	bl	8001164 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddef      	ble.n	8001448 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330a      	adds	r3, #10
 800146c:	2205      	movs	r2, #5
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fe97 	bl	80011a4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330f      	adds	r3, #15
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200b      	movs	r0, #11
 8001480:	f7ff fe90 	bl	80011a4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0414 	add.w	r4, r3, #20
 800148a:	200c      	movs	r0, #12
 800148c:	f7ff fe6a 	bl	8001164 <nrf24_ReadReg>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0415 	add.w	r4, r3, #21
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fe62 	bl	8001164 <nrf24_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0416 	add.w	r4, r3, #22
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fe5a 	bl	8001164 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0417 	add.w	r4, r3, #23
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fe52 	bl	8001164 <nrf24_ReadReg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3318      	adds	r3, #24
 80014c8:	2205      	movs	r2, #5
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fe69 	bl	80011a4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80014d2:	231d      	movs	r3, #29
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e00e      	b.n	80014f6 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b0c      	subs	r3, #12
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fe3c 	bl	8001164 <nrf24_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	dded      	ble.n	80014d8 <NRF24_ReadAll+0x9e>
	}

}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	43db      	mvns	r3, r3
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4013      	ands	r3, r2
 800154e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC_Init+0x94>)
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <MX_ADC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_ADC_Init+0x94>)
 8001568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800156c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_ADC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC_Init+0x94>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC_Init+0x94>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC_Init+0x94>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_ADC_Init+0x94>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_ADC_Init+0x94>)
 80015de:	f002 fd1f 	bl	8004020 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fe9e 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000188 	.word	0x20000188
 80015f4:	40012400 	.word	0x40012400

080015f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x24>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160e:	f7ff ff7a 	bl	8001506 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspDeInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ff7e 	bl	8001536 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SYS_InitMeasurement+0x14>)
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <SYS_InitMeasurement+0x18>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000188 	.word	0x20000188
 8001660:	40012400 	.word	0x40012400

08001664 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <SYS_GetBatteryLevel+0x5c>)
 8001674:	f000 f82a 	bl	80016cc <ADC_ReadChannels>
 8001678:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e016      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f640 43e4 	movw	r3, #3300	; 0xce4
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	e004      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SYS_GetBatteryLevel+0x64>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016b4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	b4002000 	.word	0xb4002000
 80016c4:	1fff75aa 	.word	0x1fff75aa
 80016c8:	004c08d8 	.word	0x004c08d8

080016cc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016e4:	f7ff ff3a 	bl	800155c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <ADC_ReadChannels+0x88>)
 80016ea:	f003 fab8 	bl	8004c5e <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016f4:	f000 fe18 	bl	8002328 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <ADC_ReadChannels+0x88>)
 800170c:	f002 ffc4 	bl	8004698 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001716:	f000 fe07 	bl	8002328 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <ADC_ReadChannels+0x88>)
 800171c:	f002 fea0 	bl	8004460 <HAL_ADC_Start>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001726:	f000 fdff 	bl	8002328 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <ADC_ReadChannels+0x88>)
 8001730:	f002 ff0e 	bl	8004550 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <ADC_ReadChannels+0x88>)
 8001736:	f002 fed9 	bl	80044ec <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ADC_ReadChannels+0x88>)
 800173c:	f002 ff9f 	bl	800467e <HAL_ADC_GetValue>
 8001740:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <ADC_ReadChannels+0x88>)
 8001744:	f002 fe00 	bl	8004348 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000188 	.word	0x20000188

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffe3 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ffe0 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	200b      	movs	r0, #11
 800179e:	f003 fc04 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a2:	200b      	movs	r0, #11
 80017a4:	f003 fc1b 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f003 fbfc 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f003 fc13 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	203d      	movs	r0, #61	; 0x3d
 80017be:	f003 fbf4 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80017c2:	203d      	movs	r0, #61	; 0x3d
 80017c4:	f003 fc0b 	bl	8004fde <HAL_NVIC_EnableIRQ>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017d8:	23ff      	movs	r3, #255	; 0xff
 80017da:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e2:	d311      	bcc.n	8001808 <FLASH_IF_Write+0x3c>
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <FLASH_IF_Write+0x48>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	029a      	lsls	r2, r3, #10
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <FLASH_IF_Write+0x4c>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017f2:	3b01      	subs	r3, #1
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d306      	bcc.n	8001808 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f85a 	bl	80018b8 <FLASH_IF_INT_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	1fff75e0 	.word	0x1fff75e0
 8001818:	03fffc00 	.word	0x03fffc00

0800181c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001828:	23ff      	movs	r3, #255	; 0xff
 800182a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001832:	d311      	bcc.n	8001858 <FLASH_IF_Read+0x3c>
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <FLASH_IF_Read+0x48>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	029a      	lsls	r2, r3, #10
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <FLASH_IF_Read+0x4c>)
 800183c:	4013      	ands	r3, r2
 800183e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001842:	3b01      	subs	r3, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4293      	cmp	r3, r2
 8001848:	d306      	bcc.n	8001858 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f93a 	bl	8001ac8 <FLASH_IF_INT_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	1fff75e0 	.word	0x1fff75e0
 8001868:	03fffc00 	.word	0x03fffc00

0800186c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001876:	23ff      	movs	r3, #255	; 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001880:	d310      	bcc.n	80018a4 <FLASH_IF_Erase+0x38>
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <FLASH_IF_Erase+0x44>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	029a      	lsls	r2, r3, #10
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <FLASH_IF_Erase+0x48>)
 800188a:	4013      	ands	r3, r2
 800188c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001890:	3b01      	subs	r3, #1
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4293      	cmp	r3, r2
 8001896:	d305      	bcc.n	80018a4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f932 	bl	8001b04 <FLASH_IF_INT_Erase>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	1fff75e0 	.word	0x1fff75e0
 80018b4:	03fffc00 	.word	0x03fffc00

080018b8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <FLASH_IF_INT_Write+0x3e>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <FLASH_IF_INT_Write+0x3e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80018f6:	f06f 0305 	mvn.w	r3, #5
 80018fa:	e0da      	b.n	8001ab2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018fc:	f000 f992 	bl	8001c24 <FLASH_IF_INT_Clear_Error>
 8001900:	4603      	mov	r3, r0
 8001902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 80cf 	bne.w	8001aae <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001910:	f004 f842 	bl	8005998 <HAL_FLASH_Unlock>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c6 	bne.w	8001aa8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <FLASH_IF_INT_Write+0x204>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0299      	lsls	r1, r3, #10
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <FLASH_IF_INT_Write+0x208>)
 800192a:	400b      	ands	r3, r1
 800192c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	0adb      	lsrs	r3, r3, #11
 8001938:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800193a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001944:	3b01      	subs	r3, #1
 8001946:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <FLASH_IF_INT_Write+0x204>)
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	0291      	lsls	r1, r2, #10
 800194c:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <FLASH_IF_INT_Write+0x208>)
 800194e:	400a      	ands	r2, r1
 8001950:	fbb3 f1f2 	udiv	r1, r3, r2
 8001954:	fb01 f202 	mul.w	r2, r1, r2
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	0ada      	lsrs	r2, r3, #11
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d905      	bls.n	8001976 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001970:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	e089      	b.n	8001a90 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f925 	bl	8001bd8 <FLASH_IF_INT_IsEmpty>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d031      	beq.n	80019f8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800199c:	23fa      	movs	r3, #250	; 0xfa
 800199e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80019a2:	e07e      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f88a 	bl	8001ac8 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019be:	4413      	add	r3, r2
 80019c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c4:	b292      	uxth	r2, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f01b fd3e 	bl	801d448 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f896 	bl	8001b04 <FLASH_IF_INT_Erase>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80019de:	23fe      	movs	r3, #254	; 0xfe
 80019e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80019e4:	e05d      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80019f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e005      	b.n	8001a04 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80019f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a08:	e026      	b.n	8001a58 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a16:	2001      	movs	r0, #1
 8001a18:	f003 ff7a 	bl	8005910 <HAL_FLASH_Program>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	4413      	add	r3, r2
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4299      	cmp	r1, r3
 8001a34:	bf08      	it	eq
 8001a36:	4290      	cmpeq	r0, r2
 8001a38:	d003      	beq.n	8001a42 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001a3a:	23fc      	movs	r3, #252	; 0xfc
 8001a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001a40:	e00e      	b.n	8001a60 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3308      	adds	r3, #8
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e003      	b.n	8001a52 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001a4a:	23fc      	movs	r3, #252	; 0xfc
 8001a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001a50:	e006      	b.n	8001a60 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	3308      	adds	r3, #8
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3d4      	bcc.n	8001a0a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001a60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11b      	bne.n	8001aa0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	4413      	add	r3, r2
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	4413      	add	r3, r2
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a82:	bf28      	it	cs
 8001a84:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f4ff af6f 	bcc.w	800197c <FLASH_IF_INT_Write+0xc4>
 8001a9e:	e000      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001aa0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001aa2:	f003 ff9b 	bl	80059dc <HAL_FLASH_Lock>
 8001aa6:	e002      	b.n	8001aae <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001aa8:	23fb      	movs	r3, #251	; 0xfb
 8001aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001aae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3740      	adds	r7, #64	; 0x40
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	1fff75e0 	.word	0x1fff75e0
 8001ac0:	03fffc00 	.word	0x03fffc00
 8001ac4:	200001ec 	.word	0x200001ec

08001ac8 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <FLASH_IF_INT_Read+0x1c>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001ae4:	f06f 0305 	mvn.w	r3, #5
 8001ae8:	e008      	b.n	8001afc <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f01b fca8 	bl	801d448 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b24:	f06f 0305 	mvn.w	r3, #5
 8001b28:	e04e      	b.n	8001bc8 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001b2a:	f000 f87b 	bl	8001c24 <FLASH_IF_INT_Clear_Error>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d144      	bne.n	8001bc4 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b3a:	f003 ff2d 	bl	8005998 <HAL_FLASH_Unlock>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d13d      	bne.n	8001bc0 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b44:	2302      	movs	r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <FLASH_IF_INT_Erase+0xcc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0299      	lsls	r1, r3, #10
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <FLASH_IF_INT_Erase+0xd0>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b70:	3b01      	subs	r3, #1
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <FLASH_IF_INT_Erase+0xcc>)
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	0291      	lsls	r1, r2, #10
 8001b78:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <FLASH_IF_INT_Erase+0xd0>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	0ada      	lsrs	r2, r3, #11
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001b90:	f107 0214 	add.w	r2, r7, #20
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fffe 	bl	8005b9c <HAL_FLASHEx_Erase>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001ba4:	7fbb      	ldrb	r3, [r7, #30]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001baa:	7fbb      	ldrb	r3, [r7, #30]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d101      	bne.n	8001bb4 <FLASH_IF_INT_Erase+0xb0>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e001      	b.n	8001bb8 <FLASH_IF_INT_Erase+0xb4>
 8001bb4:	f06f 0301 	mvn.w	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001bba:	f003 ff0f 	bl	80059dc <HAL_FLASH_Lock>
 8001bbe:	e001      	b.n	8001bc4 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001bc0:	23fb      	movs	r3, #251	; 0xfb
 8001bc2:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001bc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	1fff75e0 	.word	0x1fff75e0
 8001bd4:	03fffc00 	.word	0x03fffc00

08001bd8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	e011      	b.n	8001c10 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	bf08      	it	eq
 8001bf8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001bfc:	d002      	beq.n	8001c04 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      break;
 8001c02:	e009      	b.n	8001c18 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3308      	adds	r3, #8
 8001c08:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d3e9      	bcc.n	8001bec <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001c2a:	23fb      	movs	r3, #251	; 0xfb
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001c2e:	f003 feb3 	bl	8005998 <HAL_FLASH_Unlock>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d110      	bne.n	8001c5a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c46:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001c4a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001c4c:	f003 fec6 	bl	80059dc <HAL_FLASH_Lock>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	58004000 	.word	0x58004000

08001c6c <LL_AHB2_GRP1_EnableClock>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff ffdb 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff ffd8 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f7ff ffd5 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001cc8:	4825      	ldr	r0, [pc, #148]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cca:	f004 fa69 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cd4:	f004 fa64 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f240 2131 	movw	r1, #561	; 0x231
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f004 fa5d 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001ce6:	2338      	movs	r3, #56	; 0x38
 8001ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4819      	ldr	r0, [pc, #100]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cfc:	f004 f822 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001d00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001d18:	f004 f814 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001d1c:	2331      	movs	r3, #49	; 0x31
 8001d1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f004 f806 	bl	8005d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d3e:	2311      	movs	r3, #17
 8001d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f003 fff7 	bl	8005d44 <HAL_GPIO_Init>

}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	48000400 	.word	0x48000400

08001d64 <LL_AHB2_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <LL_APB1_GRP1_EnableClock>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_I2C2_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <MX_I2C2_Init+0x7c>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e00:	f004 f9fe 	bl	8006200 <HAL_I2C_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e0a:	f000 fa8d 	bl	8002328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e12:	f004 fed9 	bl	8006bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e1c:	f000 fa84 	bl	8002328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e20:	2100      	movs	r1, #0
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e24:	f004 ff1a 	bl	8006c5c <HAL_I2CEx_ConfigDigitalFilter>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f000 fa7b 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001f0 	.word	0x200001f0
 8001e3c:	40005800 	.word	0x40005800
 8001e40:	00707cbb 	.word	0x00707cbb

08001e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	; 0x58
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2238      	movs	r2, #56	; 0x38
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f01c fdb3 	bl	801e9d0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_I2C_MspInit+0xb0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d13b      	bne.n	8001eec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e78:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 f9a6 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e8e:	f000 fa4b 	bl	8002328 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff ff66 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff ff63 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001eac:	2301      	movs	r3, #1
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f003 ff41 	bl	8005d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_I2C_MspInit+0xb4>)
 8001ee0:	f003 ff30 	bl	8005d44 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ee8:	f7ff ff54 	bl	8001d94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3758      	adds	r7, #88	; 0x58
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005800 	.word	0x40005800
 8001ef8:	48000400 	.word	0x48000400

08001efc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f023 0218 	bic.w	r2, r3, #24
 8001f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f2c:	f001 fe8a 	bl	8003c44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f30:	f000 f84e 	bl	8001fd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f34:	f7ff feb2 	bl	8001c9c <MX_GPIO_Init>
	MX_LoRaWAN_Init();
 8001f38:	f00b f8c2 	bl	800d0c0 <MX_LoRaWAN_Init>
	MX_USART2_UART_Init();
 8001f3c:	f001 fadc 	bl	80034f8 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8001f40:	f7ff ff40 	bl	8001dc4 <MX_I2C2_Init>
	MX_TIM16_Init();
 8001f44:	f000 ff32 	bl	8002dac <MX_TIM16_Init>
	MX_TIM17_Init();
 8001f48:	f000 ff64 	bl	8002e14 <MX_TIM17_Init>
	MX_SPI2_Init();
 8001f4c:	f000 fb50 	bl	80025f0 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	UART2_SET = 0;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <main+0x8c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]

	NRF24_Init();
 8001f56:	f7ff f9eb 	bl	8001330 <NRF24_Init>

	NRF24_RxMode(RxAddress, 10);
 8001f5a:	210a      	movs	r1, #10
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <main+0x90>)
 8001f5e:	f7ff fa0e 	bl	800137e <NRF24_RxMode>

	NRF24_ReadAll(data);
 8001f62:	4816      	ldr	r0, [pc, #88]	; (8001fbc <main+0x94>)
 8001f64:	f7ff fa69 	bl	800143a <NRF24_ReadAll>

	F1_QueueIni(); // init Function queue
 8001f68:	f000 f9ea 	bl	8002340 <F1_QueueIni>

	HAL_UART_Receive_IT(&huart2, (uint8_t*) aRXBufferUser, RX_BUFFER_SIZE);
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <main+0x98>)
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <main+0x9c>)
 8001f72:	f008 fe53 	bl	800ac1c <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f004 f90e 	bl	80061a0 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim16);
 8001f84:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <main+0xa0>)
 8001f86:	f008 fbcb 	bl	800a720 <HAL_TIM_Base_Start_IT>

	while (1) {

		/* USER CODE END WHILE */
		MX_LoRaWAN_Process();
 8001f8a:	f00b f8a1 	bl	800d0d0 <MX_LoRaWAN_Process>

		/* USER CODE BEGIN 3 */

		F1_pull()();
 8001f8e:	f000 fa1b 	bl	80023c8 <F1_pull>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4798      	blx	r3

		if (UART2_SET)
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <main+0x8c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <main+0x7a>
			MeasurePM_sens();
 8001f9e:	f000 f881 	bl	80020a4 <MeasurePM_sens>
		if (isDataAvailable(2) == 1) {
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f7ff fa2a 	bl	80013fc <isDataAvailable>
			//  		  NRF24_Receive(RxData);
//   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
		}

		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); ///DBG
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4808      	ldr	r0, [pc, #32]	; (8001fcc <main+0xa4>)
 8001fac:	f004 f90f 	bl	80061ce <HAL_GPIO_TogglePin>
		MX_LoRaWAN_Process();
 8001fb0:	e7eb      	b.n	8001f8a <main+0x62>
 8001fb2:	bf00      	nop
 8001fb4:	20000010 	.word	0x20000010
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	2000027c 	.word	0x2000027c
 8001fc0:	20000244 	.word	0x20000244
 8001fc4:	200004ec 	.word	0x200004ec
 8001fc8:	200003b8 	.word	0x200003b8
 8001fcc:	48000400 	.word	0x48000400

08001fd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09a      	sub	sp, #104	; 0x68
 8001fd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fd6:	f107 0320 	add.w	r3, r7, #32
 8001fda:	2248      	movs	r2, #72	; 0x48
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f01c fcf6 	bl	801e9d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001ff6:	f004 fe7d 	bl	8006cf4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff ff7e 	bl	8001efc <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <SystemClock_Config+0xb8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <SystemClock_Config+0xb8>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <SystemClock_Config+0xb8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800201c:	2307      	movs	r3, #7
 800201e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8002020:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002026:	2381      	movs	r3, #129	; 0x81
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	4618      	mov	r0, r3
 8002042:	f005 f9a3 	bl	800738c <HAL_RCC_OscConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0x80>
		Error_Handler();
 800204c:	f000 f96c 	bl	8002328 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8002050:	234f      	movs	r3, #79	; 0x4f
 8002052:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002054:	2302      	movs	r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f005 fd0e 	bl	8007a90 <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xae>
		Error_Handler();
 800207a:	f000 f955 	bl	8002328 <Error_Handler>
	}
}
 800207e:	bf00      	nop
 8002080:	3768      	adds	r7, #104	; 0x68
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	58000400 	.word	0x58000400

0800208c <EnablePM_sens>:

/* USER CODE BEGIN 4 */

void EnablePM_sens(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f004 f881 	bl	80061a0 <HAL_GPIO_WritePin>

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <MeasurePM_sens>:
void DisablePM_sens(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);

}

void MeasurePM_sens(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	if (aRXBufferUser[0] == 0x02 && aRXBufferUser[31] == 0x03) {
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <MeasurePM_sens+0xa0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d140      	bne.n	8002134 <MeasurePM_sens+0x90>
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <MeasurePM_sens+0xa0>)
 80020b4:	7fdb      	ldrb	r3, [r3, #31]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d13b      	bne.n	8002134 <MeasurePM_sens+0x90>

		PM2_5 = aRXBufferUser[5] + aRXBufferUser[6] * 256
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MeasurePM_sens+0xa0>)
 80020be:	795b      	ldrb	r3, [r3, #5]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MeasurePM_sens+0xa0>)
 80020c6:	799b      	ldrb	r3, [r3, #6]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	441a      	add	r2, r3
				+ aRXBufferUser[7] * 65536;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MeasurePM_sens+0xa0>)
 80020d0:	79db      	ldrb	r3, [r3, #7]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	4413      	add	r3, r2
 80020d8:	461a      	mov	r2, r3
		PM2_5 = aRXBufferUser[5] + aRXBufferUser[6] * 256
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <MeasurePM_sens+0xa4>)
 80020dc:	601a      	str	r2, [r3, #0]
		PM10 = aRXBufferUser[9] + aRXBufferUser[10] * 256
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <MeasurePM_sens+0xa0>)
 80020e0:	7a5b      	ldrb	r3, [r3, #9]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <MeasurePM_sens+0xa0>)
 80020e8:	7a9b      	ldrb	r3, [r3, #10]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	441a      	add	r2, r3
				+ aRXBufferUser[11] * 65536;
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MeasurePM_sens+0xa0>)
 80020f2:	7adb      	ldrb	r3, [r3, #11]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	4413      	add	r3, r2
 80020fa:	461a      	mov	r2, r3
		PM10 = aRXBufferUser[9] + aRXBufferUser[10] * 256
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <MeasurePM_sens+0xa8>)
 80020fe:	601a      	str	r2, [r3, #0]
		PM1 = aRXBufferUser[1] + aRXBufferUser[2] * 256
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MeasurePM_sens+0xa0>)
 8002102:	785b      	ldrb	r3, [r3, #1]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MeasurePM_sens+0xa0>)
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	441a      	add	r2, r3
				+ aRXBufferUser[3] * 65536;
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MeasurePM_sens+0xa0>)
 8002114:	78db      	ldrb	r3, [r3, #3]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	4413      	add	r3, r2
 800211c:	461a      	mov	r2, r3
		PM1 = aRXBufferUser[1] + aRXBufferUser[2] * 256
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MeasurePM_sens+0xac>)
 8002120:	601a      	str	r2, [r3, #0]
		UART2_SET = 0;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MeasurePM_sens+0xb0>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t*) aRXBufferUser, RX_BUFFER_SIZE);
 8002128:	2220      	movs	r2, #32
 800212a:	4906      	ldr	r1, [pc, #24]	; (8002144 <MeasurePM_sens+0xa0>)
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <MeasurePM_sens+0xb4>)
 800212e:	f008 fd75 	bl	800ac1c <HAL_UART_Receive_IT>
 8002132:	e005      	b.n	8002140 <MeasurePM_sens+0x9c>

	} else
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*) aRXBufferUser,
 8002134:	2220      	movs	r2, #32
 8002136:	4903      	ldr	r1, [pc, #12]	; (8002144 <MeasurePM_sens+0xa0>)
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <MeasurePM_sens+0xb4>)
 800213a:	f00a fefe 	bl	800cf3a <HAL_UARTEx_ReceiveToIdle_IT>
				RX_BUFFER_SIZE);
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000244 	.word	0x20000244
 8002148:	20000264 	.word	0x20000264
 800214c:	2000026c 	.word	0x2000026c
 8002150:	20000268 	.word	0x20000268
 8002154:	20000010 	.word	0x20000010
 8002158:	200004ec 	.word	0x200004ec
 800215c:	00000000 	.word	0x00000000

08002160 <MeasureTempHum>:

void MeasureTempHum(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(&hi2c2, (uint16_t) (0x44 << 1), SHT40_dataRX, 6,
 8002166:	2364      	movs	r3, #100	; 0x64
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2306      	movs	r3, #6
 800216c:	4a40      	ldr	r2, [pc, #256]	; (8002270 <MeasureTempHum+0x110>)
 800216e:	2188      	movs	r1, #136	; 0x88
 8002170:	4840      	ldr	r0, [pc, #256]	; (8002274 <MeasureTempHum+0x114>)
 8002172:	f004 f9c9 	bl	8006508 <HAL_I2C_Master_Receive>
			100);
	temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <MeasureTempHum+0x110>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b29a      	uxth	r2, r3
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <MeasureTempHum+0x110>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4413      	add	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <MeasureTempHum+0x118>)
 800218c:	801a      	strh	r2, [r3, #0]
	th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <MeasureTempHum+0x110>)
 8002190:	78db      	ldrb	r3, [r3, #3]
 8002192:	b29b      	uxth	r3, r3
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <MeasureTempHum+0x110>)
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	b29b      	uxth	r3, r3
 800219e:	4413      	add	r3, r2
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <MeasureTempHum+0x11c>)
 80021a4:	801a      	strh	r2, [r3, #0]
	temp = -45.0 + 175.0 * (float) temp_hword / (float) 65535.0;
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <MeasureTempHum+0x118>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fd70 	bl	8000c90 <__aeabi_ui2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f94c 	bl	8000450 <__aeabi_f2d>
 80021b8:	a329      	add	r3, pc, #164	; (adr r3, 8002260 <MeasureTempHum+0x100>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe f99f 	bl	8000500 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	a327      	add	r3, pc, #156	; (adr r3, 8002268 <MeasureTempHum+0x108>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fac0 	bl	8000754 <__aeabi_ddiv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <MeasureTempHum+0x120>)
 80021e2:	f7fd ffd5 	bl	8000190 <__aeabi_dsub>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fc49 	bl	8000a84 <__aeabi_d2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <MeasureTempHum+0x124>)
 80021f6:	6013      	str	r3, [r2, #0]
	humidity = -6.0 + 125.0 * (float) th_hword / (float) 65535.0;
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <MeasureTempHum+0x11c>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fd47 	bl	8000c90 <__aeabi_ui2f>
 8002202:	4603      	mov	r3, r0
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f923 	bl	8000450 <__aeabi_f2d>
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <MeasureTempHum+0x128>)
 8002210:	f7fe f976 	bl	8000500 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	a312      	add	r3, pc, #72	; (adr r3, 8002268 <MeasureTempHum+0x108>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe fa97 	bl	8000754 <__aeabi_ddiv>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <MeasureTempHum+0x12c>)
 8002234:	f7fd ffac 	bl	8000190 <__aeabi_dsub>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f7fe fc20 	bl	8000a84 <__aeabi_d2f>
 8002244:	4603      	mov	r3, r0
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <MeasureTempHum+0x130>)
 8002248:	6013      	str	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t) (0x44 << 1),
 800224a:	2364      	movs	r3, #100	; 0x64
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	4a10      	ldr	r2, [pc, #64]	; (8002294 <MeasureTempHum+0x134>)
 8002252:	2188      	movs	r1, #136	; 0x88
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <MeasureTempHum+0x114>)
 8002256:	f004 f863 	bl	8006320 <HAL_I2C_Master_Transmit>
			(uint8_t*) &SHT40_cmd, 1, 100);
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	00000000 	.word	0x00000000
 8002264:	4065e000 	.word	0x4065e000
 8002268:	00000000 	.word	0x00000000
 800226c:	40efffe0 	.word	0x40efffe0
 8002270:	200002b0 	.word	0x200002b0
 8002274:	200001f0 	.word	0x200001f0
 8002278:	200002b6 	.word	0x200002b6
 800227c:	200002b8 	.word	0x200002b8
 8002280:	40468000 	.word	0x40468000
 8002284:	20000270 	.word	0x20000270
 8002288:	405f4000 	.word	0x405f4000
 800228c:	40180000 	.word	0x40180000
 8002290:	20000274 	.word	0x20000274
 8002294:	20000009 	.word	0x20000009

08002298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d12e      	bne.n	8002306 <HAL_TIM_PeriodElapsedCallback+0x6e>
		counter++;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b0:	6013      	str	r3, [r2, #0]
		switch (counter) {
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x34>
 80022bc:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80022c0:	dc0f      	bgt.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d006      	beq.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80022c6:	2b0a      	cmp	r3, #10
 80022c8:	d008      	beq.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x44>
 80022ca:	e00a      	b.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		case 820:
			F1_push(EnablePM_sens);
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80022ce:	f000 f847 	bl	8002360 <F1_push>

			break;
 80022d2:	e006      	b.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		case 5:
			PM_measure_flag = 1;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]

			break;
 80022da:	e002      	b.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		case 10:
			//  F1_push(DisablePM_sens);

			PM_measure_flag = 0;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
		}
		F1_push(MeasureTempHum);
 80022e2:	480f      	ldr	r0, [pc, #60]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022e4:	f000 f83c 	bl	8002360 <F1_push>

		counter %= 20;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ee:	fb83 2301 	smull	r2, r3, r3, r1
 80022f2:	10da      	asrs	r2, r3, #3
 80022f4:	17cb      	asrs	r3, r1, #31
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	1aca      	subs	r2, r1, r3
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002304:	601a      	str	r2, [r3, #0]
	}
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200003b8 	.word	0x200003b8
 8002314:	20000278 	.word	0x20000278
 8002318:	0800208d 	.word	0x0800208d
 800231c:	20000000 	.word	0x20000000
 8002320:	08002161 	.word	0x08002161
 8002324:	66666667 	.word	0x66666667

08002328 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002330:	e7fe      	b.n	8002330 <Error_Handler+0x8>

08002332 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  F1_last = 0;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <F1_QueueIni+0x18>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <F1_QueueIni+0x1c>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	200002bc 	.word	0x200002bc
 800235c:	200002c0 	.word	0x200002c0

08002360 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <F1_push+0x5c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	425a      	negs	r2, r3
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	f002 020f 	and.w	r2, r2, #15
 8002378:	bf58      	it	pl
 800237a:	4253      	negpl	r3, r2
 800237c:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <F1_push+0x60>)
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <F1_push+0x28>
 8002384:	2301      	movs	r3, #1
 8002386:	e014      	b.n	80023b2 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <F1_push+0x5c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	490b      	ldr	r1, [pc, #44]	; (80023bc <F1_push+0x5c>)
 8002390:	600a      	str	r2, [r1, #0]
 8002392:	490c      	ldr	r1, [pc, #48]	; (80023c4 <F1_push+0x64>)
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <F1_push+0x5c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	425a      	negs	r2, r3
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	f002 020f 	and.w	r2, r2, #15
 80023a8:	bf58      	it	pl
 80023aa:	4253      	negpl	r3, r2
 80023ac:	4a03      	ldr	r2, [pc, #12]	; (80023bc <F1_push+0x5c>)
 80023ae:	6013      	str	r3, [r2, #0]
  return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	200002bc 	.word	0x200002bc
 80023c0:	200002c0 	.word	0x200002c0
 80023c4:	200002c4 	.word	0x200002c4

080023c8 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <F1_pull+0x4c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <F1_pull+0x50>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d101      	bne.n	80023de <F1_pull+0x16>
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <F1_pull+0x54>)
 80023dc:	e014      	b.n	8002408 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <F1_pull+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <F1_pull+0x50>)
 80023e6:	600a      	str	r2, [r1, #0]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <F1_pull+0x58>)
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <F1_pull+0x50>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	425a      	negs	r2, r3
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	f002 020f 	and.w	r2, r2, #15
 80023fe:	bf58      	it	pl
 8002400:	4253      	negpl	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <F1_pull+0x50>)
 8002404:	6013      	str	r3, [r2, #0]
  return pullVar;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200002bc 	.word	0x200002bc
 8002418:	200002c0 	.word	0x200002c0
 800241c:	08002333 	.word	0x08002333
 8002420:	200002c4 	.word	0x200002c4

08002424 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <LL_APB1_GRP1_EnableClock>:
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002468:	68fb      	ldr	r3, [r7, #12]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	222c      	movs	r2, #44	; 0x2c
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f01c faa5 	bl	801e9d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <MX_RTC_Init+0x9c>)
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <MX_RTC_Init+0xa0>)
 800248a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <MX_RTC_Init+0x9c>)
 800248e:	221f      	movs	r2, #31
 8002490:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <MX_RTC_Init+0x9c>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_RTC_Init+0x9c>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <MX_RTC_Init+0x9c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_RTC_Init+0x9c>)
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_RTC_Init+0x9c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_RTC_Init+0x9c>)
 80024b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024ba:	4815      	ldr	r0, [pc, #84]	; (8002510 <MX_RTC_Init+0x9c>)
 80024bc:	f005 ffa4 	bl	8008408 <HAL_RTC_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80024c6:	f7ff ff2f 	bl	8002328 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80024ca:	4811      	ldr	r0, [pc, #68]	; (8002510 <MX_RTC_Init+0x9c>)
 80024cc:	f006 fa9a 	bl	8008a04 <HAL_RTCEx_SetSSRU_IT>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80024d6:	f7ff ff27 	bl	8002328 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80024e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024ea:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80024ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_RTC_Init+0x9c>)
 80024fa:	f006 f807 	bl	800850c <HAL_RTC_SetAlarm_IT>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002504:	f7ff ff10 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	3730      	adds	r7, #48	; 0x30
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000304 	.word	0x20000304
 8002514:	40002800 	.word	0x40002800

08002518 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b090      	sub	sp, #64	; 0x40
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	2238      	movs	r2, #56	; 0x38
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f01c fa51 	bl	801e9d0 <memset>
  if(rtcHandle->Instance==RTC)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_RTC_MspInit+0x74>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d125      	bne.n	8002584 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4618      	mov	r0, r3
 800254a:	f005 fe43 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002554:	f7ff fee8 	bl	8002328 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002558:	f7ff ff64 	bl	8002424 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800255c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002560:	f7ff ff70 	bl	8002444 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	2002      	movs	r0, #2
 800256a:	f002 fd1e 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800256e:	2002      	movs	r0, #2
 8002570:	f002 fd35 	bl	8004fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2100      	movs	r1, #0
 8002578:	202a      	movs	r0, #42	; 0x2a
 800257a:	f002 fd16 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800257e:	202a      	movs	r0, #42	; 0x2a
 8002580:	f002 fd2d 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002584:	bf00      	nop
 8002586:	3740      	adds	r7, #64	; 0x40
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40002800 	.word	0x40002800

08002590 <LL_AHB2_GRP1_EnableClock>:
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800259e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4013      	ands	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <LL_APB1_GRP1_EnableClock>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <MX_SPI2_Init+0x74>)
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <MX_SPI2_Init+0x78>)
 80025f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_SPI2_Init+0x74>)
 80025fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002600:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <MX_SPI2_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <MX_SPI2_Init+0x74>)
 800260a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800260e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_SPI2_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_SPI2_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_SPI2_Init+0x74>)
 800261e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002622:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_SPI2_Init+0x74>)
 8002626:	2218      	movs	r2, #24
 8002628:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_SPI2_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_SPI2_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_SPI2_Init+0x74>)
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_SPI2_Init+0x74>)
 800263e:	2207      	movs	r2, #7
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <MX_SPI2_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_SPI2_Init+0x74>)
 800264a:	2208      	movs	r2, #8
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_SPI2_Init+0x74>)
 8002650:	f006 fa66 	bl	8008b20 <HAL_SPI_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800265a:	f7ff fe65 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000033c 	.word	0x2000033c
 8002668:	40003800 	.word	0x40003800

0800266c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b096      	sub	sp, #88	; 0x58
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2238      	movs	r2, #56	; 0x38
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f01c f99f 	bl	801e9d0 <memset>
  if(spiHandle->Instance==SPI2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_SPI_MspInit+0xb0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d13b      	bne.n	8002714 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800269c:	2310      	movs	r3, #16
 800269e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80026a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4618      	mov	r0, r3
 80026ac:	f005 fd92 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80026b6:	f7ff fe37 	bl	8002328 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026be:	f7ff ff7f 	bl	80025c0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2002      	movs	r0, #2
 80026c4:	f7ff ff64 	bl	8002590 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff ff61 	bl	8002590 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80026ce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80026d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e0:	2305      	movs	r3, #5
 80026e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026e8:	4619      	mov	r1, r3
 80026ea:	480d      	ldr	r0, [pc, #52]	; (8002720 <HAL_SPI_MspInit+0xb4>)
 80026ec:	f003 fb2a 	bl	8005d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002702:	2305      	movs	r3, #5
 8002704:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002710:	f003 fb18 	bl	8005d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002714:	bf00      	nop
 8002716:	3758      	adds	r7, #88	; 0x58
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40003800 	.word	0x40003800
 8002720:	48000400 	.word	0x48000400

08002724 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800272a:	2201      	movs	r2, #1
 800272c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	58000400 	.word	0x58000400

0800273c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002758:	f001 fa94 	bl	8003c84 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800275c:	f7ff ffe2 	bl	8002724 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002760:	2001      	movs	r0, #1
 8002762:	f004 fb59 	bl	8006e18 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}

0800276a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800276e:	f001 fa97 	bl	8003ca0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002772:	f001 f90b 	bl	800398c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}

0800277a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800277e:	f001 fa81 	bl	8003c84 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002782:	2101      	movs	r1, #1
 8002784:	2000      	movs	r0, #0
 8002786:	f004 fac3 	bl	8006d10 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}

0800278e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002792:	f001 fa85 	bl	8003ca0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <NMI_Handler+0x4>

080027ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <HardFault_Handler+0x4>

080027b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <MemManage_Handler+0x4>

080027b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <BusFault_Handler+0x4>

080027be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <UsageFault_Handler+0x4>

080027c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80027fa:	f006 f93f 	bl	8008a7c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000304 	.word	0x20000304

08002808 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <DMA1_Channel1_IRQHandler+0x10>)
 800280e:	f002 fe7d 	bl	800550c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000580 	.word	0x20000580

0800281c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <DMA1_Channel2_IRQHandler+0x10>)
 8002822:	f002 fe73 	bl	800550c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200005e0 	.word	0x200005e0

08002830 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002834:	4804      	ldr	r0, [pc, #16]	; (8002848 <TIM16_IRQHandler+0x18>)
 8002836:	f007 ffbf 	bl	800a7b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <TIM16_IRQHandler+0x1c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a02      	ldr	r2, [pc, #8]	; (800284c <TIM16_IRQHandler+0x1c>)
 8002842:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200003b8 	.word	0x200003b8
 800284c:	200003a0 	.word	0x200003a0

08002850 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002854:	4804      	ldr	r0, [pc, #16]	; (8002868 <TIM17_IRQHandler+0x18>)
 8002856:	f007 ffaf 	bl	800a7b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <TIM17_IRQHandler+0x1c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	4a02      	ldr	r2, [pc, #8]	; (800286c <TIM17_IRQHandler+0x1c>)
 8002862:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000404 	.word	0x20000404
 800286c:	200003a4 	.word	0x200003a4

08002870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <USART1_IRQHandler+0x10>)
 8002876:	f008 fa9d 	bl	800adb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000458 	.word	0x20000458

08002884 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <USART2_IRQHandler+0x10>)
 800288a:	f008 fa93 	bl	800adb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200004ec 	.word	0x200004ec

08002898 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <RTC_Alarm_IRQHandler+0x10>)
 800289e:	f005 ff9d 	bl	80087dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000304 	.word	0x20000304

080028ac <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <SUBGHZ_Radio_IRQHandler+0x10>)
 80028b2:	f007 fd3f 	bl	800a334 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200003a8 	.word	0x200003a8

080028c0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <DMAMUX1_OVR_IRQHandler+0x10>)
 80028c6:	f002 ffd1 	bl	800586c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200005e0 	.word	0x200005e0

080028d4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <MX_SUBGHZ_Init+0x20>)
 800290a:	2208      	movs	r2, #8
 800290c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_SUBGHZ_Init+0x20>)
 8002910:	f007 fa8e 	bl	8009e30 <HAL_SUBGHZ_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800291a:	f7ff fd05 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003a8 	.word	0x200003a8

08002928 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002930:	2001      	movs	r0, #1
 8002932:	f7ff ffcf 	bl	80028d4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2032      	movs	r0, #50	; 0x32
 800293c:	f002 fb35 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002940:	2032      	movs	r0, #50	; 0x32
 8002942:	f002 fb4c 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <LL_RCC_SetClkAfterWakeFromStop>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002978:	4b02      	ldr	r3, [pc, #8]	; (8002984 <LL_FLASH_GetUDN+0x10>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	1fff7580 	.word	0x1fff7580

08002988 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <LL_FLASH_GetDeviceID+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	1fff7584 	.word	0x1fff7584

080029a0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <LL_FLASH_GetSTCompanyID+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0a1b      	lsrs	r3, r3, #8
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	1fff7584 	.word	0x1fff7584

080029b8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff ffc6 	bl	800294e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80029c2:	f01b facf 	bl	801df64 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <SystemApp_Init+0x50>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80029cc:	f000 f98c 	bl	8002ce8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80029d0:	f01b fd58 	bl	801e484 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <SystemApp_Init+0x54>)
 80029d6:	f01b fe03 	bl	801e5e0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <SystemApp_Init+0x58>)
 80029dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029e0:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80029e2:	2002      	movs	r0, #2
 80029e4:	f01b fe0a 	bl	801e5fc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80029e8:	f7fe fe2e 	bl	8001648 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80029ec:	f000 f9b4 	bl	8002d58 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80029f0:	f01a fc84 	bl	801d2fc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029f4:	2101      	movs	r1, #1
 80029f6:	2001      	movs	r0, #1
 80029f8:	f01a fcc0 	bl	801d37c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029fc:	2101      	movs	r1, #1
 80029fe:	2001      	movs	r0, #1
 8002a00:	f01a fc8c 	bl	801d31c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200003b4 	.word	0x200003b4
 8002a0c:	08002be1 	.word	0x08002be1
 8002a10:	58004000 	.word	0x58004000

08002a14 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002a18:	f01a fce0 	bl	801d3dc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002a2a:	f7fe fe1b 	bl	8001664 <SYS_GetBatteryLevel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002a32:	88bb      	ldrh	r3, [r7, #4]
 8002a34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d902      	bls.n	8002a42 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002a3c:	23fe      	movs	r3, #254	; 0xfe
 8002a3e:	71fb      	strb	r3, [r7, #7]
 8002a40:	e014      	b.n	8002a6c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002a42:	88bb      	ldrh	r3, [r7, #4]
 8002a44:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002a48:	d202      	bcs.n	8002a50 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	71fb      	strb	r3, [r7, #7]
 8002a4e:	e00d      	b.n	8002a6c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002a56:	461a      	mov	r2, r3
 8002a58:	4613      	mov	r3, r2
 8002a5a:	01db      	lsls	r3, r3, #7
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <GetBatteryLevel+0x58>)
 8002a64:	fba3 2302 	umull	r2, r3, r3, r2
 8002a68:	09db      	lsrs	r3, r3, #7
 8002a6a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	1b4e81b5 	.word	0x1b4e81b5

08002a7c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f93b 	bl	8002d04 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe f955 	bl	8000d40 <__aeabi_f2iz>
 8002a96:	4603      	mov	r3, r0
 8002a98:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002a9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002aa6:	b590      	push	{r4, r7, lr}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002ab2:	f7ff ff5f 	bl	8002974 <LL_FLASH_GetUDN>
 8002ab6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d138      	bne.n	8002b32 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002ac0:	f001 f8fc 	bl	8003cbc <HAL_GetUIDw0>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	f001 f90d 	bl	8003ce4 <HAL_GetUIDw2>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4423      	add	r3, r4
 8002ace:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002ad0:	f001 f8fe 	bl	8003cd0 <HAL_GetUIDw1>
 8002ad4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	0e1a      	lsrs	r2, r3, #24
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3307      	adds	r3, #7
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	0c1a      	lsrs	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3306      	adds	r3, #6
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	0a1a      	lsrs	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3305      	adds	r3, #5
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	0e1a      	lsrs	r2, r3, #24
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3303      	adds	r3, #3
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	0c1a      	lsrs	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3302      	adds	r3, #2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	0a1a      	lsrs	r2, r3, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002b30:	e031      	b.n	8002b96 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3307      	adds	r3, #7
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	0a1a      	lsrs	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3306      	adds	r3, #6
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	0c1a      	lsrs	r2, r3, #16
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3305      	adds	r3, #5
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	0e1a      	lsrs	r2, r3, #24
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002b60:	f7ff ff12 	bl	8002988 <LL_FLASH_GetDeviceID>
 8002b64:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002b70:	f7ff ff16 	bl	80029a0 <LL_FLASH_GetSTCompanyID>
 8002b74:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3302      	adds	r3, #2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	0a1a      	lsrs	r2, r3, #8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}

08002b9e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002b9e:	b590      	push	{r4, r7, lr}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002ba6:	f7ff fee5 	bl	8002974 <LL_FLASH_GetUDN>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d10d      	bne.n	8002bd6 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002bba:	f001 f87f 	bl	8003cbc <HAL_GetUIDw0>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f001 f886 	bl	8003cd0 <HAL_GetUIDw1>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	405c      	eors	r4, r3
 8002bc8:	f001 f88c 	bl	8003ce4 <HAL_GetUIDw2>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	ea84 0203 	eor.w	r2, r4, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
	...

08002be0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002bea:	f107 0308 	add.w	r3, r7, #8
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f01a fd04 	bl	801d5fc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bfa:	9200      	str	r2, [sp, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <TimestampNow+0x3c>)
 8002bfe:	2110      	movs	r1, #16
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f81d 	bl	8002c40 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fd fab6 	bl	8000178 <strlen>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	0801ec20 	.word	0x0801ec20

08002c20 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002c24:	2101      	movs	r1, #1
 8002c26:	2002      	movs	r0, #2
 8002c28:	f01a fb78 	bl	801d31c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002c34:	2100      	movs	r1, #0
 8002c36:	2002      	movs	r0, #2
 8002c38:	f01a fb70 	bl	801d31c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002c40:	b40c      	push	{r2, r3}
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f01a fea1 	bl	801d9a0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c68:	b002      	add	sp, #8
 8002c6a:	4770      	bx	lr

08002c6c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_GetTick+0x24>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002c92:	f000 f9dd 	bl	8003050 <TIMER_IF_GetTimerValue>
 8002c96:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200003b4 	.word	0x200003b4

08002ca8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fa53 	bl	800315e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002cca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002cce:	4905      	ldr	r1, [pc, #20]	; (8002ce4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	58000800 	.word	0x58000800

08002ce8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002cec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cf0:	f7ff ffe6 	bl	8002cc0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002cf4:	f001 f800 	bl	8003cf8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002cf8:	f001 f804 	bl	8003d04 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002cfc:	f001 f808 	bl	8003d10 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <EnvSensors_Read+0x40>)
 8002d0e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <EnvSensors_Read+0x44>)
 8002d12:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <EnvSensors_Read+0x48>)
 8002d16:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <EnvSensors_Read+0x4c>)
 8002d2e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <EnvSensors_Read+0x50>)
 8002d34:	611a      	str	r2, [r3, #16]

  return 0;
 8002d36:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	42480000 	.word	0x42480000
 8002d48:	41900000 	.word	0x41900000
 8002d4c:	447a0000 	.word	0x447a0000
 8002d50:	003e090d 	.word	0x003e090d
 8002d54:	000503ab 	.word	0x000503ab

08002d58 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002d62:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <LL_APB2_GRP1_EnableClock>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
	...

08002dac <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002db2:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <MX_TIM16_Init+0x64>)
 8002db4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dbc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002dc6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002dca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002dde:	480b      	ldr	r0, [pc, #44]	; (8002e0c <MX_TIM16_Init+0x60>)
 8002de0:	f007 fc46 	bl	800a670 <HAL_TIM_Base_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002dea:	f7ff fa9d 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002dee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002df2:	f7ff ffc2 	bl	8002d7a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	201c      	movs	r0, #28
 8002dfc:	f002 f8d5 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002e00:	201c      	movs	r0, #28
 8002e02:	f002 f8ec 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200003b8 	.word	0x200003b8
 8002e10:	40014400 	.word	0x40014400

08002e14 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e1a:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <MX_TIM17_Init+0x60>)
 8002e1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e30:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <MX_TIM17_Init+0x5c>)
 8002e46:	f007 fc13 	bl	800a670 <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002e50:	f7ff fa6a 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002e54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e58:	f7ff ff8f 	bl	8002d7a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	201d      	movs	r0, #29
 8002e62:	f002 f8a2 	bl	8004faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e66:	201d      	movs	r0, #29
 8002e68:	f002 f8b9 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000404 	.word	0x20000404
 8002e74:	40014800 	.word	0x40014800

08002e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <HAL_TIM_Base_MspInit+0x58>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10c      	bne.n	8002ea4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e8e:	f7ff ff74 	bl	8002d7a <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	201c      	movs	r0, #28
 8002e98:	f002 f887 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002e9c:	201c      	movs	r0, #28
 8002e9e:	f002 f89e 	bl	8004fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002ea2:	e010      	b.n	8002ec6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_TIM_Base_MspInit+0x5c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10b      	bne.n	8002ec6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002eae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002eb2:	f7ff ff62 	bl	8002d7a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	201d      	movs	r0, #29
 8002ebc:	f002 f875 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002ec0:	201d      	movs	r0, #29
 8002ec2:	f002 f88c 	bl	8004fde <HAL_NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800

08002ed8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
	...

08002ef0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <TIMER_IF_Init+0x5c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <TIMER_IF_Init+0x60>)
 8002f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002f10:	f7ff fab0 	bl	8002474 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002f14:	f000 f856 	bl	8002fc4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <TIMER_IF_Init+0x60>)
 8002f1e:	f005 fc01 	bl	8008724 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <TIMER_IF_Init+0x60>)
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002f2a:	4809      	ldr	r0, [pc, #36]	; (8002f50 <TIMER_IF_Init+0x60>)
 8002f2c:	f005 fd38 	bl	80089a0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f000 f9d3 	bl	80032dc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002f36:	f000 f85f 	bl	8002ff8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <TIMER_IF_Init+0x5c>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002f40:	79fb      	ldrb	r3, [r7, #7]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000450 	.word	0x20000450
 8002f50:	20000304 	.word	0x20000304

08002f54 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	222c      	movs	r2, #44	; 0x2c
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f01b fd30 	bl	801e9d0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002f70:	f000 f828 	bl	8002fc4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <TIMER_IF_StartTimer+0x68>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002f8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f90:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4807      	ldr	r0, [pc, #28]	; (8002fc0 <TIMER_IF_StartTimer+0x6c>)
 8002fa2:	f005 fab3 	bl	800850c <HAL_RTC_SetAlarm_IT>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002fac:	f7ff f9bc 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3738      	adds	r7, #56	; 0x38
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000454 	.word	0x20000454
 8002fc0:	20000304 	.word	0x20000304

08002fc4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <TIMER_IF_StopTimer+0x2c>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd8:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <TIMER_IF_StopTimer+0x30>)
 8002fda:	f005 fba3 	bl	8008724 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <TIMER_IF_StopTimer+0x30>)
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40002800 	.word	0x40002800
 8002ff4:	20000304 	.word	0x20000304

08002ff8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002ffc:	f000 f98e 	bl	800331c <GetTimerTicks>
 8003000:	4603      	mov	r3, r0
 8003002:	4a03      	ldr	r2, [pc, #12]	; (8003010 <TIMER_IF_SetTimerContext+0x18>)
 8003004:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8003006:	4b02      	ldr	r3, [pc, #8]	; (8003010 <TIMER_IF_SetTimerContext+0x18>)
 8003008:	681b      	ldr	r3, [r3, #0]
}
 800300a:	4618      	mov	r0, r3
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000454 	.word	0x20000454

08003014 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <TIMER_IF_GetTimerContext+0x10>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	20000454 	.word	0x20000454

08003028 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8003032:	f000 f973 	bl	800331c <GetTimerTicks>
 8003036:	4602      	mov	r2, r0
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000454 	.word	0x20000454

08003050 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <TIMER_IF_GetTimerValue+0x24>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8003062:	f000 f95b 	bl	800331c <GetTimerTicks>
 8003066:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8003068:	687b      	ldr	r3, [r7, #4]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000450 	.word	0x20000450

08003078 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8003082:	2303      	movs	r3, #3
 8003084:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8003086:	687b      	ldr	r3, [r7, #4]
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003092:	b5b0      	push	{r4, r5, r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800309a:	2100      	movs	r1, #0
 800309c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	2000      	movs	r0, #0
 80030a2:	460a      	mov	r2, r1
 80030a4:	4603      	mov	r3, r0
 80030a6:	0d95      	lsrs	r5, r2, #22
 80030a8:	0294      	lsls	r4, r2, #10
 80030aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f7fd fe69 	bl	8000d8c <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4613      	mov	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bdb0      	pop	{r4, r5, r7, pc}

080030cc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80030cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80030d6:	2100      	movs	r1, #0
 80030d8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	2000      	movs	r0, #0
 80030de:	460c      	mov	r4, r1
 80030e0:	4605      	mov	r5, r0
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f04f 0a00 	mov.w	sl, #0
 80030ea:	f04f 0b00 	mov.w	fp, #0
 80030ee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80030f2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80030f6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80030fa:	4650      	mov	r0, sl
 80030fc:	4659      	mov	r1, fp
 80030fe:	1b02      	subs	r2, r0, r4
 8003100:	eb61 0305 	sbc.w	r3, r1, r5
 8003104:	f04f 0000 	mov.w	r0, #0
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	0099      	lsls	r1, r3, #2
 800310e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003112:	0090      	lsls	r0, r2, #2
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	eb12 0804 	adds.w	r8, r2, r4
 800311c:	eb43 0905 	adc.w	r9, r3, r5
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003134:	4690      	mov	r8, r2
 8003136:	4699      	mov	r9, r3
 8003138:	4640      	mov	r0, r8
 800313a:	4649      	mov	r1, r9
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	0a82      	lsrs	r2, r0, #10
 8003146:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800314a:	0a8b      	lsrs	r3, r1, #10
 800314c:	4613      	mov	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8003150:	68fb      	ldr	r3, [r7, #12]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800315c:	4770      	bx	lr

0800315e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ff93 	bl	8003092 <TIMER_IF_Convert_ms2Tick>
 800316c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800316e:	f000 f8d5 	bl	800331c <GetTimerTicks>
 8003172:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003174:	e000      	b.n	8003178 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8003176:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003178:	f000 f8d0 	bl	800331c <GetTimerTicks>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f6      	bhi.n	8003176 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800319a:	f01b f831 	bl	801e200 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80031ae:	f000 f8a5 	bl	80032fc <TIMER_IF_BkUp_Read_MSBticks>
 80031b2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f88f 	bl	80032dc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80031c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80031d4:	f000 f8a2 	bl	800331c <GetTimerTicks>
 80031d8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80031da:	f000 f88f 	bl	80032fc <TIMER_IF_BkUp_Read_MSBticks>
 80031de:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	2200      	movs	r2, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	000b      	movs	r3, r1
 80031f4:	2200      	movs	r2, #0
 80031f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f8:	2000      	movs	r0, #0
 80031fa:	460c      	mov	r4, r1
 80031fc:	4605      	mov	r5, r0
 80031fe:	eb12 0804 	adds.w	r8, r2, r4
 8003202:	eb43 0905 	adc.w	r9, r3, r5
 8003206:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800320a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	0a82      	lsrs	r2, r0, #10
 8003218:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800321c:	0a8b      	lsrs	r3, r1, #10
 800321e:	4613      	mov	r3, r2
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2200      	movs	r2, #0
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003230:	f04f 0b00 	mov.w	fp, #0
 8003234:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff46 	bl	80030cc <TIMER_IF_Convert_Tick2ms>
 8003240:	4603      	mov	r3, r0
 8003242:	b29a      	uxth	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800324a:	4618      	mov	r0, r3
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003254 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	2100      	movs	r1, #0
 8003260:	4803      	ldr	r0, [pc, #12]	; (8003270 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003262:	f005 fc2f 	bl	8008ac4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000304 	.word	0x20000304

08003274 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	2101      	movs	r1, #1
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8003282:	f005 fc1f 	bl	8008ac4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000304 	.word	0x20000304

08003294 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800329e:	2100      	movs	r1, #0
 80032a0:	4804      	ldr	r0, [pc, #16]	; (80032b4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80032a2:	f005 fc27 	bl	8008af4 <HAL_RTCEx_BKUPRead>
 80032a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80032a8:	687b      	ldr	r3, [r7, #4]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000304 	.word	0x20000304

080032b8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80032c2:	2101      	movs	r1, #1
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80032c6:	f005 fc15 	bl	8008af4 <HAL_RTCEx_BKUPRead>
 80032ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80032cc:	687b      	ldr	r3, [r7, #4]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000304 	.word	0x20000304

080032dc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	2102      	movs	r1, #2
 80032e8:	4803      	ldr	r0, [pc, #12]	; (80032f8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80032ea:	f005 fbeb 	bl	8008ac4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000304 	.word	0x20000304

080032fc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003302:	2102      	movs	r1, #2
 8003304:	4804      	ldr	r0, [pc, #16]	; (8003318 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8003306:	f005 fbf5 	bl	8008af4 <HAL_RTCEx_BKUPRead>
 800330a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800330c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000304 	.word	0x20000304

0800331c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003322:	480b      	ldr	r0, [pc, #44]	; (8003350 <GetTimerTicks+0x34>)
 8003324:	f7ff fdd8 	bl	8002ed8 <LL_RTC_TIME_GetSubSecond>
 8003328:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800332a:	e003      	b.n	8003334 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800332c:	4808      	ldr	r0, [pc, #32]	; (8003350 <GetTimerTicks+0x34>)
 800332e:	f7ff fdd3 	bl	8002ed8 <LL_RTC_TIME_GetSubSecond>
 8003332:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003334:	4806      	ldr	r0, [pc, #24]	; (8003350 <GetTimerTicks+0x34>)
 8003336:	f7ff fdcf 	bl	8002ed8 <LL_RTC_TIME_GetSubSecond>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4293      	cmp	r3, r2
 8003340:	d1f4      	bne.n	800332c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40002800 	.word	0x40002800

08003354 <LL_AHB2_GRP1_EnableClock>:
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4313      	orrs	r3, r2
 800336a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003378:	68fb      	ldr	r3, [r7, #12]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <LL_APB1_GRP1_EnableClock>:
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4313      	orrs	r3, r2
 800339a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <LL_APB1_GRP1_DisableClock>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ca:	4013      	ands	r3, r2
 80033cc:	658b      	str	r3, [r1, #88]	; 0x58
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_APB2_GRP1_EnableClock>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <LL_APB2_GRP1_DisableClock>:
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003414:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	43db      	mvns	r3, r3
 800341a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341e:	4013      	ands	r3, r2
 8003420:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <LL_SYSCFG_EnableFastModePlus>:
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4904      	ldr	r1, [pc, #16]	; (800344c <LL_SYSCFG_EnableFastModePlus+0x20>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000

08003450 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003456:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <MX_USART1_UART_Init+0xa4>)
 8003458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 800345c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003476:	220c      	movs	r2, #12
 8003478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800348c:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 800348e:	2200      	movs	r2, #0
 8003490:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 8003494:	2240      	movs	r2, #64	; 0x40
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 800349a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034a6:	4812      	ldr	r0, [pc, #72]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 80034a8:	f007 fb68 	bl	800ab7c <HAL_UART_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80034b2:	f7fe ff39 	bl	8002328 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034b6:	2100      	movs	r1, #0
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 80034ba:	f009 fcc2 	bl	800ce42 <HAL_UARTEx_SetTxFifoThreshold>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80034c4:	f7fe ff30 	bl	8002328 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034c8:	2100      	movs	r1, #0
 80034ca:	4809      	ldr	r0, [pc, #36]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 80034cc:	f009 fcf7 	bl	800cebe <HAL_UARTEx_SetRxFifoThreshold>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80034d6:	f7fe ff27 	bl	8002328 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80034da:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_USART1_UART_Init+0xa0>)
 80034dc:	f009 fc3e 	bl	800cd5c <HAL_UARTEx_EnableFifoMode>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80034e6:	f7fe ff1f 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000458 	.word	0x20000458
 80034f4:	40013800 	.word	0x40013800

080034f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034fc:	4b23      	ldr	r3, [pc, #140]	; (800358c <MX_USART2_UART_Init+0x94>)
 80034fe:	4a24      	ldr	r2, [pc, #144]	; (8003590 <MX_USART2_UART_Init+0x98>)
 8003500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003504:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <MX_USART2_UART_Init+0x94>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <MX_USART2_UART_Init+0x94>)
 800351e:	220c      	movs	r2, #12
 8003520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003528:	4b18      	ldr	r3, [pc, #96]	; (800358c <MX_USART2_UART_Init+0x94>)
 800352a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800352e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003530:	4b16      	ldr	r3, [pc, #88]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003538:	2200      	movs	r2, #0
 800353a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <MX_USART2_UART_Init+0x94>)
 800353e:	2200      	movs	r2, #0
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003542:	4812      	ldr	r0, [pc, #72]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003544:	f007 fb1a 	bl	800ab7c <HAL_UART_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800354e:	f7fe feeb 	bl	8002328 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003552:	2100      	movs	r1, #0
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003556:	f009 fc74 	bl	800ce42 <HAL_UARTEx_SetTxFifoThreshold>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003560:	f7fe fee2 	bl	8002328 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003564:	2100      	movs	r1, #0
 8003566:	4809      	ldr	r0, [pc, #36]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003568:	f009 fca9 	bl	800cebe <HAL_UARTEx_SetRxFifoThreshold>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003572:	f7fe fed9 	bl	8002328 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_USART2_UART_Init+0x94>)
 8003578:	f009 fc2b 	bl	800cdd2 <HAL_UARTEx_DisableFifoMode>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003582:	f7fe fed1 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200004ec 	.word	0x200004ec
 8003590:	40004400 	.word	0x40004400

08003594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b09a      	sub	sp, #104	; 0x68
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80035ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035ba:	f107 030c 	add.w	r3, r7, #12
 80035be:	2238      	movs	r2, #56	; 0x38
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f01b fa04 	bl	801e9d0 <memset>
  if(uartHandle->Instance==USART1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6f      	ldr	r2, [pc, #444]	; (800378c <HAL_UART_MspInit+0x1f8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f040 80a4 	bne.w	800371c <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80035dc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	4618      	mov	r0, r3
 80035e4:	f004 fdf6 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 80035ee:	f7fe fe9b 	bl	8002328 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035f6:	f7ff feef 	bl	80033d8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	2002      	movs	r0, #2
 80035fc:	f7ff feaa 	bl	8003354 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003600:	23c0      	movs	r3, #192	; 0xc0
 8003602:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003608:	2301      	movs	r3, #1
 800360a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800360c:	2301      	movs	r3, #1
 800360e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003610:	2307      	movs	r3, #7
 8003612:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003618:	4619      	mov	r1, r3
 800361a:	485d      	ldr	r0, [pc, #372]	; (8003790 <HAL_UART_MspInit+0x1fc>)
 800361c:	f002 fb92 	bl	8005d44 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003620:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003624:	f7ff ff02 	bl	800342c <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003628:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800362c:	f7ff fefe 	bl	800342c <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003630:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003632:	4a59      	ldr	r2, [pc, #356]	; (8003798 <HAL_UART_MspInit+0x204>)
 8003634:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003638:	2212      	movs	r2, #18
 800363a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <HAL_UART_MspInit+0x200>)
 800363e:	2210      	movs	r2, #16
 8003640:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_UART_MspInit+0x200>)
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800365a:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <HAL_UART_MspInit+0x200>)
 800365c:	2200      	movs	r2, #0
 800365e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003666:	484b      	ldr	r0, [pc, #300]	; (8003794 <HAL_UART_MspInit+0x200>)
 8003668:	f001 fcd6 	bl	8005018 <HAL_DMA_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003672:	f7fe fe59 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a46      	ldr	r2, [pc, #280]	; (8003794 <HAL_UART_MspInit+0x200>)
 800367a:	67da      	str	r2, [r3, #124]	; 0x7c
 800367c:	4a45      	ldr	r2, [pc, #276]	; (8003794 <HAL_UART_MspInit+0x200>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <HAL_UART_MspInit+0x208>)
 8003684:	4a46      	ldr	r2, [pc, #280]	; (80037a0 <HAL_UART_MspInit+0x20c>)
 8003686:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003688:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_UART_MspInit+0x208>)
 800368a:	2211      	movs	r2, #17
 800368c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_UART_MspInit+0x208>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003694:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_UART_MspInit+0x208>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800369a:	4b40      	ldr	r3, [pc, #256]	; (800379c <HAL_UART_MspInit+0x208>)
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_UART_MspInit+0x208>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_UART_MspInit+0x208>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_UART_MspInit+0x208>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_UART_MspInit+0x208>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80036b8:	4838      	ldr	r0, [pc, #224]	; (800379c <HAL_UART_MspInit+0x208>)
 80036ba:	f001 fcad 	bl	8005018 <HAL_DMA_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80036c4:	f7fe fe30 	bl	8002328 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80036cc:	2300      	movs	r3, #0
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 80036dc:	2301      	movs	r3, #1
 80036de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 80036e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036e4:	4619      	mov	r1, r3
 80036e6:	482d      	ldr	r0, [pc, #180]	; (800379c <HAL_UART_MspInit+0x208>)
 80036e8:	f002 f880 	bl	80057ec <HAL_DMAEx_ConfigMuxSync>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80036f2:	f7fe fe19 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_UART_MspInit+0x208>)
 80036fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80036fe:	4a27      	ldr	r2, [pc, #156]	; (800379c <HAL_UART_MspInit+0x208>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	2102      	movs	r1, #2
 8003708:	2024      	movs	r0, #36	; 0x24
 800370a:	f001 fc4e 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800370e:	2024      	movs	r0, #36	; 0x24
 8003710:	f001 fc65 	bl	8004fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003714:	200c      	movs	r0, #12
 8003716:	f001 fc62 	bl	8004fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800371a:	e033      	b.n	8003784 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <HAL_UART_MspInit+0x210>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d12e      	bne.n	8003784 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003726:	2302      	movs	r3, #2
 8003728:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800372a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800372e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fd4d 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8003740:	f7fe fdf2 	bl	8002328 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003744:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003748:	f7ff fe1c 	bl	8003384 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	2001      	movs	r0, #1
 800374e:	f7ff fe01 	bl	8003354 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003752:	230c      	movs	r3, #12
 8003754:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800375a:	2301      	movs	r3, #1
 800375c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800375e:	2301      	movs	r3, #1
 8003760:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003762:	2307      	movs	r3, #7
 8003764:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800376a:	4619      	mov	r1, r3
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003770:	f002 fae8 	bl	8005d44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	2025      	movs	r0, #37	; 0x25
 800377a:	f001 fc16 	bl	8004faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800377e:	2025      	movs	r0, #37	; 0x25
 8003780:	f001 fc2d 	bl	8004fde <HAL_NVIC_EnableIRQ>
}
 8003784:	bf00      	nop
 8003786:	3768      	adds	r7, #104	; 0x68
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40013800 	.word	0x40013800
 8003790:	48000400 	.word	0x48000400
 8003794:	20000580 	.word	0x20000580
 8003798:	40020008 	.word	0x40020008
 800379c:	200005e0 	.word	0x200005e0
 80037a0:	4002001c 	.word	0x4002001c
 80037a4:	40004400 	.word	0x40004400

080037a8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_UART_MspDeInit+0x6c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d116      	bne.n	80037e8 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80037be:	f7ff fe23 	bl	8003408 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80037c2:	21c0      	movs	r1, #192	; 0xc0
 80037c4:	4814      	ldr	r0, [pc, #80]	; (8003818 <HAL_UART_MspDeInit+0x70>)
 80037c6:	f002 fc1d 	bl	8006004 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fcca 	bl	8005168 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fcc4 	bl	8005168 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80037e0:	2024      	movs	r0, #36	; 0x24
 80037e2:	f001 fc0a 	bl	8004ffa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80037e6:	e010      	b.n	800380a <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <HAL_UART_MspDeInit+0x74>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10b      	bne.n	800380a <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 80037f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80037f6:	f7ff fddd 	bl	80033b4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80037fa:	210c      	movs	r1, #12
 80037fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003800:	f002 fc00 	bl	8006004 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003804:	2025      	movs	r0, #37	; 0x25
 8003806:	f001 fbf8 	bl	8004ffa <HAL_NVIC_DisableIRQ>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40013800 	.word	0x40013800
 8003818:	48000400 	.word	0x48000400
 800381c:	40004400 	.word	0x40004400

08003820 <LL_APB2_GRP1_ForceReset>:
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4313      	orrs	r3, r2
 8003836:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <LL_APB2_GRP1_ReleaseReset>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	43db      	mvns	r3, r3
 8003854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003858:	4013      	ands	r3, r2
 800385a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <LL_EXTI_EnableIT_0_31>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <LL_EXTI_EnableIT_0_31+0x24>)
 8003872:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003876:	4905      	ldr	r1, [pc, #20]	; (800388c <LL_EXTI_EnableIT_0_31+0x24>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	58000800 	.word	0x58000800

08003890 <vcom_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void*)) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vcom_Init_1 */

	/* USER CODE END vcom_Init_1 */
	TxCpltCallback = cb;
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <vcom_Init+0x28>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
	MX_DMA_Init();
 800389e:	f7fd ff73 	bl	8001788 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80038a2:	f7ff fdd5 	bl	8003450 <MX_USART1_UART_Init>
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80038a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80038aa:	f7ff ffdd 	bl	8003868 <LL_EXTI_EnableIT_0_31>
	return UTIL_ADV_TRACE_OK;
 80038ae:	2300      	movs	r3, #0
	/* USER CODE BEGIN vcom_Init_2 */

	/* USER CODE END vcom_Init_2 */
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000644 	.word	0x20000644

080038bc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN vcom_DeInit_1 */

	/* USER CODE END vcom_DeInit_1 */
	/* ##-1- Reset peripherals ################################################## */
	__HAL_RCC_USART1_FORCE_RESET();
 80038c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038c4:	f7ff ffac 	bl	8003820 <LL_APB2_GRP1_ForceReset>
	__HAL_RCC_USART1_RELEASE_RESET();
 80038c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038cc:	f7ff ffb9 	bl	8003842 <LL_APB2_GRP1_ReleaseReset>

	/* ##-2- MspDeInit ################################################## */
	HAL_UART_MspDeInit(&huart1);
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <vcom_DeInit+0x28>)
 80038d2:	f7ff ff69 	bl	80037a8 <HAL_UART_MspDeInit>

	/* ##-3- Disable the NVIC for DMA ########################################### */
	/* USER CODE BEGIN 1 */
	HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80038d6:	200f      	movs	r0, #15
 80038d8:	f001 fb8f 	bl	8004ffa <HAL_NVIC_DisableIRQ>

	return UTIL_ADV_TRACE_OK;
 80038dc:	2300      	movs	r3, #0
	/* USER CODE END 1 */
	/* USER CODE BEGIN vcom_DeInit_2 */

	/* USER CODE END vcom_DeInit_2 */
}
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000458 	.word	0x20000458

080038e8 <vcom_Trace_DMA>:
	/* USER CODE BEGIN vcom_Trace_2 */

	/* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
	/* USER CODE BEGIN vcom_Trace_DMA_1 */

	/* USER CODE END vcom_Trace_DMA_1 */
	HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	461a      	mov	r2, r3
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4804      	ldr	r0, [pc, #16]	; (800390c <vcom_Trace_DMA+0x24>)
 80038fc:	f007 f9da 	bl	800acb4 <HAL_UART_Transmit_DMA>
	return UTIL_ADV_TRACE_OK;
 8003900:	2300      	movs	r3, #0
	/* USER CODE BEGIN vcom_Trace_DMA_2 */

	/* USER CODE END vcom_Trace_DMA_2 */
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000458 	.word	0x20000458

08003910 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(
		void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error)) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

	/* USER CODE END vcom_ReceiveInit_1 */
	UART_WakeUpTypeDef WakeUpSelection;

	/*record call back*/
	RxCpltCallback = RxCb;
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <vcom_ReceiveInit+0x70>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]

	/*Set wakeUp event on start bit*/
	WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800391e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003922:	60bb      	str	r3, [r7, #8]

	HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	e893 0006 	ldmia.w	r3, {r1, r2}
 800392c:	4815      	ldr	r0, [pc, #84]	; (8003984 <vcom_ReceiveInit+0x74>)
 800392e:	f009 f988 	bl	800cc42 <HAL_UARTEx_StopModeWakeUpSourceConfig>

	/* Make sure that no UART transfer is on-going */
	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8003932:	bf00      	nop
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <vcom_ReceiveInit+0x74>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d0f7      	beq.n	8003934 <vcom_ReceiveInit+0x24>
		;

	/* Make sure that UART is ready to receive)   */
	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 8003944:	bf00      	nop
 8003946:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <vcom_ReceiveInit+0x74>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003954:	d1f7      	bne.n	8003946 <vcom_ReceiveInit+0x36>
		;

	/* Enable USART interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <vcom_ReceiveInit+0x74>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <vcom_ReceiveInit+0x74>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003964:	609a      	str	r2, [r3, #8]

	/*Enable wakeup from stop mode*/
	HAL_UARTEx_EnableStopMode(&huart1);
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <vcom_ReceiveInit+0x74>)
 8003968:	f009 f9c6 	bl	800ccf8 <HAL_UARTEx_EnableStopMode>

	/*Start LPUART receive on IT*/
	HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800396c:	2201      	movs	r2, #1
 800396e:	4906      	ldr	r1, [pc, #24]	; (8003988 <vcom_ReceiveInit+0x78>)
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <vcom_ReceiveInit+0x74>)
 8003972:	f007 f953 	bl	800ac1c <HAL_UART_Receive_IT>

	return UTIL_ADV_TRACE_OK;
 8003976:	2300      	movs	r3, #0
	/* USER CODE BEGIN vcom_ReceiveInit_2 */

	/* USER CODE END vcom_ReceiveInit_2 */
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000648 	.word	0x20000648
 8003984:	20000458 	.word	0x20000458
 8003988:	20000640 	.word	0x20000640

0800398c <vcom_Resume>:

void vcom_Resume(void) {
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN vcom_Resume_1 */

	/* USER CODE END vcom_Resume_1 */
	/*to re-enable lost UART settings*/
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <vcom_Resume+0x28>)
 8003992:	f007 f8f3 	bl	800ab7c <HAL_UART_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <vcom_Resume+0x14>
		Error_Handler();
 800399c:	f7fe fcc4 	bl	8002328 <Error_Handler>
	}

	/*to re-enable lost DMA settings*/
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80039a0:	4805      	ldr	r0, [pc, #20]	; (80039b8 <vcom_Resume+0x2c>)
 80039a2:	f001 fb39 	bl	8005018 <HAL_DMA_Init>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <vcom_Resume+0x24>
		Error_Handler();
 80039ac:	f7fe fcbc 	bl	8002328 <Error_Handler>
	}
	/* USER CODE BEGIN vcom_Resume_2 */

	/* USER CODE END vcom_Resume_2 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000458 	.word	0x20000458
 80039b8:	20000580 	.word	0x20000580

080039bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

	/* USER CODE END HAL_UART_TxCpltCallback_1 */
	/* buffer transmission complete*/
	if (huart->Instance == USART1) {
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <HAL_UART_TxCpltCallback+0x24>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d103      	bne.n	80039d6 <HAL_UART_TxCpltCallback+0x1a>
		TxCpltCallback(NULL);
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_UART_TxCpltCallback+0x28>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2000      	movs	r0, #0
 80039d4:	4798      	blx	r3
	}
	/* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

	/* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40013800 	.word	0x40013800
 80039e4:	20000644 	.word	0x20000644

080039e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

	/* USER CODE END HAL_UART_RxCpltCallback_1 */
	if (huart->Instance == USART1) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <HAL_UART_RxCpltCallback+0x54>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d113      	bne.n	8003a22 <HAL_UART_RxCpltCallback+0x3a>
		if ((NULL != RxCpltCallback)
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_UART_RxCpltCallback+0x58>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_UART_RxCpltCallback+0x30>
				&& (HAL_UART_ERROR_NONE == huart->ErrorCode)) {
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_UART_RxCpltCallback+0x30>
			RxCpltCallback(&charRx, 1, 0);
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_UART_RxCpltCallback+0x58>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <HAL_UART_RxCpltCallback+0x5c>)
 8003a16:	4798      	blx	r3
		}
		HAL_UART_Receive_IT(huart, &charRx, 1);
 8003a18:	2201      	movs	r2, #1
 8003a1a:	490a      	ldr	r1, [pc, #40]	; (8003a44 <HAL_UART_RxCpltCallback+0x5c>)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f007 f8fd 	bl	800ac1c <HAL_UART_Receive_IT>
	}
	/* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

	if (huart->Instance == USART2) {
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_UART_RxCpltCallback+0x60>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d102      	bne.n	8003a32 <HAL_UART_RxCpltCallback+0x4a>

		UART2_SET = 1;
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_UART_RxCpltCallback+0x64>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
	}

	/* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	20000648 	.word	0x20000648
 8003a44:	20000640 	.word	0x20000640
 8003a48:	40004400 	.word	0x40004400
 8003a4c:	20000010 	.word	0x20000010

08003a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a50:	480d      	ldr	r0, [pc, #52]	; (8003a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a54:	f7ff f98b 	bl	8002d6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a58:	480c      	ldr	r0, [pc, #48]	; (8003a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a5a:	490d      	ldr	r1, [pc, #52]	; (8003a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <LoopForever+0xe>)
  movs r3, #0
 8003a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a60:	e002      	b.n	8003a68 <LoopCopyDataInit>

08003a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a66:	3304      	adds	r3, #4

08003a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a6c:	d3f9      	bcc.n	8003a62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a70:	4c0a      	ldr	r4, [pc, #40]	; (8003a9c <LoopForever+0x16>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a74:	e001      	b.n	8003a7a <LoopFillZerobss>

08003a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a78:	3204      	adds	r2, #4

08003a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a7c:	d3fb      	bcc.n	8003a76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a7e:	f01a ffaf 	bl	801e9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a82:	f7fe fa51 	bl	8001f28 <main>

08003a86 <LoopForever>:

LoopForever:
    b LoopForever
 8003a86:	e7fe      	b.n	8003a86 <LoopForever>
  ldr   r0, =_estack
 8003a88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a90:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8003a94:	0801fbc8 	.word	0x0801fbc8
  ldr r2, =_sbss
 8003a98:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003a9c:	200020b8 	.word	0x200020b8

08003aa0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <ADC_IRQHandler>

08003aa2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ace:	f002 f939 	bl	8005d44 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ade:	f002 f931 	bl	8005d44 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aea:	f002 fb59 	bl	80061a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003aee:	2200      	movs	r2, #0
 8003af0:	2110      	movs	r1, #16
 8003af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af6:	f002 fb53 	bl	80061a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d83f      	bhi.n	8003b94 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b47 	.word	0x08003b47
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b7b 	.word	0x08003b7b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2110      	movs	r1, #16
 8003b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b34:	f002 fb34 	bl	80061a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b40:	f002 fb2e 	bl	80061a0 <HAL_GPIO_WritePin>
      break;      
 8003b44:	e027      	b.n	8003b96 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b46:	2201      	movs	r2, #1
 8003b48:	2110      	movs	r1, #16
 8003b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4e:	f002 fb27 	bl	80061a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b52:	2200      	movs	r2, #0
 8003b54:	2120      	movs	r1, #32
 8003b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5a:	f002 fb21 	bl	80061a0 <HAL_GPIO_WritePin>
      break;
 8003b5e:	e01a      	b.n	8003b96 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b60:	2201      	movs	r2, #1
 8003b62:	2110      	movs	r1, #16
 8003b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b68:	f002 fb1a 	bl	80061a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	2120      	movs	r1, #32
 8003b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b74:	f002 fb14 	bl	80061a0 <HAL_GPIO_WritePin>
      break;
 8003b78:	e00d      	b.n	8003b96 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2110      	movs	r1, #16
 8003b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b82:	f002 fb0d 	bl	80061a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b86:	2201      	movs	r2, #1
 8003b88:	2120      	movs	r1, #32
 8003b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8e:	f002 fb07 	bl	80061a0 <HAL_GPIO_WritePin>
      break;
 8003b92:	e000      	b.n	8003b96 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003b94:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003ba4:	2302      	movs	r3, #2
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003bc0:	2301      	movs	r3, #1
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003bda:	230f      	movs	r3, #15
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e001      	b.n	8003be4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003be0:	2316      	movs	r3, #22
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a03      	ldr	r2, [pc, #12]	; (8003c08 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6053      	str	r3, [r2, #4]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	e0042000 	.word	0xe0042000

08003c0c <LL_DBGMCU_EnableDBGStopMode>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a03      	ldr	r2, [pc, #12]	; (8003c24 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	6053      	str	r3, [r2, #4]
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	e0042000 	.word	0xe0042000

08003c28 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a03      	ldr	r2, [pc, #12]	; (8003c40 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	6053      	str	r3, [r2, #4]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	e0042000 	.word	0xe0042000

08003c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c4e:	2003      	movs	r0, #3
 8003c50:	f001 f9a0 	bl	8004f94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c54:	f004 f8e0 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_Init+0x3c>)
 8003c5c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5e:	200f      	movs	r0, #15
 8003c60:	f7ff f804 	bl	8002c6c <HAL_InitTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	e001      	b.n	8003c74 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c70:	f7fe fd93 	bl	800279a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c74:	79fb      	ldrb	r3, [r7, #7]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_SuspendTick+0x18>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <HAL_SuspendTick+0x18>)
 8003c8e:	f023 0302 	bic.w	r3, r3, #2
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	e000e010 	.word	0xe000e010

08003ca0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_ResumeTick+0x18>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a03      	ldr	r2, [pc, #12]	; (8003cb8 <HAL_ResumeTick+0x18>)
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <HAL_GetUIDw0+0x10>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	1fff7590 	.word	0x1fff7590

08003cd0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <HAL_GetUIDw1+0x10>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	1fff7594 	.word	0x1fff7594

08003ce4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003ce8:	4b02      	ldr	r3, [pc, #8]	; (8003cf4 <HAL_GetUIDw2+0x10>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	1fff7598 	.word	0x1fff7598

08003cf8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003cfc:	f7ff ff78 	bl	8003bf0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003d08:	f7ff ff80 	bl	8003c0c <LL_DBGMCU_EnableDBGStopMode>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003d14:	f7ff ff88 	bl	8003c28 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2107      	movs	r1, #7
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2107      	movs	r1, #7
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	210f      	movs	r1, #15
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	401a      	ands	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	f003 010f 	and.w	r1, r3, #15
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e64:	43db      	mvns	r3, r3
 8003e66:	401a      	ands	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0219      	lsls	r1, r3, #8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	400b      	ands	r3, r1
 8003e96:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ebe:	f023 0317 	bic.w	r3, r3, #23
 8003ec2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ee4:	f023 0317 	bic.w	r3, r3, #23
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6093      	str	r3, [r2, #8]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0a:	d101      	bne.n	8003f10 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f023 0317 	bic.w	r3, r3, #23
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f52:	f023 0317 	bic.w	r3, r3, #23
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <LL_ADC_IsEnabled+0x18>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <LL_ADC_IsEnabled+0x1a>
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d101      	bne.n	8003fa4 <LL_ADC_IsDisableOngoing+0x18>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <LL_ADC_IsDisableOngoing+0x1a>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fc0:	f023 0317 	bic.w	r3, r3, #23
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fe6:	f023 0317 	bic.w	r3, r3, #23
 8003fea:	f043 0210 	orr.w	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d101      	bne.n	8004014 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e17e      	b.n	8004340 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fd fad1 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff44 	bl	8003ef6 <LL_ADC_IsInternalRegulatorEnabled>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d115      	bne.n	80040a0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff18 	bl	8003eae <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800407e:	4b9e      	ldr	r3, [pc, #632]	; (80042f8 <HAL_ADC_Init+0x2d8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	4a9d      	ldr	r2, [pc, #628]	; (80042fc <HAL_ADC_Init+0x2dc>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	3301      	adds	r3, #1
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004092:	e002      	b.n	800409a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f9      	bne.n	8004094 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff26 	bl	8003ef6 <LL_ADC_IsInternalRegulatorEnabled>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f043 0210 	orr.w	r2, r3, #16
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff93 	bl	8003ffc <LL_ADC_REG_IsConversionOngoing>
 80040d6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 8124 	bne.w	800432e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 8120 	bne.w	800432e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff30 	bl	8003f68 <LL_ADC_IsEnabled>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 80a7 	bne.w	800425e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7e1b      	ldrb	r3, [r3, #24]
 8004118:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800411a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7e5b      	ldrb	r3, [r3, #25]
 8004120:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004122:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7e9b      	ldrb	r3, [r3, #26]
 8004128:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800412a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004130:	2a00      	cmp	r2, #0
 8004132:	d002      	beq.n	800413a <HAL_ADC_Init+0x11a>
 8004134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004138:	e000      	b.n	800413c <HAL_ADC_Init+0x11c>
 800413a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800413c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004142:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da04      	bge.n	8004156 <HAL_ADC_Init+0x136>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004154:	e001      	b.n	800415a <HAL_ADC_Init+0x13a>
 8004156:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800415a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004162:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004164:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d114      	bne.n	80041a0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	7e9b      	ldrb	r3, [r3, #26]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e00b      	b.n	80041a0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041b4:	4313      	orrs	r3, r2
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80041c6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	69b9      	ldr	r1, [r7, #24]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041e0:	4313      	orrs	r3, r2
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d111      	bne.n	8004216 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004204:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800420a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	4b38      	ldr	r3, [pc, #224]	; (8004300 <HAL_ADC_Init+0x2e0>)
 800421e:	4013      	ands	r3, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	430b      	orrs	r3, r1
 8004228:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004232:	d014      	beq.n	800425e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d00f      	beq.n	800425e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004246:	d00a      	beq.n	800425e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004248:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <HAL_ADC_Init+0x2e4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004258:	492a      	ldr	r1, [pc, #168]	; (8004304 <HAL_ADC_Init+0x2e4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	461a      	mov	r2, r3
 8004268:	2100      	movs	r1, #0
 800426a:	f7ff fd76 	bl	8003d5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	461a      	mov	r2, r3
 8004278:	4923      	ldr	r1, [pc, #140]	; (8004308 <HAL_ADC_Init+0x2e8>)
 800427a:	f7ff fd6e 	bl	8003d5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f062 020f 	orn	r2, r2, #15
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
 8004296:	e017      	b.n	80042c8 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a0:	d112      	bne.n	80042c8 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	f003 031c 	and.w	r3, r3, #28
 80042b4:	f06f 020f 	mvn.w	r2, #15
 80042b8:	fa02 f103 	lsl.w	r1, r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fd61 	bl	8003d96 <LL_ADC_GetSamplingTimeCommonChannels>
 80042d4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042da:	429a      	cmp	r2, r3
 80042dc:	d116      	bne.n	800430c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	f023 0303 	bic.w	r3, r3, #3
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042f4:	e023      	b.n	800433e <HAL_ADC_Init+0x31e>
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	053e2d63 	.word	0x053e2d63
 8004300:	1ffffc02 	.word	0x1ffffc02
 8004304:	40012708 	.word	0x40012708
 8004308:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f023 0312 	bic.w	r3, r3, #18
 8004314:	f043 0210 	orr.w	r2, r3, #16
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800432c:	e007      	b.n	800433e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f043 0210 	orr.w	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800433e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e07a      	b.n	8004450 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	f043 0202 	orr.w	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 face 	bl	8004908 <ADC_ConversionStop>
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fb92 	bl	8004aa0 <ADC_Disable>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fd9f 	bl	8003ed4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80043a4:	f023 0303 	bic.w	r3, r3, #3
 80043a8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f240 329f 	movw	r2, #927	; 0x39f
 80043b2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68d9      	ldr	r1, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_ADC_DeInit+0x110>)
 80043c0:	400b      	ands	r3, r1
 80043c2:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80043d2:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0207 	bic.w	r2, r2, #7
 80043e2:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a1a      	ldr	r2, [r3, #32]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043f2:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_ADC_DeInit+0x114>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a0d      	ldr	r2, [pc, #52]	; (800445c <HAL_ADC_DeInit+0x114>)
 8004428:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800442c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd f8f6 	bl	8001620 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	833e0200 	.word	0x833e0200
 800445c:	40012708 	.word	0x40012708

08004460 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fdc5 	bl	8003ffc <LL_ADC_REG_IsConversionOngoing>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d132      	bne.n	80044de <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Start+0x26>
 8004482:	2302      	movs	r3, #2
 8004484:	e02e      	b.n	80044e4 <HAL_ADC_Start+0x84>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa80 	bl	8004994 <ADC_Enable>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11a      	bne.n	80044d4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	221c      	movs	r2, #28
 80044be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fd6f 	bl	8003fb0 <LL_ADC_REG_StartConversion>
 80044d2:	e006      	b.n	80044e2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80044dc:	e001      	b.n	80044e2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_Stop+0x16>
 80044fe:	2302      	movs	r3, #2
 8004500:	e022      	b.n	8004548 <HAL_ADC_Stop+0x5c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9fc 	bl	8004908 <ADC_ConversionStop>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d111      	bne.n	800453e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fac0 	bl	8004aa0 <ADC_Disable>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d102      	bne.n	8004568 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004562:	2308      	movs	r3, #8
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e010      	b.n	800458a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e077      	b.n	8004676 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004586:	2304      	movs	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800458a:	f7fe fb79 	bl	8002c80 <HAL_GetTick>
 800458e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004590:	e021      	b.n	80045d6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d01d      	beq.n	80045d6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800459a:	f7fe fb71 	bl	8002c80 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <HAL_ADC_PollForConversion+0x60>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d112      	bne.n	80045d6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f043 0204 	orr.w	r2, r3, #4
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e04f      	b.n	8004676 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0d6      	beq.n	8004592 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fbe6 	bl	8003dc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d031      	beq.n	8004664 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	7e9b      	ldrb	r3, [r3, #26]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d12d      	bne.n	8004664 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b08      	cmp	r3, #8
 8004614:	d126      	bne.n	8004664 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fcee 	bl	8003ffc <LL_ADC_REG_IsConversionOngoing>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d112      	bne.n	800464c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 020c 	bic.w	r2, r2, #12
 8004634:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	659a      	str	r2, [r3, #88]	; 0x58
 800464a:	e00b      	b.n	8004664 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	f043 0201 	orr.w	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7e1b      	ldrb	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	220c      	movs	r2, #12
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
	...

08004698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x28>
 80046bc:	2302      	movs	r3, #2
 80046be:	e110      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x24a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fc95 	bl	8003ffc <LL_ADC_REG_IsConversionOngoing>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 80f7 	bne.w	80048c8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	f000 80b1 	beq.w	8004846 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ec:	d004      	beq.n	80046f8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046f2:	4a7e      	ldr	r2, [pc, #504]	; (80048ec <HAL_ADC_ConfigChannel+0x254>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7ff fb92 	bl	8003e2c <LL_ADC_REG_SetSequencerChAdd>
 8004708:	e041      	b.n	800478e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	210f      	movs	r1, #15
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004728:	2b00      	cmp	r3, #0
 800472a:	d105      	bne.n	8004738 <HAL_ADC_ConfigChannel+0xa0>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	e011      	b.n	800475c <HAL_ADC_ConfigChannel+0xc4>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004750:	2320      	movs	r3, #32
 8004752:	e003      	b.n	800475c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6849      	ldr	r1, [r1, #4]
 8004760:	f001 011f 	and.w	r1, r1, #31
 8004764:	408b      	lsls	r3, r1
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	429a      	cmp	r2, r3
 800477a:	d808      	bhi.n	800478e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	f7ff fb2e 	bl	8003dea <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	461a      	mov	r2, r3
 800479c:	f7ff fb6b 	bl	8003e76 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f280 8097 	bge.w	80048d8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047aa:	4851      	ldr	r0, [pc, #324]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 80047ac:	f7ff fac8 	bl	8003d40 <LL_ADC_GetCommonPathInternalCh>
 80047b0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a4f      	ldr	r2, [pc, #316]	; (80048f4 <HAL_ADC_ConfigChannel+0x25c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d120      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d11b      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047cc:	4619      	mov	r1, r3
 80047ce:	4848      	ldr	r0, [pc, #288]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 80047d0:	f7ff faa4 	bl	8003d1c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047d4:	4b48      	ldr	r3, [pc, #288]	; (80048f8 <HAL_ADC_ConfigChannel+0x260>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	099b      	lsrs	r3, r3, #6
 80047da:	4a48      	ldr	r2, [pc, #288]	; (80048fc <HAL_ADC_ConfigChannel+0x264>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047ee:	e002      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f9      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047fc:	e06c      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a3f      	ldr	r2, [pc, #252]	; (8004900 <HAL_ADC_ConfigChannel+0x268>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10c      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d107      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004818:	4619      	mov	r1, r3
 800481a:	4835      	ldr	r0, [pc, #212]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 800481c:	f7ff fa7e 	bl	8003d1c <LL_ADC_SetCommonPathInternalCh>
 8004820:	e05a      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a37      	ldr	r2, [pc, #220]	; (8004904 <HAL_ADC_ConfigChannel+0x26c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d155      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d150      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800483c:	4619      	mov	r1, r3
 800483e:	482c      	ldr	r0, [pc, #176]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 8004840:	f7ff fa6c 	bl	8003d1c <LL_ADC_SetCommonPathInternalCh>
 8004844:	e048      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484e:	d004      	beq.n	800485a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004854:	4a25      	ldr	r2, [pc, #148]	; (80048ec <HAL_ADC_ConfigChannel+0x254>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d107      	bne.n	800486a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7ff faf3 	bl	8003e50 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	da32      	bge.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004872:	481f      	ldr	r0, [pc, #124]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 8004874:	f7ff fa64 	bl	8003d40 <LL_ADC_GetCommonPathInternalCh>
 8004878:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_ADC_ConfigChannel+0x25c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d107      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800488a:	4619      	mov	r1, r3
 800488c:	4818      	ldr	r0, [pc, #96]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 800488e:	f7ff fa45 	bl	8003d1c <LL_ADC_SetCommonPathInternalCh>
 8004892:	e021      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_ADC_ConfigChannel+0x268>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d107      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a4:	4619      	mov	r1, r3
 80048a6:	4812      	ldr	r0, [pc, #72]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 80048a8:	f7ff fa38 	bl	8003d1c <LL_ADC_SetCommonPathInternalCh>
 80048ac:	e014      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a14      	ldr	r2, [pc, #80]	; (8004904 <HAL_ADC_ConfigChannel+0x26c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10f      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80048be:	4619      	mov	r1, r3
 80048c0:	480b      	ldr	r0, [pc, #44]	; (80048f0 <HAL_ADC_ConfigChannel+0x258>)
 80048c2:	f7ff fa2b 	bl	8003d1c <LL_ADC_SetCommonPathInternalCh>
 80048c6:	e007      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	80000004 	.word	0x80000004
 80048f0:	40012708 	.word	0x40012708
 80048f4:	b0001000 	.word	0xb0001000
 80048f8:	2000000c 	.word	0x2000000c
 80048fc:	053e2d63 	.word	0x053e2d63
 8004900:	b8004000 	.word	0xb8004000
 8004904:	b4002000 	.word	0xb4002000

08004908 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fb71 	bl	8003ffc <LL_ADC_REG_IsConversionOngoing>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d033      	beq.n	8004988 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fb31 	bl	8003f8c <LL_ADC_IsDisableOngoing>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fb4e 	bl	8003fd6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800493a:	f7fe f9a1 	bl	8002c80 <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004940:	e01b      	b.n	800497a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004942:	f7fe f99d 	bl	8002c80 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d914      	bls.n	800497a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f043 0210 	orr.w	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e007      	b.n	800498a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1dc      	bne.n	8004942 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fadf 	bl	8003f68 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d169      	bne.n	8004a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <ADC_Enable+0xfc>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f043 0210 	orr.w	r2, r3, #16
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e055      	b.n	8004a86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fa9c 	bl	8003f1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80049e4:	482b      	ldr	r0, [pc, #172]	; (8004a94 <ADC_Enable+0x100>)
 80049e6:	f7ff f9ab 	bl	8003d40 <LL_ADC_GetCommonPathInternalCh>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00f      	beq.n	8004a14 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049f4:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <ADC_Enable+0x104>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <ADC_Enable+0x108>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004a04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a06:	e002      	b.n	8004a0e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f9      	bne.n	8004a08 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	7e5b      	ldrb	r3, [r3, #25]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d033      	beq.n	8004a84 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a1c:	f7fe f930 	bl	8002c80 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a22:	e028      	b.n	8004a76 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fa9d 	bl	8003f68 <LL_ADC_IsEnabled>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fa6f 	bl	8003f1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a3e:	f7fe f91f 	bl	8002c80 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d914      	bls.n	8004a76 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00d      	beq.n	8004a76 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	f043 0210 	orr.w	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e007      	b.n	8004a86 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d1cf      	bne.n	8004a24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	80000017 	.word	0x80000017
 8004a94:	40012708 	.word	0x40012708
 8004a98:	2000000c 	.word	0x2000000c
 8004a9c:	053e2d63 	.word	0x053e2d63

08004aa0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fa6d 	bl	8003f8c <LL_ADC_IsDisableOngoing>
 8004ab2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fa55 	bl	8003f68 <LL_ADC_IsEnabled>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d047      	beq.n	8004b54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d144      	bne.n	8004b54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0305 	and.w	r3, r3, #5
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10c      	bne.n	8004af2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fa30 	bl	8003f42 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aea:	f7fe f8c9 	bl	8002c80 <HAL_GetTick>
 8004aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004af0:	e029      	b.n	8004b46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f043 0210 	orr.w	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e023      	b.n	8004b56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b0e:	f7fe f8b7 	bl	8002c80 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d914      	bls.n	8004b46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e007      	b.n	8004b56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1dc      	bne.n	8004b0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <LL_ADC_SetCalibrationFactor>:
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b6e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <LL_ADC_GetCalibrationFactor>:
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <LL_ADC_Enable>:
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bb2:	f023 0317 	bic.w	r3, r3, #23
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <LL_ADC_Disable>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd8:	f023 0317 	bic.w	r3, r3, #23
 8004bdc:	f043 0202 	orr.w	r2, r3, #2
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <LL_ADC_IsEnabled>:
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <LL_ADC_IsEnabled+0x18>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <LL_ADC_IsEnabled+0x1a>
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <LL_ADC_StartCalibration>:
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c22:	f023 0317 	bic.w	r3, r3, #23
 8004c26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c4c:	d101      	bne.n	8004c52 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_ADCEx_Calibration_Start+0x1e>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e0b9      	b.n	8004df0 <HAL_ADCEx_Calibration_Start+0x192>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff0b 	bl	8004aa0 <ADC_Disable>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ffab 	bl	8004bee <LL_ADC_IsEnabled>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 809d 	bne.w	8004dda <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	f248 0303 	movw	r3, #32771	; 0x8003
 8004cba:	4013      	ands	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	e02e      	b.n	8004d36 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff98 	bl	8004c12 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ce2:	e014      	b.n	8004d0e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004cf0:	d30d      	bcc.n	8004d0e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	f023 0312 	bic.w	r3, r3, #18
 8004cfa:	f043 0210 	orr.w	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e070      	b.n	8004df0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff90 	bl	8004c38 <LL_ADC_IsCalibrationOnGoing>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e2      	bne.n	8004ce4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ff2f 	bl	8004b86 <LL_ADC_GetCalibrationFactor>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	3301      	adds	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b07      	cmp	r3, #7
 8004d3a:	d9cd      	bls.n	8004cd8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff ff29 	bl	8004ba2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ff01 	bl	8004b5e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff31 	bl	8004bc8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d66:	f7fd ff8b 	bl	8002c80 <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d6c:	e01c      	b.n	8004da8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d6e:	f7fd ff87 	bl	8002c80 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d915      	bls.n	8004da8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff34 	bl	8004bee <LL_ADC_IsEnabled>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e023      	b.n	8004df0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff1e 	bl	8004bee <LL_ADC_IsEnabled>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1da      	bne.n	8004d6e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68d9      	ldr	r1, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	f023 0303 	bic.w	r3, r3, #3
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	; 0x58
 8004dd8:	e005      	b.n	8004de6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f043 0210 	orr.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <__NVIC_SetPriorityGrouping+0x44>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e14:	4013      	ands	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <__NVIC_SetPriorityGrouping+0x44>)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	60d3      	str	r3, [r2, #12]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__NVIC_GetPriorityGrouping+0x18>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f003 0307 	and.w	r3, r3, #7
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db0b      	blt.n	8004e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	f003 021f 	and.w	r2, r3, #31
 8004e74:	4906      	ldr	r1, [pc, #24]	; (8004e90 <__NVIC_EnableIRQ+0x34>)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100

08004e94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db12      	blt.n	8004ecc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	f003 021f 	and.w	r2, r3, #31
 8004eac:	490a      	ldr	r1, [pc, #40]	; (8004ed8 <__NVIC_DisableIRQ+0x44>)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eba:	3320      	adds	r3, #32
 8004ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec0:	f3bf 8f4f 	dsb	sy
}
 8004ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ec6:	f3bf 8f6f 	isb	sy
}
 8004eca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	e000e100 	.word	0xe000e100

08004edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	db0a      	blt.n	8004f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	490c      	ldr	r1, [pc, #48]	; (8004f28 <__NVIC_SetPriority+0x4c>)
 8004ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efa:	0112      	lsls	r2, r2, #4
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	440b      	add	r3, r1
 8004f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f04:	e00a      	b.n	8004f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4908      	ldr	r1, [pc, #32]	; (8004f2c <__NVIC_SetPriority+0x50>)
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	3b04      	subs	r3, #4
 8004f14:	0112      	lsls	r2, r2, #4
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	440b      	add	r3, r1
 8004f1a:	761a      	strb	r2, [r3, #24]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000e100 	.word	0xe000e100
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	; 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f1c3 0307 	rsb	r3, r3, #7
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf28      	it	cs
 8004f4e:	2304      	movcs	r3, #4
 8004f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3304      	adds	r3, #4
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d902      	bls.n	8004f60 <NVIC_EncodePriority+0x30>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3b03      	subs	r3, #3
 8004f5e:	e000      	b.n	8004f62 <NVIC_EncodePriority+0x32>
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	401a      	ands	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f78:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	43d9      	mvns	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f88:	4313      	orrs	r3, r2
         );
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3724      	adds	r7, #36	; 0x24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff2b 	bl	8004df8 <__NVIC_SetPriorityGrouping>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fb8:	f7ff ff42 	bl	8004e40 <__NVIC_GetPriorityGrouping>
 8004fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff ffb4 	bl	8004f30 <NVIC_EncodePriority>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ff83 	bl	8004edc <__NVIC_SetPriority>
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff ff35 	bl	8004e5c <__NVIC_EnableIRQ>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	4603      	mov	r3, r0
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff43 	bl	8004e94 <__NVIC_DisableIRQ>
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e08e      	b.n	8005148 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_DMA_Init+0x138>)
 8005032:	429a      	cmp	r2, r3
 8005034:	d80f      	bhi.n	8005056 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	4b45      	ldr	r3, [pc, #276]	; (8005154 <HAL_DMA_Init+0x13c>)
 800503e:	4413      	add	r3, r2
 8005040:	4a45      	ldr	r2, [pc, #276]	; (8005158 <HAL_DMA_Init+0x140>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	009a      	lsls	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a42      	ldr	r2, [pc, #264]	; (800515c <HAL_DMA_Init+0x144>)
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
 8005054:	e00e      	b.n	8005074 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	4b40      	ldr	r3, [pc, #256]	; (8005160 <HAL_DMA_Init+0x148>)
 800505e:	4413      	add	r3, r2
 8005060:	4a3d      	ldr	r2, [pc, #244]	; (8005158 <HAL_DMA_Init+0x140>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	009a      	lsls	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <HAL_DMA_Init+0x14c>)
 8005072:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6819      	ldr	r1, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb24 	bl	8005714 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d4:	d102      	bne.n	80050dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <HAL_DMA_Init+0x106>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d80c      	bhi.n	800511e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb4d 	bl	80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	e008      	b.n	8005130 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40020407 	.word	0x40020407
 8005154:	bffdfff8 	.word	0xbffdfff8
 8005158:	cccccccd 	.word	0xcccccccd
 800515c:	40020000 	.word	0x40020000
 8005160:	bffdfbf8 	.word	0xbffdfbf8
 8005164:	40020400 	.word	0x40020400

08005168 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e07b      	b.n	8005272 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	4b3a      	ldr	r3, [pc, #232]	; (800527c <HAL_DMA_DeInit+0x114>)
 8005192:	429a      	cmp	r2, r3
 8005194:	d80f      	bhi.n	80051b6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4b38      	ldr	r3, [pc, #224]	; (8005280 <HAL_DMA_DeInit+0x118>)
 800519e:	4413      	add	r3, r2
 80051a0:	4a38      	ldr	r2, [pc, #224]	; (8005284 <HAL_DMA_DeInit+0x11c>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	009a      	lsls	r2, r3, #2
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a35      	ldr	r2, [pc, #212]	; (8005288 <HAL_DMA_DeInit+0x120>)
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
 80051b4:	e00e      	b.n	80051d4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_DMA_DeInit+0x124>)
 80051be:	4413      	add	r3, r2
 80051c0:	4a30      	ldr	r2, [pc, #192]	; (8005284 <HAL_DMA_DeInit+0x11c>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2f      	ldr	r2, [pc, #188]	; (8005290 <HAL_DMA_DeInit+0x128>)
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	f003 021c 	and.w	r2, r3, #28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f202 	lsl.w	r2, r1, r2
 80051ee:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa8f 	bl	8005714 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005206:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00f      	beq.n	8005230 <HAL_DMA_DeInit+0xc8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d80b      	bhi.n	8005230 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fac3 	bl	80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800522e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40020407 	.word	0x40020407
 8005280:	bffdfff8 	.word	0xbffdfff8
 8005284:	cccccccd 	.word	0xcccccccd
 8005288:	40020000 	.word	0x40020000
 800528c:	bffdfbf8 	.word	0xbffdfbf8
 8005290:	40020400 	.word	0x40020400

08005294 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_DMA_Start_IT+0x20>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e069      	b.n	8005388 <HAL_DMA_Start_IT+0xf4>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d155      	bne.n	8005374 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f9d3 	bl	8005698 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 020e 	orr.w	r2, r2, #14
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e00f      	b.n	800532c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 020a 	orr.w	r2, r2, #10
 800532a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005348:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005360:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e008      	b.n	8005386 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e04f      	b.n	8005442 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d008      	beq.n	80053c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2204      	movs	r2, #4
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e040      	b.n	8005442 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 020e 	bic.w	r2, r2, #14
 80053ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	f003 021c 	and.w	r2, r3, #28
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005402:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800540c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800542e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d005      	beq.n	8005470 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2204      	movs	r2, #4
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
 800546e:	e047      	b.n	8005500 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 020e 	bic.w	r2, r2, #14
 800547e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800549e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	f003 021c 	and.w	r2, r3, #28
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f202 	lsl.w	r2, r1, r2
 80054b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
    }
  }
  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f003 031c 	and.w	r3, r3, #28
 800552c:	2204      	movs	r2, #4
 800552e:	409a      	lsls	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d027      	beq.n	8005588 <HAL_DMA_IRQHandler+0x7c>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d022      	beq.n	8005588 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d107      	bne.n	8005560 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0204 	bic.w	r2, r2, #4
 800555e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005564:	f003 021c 	and.w	r2, r3, #28
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	2104      	movs	r1, #4
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8081 	beq.w	8005680 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005586:	e07b      	b.n	8005680 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	f003 031c 	and.w	r3, r3, #28
 8005590:	2202      	movs	r2, #2
 8005592:	409a      	lsls	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d03d      	beq.n	8005618 <HAL_DMA_IRQHandler+0x10c>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d038      	beq.n	8005618 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 020a 	bic.w	r2, r2, #10
 80055c2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	4b2e      	ldr	r3, [pc, #184]	; (800568c <HAL_DMA_IRQHandler+0x180>)
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d909      	bls.n	80055ec <HAL_DMA_IRQHandler+0xe0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	f003 031c 	and.w	r3, r3, #28
 80055e0:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <HAL_DMA_IRQHandler+0x184>)
 80055e2:	2102      	movs	r1, #2
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	6053      	str	r3, [r2, #4]
 80055ea:	e008      	b.n	80055fe <HAL_DMA_IRQHandler+0xf2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	f003 031c 	and.w	r3, r3, #28
 80055f4:	4a27      	ldr	r2, [pc, #156]	; (8005694 <HAL_DMA_IRQHandler+0x188>)
 80055f6:	2102      	movs	r1, #2
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d038      	beq.n	8005680 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005616:	e033      	b.n	8005680 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	f003 031c 	and.w	r3, r3, #28
 8005620:	2208      	movs	r2, #8
 8005622:	409a      	lsls	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02a      	beq.n	8005682 <HAL_DMA_IRQHandler+0x176>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d025      	beq.n	8005682 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 020e 	bic.w	r2, r2, #14
 8005644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	f003 021c 	and.w	r2, r3, #28
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f202 	lsl.w	r2, r1, r2
 8005658:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005680:	bf00      	nop
 8005682:	bf00      	nop
}
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40020080 	.word	0x40020080
 8005690:	40020400 	.word	0x40020400
 8005694:	40020000 	.word	0x40020000

08005698 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f003 021c 	and.w	r2, r3, #28
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2101      	movs	r1, #1
 80056d0:	fa01 f202 	lsl.w	r2, r1, r2
 80056d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d108      	bne.n	80056f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056f6:	e007      	b.n	8005708 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
	...

08005714 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005724:	429a      	cmp	r2, r3
 8005726:	d813      	bhi.n	8005750 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005734:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	3b08      	subs	r3, #8
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e011      	b.n	8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005754:	089b      	lsrs	r3, r3, #2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800575a:	4413      	add	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	3b08      	subs	r3, #8
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	091b      	lsrs	r3, r3, #4
 8005770:	3307      	adds	r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a0a      	ldr	r2, [pc, #40]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005778:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2201      	movs	r2, #1
 8005782:	409a      	lsls	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40020407 	.word	0x40020407
 8005798:	cccccccd 	.word	0xcccccccd
 800579c:	4002081c 	.word	0x4002081c
 80057a0:	40020880 	.word	0x40020880

080057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	1000823f 	.word	0x1000823f
 80057e8:	40020940 	.word	0x40020940

080057ec <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d12b      	bne.n	800585a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_DMAEx_ConfigMuxSync+0x24>
 800580c:	2302      	movs	r3, #2
 800580e:	e028      	b.n	8005862 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	3b01      	subs	r3, #1
 800582c:	04db      	lsls	r3, r3, #19
 800582e:	431a      	orrs	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	431a      	orrs	r2, r3
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	7a1b      	ldrb	r3, [r3, #8]
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	431a      	orrs	r2, r3
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	7a5b      	ldrb	r3, [r3, #9]
 8005842:	025b      	lsls	r3, r3, #9
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e003      	b.n	8005862 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005892:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800589c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d022      	beq.n	8005908 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01a      	beq.n	8005908 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
      }
    }
  }
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800591e:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <HAL_FLASH_Program+0x80>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_FLASH_Program+0x1a>
 8005926:	2302      	movs	r3, #2
 8005928:	e02d      	b.n	8005986 <HAL_FLASH_Program+0x76>
 800592a:	4b19      	ldr	r3, [pc, #100]	; (8005990 <HAL_FLASH_Program+0x80>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005930:	4b17      	ldr	r3, [pc, #92]	; (8005990 <HAL_FLASH_Program+0x80>)
 8005932:	2200      	movs	r2, #0
 8005934:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800593a:	f000 f869 	bl	8005a10 <FLASH_WaitForLastOperation>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d11a      	bne.n	800597e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800594e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005952:	68b8      	ldr	r0, [r7, #8]
 8005954:	f000 f8be 	bl	8005ad4 <FLASH_Program_DoubleWord>
 8005958:	e004      	b.n	8005964 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	4619      	mov	r1, r3
 800595e:	68b8      	ldr	r0, [r7, #8]
 8005960:	f000 f8de 	bl	8005b20 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005968:	f000 f852 	bl	8005a10 <FLASH_WaitForLastOperation>
 800596c:	4603      	mov	r3, r0
 800596e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <HAL_FLASH_Program+0x84>)
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	43db      	mvns	r3, r3
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <HAL_FLASH_Program+0x84>)
 800597a:	4013      	ands	r3, r2
 800597c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <HAL_FLASH_Program+0x80>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	2000064c 	.word	0x2000064c
 8005994:	58004000 	.word	0x58004000

08005998 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_FLASH_Unlock+0x38>)
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da0b      	bge.n	80059c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_FLASH_Unlock+0x38>)
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_FLASH_Unlock+0x3c>)
 80059ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <HAL_FLASH_Unlock+0x38>)
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_FLASH_Unlock+0x40>)
 80059b4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_FLASH_Unlock+0x38>)
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da01      	bge.n	80059c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80059c2:	79fb      	ldrb	r3, [r7, #7]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	58004000 	.word	0x58004000
 80059d4:	45670123 	.word	0x45670123
 80059d8:	cdef89ab 	.word	0xcdef89ab

080059dc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_FLASH_Lock+0x30>)
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <HAL_FLASH_Lock+0x30>)
 80059ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059f0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_FLASH_Lock+0x30>)
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	db01      	blt.n	80059fe <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80059fe:	79fb      	ldrb	r3, [r7, #7]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	58004000 	.word	0x58004000

08005a10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005a18:	f7fd f932 	bl	8002c80 <HAL_GetTick>
 8005a1c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a1e:	e009      	b.n	8005a34 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005a20:	f7fd f92e 	bl	8002c80 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d801      	bhi.n	8005a34 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e047      	b.n	8005ac4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a34:	4b25      	ldr	r3, [pc, #148]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d0ee      	beq.n	8005a20 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005a42:	4b22      	ldr	r3, [pc, #136]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005a5e:	4013      	ands	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <FLASH_WaitForLastOperation+0x6c>
 8005a6c:	4b17      	ldr	r3, [pc, #92]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a76:	4915      	ldr	r1, [pc, #84]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	618b      	str	r3, [r1, #24]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <FLASH_WaitForLastOperation+0x80>
 8005a86:	4a11      	ldr	r2, [pc, #68]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a8e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005a96:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <FLASH_WaitForLastOperation+0xc0>)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e011      	b.n	8005ac4 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005aa0:	f7fd f8ee 	bl	8002c80 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d801      	bhi.n	8005ab4 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e007      	b.n	8005ac4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <FLASH_WaitForLastOperation+0xbc>)
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005abc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ac0:	d0ee      	beq.n	8005aa0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	58004000 	.word	0x58004000
 8005ad0:	2000064c 	.word	0x2000064c

08005ad4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <FLASH_Program_DoubleWord+0x48>)
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <FLASH_Program_DoubleWord+0x48>)
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005af2:	f3bf 8f6f 	isb	sy
}
 8005af6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	000a      	movs	r2, r1
 8005b06:	2300      	movs	r3, #0
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	3104      	adds	r1, #4
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	58004000 	.word	0x58004000

08005b20 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	; 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <FLASH_Program_Fast+0x78>)
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <FLASH_Program_Fast+0x78>)
 8005b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b40:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b42:	f3ef 8310 	mrs	r3, PRIMASK
 8005b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b48:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b4c:	b672      	cpsid	i
}
 8005b4e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	3304      	adds	r3, #4
 8005b62:	617b      	str	r3, [r7, #20]
    row_index--;
 8005b64:	7ffb      	ldrb	r3, [r7, #31]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005b6a:	7ffb      	ldrb	r3, [r7, #31]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ef      	bne.n	8005b50 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005b70:	bf00      	nop
 8005b72:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <FLASH_Program_Fast+0x78>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7e:	d0f8      	beq.n	8005b72 <FLASH_Program_Fast+0x52>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005b8c:	bf00      	nop
 8005b8e:	3724      	adds	r7, #36	; 0x24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	58004000 	.word	0x58004000

08005b9c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ba6:	4b28      	ldr	r3, [pc, #160]	; (8005c48 <HAL_FLASHEx_Erase+0xac>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_FLASHEx_Erase+0x16>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e046      	b.n	8005c40 <HAL_FLASHEx_Erase+0xa4>
 8005bb2:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_FLASHEx_Erase+0xac>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bb8:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <HAL_FLASHEx_Erase+0xac>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bc2:	f7ff ff25 	bl	8005a10 <FLASH_WaitForLastOperation>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d133      	bne.n	8005c38 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d108      	bne.n	8005bea <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005bd8:	f000 f838 	bl	8005c4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005be0:	f7ff ff16 	bl	8005a10 <FLASH_WaitForLastOperation>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e024      	b.n	8005c34 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	e012      	b.n	8005c20 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005bfa:	68b8      	ldr	r0, [r7, #8]
 8005bfc:	f000 f836 	bl	8005c6c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c04:	f7ff ff04 	bl	8005a10 <FLASH_WaitForLastOperation>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	601a      	str	r2, [r3, #0]
          break;
 8005c18:	e00a      	b.n	8005c30 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4413      	add	r3, r2
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d3e4      	bcc.n	8005bfa <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005c30:	f000 f878 	bl	8005d24 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c34:	f000 f832 	bl	8005c9c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <HAL_FLASHEx_Erase+0xac>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]

  return status;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	2000064c 	.word	0x2000064c

08005c4c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <FLASH_MassErase+0x1c>)
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	4a04      	ldr	r2, [pc, #16]	; (8005c68 <FLASH_MassErase+0x1c>)
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	6153      	str	r3, [r2, #20]
#endif
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	58004000 	.word	0x58004000

08005c6c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <FLASH_PageErase+0x2c>)
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <FLASH_PageErase+0x2c>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	f043 0302 	orr.w	r3, r3, #2
 8005c8c:	6153      	str	r3, [r2, #20]
#endif
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	58004000 	.word	0x58004000

08005c9c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005ca0:	4b1f      	ldr	r3, [pc, #124]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d117      	bne.n	8005cdc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005cac:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cd0:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cda:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d117      	bne.n	8005d18 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cf2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d16:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr
 8005d20:	58004000 	.word	0x58004000

08005d24 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <FLASH_AcknowledgePageErase+0x1c>)
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	4a04      	ldr	r2, [pc, #16]	; (8005d40 <FLASH_AcknowledgePageErase+0x1c>)
 8005d2e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005d32:	f023 0302 	bic.w	r3, r3, #2
 8005d36:	6153      	str	r3, [r2, #20]
#endif
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	58004000 	.word	0x58004000

08005d44 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d52:	e140      	b.n	8005fd6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	2101      	movs	r1, #1
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	4013      	ands	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8132 	beq.w	8005fd0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d005      	beq.n	8005d84 <HAL_GPIO_Init+0x40>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d130      	bne.n	8005de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	2203      	movs	r2, #3
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dba:	2201      	movs	r2, #1
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 0201 	and.w	r2, r3, #1
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d017      	beq.n	8005e22 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4013      	ands	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d123      	bne.n	8005e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	08da      	lsrs	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3208      	adds	r2, #8
 8005e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	220f      	movs	r2, #15
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	08da      	lsrs	r2, r3, #3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3208      	adds	r2, #8
 8005e70:	6939      	ldr	r1, [r7, #16]
 8005e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	2203      	movs	r2, #3
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0203 	and.w	r2, r3, #3
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 808c 	beq.w	8005fd0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005eb8:	4a4e      	ldr	r2, [pc, #312]	; (8005ff4 <HAL_GPIO_Init+0x2b0>)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	089b      	lsrs	r3, r3, #2
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	2207      	movs	r2, #7
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ee2:	d00d      	beq.n	8005f00 <HAL_GPIO_Init+0x1bc>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a44      	ldr	r2, [pc, #272]	; (8005ff8 <HAL_GPIO_Init+0x2b4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <HAL_GPIO_Init+0x1b8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a43      	ldr	r2, [pc, #268]	; (8005ffc <HAL_GPIO_Init+0x2b8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_GPIO_Init+0x1b4>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e004      	b.n	8005f02 <HAL_GPIO_Init+0x1be>
 8005ef8:	2307      	movs	r3, #7
 8005efa:	e002      	b.n	8005f02 <HAL_GPIO_Init+0x1be>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_GPIO_Init+0x1be>
 8005f00:	2300      	movs	r3, #0
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	f002 0203 	and.w	r2, r2, #3
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	4093      	lsls	r3, r2
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f12:	4938      	ldr	r1, [pc, #224]	; (8005ff4 <HAL_GPIO_Init+0x2b0>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	3302      	adds	r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f20:	4b37      	ldr	r3, [pc, #220]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f44:	4a2e      	ldr	r2, [pc, #184]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f4a:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4013      	ands	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f6e:	4a24      	ldr	r2, [pc, #144]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005f74:	4b22      	ldr	r3, [pc, #136]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4013      	ands	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005f9a:	4a19      	ldr	r2, [pc, #100]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005fc8:	4a0d      	ldr	r2, [pc, #52]	; (8006000 <HAL_GPIO_Init+0x2bc>)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f47f aeb7 	bne.w	8005d54 <HAL_GPIO_Init+0x10>
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	48000400 	.word	0x48000400
 8005ffc:	48000800 	.word	0x48000800
 8006000:	58000800 	.word	0x58000800

08006004 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006012:	e0af      	b.n	8006174 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006014:	2201      	movs	r2, #1
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	4013      	ands	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a2 	beq.w	800616e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800602a:	4a59      	ldr	r2, [pc, #356]	; (8006190 <HAL_GPIO_DeInit+0x18c>)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	089b      	lsrs	r3, r3, #2
 8006030:	3302      	adds	r3, #2
 8006032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006036:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	2207      	movs	r2, #7
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006052:	d00d      	beq.n	8006070 <HAL_GPIO_DeInit+0x6c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a4f      	ldr	r2, [pc, #316]	; (8006194 <HAL_GPIO_DeInit+0x190>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <HAL_GPIO_DeInit+0x68>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a4e      	ldr	r2, [pc, #312]	; (8006198 <HAL_GPIO_DeInit+0x194>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_GPIO_DeInit+0x64>
 8006064:	2302      	movs	r3, #2
 8006066:	e004      	b.n	8006072 <HAL_GPIO_DeInit+0x6e>
 8006068:	2307      	movs	r3, #7
 800606a:	e002      	b.n	8006072 <HAL_GPIO_DeInit+0x6e>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <HAL_GPIO_DeInit+0x6e>
 8006070:	2300      	movs	r3, #0
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	f002 0203 	and.w	r2, r2, #3
 8006078:	0092      	lsls	r2, r2, #2
 800607a:	4093      	lsls	r3, r2
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	429a      	cmp	r2, r3
 8006080:	d136      	bne.n	80060f0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006082:	4b46      	ldr	r3, [pc, #280]	; (800619c <HAL_GPIO_DeInit+0x198>)
 8006084:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	43db      	mvns	r3, r3
 800608c:	4943      	ldr	r1, [pc, #268]	; (800619c <HAL_GPIO_DeInit+0x198>)
 800608e:	4013      	ands	r3, r2
 8006090:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006094:	4b41      	ldr	r3, [pc, #260]	; (800619c <HAL_GPIO_DeInit+0x198>)
 8006096:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	43db      	mvns	r3, r3
 800609e:	493f      	ldr	r1, [pc, #252]	; (800619c <HAL_GPIO_DeInit+0x198>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80060a6:	4b3d      	ldr	r3, [pc, #244]	; (800619c <HAL_GPIO_DeInit+0x198>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	43db      	mvns	r3, r3
 80060ae:	493b      	ldr	r1, [pc, #236]	; (800619c <HAL_GPIO_DeInit+0x198>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80060b4:	4b39      	ldr	r3, [pc, #228]	; (800619c <HAL_GPIO_DeInit+0x198>)
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	4937      	ldr	r1, [pc, #220]	; (800619c <HAL_GPIO_DeInit+0x198>)
 80060be:	4013      	ands	r3, r2
 80060c0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	2207      	movs	r2, #7
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80060d2:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <HAL_GPIO_DeInit+0x18c>)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	089b      	lsrs	r3, r3, #2
 80060d8:	3302      	adds	r3, #2
 80060da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	43da      	mvns	r2, r3
 80060e2:	482b      	ldr	r0, [pc, #172]	; (8006190 <HAL_GPIO_DeInit+0x18c>)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	089b      	lsrs	r3, r3, #2
 80060e8:	400a      	ands	r2, r1
 80060ea:	3302      	adds	r3, #2
 80060ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	2103      	movs	r1, #3
 80060fa:	fa01 f303 	lsl.w	r3, r1, r3
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	08da      	lsrs	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3208      	adds	r2, #8
 800610c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	220f      	movs	r2, #15
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	08d2      	lsrs	r2, r2, #3
 8006124:	4019      	ands	r1, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3208      	adds	r2, #8
 800612a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	2103      	movs	r1, #3
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	2101      	movs	r1, #1
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	401a      	ands	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	2103      	movs	r1, #3
 8006162:	fa01 f303 	lsl.w	r3, r1, r3
 8006166:	43db      	mvns	r3, r3
 8006168:	401a      	ands	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	3301      	adds	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f af49 	bne.w	8006014 <HAL_GPIO_DeInit+0x10>
  }
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	48000400 	.word	0x48000400
 8006198:	48000800 	.word	0x48000800
 800619c:	58000800 	.word	0x58000800

080061a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
 80061ac:	4613      	mov	r3, r2
 80061ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061bc:	e002      	b.n	80061c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061e0:	887a      	ldrh	r2, [r7, #2]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4013      	ands	r3, r2
 80061e6:	041a      	lsls	r2, r3, #16
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	43d9      	mvns	r1, r3
 80061ec:	887b      	ldrh	r3, [r7, #2]
 80061ee:	400b      	ands	r3, r1
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	619a      	str	r2, [r3, #24]
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e081      	b.n	8006316 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fb fe0c 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d107      	bne.n	800627a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	e006      	b.n	8006288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d104      	bne.n	800629a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69d9      	ldr	r1, [r3, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	460b      	mov	r3, r1
 800632e:	817b      	strh	r3, [r7, #10]
 8006330:	4613      	mov	r3, r2
 8006332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 80da 	bne.w	80064f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_I2C_Master_Transmit+0x30>
 800634c:	2302      	movs	r3, #2
 800634e:	e0d3      	b.n	80064f8 <HAL_I2C_Master_Transmit+0x1d8>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006358:	f7fc fc92 	bl	8002c80 <HAL_GetTick>
 800635c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2319      	movs	r3, #25
 8006364:	2201      	movs	r2, #1
 8006366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f9e5 	bl	800673a <I2C_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0be      	b.n	80064f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2221      	movs	r2, #33	; 0x21
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2210      	movs	r2, #16
 8006386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	893a      	ldrh	r2, [r7, #8]
 800639a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2bff      	cmp	r3, #255	; 0xff
 80063aa:	d90e      	bls.n	80063ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	8979      	ldrh	r1, [r7, #10]
 80063ba:	4b51      	ldr	r3, [pc, #324]	; (8006500 <HAL_I2C_Master_Transmit+0x1e0>)
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fbd0 	bl	8006b68 <I2C_TransferConfig>
 80063c8:	e06c      	b.n	80064a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	8979      	ldrh	r1, [r7, #10]
 80063dc:	4b48      	ldr	r3, [pc, #288]	; (8006500 <HAL_I2C_Master_Transmit+0x1e0>)
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fbbf 	bl	8006b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063ea:	e05b      	b.n	80064a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	6a39      	ldr	r1, [r7, #32]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f9e2 	bl	80067ba <I2C_WaitOnTXISFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e07b      	b.n	80064f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d034      	beq.n	80064a4 <HAL_I2C_Master_Transmit+0x184>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643e:	2b00      	cmp	r3, #0
 8006440:	d130      	bne.n	80064a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	2200      	movs	r2, #0
 800644a:	2180      	movs	r1, #128	; 0x80
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f974 	bl	800673a <I2C_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e04d      	b.n	80064f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2bff      	cmp	r3, #255	; 0xff
 8006464:	d90e      	bls.n	8006484 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	22ff      	movs	r2, #255	; 0xff
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006470:	b2da      	uxtb	r2, r3
 8006472:	8979      	ldrh	r1, [r7, #10]
 8006474:	2300      	movs	r3, #0
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fb73 	bl	8006b68 <I2C_TransferConfig>
 8006482:	e00f      	b.n	80064a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	b2da      	uxtb	r2, r3
 8006494:	8979      	ldrh	r1, [r7, #10]
 8006496:	2300      	movs	r3, #0
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fb62 	bl	8006b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d19e      	bne.n	80063ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	6a39      	ldr	r1, [r7, #32]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f9c1 	bl	800683a <I2C_WaitOnSTOPFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e01a      	b.n	80064f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2220      	movs	r2, #32
 80064c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_I2C_Master_Transmit+0x1e4>)
 80064d6:	400b      	ands	r3, r1
 80064d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	80002000 	.word	0x80002000
 8006504:	fe00e800 	.word	0xfe00e800

08006508 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	461a      	mov	r2, r3
 8006514:	460b      	mov	r3, r1
 8006516:	817b      	strh	r3, [r7, #10]
 8006518:	4613      	mov	r3, r2
 800651a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b20      	cmp	r3, #32
 8006526:	f040 80db 	bne.w	80066e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_I2C_Master_Receive+0x30>
 8006534:	2302      	movs	r3, #2
 8006536:	e0d4      	b.n	80066e2 <HAL_I2C_Master_Receive+0x1da>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006540:	f7fc fb9e 	bl	8002c80 <HAL_GetTick>
 8006544:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2319      	movs	r3, #25
 800654c:	2201      	movs	r2, #1
 800654e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f8f1 	bl	800673a <I2C_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e0bf      	b.n	80066e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2222      	movs	r2, #34	; 0x22
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2210      	movs	r2, #16
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	893a      	ldrh	r2, [r7, #8]
 8006582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	2bff      	cmp	r3, #255	; 0xff
 8006592:	d90e      	bls.n	80065b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	8979      	ldrh	r1, [r7, #10]
 80065a2:	4b52      	ldr	r3, [pc, #328]	; (80066ec <HAL_I2C_Master_Receive+0x1e4>)
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fadc 	bl	8006b68 <I2C_TransferConfig>
 80065b0:	e06d      	b.n	800668e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	8979      	ldrh	r1, [r7, #10]
 80065c4:	4b49      	ldr	r3, [pc, #292]	; (80066ec <HAL_I2C_Master_Receive+0x1e4>)
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 facb 	bl	8006b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80065d2:	e05c      	b.n	800668e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	6a39      	ldr	r1, [r7, #32]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f96b 	bl	80068b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e07c      	b.n	80066e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d034      	beq.n	800668e <HAL_I2C_Master_Receive+0x186>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d130      	bne.n	800668e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	2200      	movs	r2, #0
 8006634:	2180      	movs	r1, #128	; 0x80
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f87f 	bl	800673a <I2C_WaitOnFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e04d      	b.n	80066e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	2bff      	cmp	r3, #255	; 0xff
 800664e:	d90e      	bls.n	800666e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	22ff      	movs	r2, #255	; 0xff
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665a:	b2da      	uxtb	r2, r3
 800665c:	8979      	ldrh	r1, [r7, #10]
 800665e:	2300      	movs	r3, #0
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fa7e 	bl	8006b68 <I2C_TransferConfig>
 800666c:	e00f      	b.n	800668e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667c:	b2da      	uxtb	r2, r3
 800667e:	8979      	ldrh	r1, [r7, #10]
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fa6d 	bl	8006b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d19d      	bne.n	80065d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	6a39      	ldr	r1, [r7, #32]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f8cc 	bl	800683a <I2C_WaitOnSTOPFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e01a      	b.n	80066e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2220      	movs	r2, #32
 80066b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <HAL_I2C_Master_Receive+0x1e8>)
 80066c0:	400b      	ands	r3, r1
 80066c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	80002400 	.word	0x80002400
 80066f0:	fe00e800 	.word	0xfe00e800

080066f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d103      	bne.n	8006712 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d007      	beq.n	8006730 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	619a      	str	r2, [r3, #24]
  }
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800674a:	e022      	b.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d01e      	beq.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006754:	f7fc fa94 	bl	8002c80 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d113      	bne.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e00f      	b.n	80067b2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	429a      	cmp	r2, r3
 80067a0:	bf0c      	ite	eq
 80067a2:	2301      	moveq	r3, #1
 80067a4:	2300      	movne	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d0cd      	beq.n	800674c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067c6:	e02c      	b.n	8006822 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f8eb 	bl	80069a8 <I2C_IsErrorOccurred>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e02a      	b.n	8006832 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d01e      	beq.n	8006822 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e4:	f7fc fa4c 	bl	8002c80 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d113      	bne.n	8006822 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e007      	b.n	8006832 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b02      	cmp	r3, #2
 800682e:	d1cb      	bne.n	80067c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006846:	e028      	b.n	800689a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f8ab 	bl	80069a8 <I2C_IsErrorOccurred>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e026      	b.n	80068aa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685c:	f7fc fa10 	bl	8002c80 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d113      	bne.n	800689a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e007      	b.n	80068aa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d1cf      	bne.n	8006848 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068c0:	e064      	b.n	800698c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f86e 	bl	80069a8 <I2C_IsErrorOccurred>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e062      	b.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d138      	bne.n	8006956 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d105      	bne.n	80068fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e04e      	b.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d107      	bne.n	800691c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2210      	movs	r2, #16
 8006912:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2204      	movs	r2, #4
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
 800691a:	e002      	b.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2220      	movs	r2, #32
 8006928:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006936:	400b      	ands	r3, r1
 8006938:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e022      	b.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fc f993 	bl	8002c80 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10f      	bne.n	800698c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e007      	b.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d193      	bne.n	80068c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	fe00e800 	.word	0xfe00e800

080069a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d068      	beq.n	8006aa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2210      	movs	r2, #16
 80069da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069dc:	e049      	b.n	8006a72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d045      	beq.n	8006a72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fc f94b 	bl	8002c80 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <I2C_IsErrorOccurred+0x54>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d13a      	bne.n	8006a72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	d121      	bne.n	8006a64 <I2C_IsErrorOccurred+0xbc>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a26:	d01d      	beq.n	8006a64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006a28:	7cfb      	ldrb	r3, [r7, #19]
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d01a      	beq.n	8006a64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a3e:	f7fc f91f 	bl	8002c80 <HAL_GetTick>
 8006a42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a44:	e00e      	b.n	8006a64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a46:	f7fc f91b 	bl	8002c80 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b19      	cmp	r3, #25
 8006a52:	d907      	bls.n	8006a64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f043 0320 	orr.w	r3, r3, #32
 8006a5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006a62:	e006      	b.n	8006a72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d1e9      	bne.n	8006a46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d003      	beq.n	8006a88 <I2C_IsErrorOccurred+0xe0>
 8006a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0aa      	beq.n	80069de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2220      	movs	r2, #32
 8006a96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	f043 0304 	orr.w	r3, r3, #4
 8006a9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f043 0308 	orr.w	r3, r3, #8
 8006ae0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	f043 0302 	orr.w	r3, r3, #2
 8006b02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01c      	beq.n	8006b56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff fde9 	bl	80066f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6859      	ldr	r1, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <I2C_IsErrorOccurred+0x1bc>)
 8006b2e:	400b      	ands	r3, r1
 8006b30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3728      	adds	r7, #40	; 0x28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	fe00e800 	.word	0xfe00e800

08006b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	817b      	strh	r3, [r7, #10]
 8006b76:	4613      	mov	r3, r2
 8006b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b80:	7a7b      	ldrb	r3, [r7, #9]
 8006b82:	041b      	lsls	r3, r3, #16
 8006b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	0d5b      	lsrs	r3, r3, #21
 8006ba2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <I2C_TransferConfig+0x5c>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	43db      	mvns	r3, r3
 8006bac:	ea02 0103 	and.w	r1, r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr
 8006bc4:	03ff63ff 	.word	0x03ff63ff

08006bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d138      	bne.n	8006c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e032      	b.n	8006c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2224      	movs	r2, #36	; 0x24
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d139      	bne.n	8006ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e033      	b.n	8006ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e000      	b.n	8006ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a03      	ldr	r2, [pc, #12]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8006cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d02:	6013      	str	r3, [r2, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr
 8006d0c:	58000400 	.word	0x58000400

08006d10 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10c      	bne.n	8006d3c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d2e:	d10d      	bne.n	8006d4c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006d30:	f000 f83c 	bl	8006dac <HAL_PWREx_DisableLowPowerRunMode>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006d3a:	e015      	b.n	8006d68 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006d48:	f000 f822 	bl	8006d90 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006d52:	f023 0304 	bic.w	r3, r3, #4
 8006d56:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006d5e:	bf30      	wfi
 8006d60:	e002      	b.n	8006d68 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006d62:	bf40      	sev
    __WFE();
 8006d64:	bf20      	wfe
    __WFE();
 8006d66:	bf20      	wfe
  }
}
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	58000400 	.word	0x58000400
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <HAL_PWREx_GetVoltageRange+0x14>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	58000400 	.word	0x58000400

08006d90 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a03      	ldr	r2, [pc, #12]	; (8006da8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d9e:	6013      	str	r3, [r2, #0]
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr
 8006da8:	58000400 	.word	0x58000400

08006dac <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006db2:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dbc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006dbe:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2232      	movs	r2, #50	; 0x32
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
 8006dc8:	4a12      	ldr	r2, [pc, #72]	; (8006e14 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006dca:	fba2 2303 	umull	r2, r3, r2, r3
 8006dce:	0c9b      	lsrs	r3, r3, #18
 8006dd0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006dd2:	e002      	b.n	8006dda <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de6:	d102      	bne.n	8006dee <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f2      	bne.n	8006dd4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfa:	d101      	bne.n	8006e00 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e000      	b.n	8006e02 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	58000400 	.word	0x58000400
 8006e10:	2000000c 	.word	0x2000000c
 8006e14:	431bde83 	.word	0x431bde83

08006e18 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006e2c:	f043 0302 	orr.w	r3, r3, #2
 8006e30:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e38:	f043 0304 	orr.w	r3, r3, #4
 8006e3c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006e44:	bf30      	wfi
 8006e46:	e002      	b.n	8006e4e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006e48:	bf40      	sev
    __WFE();
 8006e4a:	bf20      	wfe
    __WFE();
 8006e4c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	4a05      	ldr	r2, [pc, #20]	; (8006e68 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e54:	f023 0304 	bic.w	r3, r3, #4
 8006e58:	6113      	str	r3, [r2, #16]
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr
 8006e64:	58000400 	.word	0x58000400
 8006e68:	e000ed00 	.word	0xe000ed00

08006e6c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	d101      	bne.n	8006e82 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	58000400 	.word	0x58000400

08006e90 <LL_RCC_HSE_EnableTcxo>:
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <LL_RCC_HSE_DisableTcxo>:
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eda:	d101      	bne.n	8006ee0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <LL_RCC_HSE_Enable>:
{
 8006eea:	b480      	push	{r7}
 8006eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	6013      	str	r3, [r2, #0]
}
 8006efe:	bf00      	nop
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <LL_RCC_HSE_Disable>:
{
 8006f06:	b480      	push	{r7}
 8006f08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f18:	6013      	str	r3, [r2, #0]
}
 8006f1a:	bf00      	nop
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <LL_RCC_HSE_IsReady>:
{
 8006f22:	b480      	push	{r7}
 8006f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f34:	d101      	bne.n	8006f3a <LL_RCC_HSE_IsReady+0x18>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <LL_RCC_HSE_IsReady+0x1a>
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr

08006f44 <LL_RCC_HSI_Enable>:
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f56:	6013      	str	r3, [r2, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <LL_RCC_HSI_Disable>:
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f72:	6013      	str	r3, [r2, #0]
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <LL_RCC_HSI_IsReady>:
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8e:	d101      	bne.n	8006f94 <LL_RCC_HSI_IsReady+0x18>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <LL_RCC_HSI_IsReady+0x1a>
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr

08006f9e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	061b      	lsls	r3, r3, #24
 8006fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	604b      	str	r3, [r1, #4]
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <LL_RCC_LSE_IsReady>:
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d101      	bne.n	8006fde <LL_RCC_LSE_IsReady+0x18>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <LL_RCC_LSE_IsReady+0x1a>
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <LL_RCC_LSI_Enable>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007000:	bf00      	nop
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr

08007008 <LL_RCC_LSI_Disable>:
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800700c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007020:	bf00      	nop
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <LL_RCC_LSI_IsReady>:
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800702c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d101      	bne.n	8007040 <LL_RCC_LSI_IsReady+0x18>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <LL_RCC_LSI_IsReady+0x1a>
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <LL_RCC_MSI_Enable>:
{
 800704a:	b480      	push	{r7}
 800704c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800704e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6013      	str	r3, [r2, #0]
}
 800705e:	bf00      	nop
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr

08007066 <LL_RCC_MSI_Disable>:
{
 8007066:	b480      	push	{r7}
 8007068:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800706a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	6013      	str	r3, [r2, #0]
}
 800707a:	bf00      	nop
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr

08007082 <LL_RCC_MSI_IsReady>:
{
 8007082:	b480      	push	{r7}
 8007084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d101      	bne.n	8007098 <LL_RCC_MSI_IsReady+0x16>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <LL_RCC_MSI_IsReady+0x18>
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr

080070a2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80070a2:	b480      	push	{r7}
 80070a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80070a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d101      	bne.n	80070b8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <LL_RCC_MSI_GetRange>:
{
 80070c2:	b480      	push	{r7}
 80070c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80070c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80070dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80070f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800710a:	4313      	orrs	r3, r2
 800710c:	604b      	str	r3, [r1, #4]
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <LL_RCC_SetSysClkSource>:
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f023 0203 	bic.w	r2, r3, #3
 800712a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4313      	orrs	r3, r2
 8007132:	608b      	str	r3, [r1, #8]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <LL_RCC_GetSysClkSource>:
{
 800713e:	b480      	push	{r7}
 8007140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 030c 	and.w	r3, r3, #12
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <LL_RCC_SetAHBPrescaler>:
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800715c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4313      	orrs	r3, r2
 800716e:	608b      	str	r3, [r1, #8]
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <LL_RCC_SetAHB3Prescaler>:
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007186:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800718a:	f023 020f 	bic.w	r2, r3, #15
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	091b      	lsrs	r3, r3, #4
 8007192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <LL_RCC_SetAPB1Prescaler>:
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80071ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4313      	orrs	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_SetAPB2Prescaler>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80071d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	608b      	str	r3, [r1, #8]
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr

080071f2 <LL_RCC_GetAHBPrescaler>:
{
 80071f2:	b480      	push	{r7}
 80071f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80071f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007200:	4618      	mov	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <LL_RCC_GetAHB3Prescaler>:
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800720c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007210:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800721a:	4618      	mov	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr

08007222 <LL_RCC_GetAPB1Prescaler>:
{
 8007222:	b480      	push	{r7}
 8007224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007230:	4618      	mov	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <LL_RCC_GetAPB2Prescaler>:
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800723c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007246:	4618      	mov	r0, r3
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800724e:	b480      	push	{r7}
 8007250:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800725c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007260:	6013      	str	r3, [r2, #0]
}
 8007262:	bf00      	nop
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800726a:	b480      	push	{r7}
 800726c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800726e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800727c:	6013      	str	r3, [r2, #0]
}
 800727e:	bf00      	nop
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007286:	b480      	push	{r7}
 8007288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800728a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007298:	d101      	bne.n	800729e <LL_RCC_PLL_IsReady+0x18>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <LL_RCC_PLL_IsReady+0x1a>
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80072ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80072c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80072d6:	b480      	push	{r7}
 80072d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80072da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80072f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0303 	and.w	r3, r3, #3
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr

08007302 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007302:	b480      	push	{r7}
 8007304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007314:	d101      	bne.n	800731a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007338:	d101      	bne.n	800733e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800734c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800735a:	d101      	bne.n	8007360 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr

0800736a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800736a:	b480      	push	{r7}
 800736c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800736e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800737c:	d101      	bne.n	8007382 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr

0800738c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e36f      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800739e:	f7ff fece 	bl	800713e <LL_RCC_GetSysClkSource>
 80073a2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073a4:	f7ff ffa2 	bl	80072ec <LL_RCC_PLL_GetMainSource>
 80073a8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80c4 	beq.w	8007540 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_RCC_OscConfig+0x3e>
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b0c      	cmp	r3, #12
 80073c2:	d176      	bne.n	80074b2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d173      	bne.n	80074b2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e353      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_OscConfig+0x68>
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073f2:	e006      	b.n	8007402 <HAL_RCC_OscConfig+0x76>
 80073f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007402:	4293      	cmp	r3, r2
 8007404:	d222      	bcs.n	800744c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fd3c 	bl	8007e88 <RCC_SetFlashLatencyFromMSIRange>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e331      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800741a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007424:	f043 0308 	orr.w	r3, r3, #8
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800743c:	4313      	orrs	r3, r2
 800743e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fe53 	bl	80070f0 <LL_RCC_MSI_SetCalibTrimming>
 800744a:	e021      	b.n	8007490 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007456:	f043 0308 	orr.w	r3, r3, #8
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fe3a 	bl	80070f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fd01 	bl	8007e88 <RCC_SetFlashLatencyFromMSIRange>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e2f6      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007490:	f000 fcc2 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007494:	4603      	mov	r3, r0
 8007496:	4aa7      	ldr	r2, [pc, #668]	; (8007734 <HAL_RCC_OscConfig+0x3a8>)
 8007498:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800749a:	4ba7      	ldr	r3, [pc, #668]	; (8007738 <HAL_RCC_OscConfig+0x3ac>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fb fbe4 	bl	8002c6c <HAL_InitTick>
 80074a4:	4603      	mov	r3, r0
 80074a6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d047      	beq.n	800753e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80074ae:	7cfb      	ldrb	r3, [r7, #19]
 80074b0:	e2e5      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d02c      	beq.n	8007514 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80074ba:	f7ff fdc6 	bl	800704a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074be:	f7fb fbdf 	bl	8002c80 <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074c6:	f7fb fbdb 	bl	8002c80 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e2d2      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80074d8:	f7ff fdd3 	bl	8007082 <LL_RCC_MSI_IsReady>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0f1      	beq.n	80074c6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ec:	f043 0308 	orr.w	r3, r3, #8
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fdef 	bl	80070f0 <LL_RCC_MSI_SetCalibTrimming>
 8007512:	e015      	b.n	8007540 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007514:	f7ff fda7 	bl	8007066 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007518:	f7fb fbb2 	bl	8002c80 <HAL_GetTick>
 800751c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007520:	f7fb fbae 	bl	8002c80 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e2a5      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007532:	f7ff fda6 	bl	8007082 <LL_RCC_MSI_IsReady>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1f1      	bne.n	8007520 <HAL_RCC_OscConfig+0x194>
 800753c:	e000      	b.n	8007540 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800753e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d058      	beq.n	80075fe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b08      	cmp	r3, #8
 8007550:	d005      	beq.n	800755e <HAL_RCC_OscConfig+0x1d2>
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2b0c      	cmp	r3, #12
 8007556:	d108      	bne.n	800756a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d105      	bne.n	800756a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d14b      	bne.n	80075fe <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e289      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800756a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800757c:	4313      	orrs	r3, r2
 800757e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007588:	d102      	bne.n	8007590 <HAL_RCC_OscConfig+0x204>
 800758a:	f7ff fcae 	bl	8006eea <LL_RCC_HSE_Enable>
 800758e:	e00d      	b.n	80075ac <HAL_RCC_OscConfig+0x220>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007598:	d104      	bne.n	80075a4 <HAL_RCC_OscConfig+0x218>
 800759a:	f7ff fc79 	bl	8006e90 <LL_RCC_HSE_EnableTcxo>
 800759e:	f7ff fca4 	bl	8006eea <LL_RCC_HSE_Enable>
 80075a2:	e003      	b.n	80075ac <HAL_RCC_OscConfig+0x220>
 80075a4:	f7ff fcaf 	bl	8006f06 <LL_RCC_HSE_Disable>
 80075a8:	f7ff fc80 	bl	8006eac <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d012      	beq.n	80075da <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b4:	f7fb fb64 	bl	8002c80 <HAL_GetTick>
 80075b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075bc:	f7fb fb60 	bl	8002c80 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b64      	cmp	r3, #100	; 0x64
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e257      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80075ce:	f7ff fca8 	bl	8006f22 <LL_RCC_HSE_IsReady>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f1      	beq.n	80075bc <HAL_RCC_OscConfig+0x230>
 80075d8:	e011      	b.n	80075fe <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075da:	f7fb fb51 	bl	8002c80 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075e2:	f7fb fb4d 	bl	8002c80 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b64      	cmp	r3, #100	; 0x64
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e244      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80075f4:	f7ff fc95 	bl	8006f22 <LL_RCC_HSE_IsReady>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f1      	bne.n	80075e2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d046      	beq.n	8007698 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	2b04      	cmp	r3, #4
 800760e:	d005      	beq.n	800761c <HAL_RCC_OscConfig+0x290>
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	2b0c      	cmp	r3, #12
 8007614:	d10e      	bne.n	8007634 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d10b      	bne.n	8007634 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e22a      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fcb6 	bl	8006f9e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007632:	e031      	b.n	8007698 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d019      	beq.n	8007670 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800763c:	f7ff fc82 	bl	8006f44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007640:	f7fb fb1e 	bl	8002c80 <HAL_GetTick>
 8007644:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007648:	f7fb fb1a 	bl	8002c80 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e211      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800765a:	f7ff fc8f 	bl	8006f7c <LL_RCC_HSI_IsReady>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f1      	beq.n	8007648 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fc98 	bl	8006f9e <LL_RCC_HSI_SetCalibTrimming>
 800766e:	e013      	b.n	8007698 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007670:	f7ff fc76 	bl	8006f60 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007674:	f7fb fb04 	bl	8002c80 <HAL_GetTick>
 8007678:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800767a:	e008      	b.n	800768e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800767c:	f7fb fb00 	bl	8002c80 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d901      	bls.n	800768e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e1f7      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800768e:	f7ff fc75 	bl	8006f7c <LL_RCC_HSI_IsReady>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f1      	bne.n	800767c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d06e      	beq.n	8007782 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d056      	beq.n	800775a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80076ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69da      	ldr	r2, [r3, #28]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d031      	beq.n	8007728 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e1d0      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d013      	beq.n	800770e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80076e6:	f7ff fc8f 	bl	8007008 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ea:	f7fb fac9 	bl	8002c80 <HAL_GetTick>
 80076ee:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076f2:	f7fb fac5 	bl	8002c80 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b11      	cmp	r3, #17
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e1bc      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007704:	f7ff fc90 	bl	8007028 <LL_RCC_LSI_IsReady>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f1      	bne.n	80076f2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800770e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007716:	f023 0210 	bic.w	r2, r3, #16
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007728:	f7ff fc5e 	bl	8006fe8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800772c:	f7fb faa8 	bl	8002c80 <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007732:	e00c      	b.n	800774e <HAL_RCC_OscConfig+0x3c2>
 8007734:	2000000c 	.word	0x2000000c
 8007738:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800773c:	f7fb faa0 	bl	8002c80 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b11      	cmp	r3, #17
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e197      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800774e:	f7ff fc6b 	bl	8007028 <LL_RCC_LSI_IsReady>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0f1      	beq.n	800773c <HAL_RCC_OscConfig+0x3b0>
 8007758:	e013      	b.n	8007782 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800775a:	f7ff fc55 	bl	8007008 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800775e:	f7fb fa8f 	bl	8002c80 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007766:	f7fb fa8b 	bl	8002c80 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b11      	cmp	r3, #17
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e182      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007778:	f7ff fc56 	bl	8007028 <LL_RCC_LSI_IsReady>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f1      	bne.n	8007766 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80d8 	beq.w	8007940 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007790:	f7ff fb6c 	bl	8006e6c <LL_PWR_IsEnabledBkUpAccess>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d113      	bne.n	80077c2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800779a:	f7ff faab 	bl	8006cf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800779e:	f7fb fa6f 	bl	8002c80 <HAL_GetTick>
 80077a2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a6:	f7fb fa6b 	bl	8002c80 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e162      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80077b8:	f7ff fb58 	bl	8006e6c <LL_PWR_IsEnabledBkUpAccess>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f1      	beq.n	80077a6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d07b      	beq.n	80078c2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b85      	cmp	r3, #133	; 0x85
 80077d0:	d003      	beq.n	80077da <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d109      	bne.n	80077ee <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80077da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077e6:	f043 0304 	orr.w	r3, r3, #4
 80077ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ee:	f7fb fa47 	bl	8002c80 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007808:	e00a      	b.n	8007820 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800780a:	f7fb fa39 	bl	8002c80 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	f241 3288 	movw	r2, #5000	; 0x1388
 8007818:	4293      	cmp	r3, r2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e12e      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007820:	f7ff fbd1 	bl	8006fc6 <LL_RCC_LSE_IsReady>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0ef      	beq.n	800780a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b81      	cmp	r3, #129	; 0x81
 8007830:	d003      	beq.n	800783a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	2b85      	cmp	r3, #133	; 0x85
 8007838:	d121      	bne.n	800787e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783a:	f7fb fa21 	bl	8002c80 <HAL_GetTick>
 800783e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007854:	e00a      	b.n	800786c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007856:	f7fb fa13 	bl	8002c80 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	4293      	cmp	r3, r2
 8007866:	d901      	bls.n	800786c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e108      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800786c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0ec      	beq.n	8007856 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800787c:	e060      	b.n	8007940 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787e:	f7fb f9ff 	bl	8002c80 <HAL_GetTick>
 8007882:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007898:	e00a      	b.n	80078b0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789a:	f7fb f9f1 	bl	8002c80 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e0e6      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1ec      	bne.n	800789a <HAL_RCC_OscConfig+0x50e>
 80078c0:	e03e      	b.n	8007940 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c2:	f7fb f9dd 	bl	8002c80 <HAL_GetTick>
 80078c6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80078c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078de:	f7fb f9cf 	bl	8002c80 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e0c4      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ec      	bne.n	80078de <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007904:	f7fb f9bc 	bl	8002c80 <HAL_GetTick>
 8007908:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800790a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800791e:	e00a      	b.n	8007936 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007920:	f7fb f9ae 	bl	8002c80 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	f241 3288 	movw	r2, #5000	; 0x1388
 800792e:	4293      	cmp	r3, r2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e0a3      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007936:	f7ff fb46 	bl	8006fc6 <LL_RCC_LSE_IsReady>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1ef      	bne.n	8007920 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8099 	beq.w	8007a7c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	2b0c      	cmp	r3, #12
 800794e:	d06c      	beq.n	8007a2a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	2b02      	cmp	r3, #2
 8007956:	d14b      	bne.n	80079f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007958:	f7ff fc87 	bl	800726a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800795c:	f7fb f990 	bl	8002c80 <HAL_GetTick>
 8007960:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007964:	f7fb f98c 	bl	8002c80 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b0a      	cmp	r3, #10
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e083      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007976:	f7ff fc86 	bl	8007286 <LL_RCC_PLL_IsReady>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f1      	bne.n	8007964 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	4b40      	ldr	r3, [pc, #256]	; (8007a88 <HAL_RCC_OscConfig+0x6fc>)
 8007988:	4013      	ands	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007992:	4311      	orrs	r1, r2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007998:	0212      	lsls	r2, r2, #8
 800799a:	4311      	orrs	r1, r2
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80079a0:	4311      	orrs	r1, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80079a6:	4311      	orrs	r1, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079ac:	430a      	orrs	r2, r1
 80079ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079b6:	f7ff fc4a 	bl	800724e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ca:	f7fb f959 	bl	8002c80 <HAL_GetTick>
 80079ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d2:	f7fb f955 	bl	8002c80 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b0a      	cmp	r3, #10
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e04c      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80079e4:	f7ff fc4f 	bl	8007286 <LL_RCC_PLL_IsReady>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f1      	beq.n	80079d2 <HAL_RCC_OscConfig+0x646>
 80079ee:	e045      	b.n	8007a7c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f0:	f7ff fc3b 	bl	800726a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f4:	f7fb f944 	bl	8002c80 <HAL_GetTick>
 80079f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fb f940 	bl	8002c80 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b0a      	cmp	r3, #10
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e037      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007a0e:	f7ff fc3a 	bl	8007286 <LL_RCC_PLL_IsReady>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f1      	bne.n	80079fc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a22:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <HAL_RCC_OscConfig+0x700>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	60cb      	str	r3, [r1, #12]
 8007a28:	e028      	b.n	8007a7c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e023      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f003 0203 	and.w	r2, r3, #3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d115      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d10e      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d106      	bne.n	8007a78 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d001      	beq.n	8007a7c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	11c1808c 	.word	0x11c1808c
 8007a8c:	eefefffc 	.word	0xeefefffc

08007a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e10f      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007aa4:	4b89      	ldr	r3, [pc, #548]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d91b      	bls.n	8007aea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ab2:	4b86      	ldr	r3, [pc, #536]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f023 0207 	bic.w	r2, r3, #7
 8007aba:	4984      	ldr	r1, [pc, #528]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ac2:	f7fb f8dd 	bl	8002c80 <HAL_GetTick>
 8007ac6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007aca:	f7fb f8d9 	bl	8002c80 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e0f3      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007adc:	4b7b      	ldr	r3, [pc, #492]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d1ef      	bne.n	8007aca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fb2a 	bl	8007154 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b00:	f7fb f8be 	bl	8002c80 <HAL_GetTick>
 8007b04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b08:	f7fb f8ba 	bl	8002c80 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e0d4      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007b1a:	f7ff fbf2 	bl	8007302 <LL_RCC_IsActiveFlag_HPRE>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0f1      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d016      	beq.n	8007b5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff fb20 	bl	800717a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b3a:	f7fb f8a1 	bl	8002c80 <HAL_GetTick>
 8007b3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b42:	f7fb f89d 	bl	8002c80 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e0b7      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b54:	f7ff fbe6 	bl	8007324 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f1      	beq.n	8007b42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d016      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fb19 	bl	80071a6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b74:	f7fb f884 	bl	8002c80 <HAL_GetTick>
 8007b78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b7c:	f7fb f880 	bl	8002c80 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e09a      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007b8e:	f7ff fbdb 	bl	8007348 <LL_RCC_IsActiveFlag_PPRE1>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0f1      	beq.n	8007b7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d017      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fb0e 	bl	80071cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007bb0:	f7fb f866 	bl	8002c80 <HAL_GetTick>
 8007bb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007bb8:	f7fb f862 	bl	8002c80 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e07c      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007bca:	f7ff fbce 	bl	800736a <LL_RCC_IsActiveFlag_PPRE2>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f1      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d043      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007be8:	f7ff f99b 	bl	8006f22 <LL_RCC_HSE_IsReady>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d11e      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e066      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d106      	bne.n	8007c0c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007bfe:	f7ff fb42 	bl	8007286 <LL_RCC_PLL_IsReady>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d113      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e05b      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007c14:	f7ff fa35 	bl	8007082 <LL_RCC_MSI_IsReady>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d108      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e050      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007c22:	f7ff f9ab 	bl	8006f7c <LL_RCC_HSI_IsReady>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e049      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff fa6f 	bl	8007118 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c3a:	f7fb f821 	bl	8002c80 <HAL_GetTick>
 8007c3e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c40:	e00a      	b.n	8007c58 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c42:	f7fb f81d 	bl	8002c80 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e035      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c58:	f7ff fa71 	bl	800713e <LL_RCC_GetSysClkSource>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d1ec      	bne.n	8007c42 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c68:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d21b      	bcs.n	8007cae <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f023 0207 	bic.w	r2, r3, #7
 8007c7e:	4913      	ldr	r1, [pc, #76]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c86:	f7fa fffb 	bl	8002c80 <HAL_GetTick>
 8007c8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007c8e:	f7fa fff7 	bl	8002c80 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e011      	b.n	8007cc4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <HAL_RCC_ClockConfig+0x23c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d1ef      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007cae:	f000 f8b3 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4a06      	ldr	r2, [pc, #24]	; (8007cd0 <HAL_RCC_ClockConfig+0x240>)
 8007cb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <HAL_RCC_ClockConfig+0x244>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fa ffd5 	bl	8002c6c <HAL_InitTick>
 8007cc2:	4603      	mov	r3, r0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	58004000 	.word	0x58004000
 8007cd0:	2000000c 	.word	0x2000000c
 8007cd4:	20000014 	.word	0x20000014

08007cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ce6:	f7ff fa2a 	bl	800713e <LL_RCC_GetSysClkSource>
 8007cea:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cec:	f7ff fafe 	bl	80072ec <LL_RCC_PLL_GetMainSource>
 8007cf0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_RCC_GetSysClockFreq+0x2c>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b0c      	cmp	r3, #12
 8007cfc:	d139      	bne.n	8007d72 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d136      	bne.n	8007d72 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007d04:	f7ff f9cd 	bl	80070a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d115      	bne.n	8007d3a <HAL_RCC_GetSysClockFreq+0x62>
 8007d0e:	f7ff f9c8 	bl	80070a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d106      	bne.n	8007d26 <HAL_RCC_GetSysClockFreq+0x4e>
 8007d18:	f7ff f9d3 	bl	80070c2 <LL_RCC_MSI_GetRange>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	e005      	b.n	8007d32 <HAL_RCC_GetSysClockFreq+0x5a>
 8007d26:	f7ff f9d7 	bl	80070d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	0a1b      	lsrs	r3, r3, #8
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	4a36      	ldr	r2, [pc, #216]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x134>)
 8007d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d38:	e014      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x8c>
 8007d3a:	f7ff f9b2 	bl	80070a2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d106      	bne.n	8007d52 <HAL_RCC_GetSysClockFreq+0x7a>
 8007d44:	f7ff f9bd 	bl	80070c2 <LL_RCC_MSI_GetRange>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	e005      	b.n	8007d5e <HAL_RCC_GetSysClockFreq+0x86>
 8007d52:	f7ff f9c1 	bl	80070d8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007d56:	4603      	mov	r3, r0
 8007d58:	091b      	lsrs	r3, r3, #4
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	4a2b      	ldr	r2, [pc, #172]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x134>)
 8007d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d64:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d115      	bne.n	8007d98 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d70:	e012      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d102      	bne.n	8007d7e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d78:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	e00c      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d109      	bne.n	8007d98 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d84:	f7ff f8a0 	bl	8006ec8 <LL_RCC_HSE_IsEnabledDiv2>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d102      	bne.n	8007d94 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007d8e:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e001      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007d94:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007d96:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d98:	f7ff f9d1 	bl	800713e <LL_RCC_GetSysClkSource>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b0c      	cmp	r3, #12
 8007da0:	d12f      	bne.n	8007e02 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007da2:	f7ff faa3 	bl	80072ec <LL_RCC_PLL_GetMainSource>
 8007da6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d003      	beq.n	8007db6 <HAL_RCC_GetSysClockFreq+0xde>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d003      	beq.n	8007dbc <HAL_RCC_GetSysClockFreq+0xe4>
 8007db4:	e00d      	b.n	8007dd2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007db6:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8007db8:	60fb      	str	r3, [r7, #12]
        break;
 8007dba:	e00d      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007dbc:	f7ff f884 	bl	8006ec8 <LL_RCC_HSE_IsEnabledDiv2>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d102      	bne.n	8007dcc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007dc6:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x138>)
 8007dc8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007dca:	e005      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007dce:	60fb      	str	r3, [r7, #12]
        break;
 8007dd0:	e002      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	60fb      	str	r3, [r7, #12]
        break;
 8007dd6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007dd8:	f7ff fa66 	bl	80072a8 <LL_RCC_PLL_GetN>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	fb03 f402 	mul.w	r4, r3, r2
 8007de4:	f7ff fa77 	bl	80072d6 <LL_RCC_PLL_GetDivider>
 8007de8:	4603      	mov	r3, r0
 8007dea:	091b      	lsrs	r3, r3, #4
 8007dec:	3301      	adds	r3, #1
 8007dee:	fbb4 f4f3 	udiv	r4, r4, r3
 8007df2:	f7ff fa65 	bl	80072c0 <LL_RCC_PLL_GetR>
 8007df6:	4603      	mov	r3, r0
 8007df8:	0f5b      	lsrs	r3, r3, #29
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	fbb4 f3f3 	udiv	r3, r4, r3
 8007e00:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007e02:	697b      	ldr	r3, [r7, #20]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd90      	pop	{r4, r7, pc}
 8007e0c:	0801f508 	.word	0x0801f508
 8007e10:	00f42400 	.word	0x00f42400
 8007e14:	01e84800 	.word	0x01e84800

08007e18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e18:	b598      	push	{r3, r4, r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007e1c:	f7ff ff5c 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 8007e20:	4604      	mov	r4, r0
 8007e22:	f7ff f9e6 	bl	80071f2 <LL_RCC_GetAHBPrescaler>
 8007e26:	4603      	mov	r3, r0
 8007e28:	091b      	lsrs	r3, r3, #4
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	4a03      	ldr	r2, [pc, #12]	; (8007e3c <HAL_RCC_GetHCLKFreq+0x24>)
 8007e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	bd98      	pop	{r3, r4, r7, pc}
 8007e3c:	0801f4a8 	.word	0x0801f4a8

08007e40 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e40:	b598      	push	{r3, r4, r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007e44:	f7ff ffe8 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007e48:	4604      	mov	r4, r0
 8007e4a:	f7ff f9ea 	bl	8007222 <LL_RCC_GetAPB1Prescaler>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	0a1b      	lsrs	r3, r3, #8
 8007e52:	4a03      	ldr	r2, [pc, #12]	; (8007e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	bd98      	pop	{r3, r4, r7, pc}
 8007e60:	0801f4e8 	.word	0x0801f4e8

08007e64 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e64:	b598      	push	{r3, r4, r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007e68:	f7ff ffd6 	bl	8007e18 <HAL_RCC_GetHCLKFreq>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	f7ff f9e3 	bl	8007238 <LL_RCC_GetAPB2Prescaler>
 8007e72:	4603      	mov	r3, r0
 8007e74:	0adb      	lsrs	r3, r3, #11
 8007e76:	4a03      	ldr	r2, [pc, #12]	; (8007e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd98      	pop	{r3, r4, r7, pc}
 8007e84:	0801f4e8 	.word	0x0801f4e8

08007e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	091b      	lsrs	r3, r3, #4
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	4a10      	ldr	r2, [pc, #64]	; (8007edc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007ea0:	f7ff f9b2 	bl	8007208 <LL_RCC_GetAHB3Prescaler>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	4a0c      	ldr	r2, [pc, #48]	; (8007ee0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec2:	0c9c      	lsrs	r4, r3, #18
 8007ec4:	f7fe ff58 	bl	8006d78 <HAL_PWREx_GetVoltageRange>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 f80b 	bl	8007ee8 <RCC_SetFlashLatency>
 8007ed2:	4603      	mov	r3, r0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	0801f508 	.word	0x0801f508
 8007ee0:	0801f4a8 	.word	0x0801f4a8
 8007ee4:	431bde83 	.word	0x431bde83

08007ee8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08e      	sub	sp, #56	; 0x38
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007ef2:	4a3a      	ldr	r2, [pc, #232]	; (8007fdc <RCC_SetFlashLatency+0xf4>)
 8007ef4:	f107 0320 	add.w	r3, r7, #32
 8007ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007efc:	6018      	str	r0, [r3, #0]
 8007efe:	3304      	adds	r3, #4
 8007f00:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007f02:	4a37      	ldr	r2, [pc, #220]	; (8007fe0 <RCC_SetFlashLatency+0xf8>)
 8007f04:	f107 0318 	add.w	r3, r7, #24
 8007f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f0c:	6018      	str	r0, [r3, #0]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007f12:	4a34      	ldr	r2, [pc, #208]	; (8007fe4 <RCC_SetFlashLatency+0xfc>)
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007f1e:	2300      	movs	r3, #0
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f28:	d11b      	bne.n	8007f62 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f2e:	e014      	b.n	8007f5a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	3338      	adds	r3, #56	; 0x38
 8007f36:	443b      	add	r3, r7
 8007f38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d807      	bhi.n	8007f54 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	3338      	adds	r3, #56	; 0x38
 8007f4a:	443b      	add	r3, r7
 8007f4c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f52:	e021      	b.n	8007f98 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	3301      	adds	r3, #1
 8007f58:	633b      	str	r3, [r7, #48]	; 0x30
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d9e7      	bls.n	8007f30 <RCC_SetFlashLatency+0x48>
 8007f60:	e01a      	b.n	8007f98 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f66:	e014      	b.n	8007f92 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	3338      	adds	r3, #56	; 0x38
 8007f6e:	443b      	add	r3, r7
 8007f70:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d807      	bhi.n	8007f8c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	3338      	adds	r3, #56	; 0x38
 8007f82:	443b      	add	r3, r7
 8007f84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8a:	e005      	b.n	8007f98 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	3301      	adds	r3, #1
 8007f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d9e7      	bls.n	8007f68 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <RCC_SetFlashLatency+0x100>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f023 0207 	bic.w	r2, r3, #7
 8007fa0:	4911      	ldr	r1, [pc, #68]	; (8007fe8 <RCC_SetFlashLatency+0x100>)
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fa8:	f7fa fe6a 	bl	8002c80 <HAL_GetTick>
 8007fac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007fae:	e008      	b.n	8007fc2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007fb0:	f7fa fe66 	bl	8002c80 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e007      	b.n	8007fd2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <RCC_SetFlashLatency+0x100>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d1ef      	bne.n	8007fb0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3738      	adds	r7, #56	; 0x38
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	0801ec2c 	.word	0x0801ec2c
 8007fe0:	0801ec34 	.word	0x0801ec34
 8007fe4:	0801ec3c 	.word	0x0801ec3c
 8007fe8:	58004000 	.word	0x58004000

08007fec <LL_RCC_LSE_IsReady>:
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d101      	bne.n	8008004 <LL_RCC_LSE_IsReady+0x18>
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <LL_RCC_LSE_IsReady+0x1a>
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr

0800800e <LL_RCC_SetUSARTClockSource>:
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	43db      	mvns	r3, r3
 8008024:	401a      	ands	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800802e:	4313      	orrs	r3, r2
 8008030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr

0800803e <LL_RCC_SetI2SClockSource>:
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <LL_RCC_SetLPUARTClockSource>:
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800807c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr

08008092 <LL_RCC_SetI2CClockSource>:
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800809a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800809e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	091b      	lsrs	r3, r3, #4
 80080a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80080aa:	43db      	mvns	r3, r3
 80080ac:	401a      	ands	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80080b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr

080080ca <LL_RCC_SetLPTIMClockSource>:
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	0c1b      	lsrs	r3, r3, #16
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	43db      	mvns	r3, r3
 80080e2:	401a      	ands	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ec:	4313      	orrs	r3, r2
 80080ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr

080080fc <LL_RCC_SetRNGClockSource>:
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4313      	orrs	r3, r2
 8008118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr

08008126 <LL_RCC_SetADCClockSource>:
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008136:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800813a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <LL_RCC_SetRTCClockSource>:
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4313      	orrs	r3, r2
 800816c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr

0800817a <LL_RCC_GetRTCClockSource>:
{
 800817a:	b480      	push	{r7}
 800817c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800817e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008186:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800818a:	4618      	mov	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <LL_RCC_ForceBackupDomainReset>:
{
 8008192:	b480      	push	{r7}
 8008194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80081aa:	bf00      	nop
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr

080081b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80081b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80081ca:	bf00      	nop
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
	...

080081d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80081e0:	2300      	movs	r3, #0
 80081e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80081e4:	2300      	movs	r3, #0
 80081e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d058      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80081f4:	f7fe fd7e 	bl	8006cf4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081f8:	f7fa fd42 	bl	8002c80 <HAL_GetTick>
 80081fc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80081fe:	e009      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008200:	f7fa fd3e 	bl	8002c80 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d902      	bls.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	74fb      	strb	r3, [r7, #19]
        break;
 8008212:	e006      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008214:	4b7b      	ldr	r3, [pc, #492]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008220:	d1ee      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008222:	7cfb      	ldrb	r3, [r7, #19]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d13c      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008228:	f7ff ffa7 	bl	800817a <LL_RCC_GetRTCClockSource>
 800822c:	4602      	mov	r2, r0
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	429a      	cmp	r2, r3
 8008234:	d00f      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008242:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008244:	f7ff ffa5 	bl	8008192 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008248:	f7ff ffb3 	bl	80081b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800824c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d014      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fa fd0e 	bl	8002c80 <HAL_GetTick>
 8008264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008266:	e00b      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008268:	f7fa fd0a 	bl	8002c80 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f241 3288 	movw	r2, #5000	; 0x1388
 8008276:	4293      	cmp	r3, r2
 8008278:	d902      	bls.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	74fb      	strb	r3, [r7, #19]
            break;
 800827e:	e004      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008280:	f7ff feb4 	bl	8007fec <LL_RCC_LSE_IsReady>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d1ee      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800828a:	7cfb      	ldrb	r3, [r7, #19]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff ff5b 	bl	8008150 <LL_RCC_SetRTCClockSource>
 800829a:	e004      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800829c:	7cfb      	ldrb	r3, [r7, #19]
 800829e:	74bb      	strb	r3, [r7, #18]
 80082a0:	e001      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	7cfb      	ldrb	r3, [r7, #19]
 80082a4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fea9 	bl	800800e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d004      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fe9e 	bl	800800e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fec0 	bl	8008068 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fee6 	bl	80080ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fedb 	bl	80080ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fed0 	bl	80080ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fea9 	bl	8008092 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fe9e 	bl	8008092 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fe93 	bl	8008092 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b00      	cmp	r3, #0
 8008376:	d011      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fe5e 	bl	800803e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	d107      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800838c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800839a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d010      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff fea5 	bl	80080fc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d107      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80083ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d011      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fea3 	bl	8008126 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e8:	d107      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80083fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	58000400 	.word	0x58000400

08008408 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d071      	beq.n	80084fe <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7fa f872 	bl	8002518 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800843c:	4b32      	ldr	r3, [pc, #200]	; (8008508 <HAL_RTC_Init+0x100>)
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b10      	cmp	r3, #16
 8008446:	d051      	beq.n	80084ec <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008448:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <HAL_RTC_Init+0x100>)
 800844a:	22ca      	movs	r2, #202	; 0xca
 800844c:	625a      	str	r2, [r3, #36]	; 0x24
 800844e:	4b2e      	ldr	r3, [pc, #184]	; (8008508 <HAL_RTC_Init+0x100>)
 8008450:	2253      	movs	r2, #83	; 0x53
 8008452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fa11 	bl	800887c <RTC_EnterInitMode>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d13f      	bne.n	80084e4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008464:	4b28      	ldr	r3, [pc, #160]	; (8008508 <HAL_RTC_Init+0x100>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	4a27      	ldr	r2, [pc, #156]	; (8008508 <HAL_RTC_Init+0x100>)
 800846a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800846e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008472:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008474:	4b24      	ldr	r3, [pc, #144]	; (8008508 <HAL_RTC_Init+0x100>)
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6859      	ldr	r1, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	4319      	orrs	r1, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	430b      	orrs	r3, r1
 8008488:	491f      	ldr	r1, [pc, #124]	; (8008508 <HAL_RTC_Init+0x100>)
 800848a:	4313      	orrs	r3, r2
 800848c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	491b      	ldr	r1, [pc, #108]	; (8008508 <HAL_RTC_Init+0x100>)
 800849a:	4313      	orrs	r3, r2
 800849c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800849e:	4b1a      	ldr	r3, [pc, #104]	; (8008508 <HAL_RTC_Init+0x100>)
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	430b      	orrs	r3, r1
 80084b0:	4915      	ldr	r1, [pc, #84]	; (8008508 <HAL_RTC_Init+0x100>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa14 	bl	80088e4 <RTC_ExitInitMode>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10e      	bne.n	80084e4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <HAL_RTC_Init+0x100>)
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a19      	ldr	r1, [r3, #32]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	4319      	orrs	r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	430b      	orrs	r3, r1
 80084de:	490a      	ldr	r1, [pc, #40]	; (8008508 <HAL_RTC_Init+0x100>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084e4:	4b08      	ldr	r3, [pc, #32]	; (8008508 <HAL_RTC_Init+0x100>)
 80084e6:	22ff      	movs	r2, #255	; 0xff
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24
 80084ea:	e001      	b.n	80084f0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	40002800 	.word	0x40002800

0800850c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800850c:	b590      	push	{r4, r7, lr}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_RTC_SetAlarm_IT+0x1e>
 8008526:	2302      	movs	r3, #2
 8008528:	e0f3      	b.n	8008712 <HAL_RTC_SetAlarm_IT+0x206>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800853a:	4b78      	ldr	r3, [pc, #480]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008542:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d06a      	beq.n	8008622 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d13a      	bne.n	80085c8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008552:	4b72      	ldr	r3, [pc, #456]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f9f5 	bl	8008960 <RTC_ByteToBcd2>
 8008576:	4603      	mov	r3, r0
 8008578:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f9ee 	bl	8008960 <RTC_ByteToBcd2>
 8008584:	4603      	mov	r3, r0
 8008586:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008588:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	789b      	ldrb	r3, [r3, #2]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f9e6 	bl	8008960 <RTC_ByteToBcd2>
 8008594:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008596:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80085a0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f9d8 	bl	8008960 <RTC_ByteToBcd2>
 80085b0:	4603      	mov	r3, r0
 80085b2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80085b4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80085bc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e02c      	b.n	8008622 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80085d0:	d00d      	beq.n	80085ee <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085da:	d008      	beq.n	80085ee <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80085dc:	4b4f      	ldr	r3, [pc, #316]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2200      	movs	r2, #0
 80085ec:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085fa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008600:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008608:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008610:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008612:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008618:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008622:	4b3e      	ldr	r3, [pc, #248]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008624:	22ca      	movs	r2, #202	; 0xca
 8008626:	625a      	str	r2, [r3, #36]	; 0x24
 8008628:	4b3c      	ldr	r3, [pc, #240]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800862a:	2253      	movs	r2, #83	; 0x53
 800862c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008636:	d12c      	bne.n	8008692 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008638:	4b38      	ldr	r3, [pc, #224]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	4a37      	ldr	r2, [pc, #220]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800863e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008642:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008644:	4b35      	ldr	r3, [pc, #212]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008646:	2201      	movs	r2, #1
 8008648:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008650:	d107      	bne.n	8008662 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	4930      	ldr	r1, [pc, #192]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800865c:	4313      	orrs	r3, r2
 800865e:	644b      	str	r3, [r1, #68]	; 0x44
 8008660:	e006      	b.n	8008670 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008662:	4a2e      	ldr	r2, [pc, #184]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008668:	4a2c      	ldr	r2, [pc, #176]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008670:	4a2a      	ldr	r2, [pc, #168]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867c:	f043 0201 	orr.w	r2, r3, #1
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008684:	4b25      	ldr	r3, [pc, #148]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	4a24      	ldr	r2, [pc, #144]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 800868a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800868e:	6193      	str	r3, [r2, #24]
 8008690:	e02b      	b.n	80086ea <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008692:	4b22      	ldr	r3, [pc, #136]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	4a21      	ldr	r2, [pc, #132]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 8008698:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800869c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800869e:	4b1f      	ldr	r3, [pc, #124]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086a0:	2202      	movs	r2, #2
 80086a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086aa:	d107      	bne.n	80086bc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	4919      	ldr	r1, [pc, #100]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086ba:	e006      	b.n	80086ca <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80086bc:	4a17      	ldr	r2, [pc, #92]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80086c2:	4a16      	ldr	r2, [pc, #88]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80086ca:	4a14      	ldr	r2, [pc, #80]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	f043 0202 	orr.w	r2, r3, #2
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	4a0e      	ldr	r2, [pc, #56]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086e4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80086e8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <HAL_RTC_SetAlarm_IT+0x214>)
 80086ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086f0:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <HAL_RTC_SetAlarm_IT+0x214>)
 80086f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <HAL_RTC_SetAlarm_IT+0x210>)
 80086fc:	22ff      	movs	r2, #255	; 0xff
 80086fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	bd90      	pop	{r4, r7, pc}
 800871a:	bf00      	nop
 800871c:	40002800 	.word	0x40002800
 8008720:	58000800 	.word	0x58000800

08008724 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_RTC_DeactivateAlarm+0x18>
 8008738:	2302      	movs	r3, #2
 800873a:	e048      	b.n	80087ce <HAL_RTC_DeactivateAlarm+0xaa>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800874c:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800874e:	22ca      	movs	r2, #202	; 0xca
 8008750:	625a      	str	r2, [r3, #36]	; 0x24
 8008752:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008754:	2253      	movs	r2, #83	; 0x53
 8008756:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800875e:	d115      	bne.n	800878c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008760:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800876a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800876c:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008776:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	f023 0201 	bic.w	r2, r3, #1
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008784:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008786:	2201      	movs	r2, #1
 8008788:	65da      	str	r2, [r3, #92]	; 0x5c
 800878a:	e014      	b.n	80087b6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800878c:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	4a11      	ldr	r2, [pc, #68]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008792:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008796:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008798:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800879a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879c:	4a0e      	ldr	r2, [pc, #56]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800879e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087a2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a8:	f023 0202 	bic.w	r2, r3, #2
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80087b2:	2202      	movs	r2, #2
 80087b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087b6:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80087b8:	22ff      	movs	r2, #255	; 0xff
 80087ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr
 80087d8:	40002800 	.word	0x40002800

080087dc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <HAL_RTC_AlarmIRQHandler+0x50>)
 80087e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	4013      	ands	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80087fa:	4b0c      	ldr	r3, [pc, #48]	; (800882c <HAL_RTC_AlarmIRQHandler+0x50>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fa fcc6 	bl	8003192 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d005      	beq.n	800881c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008812:	2202      	movs	r2, #2
 8008814:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f94a 	bl	8008ab0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	40002800 	.word	0x40002800

08008830 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <HAL_RTC_WaitForSynchro+0x48>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4a0e      	ldr	r2, [pc, #56]	; (8008878 <HAL_RTC_WaitForSynchro+0x48>)
 800883e:	f023 0320 	bic.w	r3, r3, #32
 8008842:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008844:	f7fa fa1c 	bl	8002c80 <HAL_GetTick>
 8008848:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800884a:	e009      	b.n	8008860 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800884c:	f7fa fa18 	bl	8002c80 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800885a:	d901      	bls.n	8008860 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e006      	b.n	800886e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008860:	4b05      	ldr	r3, [pc, #20]	; (8008878 <HAL_RTC_WaitForSynchro+0x48>)
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0ef      	beq.n	800884c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	40002800 	.word	0x40002800

0800887c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <RTC_EnterInitMode+0x64>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d120      	bne.n	80088d6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008894:	4b12      	ldr	r3, [pc, #72]	; (80088e0 <RTC_EnterInitMode+0x64>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	4a11      	ldr	r2, [pc, #68]	; (80088e0 <RTC_EnterInitMode+0x64>)
 800889a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80088a0:	f7fa f9ee 	bl	8002c80 <HAL_GetTick>
 80088a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80088a6:	e00d      	b.n	80088c4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80088a8:	f7fa f9ea 	bl	8002c80 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088b6:	d905      	bls.n	80088c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2203      	movs	r2, #3
 80088c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <RTC_EnterInitMode+0x64>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <RTC_EnterInitMode+0x5a>
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d1e8      	bne.n	80088a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	40002800 	.word	0x40002800

080088e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80088f0:	4b1a      	ldr	r3, [pc, #104]	; (800895c <RTC_ExitInitMode+0x78>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4a19      	ldr	r2, [pc, #100]	; (800895c <RTC_ExitInitMode+0x78>)
 80088f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088fa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80088fc:	4b17      	ldr	r3, [pc, #92]	; (800895c <RTC_ExitInitMode+0x78>)
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff ff91 	bl	8008830 <HAL_RTC_WaitForSynchro>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01e      	beq.n	8008952 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2203      	movs	r2, #3
 8008918:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	73fb      	strb	r3, [r7, #15]
 8008920:	e017      	b.n	8008952 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008922:	4b0e      	ldr	r3, [pc, #56]	; (800895c <RTC_ExitInitMode+0x78>)
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	4a0d      	ldr	r2, [pc, #52]	; (800895c <RTC_ExitInitMode+0x78>)
 8008928:	f023 0320 	bic.w	r3, r3, #32
 800892c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff ff7e 	bl	8008830 <HAL_RTC_WaitForSynchro>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2203      	movs	r2, #3
 800893e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <RTC_ExitInitMode+0x78>)
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	4a04      	ldr	r2, [pc, #16]	; (800895c <RTC_ExitInitMode+0x78>)
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	40002800 	.word	0x40002800

08008960 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008972:	e005      	b.n	8008980 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3301      	adds	r3, #1
 8008978:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	3b0a      	subs	r3, #10
 800897e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	2b09      	cmp	r3, #9
 8008984:	d8f6      	bhi.n	8008974 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	b2db      	uxtb	r3, r3
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	b2da      	uxtb	r2, r3
 800898e:	7afb      	ldrb	r3, [r7, #11]
 8008990:	4313      	orrs	r3, r2
 8008992:	b2db      	uxtb	r3, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr
	...

080089a0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e01f      	b.n	80089f6 <HAL_RTCEx_EnableBypassShadow+0x56>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2202      	movs	r2, #2
 80089c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089c6:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80089c8:	22ca      	movs	r2, #202	; 0xca
 80089ca:	625a      	str	r2, [r3, #36]	; 0x24
 80089cc:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80089ce:	2253      	movs	r2, #83	; 0x53
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80089d2:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80089d8:	f043 0320 	orr.w	r3, r3, #32
 80089dc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80089e0:	22ff      	movs	r2, #255	; 0xff
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr
 8008a00:	40002800 	.word	0x40002800

08008a04 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d101      	bne.n	8008a1a <HAL_RTCEx_SetSSRU_IT+0x16>
 8008a16:	2302      	movs	r3, #2
 8008a18:	e027      	b.n	8008a6a <HAL_RTCEx_SetSSRU_IT+0x66>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2202      	movs	r2, #2
 8008a26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a2c:	22ca      	movs	r2, #202	; 0xca
 8008a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8008a30:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a32:	2253      	movs	r2, #83	; 0x53
 8008a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	; (8008a74 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a40:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a48:	4a0b      	ldr	r2, [pc, #44]	; (8008a78 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a54:	22ff      	movs	r2, #255	; 0xff
 8008a56:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr
 8008a74:	40002800 	.word	0x40002800
 8008a78:	58000800 	.word	0x58000800

08008a7c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008a84:	4b09      	ldr	r3, [pc, #36]	; (8008aac <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008a90:	4b06      	ldr	r3, [pc, #24]	; (8008aac <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008a92:	2240      	movs	r2, #64	; 0x40
 8008a94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7fa fb85 	bl	80031a6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	40002800 	.word	0x40002800

08008ab0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr
	...

08008ac4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008ad2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4413      	add	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	4000b100 	.word	0x4000b100

08008af4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <HAL_RTCEx_BKUPRead+0x28>)
 8008b00:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	4000b100 	.word	0x4000b100

08008b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e0c6      	b.n	8008cc0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d108      	bne.n	8008b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b42:	d009      	beq.n	8008b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	61da      	str	r2, [r3, #28]
 8008b4a:	e005      	b.n	8008b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d106      	bne.n	8008b72 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7f9 fd7d 	bl	800266c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b88:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b92:	d902      	bls.n	8008b9a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	e002      	b.n	8008ba0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008ba8:	d007      	beq.n	8008bba <HAL_SPI_Init+0x9a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bb2:	d002      	beq.n	8008bba <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfc:	ea42 0103 	orr.w	r1, r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c18:	d11b      	bne.n	8008c52 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c2a:	d903      	bls.n	8008c34 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
 8008c32:	e002      	b.n	8008c3a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d107      	bne.n	8008c52 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	f003 0204 	and.w	r2, r3, #4
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6a:	f003 0308 	and.w	r3, r3, #8
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c78:	ea42 0103 	orr.w	r1, r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c92:	d105      	bne.n	8008ca0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69da      	ldr	r2, [r3, #28]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <HAL_SPI_Transmit+0x22>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e17a      	b.n	8008fe0 <HAL_SPI_Transmit+0x318>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cf2:	f7f9 ffc5 	bl	8002c80 <HAL_GetTick>
 8008cf6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008cf8:	88fb      	ldrh	r3, [r7, #6]
 8008cfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d002      	beq.n	8008d0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d0c:	e15f      	b.n	8008fce <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <HAL_SPI_Transmit+0x52>
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d1e:	e156      	b.n	8008fce <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2203      	movs	r2, #3
 8008d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	88fa      	ldrh	r2, [r7, #6]
 8008d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	88fa      	ldrh	r2, [r7, #6]
 8008d3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6a:	d10f      	bne.n	8008d8c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d8a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d94:	d10f      	bne.n	8008db6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008db4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b40      	cmp	r3, #64	; 0x40
 8008dc2:	d007      	beq.n	8008dd4 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ddc:	d94b      	bls.n	8008e76 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_SPI_Transmit+0x124>
 8008de6:	8afb      	ldrh	r3, [r7, #22]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d13e      	bne.n	8008e6a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	881a      	ldrh	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	1c9a      	adds	r2, r3, #2
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e10:	e02b      	b.n	8008e6a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d112      	bne.n	8008e46 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	881a      	ldrh	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e44:	e011      	b.n	8008e6a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e46:	f7f9 ff1b 	bl	8002c80 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d803      	bhi.n	8008e5e <HAL_SPI_Transmit+0x196>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5c:	d102      	bne.n	8008e64 <HAL_SPI_Transmit+0x19c>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e68:	e0b1      	b.n	8008fce <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1ce      	bne.n	8008e12 <HAL_SPI_Transmit+0x14a>
 8008e74:	e07c      	b.n	8008f70 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <HAL_SPI_Transmit+0x1bc>
 8008e7e:	8afb      	ldrh	r3, [r7, #22]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d170      	bne.n	8008f66 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d912      	bls.n	8008eb4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	881a      	ldrh	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	1c9a      	adds	r2, r3, #2
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b02      	subs	r3, #2
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008eb2:	e058      	b.n	8008f66 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	330c      	adds	r3, #12
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008eda:	e044      	b.n	8008f66 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d12b      	bne.n	8008f42 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d912      	bls.n	8008f1a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	881a      	ldrh	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	1c9a      	adds	r2, r3, #2
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3b02      	subs	r3, #2
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f18:	e025      	b.n	8008f66 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	330c      	adds	r3, #12
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f40:	e011      	b.n	8008f66 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f42:	f7f9 fe9d 	bl	8002c80 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d803      	bhi.n	8008f5a <HAL_SPI_Transmit+0x292>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d102      	bne.n	8008f60 <HAL_SPI_Transmit+0x298>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d102      	bne.n	8008f66 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f64:	e033      	b.n	8008fce <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1b5      	bne.n	8008edc <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f78:	d107      	bne.n	8008f8a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f88:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 fe6e 	bl	8009c70 <SPI_EndRxTxTransaction>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fa8:	2300      	movs	r3, #0
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	613b      	str	r3, [r7, #16]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	613b      	str	r3, [r7, #16]
 8008fbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	77fb      	strb	r3, [r7, #31]
 8008fca:	e000      	b.n	8008fce <HAL_SPI_Transmit+0x306>
  }

error:
 8008fcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08c      	sub	sp, #48	; 0x30
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800900e:	d112      	bne.n	8009036 <HAL_SPI_Receive+0x4e>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10e      	bne.n	8009036 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2204      	movs	r2, #4
 800901c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009020:	88fa      	ldrh	r2, [r7, #6]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	4613      	mov	r3, r2
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f9c4 	bl	80093ba <HAL_SPI_TransmitReceive>
 8009032:	4603      	mov	r3, r0
 8009034:	e1bd      	b.n	80093b2 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800903c:	2b01      	cmp	r3, #1
 800903e:	d101      	bne.n	8009044 <HAL_SPI_Receive+0x5c>
 8009040:	2302      	movs	r3, #2
 8009042:	e1b6      	b.n	80093b2 <HAL_SPI_Receive+0x3ca>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800904c:	f7f9 fe18 	bl	8002c80 <HAL_GetTick>
 8009050:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b01      	cmp	r3, #1
 800905c:	d003      	beq.n	8009066 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800905e:	2302      	movs	r3, #2
 8009060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009064:	e19b      	b.n	800939e <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <HAL_SPI_Receive+0x8a>
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009078:	e191      	b.n	800939e <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2204      	movs	r2, #4
 800907e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	88fa      	ldrh	r2, [r7, #6]
 8009092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	88fa      	ldrh	r2, [r7, #6]
 800909a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c4:	d118      	bne.n	80090f8 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090e4:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009100:	d908      	bls.n	8009114 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	e007      	b.n	8009124 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009122:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800912c:	d10f      	bne.n	800914e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800913c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800914c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	d007      	beq.n	800916c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009174:	d869      	bhi.n	800924a <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009176:	e031      	b.n	80091dc <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b01      	cmp	r3, #1
 8009184:	d117      	bne.n	80091b6 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f103 020c 	add.w	r2, r3, #12
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80091b4:	e012      	b.n	80091dc <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091b6:	f7f9 fd63 	bl	8002c80 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d803      	bhi.n	80091ce <HAL_SPI_Receive+0x1e6>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d102      	bne.n	80091d4 <HAL_SPI_Receive+0x1ec>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80091da:	e0e0      	b.n	800939e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1c7      	bne.n	8009178 <HAL_SPI_Receive+0x190>
 80091e8:	e035      	b.n	8009256 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d115      	bne.n	8009224 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	b292      	uxth	r2, r2
 8009204:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	1c9a      	adds	r2, r3, #2
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009216:	b29b      	uxth	r3, r3
 8009218:	3b01      	subs	r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009222:	e012      	b.n	800924a <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009224:	f7f9 fd2c 	bl	8002c80 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d803      	bhi.n	800923c <HAL_SPI_Receive+0x254>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d102      	bne.n	8009242 <HAL_SPI_Receive+0x25a>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d103      	bne.n	800924a <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009248:	e0a9      	b.n	800939e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1c9      	bne.n	80091ea <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800925e:	d178      	bne.n	8009352 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800926e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2201      	movs	r2, #1
 8009278:	2101      	movs	r1, #1
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fb82 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800928c:	e087      	b.n	800939e <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009296:	d907      	bls.n	80092a8 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	b292      	uxth	r2, r2
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	e008      	b.n	80092ba <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f103 020c 	add.w	r2, r3, #12
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b4:	7812      	ldrb	r2, [r2, #0]
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2201      	movs	r2, #1
 80092c2:	2101      	movs	r1, #1
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fb5d 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d4:	f043 0202 	orr.w	r2, r3, #2
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80092e2:	e05c      	b.n	800939e <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80092ec:	d105      	bne.n	80092fa <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	e02b      	b.n	8009352 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	330c      	adds	r3, #12
 8009300:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800930a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009314:	d11d      	bne.n	8009352 <HAL_SPI_Receive+0x36a>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	2b02      	cmp	r3, #2
 800931c:	d119      	bne.n	8009352 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2201      	movs	r2, #1
 8009326:	2101      	movs	r1, #1
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fb2b 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009338:	f043 0202 	orr.w	r2, r3, #2
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009346:	e02a      	b.n	800939e <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	b2db      	uxtb	r3, r3
 800934e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009350:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 fc32 	bl	8009bc0 <SPI_EndRxTransaction>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2220      	movs	r2, #32
 8009366:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b10      	cmp	r3, #16
 8009374:	d10a      	bne.n	800938c <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937a:	f043 0202 	orr.w	r2, r3, #2
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800938a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800939a:	e000      	b.n	800939e <HAL_SPI_Receive+0x3b6>
  }

error :
 800939c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3728      	adds	r7, #40	; 0x28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b092      	sub	sp, #72	; 0x48
 80093be:	af02      	add	r7, sp, #8
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093d0:	2301      	movs	r3, #1
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_SPI_TransmitReceive+0x2e>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e2c8      	b.n	800997a <HAL_SPI_TransmitReceive+0x5c0>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093f0:	f7f9 fc46 	bl	8002c80 <HAL_GetTick>
 80093f4:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8009406:	887b      	ldrh	r3, [r7, #2]
 8009408:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800940a:	887b      	ldrh	r3, [r7, #2]
 800940c:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800941e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009422:	2b01      	cmp	r3, #1
 8009424:	d00f      	beq.n	8009446 <HAL_SPI_TransmitReceive+0x8c>
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800942c:	d107      	bne.n	800943e <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d103      	bne.n	800943e <HAL_SPI_TransmitReceive+0x84>
 8009436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800943a:	2b04      	cmp	r3, #4
 800943c:	d003      	beq.n	8009446 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 800943e:	2302      	movs	r3, #2
 8009440:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009444:	e28f      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_SPI_TransmitReceive+0x9e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <HAL_SPI_TransmitReceive+0x9e>
 8009452:	887b      	ldrh	r3, [r7, #2]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800945e:	e282      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b04      	cmp	r3, #4
 800946a:	d003      	beq.n	8009474 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2205      	movs	r2, #5
 8009470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	887a      	ldrh	r2, [r7, #2]
 8009484:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	887a      	ldrh	r2, [r7, #2]
 800948c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	887a      	ldrh	r2, [r7, #2]
 800949a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	887a      	ldrh	r2, [r7, #2]
 80094a0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b6:	d10f      	bne.n	80094d8 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094d6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094e0:	d802      	bhi.n	80094e8 <HAL_SPI_TransmitReceive+0x12e>
 80094e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d908      	bls.n	80094fa <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094f6:	605a      	str	r2, [r3, #4]
 80094f8:	e007      	b.n	800950a <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009508:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b40      	cmp	r3, #64	; 0x40
 8009516:	d007      	beq.n	8009528 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009530:	f240 80a4 	bls.w	800967c <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_SPI_TransmitReceive+0x18a>
 800953c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800953e:	2b01      	cmp	r3, #1
 8009540:	f040 808e 	bne.w	8009660 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	881a      	ldrh	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	1c9a      	adds	r2, r3, #2
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009568:	e07a      	b.n	8009660 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b02      	cmp	r3, #2
 8009576:	d13f      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x23e>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957c:	b29b      	uxth	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d03a      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x23e>
 8009582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d137      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	881a      	ldrh	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	1c9a      	adds	r2, r3, #2
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	3b01      	subs	r3, #1
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11e      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x23e>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095c2:	d119      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10c      	bne.n	80095e8 <HAL_SPI_TransmitReceive+0x22e>
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f003 0308 	and.w	r3, r3, #8
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095e6:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095f6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b01      	cmp	r3, #1
 8009604:	d11c      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x286>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d016      	beq.n	8009640 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961c:	b292      	uxth	r2, r2
 800961e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	1c9a      	adds	r2, r3, #2
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800963c:	2301      	movs	r3, #1
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009640:	f7f9 fb1e 	bl	8002c80 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964c:	429a      	cmp	r2, r3
 800964e:	d807      	bhi.n	8009660 <HAL_SPI_TransmitReceive+0x2a6>
 8009650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d003      	beq.n	8009660 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800965e:	e182      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	f47f af7f 	bne.w	800956a <HAL_SPI_TransmitReceive+0x1b0>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009672:	b29b      	uxth	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	f47f af78 	bne.w	800956a <HAL_SPI_TransmitReceive+0x1b0>
 800967a:	e103      	b.n	8009884 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <HAL_SPI_TransmitReceive+0x2d2>
 8009684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009686:	2b01      	cmp	r3, #1
 8009688:	f040 80ef 	bne.w	800986a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b01      	cmp	r3, #1
 8009694:	d912      	bls.n	80096bc <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	881a      	ldrh	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	1c9a      	adds	r2, r3, #2
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b02      	subs	r3, #2
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096ba:	e0d6      	b.n	800986a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096e2:	e0c2      	b.n	800986a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d158      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x3ea>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d053      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x3ea>
 80096fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d150      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009706:	b29b      	uxth	r3, r3
 8009708:	2b01      	cmp	r3, #1
 800970a:	d912      	bls.n	8009732 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	1c9a      	adds	r2, r3, #2
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b02      	subs	r3, #2
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009730:	e012      	b.n	8009758 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	330c      	adds	r3, #12
 800973c:	7812      	ldrb	r2, [r2, #0]
 800973e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800974e:	b29b      	uxth	r3, r3
 8009750:	3b01      	subs	r3, #1
 8009752:	b29a      	uxth	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d11e      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x3ea>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976e:	d119      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10c      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x3da>
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d007      	beq.n	8009794 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009792:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097a2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d148      	bne.n	8009844 <HAL_SPI_TransmitReceive+0x48a>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d042      	beq.n	8009844 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d923      	bls.n	8009812 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	b292      	uxth	r2, r2
 80097d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	1c9a      	adds	r2, r3, #2
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b02      	subs	r3, #2
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d81f      	bhi.n	8009840 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800980e:	605a      	str	r2, [r3, #4]
 8009810:	e016      	b.n	8009840 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f103 020c 	add.w	r2, r3, #12
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	7812      	ldrb	r2, [r2, #0]
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009834:	b29b      	uxth	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	b29a      	uxth	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009840:	2301      	movs	r3, #1
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009844:	f7f9 fa1c 	bl	8002c80 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009850:	429a      	cmp	r2, r3
 8009852:	d803      	bhi.n	800985c <HAL_SPI_TransmitReceive+0x4a2>
 8009854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985a:	d102      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x4a8>
 800985c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800985e:	2b00      	cmp	r3, #0
 8009860:	d103      	bne.n	800986a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009868:	e07d      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986e:	b29b      	uxth	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	f47f af37 	bne.w	80096e4 <HAL_SPI_TransmitReceive+0x32a>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	f47f af30 	bne.w	80096e4 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988c:	d146      	bne.n	800991c <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009894:	2201      	movs	r2, #1
 8009896:	2101      	movs	r1, #1
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f873 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d009      	beq.n	80098b8 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a8:	f043 0202 	orr.w	r2, r3, #2
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80098b6:	e056      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098c0:	d105      	bne.n	80098ce <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	e026      	b.n	800991c <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098de:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d119      	bne.n	800991c <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ee:	2201      	movs	r2, #1
 80098f0:	2101      	movs	r1, #1
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f846 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009902:	f043 0202 	orr.w	r2, r3, #2
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8009910:	e029      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800991a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b10      	cmp	r3, #16
 8009928:	d10d      	bne.n	8009946 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800992e:	f043 0202 	orr.w	r2, r3, #2
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800993e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009948:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f990 	bl	8009c70 <SPI_EndRxTxTransaction>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	661a      	str	r2, [r3, #96]	; 0x60
 8009962:	e000      	b.n	8009966 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009964:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009976:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800997a:	4618      	mov	r0, r3
 800997c:	3740      	adds	r7, #64	; 0x40
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009994:	f7f9 f974 	bl	8002c80 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099a4:	f7f9 f96c 	bl	8002c80 <HAL_GetTick>
 80099a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099aa:	4b39      	ldr	r3, [pc, #228]	; (8009a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	015b      	lsls	r3, r3, #5
 80099b0:	0d1b      	lsrs	r3, r3, #20
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099ba:	e054      	b.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d050      	beq.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099c4:	f7f9 f95c 	bl	8002c80 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d902      	bls.n	80099da <SPI_WaitFlagStateUntilTimeout+0x56>
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d13d      	bne.n	8009a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f2:	d111      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099fc:	d004      	beq.n	8009a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a06:	d107      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a20:	d10f      	bne.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e017      	b.n	8009a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	bf0c      	ite	eq
 8009a76:	2301      	moveq	r3, #1
 8009a78:	2300      	movne	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d19b      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	2000000c 	.word	0x2000000c

08009a94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009aa6:	f7f9 f8eb 	bl	8002c80 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009ab6:	f7f9 f8e3 	bl	8002c80 <HAL_GetTick>
 8009aba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ac4:	4b3d      	ldr	r3, [pc, #244]	; (8009bbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	00da      	lsls	r2, r3, #3
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	0d1b      	lsrs	r3, r3, #20
 8009ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad6:	fb02 f303 	mul.w	r3, r2, r3
 8009ada:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009adc:	e060      	b.n	8009ba0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ae4:	d107      	bne.n	8009af6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afc:	d050      	beq.n	8009ba0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009afe:	f7f9 f8bf 	bl	8002c80 <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d902      	bls.n	8009b14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d13d      	bne.n	8009b90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b2c:	d111      	bne.n	8009b52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b36:	d004      	beq.n	8009b42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b40:	d107      	bne.n	8009b52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5a:	d10f      	bne.n	8009b7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e010      	b.n	8009bb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d196      	bne.n	8009ade <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3728      	adds	r7, #40	; 0x28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	2000000c 	.word	0x2000000c

08009bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bd4:	d111      	bne.n	8009bfa <SPI_EndRxTransaction+0x3a>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bde:	d004      	beq.n	8009bea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be8:	d107      	bne.n	8009bfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	2180      	movs	r1, #128	; 0x80
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff febd 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c14:	f043 0220 	orr.w	r2, r3, #32
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e023      	b.n	8009c68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c28:	d11d      	bne.n	8009c66 <SPI_EndRxTransaction+0xa6>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c32:	d004      	beq.n	8009c3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c3c:	d113      	bne.n	8009c66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff ff22 	bl	8009a94 <SPI_WaitFifoStateUntilTimeout>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d007      	beq.n	8009c66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c5a:	f043 0220 	orr.w	r2, r3, #32
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e000      	b.n	8009c68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f7ff ff03 	bl	8009a94 <SPI_WaitFifoStateUntilTimeout>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c98:	f043 0220 	orr.w	r2, r3, #32
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e027      	b.n	8009cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2200      	movs	r2, #0
 8009cac:	2180      	movs	r1, #128	; 0x80
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff fe68 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d007      	beq.n	8009cca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cbe:	f043 0220 	orr.w	r2, r3, #32
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e014      	b.n	8009cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7ff fedc 	bl	8009a94 <SPI_WaitFifoStateUntilTimeout>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce6:	f043 0220 	orr.w	r2, r3, #32
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e000      	b.n	8009cf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <LL_PWR_SetRadioBusyTrigger>:
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009d04:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d0c:	4904      	ldr	r1, [pc, #16]	; (8009d20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	608b      	str	r3, [r1, #8]
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	58000400 	.word	0x58000400

08009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2e:	4a04      	ldr	r2, [pc, #16]	; (8009d40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d38:	bf00      	nop
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bc80      	pop	{r7}
 8009d3e:	4770      	bx	lr
 8009d40:	58000400 	.word	0x58000400

08009d44 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8009d44:	b480      	push	{r7}
 8009d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4e:	4a04      	ldr	r2, [pc, #16]	; (8009d60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d58:	bf00      	nop
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bc80      	pop	{r7}
 8009d5e:	4770      	bx	lr
 8009d60:	58000400 	.word	0x58000400

08009d64 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009d68:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d6e:	619a      	str	r2, [r3, #24]
}
 8009d70:	bf00      	nop
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr
 8009d78:	58000400 	.word	0x58000400

08009d7c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d101      	bne.n	8009d90 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e000      	b.n	8009d92 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bc80      	pop	{r7}
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	58000400 	.word	0x58000400

08009da0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009da0:	b480      	push	{r7}
 8009da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009da4:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	d101      	bne.n	8009db4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bc80      	pop	{r7}
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	58000400 	.word	0x58000400

08009dc4 <LL_RCC_RF_DisableReset>:
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ddc:	bf00      	nop
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr

08009de4 <LL_RCC_IsRFUnderReset>:
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df8:	d101      	bne.n	8009dfe <LL_RCC_IsRFUnderReset+0x1a>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e000      	b.n	8009e00 <LL_RCC_IsRFUnderReset+0x1c>
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <LL_EXTI_EnableIT_32_63>:
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009e10:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <LL_EXTI_EnableIT_32_63+0x24>)
 8009e12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009e16:	4905      	ldr	r1, [pc, #20]	; (8009e2c <LL_EXTI_EnableIT_32_63+0x24>)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	58000800 	.word	0x58000800

08009e30 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
    return status;
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	e052      	b.n	8009eec <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	799b      	ldrb	r3, [r3, #6]
 8009e4e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <HAL_SUBGHZ_Init+0x2c>
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d109      	bne.n	8009e70 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7f8 fd60 	bl	8002928 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009e68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e6c:	f7ff ffcc 	bl	8009e08 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d126      	bne.n	8009ec4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009e7c:	f7ff ffa2 	bl	8009dc4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e80:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <HAL_SUBGHZ_Init+0xc4>)
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	4613      	mov	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	1a9b      	subs	r3, r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	0cdb      	lsrs	r3, r3, #19
 8009e8e:	2264      	movs	r2, #100	; 0x64
 8009e90:	fb02 f303 	mul.w	r3, r2, r3
 8009e94:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d105      	bne.n	8009ea8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	609a      	str	r2, [r3, #8]
        break;
 8009ea6:	e007      	b.n	8009eb8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009eae:	f7ff ff99 	bl	8009de4 <LL_RCC_IsRFUnderReset>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1ee      	bne.n	8009e96 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009eb8:	f7ff ff34 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009ebc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009ec0:	f7ff ff1c 	bl	8009cfc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009ec4:	f7ff ff4e 	bl	8009d64 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10a      	bne.n	8009ee4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 faac 	bl	800a430 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	719a      	strb	r2, [r3, #6]

  return status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	2000000c 	.word	0x2000000c

08009ef8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	461a      	mov	r2, r3
 8009f04:	460b      	mov	r3, r1
 8009f06:	817b      	strh	r3, [r7, #10]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	799b      	ldrb	r3, [r3, #6]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d14a      	bne.n	8009fac <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	795b      	ldrb	r3, [r3, #5]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d101      	bne.n	8009f22 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e045      	b.n	8009fae <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fb4c 	bl	800a5cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f34:	f7ff ff06 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009f38:	210d      	movs	r1, #13
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fa98 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009f40:	897b      	ldrh	r3, [r7, #10]
 8009f42:	0a1b      	lsrs	r3, r3, #8
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fa90 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f50:	897b      	ldrh	r3, [r7, #10]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 fa8a 	bl	800a470 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	82bb      	strh	r3, [r7, #20]
 8009f60:	e00a      	b.n	8009f78 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f62:	8abb      	ldrh	r3, [r7, #20]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4413      	add	r3, r2
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 fa7f 	bl	800a470 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f72:	8abb      	ldrh	r3, [r7, #20]
 8009f74:	3301      	adds	r3, #1
 8009f76:	82bb      	strh	r3, [r7, #20]
 8009f78:	8aba      	ldrh	r2, [r7, #20]
 8009f7a:	893b      	ldrh	r3, [r7, #8]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d3f0      	bcc.n	8009f62 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f80:	f7ff fed0 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 fb45 	bl	800a614 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	75fb      	strb	r3, [r7, #23]
 8009f96:	e001      	b.n	8009f9c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	715a      	strb	r2, [r3, #5]

    return status;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	e000      	b.n	8009fae <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009fac:	2302      	movs	r3, #2
  }
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b088      	sub	sp, #32
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	817b      	strh	r3, [r7, #10]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	799b      	ldrb	r3, [r3, #6]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d14a      	bne.n	800a06e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	795b      	ldrb	r3, [r3, #5]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d101      	bne.n	8009fe4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e045      	b.n	800a070 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 faee 	bl	800a5cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ff0:	f7ff fea8 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009ff4:	211d      	movs	r1, #29
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fa3a 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009ffc:	897b      	ldrh	r3, [r7, #10]
 8009ffe:	0a1b      	lsrs	r3, r3, #8
 800a000:	b29b      	uxth	r3, r3
 800a002:	b2db      	uxtb	r3, r3
 800a004:	4619      	mov	r1, r3
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fa32 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a00c:	897b      	ldrh	r3, [r7, #10]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	4619      	mov	r1, r3
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f000 fa2c 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fa28 	bl	800a470 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a020:	2300      	movs	r3, #0
 800a022:	82fb      	strh	r3, [r7, #22]
 800a024:	e009      	b.n	800a03a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fa77 	bl	800a51c <SUBGHZSPI_Receive>
      pData++;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	3301      	adds	r3, #1
 800a032:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a034:	8afb      	ldrh	r3, [r7, #22]
 800a036:	3301      	adds	r3, #1
 800a038:	82fb      	strh	r3, [r7, #22]
 800a03a:	8afa      	ldrh	r2, [r7, #22]
 800a03c:	893b      	ldrh	r3, [r7, #8]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d3f1      	bcc.n	800a026 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a042:	f7ff fe6f 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 fae4 	bl	800a614 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	77fb      	strb	r3, [r7, #31]
 800a058:	e001      	b.n	800a05e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	715a      	strb	r2, [r3, #5]

    return status;
 800a06a:	7ffb      	ldrb	r3, [r7, #31]
 800a06c:	e000      	b.n	800a070 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a06e:	2302      	movs	r3, #2
  }
}
 800a070:	4618      	mov	r0, r3
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	461a      	mov	r2, r3
 800a084:	460b      	mov	r3, r1
 800a086:	72fb      	strb	r3, [r7, #11]
 800a088:	4613      	mov	r3, r2
 800a08a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	799b      	ldrb	r3, [r3, #6]
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b01      	cmp	r3, #1
 800a094:	d14a      	bne.n	800a12c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	795b      	ldrb	r3, [r3, #5]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e045      	b.n	800a12e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 fa8f 	bl	800a5cc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	2b84      	cmp	r3, #132	; 0x84
 800a0b2:	d002      	beq.n	800a0ba <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	2b94      	cmp	r3, #148	; 0x94
 800a0b8:	d103      	bne.n	800a0c2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	711a      	strb	r2, [r3, #4]
 800a0c0:	e002      	b.n	800a0c8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0c8:	f7ff fe3c 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a0cc:	7afb      	ldrb	r3, [r7, #11]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f9cd 	bl	800a470 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	82bb      	strh	r3, [r7, #20]
 800a0da:	e00a      	b.n	800a0f2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a0dc:	8abb      	ldrh	r3, [r7, #20]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f9c2 	bl	800a470 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a0ec:	8abb      	ldrh	r3, [r7, #20]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	82bb      	strh	r3, [r7, #20]
 800a0f2:	8aba      	ldrh	r2, [r7, #20]
 800a0f4:	893b      	ldrh	r3, [r7, #8]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d3f0      	bcc.n	800a0dc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a0fa:	f7ff fe13 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	2b84      	cmp	r3, #132	; 0x84
 800a102:	d002      	beq.n	800a10a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 fa85 	bl	800a614 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	75fb      	strb	r3, [r7, #23]
 800a116:	e001      	b.n	800a11c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	715a      	strb	r2, [r3, #5]

    return status;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	e000      	b.n	800a12e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a12c:	2302      	movs	r3, #2
  }
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b088      	sub	sp, #32
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	461a      	mov	r2, r3
 800a142:	460b      	mov	r3, r1
 800a144:	72fb      	strb	r3, [r7, #11]
 800a146:	4613      	mov	r3, r2
 800a148:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	799b      	ldrb	r3, [r3, #6]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	d13d      	bne.n	800a1d4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	795b      	ldrb	r3, [r3, #5]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a160:	2302      	movs	r3, #2
 800a162:	e038      	b.n	800a1d6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2201      	movs	r2, #1
 800a168:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fa2e 	bl	800a5cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a170:	f7ff fde8 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	4619      	mov	r1, r3
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f979 	bl	800a470 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a17e:	2100      	movs	r1, #0
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f975 	bl	800a470 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a186:	2300      	movs	r3, #0
 800a188:	82fb      	strh	r3, [r7, #22]
 800a18a:	e009      	b.n	800a1a0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a18c:	69b9      	ldr	r1, [r7, #24]
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f9c4 	bl	800a51c <SUBGHZSPI_Receive>
      pData++;
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	3301      	adds	r3, #1
 800a198:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a19a:	8afb      	ldrh	r3, [r7, #22]
 800a19c:	3301      	adds	r3, #1
 800a19e:	82fb      	strh	r3, [r7, #22]
 800a1a0:	8afa      	ldrh	r2, [r7, #22]
 800a1a2:	893b      	ldrh	r3, [r7, #8]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d3f1      	bcc.n	800a18c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a1a8:	f7ff fdbc 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fa31 	bl	800a614 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d002      	beq.n	800a1c0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	77fb      	strb	r3, [r7, #31]
 800a1be:	e001      	b.n	800a1c4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	715a      	strb	r2, [r3, #5]

    return status;
 800a1d0:	7ffb      	ldrb	r3, [r7, #31]
 800a1d2:	e000      	b.n	800a1d6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a1d4:	2302      	movs	r3, #2
  }
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3720      	adds	r7, #32
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	72fb      	strb	r3, [r7, #11]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	799b      	ldrb	r3, [r3, #6]
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d13e      	bne.n	800a27a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	795b      	ldrb	r3, [r3, #5]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d101      	bne.n	800a208 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a204:	2302      	movs	r3, #2
 800a206:	e039      	b.n	800a27c <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2201      	movs	r2, #1
 800a20c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 f9dc 	bl	800a5cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a214:	f7ff fd96 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a218:	210e      	movs	r1, #14
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f928 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f923 	bl	800a470 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a22a:	2300      	movs	r3, #0
 800a22c:	82bb      	strh	r3, [r7, #20]
 800a22e:	e00a      	b.n	800a246 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a230:	8abb      	ldrh	r3, [r7, #20]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	4619      	mov	r1, r3
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f918 	bl	800a470 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a240:	8abb      	ldrh	r3, [r7, #20]
 800a242:	3301      	adds	r3, #1
 800a244:	82bb      	strh	r3, [r7, #20]
 800a246:	8aba      	ldrh	r2, [r7, #20]
 800a248:	893b      	ldrh	r3, [r7, #8]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d3f0      	bcc.n	800a230 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a24e:	f7ff fd69 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f9de 	bl	800a614 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	75fb      	strb	r3, [r7, #23]
 800a264:	e001      	b.n	800a26a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2201      	movs	r2, #1
 800a26e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	715a      	strb	r2, [r3, #5]

    return status;
 800a276:	7dfb      	ldrb	r3, [r7, #23]
 800a278:	e000      	b.n	800a27c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a27a:	2302      	movs	r3, #2
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	461a      	mov	r2, r3
 800a290:	460b      	mov	r3, r1
 800a292:	72fb      	strb	r3, [r7, #11]
 800a294:	4613      	mov	r3, r2
 800a296:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	799b      	ldrb	r3, [r3, #6]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d141      	bne.n	800a32a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	795b      	ldrb	r3, [r3, #5]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e03c      	b.n	800a32c <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f987 	bl	800a5cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a2be:	f7ff fd41 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a2c2:	211e      	movs	r1, #30
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 f8d3 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 f8ce 	bl	800a470 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 f8ca 	bl	800a470 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	82fb      	strh	r3, [r7, #22]
 800a2e0:	e009      	b.n	800a2f6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a2e2:	69b9      	ldr	r1, [r7, #24]
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f919 	bl	800a51c <SUBGHZSPI_Receive>
      pData++;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a2f0:	8afb      	ldrh	r3, [r7, #22]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	82fb      	strh	r3, [r7, #22]
 800a2f6:	8afa      	ldrh	r2, [r7, #22]
 800a2f8:	893b      	ldrh	r3, [r7, #8]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d3f1      	bcc.n	800a2e2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2fe:	f7ff fd11 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 f986 	bl	800a614 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	77fb      	strb	r3, [r7, #31]
 800a314:	e001      	b.n	800a31a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2201      	movs	r2, #1
 800a31e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	715a      	strb	r2, [r3, #5]

    return status;
 800a326:	7ffb      	ldrb	r3, [r7, #31]
 800a328:	e000      	b.n	800a32c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a32a:	2302      	movs	r3, #2
  }
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a33c:	2300      	movs	r3, #0
 800a33e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a340:	f107 020c 	add.w	r2, r7, #12
 800a344:	2302      	movs	r3, #2
 800a346:	2112      	movs	r1, #18
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff fef4 	bl	800a136 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a34e:	7b3b      	ldrb	r3, [r7, #12]
 800a350:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	b21a      	sxth	r2, r3
 800a358:	7b7b      	ldrb	r3, [r7, #13]
 800a35a:	b21b      	sxth	r3, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	b21b      	sxth	r3, r3
 800a360:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a362:	f107 020c 	add.w	r2, r7, #12
 800a366:	2302      	movs	r3, #2
 800a368:	2102      	movs	r1, #2
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fe84 	bl	800a078 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f012 fde2 	bl	801cf44 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a380:	89fb      	ldrh	r3, [r7, #14]
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f012 fde8 	bl	801cf60 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a390:	89fb      	ldrh	r3, [r7, #14]
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f012 fe38 	bl	801d010 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a3a0:	89fb      	ldrh	r3, [r7, #14]
 800a3a2:	f003 0308 	and.w	r3, r3, #8
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f012 fe3e 	bl	801d02c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a3b0:	89fb      	ldrh	r3, [r7, #14]
 800a3b2:	f003 0310 	and.w	r3, r3, #16
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f012 fe44 	bl	801d048 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f012 fe12 	bl	801cff4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f012 fdce 	bl	801cf7c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a3e0:	89fb      	ldrh	r3, [r7, #14]
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00d      	beq.n	800a406 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a3ea:	89fb      	ldrh	r3, [r7, #14]
 800a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d004      	beq.n	800a3fe <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f012 fdce 	bl	801cf98 <HAL_SUBGHZ_CADStatusCallback>
 800a3fc:	e003      	b.n	800a406 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a3fe:	2100      	movs	r1, #0
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f012 fdc9 	bl	801cf98 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a406:	89fb      	ldrh	r3, [r7, #14]
 800a408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f012 fddf 	bl	801cfd4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a416:	89fb      	ldrh	r3, [r7, #14]
 800a418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f012 fe1f 	bl	801d064 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <SUBGHZSPI_Init+0x3c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a0b      	ldr	r2, [pc, #44]	; (800a46c <SUBGHZSPI_Init+0x3c>)
 800a43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a442:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a444:	4a09      	ldr	r2, [pc, #36]	; (800a46c <SUBGHZSPI_Init+0x3c>)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a44c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a44e:	4b07      	ldr	r3, [pc, #28]	; (800a46c <SUBGHZSPI_Init+0x3c>)
 800a450:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a454:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <SUBGHZSPI_Init+0x3c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a04      	ldr	r2, [pc, #16]	; (800a46c <SUBGHZSPI_Init+0x3c>)
 800a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a460:	6013      	str	r3, [r2, #0]
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr
 800a46c:	58010000 	.word	0x58010000

0800a470 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a480:	4b23      	ldr	r3, [pc, #140]	; (800a510 <SUBGHZSPI_Transmit+0xa0>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	4613      	mov	r3, r2
 800a486:	00db      	lsls	r3, r3, #3
 800a488:	1a9b      	subs	r3, r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	0cdb      	lsrs	r3, r3, #19
 800a48e:	2264      	movs	r2, #100	; 0x64
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	609a      	str	r2, [r3, #8]
      break;
 800a4a6:	e008      	b.n	800a4ba <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a4ae:	4b19      	ldr	r3, [pc, #100]	; (800a514 <SUBGHZSPI_Transmit+0xa4>)
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d1ed      	bne.n	800a496 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a4ba:	4b17      	ldr	r3, [pc, #92]	; (800a518 <SUBGHZSPI_Transmit+0xa8>)
 800a4bc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	78fa      	ldrb	r2, [r7, #3]
 800a4c2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a4c4:	4b12      	ldr	r3, [pc, #72]	; (800a510 <SUBGHZSPI_Transmit+0xa0>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	00db      	lsls	r3, r3, #3
 800a4cc:	1a9b      	subs	r3, r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	0cdb      	lsrs	r3, r3, #19
 800a4d2:	2264      	movs	r2, #100	; 0x64
 800a4d4:	fb02 f303 	mul.w	r3, r2, r3
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d105      	bne.n	800a4ec <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	609a      	str	r2, [r3, #8]
      break;
 800a4ea:	e008      	b.n	800a4fe <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <SUBGHZSPI_Transmit+0xa4>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d1ed      	bne.n	800a4da <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <SUBGHZSPI_Transmit+0xa4>)
 800a500:	68db      	ldr	r3, [r3, #12]

  return status;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
}
 800a504:	4618      	mov	r0, r3
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	2000000c 	.word	0x2000000c
 800a514:	58010000 	.word	0x58010000
 800a518:	5801000c 	.word	0x5801000c

0800a51c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a52a:	4b25      	ldr	r3, [pc, #148]	; (800a5c0 <SUBGHZSPI_Receive+0xa4>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4613      	mov	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	0cdb      	lsrs	r3, r3, #19
 800a538:	2264      	movs	r2, #100	; 0x64
 800a53a:	fb02 f303 	mul.w	r3, r2, r3
 800a53e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d105      	bne.n	800a552 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	609a      	str	r2, [r3, #8]
      break;
 800a550:	e008      	b.n	800a564 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3b01      	subs	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a558:	4b1a      	ldr	r3, [pc, #104]	; (800a5c4 <SUBGHZSPI_Receive+0xa8>)
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b02      	cmp	r3, #2
 800a562:	d1ed      	bne.n	800a540 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a564:	4b18      	ldr	r3, [pc, #96]	; (800a5c8 <SUBGHZSPI_Receive+0xac>)
 800a566:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	22ff      	movs	r2, #255	; 0xff
 800a56c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a56e:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <SUBGHZSPI_Receive+0xa4>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4613      	mov	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	1a9b      	subs	r3, r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	0cdb      	lsrs	r3, r3, #19
 800a57c:	2264      	movs	r2, #100	; 0x64
 800a57e:	fb02 f303 	mul.w	r3, r2, r3
 800a582:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	609a      	str	r2, [r3, #8]
      break;
 800a594:	e008      	b.n	800a5a8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3b01      	subs	r3, #1
 800a59a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a59c:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <SUBGHZSPI_Receive+0xa8>)
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d1ed      	bne.n	800a584 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a5a8:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <SUBGHZSPI_Receive+0xa8>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	701a      	strb	r2, [r3, #0]

  return status;
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	2000000c 	.word	0x2000000c
 800a5c4:	58010000 	.word	0x58010000
 800a5c8:	5801000c 	.word	0x5801000c

0800a5cc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	791b      	ldrb	r3, [r3, #4]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d111      	bne.n	800a600 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a5dc:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <SUBGHZ_CheckDeviceReady+0x44>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	4413      	add	r3, r2
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	0c1b      	lsrs	r3, r3, #16
 800a5ea:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a5ec:	f7ff fbaa 	bl	8009d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1f9      	bne.n	800a5f0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a5fc:	f7ff fb92 	bl	8009d24 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f807 	bl	800a614 <SUBGHZ_WaitOnBusy>
 800a606:	4603      	mov	r3, r0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	2000000c 	.word	0x2000000c

0800a614 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a620:	4b12      	ldr	r3, [pc, #72]	; (800a66c <SUBGHZ_WaitOnBusy+0x58>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	4413      	add	r3, r2
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	0d1b      	lsrs	r3, r3, #20
 800a62e:	2264      	movs	r2, #100	; 0x64
 800a630:	fb02 f303 	mul.w	r3, r2, r3
 800a634:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a636:	f7ff fbb3 	bl	8009da0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a63a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d105      	bne.n	800a64e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2202      	movs	r2, #2
 800a64a:	609a      	str	r2, [r3, #8]
      break;
 800a64c:	e009      	b.n	800a662 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3b01      	subs	r3, #1
 800a652:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a654:	f7ff fb92 	bl	8009d7c <LL_PWR_IsActiveFlag_RFBUSYS>
 800a658:	4602      	mov	r2, r0
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	4013      	ands	r3, r2
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d0e9      	beq.n	800a636 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	2000000c 	.word	0x2000000c

0800a670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e049      	b.n	800a716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7f8 fbee 	bl	8002e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f000 f9c6 	bl	800aa40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b01      	cmp	r3, #1
 800a732:	d001      	beq.n	800a738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e036      	b.n	800a7a6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a16      	ldr	r2, [pc, #88]	; (800a7b0 <HAL_TIM_Base_Start_IT+0x90>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d004      	beq.n	800a764 <HAL_TIM_Base_Start_IT+0x44>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a762:	d115      	bne.n	800a790 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	4b12      	ldr	r3, [pc, #72]	; (800a7b4 <HAL_TIM_Base_Start_IT+0x94>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b06      	cmp	r3, #6
 800a774:	d015      	beq.n	800a7a2 <HAL_TIM_Base_Start_IT+0x82>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d011      	beq.n	800a7a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 0201 	orr.w	r2, r2, #1
 800a78c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a78e:	e008      	b.n	800a7a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 0201 	orr.w	r2, r2, #1
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	e000      	b.n	800a7a4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bc80      	pop	{r7}
 800a7ae:	4770      	bx	lr
 800a7b0:	40012c00 	.word	0x40012c00
 800a7b4:	00010007 	.word	0x00010007

0800a7b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0302 	and.w	r3, r3, #2
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d122      	bne.n	800a814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d11b      	bne.n	800a814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0202 	mvn.w	r2, #2
 800a7e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f904 	bl	800aa08 <HAL_TIM_IC_CaptureCallback>
 800a800:	e005      	b.n	800a80e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f8f7 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f906 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d122      	bne.n	800a868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d11b      	bne.n	800a868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f06f 0204 	mvn.w	r2, #4
 800a838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2202      	movs	r2, #2
 800a83e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f8da 	bl	800aa08 <HAL_TIM_IC_CaptureCallback>
 800a854:	e005      	b.n	800a862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f8cd 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f8dc 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b08      	cmp	r3, #8
 800a874:	d122      	bne.n	800a8bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f003 0308 	and.w	r3, r3, #8
 800a880:	2b08      	cmp	r3, #8
 800a882:	d11b      	bne.n	800a8bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f06f 0208 	mvn.w	r2, #8
 800a88c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2204      	movs	r2, #4
 800a892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f8b0 	bl	800aa08 <HAL_TIM_IC_CaptureCallback>
 800a8a8:	e005      	b.n	800a8b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f8a3 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f8b2 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0310 	and.w	r3, r3, #16
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d122      	bne.n	800a910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f003 0310 	and.w	r3, r3, #16
 800a8d4:	2b10      	cmp	r3, #16
 800a8d6:	d11b      	bne.n	800a910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f06f 0210 	mvn.w	r2, #16
 800a8e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f886 	bl	800aa08 <HAL_TIM_IC_CaptureCallback>
 800a8fc:	e005      	b.n	800a90a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f879 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f888 	bl	800aa1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d10e      	bne.n	800a93c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d107      	bne.n	800a93c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f06f 0201 	mvn.w	r2, #1
 800a934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7f7 fcae 	bl	8002298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a946:	2b80      	cmp	r3, #128	; 0x80
 800a948:	d10e      	bne.n	800a968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a954:	2b80      	cmp	r3, #128	; 0x80
 800a956:	d107      	bne.n	800a968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f8d7 	bl	800ab16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a976:	d10e      	bne.n	800a996 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a982:	2b80      	cmp	r3, #128	; 0x80
 800a984:	d107      	bne.n	800a996 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a98e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f8c9 	bl	800ab28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a0:	2b40      	cmp	r3, #64	; 0x40
 800a9a2:	d10e      	bne.n	800a9c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ae:	2b40      	cmp	r3, #64	; 0x40
 800a9b0:	d107      	bne.n	800a9c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f835 	bl	800aa2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b20      	cmp	r3, #32
 800a9ce:	d10e      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	f003 0320 	and.w	r3, r3, #32
 800a9da:	2b20      	cmp	r3, #32
 800a9dc:	d107      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f06f 0220 	mvn.w	r2, #32
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f88b 	bl	800ab04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bc80      	pop	{r7}
 800aa06:	4770      	bx	lr

0800aa08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bc80      	pop	{r7}
 800aa18:	4770      	bx	lr

0800aa1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bc80      	pop	{r7}
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bc80      	pop	{r7}
 800aa3c:	4770      	bx	lr
	...

0800aa40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a29      	ldr	r2, [pc, #164]	; (800aaf8 <TIM_Base_SetConfig+0xb8>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_Base_SetConfig+0x20>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5e:	d108      	bne.n	800aa72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a20      	ldr	r2, [pc, #128]	; (800aaf8 <TIM_Base_SetConfig+0xb8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d00b      	beq.n	800aa92 <TIM_Base_SetConfig+0x52>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa80:	d007      	beq.n	800aa92 <TIM_Base_SetConfig+0x52>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a1d      	ldr	r2, [pc, #116]	; (800aafc <TIM_Base_SetConfig+0xbc>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d003      	beq.n	800aa92 <TIM_Base_SetConfig+0x52>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a1c      	ldr	r2, [pc, #112]	; (800ab00 <TIM_Base_SetConfig+0xc0>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d108      	bne.n	800aaa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a0b      	ldr	r2, [pc, #44]	; (800aaf8 <TIM_Base_SetConfig+0xb8>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d007      	beq.n	800aae0 <TIM_Base_SetConfig+0xa0>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <TIM_Base_SetConfig+0xbc>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d003      	beq.n	800aae0 <TIM_Base_SetConfig+0xa0>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <TIM_Base_SetConfig+0xc0>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d103      	bne.n	800aae8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	691a      	ldr	r2, [r3, #16]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	615a      	str	r2, [r3, #20]
}
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bc80      	pop	{r7}
 800aaf6:	4770      	bx	lr
 800aaf8:	40012c00 	.word	0x40012c00
 800aafc:	40014400 	.word	0x40014400
 800ab00:	40014800 	.word	0x40014800

0800ab04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bc80      	pop	{r7}
 800ab14:	4770      	bx	lr

0800ab16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b083      	sub	sp, #12
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bc80      	pop	{r7}
 800ab26:	4770      	bx	lr

0800ab28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bc80      	pop	{r7}
 800ab38:	4770      	bx	lr

0800ab3a <LL_RCC_GetUSARTClockSource>:
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ab42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	401a      	ands	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	041b      	lsls	r3, r3, #16
 800ab52:	4313      	orrs	r3, r2
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bc80      	pop	{r7}
 800ab5c:	4770      	bx	lr

0800ab5e <LL_RCC_GetLPUARTClockSource>:
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ab66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4013      	ands	r3, r2
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e042      	b.n	800ac14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7f8 fcf7 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2224      	movs	r2, #36	; 0x24
 800abaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fc3a 	bl	800b438 <UART_SetConfig>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e022      	b.n	800ac14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fea2 	bl	800b920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f042 0201 	orr.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 ff28 	bl	800ba62 <UART_CheckIdleState>
 800ac12:	4603      	mov	r3, r0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	; 0x28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	4613      	mov	r3, r2
 800ac28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d137      	bne.n	800aca4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <HAL_UART_Receive_IT+0x24>
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e030      	b.n	800aca6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a18      	ldr	r2, [pc, #96]	; (800acb0 <HAL_UART_Receive_IT+0x94>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d01f      	beq.n	800ac94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d018      	beq.n	800ac94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	e853 3f00 	ldrex	r3, [r3]
 800ac6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac76:	627b      	str	r3, [r7, #36]	; 0x24
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	623b      	str	r3, [r7, #32]
 800ac82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	69f9      	ldr	r1, [r7, #28]
 800ac86:	6a3a      	ldr	r2, [r7, #32]
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e6      	bne.n	800ac62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	461a      	mov	r2, r3
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 fff8 	bl	800bc90 <UART_Start_Receive_IT>
 800aca0:	4603      	mov	r3, r0
 800aca2:	e000      	b.n	800aca6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aca4:	2302      	movs	r3, #2
  }
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3728      	adds	r7, #40	; 0x28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40008000 	.word	0x40008000

0800acb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08a      	sub	sp, #40	; 0x28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc8:	2b20      	cmp	r3, #32
 800acca:	d167      	bne.n	800ad9c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <HAL_UART_Transmit_DMA+0x24>
 800acd2:	88fb      	ldrh	r3, [r7, #6]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e060      	b.n	800ad9e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	88fa      	ldrh	r2, [r7, #6]
 800ace6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	88fa      	ldrh	r2, [r7, #6]
 800acee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2221      	movs	r2, #33	; 0x21
 800acfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d028      	beq.n	800ad5c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0e:	4a26      	ldr	r2, [pc, #152]	; (800ada8 <HAL_UART_Transmit_DMA+0xf4>)
 800ad10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad16:	4a25      	ldr	r2, [pc, #148]	; (800adac <HAL_UART_Transmit_DMA+0xf8>)
 800ad18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad1e:	4a24      	ldr	r2, [pc, #144]	; (800adb0 <HAL_UART_Transmit_DMA+0xfc>)
 800ad20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad26:	2200      	movs	r2, #0
 800ad28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad32:	4619      	mov	r1, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3328      	adds	r3, #40	; 0x28
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	88fb      	ldrh	r3, [r7, #6]
 800ad3e:	f7fa faa9 	bl	8005294 <HAL_DMA_Start_IT>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d009      	beq.n	800ad5c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2210      	movs	r2, #16
 800ad4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e020      	b.n	800ad9e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2240      	movs	r2, #64	; 0x40
 800ad62:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	613b      	str	r3, [r7, #16]
   return(result);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3308      	adds	r3, #8
 800ad82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad84:	623a      	str	r2, [r7, #32]
 800ad86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	69f9      	ldr	r1, [r7, #28]
 800ad8a:	6a3a      	ldr	r2, [r7, #32]
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e5      	bne.n	800ad64 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e000      	b.n	800ad9e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ad9c:	2302      	movs	r3, #2
  }
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3728      	adds	r7, #40	; 0x28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	0800c01b 	.word	0x0800c01b
 800adac:	0800c0b5 	.word	0x0800c0b5
 800adb0:	0800c0d1 	.word	0x0800c0d1

0800adb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b0ba      	sub	sp, #232	; 0xe8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800adda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800adde:	f640 030f 	movw	r3, #2063	; 0x80f
 800ade2:	4013      	ands	r3, r2
 800ade4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ade8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adec:	2b00      	cmp	r3, #0
 800adee:	d11b      	bne.n	800ae28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800adf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d015      	beq.n	800ae28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d105      	bne.n	800ae14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d009      	beq.n	800ae28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 82e3 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
      }
      return;
 800ae26:	e2dd      	b.n	800b3e4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8123 	beq.w	800b078 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ae32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae36:	4b8d      	ldr	r3, [pc, #564]	; (800b06c <HAL_UART_IRQHandler+0x2b8>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ae3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae42:	4b8b      	ldr	r3, [pc, #556]	; (800b070 <HAL_UART_IRQHandler+0x2bc>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 8116 	beq.w	800b078 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d011      	beq.n	800ae7c <HAL_UART_IRQHandler+0xc8>
 800ae58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae72:	f043 0201 	orr.w	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d011      	beq.n	800aeac <HAL_UART_IRQHandler+0xf8>
 800ae88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea2:	f043 0204 	orr.w	r2, r3, #4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d011      	beq.n	800aedc <HAL_UART_IRQHandler+0x128>
 800aeb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00b      	beq.n	800aedc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2204      	movs	r2, #4
 800aeca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed2:	f043 0202 	orr.w	r2, r3, #2
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee0:	f003 0308 	and.w	r3, r3, #8
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d017      	beq.n	800af18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeec:	f003 0320 	and.w	r3, r3, #32
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d105      	bne.n	800af00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aef4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aef8:	4b5c      	ldr	r3, [pc, #368]	; (800b06c <HAL_UART_IRQHandler+0x2b8>)
 800aefa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2208      	movs	r2, #8
 800af06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0e:	f043 0208 	orr.w	r2, r3, #8
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af20:	2b00      	cmp	r3, #0
 800af22:	d012      	beq.n	800af4a <HAL_UART_IRQHandler+0x196>
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af40:	f043 0220 	orr.w	r2, r3, #32
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8249 	beq.w	800b3e8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d013      	beq.n	800af8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d105      	bne.n	800af7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d007      	beq.n	800af8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9e:	2b40      	cmp	r3, #64	; 0x40
 800afa0:	d005      	beq.n	800afae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d054      	beq.n	800b058 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 ffce 	bl	800bf50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d146      	bne.n	800b050 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3308      	adds	r3, #8
 800afea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800affa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1d9      	bne.n	800afc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b014:	2b00      	cmp	r3, #0
 800b016:	d017      	beq.n	800b048 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b01e:	4a15      	ldr	r2, [pc, #84]	; (800b074 <HAL_UART_IRQHandler+0x2c0>)
 800b020:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fa fa0f 	bl	800544c <HAL_DMA_Abort_IT>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d019      	beq.n	800b068 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b042:	4610      	mov	r0, r2
 800b044:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b046:	e00f      	b.n	800b068 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f9e0 	bl	800b40e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b04e:	e00b      	b.n	800b068 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f9dc 	bl	800b40e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b056:	e007      	b.n	800b068 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9d8 	bl	800b40e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b066:	e1bf      	b.n	800b3e8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b068:	bf00      	nop
    return;
 800b06a:	e1bd      	b.n	800b3e8 <HAL_UART_IRQHandler+0x634>
 800b06c:	10000001 	.word	0x10000001
 800b070:	04000120 	.word	0x04000120
 800b074:	0800c151 	.word	0x0800c151

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	f040 8153 	bne.w	800b328 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	f003 0310 	and.w	r3, r3, #16
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 814c 	beq.w	800b328 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 8145 	beq.w	800b328 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2210      	movs	r2, #16
 800b0a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	f040 80bb 	bne.w	800b22c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 818f 	beq.w	800b3ec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	f080 8187 	bcs.w	800b3ec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f040 8087 	bne.w	800b20a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	461a      	mov	r2, r3
 800b122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b12a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b132:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1da      	bne.n	800b0fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3308      	adds	r3, #8
 800b14c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b158:	f023 0301 	bic.w	r3, r3, #1
 800b15c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3308      	adds	r3, #8
 800b166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b16a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b16e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b17c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e1      	bne.n	800b146 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3308      	adds	r3, #8
 800b188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e3      	bne.n	800b182 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d8:	f023 0310 	bic.w	r3, r3, #16
 800b1dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1f2:	e841 2300 	strex	r3, r2, [r1]
 800b1f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1e4      	bne.n	800b1c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b204:	4618      	mov	r0, r3
 800b206:	f7fa f8c3 	bl	8005390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2202      	movs	r2, #2
 800b20e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	b29b      	uxth	r3, r3
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f8fb 	bl	800b420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b22a:	e0df      	b.n	800b3ec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b238:	b29b      	uxth	r3, r3
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 80d1 	beq.w	800b3f0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b24e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b252:	2b00      	cmp	r3, #0
 800b254:	f000 80cc 	beq.w	800b3f0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b26c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b27a:	647b      	str	r3, [r7, #68]	; 0x44
 800b27c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e4      	bne.n	800b258 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3308      	adds	r3, #8
 800b294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	623b      	str	r3, [r7, #32]
   return(result);
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2a4:	f023 0301 	bic.w	r3, r3, #1
 800b2a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2b6:	633a      	str	r2, [r7, #48]	; 0x30
 800b2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e1      	bne.n	800b28e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0310 	bic.w	r3, r3, #16
 800b2f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69b9      	ldr	r1, [r7, #24]
 800b306:	69fa      	ldr	r2, [r7, #28]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	617b      	str	r3, [r7, #20]
   return(result);
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e4      	bne.n	800b2de <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b31a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f87d 	bl	800b420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b326:	e063      	b.n	800b3f0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b32c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00e      	beq.n	800b352 <HAL_UART_IRQHandler+0x59e>
 800b334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fc5e 	bl	800cc0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b350:	e051      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d014      	beq.n	800b388 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b36e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d008      	beq.n	800b388 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d03a      	beq.n	800b3f4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
    }
    return;
 800b386:	e035      	b.n	800b3f4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d009      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x5f4>
 800b394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d003      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 feeb 	bl	800c17c <UART_EndTransmit_IT>
    return;
 800b3a6:	e026      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d009      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x614>
 800b3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 fc35 	bl	800cc30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3c6:	e016      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d010      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x642>
 800b3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	da0c      	bge.n	800b3f6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f001 fc1e 	bl	800cc1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3e2:	e008      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3e4:	bf00      	nop
 800b3e6:	e006      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
    return;
 800b3e8:	bf00      	nop
 800b3ea:	e004      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3ec:	bf00      	nop
 800b3ee:	e002      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3f0:	bf00      	nop
 800b3f2:	e000      	b.n	800b3f6 <HAL_UART_IRQHandler+0x642>
    return;
 800b3f4:	bf00      	nop
  }
}
 800b3f6:	37e8      	adds	r7, #232	; 0xe8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	bc80      	pop	{r7}
 800b40c:	4770      	bx	lr

0800b40e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b40e:	b480      	push	{r7}
 800b410:	b083      	sub	sp, #12
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bc80      	pop	{r7}
 800b41e:	4770      	bx	lr

0800b420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	bc80      	pop	{r7}
 800b434:	4770      	bx	lr
	...

0800b438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b43c:	b08c      	sub	sp, #48	; 0x30
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	431a      	orrs	r2, r3
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	431a      	orrs	r2, r3
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	4b94      	ldr	r3, [pc, #592]	; (800b6b8 <UART_SetConfig+0x280>)
 800b468:	4013      	ands	r3, r2
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	6812      	ldr	r2, [r2, #0]
 800b46e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b470:	430b      	orrs	r3, r1
 800b472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a89      	ldr	r2, [pc, #548]	; (800b6bc <UART_SetConfig+0x284>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d004      	beq.n	800b4a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b4ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	6812      	ldr	r2, [r2, #0]
 800b4b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4b8:	430b      	orrs	r3, r1
 800b4ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	f023 010f 	bic.w	r1, r3, #15
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a7a      	ldr	r2, [pc, #488]	; (800b6c0 <UART_SetConfig+0x288>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d127      	bne.n	800b52c <UART_SetConfig+0xf4>
 800b4dc:	2003      	movs	r0, #3
 800b4de:	f7ff fb2c 	bl	800ab3a <LL_RCC_GetUSARTClockSource>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d81b      	bhi.n	800b524 <UART_SetConfig+0xec>
 800b4ec:	a201      	add	r2, pc, #4	; (adr r2, 800b4f4 <UART_SetConfig+0xbc>)
 800b4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f2:	bf00      	nop
 800b4f4:	0800b505 	.word	0x0800b505
 800b4f8:	0800b515 	.word	0x0800b515
 800b4fc:	0800b50d 	.word	0x0800b50d
 800b500:	0800b51d 	.word	0x0800b51d
 800b504:	2301      	movs	r3, #1
 800b506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b50a:	e080      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b50c:	2302      	movs	r3, #2
 800b50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b512:	e07c      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b514:	2304      	movs	r3, #4
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b51a:	e078      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b51c:	2308      	movs	r3, #8
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b522:	e074      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b524:	2310      	movs	r3, #16
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b52a:	e070      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a64      	ldr	r2, [pc, #400]	; (800b6c4 <UART_SetConfig+0x28c>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d138      	bne.n	800b5a8 <UART_SetConfig+0x170>
 800b536:	200c      	movs	r0, #12
 800b538:	f7ff faff 	bl	800ab3a <LL_RCC_GetUSARTClockSource>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b542:	2b0c      	cmp	r3, #12
 800b544:	d82c      	bhi.n	800b5a0 <UART_SetConfig+0x168>
 800b546:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <UART_SetConfig+0x114>)
 800b548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54c:	0800b581 	.word	0x0800b581
 800b550:	0800b5a1 	.word	0x0800b5a1
 800b554:	0800b5a1 	.word	0x0800b5a1
 800b558:	0800b5a1 	.word	0x0800b5a1
 800b55c:	0800b591 	.word	0x0800b591
 800b560:	0800b5a1 	.word	0x0800b5a1
 800b564:	0800b5a1 	.word	0x0800b5a1
 800b568:	0800b5a1 	.word	0x0800b5a1
 800b56c:	0800b589 	.word	0x0800b589
 800b570:	0800b5a1 	.word	0x0800b5a1
 800b574:	0800b5a1 	.word	0x0800b5a1
 800b578:	0800b5a1 	.word	0x0800b5a1
 800b57c:	0800b599 	.word	0x0800b599
 800b580:	2300      	movs	r3, #0
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b586:	e042      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b588:	2302      	movs	r3, #2
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b58e:	e03e      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b590:	2304      	movs	r3, #4
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b596:	e03a      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b598:	2308      	movs	r3, #8
 800b59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b59e:	e036      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a6:	e032      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a43      	ldr	r2, [pc, #268]	; (800b6bc <UART_SetConfig+0x284>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d12a      	bne.n	800b608 <UART_SetConfig+0x1d0>
 800b5b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b5b6:	f7ff fad2 	bl	800ab5e <LL_RCC_GetLPUARTClockSource>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c0:	d01a      	beq.n	800b5f8 <UART_SetConfig+0x1c0>
 800b5c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c6:	d81b      	bhi.n	800b600 <UART_SetConfig+0x1c8>
 800b5c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5cc:	d00c      	beq.n	800b5e8 <UART_SetConfig+0x1b0>
 800b5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d2:	d815      	bhi.n	800b600 <UART_SetConfig+0x1c8>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <UART_SetConfig+0x1a8>
 800b5d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5dc:	d008      	beq.n	800b5f0 <UART_SetConfig+0x1b8>
 800b5de:	e00f      	b.n	800b600 <UART_SetConfig+0x1c8>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5e6:	e012      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ee:	e00e      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5f6:	e00a      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5fe:	e006      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b600:	2310      	movs	r3, #16
 800b602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b606:	e002      	b.n	800b60e <UART_SetConfig+0x1d6>
 800b608:	2310      	movs	r3, #16
 800b60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <UART_SetConfig+0x284>)
 800b614:	4293      	cmp	r3, r2
 800b616:	f040 80a4 	bne.w	800b762 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b61a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d823      	bhi.n	800b66a <UART_SetConfig+0x232>
 800b622:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <UART_SetConfig+0x1f0>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b64d 	.word	0x0800b64d
 800b62c:	0800b66b 	.word	0x0800b66b
 800b630:	0800b655 	.word	0x0800b655
 800b634:	0800b66b 	.word	0x0800b66b
 800b638:	0800b65b 	.word	0x0800b65b
 800b63c:	0800b66b 	.word	0x0800b66b
 800b640:	0800b66b 	.word	0x0800b66b
 800b644:	0800b66b 	.word	0x0800b66b
 800b648:	0800b663 	.word	0x0800b663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b64c:	f7fc fbf8 	bl	8007e40 <HAL_RCC_GetPCLK1Freq>
 800b650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b652:	e010      	b.n	800b676 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b654:	4b1c      	ldr	r3, [pc, #112]	; (800b6c8 <UART_SetConfig+0x290>)
 800b656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b658:	e00d      	b.n	800b676 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b65a:	f7fc fb3d 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 800b65e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b660:	e009      	b.n	800b676 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b668:	e005      	b.n	800b676 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 8137 	beq.w	800b8ec <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	4a12      	ldr	r2, [pc, #72]	; (800b6cc <UART_SetConfig+0x294>)
 800b684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b688:	461a      	mov	r2, r3
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b690:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4613      	mov	r3, r2
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	4413      	add	r3, r2
 800b69c:	69ba      	ldr	r2, [r7, #24]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d305      	bcc.n	800b6ae <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d910      	bls.n	800b6d0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b6b4:	e11a      	b.n	800b8ec <UART_SetConfig+0x4b4>
 800b6b6:	bf00      	nop
 800b6b8:	cfff69f3 	.word	0xcfff69f3
 800b6bc:	40008000 	.word	0x40008000
 800b6c0:	40013800 	.word	0x40013800
 800b6c4:	40004400 	.word	0x40004400
 800b6c8:	00f42400 	.word	0x00f42400
 800b6cc:	0801f598 	.word	0x0801f598
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	60bb      	str	r3, [r7, #8]
 800b6d6:	60fa      	str	r2, [r7, #12]
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	4a8e      	ldr	r2, [pc, #568]	; (800b918 <UART_SetConfig+0x4e0>)
 800b6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	603b      	str	r3, [r7, #0]
 800b6e8:	607a      	str	r2, [r7, #4]
 800b6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6f2:	f7f5 fb4b 	bl	8000d8c <__aeabi_uldivmod>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f04f 0200 	mov.w	r2, #0
 800b702:	f04f 0300 	mov.w	r3, #0
 800b706:	020b      	lsls	r3, r1, #8
 800b708:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b70c:	0202      	lsls	r2, r0, #8
 800b70e:	6979      	ldr	r1, [r7, #20]
 800b710:	6849      	ldr	r1, [r1, #4]
 800b712:	0849      	lsrs	r1, r1, #1
 800b714:	2000      	movs	r0, #0
 800b716:	460c      	mov	r4, r1
 800b718:	4605      	mov	r5, r0
 800b71a:	eb12 0804 	adds.w	r8, r2, r4
 800b71e:	eb43 0905 	adc.w	r9, r3, r5
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	469a      	mov	sl, r3
 800b72a:	4693      	mov	fp, r2
 800b72c:	4652      	mov	r2, sl
 800b72e:	465b      	mov	r3, fp
 800b730:	4640      	mov	r0, r8
 800b732:	4649      	mov	r1, r9
 800b734:	f7f5 fb2a 	bl	8000d8c <__aeabi_uldivmod>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4613      	mov	r3, r2
 800b73e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b746:	d308      	bcc.n	800b75a <UART_SetConfig+0x322>
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b74e:	d204      	bcs.n	800b75a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6a3a      	ldr	r2, [r7, #32]
 800b756:	60da      	str	r2, [r3, #12]
 800b758:	e0c8      	b.n	800b8ec <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b760:	e0c4      	b.n	800b8ec <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b76a:	d167      	bne.n	800b83c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b76c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b770:	2b08      	cmp	r3, #8
 800b772:	d828      	bhi.n	800b7c6 <UART_SetConfig+0x38e>
 800b774:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <UART_SetConfig+0x344>)
 800b776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77a:	bf00      	nop
 800b77c:	0800b7a1 	.word	0x0800b7a1
 800b780:	0800b7a9 	.word	0x0800b7a9
 800b784:	0800b7b1 	.word	0x0800b7b1
 800b788:	0800b7c7 	.word	0x0800b7c7
 800b78c:	0800b7b7 	.word	0x0800b7b7
 800b790:	0800b7c7 	.word	0x0800b7c7
 800b794:	0800b7c7 	.word	0x0800b7c7
 800b798:	0800b7c7 	.word	0x0800b7c7
 800b79c:	0800b7bf 	.word	0x0800b7bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7a0:	f7fc fb4e 	bl	8007e40 <HAL_RCC_GetPCLK1Freq>
 800b7a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7a6:	e014      	b.n	800b7d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7a8:	f7fc fb5c 	bl	8007e64 <HAL_RCC_GetPCLK2Freq>
 800b7ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7ae:	e010      	b.n	800b7d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7b0:	4b5a      	ldr	r3, [pc, #360]	; (800b91c <UART_SetConfig+0x4e4>)
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7b4:	e00d      	b.n	800b7d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7b6:	f7fc fa8f 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 800b7ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7bc:	e009      	b.n	800b7d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7c4:	e005      	b.n	800b7d2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 8089 	beq.w	800b8ec <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	4a4e      	ldr	r2, [pc, #312]	; (800b918 <UART_SetConfig+0x4e0>)
 800b7e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ec:	005a      	lsls	r2, r3, #1
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	085b      	lsrs	r3, r3, #1
 800b7f4:	441a      	add	r2, r3
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	2b0f      	cmp	r3, #15
 800b804:	d916      	bls.n	800b834 <UART_SetConfig+0x3fc>
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b80c:	d212      	bcs.n	800b834 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	b29b      	uxth	r3, r3
 800b812:	f023 030f 	bic.w	r3, r3, #15
 800b816:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	085b      	lsrs	r3, r3, #1
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	b29a      	uxth	r2, r3
 800b824:	8bfb      	ldrh	r3, [r7, #30]
 800b826:	4313      	orrs	r3, r2
 800b828:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	8bfa      	ldrh	r2, [r7, #30]
 800b830:	60da      	str	r2, [r3, #12]
 800b832:	e05b      	b.n	800b8ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b83a:	e057      	b.n	800b8ec <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b83c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b840:	2b08      	cmp	r3, #8
 800b842:	d828      	bhi.n	800b896 <UART_SetConfig+0x45e>
 800b844:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <UART_SetConfig+0x414>)
 800b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84a:	bf00      	nop
 800b84c:	0800b871 	.word	0x0800b871
 800b850:	0800b879 	.word	0x0800b879
 800b854:	0800b881 	.word	0x0800b881
 800b858:	0800b897 	.word	0x0800b897
 800b85c:	0800b887 	.word	0x0800b887
 800b860:	0800b897 	.word	0x0800b897
 800b864:	0800b897 	.word	0x0800b897
 800b868:	0800b897 	.word	0x0800b897
 800b86c:	0800b88f 	.word	0x0800b88f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b870:	f7fc fae6 	bl	8007e40 <HAL_RCC_GetPCLK1Freq>
 800b874:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b876:	e014      	b.n	800b8a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b878:	f7fc faf4 	bl	8007e64 <HAL_RCC_GetPCLK2Freq>
 800b87c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b87e:	e010      	b.n	800b8a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b880:	4b26      	ldr	r3, [pc, #152]	; (800b91c <UART_SetConfig+0x4e4>)
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b884:	e00d      	b.n	800b8a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b886:	f7fc fa27 	bl	8007cd8 <HAL_RCC_GetSysClockFreq>
 800b88a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b88c:	e009      	b.n	800b8a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b88e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b894:	e005      	b.n	800b8a2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8a0:	bf00      	nop
    }

    if (pclk != 0U)
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d021      	beq.n	800b8ec <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	4a1a      	ldr	r2, [pc, #104]	; (800b918 <UART_SetConfig+0x4e0>)
 800b8ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	441a      	add	r2, r3
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	2b0f      	cmp	r3, #15
 800b8d0:	d909      	bls.n	800b8e6 <UART_SetConfig+0x4ae>
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d8:	d205      	bcs.n	800b8e6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60da      	str	r2, [r3, #12]
 800b8e4:	e002      	b.n	800b8ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2200      	movs	r2, #0
 800b900:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2200      	movs	r2, #0
 800b906:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b908:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3730      	adds	r7, #48	; 0x30
 800b910:	46bd      	mov	sp, r7
 800b912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b916:	bf00      	nop
 800b918:	0801f598 	.word	0x0801f598
 800b91c:	00f42400 	.word	0x00f42400

0800b920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b4:	f003 0310 	and.w	r3, r3, #16
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d6:	f003 0320 	and.w	r3, r3, #32
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01a      	beq.n	800ba36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba1e:	d10a      	bne.n	800ba36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	430a      	orrs	r2, r1
 800ba34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	430a      	orrs	r2, r1
 800ba56:	605a      	str	r2, [r3, #4]
  }
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc80      	pop	{r7}
 800ba60:	4770      	bx	lr

0800ba62 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af02      	add	r7, sp, #8
 800ba68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba72:	f7f7 f905 	bl	8002c80 <HAL_GetTick>
 800ba76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0308 	and.w	r3, r3, #8
 800ba82:	2b08      	cmp	r3, #8
 800ba84:	d10e      	bne.n	800baa4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f832 	bl	800bafe <UART_WaitOnFlagUntilTimeout>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e028      	b.n	800baf6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0304 	and.w	r3, r3, #4
 800baae:	2b04      	cmp	r3, #4
 800bab0:	d10e      	bne.n	800bad0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bab2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f81c 	bl	800bafe <UART_WaitOnFlagUntilTimeout>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e012      	b.n	800baf6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2220      	movs	r2, #32
 800badc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b09c      	sub	sp, #112	; 0x70
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	603b      	str	r3, [r7, #0]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb0e:	e0a9      	b.n	800bc64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb16:	f000 80a5 	beq.w	800bc64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb1a:	f7f7 f8b1 	bl	8002c80 <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d302      	bcc.n	800bb30 <UART_WaitOnFlagUntilTimeout+0x32>
 800bb2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d140      	bne.n	800bbb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb38:	e853 3f00 	ldrex	r3, [r3]
 800bb3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb44:	667b      	str	r3, [r7, #100]	; 0x64
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e6      	bne.n	800bb30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3308      	adds	r3, #8
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6c:	e853 3f00 	ldrex	r3, [r3]
 800bb70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	f023 0301 	bic.w	r3, r3, #1
 800bb78:	663b      	str	r3, [r7, #96]	; 0x60
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	3308      	adds	r3, #8
 800bb80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb82:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e5      	bne.n	800bb62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2220      	movs	r2, #32
 800bb9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2220      	movs	r2, #32
 800bba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e069      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d051      	beq.n	800bc64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	69db      	ldr	r3, [r3, #28]
 800bbc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbce:	d149      	bne.n	800bc64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc00:	e841 2300 	strex	r3, r2, [r1]
 800bc04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1e6      	bne.n	800bbda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3308      	adds	r3, #8
 800bc12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	e853 3f00 	ldrex	r3, [r3]
 800bc1a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3308      	adds	r3, #8
 800bc2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc2c:	623a      	str	r2, [r7, #32]
 800bc2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	69f9      	ldr	r1, [r7, #28]
 800bc32:	6a3a      	ldr	r2, [r7, #32]
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e5      	bne.n	800bc0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2220      	movs	r2, #32
 800bc54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e010      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	69da      	ldr	r2, [r3, #28]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	bf0c      	ite	eq
 800bc74:	2301      	moveq	r3, #1
 800bc76:	2300      	movne	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f43f af46 	beq.w	800bb10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3770      	adds	r7, #112	; 0x70
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b0a3      	sub	sp, #140	; 0x8c
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	88fa      	ldrh	r2, [r7, #6]
 800bca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	88fa      	ldrh	r2, [r7, #6]
 800bcb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcc2:	d10e      	bne.n	800bce2 <UART_Start_Receive_IT+0x52>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d105      	bne.n	800bcd8 <UART_Start_Receive_IT+0x48>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bcd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcd6:	e02d      	b.n	800bd34 <UART_Start_Receive_IT+0xa4>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	22ff      	movs	r2, #255	; 0xff
 800bcdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bce0:	e028      	b.n	800bd34 <UART_Start_Receive_IT+0xa4>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10d      	bne.n	800bd06 <UART_Start_Receive_IT+0x76>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d104      	bne.n	800bcfc <UART_Start_Receive_IT+0x6c>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	22ff      	movs	r2, #255	; 0xff
 800bcf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcfa:	e01b      	b.n	800bd34 <UART_Start_Receive_IT+0xa4>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	227f      	movs	r2, #127	; 0x7f
 800bd00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd04:	e016      	b.n	800bd34 <UART_Start_Receive_IT+0xa4>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd0e:	d10d      	bne.n	800bd2c <UART_Start_Receive_IT+0x9c>
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d104      	bne.n	800bd22 <UART_Start_Receive_IT+0x92>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	227f      	movs	r2, #127	; 0x7f
 800bd1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd20:	e008      	b.n	800bd34 <UART_Start_Receive_IT+0xa4>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	223f      	movs	r2, #63	; 0x3f
 800bd26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd2a:	e003      	b.n	800bd34 <UART_Start_Receive_IT+0xa4>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2222      	movs	r2, #34	; 0x22
 800bd40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3308      	adds	r3, #8
 800bd4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd4e:	e853 3f00 	ldrex	r3, [r3]
 800bd52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bd54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd56:	f043 0301 	orr.w	r3, r3, #1
 800bd5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3308      	adds	r3, #8
 800bd64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bd68:	673a      	str	r2, [r7, #112]	; 0x70
 800bd6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bd6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bd76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e3      	bne.n	800bd44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd84:	d14f      	bne.n	800be26 <UART_Start_Receive_IT+0x196>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd8c:	88fa      	ldrh	r2, [r7, #6]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d349      	bcc.n	800be26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd9a:	d107      	bne.n	800bdac <UART_Start_Receive_IT+0x11c>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d103      	bne.n	800bdac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4a46      	ldr	r2, [pc, #280]	; (800bec0 <UART_Start_Receive_IT+0x230>)
 800bda8:	675a      	str	r2, [r3, #116]	; 0x74
 800bdaa:	e002      	b.n	800bdb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a45      	ldr	r2, [pc, #276]	; (800bec4 <UART_Start_Receive_IT+0x234>)
 800bdb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d01a      	beq.n	800bdf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bdc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bde2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bdea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e4      	bne.n	800bdba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfa:	e853 3f00 	ldrex	r3, [r3]
 800bdfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3308      	adds	r3, #8
 800be0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800be10:	64ba      	str	r2, [r7, #72]	; 0x48
 800be12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be18:	e841 2300 	strex	r3, r2, [r1]
 800be1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1e5      	bne.n	800bdf0 <UART_Start_Receive_IT+0x160>
 800be24:	e046      	b.n	800beb4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be2e:	d107      	bne.n	800be40 <UART_Start_Receive_IT+0x1b0>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d103      	bne.n	800be40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4a23      	ldr	r2, [pc, #140]	; (800bec8 <UART_Start_Receive_IT+0x238>)
 800be3c:	675a      	str	r2, [r3, #116]	; 0x74
 800be3e:	e002      	b.n	800be46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a22      	ldr	r2, [pc, #136]	; (800becc <UART_Start_Receive_IT+0x23c>)
 800be44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d019      	beq.n	800be82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800be62:	677b      	str	r3, [r7, #116]	; 0x74
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be6c:	637b      	str	r3, [r7, #52]	; 0x34
 800be6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e6      	bne.n	800be4e <UART_Start_Receive_IT+0x1be>
 800be80:	e018      	b.n	800beb4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	613b      	str	r3, [r7, #16]
   return(result);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f043 0320 	orr.w	r3, r3, #32
 800be96:	67bb      	str	r3, [r7, #120]	; 0x78
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	461a      	mov	r2, r3
 800be9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bea0:	623b      	str	r3, [r7, #32]
 800bea2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea4:	69f9      	ldr	r1, [r7, #28]
 800bea6:	6a3a      	ldr	r2, [r7, #32]
 800bea8:	e841 2300 	strex	r3, r2, [r1]
 800beac:	61bb      	str	r3, [r7, #24]
   return(result);
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e6      	bne.n	800be82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	378c      	adds	r7, #140	; 0x8c
 800beba:	46bd      	mov	sp, r7
 800bebc:	bc80      	pop	{r7}
 800bebe:	4770      	bx	lr
 800bec0:	0800c8a5 	.word	0x0800c8a5
 800bec4:	0800c545 	.word	0x0800c545
 800bec8:	0800c38d 	.word	0x0800c38d
 800becc:	0800c1d5 	.word	0x0800c1d5

0800bed0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b08f      	sub	sp, #60	; 0x3c
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800beec:	637b      	str	r3, [r7, #52]	; 0x34
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bef8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800befc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e6      	bne.n	800bed8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bf20:	633b      	str	r3, [r7, #48]	; 0x30
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3308      	adds	r3, #8
 800bf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf2a:	61ba      	str	r2, [r7, #24]
 800bf2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6979      	ldr	r1, [r7, #20]
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	613b      	str	r3, [r7, #16]
   return(result);
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e5      	bne.n	800bf0a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bf46:	bf00      	nop
 800bf48:	373c      	adds	r7, #60	; 0x3c
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr

0800bf50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b095      	sub	sp, #84	; 0x54
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf76:	643b      	str	r3, [r7, #64]	; 0x40
 800bf78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e6      	bne.n	800bf58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3308      	adds	r3, #8
 800bf90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	e853 3f00 	ldrex	r3, [r3]
 800bf98:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfa0:	f023 0301 	bic.w	r3, r3, #1
 800bfa4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3308      	adds	r3, #8
 800bfac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfb6:	e841 2300 	strex	r3, r2, [r1]
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e3      	bne.n	800bf8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d118      	bne.n	800bffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f023 0310 	bic.w	r3, r3, #16
 800bfde:	647b      	str	r3, [r7, #68]	; 0x44
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	6979      	ldr	r1, [r7, #20]
 800bfee:	69ba      	ldr	r2, [r7, #24]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	613b      	str	r3, [r7, #16]
   return(result);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e6      	bne.n	800bfca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c010:	bf00      	nop
 800c012:	3754      	adds	r7, #84	; 0x54
 800c014:	46bd      	mov	sp, r7
 800c016:	bc80      	pop	{r7}
 800c018:	4770      	bx	lr

0800c01a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b090      	sub	sp, #64	; 0x40
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	2b00      	cmp	r3, #0
 800c034:	d137      	bne.n	800c0a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c038:	2200      	movs	r2, #0
 800c03a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	623b      	str	r3, [r7, #32]
   return(result);
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c054:	63bb      	str	r3, [r7, #56]	; 0x38
 800c056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3308      	adds	r3, #8
 800c05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c05e:	633a      	str	r2, [r7, #48]	; 0x30
 800c060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e5      	bne.n	800c03e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	e853 3f00 	ldrex	r3, [r3]
 800c07e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	637b      	str	r3, [r7, #52]	; 0x34
 800c088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	461a      	mov	r2, r3
 800c08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c090:	61fb      	str	r3, [r7, #28]
 800c092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	69b9      	ldr	r1, [r7, #24]
 800c096:	69fa      	ldr	r2, [r7, #28]
 800c098:	e841 2300 	strex	r3, r2, [r1]
 800c09c:	617b      	str	r3, [r7, #20]
   return(result);
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e6      	bne.n	800c072 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0a4:	e002      	b.n	800c0ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c0a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0a8:	f7f7 fc88 	bl	80039bc <HAL_UART_TxCpltCallback>
}
 800c0ac:	bf00      	nop
 800c0ae:	3740      	adds	r7, #64	; 0x40
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f7ff f99a 	bl	800b3fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0c8:	bf00      	nop
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f8:	2b80      	cmp	r3, #128	; 0x80
 800c0fa:	d109      	bne.n	800c110 <UART_DMAError+0x40>
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2b21      	cmp	r3, #33	; 0x21
 800c100:	d106      	bne.n	800c110 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2200      	movs	r2, #0
 800c106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c10a:	6978      	ldr	r0, [r7, #20]
 800c10c:	f7ff fee0 	bl	800bed0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11a:	2b40      	cmp	r3, #64	; 0x40
 800c11c:	d109      	bne.n	800c132 <UART_DMAError+0x62>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b22      	cmp	r3, #34	; 0x22
 800c122:	d106      	bne.n	800c132 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2200      	movs	r2, #0
 800c128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c12c:	6978      	ldr	r0, [r7, #20]
 800c12e:	f7ff ff0f 	bl	800bf50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c138:	f043 0210 	orr.w	r2, r3, #16
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c142:	6978      	ldr	r0, [r7, #20]
 800c144:	f7ff f963 	bl	800b40e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c148:	bf00      	nop
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f7ff f94d 	bl	800b40e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c174:	bf00      	nop
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b088      	sub	sp, #32
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	60bb      	str	r3, [r7, #8]
   return(result);
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	61bb      	str	r3, [r7, #24]
 800c1a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6979      	ldr	r1, [r7, #20]
 800c1a8:	69ba      	ldr	r2, [r7, #24]
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e6      	bne.n	800c184 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7f7 fbf9 	bl	80039bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1ca:	bf00      	nop
 800c1cc:	3720      	adds	r7, #32
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b09c      	sub	sp, #112	; 0x70
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ec:	2b22      	cmp	r3, #34	; 0x22
 800c1ee:	f040 80be 	bne.w	800c36e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c200:	b2d9      	uxtb	r1, r3
 800c202:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c206:	b2da      	uxtb	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20c:	400a      	ands	r2, r1
 800c20e:	b2d2      	uxtb	r2, r2
 800c210:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c222:	b29b      	uxth	r3, r3
 800c224:	3b01      	subs	r3, #1
 800c226:	b29a      	uxth	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c234:	b29b      	uxth	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	f040 80a1 	bne.w	800c37e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c244:	e853 3f00 	ldrex	r3, [r3]
 800c248:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c24c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c250:	66bb      	str	r3, [r7, #104]	; 0x68
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c25a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c25c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c262:	e841 2300 	strex	r3, r2, [r1]
 800c266:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e6      	bne.n	800c23c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3308      	adds	r3, #8
 800c274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c280:	f023 0301 	bic.w	r3, r3, #1
 800c284:	667b      	str	r3, [r7, #100]	; 0x64
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3308      	adds	r3, #8
 800c28c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c28e:	647a      	str	r2, [r7, #68]	; 0x44
 800c290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e5      	bne.n	800c26e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2220      	movs	r2, #32
 800c2a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a33      	ldr	r2, [pc, #204]	; (800c388 <UART_RxISR_8BIT+0x1b4>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d01f      	beq.n	800c300 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d018      	beq.n	800c300 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	623b      	str	r3, [r7, #32]
   return(result);
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2e2:	663b      	str	r3, [r7, #96]	; 0x60
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ec:	633b      	str	r3, [r7, #48]	; 0x30
 800c2ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e6      	bne.n	800c2ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c304:	2b01      	cmp	r3, #1
 800c306:	d12e      	bne.n	800c366 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	e853 3f00 	ldrex	r3, [r3]
 800c31a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f023 0310 	bic.w	r3, r3, #16
 800c322:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	461a      	mov	r2, r3
 800c32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c32c:	61fb      	str	r3, [r7, #28]
 800c32e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c330:	69b9      	ldr	r1, [r7, #24]
 800c332:	69fa      	ldr	r2, [r7, #28]
 800c334:	e841 2300 	strex	r3, r2, [r1]
 800c338:	617b      	str	r3, [r7, #20]
   return(result);
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1e6      	bne.n	800c30e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	f003 0310 	and.w	r3, r3, #16
 800c34a:	2b10      	cmp	r3, #16
 800c34c:	d103      	bne.n	800c356 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2210      	movs	r2, #16
 800c354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c35c:	4619      	mov	r1, r3
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff f85e 	bl	800b420 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c364:	e00b      	b.n	800c37e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7f7 fb3e 	bl	80039e8 <HAL_UART_RxCpltCallback>
}
 800c36c:	e007      	b.n	800c37e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f042 0208 	orr.w	r2, r2, #8
 800c37c:	619a      	str	r2, [r3, #24]
}
 800c37e:	bf00      	nop
 800c380:	3770      	adds	r7, #112	; 0x70
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	40008000 	.word	0x40008000

0800c38c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b09c      	sub	sp, #112	; 0x70
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c39a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3a4:	2b22      	cmp	r3, #34	; 0x22
 800c3a6:	f040 80be 	bne.w	800c526 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c3ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c3be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ce:	1c9a      	adds	r2, r3, #2
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f040 80a1 	bne.w	800c536 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c408:	667b      	str	r3, [r7, #100]	; 0x64
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c412:	657b      	str	r3, [r7, #84]	; 0x54
 800c414:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e6      	bne.n	800c3f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	663b      	str	r3, [r7, #96]	; 0x60
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c446:	643a      	str	r2, [r7, #64]	; 0x40
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c44c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e5      	bne.n	800c426 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2220      	movs	r2, #32
 800c45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a33      	ldr	r2, [pc, #204]	; (800c540 <UART_RxISR_16BIT+0x1b4>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d01f      	beq.n	800c4b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d018      	beq.n	800c4b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	61fb      	str	r3, [r7, #28]
   return(result);
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c49a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e6      	bne.n	800c486 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d12e      	bne.n	800c51e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	e853 3f00 	ldrex	r3, [r3]
 800c4d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f023 0310 	bic.w	r3, r3, #16
 800c4da:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4e4:	61bb      	str	r3, [r7, #24]
 800c4e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	6979      	ldr	r1, [r7, #20]
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	e841 2300 	strex	r3, r2, [r1]
 800c4f0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1e6      	bne.n	800c4c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	f003 0310 	and.w	r3, r3, #16
 800c502:	2b10      	cmp	r3, #16
 800c504:	d103      	bne.n	800c50e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2210      	movs	r2, #16
 800c50c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7fe ff82 	bl	800b420 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c51c:	e00b      	b.n	800c536 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7f7 fa62 	bl	80039e8 <HAL_UART_RxCpltCallback>
}
 800c524:	e007      	b.n	800c536 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	699a      	ldr	r2, [r3, #24]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f042 0208 	orr.w	r2, r2, #8
 800c534:	619a      	str	r2, [r3, #24]
}
 800c536:	bf00      	nop
 800c538:	3770      	adds	r7, #112	; 0x70
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	40008000 	.word	0x40008000

0800c544 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b0ac      	sub	sp, #176	; 0xb0
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c552:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69db      	ldr	r3, [r3, #28]
 800c55c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c57a:	2b22      	cmp	r3, #34	; 0x22
 800c57c:	f040 8182 	bne.w	800c884 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c586:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c58a:	e125      	b.n	800c7d8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c596:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c59a:	b2d9      	uxtb	r1, r3
 800c59c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a6:	400a      	ands	r2, r1
 800c5a8:	b2d2      	uxtb	r2, r2
 800c5aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d053      	beq.n	800c686 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d011      	beq.n	800c60e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c5ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00b      	beq.n	800c60e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c604:	f043 0201 	orr.w	r2, r3, #1
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c60e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c612:	f003 0302 	and.w	r3, r3, #2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d011      	beq.n	800c63e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c61a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00b      	beq.n	800c63e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2202      	movs	r2, #2
 800c62c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c634:	f043 0204 	orr.w	r2, r3, #4
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c63e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c642:	f003 0304 	and.w	r3, r3, #4
 800c646:	2b00      	cmp	r3, #0
 800c648:	d011      	beq.n	800c66e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c64a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00b      	beq.n	800c66e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2204      	movs	r2, #4
 800c65c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c664:	f043 0202 	orr.w	r2, r3, #2
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c674:	2b00      	cmp	r3, #0
 800c676:	d006      	beq.n	800c686 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7fe fec8 	bl	800b40e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 80a2 	bne.w	800c7d8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6b8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c6bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c6be:	e841 2300 	strex	r3, r2, [r1]
 800c6c2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1e4      	bne.n	800c694 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c6da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6e0:	f023 0301 	bic.w	r3, r3, #1
 800c6e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6f2:	66ba      	str	r2, [r7, #104]	; 0x68
 800c6f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c6f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c6fa:	e841 2300 	strex	r3, r2, [r1]
 800c6fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e1      	bne.n	800c6ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2220      	movs	r2, #32
 800c70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a5f      	ldr	r2, [pc, #380]	; (800c89c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d021      	beq.n	800c768 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d01a      	beq.n	800c768 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c754:	657b      	str	r3, [r7, #84]	; 0x54
 800c756:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c758:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c75a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c75c:	e841 2300 	strex	r3, r2, [r1]
 800c760:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e4      	bne.n	800c732 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d130      	bne.n	800c7d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77e:	e853 3f00 	ldrex	r3, [r3]
 800c782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	f023 0310 	bic.w	r3, r3, #16
 800c78a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c798:	643b      	str	r3, [r7, #64]	; 0x40
 800c79a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c79e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7a0:	e841 2300 	strex	r3, r2, [r1]
 800c7a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1e4      	bne.n	800c776 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d103      	bne.n	800c7c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2210      	movs	r2, #16
 800c7c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7fe fe28 	bl	800b420 <HAL_UARTEx_RxEventCallback>
 800c7d0:	e002      	b.n	800c7d8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7f7 f908 	bl	80039e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d006      	beq.n	800c7ee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c7e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7e4:	f003 0320 	and.w	r3, r3, #32
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f47f aecf 	bne.w	800c58c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d049      	beq.n	800c894 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c806:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d242      	bcs.n	800c894 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3308      	adds	r3, #8
 800c814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3308      	adds	r3, #8
 800c82e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c832:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e3      	bne.n	800c80e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a15      	ldr	r2, [pc, #84]	; (800c8a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c84a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	e853 3f00 	ldrex	r3, [r3]
 800c858:	60bb      	str	r3, [r7, #8]
   return(result);
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	f043 0320 	orr.w	r3, r3, #32
 800c860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	461a      	mov	r2, r3
 800c86a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c86e:	61bb      	str	r3, [r7, #24]
 800c870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c872:	6979      	ldr	r1, [r7, #20]
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	e841 2300 	strex	r3, r2, [r1]
 800c87a:	613b      	str	r3, [r7, #16]
   return(result);
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1e4      	bne.n	800c84c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c882:	e007      	b.n	800c894 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	699a      	ldr	r2, [r3, #24]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f042 0208 	orr.w	r2, r2, #8
 800c892:	619a      	str	r2, [r3, #24]
}
 800c894:	bf00      	nop
 800c896:	37b0      	adds	r7, #176	; 0xb0
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	40008000 	.word	0x40008000
 800c8a0:	0800c1d5 	.word	0x0800c1d5

0800c8a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b0ae      	sub	sp, #184	; 0xb8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8da:	2b22      	cmp	r3, #34	; 0x22
 800c8dc:	f040 8186 	bne.w	800cbec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8ea:	e129      	b.n	800cb40 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c8fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c902:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c906:	4013      	ands	r3, r2
 800c908:	b29a      	uxth	r2, r3
 800c90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c90e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c914:	1c9a      	adds	r2, r3, #2
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c920:	b29b      	uxth	r3, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	69db      	ldr	r3, [r3, #28]
 800c932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c93a:	f003 0307 	and.w	r3, r3, #7
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d053      	beq.n	800c9ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d011      	beq.n	800c972 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c94e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00b      	beq.n	800c972 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2201      	movs	r2, #1
 800c960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c968:	f043 0201 	orr.w	r2, r3, #1
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c976:	f003 0302 	and.w	r3, r3, #2
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d011      	beq.n	800c9a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c97e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00b      	beq.n	800c9a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2202      	movs	r2, #2
 800c990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c998:	f043 0204 	orr.w	r2, r3, #4
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c9a6:	f003 0304 	and.w	r3, r3, #4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d011      	beq.n	800c9d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c9ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00b      	beq.n	800c9d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2204      	movs	r2, #4
 800c9c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9c8:	f043 0202 	orr.w	r2, r3, #2
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d006      	beq.n	800c9ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7fe fd16 	bl	800b40e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f040 80a4 	bne.w	800cb40 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca00:	e853 3f00 	ldrex	r3, [r3]
 800ca04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	461a      	mov	r2, r3
 800ca16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca1e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ca22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ca2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e2      	bne.n	800c9f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3308      	adds	r3, #8
 800ca38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca48:	f023 0301 	bic.w	r3, r3, #1
 800ca4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3308      	adds	r3, #8
 800ca56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca62:	e841 2300 	strex	r3, r2, [r1]
 800ca66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1e1      	bne.n	800ca32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2220      	movs	r2, #32
 800ca72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a5f      	ldr	r2, [pc, #380]	; (800cc04 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d021      	beq.n	800cad0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d01a      	beq.n	800cad0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa2:	e853 3f00 	ldrex	r3, [r3]
 800caa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800caa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800caae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cabc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cabe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cac4:	e841 2300 	strex	r3, r2, [r1]
 800cac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800caca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1e4      	bne.n	800ca9a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d130      	bne.n	800cb3a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae6:	e853 3f00 	ldrex	r3, [r3]
 800caea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800caec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caee:	f023 0310 	bic.w	r3, r3, #16
 800caf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb00:	647b      	str	r3, [r7, #68]	; 0x44
 800cb02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb08:	e841 2300 	strex	r3, r2, [r1]
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e4      	bne.n	800cade <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	f003 0310 	and.w	r3, r3, #16
 800cb1e:	2b10      	cmp	r3, #16
 800cb20:	d103      	bne.n	800cb2a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2210      	movs	r2, #16
 800cb28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7fe fc74 	bl	800b420 <HAL_UARTEx_RxEventCallback>
 800cb38:	e002      	b.n	800cb40 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7f6 ff54 	bl	80039e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d006      	beq.n	800cb56 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800cb48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb4c:	f003 0320 	and.w	r3, r3, #32
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f47f aecb 	bne.w	800c8ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb5c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d049      	beq.n	800cbfc <UART_RxISR_16BIT_FIFOEN+0x358>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb6e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d242      	bcs.n	800cbfc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3308      	adds	r3, #8
 800cb7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	e853 3f00 	ldrex	r3, [r3]
 800cb84:	623b      	str	r3, [r7, #32]
   return(result);
 800cb86:	6a3b      	ldr	r3, [r7, #32]
 800cb88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3308      	adds	r3, #8
 800cb96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb9a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba2:	e841 2300 	strex	r3, r2, [r1]
 800cba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1e3      	bne.n	800cb76 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cbb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	e853 3f00 	ldrex	r3, [r3]
 800cbc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f043 0320 	orr.w	r3, r3, #32
 800cbc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbd6:	61fb      	str	r3, [r7, #28]
 800cbd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbda:	69b9      	ldr	r1, [r7, #24]
 800cbdc:	69fa      	ldr	r2, [r7, #28]
 800cbde:	e841 2300 	strex	r3, r2, [r1]
 800cbe2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1e4      	bne.n	800cbb4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbea:	e007      	b.n	800cbfc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	699a      	ldr	r2, [r3, #24]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0208 	orr.w	r2, r2, #8
 800cbfa:	619a      	str	r2, [r3, #24]
}
 800cbfc:	bf00      	nop
 800cbfe:	37b8      	adds	r7, #184	; 0xb8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	40008000 	.word	0x40008000
 800cc08:	0800c38d 	.word	0x0800c38d

0800cc0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bc80      	pop	{r7}
 800cc1c:	4770      	bx	lr

0800cc1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc26:	bf00      	nop
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bc80      	pop	{r7}
 800cc2e:	4770      	bx	lr

0800cc30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bc80      	pop	{r7}
 800cc40:	4770      	bx	lr

0800cc42 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b088      	sub	sp, #32
 800cc46:	af02      	add	r7, sp, #8
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	1d3b      	adds	r3, r7, #4
 800cc4c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d101      	bne.n	800cc62 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cc5e:	2302      	movs	r3, #2
 800cc60:	e046      	b.n	800ccf0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2224      	movs	r2, #36	; 0x24
 800cc6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f022 0201 	bic.w	r2, r2, #1
 800cc80:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	430a      	orrs	r2, r1
 800cc94:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d105      	bne.n	800cca8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cc9c:	1d3b      	adds	r3, r7, #4
 800cc9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f99d 	bl	800cfe2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0201 	orr.w	r2, r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ccb8:	f7f5 ffe2 	bl	8002c80 <HAL_GetTick>
 800ccbc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7fe ff16 	bl	800bafe <UART_WaitOnFlagUntilTimeout>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	75fb      	strb	r3, [r7, #23]
 800ccdc:	e003      	b.n	800cce6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3718      	adds	r7, #24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b089      	sub	sp, #36	; 0x24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d101      	bne.n	800cd0e <HAL_UARTEx_EnableStopMode+0x16>
 800cd0a:	2302      	movs	r3, #2
 800cd0c:	e021      	b.n	800cd52 <HAL_UARTEx_EnableStopMode+0x5a>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	e853 3f00 	ldrex	r3, [r3]
 800cd22:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f043 0302 	orr.w	r3, r3, #2
 800cd2a:	61fb      	str	r3, [r7, #28]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	461a      	mov	r2, r3
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd38:	6979      	ldr	r1, [r7, #20]
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	e841 2300 	strex	r3, r2, [r1]
 800cd40:	613b      	str	r3, [r7, #16]
   return(result);
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e6      	bne.n	800cd16 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3724      	adds	r7, #36	; 0x24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bc80      	pop	{r7}
 800cd5a:	4770      	bx	lr

0800cd5c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d101      	bne.n	800cd72 <HAL_UARTEx_EnableFifoMode+0x16>
 800cd6e:	2302      	movs	r3, #2
 800cd70:	e02b      	b.n	800cdca <HAL_UARTEx_EnableFifoMode+0x6e>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2201      	movs	r2, #1
 800cd76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2224      	movs	r2, #36	; 0x24
 800cd7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f022 0201 	bic.w	r2, r2, #1
 800cd98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cda0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cda8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f938 	bl	800d028 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2220      	movs	r2, #32
 800cdbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b085      	sub	sp, #20
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d101      	bne.n	800cde8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cde4:	2302      	movs	r3, #2
 800cde6:	e027      	b.n	800ce38 <HAL_UARTEx_DisableFifoMode+0x66>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2224      	movs	r2, #36	; 0x24
 800cdf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f022 0201 	bic.w	r2, r2, #1
 800ce0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2220      	movs	r2, #32
 800ce2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bc80      	pop	{r7}
 800ce40:	4770      	bx	lr

0800ce42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b084      	sub	sp, #16
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d101      	bne.n	800ce5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce56:	2302      	movs	r3, #2
 800ce58:	e02d      	b.n	800ceb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2224      	movs	r2, #36	; 0x24
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f022 0201 	bic.w	r2, r2, #1
 800ce80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f8c6 	bl	800d028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2220      	movs	r2, #32
 800cea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d101      	bne.n	800ced6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ced2:	2302      	movs	r3, #2
 800ced4:	e02d      	b.n	800cf32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2224      	movs	r2, #36	; 0x24
 800cee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f022 0201 	bic.w	r2, r2, #1
 800cefc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f888 	bl	800d028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2220      	movs	r2, #32
 800cf24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b08c      	sub	sp, #48	; 0x30
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	4613      	mov	r3, r2
 800cf46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf4e:	2b20      	cmp	r3, #32
 800cf50:	d142      	bne.n	800cfd8 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800cf58:	88fb      	ldrh	r3, [r7, #6]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e03b      	b.n	800cfda <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2201      	movs	r2, #1
 800cf66:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800cf6e:	88fb      	ldrh	r3, [r7, #6]
 800cf70:	461a      	mov	r2, r3
 800cf72:	68b9      	ldr	r1, [r7, #8]
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f7fe fe8b 	bl	800bc90 <UART_Start_Receive_IT>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cf80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d124      	bne.n	800cfd2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d11d      	bne.n	800cfcc <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2210      	movs	r2, #16
 800cf96:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	e853 3f00 	ldrex	r3, [r3]
 800cfa4:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f043 0310 	orr.w	r3, r3, #16
 800cfac:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfba:	6a39      	ldr	r1, [r7, #32]
 800cfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfbe:	e841 2300 	strex	r3, r2, [r1]
 800cfc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e6      	bne.n	800cf98 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800cfca:	e002      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800cfd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfd6:	e000      	b.n	800cfda <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cfd8:	2302      	movs	r3, #2
  }
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3730      	adds	r7, #48	; 0x30
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	1d3b      	adds	r3, r7, #4
 800cfec:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	f023 0210 	bic.w	r2, r3, #16
 800cffa:	893b      	ldrh	r3, [r7, #8]
 800cffc:	4619      	mov	r1, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	430a      	orrs	r2, r1
 800d004:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d010:	7abb      	ldrb	r3, [r7, #10]
 800d012:	061a      	lsls	r2, r3, #24
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	430a      	orrs	r2, r1
 800d01a:	605a      	str	r2, [r3, #4]
}
 800d01c:	bf00      	nop
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	bc80      	pop	{r7}
 800d024:	4770      	bx	lr
	...

0800d028 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d034:	2b00      	cmp	r3, #0
 800d036:	d108      	bne.n	800d04a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d048:	e031      	b.n	800d0ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d04a:	2308      	movs	r3, #8
 800d04c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d04e:	2308      	movs	r3, #8
 800d050:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	0e5b      	lsrs	r3, r3, #25
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	f003 0307 	and.w	r3, r3, #7
 800d060:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	0f5b      	lsrs	r3, r3, #29
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	f003 0307 	and.w	r3, r3, #7
 800d070:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	7b3a      	ldrb	r2, [r7, #12]
 800d076:	4910      	ldr	r1, [pc, #64]	; (800d0b8 <UARTEx_SetNbDataToProcess+0x90>)
 800d078:	5c8a      	ldrb	r2, [r1, r2]
 800d07a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d07e:	7b3a      	ldrb	r2, [r7, #12]
 800d080:	490e      	ldr	r1, [pc, #56]	; (800d0bc <UARTEx_SetNbDataToProcess+0x94>)
 800d082:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d084:	fb93 f3f2 	sdiv	r3, r3, r2
 800d088:	b29a      	uxth	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	7b7a      	ldrb	r2, [r7, #13]
 800d094:	4908      	ldr	r1, [pc, #32]	; (800d0b8 <UARTEx_SetNbDataToProcess+0x90>)
 800d096:	5c8a      	ldrb	r2, [r1, r2]
 800d098:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d09c:	7b7a      	ldrb	r2, [r7, #13]
 800d09e:	4907      	ldr	r1, [pc, #28]	; (800d0bc <UARTEx_SetNbDataToProcess+0x94>)
 800d0a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d0ae:	bf00      	nop
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bc80      	pop	{r7}
 800d0b6:	4770      	bx	lr
 800d0b8:	0801f5b0 	.word	0x0801f5b0
 800d0bc:	0801f5b8 	.word	0x0801f5b8

0800d0c0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d0c4:	f7f5 fc78 	bl	80029b8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d0c8:	f000 f820 	bl	800d10c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d0cc:	bf00      	nop
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d8:	f010 fdb4 	bl	801dc44 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d0dc:	bf00      	nop
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d0e4:	f3bf 8f4f 	dsb	sy
}
 800d0e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d0ea:	4b06      	ldr	r3, [pc, #24]	; (800d104 <__NVIC_SystemReset+0x24>)
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d0f2:	4904      	ldr	r1, [pc, #16]	; (800d104 <__NVIC_SystemReset+0x24>)
 800d0f4:	4b04      	ldr	r3, [pc, #16]	; (800d108 <__NVIC_SystemReset+0x28>)
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d0fa:	f3bf 8f4f 	dsb	sy
}
 800d0fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d100:	bf00      	nop
 800d102:	e7fd      	b.n	800d100 <__NVIC_SystemReset+0x20>
 800d104:	e000ed00 	.word	0xe000ed00
 800d108:	05fa0004 	.word	0x05fa0004

0800d10c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d112:	2300      	movs	r3, #0
 800d114:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d116:	2300      	movs	r3, #0
 800d118:	9302      	str	r3, [sp, #8]
 800d11a:	2303      	movs	r3, #3
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	2301      	movs	r3, #1
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	4b59      	ldr	r3, [pc, #356]	; (800d288 <LoRaWAN_Init+0x17c>)
 800d124:	2200      	movs	r2, #0
 800d126:	2100      	movs	r1, #0
 800d128:	2002      	movs	r0, #2
 800d12a:	f011 f9d9 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d12e:	2300      	movs	r3, #0
 800d130:	9302      	str	r3, [sp, #8]
 800d132:	2305      	movs	r3, #5
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	2302      	movs	r3, #2
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	4b54      	ldr	r3, [pc, #336]	; (800d28c <LoRaWAN_Init+0x180>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	2100      	movs	r1, #0
 800d140:	2002      	movs	r0, #2
 800d142:	f011 f9cd 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d146:	2300      	movs	r3, #0
 800d148:	9302      	str	r3, [sp, #8]
 800d14a:	2303      	movs	r3, #3
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	2301      	movs	r3, #1
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	4b4f      	ldr	r3, [pc, #316]	; (800d290 <LoRaWAN_Init+0x184>)
 800d154:	2200      	movs	r2, #0
 800d156:	2100      	movs	r1, #0
 800d158:	2002      	movs	r0, #2
 800d15a:	f011 f9c1 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d15e:	1d3b      	adds	r3, r7, #4
 800d160:	4619      	mov	r1, r3
 800d162:	2000      	movs	r0, #0
 800d164:	f003 f972 	bl	801044c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	0e1b      	lsrs	r3, r3, #24
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	0c1b      	lsrs	r3, r3, #16
 800d174:	b2db      	uxtb	r3, r3
 800d176:	4619      	mov	r1, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	0a1b      	lsrs	r3, r3, #8
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	9302      	str	r3, [sp, #8]
 800d180:	9101      	str	r1, [sp, #4]
 800d182:	9200      	str	r2, [sp, #0]
 800d184:	4b43      	ldr	r3, [pc, #268]	; (800d294 <LoRaWAN_Init+0x188>)
 800d186:	2200      	movs	r2, #0
 800d188:	2100      	movs	r1, #0
 800d18a:	2002      	movs	r0, #2
 800d18c:	f011 f9a8 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d190:	1d3b      	adds	r3, r7, #4
 800d192:	4619      	mov	r1, r3
 800d194:	2001      	movs	r0, #1
 800d196:	f003 f959 	bl	801044c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	0e1b      	lsrs	r3, r3, #24
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	0c1b      	lsrs	r3, r3, #16
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	0a1b      	lsrs	r3, r3, #8
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	b2c0      	uxtb	r0, r0
 800d1b4:	9003      	str	r0, [sp, #12]
 800d1b6:	9302      	str	r3, [sp, #8]
 800d1b8:	9101      	str	r1, [sp, #4]
 800d1ba:	9200      	str	r2, [sp, #0]
 800d1bc:	4b36      	ldr	r3, [pc, #216]	; (800d298 <LoRaWAN_Init+0x18c>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	2002      	movs	r0, #2
 800d1c4:	f011 f98c 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	4b33      	ldr	r3, [pc, #204]	; (800d29c <LoRaWAN_Init+0x190>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d1d4:	4832      	ldr	r0, [pc, #200]	; (800d2a0 <LoRaWAN_Init+0x194>)
 800d1d6:	f010 fed5 	bl	801df84 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d1da:	2300      	movs	r3, #0
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	4b31      	ldr	r3, [pc, #196]	; (800d2a4 <LoRaWAN_Init+0x198>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d1e6:	4830      	ldr	r0, [pc, #192]	; (800d2a8 <LoRaWAN_Init+0x19c>)
 800d1e8:	f010 fecc 	bl	801df84 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	4b2e      	ldr	r3, [pc, #184]	; (800d2ac <LoRaWAN_Init+0x1a0>)
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d1f8:	482d      	ldr	r0, [pc, #180]	; (800d2b0 <LoRaWAN_Init+0x1a4>)
 800d1fa:	f010 fec3 	bl	801df84 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d1fe:	2300      	movs	r3, #0
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	4b2c      	ldr	r3, [pc, #176]	; (800d2b4 <LoRaWAN_Init+0x1a8>)
 800d204:	2200      	movs	r2, #0
 800d206:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d20a:	482b      	ldr	r0, [pc, #172]	; (800d2b8 <LoRaWAN_Init+0x1ac>)
 800d20c:	f010 feba 	bl	801df84 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d210:	4a2a      	ldr	r2, [pc, #168]	; (800d2bc <LoRaWAN_Init+0x1b0>)
 800d212:	2100      	movs	r1, #0
 800d214:	2001      	movs	r0, #1
 800d216:	f010 fe11 	bl	801de3c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d21a:	4a29      	ldr	r2, [pc, #164]	; (800d2c0 <LoRaWAN_Init+0x1b4>)
 800d21c:	2100      	movs	r1, #0
 800d21e:	2002      	movs	r0, #2
 800d220:	f010 fe0c 	bl	801de3c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d224:	4a27      	ldr	r2, [pc, #156]	; (800d2c4 <LoRaWAN_Init+0x1b8>)
 800d226:	2100      	movs	r1, #0
 800d228:	2004      	movs	r0, #4
 800d22a:	f010 fe07 	bl	801de3c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d22e:	4a26      	ldr	r2, [pc, #152]	; (800d2c8 <LoRaWAN_Init+0x1bc>)
 800d230:	2100      	movs	r1, #0
 800d232:	2008      	movs	r0, #8
 800d234:	f010 fe02 	bl	801de3c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d238:	f000 fcf4 	bl	800dc24 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d23c:	4923      	ldr	r1, [pc, #140]	; (800d2cc <LoRaWAN_Init+0x1c0>)
 800d23e:	4824      	ldr	r0, [pc, #144]	; (800d2d0 <LoRaWAN_Init+0x1c4>)
 800d240:	f002 fa1a 	bl	800f678 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d244:	4823      	ldr	r0, [pc, #140]	; (800d2d4 <LoRaWAN_Init+0x1c8>)
 800d246:	f002 fa73 	bl	800f730 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d24a:	4819      	ldr	r0, [pc, #100]	; (800d2b0 <LoRaWAN_Init+0x1a4>)
 800d24c:	f010 fed0 	bl	801dff0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d250:	4b21      	ldr	r3, [pc, #132]	; (800d2d8 <LoRaWAN_Init+0x1cc>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	4a21      	ldr	r2, [pc, #132]	; (800d2dc <LoRaWAN_Init+0x1d0>)
 800d256:	7812      	ldrb	r2, [r2, #0]
 800d258:	4611      	mov	r1, r2
 800d25a:	4618      	mov	r0, r3
 800d25c:	f002 fb36 	bl	800f8cc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d260:	4b1f      	ldr	r3, [pc, #124]	; (800d2e0 <LoRaWAN_Init+0x1d4>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10b      	bne.n	800d280 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d268:	4b1e      	ldr	r3, [pc, #120]	; (800d2e4 <LoRaWAN_Init+0x1d8>)
 800d26a:	6819      	ldr	r1, [r3, #0]
 800d26c:	2300      	movs	r3, #0
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4b1d      	ldr	r3, [pc, #116]	; (800d2e8 <LoRaWAN_Init+0x1dc>)
 800d272:	2200      	movs	r2, #0
 800d274:	481d      	ldr	r0, [pc, #116]	; (800d2ec <LoRaWAN_Init+0x1e0>)
 800d276:	f010 fe85 	bl	801df84 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d27a:	481c      	ldr	r0, [pc, #112]	; (800d2ec <LoRaWAN_Init+0x1e0>)
 800d27c:	f010 feb8 	bl	801dff0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	0801ec68 	.word	0x0801ec68
 800d28c:	0801ec8c 	.word	0x0801ec8c
 800d290:	0801ecac 	.word	0x0801ecac
 800d294:	0801eccc 	.word	0x0801eccc
 800d298:	0801ecf0 	.word	0x0801ecf0
 800d29c:	0800d74d 	.word	0x0800d74d
 800d2a0:	2000078c 	.word	0x2000078c
 800d2a4:	0800d75f 	.word	0x0800d75f
 800d2a8:	200007a4 	.word	0x200007a4
 800d2ac:	0800d771 	.word	0x0800d771
 800d2b0:	200007bc 	.word	0x200007bc
 800d2b4:	0800db25 	.word	0x0800db25
 800d2b8:	20000680 	.word	0x20000680
 800d2bc:	0800f8a1 	.word	0x0800f8a1
 800d2c0:	0800d439 	.word	0x0800d439
 800d2c4:	0800db49 	.word	0x0800db49
 800d2c8:	0800daa5 	.word	0x0800daa5
 800d2cc:	01030000 	.word	0x01030000
 800d2d0:	20000034 	.word	0x20000034
 800d2d4:	20000080 	.word	0x20000080
 800d2d8:	20000030 	.word	0x20000030
 800d2dc:	20000031 	.word	0x20000031
 800d2e0:	20000664 	.word	0x20000664
 800d2e4:	20000098 	.word	0x20000098
 800d2e8:	0800d729 	.word	0x0800d729
 800d2ec:	20000668 	.word	0x20000668

0800d2f0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d2f0:	b5b0      	push	{r4, r5, r7, lr}
 800d2f2:	b08a      	sub	sp, #40	; 0x28
 800d2f4:	af06      	add	r7, sp, #24
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 8086 	beq.w	800d412 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d306:	4845      	ldr	r0, [pc, #276]	; (800d41c <OnRxData+0x12c>)
 800d308:	f010 fe72 	bl	801dff0 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d05a      	beq.n	800d3ca <OnRxData+0xda>
    {
      if (appData != NULL)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d057      	beq.n	800d3ca <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d050      	beq.n	800d3ca <OnRxData+0xda>
        {
    switch (appData->Port)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d01f      	beq.n	800d370 <OnRxData+0x80>
 800d330:	2b03      	cmp	r3, #3
 800d332:	d145      	bne.n	800d3c0 <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d143      	bne.n	800d3c4 <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b02      	cmp	r3, #2
 800d344:	d00e      	beq.n	800d364 <OnRxData+0x74>
 800d346:	2b02      	cmp	r3, #2
 800d348:	dc10      	bgt.n	800d36c <OnRxData+0x7c>
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d002      	beq.n	800d354 <OnRxData+0x64>
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d004      	beq.n	800d35c <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d352:	e00b      	b.n	800d36c <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d354:	2000      	movs	r0, #0
 800d356:	f002 fc81 	bl	800fc5c <LmHandlerRequestClass>
              break;
 800d35a:	e008      	b.n	800d36e <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d35c:	2001      	movs	r0, #1
 800d35e:	f002 fc7d 	bl	800fc5c <LmHandlerRequestClass>
              break;
 800d362:	e004      	b.n	800d36e <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d364:	2002      	movs	r0, #2
 800d366:	f002 fc79 	bl	800fc5c <LmHandlerRequestClass>
              break;
 800d36a:	e000      	b.n	800d36e <OnRxData+0x7e>
              break;
 800d36c:	bf00      	nop
          }
        }
        break;
 800d36e:	e029      	b.n	800d3c4 <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	785b      	ldrb	r3, [r3, #1]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d127      	bne.n	800d3c8 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	b2da      	uxtb	r2, r3
 800d384:	4b26      	ldr	r3, [pc, #152]	; (800d420 <OnRxData+0x130>)
 800d386:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d388:	4b25      	ldr	r3, [pc, #148]	; (800d420 <OnRxData+0x130>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10b      	bne.n	800d3a8 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d390:	4b24      	ldr	r3, [pc, #144]	; (800d424 <OnRxData+0x134>)
 800d392:	2200      	movs	r2, #0
 800d394:	2100      	movs	r1, #0
 800d396:	2003      	movs	r0, #3
 800d398:	f011 f8a2 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d39c:	2201      	movs	r2, #1
 800d39e:	2120      	movs	r1, #32
 800d3a0:	4821      	ldr	r0, [pc, #132]	; (800d428 <OnRxData+0x138>)
 800d3a2:	f7f8 fefd 	bl	80061a0 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d3a6:	e00f      	b.n	800d3c8 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d3a8:	4b20      	ldr	r3, [pc, #128]	; (800d42c <OnRxData+0x13c>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	2003      	movs	r0, #3
 800d3b0:	f011 f896 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	2120      	movs	r1, #32
 800d3b8:	481b      	ldr	r0, [pc, #108]	; (800d428 <OnRxData+0x138>)
 800d3ba:	f7f8 fef1 	bl	80061a0 <HAL_GPIO_WritePin>
        break;
 800d3be:	e003      	b.n	800d3c8 <OnRxData+0xd8>

      default:

        break;
 800d3c0:	bf00      	nop
 800d3c2:	e002      	b.n	800d3ca <OnRxData+0xda>
        break;
 800d3c4:	bf00      	nop
 800d3c6:	e000      	b.n	800d3ca <OnRxData+0xda>
        break;
 800d3c8:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	7c1b      	ldrb	r3, [r3, #16]
 800d3ce:	2b05      	cmp	r3, #5
 800d3d0:	d81f      	bhi.n	800d412 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	7bfa      	ldrb	r2, [r7, #15]
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d3de:	460c      	mov	r4, r1
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	7c09      	ldrb	r1, [r1, #16]
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	4912      	ldr	r1, [pc, #72]	; (800d430 <OnRxData+0x140>)
 800d3e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d3ec:	6838      	ldr	r0, [r7, #0]
 800d3ee:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	6838      	ldr	r0, [r7, #0]
 800d3f6:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d3fa:	9005      	str	r0, [sp, #20]
 800d3fc:	9504      	str	r5, [sp, #16]
 800d3fe:	9103      	str	r1, [sp, #12]
 800d400:	9402      	str	r4, [sp, #8]
 800d402:	9201      	str	r2, [sp, #4]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4b0b      	ldr	r3, [pc, #44]	; (800d434 <OnRxData+0x144>)
 800d408:	2200      	movs	r2, #0
 800d40a:	2100      	movs	r1, #0
 800d40c:	2003      	movs	r0, #3
 800d40e:	f011 f867 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bdb0      	pop	{r4, r5, r7, pc}
 800d41a:	bf00      	nop
 800d41c:	200007a4 	.word	0x200007a4
 800d420:	2000078a 	.word	0x2000078a
 800d424:	0801ed14 	.word	0x0801ed14
 800d428:	48000400 	.word	0x48000400
 800d42c:	0801ed20 	.word	0x0801ed20
 800d430:	20000018 	.word	0x20000018
 800d434:	0801ed2c 	.word	0x0801ed2c

0800d438 <SendTxData>:

static void SendTxData(void)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08c      	sub	sp, #48	; 0x30
 800d43c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d43e:	23ff      	movs	r3, #255	; 0xff
 800d440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d444:	f7f5 faec 	bl	8002a20 <GetBatteryLevel>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d45a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	4b9f      	ldr	r3, [pc, #636]	; (800d6e0 <SendTxData+0x2a8>)
 800d462:	2201      	movs	r2, #1
 800d464:	2100      	movs	r1, #0
 800d466:	2002      	movs	r0, #2
 800d468:	f011 f83a 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7f3 fc66 	bl	8000d40 <__aeabi_f2iz>
 800d474:	4603      	mov	r3, r0
 800d476:	b21b      	sxth	r3, r3
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	4b9a      	ldr	r3, [pc, #616]	; (800d6e4 <SendTxData+0x2ac>)
 800d47c:	2201      	movs	r2, #1
 800d47e:	2100      	movs	r1, #0
 800d480:	2002      	movs	r0, #2
 800d482:	f011 f82d 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d486:	4b98      	ldr	r3, [pc, #608]	; (800d6e8 <SendTxData+0x2b0>)
 800d488:	2202      	movs	r2, #2
 800d48a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM1/100;
 800d48c:	4b97      	ldr	r3, [pc, #604]	; (800d6ec <SendTxData+0x2b4>)
 800d48e:	881b      	ldrh	r3, [r3, #0]
 800d490:	4a97      	ldr	r2, [pc, #604]	; (800d6f0 <SendTxData+0x2b8>)
 800d492:	fba2 2303 	umull	r2, r3, r2, r3
 800d496:	095b      	lsrs	r3, r3, #5
 800d498:	b298      	uxth	r0, r3
 800d49a:	4b93      	ldr	r3, [pc, #588]	; (800d6e8 <SendTxData+0x2b0>)
 800d49c:	685a      	ldr	r2, [r3, #4]
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	1c59      	adds	r1, r3, #1
 800d4a2:	61f9      	str	r1, [r7, #28]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	b2c2      	uxtb	r2, r0
 800d4a8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM1%100;
 800d4aa:	4b90      	ldr	r3, [pc, #576]	; (800d6ec <SendTxData+0x2b4>)
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	4a90      	ldr	r2, [pc, #576]	; (800d6f0 <SendTxData+0x2b8>)
 800d4b0:	fba2 1203 	umull	r1, r2, r2, r3
 800d4b4:	0952      	lsrs	r2, r2, #5
 800d4b6:	2164      	movs	r1, #100	; 0x64
 800d4b8:	fb01 f202 	mul.w	r2, r1, r2
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	b298      	uxth	r0, r3
 800d4c0:	4b89      	ldr	r3, [pc, #548]	; (800d6e8 <SendTxData+0x2b0>)
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	1c59      	adds	r1, r3, #1
 800d4c8:	61f9      	str	r1, [r7, #28]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	b2c2      	uxtb	r2, r0
 800d4ce:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5/100;
 800d4d0:	4b88      	ldr	r3, [pc, #544]	; (800d6f4 <SendTxData+0x2bc>)
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	4a86      	ldr	r2, [pc, #536]	; (800d6f0 <SendTxData+0x2b8>)
 800d4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4da:	095b      	lsrs	r3, r3, #5
 800d4dc:	b298      	uxth	r0, r3
 800d4de:	4b82      	ldr	r3, [pc, #520]	; (800d6e8 <SendTxData+0x2b0>)
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	1c59      	adds	r1, r3, #1
 800d4e6:	61f9      	str	r1, [r7, #28]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	b2c2      	uxtb	r2, r0
 800d4ec:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800d4ee:	4b81      	ldr	r3, [pc, #516]	; (800d6f4 <SendTxData+0x2bc>)
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	4a7f      	ldr	r2, [pc, #508]	; (800d6f0 <SendTxData+0x2b8>)
 800d4f4:	fba2 1203 	umull	r1, r2, r2, r3
 800d4f8:	0952      	lsrs	r2, r2, #5
 800d4fa:	2164      	movs	r1, #100	; 0x64
 800d4fc:	fb01 f202 	mul.w	r2, r1, r2
 800d500:	1a9b      	subs	r3, r3, r2
 800d502:	b298      	uxth	r0, r3
 800d504:	4b78      	ldr	r3, [pc, #480]	; (800d6e8 <SendTxData+0x2b0>)
 800d506:	685a      	ldr	r2, [r3, #4]
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	1c59      	adds	r1, r3, #1
 800d50c:	61f9      	str	r1, [r7, #28]
 800d50e:	4413      	add	r3, r2
 800d510:	b2c2      	uxtb	r2, r0
 800d512:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM10/100;
 800d514:	4b78      	ldr	r3, [pc, #480]	; (800d6f8 <SendTxData+0x2c0>)
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	4a75      	ldr	r2, [pc, #468]	; (800d6f0 <SendTxData+0x2b8>)
 800d51a:	fba2 2303 	umull	r2, r3, r2, r3
 800d51e:	095b      	lsrs	r3, r3, #5
 800d520:	b298      	uxth	r0, r3
 800d522:	4b71      	ldr	r3, [pc, #452]	; (800d6e8 <SendTxData+0x2b0>)
 800d524:	685a      	ldr	r2, [r3, #4]
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	1c59      	adds	r1, r3, #1
 800d52a:	61f9      	str	r1, [r7, #28]
 800d52c:	4413      	add	r3, r2
 800d52e:	b2c2      	uxtb	r2, r0
 800d530:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM10%100;
 800d532:	4b71      	ldr	r3, [pc, #452]	; (800d6f8 <SendTxData+0x2c0>)
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	4a6e      	ldr	r2, [pc, #440]	; (800d6f0 <SendTxData+0x2b8>)
 800d538:	fba2 1203 	umull	r1, r2, r2, r3
 800d53c:	0952      	lsrs	r2, r2, #5
 800d53e:	2164      	movs	r1, #100	; 0x64
 800d540:	fb01 f202 	mul.w	r2, r1, r2
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	b298      	uxth	r0, r3
 800d548:	4b67      	ldr	r3, [pc, #412]	; (800d6e8 <SendTxData+0x2b0>)
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	1c59      	adds	r1, r3, #1
 800d550:	61f9      	str	r1, [r7, #28]
 800d552:	4413      	add	r3, r2
 800d554:	b2c2      	uxtb	r2, r0
 800d556:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d558:	4b68      	ldr	r3, [pc, #416]	; (800d6fc <SendTxData+0x2c4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7f2 ff77 	bl	8000450 <__aeabi_f2d>
 800d562:	f04f 0200 	mov.w	r2, #0
 800d566:	4b66      	ldr	r3, [pc, #408]	; (800d700 <SendTxData+0x2c8>)
 800d568:	f7f2 ffca 	bl	8000500 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4610      	mov	r0, r2
 800d572:	4619      	mov	r1, r3
 800d574:	f7f3 fa5e 	bl	8000a34 <__aeabi_d2iz>
 800d578:	4603      	mov	r3, r0
 800d57a:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d57c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d580:	4a5b      	ldr	r2, [pc, #364]	; (800d6f0 <SendTxData+0x2b8>)
 800d582:	fb82 1203 	smull	r1, r2, r2, r3
 800d586:	1152      	asrs	r2, r2, #5
 800d588:	17db      	asrs	r3, r3, #31
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	b218      	sxth	r0, r3
 800d58e:	4b56      	ldr	r3, [pc, #344]	; (800d6e8 <SendTxData+0x2b0>)
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	1c59      	adds	r1, r3, #1
 800d596:	61f9      	str	r1, [r7, #28]
 800d598:	4413      	add	r3, r2
 800d59a:	b2c2      	uxtb	r2, r0
 800d59c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d59e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d5a2:	4a53      	ldr	r2, [pc, #332]	; (800d6f0 <SendTxData+0x2b8>)
 800d5a4:	fb82 1203 	smull	r1, r2, r2, r3
 800d5a8:	1151      	asrs	r1, r2, #5
 800d5aa:	17da      	asrs	r2, r3, #31
 800d5ac:	1a8a      	subs	r2, r1, r2
 800d5ae:	2164      	movs	r1, #100	; 0x64
 800d5b0:	fb01 f202 	mul.w	r2, r1, r2
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	b218      	sxth	r0, r3
 800d5b8:	4b4b      	ldr	r3, [pc, #300]	; (800d6e8 <SendTxData+0x2b0>)
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	1c59      	adds	r1, r3, #1
 800d5c0:	61f9      	str	r1, [r7, #28]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	b2c2      	uxtb	r2, r0
 800d5c6:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d5c8:	4b4e      	ldr	r3, [pc, #312]	; (800d704 <SendTxData+0x2cc>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7f2 ff3f 	bl	8000450 <__aeabi_f2d>
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	4b4a      	ldr	r3, [pc, #296]	; (800d700 <SendTxData+0x2c8>)
 800d5d8:	f7f2 ff92 	bl	8000500 <__aeabi_dmul>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	f7f3 fa26 	bl	8000a34 <__aeabi_d2iz>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d5ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d5f0:	4a3f      	ldr	r2, [pc, #252]	; (800d6f0 <SendTxData+0x2b8>)
 800d5f2:	fb82 1203 	smull	r1, r2, r2, r3
 800d5f6:	1152      	asrs	r2, r2, #5
 800d5f8:	17db      	asrs	r3, r3, #31
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	b218      	sxth	r0, r3
 800d5fe:	4b3a      	ldr	r3, [pc, #232]	; (800d6e8 <SendTxData+0x2b0>)
 800d600:	685a      	ldr	r2, [r3, #4]
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	1c59      	adds	r1, r3, #1
 800d606:	61f9      	str	r1, [r7, #28]
 800d608:	4413      	add	r3, r2
 800d60a:	b2c2      	uxtb	r2, r0
 800d60c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d60e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d612:	4a37      	ldr	r2, [pc, #220]	; (800d6f0 <SendTxData+0x2b8>)
 800d614:	fb82 1203 	smull	r1, r2, r2, r3
 800d618:	1151      	asrs	r1, r2, #5
 800d61a:	17da      	asrs	r2, r3, #31
 800d61c:	1a8a      	subs	r2, r1, r2
 800d61e:	2164      	movs	r1, #100	; 0x64
 800d620:	fb01 f202 	mul.w	r2, r1, r2
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	b218      	sxth	r0, r3
 800d628:	4b2f      	ldr	r3, [pc, #188]	; (800d6e8 <SendTxData+0x2b0>)
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	1c59      	adds	r1, r3, #1
 800d630:	61f9      	str	r1, [r7, #28]
 800d632:	4413      	add	r3, r2
 800d634:	b2c2      	uxtb	r2, r0
 800d636:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	4b2a      	ldr	r3, [pc, #168]	; (800d6e8 <SendTxData+0x2b0>)
 800d63e:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d640:	4b31      	ldr	r3, [pc, #196]	; (800d708 <SendTxData+0x2d0>)
 800d642:	7a5b      	ldrb	r3, [r3, #9]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d007      	beq.n	800d658 <SendTxData+0x220>
 800d648:	f002 f9e4 	bl	800fa14 <LmHandlerJoinStatus>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d102      	bne.n	800d658 <SendTxData+0x220>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d652:	482d      	ldr	r0, [pc, #180]	; (800d708 <SendTxData+0x2d0>)
 800d654:	f010 fd3a 	bl	801e0cc <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d658:	4b2c      	ldr	r3, [pc, #176]	; (800d70c <SendTxData+0x2d4>)
 800d65a:	78db      	ldrb	r3, [r3, #3]
 800d65c:	2200      	movs	r2, #0
 800d65e:	4619      	mov	r1, r3
 800d660:	4821      	ldr	r0, [pc, #132]	; (800d6e8 <SendTxData+0x2b0>)
 800d662:	f002 f9f3 	bl	800fa4c <LmHandlerSend>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d66c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d670:	2b00      	cmp	r3, #0
 800d672:	d106      	bne.n	800d682 <SendTxData+0x24a>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d674:	4b26      	ldr	r3, [pc, #152]	; (800d710 <SendTxData+0x2d8>)
 800d676:	2201      	movs	r2, #1
 800d678:	2100      	movs	r1, #0
 800d67a:	2001      	movs	r0, #1
 800d67c:	f010 ff30 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
 800d680:	e016      	b.n	800d6b0 <SendTxData+0x278>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d682:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d686:	f113 0f06 	cmn.w	r3, #6
 800d68a:	d111      	bne.n	800d6b0 <SendTxData+0x278>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d68c:	f002 f914 	bl	800f8b8 <LmHandlerGetDutyCycleWaitTime>
 800d690:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <SendTxData+0x278>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	4a1e      	ldr	r2, [pc, #120]	; (800d714 <SendTxData+0x2dc>)
 800d69c:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a0:	099b      	lsrs	r3, r3, #6
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	4b1c      	ldr	r3, [pc, #112]	; (800d718 <SendTxData+0x2e0>)
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	f010 ff18 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d6b0:	4b1a      	ldr	r3, [pc, #104]	; (800d71c <SendTxData+0x2e4>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10f      	bne.n	800d6d8 <SendTxData+0x2a0>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d6b8:	4819      	ldr	r0, [pc, #100]	; (800d720 <SendTxData+0x2e8>)
 800d6ba:	f010 fd07 	bl	801e0cc <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d6be:	4b19      	ldr	r3, [pc, #100]	; (800d724 <SendTxData+0x2ec>)
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	bf38      	it	cc
 800d6c8:	4613      	movcc	r3, r2
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	4814      	ldr	r0, [pc, #80]	; (800d720 <SendTxData+0x2e8>)
 800d6ce:	f010 fd6d 	bl	801e1ac <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d6d2:	4813      	ldr	r0, [pc, #76]	; (800d720 <SendTxData+0x2e8>)
 800d6d4:	f010 fc8c 	bl	801dff0 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d6d8:	bf00      	nop
 800d6da:	3728      	adds	r7, #40	; 0x28
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	0801ed74 	.word	0x0801ed74
 800d6e4:	0801ed80 	.word	0x0801ed80
 800d6e8:	2000009c 	.word	0x2000009c
 800d6ec:	20000268 	.word	0x20000268
 800d6f0:	51eb851f 	.word	0x51eb851f
 800d6f4:	20000264 	.word	0x20000264
 800d6f8:	2000026c 	.word	0x2000026c
 800d6fc:	20000270 	.word	0x20000270
 800d700:	40590000 	.word	0x40590000
 800d704:	20000274 	.word	0x20000274
 800d708:	200007bc 	.word	0x200007bc
 800d70c:	20000080 	.word	0x20000080
 800d710:	0801ed8c 	.word	0x0801ed8c
 800d714:	10624dd3 	.word	0x10624dd3
 800d718:	0801ed9c 	.word	0x0801ed9c
 800d71c:	20000664 	.word	0x20000664
 800d720:	20000668 	.word	0x20000668
 800d724:	20000098 	.word	0x20000098

0800d728 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d730:	2100      	movs	r1, #0
 800d732:	2002      	movs	r0, #2
 800d734:	f010 fba4 	bl	801de80 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d738:	4803      	ldr	r0, [pc, #12]	; (800d748 <OnTxTimerEvent+0x20>)
 800d73a:	f010 fc59 	bl	801dff0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20000668 	.word	0x20000668

0800d74c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	bc80      	pop	{r7}
 800d75c:	4770      	bx	lr

0800d75e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d766:	bf00      	nop
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bc80      	pop	{r7}
 800d76e:	4770      	bx	lr

0800d770 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bc80      	pop	{r7}
 800d780:	4770      	bx	lr
	...

0800d784 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af04      	add	r7, sp, #16
 800d78a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d041      	beq.n	800d816 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d03d      	beq.n	800d816 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d79a:	4821      	ldr	r0, [pc, #132]	; (800d820 <OnTxData+0x9c>)
 800d79c:	f010 fc28 	bl	801dff0 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d7a0:	4b20      	ldr	r3, [pc, #128]	; (800d824 <OnTxData+0xa0>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	2002      	movs	r0, #2
 800d7a8:	f010 fe9a 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	7c12      	ldrb	r2, [r2, #16]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d7bc:	4610      	mov	r0, r2
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d7c4:	9203      	str	r2, [sp, #12]
 800d7c6:	9002      	str	r0, [sp, #8]
 800d7c8:	9101      	str	r1, [sp, #4]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	4b16      	ldr	r3, [pc, #88]	; (800d828 <OnTxData+0xa4>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	2003      	movs	r0, #3
 800d7d4:	f010 fe84 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d7d8:	4b14      	ldr	r3, [pc, #80]	; (800d82c <OnTxData+0xa8>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2100      	movs	r1, #0
 800d7de:	2003      	movs	r0, #3
 800d7e0:	f010 fe7e 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	7a1b      	ldrb	r3, [r3, #8]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d10e      	bne.n	800d80a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	7a5b      	ldrb	r3, [r3, #9]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <OnTxData+0x74>
 800d7f4:	4b0e      	ldr	r3, [pc, #56]	; (800d830 <OnTxData+0xac>)
 800d7f6:	e000      	b.n	800d7fa <OnTxData+0x76>
 800d7f8:	4b0e      	ldr	r3, [pc, #56]	; (800d834 <OnTxData+0xb0>)
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	4b0e      	ldr	r3, [pc, #56]	; (800d838 <OnTxData+0xb4>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	2100      	movs	r1, #0
 800d802:	2003      	movs	r0, #3
 800d804:	f010 fe6c 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d808:	e005      	b.n	800d816 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d80a:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <OnTxData+0xb8>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	2100      	movs	r1, #0
 800d810:	2003      	movs	r0, #3
 800d812:	f010 fe65 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d816:	bf00      	nop
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	2000078c 	.word	0x2000078c
 800d824:	0801edbc 	.word	0x0801edbc
 800d828:	0801edf0 	.word	0x0801edf0
 800d82c:	0801ee24 	.word	0x0801ee24
 800d830:	0801ee34 	.word	0x0801ee34
 800d834:	0801ee38 	.word	0x0801ee38
 800d838:	0801ee40 	.word	0x0801ee40
 800d83c:	0801ee54 	.word	0x0801ee54

0800d840 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d035      	beq.n	800d8ba <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d11a      	bne.n	800d88e <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d858:	481a      	ldr	r0, [pc, #104]	; (800d8c4 <OnJoinRequest+0x84>)
 800d85a:	f010 fc37 	bl	801e0cc <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d85e:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <OnJoinRequest+0x88>)
 800d860:	2200      	movs	r2, #0
 800d862:	2100      	movs	r1, #0
 800d864:	2002      	movs	r0, #2
 800d866:	f010 fe3b 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	79db      	ldrb	r3, [r3, #7]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d106      	bne.n	800d880 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d872:	4b16      	ldr	r3, [pc, #88]	; (800d8cc <OnJoinRequest+0x8c>)
 800d874:	2200      	movs	r2, #0
 800d876:	2100      	movs	r1, #0
 800d878:	2002      	movs	r0, #2
 800d87a:	f010 fe31 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d87e:	e01c      	b.n	800d8ba <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d880:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <OnJoinRequest+0x90>)
 800d882:	2200      	movs	r2, #0
 800d884:	2100      	movs	r1, #0
 800d886:	2002      	movs	r0, #2
 800d888:	f010 fe2a 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d88c:	e015      	b.n	800d8ba <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d88e:	4b11      	ldr	r3, [pc, #68]	; (800d8d4 <OnJoinRequest+0x94>)
 800d890:	2200      	movs	r2, #0
 800d892:	2100      	movs	r1, #0
 800d894:	2002      	movs	r0, #2
 800d896:	f010 fe23 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	79db      	ldrb	r3, [r3, #7]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d10b      	bne.n	800d8ba <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d8a2:	4b0d      	ldr	r3, [pc, #52]	; (800d8d8 <OnJoinRequest+0x98>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	2002      	movs	r0, #2
 800d8aa:	f010 fe19 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d8ae:	4b0b      	ldr	r3, [pc, #44]	; (800d8dc <OnJoinRequest+0x9c>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 f809 	bl	800f8cc <LmHandlerJoin>
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	200007bc 	.word	0x200007bc
 800d8c8:	0801ee64 	.word	0x0801ee64
 800d8cc:	0801ee7c 	.word	0x0801ee7c
 800d8d0:	0801ee9c 	.word	0x0801ee9c
 800d8d4:	0801eebc 	.word	0x0801eebc
 800d8d8:	0801eed8 	.word	0x0801eed8
 800d8dc:	20000030 	.word	0x20000030

0800d8e0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e2:	b093      	sub	sp, #76	; 0x4c
 800d8e4:	af0c      	add	r7, sp, #48	; 0x30
 800d8e6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d056      	beq.n	800d99c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	785b      	ldrb	r3, [r3, #1]
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d008      	beq.n	800d908 <OnBeaconStatusChange+0x28>
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	d049      	beq.n	800d98e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d8fa:	4b2a      	ldr	r3, [pc, #168]	; (800d9a4 <OnBeaconStatusChange+0xc4>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	2100      	movs	r1, #0
 800d900:	2002      	movs	r0, #2
 800d902:	f010 fded 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d906:	e049      	b.n	800d99c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	7c1b      	ldrb	r3, [r3, #16]
 800d90c:	4618      	mov	r0, r3
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d914:	461c      	mov	r4, r3
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d91c:	461d      	mov	r5, r3
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	6852      	ldr	r2, [r2, #4]
 800d926:	6979      	ldr	r1, [r7, #20]
 800d928:	7d49      	ldrb	r1, [r1, #21]
 800d92a:	460e      	mov	r6, r1
 800d92c:	6979      	ldr	r1, [r7, #20]
 800d92e:	7d89      	ldrb	r1, [r1, #22]
 800d930:	6139      	str	r1, [r7, #16]
 800d932:	6979      	ldr	r1, [r7, #20]
 800d934:	7dc9      	ldrb	r1, [r1, #23]
 800d936:	60f9      	str	r1, [r7, #12]
 800d938:	6979      	ldr	r1, [r7, #20]
 800d93a:	7e09      	ldrb	r1, [r1, #24]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	6979      	ldr	r1, [r7, #20]
 800d940:	7e49      	ldrb	r1, [r1, #25]
 800d942:	6079      	str	r1, [r7, #4]
 800d944:	6979      	ldr	r1, [r7, #20]
 800d946:	7e89      	ldrb	r1, [r1, #26]
 800d948:	6039      	str	r1, [r7, #0]
 800d94a:	6979      	ldr	r1, [r7, #20]
 800d94c:	7ec9      	ldrb	r1, [r1, #27]
 800d94e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d950:	f8d7 c000 	ldr.w	ip, [r7]
 800d954:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d958:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d95c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d960:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d964:	f8cd c020 	str.w	ip, [sp, #32]
 800d968:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d96c:	f8cd c01c 	str.w	ip, [sp, #28]
 800d970:	6939      	ldr	r1, [r7, #16]
 800d972:	9106      	str	r1, [sp, #24]
 800d974:	9605      	str	r6, [sp, #20]
 800d976:	9204      	str	r2, [sp, #16]
 800d978:	9303      	str	r3, [sp, #12]
 800d97a:	9502      	str	r5, [sp, #8]
 800d97c:	9401      	str	r4, [sp, #4]
 800d97e:	9000      	str	r0, [sp, #0]
 800d980:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <OnBeaconStatusChange+0xc8>)
 800d982:	2200      	movs	r2, #0
 800d984:	2100      	movs	r1, #0
 800d986:	2002      	movs	r0, #2
 800d988:	f010 fdaa 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d98c:	e006      	b.n	800d99c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d98e:	4b07      	ldr	r3, [pc, #28]	; (800d9ac <OnBeaconStatusChange+0xcc>)
 800d990:	2200      	movs	r2, #0
 800d992:	2100      	movs	r1, #0
 800d994:	2002      	movs	r0, #2
 800d996:	f010 fda3 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d99a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d99c:	bf00      	nop
 800d99e:	371c      	adds	r7, #28
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a4:	0801eefc 	.word	0x0801eefc
 800d9a8:	0801ef14 	.word	0x0801ef14
 800d9ac:	0801ef88 	.word	0x0801ef88

0800d9b0 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d9b4:	bf00      	nop
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bc80      	pop	{r7}
 800d9ba:	4770      	bx	lr

0800d9bc <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d9c6:	79fb      	ldrb	r3, [r7, #7]
 800d9c8:	4a06      	ldr	r2, [pc, #24]	; (800d9e4 <OnClassChange+0x28>)
 800d9ca:	5cd3      	ldrb	r3, [r2, r3]
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <OnClassChange+0x2c>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	2002      	movs	r0, #2
 800d9d6:	f010 fd83 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	0801efc4 	.word	0x0801efc4
 800d9e8:	0801efa8 	.word	0x0801efa8

0800d9ec <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	2001      	movs	r0, #1
 800d9f4:	f010 fa44 	bl	801de80 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d9f8:	bf00      	nop
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800da04:	4a0d      	ldr	r2, [pc, #52]	; (800da3c <OnTxPeriodicityChanged+0x40>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800da0a:	4b0c      	ldr	r3, [pc, #48]	; (800da3c <OnTxPeriodicityChanged+0x40>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d103      	bne.n	800da1a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800da12:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <OnTxPeriodicityChanged+0x40>)
 800da14:	f242 7210 	movw	r2, #10000	; 0x2710
 800da18:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800da1a:	4809      	ldr	r0, [pc, #36]	; (800da40 <OnTxPeriodicityChanged+0x44>)
 800da1c:	f010 fb56 	bl	801e0cc <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800da20:	4b06      	ldr	r3, [pc, #24]	; (800da3c <OnTxPeriodicityChanged+0x40>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4619      	mov	r1, r3
 800da26:	4806      	ldr	r0, [pc, #24]	; (800da40 <OnTxPeriodicityChanged+0x44>)
 800da28:	f010 fbc0 	bl	801e1ac <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800da2c:	4804      	ldr	r0, [pc, #16]	; (800da40 <OnTxPeriodicityChanged+0x44>)
 800da2e:	f010 fadf 	bl	801dff0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20000098 	.word	0x20000098
 800da40:	20000668 	.word	0x20000668

0800da44 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	4603      	mov	r3, r0
 800da4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800da4e:	4a04      	ldr	r2, [pc, #16]	; (800da60 <OnTxFrameCtrlChanged+0x1c>)
 800da50:	79fb      	ldrb	r3, [r7, #7]
 800da52:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	bc80      	pop	{r7}
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	20000080 	.word	0x20000080

0800da64 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800da6e:	4a04      	ldr	r2, [pc, #16]	; (800da80 <OnPingSlotPeriodicityChanged+0x1c>)
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	bc80      	pop	{r7}
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	20000080 	.word	0x20000080

0800da84 <OnSystemReset>:

static void OnSystemReset(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800da88:	f002 fd11 	bl	80104ae <LmHandlerHalt>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d106      	bne.n	800daa0 <OnSystemReset+0x1c>
 800da92:	f001 ffbf 	bl	800fa14 <LmHandlerJoinStatus>
 800da96:	4603      	mov	r3, r0
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d101      	bne.n	800daa0 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800da9c:	f7ff fb20 	bl	800d0e0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800daa0:	bf00      	nop
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <StopJoin>:

static void StopJoin(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800daa8:	4817      	ldr	r0, [pc, #92]	; (800db08 <StopJoin+0x64>)
 800daaa:	f010 fb0f 	bl	801e0cc <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800daae:	f002 fcf1 	bl	8010494 <LmHandlerStop>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d006      	beq.n	800dac6 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800dab8:	4b14      	ldr	r3, [pc, #80]	; (800db0c <StopJoin+0x68>)
 800daba:	2200      	movs	r2, #0
 800dabc:	2100      	movs	r1, #0
 800dabe:	2002      	movs	r0, #2
 800dac0:	f010 fd0e 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
 800dac4:	e01a      	b.n	800dafc <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800dac6:	4b12      	ldr	r3, [pc, #72]	; (800db10 <StopJoin+0x6c>)
 800dac8:	2200      	movs	r2, #0
 800daca:	2100      	movs	r1, #0
 800dacc:	2002      	movs	r0, #2
 800dace:	f010 fd07 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800dad2:	4b10      	ldr	r3, [pc, #64]	; (800db14 <StopJoin+0x70>)
 800dad4:	2201      	movs	r2, #1
 800dad6:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800dad8:	4b0f      	ldr	r3, [pc, #60]	; (800db18 <StopJoin+0x74>)
 800dada:	2200      	movs	r2, #0
 800dadc:	2100      	movs	r1, #0
 800dade:	2002      	movs	r0, #2
 800dae0:	f010 fcfe 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800dae4:	480d      	ldr	r0, [pc, #52]	; (800db1c <StopJoin+0x78>)
 800dae6:	f001 fe23 	bl	800f730 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800daea:	4b0a      	ldr	r3, [pc, #40]	; (800db14 <StopJoin+0x70>)
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	2101      	movs	r1, #1
 800daf0:	4618      	mov	r0, r3
 800daf2:	f001 feeb 	bl	800f8cc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800daf6:	4804      	ldr	r0, [pc, #16]	; (800db08 <StopJoin+0x64>)
 800daf8:	f010 fa7a 	bl	801dff0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800dafc:	4808      	ldr	r0, [pc, #32]	; (800db20 <StopJoin+0x7c>)
 800dafe:	f010 fa77 	bl	801dff0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800db02:	bf00      	nop
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	20000668 	.word	0x20000668
 800db0c:	0801efc8 	.word	0x0801efc8
 800db10:	0801efe8 	.word	0x0801efe8
 800db14:	20000030 	.word	0x20000030
 800db18:	0801effc 	.word	0x0801effc
 800db1c:	20000080 	.word	0x20000080
 800db20:	20000680 	.word	0x20000680

0800db24 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800db2c:	4b05      	ldr	r3, [pc, #20]	; (800db44 <OnStopJoinTimerEvent+0x20>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b02      	cmp	r3, #2
 800db32:	d103      	bne.n	800db3c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800db34:	2100      	movs	r1, #0
 800db36:	2008      	movs	r0, #8
 800db38:	f010 f9a2 	bl	801de80 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20000030 	.word	0x20000030

0800db48 <StoreContext>:

static void StoreContext(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800db4e:	23ff      	movs	r3, #255	; 0xff
 800db50:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800db52:	f002 fce1 	bl	8010518 <LmHandlerNvmDataStore>
 800db56:	4603      	mov	r3, r0
 800db58:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800db5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db5e:	f113 0f08 	cmn.w	r3, #8
 800db62:	d106      	bne.n	800db72 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800db64:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <StoreContext+0x48>)
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	2002      	movs	r0, #2
 800db6c:	f010 fcb8 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800db70:	e00a      	b.n	800db88 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800db72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7a:	d105      	bne.n	800db88 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800db7c:	4b05      	ldr	r3, [pc, #20]	; (800db94 <StoreContext+0x4c>)
 800db7e:	2200      	movs	r2, #0
 800db80:	2100      	movs	r1, #0
 800db82:	2002      	movs	r0, #2
 800db84:	f010 fcac 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	0801f01c 	.word	0x0801f01c
 800db94:	0801f034 	.word	0x0801f034

0800db98 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d106      	bne.n	800dbb6 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dba8:	4b08      	ldr	r3, [pc, #32]	; (800dbcc <OnNvmDataChange+0x34>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2100      	movs	r1, #0
 800dbae:	2002      	movs	r0, #2
 800dbb0:	f010 fc96 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dbb4:	e005      	b.n	800dbc2 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dbb6:	4b06      	ldr	r3, [pc, #24]	; (800dbd0 <OnNvmDataChange+0x38>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2100      	movs	r1, #0
 800dbbc:	2002      	movs	r0, #2
 800dbbe:	f010 fc8f 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800dbc2:	bf00      	nop
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	0801f04c 	.word	0x0801f04c
 800dbd0:	0801f060 	.word	0x0801f060

0800dbd4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800dbde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dbe2:	4807      	ldr	r0, [pc, #28]	; (800dc00 <OnStoreContextRequest+0x2c>)
 800dbe4:	f7f3 fe42 	bl	800186c <FLASH_IF_Erase>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d104      	bne.n	800dbf8 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	6879      	ldr	r1, [r7, #4]
 800dbf2:	4803      	ldr	r0, [pc, #12]	; (800dc00 <OnStoreContextRequest+0x2c>)
 800dbf4:	f7f3 fdea 	bl	80017cc <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	0803f000 	.word	0x0803f000

0800dc04 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	4903      	ldr	r1, [pc, #12]	; (800dc20 <OnRestoreContextRequest+0x1c>)
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7f3 fe02 	bl	800181c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	0803f000 	.word	0x0803f000

0800dc24 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800dc28:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800dc2e:	4b14      	ldr	r3, [pc, #80]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800dc34:	4b12      	ldr	r3, [pc, #72]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800dc3a:	4b11      	ldr	r3, [pc, #68]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800dc40:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	f043 0320 	orr.w	r3, r3, #32
 800dc48:	4a0d      	ldr	r2, [pc, #52]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc4a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800dc4c:	4b0c      	ldr	r3, [pc, #48]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10c      	bne.n	800dc6e <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800dc54:	4b0b      	ldr	r3, [pc, #44]	; (800dc84 <LoraInfo_Init+0x60>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	2100      	movs	r1, #0
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	f010 fc40 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800dc60:	bf00      	nop
 800dc62:	f010 fc2b 	bl	801e4bc <UTIL_ADV_TRACE_IsBufferEmpty>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d1fa      	bne.n	800dc62 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800dc6c:	e7fe      	b.n	800dc6c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800dc6e:	4b04      	ldr	r3, [pc, #16]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800dc74:	4b02      	ldr	r3, [pc, #8]	; (800dc80 <LoraInfo_Init+0x5c>)
 800dc76:	2200      	movs	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dc7a:	bf00      	nop
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	200007d4 	.word	0x200007d4
 800dc84:	0801f074 	.word	0x0801f074

0800dc88 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dc8c:	4b02      	ldr	r3, [pc, #8]	; (800dc98 <LoraInfo_GetPtr+0x10>)
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bc80      	pop	{r7}
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	200007d4 	.word	0x200007d4

0800dc9c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dca0:	f7f5 feff 	bl	8003aa2 <BSP_RADIO_Init>
 800dca4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b082      	sub	sp, #8
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7f5 ff24 	bl	8003b04 <BSP_RADIO_ConfigRFSwitch>
 800dcbc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dcca:	f7f5 ff69 	bl	8003ba0 <BSP_RADIO_GetTxConfig>
 800dcce:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dcd8:	f7f5 ff69 	bl	8003bae <BSP_RADIO_IsTCXO>
 800dcdc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dce6:	f7f5 ff69 	bl	8003bbc <BSP_RADIO_IsDCDC>
 800dcea:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f5 ff64 	bl	8003bca <BSP_RADIO_GetRFOMaxPowerConfig>
 800dd02:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	33f1      	adds	r3, #241	; 0xf1
 800dd18:	2210      	movs	r2, #16
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f00c f875 	bl	8019e0c <memset1>
    ctx->M_n = 0;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	22f0      	movs	r2, #240	; 0xf0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	4618      	mov	r0, r3
 800dd32:	f00c f86b 	bl	8019e0c <memset1>
}
 800dd36:	bf00      	nop
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	2110      	movs	r1, #16
 800dd4e:	6838      	ldr	r0, [r7, #0]
 800dd50:	f000 fe5c 	bl	800ea0c <lorawan_aes_set_key>
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08c      	sub	sp, #48	; 0x30
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 80a1 	beq.w	800deb6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd7a:	f1c3 0310 	rsb	r3, r3, #16
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	4293      	cmp	r3, r2
 800dd82:	bf28      	it	cs
 800dd84:	4613      	movcs	r3, r2
 800dd86:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd94:	4413      	add	r3, r2
 800dd96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd98:	b292      	uxth	r2, r2
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f00b fffa 	bl	8019d96 <memcpy1>
        ctx->M_n += mlen;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	441a      	add	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddb8:	2b0f      	cmp	r3, #15
 800ddba:	f240 808d 	bls.w	800ded8 <AES_CMAC_Update+0x17c>
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	f000 8088 	beq.w	800ded8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ddc8:	2300      	movs	r3, #0
 800ddca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddcc:	e015      	b.n	800ddfa <AES_CMAC_Update+0x9e>
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	4413      	add	r3, r2
 800ddd4:	33f1      	adds	r3, #241	; 0xf1
 800ddd6:	781a      	ldrb	r2, [r3, #0]
 800ddd8:	68f9      	ldr	r1, [r7, #12]
 800ddda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dddc:	440b      	add	r3, r1
 800ddde:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	4053      	eors	r3, r2
 800dde6:	b2d9      	uxtb	r1, r3
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	4413      	add	r3, r2
 800ddee:	33f1      	adds	r3, #241	; 0xf1
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	701a      	strb	r2, [r3, #0]
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	2b0f      	cmp	r3, #15
 800ddfe:	dde6      	ble.n	800ddce <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de06:	f107 0314 	add.w	r3, r7, #20
 800de0a:	2210      	movs	r2, #16
 800de0c:	4618      	mov	r0, r3
 800de0e:	f00b ffc2 	bl	8019d96 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	f107 0114 	add.w	r1, r7, #20
 800de18:	f107 0314 	add.w	r3, r7, #20
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 fed3 	bl	800ebc8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	33f1      	adds	r3, #241	; 0xf1
 800de26:	f107 0114 	add.w	r1, r7, #20
 800de2a:	2210      	movs	r2, #16
 800de2c:	4618      	mov	r0, r3
 800de2e:	f00b ffb2 	bl	8019d96 <memcpy1>

        data += mlen;
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	4413      	add	r3, r2
 800de38:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800de42:	e038      	b.n	800deb6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800de44:	2300      	movs	r3, #0
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
 800de48:	e013      	b.n	800de72 <AES_CMAC_Update+0x116>
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	4413      	add	r3, r2
 800de50:	33f1      	adds	r3, #241	; 0xf1
 800de52:	781a      	ldrb	r2, [r3, #0]
 800de54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de56:	68b9      	ldr	r1, [r7, #8]
 800de58:	440b      	add	r3, r1
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	4053      	eors	r3, r2
 800de5e:	b2d9      	uxtb	r1, r3
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	4413      	add	r3, r2
 800de66:	33f1      	adds	r3, #241	; 0xf1
 800de68:	460a      	mov	r2, r1
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	3301      	adds	r3, #1
 800de70:	62bb      	str	r3, [r7, #40]	; 0x28
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	2b0f      	cmp	r3, #15
 800de76:	dde8      	ble.n	800de4a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de7e:	f107 0314 	add.w	r3, r7, #20
 800de82:	2210      	movs	r2, #16
 800de84:	4618      	mov	r0, r3
 800de86:	f00b ff86 	bl	8019d96 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	f107 0114 	add.w	r1, r7, #20
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	4618      	mov	r0, r3
 800de96:	f000 fe97 	bl	800ebc8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	33f1      	adds	r3, #241	; 0xf1
 800de9e:	f107 0114 	add.w	r1, r7, #20
 800dea2:	2210      	movs	r2, #16
 800dea4:	4618      	mov	r0, r3
 800dea6:	f00b ff76 	bl	8019d96 <memcpy1>

        data += 16;
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	3310      	adds	r3, #16
 800deae:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3b10      	subs	r3, #16
 800deb4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b10      	cmp	r3, #16
 800deba:	d8c3      	bhi.n	800de44 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	b292      	uxth	r2, r2
 800dec6:	68b9      	ldr	r1, [r7, #8]
 800dec8:	4618      	mov	r0, r3
 800deca:	f00b ff64 	bl	8019d96 <memcpy1>
    ctx->M_n = len;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ded6:	e000      	b.n	800deda <AES_CMAC_Update+0x17e>
            return;
 800ded8:	bf00      	nop
}
 800deda:	3730      	adds	r7, #48	; 0x30
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b092      	sub	sp, #72	; 0x48
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800deea:	f107 031c 	add.w	r3, r7, #28
 800deee:	2210      	movs	r2, #16
 800def0:	2100      	movs	r1, #0
 800def2:	4618      	mov	r0, r3
 800def4:	f00b ff8a 	bl	8019e0c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	f107 011c 	add.w	r1, r7, #28
 800defe:	f107 031c 	add.w	r3, r7, #28
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fe60 	bl	800ebc8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800df08:	7f3b      	ldrb	r3, [r7, #28]
 800df0a:	b25b      	sxtb	r3, r3
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	da30      	bge.n	800df72 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800df10:	2300      	movs	r3, #0
 800df12:	647b      	str	r3, [r7, #68]	; 0x44
 800df14:	e01b      	b.n	800df4e <AES_CMAC_Final+0x6e>
 800df16:	f107 021c 	add.w	r2, r7, #28
 800df1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df1c:	4413      	add	r3, r2
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	b25a      	sxtb	r2, r3
 800df24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df26:	3301      	adds	r3, #1
 800df28:	3348      	adds	r3, #72	; 0x48
 800df2a:	443b      	add	r3, r7
 800df2c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800df30:	09db      	lsrs	r3, r3, #7
 800df32:	b2db      	uxtb	r3, r3
 800df34:	b25b      	sxtb	r3, r3
 800df36:	4313      	orrs	r3, r2
 800df38:	b25b      	sxtb	r3, r3
 800df3a:	b2d9      	uxtb	r1, r3
 800df3c:	f107 021c 	add.w	r2, r7, #28
 800df40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df42:	4413      	add	r3, r2
 800df44:	460a      	mov	r2, r1
 800df46:	701a      	strb	r2, [r3, #0]
 800df48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4a:	3301      	adds	r3, #1
 800df4c:	647b      	str	r3, [r7, #68]	; 0x44
 800df4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df50:	2b0e      	cmp	r3, #14
 800df52:	dde0      	ble.n	800df16 <AES_CMAC_Final+0x36>
 800df54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800df60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df64:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800df68:	43db      	mvns	r3, r3
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df70:	e027      	b.n	800dfc2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800df72:	2300      	movs	r3, #0
 800df74:	643b      	str	r3, [r7, #64]	; 0x40
 800df76:	e01b      	b.n	800dfb0 <AES_CMAC_Final+0xd0>
 800df78:	f107 021c 	add.w	r2, r7, #28
 800df7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df7e:	4413      	add	r3, r2
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	005b      	lsls	r3, r3, #1
 800df84:	b25a      	sxtb	r2, r3
 800df86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df88:	3301      	adds	r3, #1
 800df8a:	3348      	adds	r3, #72	; 0x48
 800df8c:	443b      	add	r3, r7
 800df8e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800df92:	09db      	lsrs	r3, r3, #7
 800df94:	b2db      	uxtb	r3, r3
 800df96:	b25b      	sxtb	r3, r3
 800df98:	4313      	orrs	r3, r2
 800df9a:	b25b      	sxtb	r3, r3
 800df9c:	b2d9      	uxtb	r1, r3
 800df9e:	f107 021c 	add.w	r2, r7, #28
 800dfa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfa4:	4413      	add	r3, r2
 800dfa6:	460a      	mov	r2, r1
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfac:	3301      	adds	r3, #1
 800dfae:	643b      	str	r3, [r7, #64]	; 0x40
 800dfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfb2:	2b0e      	cmp	r3, #14
 800dfb4:	dde0      	ble.n	800df78 <AES_CMAC_Final+0x98>
 800dfb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfba:	005b      	lsls	r3, r3, #1
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dfc8:	2b10      	cmp	r3, #16
 800dfca:	d11d      	bne.n	800e008 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dfcc:	2300      	movs	r3, #0
 800dfce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfd0:	e016      	b.n	800e000 <AES_CMAC_Final+0x120>
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	f107 011c 	add.w	r1, r7, #28
 800dfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe4:	440b      	add	r3, r1
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	4053      	eors	r3, r2
 800dfea:	b2d9      	uxtb	r1, r3
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	4413      	add	r3, r2
 800dff2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dff6:	460a      	mov	r2, r1
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffc:	3301      	adds	r3, #1
 800dffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e002:	2b0f      	cmp	r3, #15
 800e004:	dde5      	ble.n	800dfd2 <AES_CMAC_Final+0xf2>
 800e006:	e096      	b.n	800e136 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e008:	7f3b      	ldrb	r3, [r7, #28]
 800e00a:	b25b      	sxtb	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	da30      	bge.n	800e072 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e010:	2300      	movs	r3, #0
 800e012:	63bb      	str	r3, [r7, #56]	; 0x38
 800e014:	e01b      	b.n	800e04e <AES_CMAC_Final+0x16e>
 800e016:	f107 021c 	add.w	r2, r7, #28
 800e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01c:	4413      	add	r3, r2
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	b25a      	sxtb	r2, r3
 800e024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e026:	3301      	adds	r3, #1
 800e028:	3348      	adds	r3, #72	; 0x48
 800e02a:	443b      	add	r3, r7
 800e02c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e030:	09db      	lsrs	r3, r3, #7
 800e032:	b2db      	uxtb	r3, r3
 800e034:	b25b      	sxtb	r3, r3
 800e036:	4313      	orrs	r3, r2
 800e038:	b25b      	sxtb	r3, r3
 800e03a:	b2d9      	uxtb	r1, r3
 800e03c:	f107 021c 	add.w	r2, r7, #28
 800e040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e042:	4413      	add	r3, r2
 800e044:	460a      	mov	r2, r1
 800e046:	701a      	strb	r2, [r3, #0]
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	3301      	adds	r3, #1
 800e04c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e050:	2b0e      	cmp	r3, #14
 800e052:	dde0      	ble.n	800e016 <AES_CMAC_Final+0x136>
 800e054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e064:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e068:	43db      	mvns	r3, r3
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e070:	e027      	b.n	800e0c2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e072:	2300      	movs	r3, #0
 800e074:	637b      	str	r3, [r7, #52]	; 0x34
 800e076:	e01b      	b.n	800e0b0 <AES_CMAC_Final+0x1d0>
 800e078:	f107 021c 	add.w	r2, r7, #28
 800e07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e07e:	4413      	add	r3, r2
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	b25a      	sxtb	r2, r3
 800e086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e088:	3301      	adds	r3, #1
 800e08a:	3348      	adds	r3, #72	; 0x48
 800e08c:	443b      	add	r3, r7
 800e08e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e092:	09db      	lsrs	r3, r3, #7
 800e094:	b2db      	uxtb	r3, r3
 800e096:	b25b      	sxtb	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b25b      	sxtb	r3, r3
 800e09c:	b2d9      	uxtb	r1, r3
 800e09e:	f107 021c 	add.w	r2, r7, #28
 800e0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a4:	4413      	add	r3, r2
 800e0a6:	460a      	mov	r2, r1
 800e0a8:	701a      	strb	r2, [r3, #0]
 800e0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b2:	2b0e      	cmp	r3, #14
 800e0b4:	dde0      	ble.n	800e078 <AES_CMAC_Final+0x198>
 800e0b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0ba:	005b      	lsls	r3, r3, #1
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	2280      	movs	r2, #128	; 0x80
 800e0ce:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e0d2:	e007      	b.n	800e0e4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	4413      	add	r3, r2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0f8:	2b0f      	cmp	r3, #15
 800e0fa:	d9eb      	bls.n	800e0d4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	633b      	str	r3, [r7, #48]	; 0x30
 800e100:	e016      	b.n	800e130 <AES_CMAC_Final+0x250>
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	4413      	add	r3, r2
 800e108:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e10c:	781a      	ldrb	r2, [r3, #0]
 800e10e:	f107 011c 	add.w	r1, r7, #28
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	440b      	add	r3, r1
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	4053      	eors	r3, r2
 800e11a:	b2d9      	uxtb	r1, r3
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	4413      	add	r3, r2
 800e122:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e126:	460a      	mov	r2, r1
 800e128:	701a      	strb	r2, [r3, #0]
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	3301      	adds	r3, #1
 800e12e:	633b      	str	r3, [r7, #48]	; 0x30
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	2b0f      	cmp	r3, #15
 800e134:	dde5      	ble.n	800e102 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e136:	2300      	movs	r3, #0
 800e138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e13a:	e015      	b.n	800e168 <AES_CMAC_Final+0x288>
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e140:	4413      	add	r3, r2
 800e142:	33f1      	adds	r3, #241	; 0xf1
 800e144:	781a      	ldrb	r2, [r3, #0]
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	440b      	add	r3, r1
 800e14c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	4053      	eors	r3, r2
 800e154:	b2d9      	uxtb	r1, r3
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	4413      	add	r3, r2
 800e15c:	33f1      	adds	r3, #241	; 0xf1
 800e15e:	460a      	mov	r2, r1
 800e160:	701a      	strb	r2, [r3, #0]
 800e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e164:	3301      	adds	r3, #1
 800e166:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	2b0f      	cmp	r3, #15
 800e16c:	dde6      	ble.n	800e13c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e174:	f107 030c 	add.w	r3, r7, #12
 800e178:	2210      	movs	r2, #16
 800e17a:	4618      	mov	r0, r3
 800e17c:	f00b fe0b 	bl	8019d96 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e180:	683a      	ldr	r2, [r7, #0]
 800e182:	f107 030c 	add.w	r3, r7, #12
 800e186:	6879      	ldr	r1, [r7, #4]
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 fd1d 	bl	800ebc8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e18e:	f107 031c 	add.w	r3, r7, #28
 800e192:	2210      	movs	r2, #16
 800e194:	2100      	movs	r1, #0
 800e196:	4618      	mov	r0, r3
 800e198:	f00b fe38 	bl	8019e0c <memset1>
}
 800e19c:	bf00      	nop
 800e19e:	3748      	adds	r7, #72	; 0x48
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	781a      	ldrb	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	683a      	ldr	r2, [r7, #0]
 800e1bc:	7852      	ldrb	r2, [r2, #1]
 800e1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3302      	adds	r3, #2
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	7892      	ldrb	r2, [r2, #2]
 800e1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3303      	adds	r3, #3
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	78d2      	ldrb	r2, [r2, #3]
 800e1d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3304      	adds	r3, #4
 800e1d8:	683a      	ldr	r2, [r7, #0]
 800e1da:	7912      	ldrb	r2, [r2, #4]
 800e1dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3305      	adds	r3, #5
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	7952      	ldrb	r2, [r2, #5]
 800e1e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3306      	adds	r3, #6
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	7992      	ldrb	r2, [r2, #6]
 800e1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	3307      	adds	r3, #7
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	79d2      	ldrb	r2, [r2, #7]
 800e1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3308      	adds	r3, #8
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	7a12      	ldrb	r2, [r2, #8]
 800e204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	3309      	adds	r3, #9
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	7a52      	ldrb	r2, [r2, #9]
 800e20e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	330a      	adds	r3, #10
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	7a92      	ldrb	r2, [r2, #10]
 800e218:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	330b      	adds	r3, #11
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	7ad2      	ldrb	r2, [r2, #11]
 800e222:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	330c      	adds	r3, #12
 800e228:	683a      	ldr	r2, [r7, #0]
 800e22a:	7b12      	ldrb	r2, [r2, #12]
 800e22c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	330d      	adds	r3, #13
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	7b52      	ldrb	r2, [r2, #13]
 800e236:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	330e      	adds	r3, #14
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	7b92      	ldrb	r2, [r2, #14]
 800e240:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	330f      	adds	r3, #15
 800e246:	683a      	ldr	r2, [r7, #0]
 800e248:	7bd2      	ldrb	r2, [r2, #15]
 800e24a:	701a      	strb	r2, [r3, #0]
#endif
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	bc80      	pop	{r7}
 800e254:	4770      	bx	lr

0800e256 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e256:	b480      	push	{r7}
 800e258:	b085      	sub	sp, #20
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	4613      	mov	r3, r2
 800e262:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e264:	e007      	b.n	800e276 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	1c53      	adds	r3, r2, #1
 800e26a:	60bb      	str	r3, [r7, #8]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	1c59      	adds	r1, r3, #1
 800e270:	60f9      	str	r1, [r7, #12]
 800e272:	7812      	ldrb	r2, [r2, #0]
 800e274:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	1e5a      	subs	r2, r3, #1
 800e27a:	71fa      	strb	r2, [r7, #7]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1f2      	bne.n	800e266 <copy_block_nn+0x10>
}
 800e280:	bf00      	nop
 800e282:	bf00      	nop
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	bc80      	pop	{r7}
 800e28a:	4770      	bx	lr

0800e28c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	781a      	ldrb	r2, [r3, #0]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	4053      	eors	r3, r2
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	7819      	ldrb	r1, [r3, #0]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	781a      	ldrb	r2, [r3, #0]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	404a      	eors	r2, r1
 800e2b8:	b2d2      	uxtb	r2, r2
 800e2ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3302      	adds	r3, #2
 800e2c0:	7819      	ldrb	r1, [r3, #0]
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	3302      	adds	r3, #2
 800e2c6:	781a      	ldrb	r2, [r3, #0]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	3302      	adds	r3, #2
 800e2cc:	404a      	eors	r2, r1
 800e2ce:	b2d2      	uxtb	r2, r2
 800e2d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	3303      	adds	r3, #3
 800e2d6:	7819      	ldrb	r1, [r3, #0]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	3303      	adds	r3, #3
 800e2dc:	781a      	ldrb	r2, [r3, #0]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3303      	adds	r3, #3
 800e2e2:	404a      	eors	r2, r1
 800e2e4:	b2d2      	uxtb	r2, r2
 800e2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	7819      	ldrb	r1, [r3, #0]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	781a      	ldrb	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	404a      	eors	r2, r1
 800e2fa:	b2d2      	uxtb	r2, r2
 800e2fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3305      	adds	r3, #5
 800e302:	7819      	ldrb	r1, [r3, #0]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	3305      	adds	r3, #5
 800e308:	781a      	ldrb	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3305      	adds	r3, #5
 800e30e:	404a      	eors	r2, r1
 800e310:	b2d2      	uxtb	r2, r2
 800e312:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3306      	adds	r3, #6
 800e318:	7819      	ldrb	r1, [r3, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	3306      	adds	r3, #6
 800e31e:	781a      	ldrb	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3306      	adds	r3, #6
 800e324:	404a      	eors	r2, r1
 800e326:	b2d2      	uxtb	r2, r2
 800e328:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	3307      	adds	r3, #7
 800e32e:	7819      	ldrb	r1, [r3, #0]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	3307      	adds	r3, #7
 800e334:	781a      	ldrb	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3307      	adds	r3, #7
 800e33a:	404a      	eors	r2, r1
 800e33c:	b2d2      	uxtb	r2, r2
 800e33e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3308      	adds	r3, #8
 800e344:	7819      	ldrb	r1, [r3, #0]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	3308      	adds	r3, #8
 800e34a:	781a      	ldrb	r2, [r3, #0]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3308      	adds	r3, #8
 800e350:	404a      	eors	r2, r1
 800e352:	b2d2      	uxtb	r2, r2
 800e354:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3309      	adds	r3, #9
 800e35a:	7819      	ldrb	r1, [r3, #0]
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	3309      	adds	r3, #9
 800e360:	781a      	ldrb	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	3309      	adds	r3, #9
 800e366:	404a      	eors	r2, r1
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	330a      	adds	r3, #10
 800e370:	7819      	ldrb	r1, [r3, #0]
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	330a      	adds	r3, #10
 800e376:	781a      	ldrb	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	330a      	adds	r3, #10
 800e37c:	404a      	eors	r2, r1
 800e37e:	b2d2      	uxtb	r2, r2
 800e380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	330b      	adds	r3, #11
 800e386:	7819      	ldrb	r1, [r3, #0]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	330b      	adds	r3, #11
 800e38c:	781a      	ldrb	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	330b      	adds	r3, #11
 800e392:	404a      	eors	r2, r1
 800e394:	b2d2      	uxtb	r2, r2
 800e396:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	330c      	adds	r3, #12
 800e39c:	7819      	ldrb	r1, [r3, #0]
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	330c      	adds	r3, #12
 800e3a2:	781a      	ldrb	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	330c      	adds	r3, #12
 800e3a8:	404a      	eors	r2, r1
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	330d      	adds	r3, #13
 800e3b2:	7819      	ldrb	r1, [r3, #0]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	330d      	adds	r3, #13
 800e3b8:	781a      	ldrb	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	330d      	adds	r3, #13
 800e3be:	404a      	eors	r2, r1
 800e3c0:	b2d2      	uxtb	r2, r2
 800e3c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	330e      	adds	r3, #14
 800e3c8:	7819      	ldrb	r1, [r3, #0]
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	330e      	adds	r3, #14
 800e3ce:	781a      	ldrb	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	330e      	adds	r3, #14
 800e3d4:	404a      	eors	r2, r1
 800e3d6:	b2d2      	uxtb	r2, r2
 800e3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	330f      	adds	r3, #15
 800e3de:	7819      	ldrb	r1, [r3, #0]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	330f      	adds	r3, #15
 800e3e4:	781a      	ldrb	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	330f      	adds	r3, #15
 800e3ea:	404a      	eors	r2, r1
 800e3ec:	b2d2      	uxtb	r2, r2
 800e3ee:	701a      	strb	r2, [r3, #0]
#endif
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bc80      	pop	{r7}
 800e3f8:	4770      	bx	lr

0800e3fa <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b085      	sub	sp, #20
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	60f8      	str	r0, [r7, #12]
 800e402:	60b9      	str	r1, [r7, #8]
 800e404:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	781a      	ldrb	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	4053      	eors	r3, r2
 800e410:	b2da      	uxtb	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	3301      	adds	r3, #1
 800e41a:	7819      	ldrb	r1, [r3, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3301      	adds	r3, #1
 800e420:	781a      	ldrb	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3301      	adds	r3, #1
 800e426:	404a      	eors	r2, r1
 800e428:	b2d2      	uxtb	r2, r2
 800e42a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	3302      	adds	r3, #2
 800e430:	7819      	ldrb	r1, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	3302      	adds	r3, #2
 800e436:	781a      	ldrb	r2, [r3, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3302      	adds	r3, #2
 800e43c:	404a      	eors	r2, r1
 800e43e:	b2d2      	uxtb	r2, r2
 800e440:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3303      	adds	r3, #3
 800e446:	7819      	ldrb	r1, [r3, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3303      	adds	r3, #3
 800e44c:	781a      	ldrb	r2, [r3, #0]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	3303      	adds	r3, #3
 800e452:	404a      	eors	r2, r1
 800e454:	b2d2      	uxtb	r2, r2
 800e456:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	3304      	adds	r3, #4
 800e45c:	7819      	ldrb	r1, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3304      	adds	r3, #4
 800e462:	781a      	ldrb	r2, [r3, #0]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	3304      	adds	r3, #4
 800e468:	404a      	eors	r2, r1
 800e46a:	b2d2      	uxtb	r2, r2
 800e46c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	3305      	adds	r3, #5
 800e472:	7819      	ldrb	r1, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3305      	adds	r3, #5
 800e478:	781a      	ldrb	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3305      	adds	r3, #5
 800e47e:	404a      	eors	r2, r1
 800e480:	b2d2      	uxtb	r2, r2
 800e482:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	3306      	adds	r3, #6
 800e488:	7819      	ldrb	r1, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3306      	adds	r3, #6
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3306      	adds	r3, #6
 800e494:	404a      	eors	r2, r1
 800e496:	b2d2      	uxtb	r2, r2
 800e498:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	3307      	adds	r3, #7
 800e49e:	7819      	ldrb	r1, [r3, #0]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3307      	adds	r3, #7
 800e4a4:	781a      	ldrb	r2, [r3, #0]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3307      	adds	r3, #7
 800e4aa:	404a      	eors	r2, r1
 800e4ac:	b2d2      	uxtb	r2, r2
 800e4ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	3308      	adds	r3, #8
 800e4b4:	7819      	ldrb	r1, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	3308      	adds	r3, #8
 800e4ba:	781a      	ldrb	r2, [r3, #0]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	404a      	eors	r2, r1
 800e4c2:	b2d2      	uxtb	r2, r2
 800e4c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	3309      	adds	r3, #9
 800e4ca:	7819      	ldrb	r1, [r3, #0]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	3309      	adds	r3, #9
 800e4d0:	781a      	ldrb	r2, [r3, #0]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3309      	adds	r3, #9
 800e4d6:	404a      	eors	r2, r1
 800e4d8:	b2d2      	uxtb	r2, r2
 800e4da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	330a      	adds	r3, #10
 800e4e0:	7819      	ldrb	r1, [r3, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	330a      	adds	r3, #10
 800e4e6:	781a      	ldrb	r2, [r3, #0]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	330a      	adds	r3, #10
 800e4ec:	404a      	eors	r2, r1
 800e4ee:	b2d2      	uxtb	r2, r2
 800e4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	330b      	adds	r3, #11
 800e4f6:	7819      	ldrb	r1, [r3, #0]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	330b      	adds	r3, #11
 800e4fc:	781a      	ldrb	r2, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	330b      	adds	r3, #11
 800e502:	404a      	eors	r2, r1
 800e504:	b2d2      	uxtb	r2, r2
 800e506:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	330c      	adds	r3, #12
 800e50c:	7819      	ldrb	r1, [r3, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	330c      	adds	r3, #12
 800e512:	781a      	ldrb	r2, [r3, #0]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	330c      	adds	r3, #12
 800e518:	404a      	eors	r2, r1
 800e51a:	b2d2      	uxtb	r2, r2
 800e51c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	330d      	adds	r3, #13
 800e522:	7819      	ldrb	r1, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	330d      	adds	r3, #13
 800e528:	781a      	ldrb	r2, [r3, #0]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	330d      	adds	r3, #13
 800e52e:	404a      	eors	r2, r1
 800e530:	b2d2      	uxtb	r2, r2
 800e532:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	330e      	adds	r3, #14
 800e538:	7819      	ldrb	r1, [r3, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	330e      	adds	r3, #14
 800e53e:	781a      	ldrb	r2, [r3, #0]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	330e      	adds	r3, #14
 800e544:	404a      	eors	r2, r1
 800e546:	b2d2      	uxtb	r2, r2
 800e548:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	330f      	adds	r3, #15
 800e54e:	7819      	ldrb	r1, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	330f      	adds	r3, #15
 800e554:	781a      	ldrb	r2, [r3, #0]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	330f      	adds	r3, #15
 800e55a:	404a      	eors	r2, r1
 800e55c:	b2d2      	uxtb	r2, r2
 800e55e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e560:	bf00      	nop
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	bc80      	pop	{r7}
 800e568:	4770      	bx	lr

0800e56a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b082      	sub	sp, #8
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e574:	6839      	ldr	r1, [r7, #0]
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f7ff fe88 	bl	800e28c <xor_block>
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	461a      	mov	r2, r3
 800e592:	4b48      	ldr	r3, [pc, #288]	; (800e6b4 <shift_sub_rows+0x130>)
 800e594:	5c9a      	ldrb	r2, [r3, r2]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	701a      	strb	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3304      	adds	r3, #4
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4a43      	ldr	r2, [pc, #268]	; (800e6b4 <shift_sub_rows+0x130>)
 800e5a8:	5c52      	ldrb	r2, [r2, r1]
 800e5aa:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	4a3e      	ldr	r2, [pc, #248]	; (800e6b4 <shift_sub_rows+0x130>)
 800e5ba:	5c52      	ldrb	r2, [r2, r1]
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	330c      	adds	r3, #12
 800e5ca:	4a3a      	ldr	r2, [pc, #232]	; (800e6b4 <shift_sub_rows+0x130>)
 800e5cc:	5c52      	ldrb	r2, [r2, r1]
 800e5ce:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	785b      	ldrb	r3, [r3, #1]
 800e5d4:	73fb      	strb	r3, [r7, #15]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	3305      	adds	r3, #5
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	4a34      	ldr	r2, [pc, #208]	; (800e6b4 <shift_sub_rows+0x130>)
 800e5e4:	5c52      	ldrb	r2, [r2, r1]
 800e5e6:	701a      	strb	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3309      	adds	r3, #9
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	3305      	adds	r3, #5
 800e5f4:	4a2f      	ldr	r2, [pc, #188]	; (800e6b4 <shift_sub_rows+0x130>)
 800e5f6:	5c52      	ldrb	r2, [r2, r1]
 800e5f8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	330d      	adds	r3, #13
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	4619      	mov	r1, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3309      	adds	r3, #9
 800e606:	4a2b      	ldr	r2, [pc, #172]	; (800e6b4 <shift_sub_rows+0x130>)
 800e608:	5c52      	ldrb	r2, [r2, r1]
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	7bfa      	ldrb	r2, [r7, #15]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	330d      	adds	r3, #13
 800e612:	4928      	ldr	r1, [pc, #160]	; (800e6b4 <shift_sub_rows+0x130>)
 800e614:	5c8a      	ldrb	r2, [r1, r2]
 800e616:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	789b      	ldrb	r3, [r3, #2]
 800e61c:	73fb      	strb	r3, [r7, #15]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	330a      	adds	r3, #10
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	4619      	mov	r1, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3302      	adds	r3, #2
 800e62a:	4a22      	ldr	r2, [pc, #136]	; (800e6b4 <shift_sub_rows+0x130>)
 800e62c:	5c52      	ldrb	r2, [r2, r1]
 800e62e:	701a      	strb	r2, [r3, #0]
 800e630:	7bfa      	ldrb	r2, [r7, #15]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	330a      	adds	r3, #10
 800e636:	491f      	ldr	r1, [pc, #124]	; (800e6b4 <shift_sub_rows+0x130>)
 800e638:	5c8a      	ldrb	r2, [r1, r2]
 800e63a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	799b      	ldrb	r3, [r3, #6]
 800e640:	73fb      	strb	r3, [r7, #15]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	330e      	adds	r3, #14
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	4619      	mov	r1, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	3306      	adds	r3, #6
 800e64e:	4a19      	ldr	r2, [pc, #100]	; (800e6b4 <shift_sub_rows+0x130>)
 800e650:	5c52      	ldrb	r2, [r2, r1]
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	7bfa      	ldrb	r2, [r7, #15]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	330e      	adds	r3, #14
 800e65a:	4916      	ldr	r1, [pc, #88]	; (800e6b4 <shift_sub_rows+0x130>)
 800e65c:	5c8a      	ldrb	r2, [r1, r2]
 800e65e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7bdb      	ldrb	r3, [r3, #15]
 800e664:	73fb      	strb	r3, [r7, #15]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	330b      	adds	r3, #11
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	4619      	mov	r1, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	330f      	adds	r3, #15
 800e672:	4a10      	ldr	r2, [pc, #64]	; (800e6b4 <shift_sub_rows+0x130>)
 800e674:	5c52      	ldrb	r2, [r2, r1]
 800e676:	701a      	strb	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	3307      	adds	r3, #7
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	4619      	mov	r1, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	330b      	adds	r3, #11
 800e684:	4a0b      	ldr	r2, [pc, #44]	; (800e6b4 <shift_sub_rows+0x130>)
 800e686:	5c52      	ldrb	r2, [r2, r1]
 800e688:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3303      	adds	r3, #3
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	4619      	mov	r1, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3307      	adds	r3, #7
 800e696:	4a07      	ldr	r2, [pc, #28]	; (800e6b4 <shift_sub_rows+0x130>)
 800e698:	5c52      	ldrb	r2, [r2, r1]
 800e69a:	701a      	strb	r2, [r3, #0]
 800e69c:	7bfa      	ldrb	r2, [r7, #15]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3303      	adds	r3, #3
 800e6a2:	4904      	ldr	r1, [pc, #16]	; (800e6b4 <shift_sub_rows+0x130>)
 800e6a4:	5c8a      	ldrb	r2, [r1, r2]
 800e6a6:	701a      	strb	r2, [r3, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	3714      	adds	r7, #20
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bc80      	pop	{r7}
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	0801f5c0 	.word	0x0801f5c0

0800e6b8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e6c0:	f107 0308 	add.w	r3, r7, #8
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff fd6c 	bl	800e1a4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e6cc:	7a3b      	ldrb	r3, [r7, #8]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4b9a      	ldr	r3, [pc, #616]	; (800e93c <mix_sub_columns+0x284>)
 800e6d2:	5c9a      	ldrb	r2, [r3, r2]
 800e6d4:	7b7b      	ldrb	r3, [r7, #13]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4b99      	ldr	r3, [pc, #612]	; (800e940 <mix_sub_columns+0x288>)
 800e6da:	5c5b      	ldrb	r3, [r3, r1]
 800e6dc:	4053      	eors	r3, r2
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	7cbb      	ldrb	r3, [r7, #18]
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4b97      	ldr	r3, [pc, #604]	; (800e944 <mix_sub_columns+0x28c>)
 800e6e6:	5c5b      	ldrb	r3, [r3, r1]
 800e6e8:	4053      	eors	r3, r2
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	7dfb      	ldrb	r3, [r7, #23]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4b94      	ldr	r3, [pc, #592]	; (800e944 <mix_sub_columns+0x28c>)
 800e6f2:	5c5b      	ldrb	r3, [r3, r1]
 800e6f4:	4053      	eors	r3, r2
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e6fc:	7a3b      	ldrb	r3, [r7, #8]
 800e6fe:	461a      	mov	r2, r3
 800e700:	4b90      	ldr	r3, [pc, #576]	; (800e944 <mix_sub_columns+0x28c>)
 800e702:	5c9a      	ldrb	r2, [r3, r2]
 800e704:	7b7b      	ldrb	r3, [r7, #13]
 800e706:	4619      	mov	r1, r3
 800e708:	4b8c      	ldr	r3, [pc, #560]	; (800e93c <mix_sub_columns+0x284>)
 800e70a:	5c5b      	ldrb	r3, [r3, r1]
 800e70c:	4053      	eors	r3, r2
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	7cbb      	ldrb	r3, [r7, #18]
 800e712:	4619      	mov	r1, r3
 800e714:	4b8a      	ldr	r3, [pc, #552]	; (800e940 <mix_sub_columns+0x288>)
 800e716:	5c5b      	ldrb	r3, [r3, r1]
 800e718:	4053      	eors	r3, r2
 800e71a:	b2d9      	uxtb	r1, r3
 800e71c:	7dfb      	ldrb	r3, [r7, #23]
 800e71e:	461a      	mov	r2, r3
 800e720:	4b88      	ldr	r3, [pc, #544]	; (800e944 <mix_sub_columns+0x28c>)
 800e722:	5c9a      	ldrb	r2, [r3, r2]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	3301      	adds	r3, #1
 800e728:	404a      	eors	r2, r1
 800e72a:	b2d2      	uxtb	r2, r2
 800e72c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e72e:	7a3b      	ldrb	r3, [r7, #8]
 800e730:	461a      	mov	r2, r3
 800e732:	4b84      	ldr	r3, [pc, #528]	; (800e944 <mix_sub_columns+0x28c>)
 800e734:	5c9a      	ldrb	r2, [r3, r2]
 800e736:	7b7b      	ldrb	r3, [r7, #13]
 800e738:	4619      	mov	r1, r3
 800e73a:	4b82      	ldr	r3, [pc, #520]	; (800e944 <mix_sub_columns+0x28c>)
 800e73c:	5c5b      	ldrb	r3, [r3, r1]
 800e73e:	4053      	eors	r3, r2
 800e740:	b2da      	uxtb	r2, r3
 800e742:	7cbb      	ldrb	r3, [r7, #18]
 800e744:	4619      	mov	r1, r3
 800e746:	4b7d      	ldr	r3, [pc, #500]	; (800e93c <mix_sub_columns+0x284>)
 800e748:	5c5b      	ldrb	r3, [r3, r1]
 800e74a:	4053      	eors	r3, r2
 800e74c:	b2d9      	uxtb	r1, r3
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	461a      	mov	r2, r3
 800e752:	4b7b      	ldr	r3, [pc, #492]	; (800e940 <mix_sub_columns+0x288>)
 800e754:	5c9a      	ldrb	r2, [r3, r2]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3302      	adds	r3, #2
 800e75a:	404a      	eors	r2, r1
 800e75c:	b2d2      	uxtb	r2, r2
 800e75e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e760:	7a3b      	ldrb	r3, [r7, #8]
 800e762:	461a      	mov	r2, r3
 800e764:	4b76      	ldr	r3, [pc, #472]	; (800e940 <mix_sub_columns+0x288>)
 800e766:	5c9a      	ldrb	r2, [r3, r2]
 800e768:	7b7b      	ldrb	r3, [r7, #13]
 800e76a:	4619      	mov	r1, r3
 800e76c:	4b75      	ldr	r3, [pc, #468]	; (800e944 <mix_sub_columns+0x28c>)
 800e76e:	5c5b      	ldrb	r3, [r3, r1]
 800e770:	4053      	eors	r3, r2
 800e772:	b2da      	uxtb	r2, r3
 800e774:	7cbb      	ldrb	r3, [r7, #18]
 800e776:	4619      	mov	r1, r3
 800e778:	4b72      	ldr	r3, [pc, #456]	; (800e944 <mix_sub_columns+0x28c>)
 800e77a:	5c5b      	ldrb	r3, [r3, r1]
 800e77c:	4053      	eors	r3, r2
 800e77e:	b2d9      	uxtb	r1, r3
 800e780:	7dfb      	ldrb	r3, [r7, #23]
 800e782:	461a      	mov	r2, r3
 800e784:	4b6d      	ldr	r3, [pc, #436]	; (800e93c <mix_sub_columns+0x284>)
 800e786:	5c9a      	ldrb	r2, [r3, r2]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3303      	adds	r3, #3
 800e78c:	404a      	eors	r2, r1
 800e78e:	b2d2      	uxtb	r2, r2
 800e790:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e792:	7b3b      	ldrb	r3, [r7, #12]
 800e794:	461a      	mov	r2, r3
 800e796:	4b69      	ldr	r3, [pc, #420]	; (800e93c <mix_sub_columns+0x284>)
 800e798:	5c9a      	ldrb	r2, [r3, r2]
 800e79a:	7c7b      	ldrb	r3, [r7, #17]
 800e79c:	4619      	mov	r1, r3
 800e79e:	4b68      	ldr	r3, [pc, #416]	; (800e940 <mix_sub_columns+0x288>)
 800e7a0:	5c5b      	ldrb	r3, [r3, r1]
 800e7a2:	4053      	eors	r3, r2
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	7dbb      	ldrb	r3, [r7, #22]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	4b66      	ldr	r3, [pc, #408]	; (800e944 <mix_sub_columns+0x28c>)
 800e7ac:	5c5b      	ldrb	r3, [r3, r1]
 800e7ae:	4053      	eors	r3, r2
 800e7b0:	b2d9      	uxtb	r1, r3
 800e7b2:	7afb      	ldrb	r3, [r7, #11]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	4b63      	ldr	r3, [pc, #396]	; (800e944 <mix_sub_columns+0x28c>)
 800e7b8:	5c9a      	ldrb	r2, [r3, r2]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	404a      	eors	r2, r1
 800e7c0:	b2d2      	uxtb	r2, r2
 800e7c2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e7c4:	7b3b      	ldrb	r3, [r7, #12]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	4b5e      	ldr	r3, [pc, #376]	; (800e944 <mix_sub_columns+0x28c>)
 800e7ca:	5c9a      	ldrb	r2, [r3, r2]
 800e7cc:	7c7b      	ldrb	r3, [r7, #17]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	4b5a      	ldr	r3, [pc, #360]	; (800e93c <mix_sub_columns+0x284>)
 800e7d2:	5c5b      	ldrb	r3, [r3, r1]
 800e7d4:	4053      	eors	r3, r2
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	7dbb      	ldrb	r3, [r7, #22]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4b58      	ldr	r3, [pc, #352]	; (800e940 <mix_sub_columns+0x288>)
 800e7de:	5c5b      	ldrb	r3, [r3, r1]
 800e7e0:	4053      	eors	r3, r2
 800e7e2:	b2d9      	uxtb	r1, r3
 800e7e4:	7afb      	ldrb	r3, [r7, #11]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	4b56      	ldr	r3, [pc, #344]	; (800e944 <mix_sub_columns+0x28c>)
 800e7ea:	5c9a      	ldrb	r2, [r3, r2]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3305      	adds	r3, #5
 800e7f0:	404a      	eors	r2, r1
 800e7f2:	b2d2      	uxtb	r2, r2
 800e7f4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e7f6:	7b3b      	ldrb	r3, [r7, #12]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	4b52      	ldr	r3, [pc, #328]	; (800e944 <mix_sub_columns+0x28c>)
 800e7fc:	5c9a      	ldrb	r2, [r3, r2]
 800e7fe:	7c7b      	ldrb	r3, [r7, #17]
 800e800:	4619      	mov	r1, r3
 800e802:	4b50      	ldr	r3, [pc, #320]	; (800e944 <mix_sub_columns+0x28c>)
 800e804:	5c5b      	ldrb	r3, [r3, r1]
 800e806:	4053      	eors	r3, r2
 800e808:	b2da      	uxtb	r2, r3
 800e80a:	7dbb      	ldrb	r3, [r7, #22]
 800e80c:	4619      	mov	r1, r3
 800e80e:	4b4b      	ldr	r3, [pc, #300]	; (800e93c <mix_sub_columns+0x284>)
 800e810:	5c5b      	ldrb	r3, [r3, r1]
 800e812:	4053      	eors	r3, r2
 800e814:	b2d9      	uxtb	r1, r3
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	461a      	mov	r2, r3
 800e81a:	4b49      	ldr	r3, [pc, #292]	; (800e940 <mix_sub_columns+0x288>)
 800e81c:	5c9a      	ldrb	r2, [r3, r2]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3306      	adds	r3, #6
 800e822:	404a      	eors	r2, r1
 800e824:	b2d2      	uxtb	r2, r2
 800e826:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e828:	7b3b      	ldrb	r3, [r7, #12]
 800e82a:	461a      	mov	r2, r3
 800e82c:	4b44      	ldr	r3, [pc, #272]	; (800e940 <mix_sub_columns+0x288>)
 800e82e:	5c9a      	ldrb	r2, [r3, r2]
 800e830:	7c7b      	ldrb	r3, [r7, #17]
 800e832:	4619      	mov	r1, r3
 800e834:	4b43      	ldr	r3, [pc, #268]	; (800e944 <mix_sub_columns+0x28c>)
 800e836:	5c5b      	ldrb	r3, [r3, r1]
 800e838:	4053      	eors	r3, r2
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	7dbb      	ldrb	r3, [r7, #22]
 800e83e:	4619      	mov	r1, r3
 800e840:	4b40      	ldr	r3, [pc, #256]	; (800e944 <mix_sub_columns+0x28c>)
 800e842:	5c5b      	ldrb	r3, [r3, r1]
 800e844:	4053      	eors	r3, r2
 800e846:	b2d9      	uxtb	r1, r3
 800e848:	7afb      	ldrb	r3, [r7, #11]
 800e84a:	461a      	mov	r2, r3
 800e84c:	4b3b      	ldr	r3, [pc, #236]	; (800e93c <mix_sub_columns+0x284>)
 800e84e:	5c9a      	ldrb	r2, [r3, r2]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3307      	adds	r3, #7
 800e854:	404a      	eors	r2, r1
 800e856:	b2d2      	uxtb	r2, r2
 800e858:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e85a:	7c3b      	ldrb	r3, [r7, #16]
 800e85c:	461a      	mov	r2, r3
 800e85e:	4b37      	ldr	r3, [pc, #220]	; (800e93c <mix_sub_columns+0x284>)
 800e860:	5c9a      	ldrb	r2, [r3, r2]
 800e862:	7d7b      	ldrb	r3, [r7, #21]
 800e864:	4619      	mov	r1, r3
 800e866:	4b36      	ldr	r3, [pc, #216]	; (800e940 <mix_sub_columns+0x288>)
 800e868:	5c5b      	ldrb	r3, [r3, r1]
 800e86a:	4053      	eors	r3, r2
 800e86c:	b2da      	uxtb	r2, r3
 800e86e:	7abb      	ldrb	r3, [r7, #10]
 800e870:	4619      	mov	r1, r3
 800e872:	4b34      	ldr	r3, [pc, #208]	; (800e944 <mix_sub_columns+0x28c>)
 800e874:	5c5b      	ldrb	r3, [r3, r1]
 800e876:	4053      	eors	r3, r2
 800e878:	b2d9      	uxtb	r1, r3
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	461a      	mov	r2, r3
 800e87e:	4b31      	ldr	r3, [pc, #196]	; (800e944 <mix_sub_columns+0x28c>)
 800e880:	5c9a      	ldrb	r2, [r3, r2]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	3308      	adds	r3, #8
 800e886:	404a      	eors	r2, r1
 800e888:	b2d2      	uxtb	r2, r2
 800e88a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e88c:	7c3b      	ldrb	r3, [r7, #16]
 800e88e:	461a      	mov	r2, r3
 800e890:	4b2c      	ldr	r3, [pc, #176]	; (800e944 <mix_sub_columns+0x28c>)
 800e892:	5c9a      	ldrb	r2, [r3, r2]
 800e894:	7d7b      	ldrb	r3, [r7, #21]
 800e896:	4619      	mov	r1, r3
 800e898:	4b28      	ldr	r3, [pc, #160]	; (800e93c <mix_sub_columns+0x284>)
 800e89a:	5c5b      	ldrb	r3, [r3, r1]
 800e89c:	4053      	eors	r3, r2
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	7abb      	ldrb	r3, [r7, #10]
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4b26      	ldr	r3, [pc, #152]	; (800e940 <mix_sub_columns+0x288>)
 800e8a6:	5c5b      	ldrb	r3, [r3, r1]
 800e8a8:	4053      	eors	r3, r2
 800e8aa:	b2d9      	uxtb	r1, r3
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	4b24      	ldr	r3, [pc, #144]	; (800e944 <mix_sub_columns+0x28c>)
 800e8b2:	5c9a      	ldrb	r2, [r3, r2]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3309      	adds	r3, #9
 800e8b8:	404a      	eors	r2, r1
 800e8ba:	b2d2      	uxtb	r2, r2
 800e8bc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e8be:	7c3b      	ldrb	r3, [r7, #16]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4b20      	ldr	r3, [pc, #128]	; (800e944 <mix_sub_columns+0x28c>)
 800e8c4:	5c9a      	ldrb	r2, [r3, r2]
 800e8c6:	7d7b      	ldrb	r3, [r7, #21]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	4b1e      	ldr	r3, [pc, #120]	; (800e944 <mix_sub_columns+0x28c>)
 800e8cc:	5c5b      	ldrb	r3, [r3, r1]
 800e8ce:	4053      	eors	r3, r2
 800e8d0:	b2da      	uxtb	r2, r3
 800e8d2:	7abb      	ldrb	r3, [r7, #10]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	4b19      	ldr	r3, [pc, #100]	; (800e93c <mix_sub_columns+0x284>)
 800e8d8:	5c5b      	ldrb	r3, [r3, r1]
 800e8da:	4053      	eors	r3, r2
 800e8dc:	b2d9      	uxtb	r1, r3
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	4b17      	ldr	r3, [pc, #92]	; (800e940 <mix_sub_columns+0x288>)
 800e8e4:	5c9a      	ldrb	r2, [r3, r2]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	330a      	adds	r3, #10
 800e8ea:	404a      	eors	r2, r1
 800e8ec:	b2d2      	uxtb	r2, r2
 800e8ee:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e8f0:	7c3b      	ldrb	r3, [r7, #16]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	4b12      	ldr	r3, [pc, #72]	; (800e940 <mix_sub_columns+0x288>)
 800e8f6:	5c9a      	ldrb	r2, [r3, r2]
 800e8f8:	7d7b      	ldrb	r3, [r7, #21]
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	4b11      	ldr	r3, [pc, #68]	; (800e944 <mix_sub_columns+0x28c>)
 800e8fe:	5c5b      	ldrb	r3, [r3, r1]
 800e900:	4053      	eors	r3, r2
 800e902:	b2da      	uxtb	r2, r3
 800e904:	7abb      	ldrb	r3, [r7, #10]
 800e906:	4619      	mov	r1, r3
 800e908:	4b0e      	ldr	r3, [pc, #56]	; (800e944 <mix_sub_columns+0x28c>)
 800e90a:	5c5b      	ldrb	r3, [r3, r1]
 800e90c:	4053      	eors	r3, r2
 800e90e:	b2d9      	uxtb	r1, r3
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	461a      	mov	r2, r3
 800e914:	4b09      	ldr	r3, [pc, #36]	; (800e93c <mix_sub_columns+0x284>)
 800e916:	5c9a      	ldrb	r2, [r3, r2]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	330b      	adds	r3, #11
 800e91c:	404a      	eors	r2, r1
 800e91e:	b2d2      	uxtb	r2, r2
 800e920:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e922:	7d3b      	ldrb	r3, [r7, #20]
 800e924:	461a      	mov	r2, r3
 800e926:	4b05      	ldr	r3, [pc, #20]	; (800e93c <mix_sub_columns+0x284>)
 800e928:	5c9a      	ldrb	r2, [r3, r2]
 800e92a:	7a7b      	ldrb	r3, [r7, #9]
 800e92c:	4619      	mov	r1, r3
 800e92e:	4b04      	ldr	r3, [pc, #16]	; (800e940 <mix_sub_columns+0x288>)
 800e930:	5c5b      	ldrb	r3, [r3, r1]
 800e932:	4053      	eors	r3, r2
 800e934:	b2da      	uxtb	r2, r3
 800e936:	7bbb      	ldrb	r3, [r7, #14]
 800e938:	4619      	mov	r1, r3
 800e93a:	e005      	b.n	800e948 <mix_sub_columns+0x290>
 800e93c:	0801f6c0 	.word	0x0801f6c0
 800e940:	0801f7c0 	.word	0x0801f7c0
 800e944:	0801f5c0 	.word	0x0801f5c0
 800e948:	4b2d      	ldr	r3, [pc, #180]	; (800ea00 <mix_sub_columns+0x348>)
 800e94a:	5c5b      	ldrb	r3, [r3, r1]
 800e94c:	4053      	eors	r3, r2
 800e94e:	b2d9      	uxtb	r1, r3
 800e950:	7cfb      	ldrb	r3, [r7, #19]
 800e952:	461a      	mov	r2, r3
 800e954:	4b2a      	ldr	r3, [pc, #168]	; (800ea00 <mix_sub_columns+0x348>)
 800e956:	5c9a      	ldrb	r2, [r3, r2]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	330c      	adds	r3, #12
 800e95c:	404a      	eors	r2, r1
 800e95e:	b2d2      	uxtb	r2, r2
 800e960:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e962:	7d3b      	ldrb	r3, [r7, #20]
 800e964:	461a      	mov	r2, r3
 800e966:	4b26      	ldr	r3, [pc, #152]	; (800ea00 <mix_sub_columns+0x348>)
 800e968:	5c9a      	ldrb	r2, [r3, r2]
 800e96a:	7a7b      	ldrb	r3, [r7, #9]
 800e96c:	4619      	mov	r1, r3
 800e96e:	4b25      	ldr	r3, [pc, #148]	; (800ea04 <mix_sub_columns+0x34c>)
 800e970:	5c5b      	ldrb	r3, [r3, r1]
 800e972:	4053      	eors	r3, r2
 800e974:	b2da      	uxtb	r2, r3
 800e976:	7bbb      	ldrb	r3, [r7, #14]
 800e978:	4619      	mov	r1, r3
 800e97a:	4b23      	ldr	r3, [pc, #140]	; (800ea08 <mix_sub_columns+0x350>)
 800e97c:	5c5b      	ldrb	r3, [r3, r1]
 800e97e:	4053      	eors	r3, r2
 800e980:	b2d9      	uxtb	r1, r3
 800e982:	7cfb      	ldrb	r3, [r7, #19]
 800e984:	461a      	mov	r2, r3
 800e986:	4b1e      	ldr	r3, [pc, #120]	; (800ea00 <mix_sub_columns+0x348>)
 800e988:	5c9a      	ldrb	r2, [r3, r2]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	330d      	adds	r3, #13
 800e98e:	404a      	eors	r2, r1
 800e990:	b2d2      	uxtb	r2, r2
 800e992:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e994:	7d3b      	ldrb	r3, [r7, #20]
 800e996:	461a      	mov	r2, r3
 800e998:	4b19      	ldr	r3, [pc, #100]	; (800ea00 <mix_sub_columns+0x348>)
 800e99a:	5c9a      	ldrb	r2, [r3, r2]
 800e99c:	7a7b      	ldrb	r3, [r7, #9]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	4b17      	ldr	r3, [pc, #92]	; (800ea00 <mix_sub_columns+0x348>)
 800e9a2:	5c5b      	ldrb	r3, [r3, r1]
 800e9a4:	4053      	eors	r3, r2
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	7bbb      	ldrb	r3, [r7, #14]
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	4b15      	ldr	r3, [pc, #84]	; (800ea04 <mix_sub_columns+0x34c>)
 800e9ae:	5c5b      	ldrb	r3, [r3, r1]
 800e9b0:	4053      	eors	r3, r2
 800e9b2:	b2d9      	uxtb	r1, r3
 800e9b4:	7cfb      	ldrb	r3, [r7, #19]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	4b13      	ldr	r3, [pc, #76]	; (800ea08 <mix_sub_columns+0x350>)
 800e9ba:	5c9a      	ldrb	r2, [r3, r2]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	330e      	adds	r3, #14
 800e9c0:	404a      	eors	r2, r1
 800e9c2:	b2d2      	uxtb	r2, r2
 800e9c4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e9c6:	7d3b      	ldrb	r3, [r7, #20]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <mix_sub_columns+0x350>)
 800e9cc:	5c9a      	ldrb	r2, [r3, r2]
 800e9ce:	7a7b      	ldrb	r3, [r7, #9]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4b0b      	ldr	r3, [pc, #44]	; (800ea00 <mix_sub_columns+0x348>)
 800e9d4:	5c5b      	ldrb	r3, [r3, r1]
 800e9d6:	4053      	eors	r3, r2
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	7bbb      	ldrb	r3, [r7, #14]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	4b08      	ldr	r3, [pc, #32]	; (800ea00 <mix_sub_columns+0x348>)
 800e9e0:	5c5b      	ldrb	r3, [r3, r1]
 800e9e2:	4053      	eors	r3, r2
 800e9e4:	b2d9      	uxtb	r1, r3
 800e9e6:	7cfb      	ldrb	r3, [r7, #19]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <mix_sub_columns+0x34c>)
 800e9ec:	5c9a      	ldrb	r2, [r3, r2]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	330f      	adds	r3, #15
 800e9f2:	404a      	eors	r2, r1
 800e9f4:	b2d2      	uxtb	r2, r2
 800e9f6:	701a      	strb	r2, [r3, #0]
  }
 800e9f8:	bf00      	nop
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	0801f5c0 	.word	0x0801f5c0
 800ea04:	0801f6c0 	.word	0x0801f6c0
 800ea08:	0801f7c0 	.word	0x0801f7c0

0800ea0c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	460b      	mov	r3, r1
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ea1a:	7afb      	ldrb	r3, [r7, #11]
 800ea1c:	3b10      	subs	r3, #16
 800ea1e:	2b10      	cmp	r3, #16
 800ea20:	bf8c      	ite	hi
 800ea22:	2201      	movhi	r2, #1
 800ea24:	2200      	movls	r2, #0
 800ea26:	b2d2      	uxtb	r2, r2
 800ea28:	2a00      	cmp	r2, #0
 800ea2a:	d10b      	bne.n	800ea44 <lorawan_aes_set_key+0x38>
 800ea2c:	4a64      	ldr	r2, [pc, #400]	; (800ebc0 <lorawan_aes_set_key+0x1b4>)
 800ea2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	bf14      	ite	ne
 800ea3a:	2301      	movne	r3, #1
 800ea3c:	2300      	moveq	r3, #0
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d105      	bne.n	800ea50 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ea4c:	23ff      	movs	r3, #255	; 0xff
 800ea4e:	e0b2      	b.n	800ebb6 <lorawan_aes_set_key+0x1aa>
        break;
 800ea50:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7afa      	ldrb	r2, [r7, #11]
 800ea56:	68f9      	ldr	r1, [r7, #12]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff fbfc 	bl	800e256 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ea5e:	7afb      	ldrb	r3, [r7, #11]
 800ea60:	331c      	adds	r3, #28
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ea68:	7c7b      	ldrb	r3, [r7, #17]
 800ea6a:	091b      	lsrs	r3, r3, #4
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ea78:	7afb      	ldrb	r3, [r7, #11]
 800ea7a:	75fb      	strb	r3, [r7, #23]
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	75bb      	strb	r3, [r7, #22]
 800ea80:	e093      	b.n	800ebaa <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ea82:	7dfb      	ldrb	r3, [r7, #23]
 800ea84:	3b04      	subs	r3, #4
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	5cd3      	ldrb	r3, [r2, r3]
 800ea8a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
 800ea8e:	3b03      	subs	r3, #3
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	5cd3      	ldrb	r3, [r2, r3]
 800ea94:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	3b02      	subs	r3, #2
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	5cd3      	ldrb	r3, [r2, r3]
 800ea9e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800eaa0:	7dfb      	ldrb	r3, [r7, #23]
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	5cd3      	ldrb	r3, [r2, r3]
 800eaa8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
 800eaac:	7afa      	ldrb	r2, [r7, #11]
 800eaae:	fbb3 f1f2 	udiv	r1, r3, r2
 800eab2:	fb01 f202 	mul.w	r2, r1, r2
 800eab6:	1a9b      	subs	r3, r3, r2
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d127      	bne.n	800eb0e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800eabe:	7d7b      	ldrb	r3, [r7, #21]
 800eac0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800eac2:	7d3b      	ldrb	r3, [r7, #20]
 800eac4:	4a3f      	ldr	r2, [pc, #252]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eac6:	5cd2      	ldrb	r2, [r2, r3]
 800eac8:	7dbb      	ldrb	r3, [r7, #22]
 800eaca:	4053      	eors	r3, r2
 800eacc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800eace:	7cfb      	ldrb	r3, [r7, #19]
 800ead0:	4a3c      	ldr	r2, [pc, #240]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800ead2:	5cd3      	ldrb	r3, [r2, r3]
 800ead4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ead6:	7cbb      	ldrb	r3, [r7, #18]
 800ead8:	4a3a      	ldr	r2, [pc, #232]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eada:	5cd3      	ldrb	r3, [r2, r3]
 800eadc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800eade:	7c3b      	ldrb	r3, [r7, #16]
 800eae0:	4a38      	ldr	r2, [pc, #224]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eae2:	5cd3      	ldrb	r3, [r2, r3]
 800eae4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800eae6:	7dbb      	ldrb	r3, [r7, #22]
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	b25a      	sxtb	r2, r3
 800eaec:	7dbb      	ldrb	r3, [r7, #22]
 800eaee:	09db      	lsrs	r3, r3, #7
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	0049      	lsls	r1, r1, #1
 800eaf6:	440b      	add	r3, r1
 800eaf8:	4619      	mov	r1, r3
 800eafa:	00c8      	lsls	r0, r1, #3
 800eafc:	4619      	mov	r1, r3
 800eafe:	4603      	mov	r3, r0
 800eb00:	440b      	add	r3, r1
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	b25b      	sxtb	r3, r3
 800eb06:	4053      	eors	r3, r2
 800eb08:	b25b      	sxtb	r3, r3
 800eb0a:	75bb      	strb	r3, [r7, #22]
 800eb0c:	e01c      	b.n	800eb48 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800eb0e:	7afb      	ldrb	r3, [r7, #11]
 800eb10:	2b18      	cmp	r3, #24
 800eb12:	d919      	bls.n	800eb48 <lorawan_aes_set_key+0x13c>
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	7afa      	ldrb	r2, [r7, #11]
 800eb18:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb1c:	fb01 f202 	mul.w	r2, r1, r2
 800eb20:	1a9b      	subs	r3, r3, r2
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b10      	cmp	r3, #16
 800eb26:	d10f      	bne.n	800eb48 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800eb28:	7d7b      	ldrb	r3, [r7, #21]
 800eb2a:	4a26      	ldr	r2, [pc, #152]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eb2c:	5cd3      	ldrb	r3, [r2, r3]
 800eb2e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800eb30:	7d3b      	ldrb	r3, [r7, #20]
 800eb32:	4a24      	ldr	r2, [pc, #144]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eb34:	5cd3      	ldrb	r3, [r2, r3]
 800eb36:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800eb38:	7cfb      	ldrb	r3, [r7, #19]
 800eb3a:	4a22      	ldr	r2, [pc, #136]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eb3c:	5cd3      	ldrb	r3, [r2, r3]
 800eb3e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800eb40:	7cbb      	ldrb	r3, [r7, #18]
 800eb42:	4a20      	ldr	r2, [pc, #128]	; (800ebc4 <lorawan_aes_set_key+0x1b8>)
 800eb44:	5cd3      	ldrb	r3, [r2, r3]
 800eb46:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800eb48:	7dfa      	ldrb	r2, [r7, #23]
 800eb4a:	7afb      	ldrb	r3, [r7, #11]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800eb50:	7c3b      	ldrb	r3, [r7, #16]
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	5cd1      	ldrb	r1, [r2, r3]
 800eb56:	7dfb      	ldrb	r3, [r7, #23]
 800eb58:	7d7a      	ldrb	r2, [r7, #21]
 800eb5a:	404a      	eors	r2, r1
 800eb5c:	b2d1      	uxtb	r1, r2
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800eb62:	7c3b      	ldrb	r3, [r7, #16]
 800eb64:	3301      	adds	r3, #1
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	5cd1      	ldrb	r1, [r2, r3]
 800eb6a:	7dfb      	ldrb	r3, [r7, #23]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	7d3a      	ldrb	r2, [r7, #20]
 800eb70:	404a      	eors	r2, r1
 800eb72:	b2d1      	uxtb	r1, r2
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800eb78:	7c3b      	ldrb	r3, [r7, #16]
 800eb7a:	3302      	adds	r3, #2
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	5cd1      	ldrb	r1, [r2, r3]
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	3302      	adds	r3, #2
 800eb84:	7cfa      	ldrb	r2, [r7, #19]
 800eb86:	404a      	eors	r2, r1
 800eb88:	b2d1      	uxtb	r1, r2
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800eb8e:	7c3b      	ldrb	r3, [r7, #16]
 800eb90:	3303      	adds	r3, #3
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	5cd1      	ldrb	r1, [r2, r3]
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
 800eb98:	3303      	adds	r3, #3
 800eb9a:	7cba      	ldrb	r2, [r7, #18]
 800eb9c:	404a      	eors	r2, r1
 800eb9e:	b2d1      	uxtb	r1, r2
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eba4:	7dfb      	ldrb	r3, [r7, #23]
 800eba6:	3304      	adds	r3, #4
 800eba8:	75fb      	strb	r3, [r7, #23]
 800ebaa:	7dfa      	ldrb	r2, [r7, #23]
 800ebac:	7c7b      	ldrb	r3, [r7, #17]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	f4ff af67 	bcc.w	800ea82 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	00010101 	.word	0x00010101
 800ebc4:	0801f5c0 	.word	0x0801f5c0

0800ebc8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08a      	sub	sp, #40	; 0x28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d038      	beq.n	800ec50 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	f107 0314 	add.w	r3, r7, #20
 800ebe4:	68f9      	ldr	r1, [r7, #12]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff fc07 	bl	800e3fa <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ebec:	2301      	movs	r3, #1
 800ebee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebf2:	e014      	b.n	800ec1e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ebf4:	f107 0314 	add.w	r3, r7, #20
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff fd5d 	bl	800e6b8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec04:	0112      	lsls	r2, r2, #4
 800ec06:	441a      	add	r2, r3
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fcab 	bl	800e56a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec18:	3301      	adds	r3, #1
 800ec1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d3e3      	bcc.n	800ebf4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ec2c:	f107 0314 	add.w	r3, r7, #20
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff fca7 	bl	800e584 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec3c:	0112      	lsls	r2, r2, #4
 800ec3e:	441a      	add	r2, r3
 800ec40:	f107 0314 	add.w	r3, r7, #20
 800ec44:	4619      	mov	r1, r3
 800ec46:	68b8      	ldr	r0, [r7, #8]
 800ec48:	f7ff fbd7 	bl	800e3fa <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	e000      	b.n	800ec52 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ec50:	23ff      	movs	r3, #255	; 0xff
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3728      	adds	r7, #40	; 0x28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
	...

0800ec5c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5e:	b0a1      	sub	sp, #132	; 0x84
 800ec60:	af12      	add	r7, sp, #72	; 0x48
 800ec62:	4603      	mov	r3, r0
 800ec64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ec68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ec6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f000 fa12 	bl	800f09c <SecureElementGetKeyByID>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d174      	bne.n	800ed68 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec84:	e06c      	b.n	800ed60 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ec86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec8a:	4939      	ldr	r1, [pc, #228]	; (800ed70 <PrintKey+0x114>)
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	4413      	add	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	440b      	add	r3, r1
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d15a      	bne.n	800ed56 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800eca0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eca4:	4932      	ldr	r1, [pc, #200]	; (800ed70 <PrintKey+0x114>)
 800eca6:	4613      	mov	r3, r2
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	440b      	add	r3, r1
 800ecb0:	3308      	adds	r3, #8
 800ecb2:	6819      	ldr	r1, [r3, #0]
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb6:	785b      	ldrb	r3, [r3, #1]
 800ecb8:	461d      	mov	r5, r3
 800ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbc:	789b      	ldrb	r3, [r3, #2]
 800ecbe:	461e      	mov	r6, r3
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	78db      	ldrb	r3, [r3, #3]
 800ecc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	791b      	ldrb	r3, [r3, #4]
 800ecca:	627b      	str	r3, [r7, #36]	; 0x24
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	795b      	ldrb	r3, [r3, #5]
 800ecd0:	623b      	str	r3, [r7, #32]
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	799b      	ldrb	r3, [r3, #6]
 800ecd6:	61fb      	str	r3, [r7, #28]
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	79db      	ldrb	r3, [r3, #7]
 800ecdc:	61bb      	str	r3, [r7, #24]
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	7a1b      	ldrb	r3, [r3, #8]
 800ece2:	617b      	str	r3, [r7, #20]
 800ece4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece6:	7a5b      	ldrb	r3, [r3, #9]
 800ece8:	613b      	str	r3, [r7, #16]
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	7a9b      	ldrb	r3, [r3, #10]
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	7adb      	ldrb	r3, [r3, #11]
 800ecf4:	60bb      	str	r3, [r7, #8]
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf8:	7b1b      	ldrb	r3, [r3, #12]
 800ecfa:	607b      	str	r3, [r7, #4]
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfe:	7b5b      	ldrb	r3, [r3, #13]
 800ed00:	461c      	mov	r4, r3
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	7b9b      	ldrb	r3, [r3, #14]
 800ed06:	4618      	mov	r0, r3
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	7bdb      	ldrb	r3, [r3, #15]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	7c1b      	ldrb	r3, [r3, #16]
 800ed12:	9310      	str	r3, [sp, #64]	; 0x40
 800ed14:	920f      	str	r2, [sp, #60]	; 0x3c
 800ed16:	900e      	str	r0, [sp, #56]	; 0x38
 800ed18:	940d      	str	r4, [sp, #52]	; 0x34
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	920c      	str	r2, [sp, #48]	; 0x30
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	920a      	str	r2, [sp, #40]	; 0x28
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	9209      	str	r2, [sp, #36]	; 0x24
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	9208      	str	r2, [sp, #32]
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	9207      	str	r2, [sp, #28]
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	9206      	str	r2, [sp, #24]
 800ed36:	6a3a      	ldr	r2, [r7, #32]
 800ed38:	9205      	str	r2, [sp, #20]
 800ed3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3c:	9204      	str	r2, [sp, #16]
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	9303      	str	r3, [sp, #12]
 800ed42:	9602      	str	r6, [sp, #8]
 800ed44:	9501      	str	r5, [sp, #4]
 800ed46:	9100      	str	r1, [sp, #0]
 800ed48:	4b0a      	ldr	r3, [pc, #40]	; (800ed74 <PrintKey+0x118>)
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	2002      	movs	r0, #2
 800ed50:	f00f fbc6 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
 800ed54:	e008      	b.n	800ed68 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed64:	2b0a      	cmp	r3, #10
 800ed66:	d98e      	bls.n	800ec86 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ed68:	373c      	adds	r7, #60	; 0x3c
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	0801f8c0 	.word	0x0801f8c0
 800ed74:	0801f158 	.word	0x0801f158

0800ed78 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7a:	b091      	sub	sp, #68	; 0x44
 800ed7c:	af08      	add	r7, sp, #32
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ed86:	f107 0310 	add.w	r3, r7, #16
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 fbf0 	bl	800f570 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ed90:	7c3b      	ldrb	r3, [r7, #16]
 800ed92:	7c7a      	ldrb	r2, [r7, #17]
 800ed94:	7cb9      	ldrb	r1, [r7, #18]
 800ed96:	7cf8      	ldrb	r0, [r7, #19]
 800ed98:	7d3c      	ldrb	r4, [r7, #20]
 800ed9a:	7d7d      	ldrb	r5, [r7, #21]
 800ed9c:	7dbe      	ldrb	r6, [r7, #22]
 800ed9e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800eda2:	f8cd c01c 	str.w	ip, [sp, #28]
 800eda6:	9606      	str	r6, [sp, #24]
 800eda8:	9505      	str	r5, [sp, #20]
 800edaa:	9404      	str	r4, [sp, #16]
 800edac:	9003      	str	r0, [sp, #12]
 800edae:	9102      	str	r1, [sp, #8]
 800edb0:	9201      	str	r2, [sp, #4]
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	4b24      	ldr	r3, [pc, #144]	; (800ee48 <PrintIds+0xd0>)
 800edb6:	2200      	movs	r2, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	2002      	movs	r0, #2
 800edbc:	f00f fb90 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800edc0:	f107 0318 	add.w	r3, r7, #24
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 fc03 	bl	800f5d0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800edca:	7e3b      	ldrb	r3, [r7, #24]
 800edcc:	7e7a      	ldrb	r2, [r7, #25]
 800edce:	7eb9      	ldrb	r1, [r7, #26]
 800edd0:	7ef8      	ldrb	r0, [r7, #27]
 800edd2:	7f3c      	ldrb	r4, [r7, #28]
 800edd4:	7f7d      	ldrb	r5, [r7, #29]
 800edd6:	7fbe      	ldrb	r6, [r7, #30]
 800edd8:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800eddc:	f8cd c01c 	str.w	ip, [sp, #28]
 800ede0:	9606      	str	r6, [sp, #24]
 800ede2:	9505      	str	r5, [sp, #20]
 800ede4:	9404      	str	r4, [sp, #16]
 800ede6:	9003      	str	r0, [sp, #12]
 800ede8:	9102      	str	r1, [sp, #8]
 800edea:	9201      	str	r2, [sp, #4]
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	4b17      	ldr	r3, [pc, #92]	; (800ee4c <PrintIds+0xd4>)
 800edf0:	2200      	movs	r2, #0
 800edf2:	2100      	movs	r1, #0
 800edf4:	2002      	movs	r0, #2
 800edf6:	f00f fb73 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800edfa:	f107 020c 	add.w	r2, r7, #12
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	4611      	mov	r1, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f000 fc16 	bl	800f634 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ee08:	f107 030c 	add.w	r3, r7, #12
 800ee0c:	3303      	adds	r3, #3
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	461a      	mov	r2, r3
 800ee12:	f107 030c 	add.w	r3, r7, #12
 800ee16:	3302      	adds	r3, #2
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	f107 030c 	add.w	r3, r7, #12
 800ee20:	3301      	adds	r3, #1
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f107 030c 	add.w	r3, r7, #12
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	9303      	str	r3, [sp, #12]
 800ee2e:	9002      	str	r0, [sp, #8]
 800ee30:	9101      	str	r1, [sp, #4]
 800ee32:	9200      	str	r2, [sp, #0]
 800ee34:	4b06      	ldr	r3, [pc, #24]	; (800ee50 <PrintIds+0xd8>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	2100      	movs	r1, #0
 800ee3a:	2002      	movs	r0, #2
 800ee3c:	f00f fb50 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800ee40:	bf00      	nop
 800ee42:	3724      	adds	r7, #36	; 0x24
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee48:	0801f1b4 	.word	0x0801f1b4
 800ee4c:	0801f1f4 	.word	0x0801f1f4
 800ee50:	0801f234 	.word	0x0801f234

0800ee54 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	6039      	str	r1, [r7, #0]
 800ee5e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]
 800ee64:	e01a      	b.n	800ee9c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ee66:	4b12      	ldr	r3, [pc, #72]	; (800eeb0 <GetKeyByID+0x5c>)
 800ee68:	6819      	ldr	r1, [r3, #0]
 800ee6a:	7bfa      	ldrb	r2, [r7, #15]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	4413      	add	r3, r2
 800ee72:	440b      	add	r3, r1
 800ee74:	3318      	adds	r3, #24
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	79fa      	ldrb	r2, [r7, #7]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d10b      	bne.n	800ee96 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ee7e:	4b0c      	ldr	r3, [pc, #48]	; (800eeb0 <GetKeyByID+0x5c>)
 800ee80:	6819      	ldr	r1, [r3, #0]
 800ee82:	7bfa      	ldrb	r2, [r7, #15]
 800ee84:	4613      	mov	r3, r2
 800ee86:	011b      	lsls	r3, r3, #4
 800ee88:	4413      	add	r3, r2
 800ee8a:	3318      	adds	r3, #24
 800ee8c:	18ca      	adds	r2, r1, r3
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ee92:	2300      	movs	r3, #0
 800ee94:	e006      	b.n	800eea4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	73fb      	strb	r3, [r7, #15]
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	2b0a      	cmp	r3, #10
 800eea0:	d9e1      	bls.n	800ee66 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eea2:	2303      	movs	r3, #3
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bc80      	pop	{r7}
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	200007e4 	.word	0x200007e4

0800eeb4 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800eeb4:	b590      	push	{r4, r7, lr}
 800eeb6:	b0d1      	sub	sp, #324	; 0x144
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800eebe:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800eec2:	6020      	str	r0, [r4, #0]
 800eec4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800eec8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800eecc:	6001      	str	r1, [r0, #0]
 800eece:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800eed2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800eed6:	600a      	str	r2, [r1, #0]
 800eed8:	461a      	mov	r2, r3
 800eeda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eede:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800eee2:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800eee4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eee8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d003      	beq.n	800eefa <ComputeCmac+0x46>
 800eef2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d101      	bne.n	800eefe <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eefa:	2302      	movs	r3, #2
 800eefc:	e05d      	b.n	800efba <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800eefe:	f107 0314 	add.w	r3, r7, #20
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe ff02 	bl	800dd0c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ef08:	f107 0210 	add.w	r2, r7, #16
 800ef0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef10:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff ff9b 	bl	800ee54 <GetKeyByID>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ef24:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d144      	bne.n	800efb6 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ef2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	f107 0314 	add.w	r3, r7, #20
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fefd 	bl	800dd3e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ef44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d009      	beq.n	800ef66 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ef52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ef5a:	f107 0014 	add.w	r0, r7, #20
 800ef5e:	2210      	movs	r2, #16
 800ef60:	6819      	ldr	r1, [r3, #0]
 800ef62:	f7fe fefb 	bl	800dd5c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ef66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef6a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ef6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ef76:	f107 0014 	add.w	r0, r7, #20
 800ef7a:	6812      	ldr	r2, [r2, #0]
 800ef7c:	6819      	ldr	r1, [r3, #0]
 800ef7e:	f7fe feed 	bl	800dd5c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ef82:	f107 0214 	add.w	r2, r7, #20
 800ef86:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fe ffa7 	bl	800dee0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ef92:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800ef96:	461a      	mov	r2, r3
 800ef98:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ef9c:	021b      	lsls	r3, r3, #8
 800ef9e:	431a      	orrs	r2, r3
 800efa0:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800efa4:	041b      	lsls	r3, r3, #16
 800efa6:	431a      	orrs	r2, r3
 800efa8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800efac:	061b      	lsls	r3, r3, #24
 800efae:	431a      	orrs	r2, r3
 800efb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800efb4:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800efb6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800efba:	4618      	mov	r0, r3
 800efbc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd90      	pop	{r4, r7, pc}

0800efc4 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d101      	bne.n	800efd6 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efd2:	2302      	movs	r3, #2
 800efd4:	e00a      	b.n	800efec <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800efd6:	4a07      	ldr	r2, [pc, #28]	; (800eff4 <SecureElementInit+0x30>)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800efdc:	4b05      	ldr	r3, [pc, #20]	; (800eff4 <SecureElementInit+0x30>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	22d8      	movs	r2, #216	; 0xd8
 800efe2:	4905      	ldr	r1, [pc, #20]	; (800eff8 <SecureElementInit+0x34>)
 800efe4:	4618      	mov	r0, r3
 800efe6:	f00a fed6 	bl	8019d96 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	200007e4 	.word	0x200007e4
 800eff8:	0801fadc 	.word	0x0801fadc

0800effc <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800f00a:	f107 030c 	add.w	r3, r7, #12
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 faae 	bl	800f570 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f014:	f107 0308 	add.w	r3, r7, #8
 800f018:	4619      	mov	r1, r3
 800f01a:	2001      	movs	r0, #1
 800f01c:	f000 fb0a 	bl	800f634 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d024      	beq.n	800f070 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800f026:	2300      	movs	r3, #0
 800f028:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f02a:	2300      	movs	r3, #0
 800f02c:	75bb      	strb	r3, [r7, #22]
 800f02e:	e00c      	b.n	800f04a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800f030:	7dbb      	ldrb	r3, [r7, #22]
 800f032:	3318      	adds	r3, #24
 800f034:	443b      	add	r3, r7
 800f036:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d002      	beq.n	800f044 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800f03e:	2301      	movs	r3, #1
 800f040:	75fb      	strb	r3, [r7, #23]
                break;
 800f042:	e005      	b.n	800f050 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f044:	7dbb      	ldrb	r3, [r7, #22]
 800f046:	3301      	adds	r3, #1
 800f048:	75bb      	strb	r3, [r7, #22]
 800f04a:	7dbb      	ldrb	r3, [r7, #22]
 800f04c:	2b07      	cmp	r3, #7
 800f04e:	d9ef      	bls.n	800f030 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800f050:	7dfb      	ldrb	r3, [r7, #23]
 800f052:	f083 0301 	eor.w	r3, r3, #1
 800f056:	b2db      	uxtb	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d009      	beq.n	800f070 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800f05c:	f107 020c 	add.w	r2, r7, #12
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4610      	mov	r0, r2
 800f064:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800f066:	f107 030c 	add.w	r3, r7, #12
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 fa68 	bl	800f540 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00c      	beq.n	800f090 <SecureElementInitMcuID+0x94>
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d109      	bne.n	800f090 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800f07c:	f107 0208 	add.w	r2, r7, #8
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	4610      	mov	r0, r2
 800f084:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	4619      	mov	r1, r3
 800f08a:	2001      	movs	r0, #1
 800f08c:	f000 fab8 	bl	800f600 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3718      	adds	r7, #24
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
	...

0800f09c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	6039      	str	r1, [r7, #0]
 800f0a6:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]
 800f0ac:	e01a      	b.n	800f0e4 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f0ae:	4b12      	ldr	r3, [pc, #72]	; (800f0f8 <SecureElementGetKeyByID+0x5c>)
 800f0b0:	6819      	ldr	r1, [r3, #0]
 800f0b2:	7bfa      	ldrb	r2, [r7, #15]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	011b      	lsls	r3, r3, #4
 800f0b8:	4413      	add	r3, r2
 800f0ba:	440b      	add	r3, r1
 800f0bc:	3318      	adds	r3, #24
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	79fa      	ldrb	r2, [r7, #7]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d10b      	bne.n	800f0de <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f0c6:	4b0c      	ldr	r3, [pc, #48]	; (800f0f8 <SecureElementGetKeyByID+0x5c>)
 800f0c8:	6819      	ldr	r1, [r3, #0]
 800f0ca:	7bfa      	ldrb	r2, [r7, #15]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	011b      	lsls	r3, r3, #4
 800f0d0:	4413      	add	r3, r2
 800f0d2:	3318      	adds	r3, #24
 800f0d4:	18ca      	adds	r2, r1, r3
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	e006      	b.n	800f0ec <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	73fb      	strb	r3, [r7, #15]
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	2b0a      	cmp	r3, #10
 800f0e8:	d9e1      	bls.n	800f0ae <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f0ea:	2303      	movs	r3, #3
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bc80      	pop	{r7}
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	200007e4 	.word	0x200007e4

0800f0fc <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f100:	2000      	movs	r0, #0
 800f102:	f7ff fdab 	bl	800ec5c <PrintKey>
    PrintKey( NWK_KEY );
 800f106:	2001      	movs	r0, #1
 800f108:	f7ff fda8 	bl	800ec5c <PrintKey>
    PrintKey( APP_S_KEY );
 800f10c:	2009      	movs	r0, #9
 800f10e:	f7ff fda5 	bl	800ec5c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f112:	2008      	movs	r0, #8
 800f114:	f7ff fda2 	bl	800ec5c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f118:	2000      	movs	r0, #0
 800f11a:	f7ff fe2d 	bl	800ed78 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	bd80      	pop	{r7, pc}

0800f124 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f12e:	200b      	movs	r0, #11
 800f130:	f7ff fd94 	bl	800ec5c <PrintKey>
    PrintKey( MC_KE_KEY );
 800f134:	200c      	movs	r0, #12
 800f136:	f7ff fd91 	bl	800ec5c <PrintKey>
    PrintKey( APP_S_KEY );
 800f13a:	2009      	movs	r0, #9
 800f13c:	f7ff fd8e 	bl	800ec5c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f140:	2008      	movs	r0, #8
 800f142:	f7ff fd8b 	bl	800ec5c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f146:	200a      	movs	r0, #10
 800f148:	f7ff fd88 	bl	800ec5c <PrintKey>
    PrintIds( mode );
 800f14c:	79fb      	ldrb	r3, [r7, #7]
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff fe12 	bl	800ed78 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
	...

0800f160 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af00      	add	r7, sp, #0
 800f166:	4603      	mov	r3, r0
 800f168:	6039      	str	r1, [r7, #0]
 800f16a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f172:	2302      	movs	r3, #2
 800f174:	e04c      	b.n	800f210 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f176:	2300      	movs	r3, #0
 800f178:	77fb      	strb	r3, [r7, #31]
 800f17a:	e045      	b.n	800f208 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f17c:	4b26      	ldr	r3, [pc, #152]	; (800f218 <SecureElementSetKey+0xb8>)
 800f17e:	6819      	ldr	r1, [r3, #0]
 800f180:	7ffa      	ldrb	r2, [r7, #31]
 800f182:	4613      	mov	r3, r2
 800f184:	011b      	lsls	r3, r3, #4
 800f186:	4413      	add	r3, r2
 800f188:	440b      	add	r3, r1
 800f18a:	3318      	adds	r3, #24
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	79fa      	ldrb	r2, [r7, #7]
 800f190:	429a      	cmp	r2, r3
 800f192:	d136      	bne.n	800f202 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	2b0d      	cmp	r3, #13
 800f198:	d123      	bne.n	800f1e2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f19a:	2306      	movs	r3, #6
 800f19c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	f107 0310 	add.w	r3, r7, #16
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	605a      	str	r2, [r3, #4]
 800f1ac:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f1ae:	f107 030c 	add.w	r3, r7, #12
 800f1b2:	220c      	movs	r2, #12
 800f1b4:	2110      	movs	r1, #16
 800f1b6:	6838      	ldr	r0, [r7, #0]
 800f1b8:	f000 f876 	bl	800f2a8 <SecureElementAesEncrypt>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f1c0:	4b15      	ldr	r3, [pc, #84]	; (800f218 <SecureElementSetKey+0xb8>)
 800f1c2:	6819      	ldr	r1, [r3, #0]
 800f1c4:	7ffa      	ldrb	r2, [r7, #31]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	011b      	lsls	r3, r3, #4
 800f1ca:	4413      	add	r3, r2
 800f1cc:	3318      	adds	r3, #24
 800f1ce:	440b      	add	r3, r1
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	f107 010c 	add.w	r1, r7, #12
 800f1d6:	2210      	movs	r2, #16
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f00a fddc 	bl	8019d96 <memcpy1>
                return retval;
 800f1de:	7fbb      	ldrb	r3, [r7, #30]
 800f1e0:	e016      	b.n	800f210 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f1e2:	4b0d      	ldr	r3, [pc, #52]	; (800f218 <SecureElementSetKey+0xb8>)
 800f1e4:	6819      	ldr	r1, [r3, #0]
 800f1e6:	7ffa      	ldrb	r2, [r7, #31]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	011b      	lsls	r3, r3, #4
 800f1ec:	4413      	add	r3, r2
 800f1ee:	3318      	adds	r3, #24
 800f1f0:	440b      	add	r3, r1
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	2210      	movs	r2, #16
 800f1f6:	6839      	ldr	r1, [r7, #0]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f00a fdcc 	bl	8019d96 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f1fe:	2300      	movs	r3, #0
 800f200:	e006      	b.n	800f210 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f202:	7ffb      	ldrb	r3, [r7, #31]
 800f204:	3301      	adds	r3, #1
 800f206:	77fb      	strb	r3, [r7, #31]
 800f208:	7ffb      	ldrb	r3, [r7, #31]
 800f20a:	2b0a      	cmp	r3, #10
 800f20c:	d9b6      	bls.n	800f17c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f20e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f210:	4618      	mov	r0, r3
 800f212:	3720      	adds	r7, #32
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	200007e4 	.word	0x200007e4

0800f21c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af02      	add	r7, sp, #8
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f22a:	78fb      	ldrb	r3, [r7, #3]
 800f22c:	2b0b      	cmp	r3, #11
 800f22e:	d901      	bls.n	800f234 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f230:	2303      	movs	r3, #3
 800f232:	e009      	b.n	800f248 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f234:	78fa      	ldrb	r2, [r7, #3]
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	4613      	mov	r3, r2
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	68b9      	ldr	r1, [r7, #8]
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7ff fe37 	bl	800eeb4 <ComputeCmac>
 800f246:	4603      	mov	r3, r0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b088      	sub	sp, #32
 800f254:	af02      	add	r7, sp, #8
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	607a      	str	r2, [r7, #4]
 800f25c:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d101      	bne.n	800f268 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f264:	2302      	movs	r3, #2
 800f266:	e01b      	b.n	800f2a0 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f268:	2306      	movs	r3, #6
 800f26a:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f26c:	2300      	movs	r3, #0
 800f26e:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f270:	78fa      	ldrb	r2, [r7, #3]
 800f272:	f107 0310 	add.w	r3, r7, #16
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	4613      	mov	r3, r2
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	68f9      	ldr	r1, [r7, #12]
 800f27e:	2000      	movs	r0, #0
 800f280:	f7ff fe18 	bl	800eeb4 <ComputeCmac>
 800f284:	4603      	mov	r3, r0
 800f286:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f288:	7dfb      	ldrb	r3, [r7, #23]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f28e:	7dfb      	ldrb	r3, [r7, #23]
 800f290:	e006      	b.n	800f2a0 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	429a      	cmp	r2, r3
 800f298:	d001      	beq.n	800f29e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f29a:	2301      	movs	r3, #1
 800f29c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3718      	adds	r7, #24
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b0c2      	sub	sp, #264	; 0x108
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f2b4:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f2b8:	6001      	str	r1, [r0, #0]
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f2c0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f2c4:	6013      	str	r3, [r2, #0]
 800f2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ca:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f2ce:	460a      	mov	r2, r1
 800f2d0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d006      	beq.n	800f2e6 <SecureElementAesEncrypt+0x3e>
 800f2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d101      	bne.n	800f2ea <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2e6:	2302      	movs	r3, #2
 800f2e8:	e059      	b.n	800f39e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f003 030f 	and.w	r3, r3, #15
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f2fc:	2305      	movs	r3, #5
 800f2fe:	e04e      	b.n	800f39e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f300:	f107 0314 	add.w	r3, r7, #20
 800f304:	22f0      	movs	r2, #240	; 0xf0
 800f306:	2100      	movs	r1, #0
 800f308:	4618      	mov	r0, r3
 800f30a:	f00a fd7f 	bl	8019e0c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f30e:	f107 0210 	add.w	r2, r7, #16
 800f312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f316:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	4611      	mov	r1, r2
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff fd98 	bl	800ee54 <GetKeyByID>
 800f324:	4603      	mov	r3, r0
 800f326:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f32a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d133      	bne.n	800f39a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	3301      	adds	r3, #1
 800f336:	f107 0214 	add.w	r2, r7, #20
 800f33a:	2110      	movs	r1, #16
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7ff fb65 	bl	800ea0c <lorawan_aes_set_key>

        uint8_t block = 0;
 800f342:	2300      	movs	r3, #0
 800f344:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f348:	e020      	b.n	800f38c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f34a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	18d0      	adds	r0, r2, r3
 800f352:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f356:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f35a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f35e:	6812      	ldr	r2, [r2, #0]
 800f360:	4413      	add	r3, r2
 800f362:	f107 0214 	add.w	r2, r7, #20
 800f366:	4619      	mov	r1, r3
 800f368:	f7ff fc2e 	bl	800ebc8 <lorawan_aes_encrypt>
            block = block + 16;
 800f36c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f370:	3310      	adds	r3, #16
 800f372:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f37a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f37e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f382:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f386:	6812      	ldr	r2, [r2, #0]
 800f388:	3a10      	subs	r2, #16
 800f38a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f390:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1d7      	bne.n	800f34a <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f39a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b088      	sub	sp, #32
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	70fb      	strb	r3, [r7, #3]
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d101      	bne.n	800f3c2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f3be:	2302      	movs	r3, #2
 800f3c0:	e02e      	b.n	800f420 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f3c2:	2306      	movs	r3, #6
 800f3c4:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f3c6:	78bb      	ldrb	r3, [r7, #2]
 800f3c8:	2b0c      	cmp	r3, #12
 800f3ca:	d104      	bne.n	800f3d6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f3cc:	78fb      	ldrb	r3, [r7, #3]
 800f3ce:	2b0b      	cmp	r3, #11
 800f3d0:	d001      	beq.n	800f3d6 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	e024      	b.n	800f420 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	60fb      	str	r3, [r7, #12]
 800f3da:	f107 0310 	add.w	r3, r7, #16
 800f3de:	2200      	movs	r2, #0
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	605a      	str	r2, [r3, #4]
 800f3e4:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f3e6:	f107 030c 	add.w	r3, r7, #12
 800f3ea:	78fa      	ldrb	r2, [r7, #3]
 800f3ec:	2110      	movs	r1, #16
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff ff5a 	bl	800f2a8 <SecureElementAesEncrypt>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f3f8:	7ffb      	ldrb	r3, [r7, #31]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d001      	beq.n	800f402 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f3fe:	7ffb      	ldrb	r3, [r7, #31]
 800f400:	e00e      	b.n	800f420 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f402:	f107 020c 	add.w	r2, r7, #12
 800f406:	78bb      	ldrb	r3, [r7, #2]
 800f408:	4611      	mov	r1, r2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff fea8 	bl	800f160 <SecureElementSetKey>
 800f410:	4603      	mov	r3, r0
 800f412:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f414:	7ffb      	ldrb	r3, [r7, #31]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f41a:	7ffb      	ldrb	r3, [r7, #31]
 800f41c:	e000      	b.n	800f420 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f41e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f420:	4618      	mov	r0, r3
 800f422:	3720      	adds	r7, #32
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60b9      	str	r1, [r7, #8]
 800f430:	607b      	str	r3, [r7, #4]
 800f432:	4603      	mov	r3, r0
 800f434:	73fb      	strb	r3, [r7, #15]
 800f436:	4613      	mov	r3, r2
 800f438:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d005      	beq.n	800f44c <SecureElementProcessJoinAccept+0x24>
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	2b00      	cmp	r3, #0
 800f444:	d002      	beq.n	800f44c <SecureElementProcessJoinAccept+0x24>
 800f446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d101      	bne.n	800f450 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f44c:	2302      	movs	r3, #2
 800f44e:	e05c      	b.n	800f50a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f450:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f454:	2b21      	cmp	r3, #33	; 0x21
 800f456:	d901      	bls.n	800f45c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f458:	2305      	movs	r3, #5
 800f45a:	e056      	b.n	800f50a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f45c:	2301      	movs	r3, #1
 800f45e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f460:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f464:	b29b      	uxth	r3, r3
 800f466:	461a      	mov	r2, r3
 800f468:	6879      	ldr	r1, [r7, #4]
 800f46a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f46c:	f00a fc93 	bl	8019d96 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	1c58      	adds	r0, r3, #1
 800f474:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f478:	3b01      	subs	r3, #1
 800f47a:	4619      	mov	r1, r3
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	3301      	adds	r3, #1
 800f480:	7dfa      	ldrb	r2, [r7, #23]
 800f482:	f7ff ff11 	bl	800f2a8 <SecureElementAesEncrypt>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f48c:	2307      	movs	r3, #7
 800f48e:	e03c      	b.n	800f50a <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	330b      	adds	r3, #11
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	09db      	lsrs	r3, r3, #7
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f49e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4a2:	3b04      	subs	r3, #4
 800f4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a6:	4413      	add	r3, r2
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4b0:	3b03      	subs	r3, #3
 800f4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4b4:	4413      	add	r3, r2
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	021b      	lsls	r3, r3, #8
 800f4ba:	ea41 0203 	orr.w	r2, r1, r3
 800f4be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4c2:	3b02      	subs	r3, #2
 800f4c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4c6:	440b      	add	r3, r1
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	041b      	lsls	r3, r3, #16
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4d6:	440b      	add	r3, r1
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	061b      	lsls	r3, r3, #24
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10d      	bne.n	800f504 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f4e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4ec:	3b04      	subs	r3, #4
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4f6:	f7ff feab 	bl	800f250 <SecureElementVerifyAesCmac>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d003      	beq.n	800f508 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f500:	2301      	movs	r3, #1
 800f502:	e002      	b.n	800f50a <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f504:	2304      	movs	r3, #4
 800f506:	e000      	b.n	800f50a <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3718      	adds	r7, #24
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
	...

0800f514 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f522:	2302      	movs	r3, #2
 800f524:	e006      	b.n	800f534 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f526:	4b05      	ldr	r3, [pc, #20]	; (800f53c <SecureElementRandomNumber+0x28>)
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	4798      	blx	r3
 800f52c:	4602      	mov	r2, r0
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	0801f98c 	.word	0x0801f98c

0800f540 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f54e:	2302      	movs	r3, #2
 800f550:	e007      	b.n	800f562 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f552:	4b06      	ldr	r3, [pc, #24]	; (800f56c <SecureElementSetDevEui+0x2c>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2208      	movs	r2, #8
 800f558:	6879      	ldr	r1, [r7, #4]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f00a fc1b 	bl	8019d96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f560:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f562:	4618      	mov	r0, r3
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	200007e4 	.word	0x200007e4

0800f570 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d101      	bne.n	800f582 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f57e:	2302      	movs	r3, #2
 800f580:	e007      	b.n	800f592 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f582:	4b06      	ldr	r3, [pc, #24]	; (800f59c <SecureElementGetDevEui+0x2c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2208      	movs	r2, #8
 800f588:	4619      	mov	r1, r3
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f00a fc03 	bl	8019d96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f590:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	200007e4 	.word	0x200007e4

0800f5a0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e008      	b.n	800f5c4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f5b2:	4b06      	ldr	r3, [pc, #24]	; (800f5cc <SecureElementSetJoinEui+0x2c>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	2208      	movs	r2, #8
 800f5ba:	6879      	ldr	r1, [r7, #4]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f00a fbea 	bl	8019d96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5c2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	200007e4 	.word	0x200007e4

0800f5d0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5de:	2302      	movs	r3, #2
 800f5e0:	e008      	b.n	800f5f4 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f5e2:	4b06      	ldr	r3, [pc, #24]	; (800f5fc <SecureElementGetJoinEui+0x2c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	2208      	movs	r2, #8
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f00a fbd2 	bl	8019d96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5f2:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	200007e4 	.word	0x200007e4

0800f600 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	4603      	mov	r3, r0
 800f608:	6039      	str	r1, [r7, #0]
 800f60a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	2b02      	cmp	r3, #2
 800f610:	d104      	bne.n	800f61c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f612:	4b07      	ldr	r3, [pc, #28]	; (800f630 <SecureElementSetDevAddr+0x30>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	611a      	str	r2, [r3, #16]
 800f61a:	e003      	b.n	800f624 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f61c:	4b04      	ldr	r3, [pc, #16]	; (800f630 <SecureElementSetDevAddr+0x30>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f624:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f626:	4618      	mov	r0, r3
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bc80      	pop	{r7}
 800f62e:	4770      	bx	lr
 800f630:	200007e4 	.word	0x200007e4

0800f634 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	6039      	str	r1, [r7, #0]
 800f63e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d101      	bne.n	800f64a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f646:	2302      	movs	r3, #2
 800f648:	e00e      	b.n	800f668 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d105      	bne.n	800f65c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f650:	4b08      	ldr	r3, [pc, #32]	; (800f674 <SecureElementGetDevAddr+0x40>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	691a      	ldr	r2, [r3, #16]
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	e004      	b.n	800f666 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f65c:	4b05      	ldr	r3, [pc, #20]	; (800f674 <SecureElementGetDevAddr+0x40>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	695a      	ldr	r2, [r3, #20]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f666:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f668:	4618      	mov	r0, r3
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bc80      	pop	{r7}
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	200007e4 	.word	0x200007e4

0800f678 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f682:	4a22      	ldr	r2, [pc, #136]	; (800f70c <LmHandlerInit+0x94>)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f688:	4b21      	ldr	r3, [pc, #132]	; (800f710 <LmHandlerInit+0x98>)
 800f68a:	4a22      	ldr	r2, [pc, #136]	; (800f714 <LmHandlerInit+0x9c>)
 800f68c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f68e:	4b20      	ldr	r3, [pc, #128]	; (800f710 <LmHandlerInit+0x98>)
 800f690:	4a21      	ldr	r2, [pc, #132]	; (800f718 <LmHandlerInit+0xa0>)
 800f692:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f694:	4b1e      	ldr	r3, [pc, #120]	; (800f710 <LmHandlerInit+0x98>)
 800f696:	4a21      	ldr	r2, [pc, #132]	; (800f71c <LmHandlerInit+0xa4>)
 800f698:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f69a:	4b1d      	ldr	r3, [pc, #116]	; (800f710 <LmHandlerInit+0x98>)
 800f69c:	4a20      	ldr	r2, [pc, #128]	; (800f720 <LmHandlerInit+0xa8>)
 800f69e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f6a0:	4b1a      	ldr	r3, [pc, #104]	; (800f70c <LmHandlerInit+0x94>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a1f      	ldr	r2, [pc, #124]	; (800f724 <LmHandlerInit+0xac>)
 800f6a8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f6aa:	4b18      	ldr	r3, [pc, #96]	; (800f70c <LmHandlerInit+0x94>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	4a1c      	ldr	r2, [pc, #112]	; (800f724 <LmHandlerInit+0xac>)
 800f6b2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f6b4:	4b15      	ldr	r3, [pc, #84]	; (800f70c <LmHandlerInit+0x94>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	4a1a      	ldr	r2, [pc, #104]	; (800f724 <LmHandlerInit+0xac>)
 800f6bc:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f6be:	4b13      	ldr	r3, [pc, #76]	; (800f70c <LmHandlerInit+0x94>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	4a17      	ldr	r2, [pc, #92]	; (800f724 <LmHandlerInit+0xac>)
 800f6c6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f6c8:	4b16      	ldr	r3, [pc, #88]	; (800f724 <LmHandlerInit+0xac>)
 800f6ca:	4a17      	ldr	r2, [pc, #92]	; (800f728 <LmHandlerInit+0xb0>)
 800f6cc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f6ce:	4b0f      	ldr	r3, [pc, #60]	; (800f70c <LmHandlerInit+0x94>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	699b      	ldr	r3, [r3, #24]
 800f6d4:	4a13      	ldr	r2, [pc, #76]	; (800f724 <LmHandlerInit+0xac>)
 800f6d6:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f6d8:	4914      	ldr	r1, [pc, #80]	; (800f72c <LmHandlerInit+0xb4>)
 800f6da:	2000      	movs	r0, #0
 800f6dc:	f000 fd44 	bl	8010168 <LmHandlerPackageRegister>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d002      	beq.n	800f6ec <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ea:	e00a      	b.n	800f702 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f6ec:	463b      	mov	r3, r7
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f001 fa30 	bl	8010b54 <LmhpPackagesRegistrationInit>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d002      	beq.n	800f700 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fe:	e000      	b.n	800f702 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	2000082c 	.word	0x2000082c
 800f710:	20000830 	.word	0x20000830
 800f714:	0800fe2d 	.word	0x0800fe2d
 800f718:	0800fea1 	.word	0x0800fea1
 800f71c:	0800ff81 	.word	0x0800ff81
 800f720:	080100d5 	.word	0x080100d5
 800f724:	20000840 	.word	0x20000840
 800f728:	08010529 	.word	0x08010529
 800f72c:	200000a4 	.word	0x200000a4

0800f730 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b090      	sub	sp, #64	; 0x40
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f738:	2218      	movs	r2, #24
 800f73a:	6879      	ldr	r1, [r7, #4]
 800f73c:	4852      	ldr	r0, [pc, #328]	; (800f888 <LmHandlerConfigure+0x158>)
 800f73e:	f00a fb2a 	bl	8019d96 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f742:	f7fe faa1 	bl	800dc88 <LoraInfo_GetPtr>
 800f746:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f748:	4b4f      	ldr	r3, [pc, #316]	; (800f888 <LmHandlerConfigure+0x158>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	461a      	mov	r2, r3
 800f74e:	2301      	movs	r3, #1
 800f750:	4093      	lsls	r3, r2
 800f752:	461a      	mov	r2, r3
 800f754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	4013      	ands	r3, r2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d106      	bne.n	800f76c <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f75e:	4b4b      	ldr	r3, [pc, #300]	; (800f88c <LmHandlerConfigure+0x15c>)
 800f760:	2201      	movs	r2, #1
 800f762:	2100      	movs	r1, #0
 800f764:	2000      	movs	r0, #0
 800f766:	f00e febb 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f76a:	e7fe      	b.n	800f76a <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f76c:	4b46      	ldr	r3, [pc, #280]	; (800f888 <LmHandlerConfigure+0x158>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	461a      	mov	r2, r3
 800f772:	4947      	ldr	r1, [pc, #284]	; (800f890 <LmHandlerConfigure+0x160>)
 800f774:	4847      	ldr	r0, [pc, #284]	; (800f894 <LmHandlerConfigure+0x164>)
 800f776:	f004 fbc3 	bl	8013f00 <LoRaMacInitialization>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f780:	f04f 33ff 	mov.w	r3, #4294967295
 800f784:	e07c      	b.n	800f880 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f786:	2305      	movs	r3, #5
 800f788:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f78e:	f107 0314 	add.w	r3, r7, #20
 800f792:	4618      	mov	r0, r3
 800f794:	f005 f902 	bl	801499c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f798:	4b3d      	ldr	r3, [pc, #244]	; (800f890 <LmHandlerConfigure+0x160>)
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	4a3c      	ldr	r2, [pc, #240]	; (800f890 <LmHandlerConfigure+0x160>)
 800f79e:	68d2      	ldr	r2, [r2, #12]
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7ff fc2a 	bl	800effc <SecureElementInitMcuID>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d002      	beq.n	800f7b4 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b2:	e065      	b.n	800f880 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f7b4:	2306      	movs	r3, #6
 800f7b6:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f7b8:	f107 0314 	add.w	r3, r7, #20
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f004 ff37 	bl	8014630 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	4a34      	ldr	r2, [pc, #208]	; (800f898 <LmHandlerConfigure+0x168>)
 800f7c6:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f7c8:	f107 0314 	add.w	r3, r7, #20
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f005 f8e5 	bl	801499c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f7d6:	4b30      	ldr	r3, [pc, #192]	; (800f898 <LmHandlerConfigure+0x168>)
 800f7d8:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f7da:	f107 0314 	add.w	r3, r7, #20
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f004 ff26 	bl	8014630 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f7e8:	4b2c      	ldr	r3, [pc, #176]	; (800f89c <LmHandlerConfigure+0x16c>)
 800f7ea:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f7ec:	f107 0314 	add.w	r3, r7, #20
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f004 ff1d 	bl	8014630 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f7f6:	f7ff fc81 	bl	800f0fc <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f7fa:	230f      	movs	r3, #15
 800f7fc:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f7fe:	2301      	movs	r3, #1
 800f800:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f802:	f107 0314 	add.w	r3, r7, #20
 800f806:	4618      	mov	r0, r3
 800f808:	f005 f8c8 	bl	801499c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f80c:	2310      	movs	r3, #16
 800f80e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f810:	2300      	movs	r3, #0
 800f812:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f814:	f107 0314 	add.w	r3, r7, #20
 800f818:	4618      	mov	r0, r3
 800f81a:	f005 f8bf 	bl	801499c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f81e:	2304      	movs	r3, #4
 800f820:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f822:	4b19      	ldr	r3, [pc, #100]	; (800f888 <LmHandlerConfigure+0x158>)
 800f824:	789b      	ldrb	r3, [r3, #2]
 800f826:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f828:	f107 0314 	add.w	r3, r7, #20
 800f82c:	4618      	mov	r0, r3
 800f82e:	f005 f8b5 	bl	801499c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f832:	2339      	movs	r3, #57	; 0x39
 800f834:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f836:	4b14      	ldr	r3, [pc, #80]	; (800f888 <LmHandlerConfigure+0x158>)
 800f838:	695b      	ldr	r3, [r3, #20]
 800f83a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f83c:	f107 0314 	add.w	r3, r7, #20
 800f840:	4618      	mov	r0, r3
 800f842:	f005 f8ab 	bl	801499c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f846:	230f      	movs	r3, #15
 800f848:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f84a:	4b0f      	ldr	r3, [pc, #60]	; (800f888 <LmHandlerConfigure+0x158>)
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	f107 020c 	add.w	r2, r7, #12
 800f852:	4611      	mov	r1, r2
 800f854:	4618      	mov	r0, r3
 800f856:	f007 ff84 	bl	8017762 <RegionGetPhyParam>
 800f85a:	4603      	mov	r3, r0
 800f85c:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	bf14      	ite	ne
 800f864:	2301      	movne	r3, #1
 800f866:	2300      	moveq	r3, #0
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	4b07      	ldr	r3, [pc, #28]	; (800f888 <LmHandlerConfigure+0x158>)
 800f86c:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f86e:	2014      	movs	r0, #20
 800f870:	f000 fac4 	bl	800fdfc <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f874:	4b04      	ldr	r3, [pc, #16]	; (800f888 <LmHandlerConfigure+0x158>)
 800f876:	79db      	ldrb	r3, [r3, #7]
 800f878:	4618      	mov	r0, r3
 800f87a:	f005 fe6b 	bl	8015554 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	3740      	adds	r7, #64	; 0x40
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	20000814 	.word	0x20000814
 800f88c:	0801f260 	.word	0x0801f260
 800f890:	20000840 	.word	0x20000840
 800f894:	20000830 	.word	0x20000830
 800f898:	200007e8 	.word	0x200007e8
 800f89c:	200007f0 	.word	0x200007f0

0800f8a0 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f8a4:	f002 fb36 	bl	8011f14 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f8a8:	f000 fd9c 	bl	80103e4 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f8ac:	f000 fd6c 	bl	8010388 <LmHandlerPackageIsTxPending>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f8b4:	bd80      	pop	{r7, pc}
	...

0800f8b8 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f8bc:	4b02      	ldr	r3, [pc, #8]	; (800f8c8 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f8be:	681b      	ldr	r3, [r3, #0]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bc80      	pop	{r7}
 800f8c6:	4770      	bx	lr
 800f8c8:	20000858 	.word	0x20000858

0800f8cc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b092      	sub	sp, #72	; 0x48
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	460a      	mov	r2, r1
 800f8d6:	71fb      	strb	r3, [r7, #7]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f8e2:	4b47      	ldr	r3, [pc, #284]	; (800fa00 <LmHandlerJoin+0x134>)
 800f8e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f8ee:	4b44      	ldr	r3, [pc, #272]	; (800fa00 <LmHandlerJoin+0x134>)
 800f8f0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f8f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f8f8:	79fb      	ldrb	r3, [r7, #7]
 800f8fa:	2b02      	cmp	r3, #2
 800f8fc:	d110      	bne.n	800f920 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f8fe:	2302      	movs	r3, #2
 800f900:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f904:	4b3f      	ldr	r3, [pc, #252]	; (800fa04 <LmHandlerJoin+0x138>)
 800f906:	2202      	movs	r2, #2
 800f908:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f90a:	4a3e      	ldr	r2, [pc, #248]	; (800fa04 <LmHandlerJoin+0x138>)
 800f90c:	79bb      	ldrb	r3, [r7, #6]
 800f90e:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f910:	f004 fda8 	bl	8014464 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f918:	4618      	mov	r0, r3
 800f91a:	f005 fbd3 	bl	80150c4 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f91e:	e06b      	b.n	800f9f8 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f920:	2301      	movs	r3, #1
 800f922:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f926:	4b37      	ldr	r3, [pc, #220]	; (800fa04 <LmHandlerJoin+0x138>)
 800f928:	2201      	movs	r2, #1
 800f92a:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f92c:	4b34      	ldr	r3, [pc, #208]	; (800fa00 <LmHandlerJoin+0x134>)
 800f92e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f932:	4b34      	ldr	r3, [pc, #208]	; (800fa04 <LmHandlerJoin+0x138>)
 800f934:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f936:	4b32      	ldr	r3, [pc, #200]	; (800fa00 <LmHandlerJoin+0x134>)
 800f938:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f93c:	4b31      	ldr	r3, [pc, #196]	; (800fa04 <LmHandlerJoin+0x138>)
 800f93e:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f940:	4b30      	ldr	r3, [pc, #192]	; (800fa04 <LmHandlerJoin+0x138>)
 800f942:	2200      	movs	r2, #0
 800f944:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f946:	4a2f      	ldr	r2, [pc, #188]	; (800fa04 <LmHandlerJoin+0x138>)
 800f948:	79bb      	ldrb	r3, [r7, #6]
 800f94a:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f94c:	4b2e      	ldr	r3, [pc, #184]	; (800fa08 <LmHandlerJoin+0x13c>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f083 0301 	eor.w	r3, r3, #1
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b00      	cmp	r3, #0
 800f958:	d034      	beq.n	800f9c4 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f95a:	231e      	movs	r3, #30
 800f95c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f95e:	4b28      	ldr	r3, [pc, #160]	; (800fa00 <LmHandlerJoin+0x134>)
 800f960:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f964:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f966:	f107 030c 	add.w	r3, r7, #12
 800f96a:	4618      	mov	r0, r3
 800f96c:	f005 f816 	bl	801499c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f970:	231f      	movs	r3, #31
 800f972:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f974:	4b22      	ldr	r3, [pc, #136]	; (800fa00 <LmHandlerJoin+0x134>)
 800f976:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f97a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f97c:	f107 030c 	add.w	r3, r7, #12
 800f980:	4618      	mov	r0, r3
 800f982:	f005 f80b 	bl	801499c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f986:	2321      	movs	r3, #33	; 0x21
 800f988:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f98a:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <LmHandlerJoin+0x134>)
 800f98c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f990:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f992:	f107 030c 	add.w	r3, r7, #12
 800f996:	4618      	mov	r0, r3
 800f998:	f005 f800 	bl	801499c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f99c:	2320      	movs	r3, #32
 800f99e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f9a0:	4b17      	ldr	r3, [pc, #92]	; (800fa00 <LmHandlerJoin+0x134>)
 800f9a2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f9a6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9a8:	f107 030c 	add.w	r3, r7, #12
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f004 fff5 	bl	801499c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f9b2:	2328      	movs	r3, #40	; 0x28
 800f9b4:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f9b6:	4b15      	ldr	r3, [pc, #84]	; (800fa0c <LmHandlerJoin+0x140>)
 800f9b8:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9ba:	f107 030c 	add.w	r3, r7, #12
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f004 ffec 	bl	801499c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f9c4:	f004 fd4e 	bl	8014464 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f9d0:	f107 030c 	add.w	r3, r7, #12
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f004 ffe1 	bl	801499c <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800f9da:	4b0d      	ldr	r3, [pc, #52]	; (800fa10 <LmHandlerJoin+0x144>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d004      	beq.n	800f9ee <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f9e4:	4b0a      	ldr	r3, [pc, #40]	; (800fa10 <LmHandlerJoin+0x144>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ea:	4806      	ldr	r0, [pc, #24]	; (800fa04 <LmHandlerJoin+0x138>)
 800f9ec:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800f9ee:	4b04      	ldr	r3, [pc, #16]	; (800fa00 <LmHandlerJoin+0x134>)
 800f9f0:	785b      	ldrb	r3, [r3, #1]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f000 f932 	bl	800fc5c <LmHandlerRequestClass>
}
 800f9f8:	bf00      	nop
 800f9fa:	3748      	adds	r7, #72	; 0x48
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	20000814 	.word	0x20000814
 800fa04:	200000b0 	.word	0x200000b0
 800fa08:	2000094e 	.word	0x2000094e
 800fa0c:	01000300 	.word	0x01000300
 800fa10:	2000082c 	.word	0x2000082c

0800fa14 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b08c      	sub	sp, #48	; 0x30
 800fa18:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800fa1e:	1d3b      	adds	r3, r7, #4
 800fa20:	4618      	mov	r0, r3
 800fa22:	f004 fe05 	bl	8014630 <LoRaMacMibGetRequestConfirm>
 800fa26:	4603      	mov	r3, r0
 800fa28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800fa2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa34:	7a3b      	ldrb	r3, [r7, #8]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d101      	bne.n	800fa3e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	e002      	b.n	800fa44 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e000      	b.n	800fa44 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800fa42:	2300      	movs	r3, #0
    }
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3730      	adds	r7, #48	; 0x30
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b08a      	sub	sp, #40	; 0x28
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	460b      	mov	r3, r1
 800fa56:	70fb      	strb	r3, [r7, #3]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fa5c:	23ff      	movs	r3, #255	; 0xff
 800fa5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800fa62:	f001 ffe3 	bl	8011a2c <LoRaMacIsBusy>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fa6c:	f06f 0301 	mvn.w	r3, #1
 800fa70:	e0be      	b.n	800fbf0 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800fa72:	f001 fff7 	bl	8011a64 <LoRaMacIsStopped>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fa7c:	f06f 0302 	mvn.w	r3, #2
 800fa80:	e0b6      	b.n	800fbf0 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fa82:	f7ff ffc7 	bl	800fa14 <LmHandlerJoinStatus>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d00a      	beq.n	800faa2 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800fa8c:	4b5a      	ldr	r3, [pc, #360]	; (800fbf8 <LmHandlerSend+0x1ac>)
 800fa8e:	79db      	ldrb	r3, [r3, #7]
 800fa90:	4a59      	ldr	r2, [pc, #356]	; (800fbf8 <LmHandlerSend+0x1ac>)
 800fa92:	7a12      	ldrb	r2, [r2, #8]
 800fa94:	4611      	mov	r1, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7ff ff18 	bl	800f8cc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fa9c:	f06f 0302 	mvn.w	r3, #2
 800faa0:	e0a6      	b.n	800fbf0 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800faa2:	4b56      	ldr	r3, [pc, #344]	; (800fbfc <LmHandlerSend+0x1b0>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	4798      	blx	r3
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00d      	beq.n	800facc <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	781a      	ldrb	r2, [r3, #0]
 800fab4:	4b51      	ldr	r3, [pc, #324]	; (800fbfc <LmHandlerSend+0x1b0>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d006      	beq.n	800facc <LmHandlerSend+0x80>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fac6:	f06f 0303 	mvn.w	r3, #3
 800faca:	e091      	b.n	800fbf0 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800facc:	4a4c      	ldr	r2, [pc, #304]	; (800fc00 <LmHandlerSend+0x1b4>)
 800face:	78fb      	ldrb	r3, [r7, #3]
 800fad0:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fad2:	78fb      	ldrb	r3, [r7, #3]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	bf14      	ite	ne
 800fad8:	2301      	movne	r3, #1
 800fada:	2300      	moveq	r3, #0
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fae0:	4b48      	ldr	r3, [pc, #288]	; (800fc04 <LmHandlerSend+0x1b8>)
 800fae2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fae6:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	785b      	ldrb	r3, [r3, #1]
 800faec:	f107 020c 	add.w	r2, r7, #12
 800faf0:	4611      	mov	r1, r2
 800faf2:	4618      	mov	r0, r3
 800faf4:	f004 fd16 	bl	8014524 <LoRaMacQueryTxPossible>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d009      	beq.n	800fb12 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fafe:	2300      	movs	r3, #0
 800fb00:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fb02:	2300      	movs	r3, #0
 800fb04:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fb0a:	23f9      	movs	r3, #249	; 0xf9
 800fb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb10:	e009      	b.n	800fb26 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	785b      	ldrb	r3, [r3, #1]
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fb26:	4b36      	ldr	r3, [pc, #216]	; (800fc00 <LmHandlerSend+0x1b4>)
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	3310      	adds	r3, #16
 800fb2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb30:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fb34:	4b33      	ldr	r3, [pc, #204]	; (800fc04 <LmHandlerSend+0x1b8>)
 800fb36:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fb3a:	4b31      	ldr	r3, [pc, #196]	; (800fc00 <LmHandlerSend+0x1b4>)
 800fb3c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fb3e:	78ba      	ldrb	r2, [r7, #2]
 800fb40:	f107 0310 	add.w	r3, r7, #16
 800fb44:	4611      	mov	r1, r2
 800fb46:	4618      	mov	r0, r3
 800fb48:	f005 fc0e 	bl	8015368 <LoRaMacMcpsRequest>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fb52:	6a3b      	ldr	r3, [r7, #32]
 800fb54:	4a2c      	ldr	r2, [pc, #176]	; (800fc08 <LmHandlerSend+0x1bc>)
 800fb56:	6013      	str	r3, [r2, #0]

    switch( status )
 800fb58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb5c:	2b11      	cmp	r3, #17
 800fb5e:	d840      	bhi.n	800fbe2 <LmHandlerSend+0x196>
 800fb60:	a201      	add	r2, pc, #4	; (adr r2, 800fb68 <LmHandlerSend+0x11c>)
 800fb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb66:	bf00      	nop
 800fb68:	0800fbb1 	.word	0x0800fbb1
 800fb6c:	0800fbc3 	.word	0x0800fbc3
 800fb70:	0800fbe3 	.word	0x0800fbe3
 800fb74:	0800fbe3 	.word	0x0800fbe3
 800fb78:	0800fbe3 	.word	0x0800fbe3
 800fb7c:	0800fbe3 	.word	0x0800fbe3
 800fb80:	0800fbe3 	.word	0x0800fbe3
 800fb84:	0800fbcb 	.word	0x0800fbcb
 800fb88:	0800fbe3 	.word	0x0800fbe3
 800fb8c:	0800fbe3 	.word	0x0800fbe3
 800fb90:	0800fbe3 	.word	0x0800fbe3
 800fb94:	0800fbdb 	.word	0x0800fbdb
 800fb98:	0800fbe3 	.word	0x0800fbe3
 800fb9c:	0800fbe3 	.word	0x0800fbe3
 800fba0:	0800fbc3 	.word	0x0800fbc3
 800fba4:	0800fbc3 	.word	0x0800fbc3
 800fba8:	0800fbc3 	.word	0x0800fbc3
 800fbac:	0800fbd3 	.word	0x0800fbd3
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fbb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fbb4:	f113 0f07 	cmn.w	r3, #7
 800fbb8:	d017      	beq.n	800fbea <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fbc0:	e013      	b.n	800fbea <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fbc2:	23fe      	movs	r3, #254	; 0xfe
 800fbc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbc8:	e010      	b.n	800fbec <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fbca:	23fd      	movs	r3, #253	; 0xfd
 800fbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbd0:	e00c      	b.n	800fbec <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fbd2:	23fb      	movs	r3, #251	; 0xfb
 800fbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbd8:	e008      	b.n	800fbec <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fbda:	23fa      	movs	r3, #250	; 0xfa
 800fbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbe0:	e004      	b.n	800fbec <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fbe2:	23ff      	movs	r3, #255	; 0xff
 800fbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fbe8:	e000      	b.n	800fbec <LmHandlerSend+0x1a0>
            break;
 800fbea:	bf00      	nop
    }

    return lmhStatus;
 800fbec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3728      	adds	r7, #40	; 0x28
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	200000b0 	.word	0x200000b0
 800fbfc:	20000800 	.word	0x20000800
 800fc00:	200000bc 	.word	0x200000bc
 800fc04:	20000814 	.word	0x20000814
 800fc08:	20000858 	.word	0x20000858

0800fc0c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fc12:	230a      	movs	r3, #10
 800fc14:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fc16:	463b      	mov	r3, r7
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f005 fa53 	bl	80150c4 <LoRaMacMlmeRequest>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	4a06      	ldr	r2, [pc, #24]	; (800fc40 <LmHandlerDeviceTimeReq+0x34>)
 800fc26:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fc28:	7dfb      	ldrb	r3, [r7, #23]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d101      	bne.n	800fc32 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e001      	b.n	800fc36 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fc32:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3718      	adds	r7, #24
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	20000858 	.word	0x20000858

0800fc44 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fc4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bc80      	pop	{r7}
 800fc5a:	4770      	bx	lr

0800fc5c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b08e      	sub	sp, #56	; 0x38
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fc66:	2300      	movs	r3, #0
 800fc68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fc6c:	f001 fede 	bl	8011a2c <LoRaMacIsBusy>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fc76:	f06f 0301 	mvn.w	r3, #1
 800fc7a:	e071      	b.n	800fd60 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fc7c:	f7ff feca 	bl	800fa14 <LmHandlerJoinStatus>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d002      	beq.n	800fc8c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc86:	f06f 0302 	mvn.w	r3, #2
 800fc8a:	e069      	b.n	800fd60 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fc90:	f107 030c 	add.w	r3, r7, #12
 800fc94:	4618      	mov	r0, r3
 800fc96:	f004 fccb 	bl	8014630 <LoRaMacMibGetRequestConfirm>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fca0:	f04f 33ff 	mov.w	r3, #4294967295
 800fca4:	e05c      	b.n	800fd60 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fca6:	7c3b      	ldrb	r3, [r7, #16]
 800fca8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fcac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d052      	beq.n	800fd5c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fcb6:	79fb      	ldrb	r3, [r7, #7]
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d028      	beq.n	800fd0e <LmHandlerRequestClass+0xb2>
 800fcbc:	2b02      	cmp	r3, #2
 800fcbe:	dc48      	bgt.n	800fd52 <LmHandlerRequestClass+0xf6>
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d002      	beq.n	800fcca <LmHandlerRequestClass+0x6e>
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d01e      	beq.n	800fd06 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fcc8:	e043      	b.n	800fd52 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fcca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d041      	beq.n	800fd56 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fcd2:	79fb      	ldrb	r3, [r7, #7]
 800fcd4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fcd6:	f107 030c 	add.w	r3, r7, #12
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f004 fe5e 	bl	801499c <LoRaMacMibSetRequestConfirm>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10b      	bne.n	800fcfe <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fce6:	4b20      	ldr	r3, [pc, #128]	; (800fd68 <LmHandlerRequestClass+0x10c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d032      	beq.n	800fd56 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fcf0:	4b1d      	ldr	r3, [pc, #116]	; (800fd68 <LmHandlerRequestClass+0x10c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcf6:	79fa      	ldrb	r2, [r7, #7]
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	4798      	blx	r3
                break;
 800fcfc:	e02b      	b.n	800fd56 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fcfe:	23ff      	movs	r3, #255	; 0xff
 800fd00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd04:	e027      	b.n	800fd56 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fd06:	23ff      	movs	r3, #255	; 0xff
 800fd08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd0c:	e026      	b.n	800fd5c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fd0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d003      	beq.n	800fd1e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fd16:	23ff      	movs	r3, #255	; 0xff
 800fd18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd1c:	e01d      	b.n	800fd5a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fd1e:	79fb      	ldrb	r3, [r7, #7]
 800fd20:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd22:	f107 030c 	add.w	r3, r7, #12
 800fd26:	4618      	mov	r0, r3
 800fd28:	f004 fe38 	bl	801499c <LoRaMacMibSetRequestConfirm>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10b      	bne.n	800fd4a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd32:	4b0d      	ldr	r3, [pc, #52]	; (800fd68 <LmHandlerRequestClass+0x10c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00e      	beq.n	800fd5a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd3c:	4b0a      	ldr	r3, [pc, #40]	; (800fd68 <LmHandlerRequestClass+0x10c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd42:	79fa      	ldrb	r2, [r7, #7]
 800fd44:	4610      	mov	r0, r2
 800fd46:	4798      	blx	r3
                break;
 800fd48:	e007      	b.n	800fd5a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fd4a:	23ff      	movs	r3, #255	; 0xff
 800fd4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd50:	e003      	b.n	800fd5a <LmHandlerRequestClass+0xfe>
                break;
 800fd52:	bf00      	nop
 800fd54:	e002      	b.n	800fd5c <LmHandlerRequestClass+0x100>
                break;
 800fd56:	bf00      	nop
 800fd58:	e000      	b.n	800fd5c <LmHandlerRequestClass+0x100>
                break;
 800fd5a:	bf00      	nop
        }
    }
    return errorStatus;
 800fd5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3738      	adds	r7, #56	; 0x38
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	2000082c 	.word	0x2000082c

0800fd6c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b08c      	sub	sp, #48	; 0x30
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d102      	bne.n	800fd80 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd7e:	e010      	b.n	800fda2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fd80:	2300      	movs	r3, #0
 800fd82:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd84:	f107 0308 	add.w	r3, r7, #8
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f004 fc51 	bl	8014630 <LoRaMacMibGetRequestConfirm>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd94:	f04f 33ff 	mov.w	r3, #4294967295
 800fd98:	e003      	b.n	800fda2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fd9a:	7b3a      	ldrb	r2, [r7, #12]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3730      	adds	r7, #48	; 0x30
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
	...

0800fdac <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08c      	sub	sp, #48	; 0x30
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d102      	bne.n	800fdc0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdba:	f04f 33ff 	mov.w	r3, #4294967295
 800fdbe:	e016      	b.n	800fdee <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fdc0:	231f      	movs	r3, #31
 800fdc2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fdc4:	f107 0308 	add.w	r3, r7, #8
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f004 fc31 	bl	8014630 <LoRaMacMibGetRequestConfirm>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d002      	beq.n	800fdda <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd8:	e009      	b.n	800fdee <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fdda:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f993 2000 	ldrsb.w	r2, [r3]
 800fde8:	4b03      	ldr	r3, [pc, #12]	; (800fdf8 <LmHandlerGetTxDatarate+0x4c>)
 800fdea:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3730      	adds	r7, #48	; 0x30
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20000814 	.word	0x20000814

0800fdfc <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08c      	sub	sp, #48	; 0x30
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fe04:	2322      	movs	r3, #34	; 0x22
 800fe06:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe0c:	f107 0308 	add.w	r3, r7, #8
 800fe10:	4618      	mov	r0, r3
 800fe12:	f004 fdc3 	bl	801499c <LoRaMacMibSetRequestConfirm>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe20:	e000      	b.n	800fe24 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3730      	adds	r7, #48	; 0x30
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fe34:	4b18      	ldr	r3, [pc, #96]	; (800fe98 <McpsConfirm+0x6c>)
 800fe36:	2201      	movs	r2, #1
 800fe38:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	785a      	ldrb	r2, [r3, #1]
 800fe3e:	4b16      	ldr	r3, [pc, #88]	; (800fe98 <McpsConfirm+0x6c>)
 800fe40:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	789b      	ldrb	r3, [r3, #2]
 800fe46:	b25a      	sxtb	r2, r3
 800fe48:	4b13      	ldr	r3, [pc, #76]	; (800fe98 <McpsConfirm+0x6c>)
 800fe4a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	4a11      	ldr	r2, [pc, #68]	; (800fe98 <McpsConfirm+0x6c>)
 800fe52:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fe5a:	4b0f      	ldr	r3, [pc, #60]	; (800fe98 <McpsConfirm+0x6c>)
 800fe5c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	691b      	ldr	r3, [r3, #16]
 800fe62:	b2da      	uxtb	r2, r3
 800fe64:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <McpsConfirm+0x6c>)
 800fe66:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	791b      	ldrb	r3, [r3, #4]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <McpsConfirm+0x6c>)
 800fe70:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800fe72:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <McpsConfirm+0x70>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d004      	beq.n	800fe86 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fe7c:	4b07      	ldr	r3, [pc, #28]	; (800fe9c <McpsConfirm+0x70>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe82:	4805      	ldr	r0, [pc, #20]	; (800fe98 <McpsConfirm+0x6c>)
 800fe84:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	2000      	movs	r0, #0
 800fe8a:	f000 f9eb 	bl	8010264 <LmHandlerPackagesNotify>
}
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	200000bc 	.word	0x200000bc
 800fe9c:	2000082c 	.word	0x2000082c

0800fea0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800feaa:	2300      	movs	r3, #0
 800feac:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800feae:	4b32      	ldr	r3, [pc, #200]	; (800ff78 <McpsIndication+0xd8>)
 800feb0:	2201      	movs	r2, #1
 800feb2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	785a      	ldrb	r2, [r3, #1]
 800feb8:	4b2f      	ldr	r3, [pc, #188]	; (800ff78 <McpsIndication+0xd8>)
 800feba:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800febc:	4b2e      	ldr	r3, [pc, #184]	; (800ff78 <McpsIndication+0xd8>)
 800febe:	785b      	ldrb	r3, [r3, #1]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d155      	bne.n	800ff70 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	791b      	ldrb	r3, [r3, #4]
 800fec8:	b25a      	sxtb	r2, r3
 800feca:	4b2b      	ldr	r3, [pc, #172]	; (800ff78 <McpsIndication+0xd8>)
 800fecc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fed4:	b25a      	sxtb	r2, r3
 800fed6:	4b28      	ldr	r3, [pc, #160]	; (800ff78 <McpsIndication+0xd8>)
 800fed8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fee0:	4b25      	ldr	r3, [pc, #148]	; (800ff78 <McpsIndication+0xd8>)
 800fee2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	78da      	ldrb	r2, [r3, #3]
 800fee8:	4b23      	ldr	r3, [pc, #140]	; (800ff78 <McpsIndication+0xd8>)
 800feea:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	691b      	ldr	r3, [r3, #16]
 800fef0:	4a21      	ldr	r2, [pc, #132]	; (800ff78 <McpsIndication+0xd8>)
 800fef2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	78db      	ldrb	r3, [r3, #3]
 800fef8:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	7b1b      	ldrb	r3, [r3, #12]
 800fefe:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ff06:	4b1d      	ldr	r3, [pc, #116]	; (800ff7c <McpsIndication+0xdc>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d007      	beq.n	800ff20 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ff10:	4b1a      	ldr	r3, [pc, #104]	; (800ff7c <McpsIndication+0xdc>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff16:	f107 0218 	add.w	r2, r7, #24
 800ff1a:	4917      	ldr	r1, [pc, #92]	; (800ff78 <McpsIndication+0xd8>)
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ff20:	4b16      	ldr	r3, [pc, #88]	; (800ff7c <McpsIndication+0xdc>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d007      	beq.n	800ff3a <McpsIndication+0x9a>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	7e1b      	ldrb	r3, [r3, #24]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d003      	beq.n	800ff3a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ff32:	4b12      	ldr	r3, [pc, #72]	; (800ff7c <McpsIndication+0xdc>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff38:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ff3a:	6879      	ldr	r1, [r7, #4]
 800ff3c:	2001      	movs	r0, #1
 800ff3e:	f000 f991 	bl	8010264 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ff42:	f107 0317 	add.w	r3, r7, #23
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7ff ff10 	bl	800fd6c <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	795b      	ldrb	r3, [r3, #5]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00e      	beq.n	800ff72 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800ff54:	2300      	movs	r3, #0
 800ff56:	733b      	strb	r3, [r7, #12]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	737b      	strb	r3, [r7, #13]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ff60:	f107 030c 	add.w	r3, r7, #12
 800ff64:	2201      	movs	r2, #1
 800ff66:	2100      	movs	r1, #0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7ff fd6f 	bl	800fa4c <LmHandlerSend>
 800ff6e:	e000      	b.n	800ff72 <McpsIndication+0xd2>
        return;
 800ff70:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	200000d8 	.word	0x200000d8
 800ff7c:	2000082c 	.word	0x2000082c

0800ff80 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b08c      	sub	sp, #48	; 0x30
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ff88:	4b4a      	ldr	r3, [pc, #296]	; (80100b4 <MlmeConfirm+0x134>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	785a      	ldrb	r2, [r3, #1]
 800ff92:	4b48      	ldr	r3, [pc, #288]	; (80100b4 <MlmeConfirm+0x134>)
 800ff94:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ff96:	4b48      	ldr	r3, [pc, #288]	; (80100b8 <MlmeConfirm+0x138>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d004      	beq.n	800ffaa <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ffa0:	4b45      	ldr	r3, [pc, #276]	; (80100b8 <MlmeConfirm+0x138>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa6:	4843      	ldr	r0, [pc, #268]	; (80100b4 <MlmeConfirm+0x134>)
 800ffa8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ffaa:	6879      	ldr	r1, [r7, #4]
 800ffac:	2002      	movs	r0, #2
 800ffae:	f000 f959 	bl	8010264 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	2b0c      	cmp	r3, #12
 800ffba:	d874      	bhi.n	80100a6 <MlmeConfirm+0x126>
 800ffbc:	a201      	add	r2, pc, #4	; (adr r2, 800ffc4 <MlmeConfirm+0x44>)
 800ffbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc2:	bf00      	nop
 800ffc4:	0800fff9 	.word	0x0800fff9
 800ffc8:	080100a7 	.word	0x080100a7
 800ffcc:	080100a7 	.word	0x080100a7
 800ffd0:	080100a7 	.word	0x080100a7
 800ffd4:	08010075 	.word	0x08010075
 800ffd8:	080100a7 	.word	0x080100a7
 800ffdc:	080100a7 	.word	0x080100a7
 800ffe0:	080100a7 	.word	0x080100a7
 800ffe4:	080100a7 	.word	0x080100a7
 800ffe8:	080100a7 	.word	0x080100a7
 800ffec:	080100a7 	.word	0x080100a7
 800fff0:	0801008d 	.word	0x0801008d
 800fff4:	080100a7 	.word	0x080100a7
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800fff8:	2306      	movs	r3, #6
 800fffa:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800fffc:	f107 0308 	add.w	r3, r7, #8
 8010000:	4618      	mov	r0, r3
 8010002:	f004 fb15 	bl	8014630 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8010006:	4b2d      	ldr	r3, [pc, #180]	; (80100bc <MlmeConfirm+0x13c>)
 8010008:	79db      	ldrb	r3, [r3, #7]
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	4611      	mov	r1, r2
 801000e:	4618      	mov	r0, r3
 8010010:	f7ff faf6 	bl	800f600 <SecureElementSetDevAddr>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d102      	bne.n	8010020 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	4a28      	ldr	r2, [pc, #160]	; (80100c0 <MlmeConfirm+0x140>)
 801001e:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8010020:	4828      	ldr	r0, [pc, #160]	; (80100c4 <MlmeConfirm+0x144>)
 8010022:	f7ff fec3 	bl	800fdac <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8010026:	4828      	ldr	r0, [pc, #160]	; (80100c8 <MlmeConfirm+0x148>)
 8010028:	f000 fa4e 	bl	80104c8 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801002c:	4b21      	ldr	r3, [pc, #132]	; (80100b4 <MlmeConfirm+0x134>)
 801002e:	785b      	ldrb	r3, [r3, #1]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d108      	bne.n	8010046 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010034:	4b21      	ldr	r3, [pc, #132]	; (80100bc <MlmeConfirm+0x13c>)
 8010036:	2200      	movs	r2, #0
 8010038:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 801003a:	4b24      	ldr	r3, [pc, #144]	; (80100cc <MlmeConfirm+0x14c>)
 801003c:	785b      	ldrb	r3, [r3, #1]
 801003e:	4618      	mov	r0, r3
 8010040:	f7ff fe0c 	bl	800fc5c <LmHandlerRequestClass>
 8010044:	e002      	b.n	801004c <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8010046:	4b1d      	ldr	r3, [pc, #116]	; (80100bc <MlmeConfirm+0x13c>)
 8010048:	22ff      	movs	r2, #255	; 0xff
 801004a:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 801004c:	4b1a      	ldr	r3, [pc, #104]	; (80100b8 <MlmeConfirm+0x138>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010052:	2b00      	cmp	r3, #0
 8010054:	d004      	beq.n	8010060 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8010056:	4b18      	ldr	r3, [pc, #96]	; (80100b8 <MlmeConfirm+0x138>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005c:	4817      	ldr	r0, [pc, #92]	; (80100bc <MlmeConfirm+0x13c>)
 801005e:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010060:	4b14      	ldr	r3, [pc, #80]	; (80100b4 <MlmeConfirm+0x134>)
 8010062:	785b      	ldrb	r3, [r3, #1]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d120      	bne.n	80100aa <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8010068:	4b14      	ldr	r3, [pc, #80]	; (80100bc <MlmeConfirm+0x13c>)
 801006a:	79db      	ldrb	r3, [r3, #7]
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff f859 	bl	800f124 <SecureElementPrintSessionKeys>
                }
            }
            break;
 8010072:	e01a      	b.n	80100aa <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8010074:	4b16      	ldr	r3, [pc, #88]	; (80100d0 <MlmeConfirm+0x150>)
 8010076:	2201      	movs	r2, #1
 8010078:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	7a1a      	ldrb	r2, [r3, #8]
 801007e:	4b14      	ldr	r3, [pc, #80]	; (80100d0 <MlmeConfirm+0x150>)
 8010080:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	7a5a      	ldrb	r2, [r3, #9]
 8010086:	4b12      	ldr	r3, [pc, #72]	; (80100d0 <MlmeConfirm+0x150>)
 8010088:	74da      	strb	r2, [r3, #19]
            }
            break;
 801008a:	e00f      	b.n	80100ac <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	785b      	ldrb	r3, [r3, #1]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d105      	bne.n	80100a0 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010094:	4b0d      	ldr	r3, [pc, #52]	; (80100cc <MlmeConfirm+0x14c>)
 8010096:	7c1b      	ldrb	r3, [r3, #16]
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff fdd3 	bl	800fc44 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801009e:	e005      	b.n	80100ac <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 80100a0:	f7ff fdb4 	bl	800fc0c <LmHandlerDeviceTimeReq>
            break;
 80100a4:	e002      	b.n	80100ac <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80100a6:	bf00      	nop
 80100a8:	e000      	b.n	80100ac <MlmeConfirm+0x12c>
            break;
 80100aa:	bf00      	nop
    }
}
 80100ac:	bf00      	nop
 80100ae:	3730      	adds	r7, #48	; 0x30
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	200000bc 	.word	0x200000bc
 80100b8:	2000082c 	.word	0x2000082c
 80100bc:	200000b0 	.word	0x200000b0
 80100c0:	200007e8 	.word	0x200007e8
 80100c4:	200000b4 	.word	0x200000b4
 80100c8:	200000b5 	.word	0x200000b5
 80100cc:	20000814 	.word	0x20000814
 80100d0:	200000d8 	.word	0x200000d8

080100d4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 80100de:	4b20      	ldr	r3, [pc, #128]	; (8010160 <MlmeIndication+0x8c>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	785a      	ldrb	r2, [r3, #1]
 80100e8:	4b1d      	ldr	r3, [pc, #116]	; (8010160 <MlmeIndication+0x8c>)
 80100ea:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	789b      	ldrb	r3, [r3, #2]
 80100f0:	b25a      	sxtb	r2, r3
 80100f2:	4b1b      	ldr	r3, [pc, #108]	; (8010160 <MlmeIndication+0x8c>)
 80100f4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100fc:	b25a      	sxtb	r2, r3
 80100fe:	4b18      	ldr	r3, [pc, #96]	; (8010160 <MlmeIndication+0x8c>)
 8010100:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010108:	4b15      	ldr	r3, [pc, #84]	; (8010160 <MlmeIndication+0x8c>)
 801010a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	78da      	ldrb	r2, [r3, #3]
 8010110:	4b13      	ldr	r3, [pc, #76]	; (8010160 <MlmeIndication+0x8c>)
 8010112:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	4a11      	ldr	r2, [pc, #68]	; (8010160 <MlmeIndication+0x8c>)
 801011a:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 801011c:	4b11      	ldr	r3, [pc, #68]	; (8010164 <MlmeIndication+0x90>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00d      	beq.n	8010142 <MlmeIndication+0x6e>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b0b      	cmp	r3, #11
 801012c:	d009      	beq.n	8010142 <MlmeIndication+0x6e>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	2b0f      	cmp	r3, #15
 8010134:	d005      	beq.n	8010142 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8010136:	4b0b      	ldr	r3, [pc, #44]	; (8010164 <MlmeIndication+0x90>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801013c:	4908      	ldr	r1, [pc, #32]	; (8010160 <MlmeIndication+0x8c>)
 801013e:	2000      	movs	r0, #0
 8010140:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	2003      	movs	r0, #3
 8010146:	f000 f88d 	bl	8010264 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2b0b      	cmp	r3, #11
 8010150:	d001      	beq.n	8010156 <MlmeIndication+0x82>
 8010152:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010154:	e000      	b.n	8010158 <MlmeIndication+0x84>
            break;
 8010156:	bf00      	nop
    }
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	200000d8 	.word	0x200000d8
 8010164:	2000082c 	.word	0x2000082c

08010168 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	4603      	mov	r3, r0
 8010170:	6039      	str	r1, [r7, #0]
 8010172:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d104      	bne.n	8010188 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 801017e:	f000 f9dd 	bl	801053c <LmhpCompliancePackageFactory>
 8010182:	4603      	mov	r3, r0
 8010184:	60fb      	str	r3, [r7, #12]
                break;
 8010186:	e00d      	b.n	80101a4 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8010188:	f107 020c 	add.w	r2, r7, #12
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	4611      	mov	r1, r2
 8010190:	4618      	mov	r0, r3
 8010192:	f000 fce9 	bl	8010b68 <LmhpPackagesRegister>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d002      	beq.n	80101a2 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 801019c:	f04f 33ff 	mov.w	r3, #4294967295
 80101a0:	e031      	b.n	8010206 <LmHandlerPackageRegister+0x9e>
                }
                break;
 80101a2:	bf00      	nop
            }
    }
    if( package != NULL )
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d02b      	beq.n	8010202 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 80101aa:	79fb      	ldrb	r3, [r7, #7]
 80101ac:	68fa      	ldr	r2, [r7, #12]
 80101ae:	4918      	ldr	r1, [pc, #96]	; (8010210 <LmHandlerPackageRegister+0xa8>)
 80101b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	4a16      	ldr	r2, [pc, #88]	; (8010210 <LmHandlerPackageRegister+0xa8>)
 80101b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101bc:	4a15      	ldr	r2, [pc, #84]	; (8010214 <LmHandlerPackageRegister+0xac>)
 80101be:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80101c0:	79fb      	ldrb	r3, [r7, #7]
 80101c2:	4a13      	ldr	r2, [pc, #76]	; (8010210 <LmHandlerPackageRegister+0xa8>)
 80101c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101c8:	4a13      	ldr	r2, [pc, #76]	; (8010218 <LmHandlerPackageRegister+0xb0>)
 80101ca:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	4a10      	ldr	r2, [pc, #64]	; (8010210 <LmHandlerPackageRegister+0xa8>)
 80101d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101d4:	4a11      	ldr	r2, [pc, #68]	; (801021c <LmHandlerPackageRegister+0xb4>)
 80101d6:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <LmHandlerPackageRegister+0xb8>)
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	79fb      	ldrb	r3, [r7, #7]
 80101de:	490c      	ldr	r1, [pc, #48]	; (8010210 <LmHandlerPackageRegister+0xa8>)
 80101e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80101e4:	6992      	ldr	r2, [r2, #24]
 80101e6:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80101e8:	79fb      	ldrb	r3, [r7, #7]
 80101ea:	4a09      	ldr	r2, [pc, #36]	; (8010210 <LmHandlerPackageRegister+0xa8>)
 80101ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	4a0c      	ldr	r2, [pc, #48]	; (8010224 <LmHandlerPackageRegister+0xbc>)
 80101f4:	6851      	ldr	r1, [r2, #4]
 80101f6:	4a0b      	ldr	r2, [pc, #44]	; (8010224 <LmHandlerPackageRegister+0xbc>)
 80101f8:	7852      	ldrb	r2, [r2, #1]
 80101fa:	6838      	ldr	r0, [r7, #0]
 80101fc:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80101fe:	2300      	movs	r3, #0
 8010200:	e001      	b.n	8010206 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010202:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010206:	4618      	mov	r0, r3
 8010208:	3710      	adds	r7, #16
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	20000800 	.word	0x20000800
 8010214:	0800f8cd 	.word	0x0800f8cd
 8010218:	0800fa4d 	.word	0x0800fa4d
 801021c:	0800fc0d 	.word	0x0800fc0d
 8010220:	2000082c 	.word	0x2000082c
 8010224:	200000ec 	.word	0x200000ec

08010228 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	2b04      	cmp	r3, #4
 8010236:	d80e      	bhi.n	8010256 <LmHandlerPackageIsInitialized+0x2e>
 8010238:	79fb      	ldrb	r3, [r7, #7]
 801023a:	4a09      	ldr	r2, [pc, #36]	; (8010260 <LmHandlerPackageIsInitialized+0x38>)
 801023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d007      	beq.n	8010256 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	4a05      	ldr	r2, [pc, #20]	; (8010260 <LmHandlerPackageIsInitialized+0x38>)
 801024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	4798      	blx	r3
 8010252:	4603      	mov	r3, r0
 8010254:	e000      	b.n	8010258 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 8010256:	2300      	movs	r3, #0
    }
}
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	20000800 	.word	0x20000800

08010264 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	4603      	mov	r3, r0
 801026c:	6039      	str	r1, [r7, #0]
 801026e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010270:	2300      	movs	r3, #0
 8010272:	73fb      	strb	r3, [r7, #15]
 8010274:	e07c      	b.n	8010370 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 8010276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801027a:	4a42      	ldr	r2, [pc, #264]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 801027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d06f      	beq.n	8010364 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	2b03      	cmp	r3, #3
 8010288:	d863      	bhi.n	8010352 <LmHandlerPackagesNotify+0xee>
 801028a:	a201      	add	r2, pc, #4	; (adr r2, 8010290 <LmHandlerPackagesNotify+0x2c>)
 801028c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010290:	080102a1 	.word	0x080102a1
 8010294:	080102c3 	.word	0x080102c3
 8010298:	0801030f 	.word	0x0801030f
 801029c:	08010331 	.word	0x08010331
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80102a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102a4:	4a37      	ldr	r2, [pc, #220]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 80102a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102aa:	69db      	ldr	r3, [r3, #28]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d052      	beq.n	8010356 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 80102b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102b4:	4a33      	ldr	r2, [pc, #204]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 80102b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ba:	69db      	ldr	r3, [r3, #28]
 80102bc:	6838      	ldr	r0, [r7, #0]
 80102be:	4798      	blx	r3
                        }
                        break;
 80102c0:	e049      	b.n	8010356 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80102c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102c6:	4a2f      	ldr	r2, [pc, #188]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 80102c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102cc:	6a1b      	ldr	r3, [r3, #32]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d043      	beq.n	801035a <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 80102d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102d6:	4a2b      	ldr	r2, [pc, #172]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 80102d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102dc:	781a      	ldrb	r2, [r3, #0]
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d00a      	beq.n	80102fc <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 80102e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d135      	bne.n	801035a <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 80102ee:	4b25      	ldr	r3, [pc, #148]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	4798      	blx	r3
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d02e      	beq.n	801035a <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80102fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010300:	4a20      	ldr	r2, [pc, #128]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 8010302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010306:	6a1b      	ldr	r3, [r3, #32]
 8010308:	6838      	ldr	r0, [r7, #0]
 801030a:	4798      	blx	r3
                        }
                        break;
 801030c:	e025      	b.n	801035a <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 801030e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010312:	4a1c      	ldr	r2, [pc, #112]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 8010314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031a:	2b00      	cmp	r3, #0
 801031c:	d01f      	beq.n	801035e <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 801031e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010322:	4a18      	ldr	r2, [pc, #96]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 8010324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032a:	6838      	ldr	r0, [r7, #0]
 801032c:	4798      	blx	r3
                        }
                        break;
 801032e:	e016      	b.n	801035e <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8010330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010334:	4a13      	ldr	r2, [pc, #76]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 8010336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801033a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801033c:	2b00      	cmp	r3, #0
 801033e:	d010      	beq.n	8010362 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8010340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010344:	4a0f      	ldr	r2, [pc, #60]	; (8010384 <LmHandlerPackagesNotify+0x120>)
 8010346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801034a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801034c:	6838      	ldr	r0, [r7, #0]
 801034e:	4798      	blx	r3
                        }
                        break;
 8010350:	e007      	b.n	8010362 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 8010352:	bf00      	nop
 8010354:	e006      	b.n	8010364 <LmHandlerPackagesNotify+0x100>
                        break;
 8010356:	bf00      	nop
 8010358:	e004      	b.n	8010364 <LmHandlerPackagesNotify+0x100>
                        break;
 801035a:	bf00      	nop
 801035c:	e002      	b.n	8010364 <LmHandlerPackagesNotify+0x100>
                        break;
 801035e:	bf00      	nop
 8010360:	e000      	b.n	8010364 <LmHandlerPackagesNotify+0x100>
                        break;
 8010362:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010368:	b2db      	uxtb	r3, r3
 801036a:	3301      	adds	r3, #1
 801036c:	b2db      	uxtb	r3, r3
 801036e:	73fb      	strb	r3, [r7, #15]
 8010370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010374:	2b04      	cmp	r3, #4
 8010376:	f77f af7e 	ble.w	8010276 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 801037a:	bf00      	nop
 801037c:	bf00      	nop
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	20000800 	.word	0x20000800

08010388 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801038e:	2300      	movs	r3, #0
 8010390:	71fb      	strb	r3, [r7, #7]
 8010392:	e01c      	b.n	80103ce <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8010394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010398:	4a11      	ldr	r2, [pc, #68]	; (80103e0 <LmHandlerPackageIsTxPending+0x58>)
 801039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00f      	beq.n	80103c2 <LmHandlerPackageIsTxPending+0x3a>
 80103a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00b      	beq.n	80103c2 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 80103aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ae:	4a0c      	ldr	r2, [pc, #48]	; (80103e0 <LmHandlerPackageIsTxPending+0x58>)
 80103b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	4798      	blx	r3
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d001      	beq.n	80103c2 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 80103be:	2301      	movs	r3, #1
 80103c0:	e00a      	b.n	80103d8 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	3301      	adds	r3, #1
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	71fb      	strb	r3, [r7, #7]
 80103ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103d2:	2b04      	cmp	r3, #4
 80103d4:	ddde      	ble.n	8010394 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 80103d6:	2300      	movs	r3, #0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	20000800 	.word	0x20000800

080103e4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103ea:	2300      	movs	r3, #0
 80103ec:	71fb      	strb	r3, [r7, #7]
 80103ee:	e022      	b.n	8010436 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80103f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f4:	4a14      	ldr	r2, [pc, #80]	; (8010448 <LmHandlerPackagesProcess+0x64>)
 80103f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d015      	beq.n	801042a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80103fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010402:	4a11      	ldr	r2, [pc, #68]	; (8010448 <LmHandlerPackagesProcess+0x64>)
 8010404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010408:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00d      	beq.n	801042a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff ff09 	bl	8010228 <LmHandlerPackageIsInitialized>
 8010416:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010418:	2b00      	cmp	r3, #0
 801041a:	d006      	beq.n	801042a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 801041c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010420:	4a09      	ldr	r2, [pc, #36]	; (8010448 <LmHandlerPackagesProcess+0x64>)
 8010422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010426:	695b      	ldr	r3, [r3, #20]
 8010428:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801042e:	b2db      	uxtb	r3, r3
 8010430:	3301      	adds	r3, #1
 8010432:	b2db      	uxtb	r3, r3
 8010434:	71fb      	strb	r3, [r7, #7]
 8010436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801043a:	2b04      	cmp	r3, #4
 801043c:	ddd8      	ble.n	80103f0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 801043e:	bf00      	nop
 8010440:	bf00      	nop
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	20000800 	.word	0x20000800

0801044c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	4603      	mov	r3, r0
 8010454:	6039      	str	r1, [r7, #0]
 8010456:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d102      	bne.n	8010464 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801045e:	f04f 33ff 	mov.w	r3, #4294967295
 8010462:	e00e      	b.n	8010482 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 8010464:	79fb      	ldrb	r3, [r7, #7]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d002      	beq.n	8010470 <LmHandlerGetVersion+0x24>
 801046a:	2b01      	cmp	r3, #1
 801046c:	d004      	beq.n	8010478 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 801046e:	e007      	b.n	8010480 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	4a06      	ldr	r2, [pc, #24]	; (801048c <LmHandlerGetVersion+0x40>)
 8010474:	601a      	str	r2, [r3, #0]
            break;
 8010476:	e003      	b.n	8010480 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	4a05      	ldr	r2, [pc, #20]	; (8010490 <LmHandlerGetVersion+0x44>)
 801047c:	601a      	str	r2, [r3, #0]
            break;
 801047e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	370c      	adds	r7, #12
 8010486:	46bd      	mov	sp, r7
 8010488:	bc80      	pop	{r7}
 801048a:	4770      	bx	lr
 801048c:	01000300 	.word	0x01000300
 8010490:	01010003 	.word	0x01010003

08010494 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010498:	f005 f882 	bl	80155a0 <LoRaMacDeInitialization>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d101      	bne.n	80104a6 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80104a2:	2300      	movs	r3, #0
 80104a4:	e001      	b.n	80104aa <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80104a6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	bd80      	pop	{r7, pc}

080104ae <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80104b2:	f004 f80d 	bl	80144d0 <LoRaMacHalt>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d101      	bne.n	80104c0 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80104bc:	2300      	movs	r3, #0
 80104be:	e001      	b.n	80104c4 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80104c0:	f06f 0301 	mvn.w	r3, #1
    }
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08c      	sub	sp, #48	; 0x30
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d102      	bne.n	80104dc <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80104d6:	f04f 33ff 	mov.w	r3, #4294967295
 80104da:	e016      	b.n	801050a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80104dc:	2320      	movs	r3, #32
 80104de:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80104e0:	f107 0308 	add.w	r3, r7, #8
 80104e4:	4618      	mov	r0, r3
 80104e6:	f004 f8a3 	bl	8014630 <LoRaMacMibGetRequestConfirm>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80104f0:	f04f 33ff 	mov.w	r3, #4294967295
 80104f4:	e009      	b.n	801050a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80104f6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f993 2000 	ldrsb.w	r2, [r3]
 8010504:	4b03      	ldr	r3, [pc, #12]	; (8010514 <LmHandlerGetTxPower+0x4c>)
 8010506:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3730      	adds	r7, #48	; 0x30
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	20000814 	.word	0x20000814

08010518 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010518:	b480      	push	{r7}
 801051a:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 801051c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010520:	4618      	mov	r0, r3
 8010522:	46bd      	mov	sp, r7
 8010524:	bc80      	pop	{r7}
 8010526:	4770      	bx	lr

08010528 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	4603      	mov	r3, r0
 8010530:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010532:	bf00      	nop
 8010534:	370c      	adds	r7, #12
 8010536:	46bd      	mov	sp, r7
 8010538:	bc80      	pop	{r7}
 801053a:	4770      	bx	lr

0801053c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 801053c:	b480      	push	{r7}
 801053e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010540:	4b02      	ldr	r3, [pc, #8]	; (801054c <LmhpCompliancePackageFactory+0x10>)
}
 8010542:	4618      	mov	r0, r3
 8010544:	46bd      	mov	sp, r7
 8010546:	bc80      	pop	{r7}
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	200000f4 	.word	0x200000f4

08010550 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	4613      	mov	r3, r2
 801055c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00f      	beq.n	8010584 <LmhpComplianceInit+0x34>
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00c      	beq.n	8010584 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 801056a:	4a0c      	ldr	r2, [pc, #48]	; (801059c <LmhpComplianceInit+0x4c>)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8010570:	4a0b      	ldr	r2, [pc, #44]	; (80105a0 <LmhpComplianceInit+0x50>)
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010576:	4a0a      	ldr	r2, [pc, #40]	; (80105a0 <LmhpComplianceInit+0x50>)
 8010578:	79fb      	ldrb	r3, [r7, #7]
 801057a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 801057c:	4b08      	ldr	r3, [pc, #32]	; (80105a0 <LmhpComplianceInit+0x50>)
 801057e:	2201      	movs	r2, #1
 8010580:	701a      	strb	r2, [r3, #0]
 8010582:	e006      	b.n	8010592 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010584:	4b05      	ldr	r3, [pc, #20]	; (801059c <LmhpComplianceInit+0x4c>)
 8010586:	2200      	movs	r2, #0
 8010588:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 801058a:	4b05      	ldr	r3, [pc, #20]	; (80105a0 <LmhpComplianceInit+0x50>)
 801058c:	2200      	movs	r2, #0
 801058e:	701a      	strb	r2, [r3, #0]
    }
}
 8010590:	bf00      	nop
 8010592:	bf00      	nop
 8010594:	3714      	adds	r7, #20
 8010596:	46bd      	mov	sp, r7
 8010598:	bc80      	pop	{r7}
 801059a:	4770      	bx	lr
 801059c:	2000097c 	.word	0x2000097c
 80105a0:	20000968 	.word	0x20000968

080105a4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80105a8:	4b02      	ldr	r3, [pc, #8]	; (80105b4 <LmhpComplianceIsInitialized+0x10>)
 80105aa:	781b      	ldrb	r3, [r3, #0]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bc80      	pop	{r7}
 80105b2:	4770      	bx	lr
 80105b4:	20000968 	.word	0x20000968

080105b8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80105b8:	b480      	push	{r7}
 80105ba:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80105bc:	4b07      	ldr	r3, [pc, #28]	; (80105dc <LmhpComplianceIsRunning+0x24>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	f083 0301 	eor.w	r3, r3, #1
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80105ca:	2300      	movs	r3, #0
 80105cc:	e001      	b.n	80105d2 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80105ce:	4b03      	ldr	r3, [pc, #12]	; (80105dc <LmhpComplianceIsRunning+0x24>)
 80105d0:	785b      	ldrb	r3, [r3, #1]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bc80      	pop	{r7}
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop
 80105dc:	20000968 	.word	0x20000968

080105e0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80105e8:	4b0f      	ldr	r3, [pc, #60]	; (8010628 <LmhpComplianceOnMcpsConfirm+0x48>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	f083 0301 	eor.w	r3, r3, #1
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d112      	bne.n	801061c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 80105f6:	4b0c      	ldr	r3, [pc, #48]	; (8010628 <LmhpComplianceOnMcpsConfirm+0x48>)
 80105f8:	785b      	ldrb	r3, [r3, #1]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00f      	beq.n	801061e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8010602:	2b01      	cmp	r3, #1
 8010604:	d10b      	bne.n	801061e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 801060a:	2b00      	cmp	r3, #0
 801060c:	d007      	beq.n	801061e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801060e:	4b06      	ldr	r3, [pc, #24]	; (8010628 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	3301      	adds	r3, #1
 8010614:	b29a      	uxth	r2, r3
 8010616:	4b04      	ldr	r3, [pc, #16]	; (8010628 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010618:	819a      	strh	r2, [r3, #12]
 801061a:	e000      	b.n	801061e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 801061c:	bf00      	nop
    }
}
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	bc80      	pop	{r7}
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	20000968 	.word	0x20000968

0801062c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010634:	4b12      	ldr	r3, [pc, #72]	; (8010680 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f083 0301 	eor.w	r3, r3, #1
 801063c:	b2db      	uxtb	r3, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	d116      	bne.n	8010670 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010642:	4b0f      	ldr	r3, [pc, #60]	; (8010680 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010644:	785b      	ldrb	r3, [r3, #1]
 8010646:	f083 0301 	eor.w	r3, r3, #1
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b00      	cmp	r3, #0
 801064e:	d111      	bne.n	8010674 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	2b05      	cmp	r3, #5
 8010656:	d10e      	bne.n	8010676 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010658:	4b09      	ldr	r3, [pc, #36]	; (8010680 <LmhpComplianceOnMlmeConfirm+0x54>)
 801065a:	2201      	movs	r2, #1
 801065c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	7a1a      	ldrb	r2, [r3, #8]
 8010662:	4b07      	ldr	r3, [pc, #28]	; (8010680 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010664:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	7a5a      	ldrb	r2, [r3, #9]
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <LmhpComplianceOnMlmeConfirm+0x54>)
 801066c:	741a      	strb	r2, [r3, #16]
 801066e:	e002      	b.n	8010676 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010670:	bf00      	nop
 8010672:	e000      	b.n	8010676 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010674:	bf00      	nop
    }
}
 8010676:	370c      	adds	r7, #12
 8010678:	46bd      	mov	sp, r7
 801067a:	bc80      	pop	{r7}
 801067c:	4770      	bx	lr
 801067e:	bf00      	nop
 8010680:	20000968 	.word	0x20000968

08010684 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 801068a:	4b36      	ldr	r3, [pc, #216]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f083 0301 	eor.w	r3, r3, #1
 8010692:	b2db      	uxtb	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d002      	beq.n	801069e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010698:	f04f 33ff 	mov.w	r3, #4294967295
 801069c:	e05e      	b.n	801075c <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 801069e:	4b31      	ldr	r3, [pc, #196]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106a0:	785b      	ldrb	r3, [r3, #1]
 80106a2:	f083 0301 	eor.w	r3, r3, #1
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80106ac:	2300      	movs	r3, #0
 80106ae:	e055      	b.n	801075c <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 80106b0:	4b2c      	ldr	r3, [pc, #176]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106b2:	7b9b      	ldrb	r3, [r3, #14]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d019      	beq.n	80106ec <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80106b8:	4b2a      	ldr	r3, [pc, #168]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80106be:	4b29      	ldr	r3, [pc, #164]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106c0:	2203      	movs	r2, #3
 80106c2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80106c4:	4b27      	ldr	r3, [pc, #156]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	2205      	movs	r2, #5
 80106ca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80106cc:	4b25      	ldr	r3, [pc, #148]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	3301      	adds	r3, #1
 80106d2:	4a24      	ldr	r2, [pc, #144]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106d4:	7bd2      	ldrb	r2, [r2, #15]
 80106d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80106d8:	4b22      	ldr	r3, [pc, #136]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	3302      	adds	r3, #2
 80106de:	4a21      	ldr	r2, [pc, #132]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106e0:	7c12      	ldrb	r2, [r2, #16]
 80106e2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80106e4:	4b1f      	ldr	r3, [pc, #124]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106e6:	2201      	movs	r2, #1
 80106e8:	709a      	strb	r2, [r3, #2]
 80106ea:	e01c      	b.n	8010726 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80106ec:	4b1d      	ldr	r3, [pc, #116]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106ee:	789b      	ldrb	r3, [r3, #2]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d005      	beq.n	8010700 <LmhpComplianceTxProcess+0x7c>
 80106f4:	2b04      	cmp	r3, #4
 80106f6:	d116      	bne.n	8010726 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 80106f8:	4b1a      	ldr	r3, [pc, #104]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 80106fa:	2201      	movs	r2, #1
 80106fc:	709a      	strb	r2, [r3, #2]
                break;
 80106fe:	e012      	b.n	8010726 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 8010700:	4b18      	ldr	r3, [pc, #96]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 8010702:	2202      	movs	r2, #2
 8010704:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010706:	4b17      	ldr	r3, [pc, #92]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 8010708:	899b      	ldrh	r3, [r3, #12]
 801070a:	0a1b      	lsrs	r3, r3, #8
 801070c:	b29a      	uxth	r2, r3
 801070e:	4b15      	ldr	r3, [pc, #84]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	b2d2      	uxtb	r2, r2
 8010714:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010716:	4b13      	ldr	r3, [pc, #76]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 8010718:	899a      	ldrh	r2, [r3, #12]
 801071a:	4b12      	ldr	r3, [pc, #72]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	3301      	adds	r3, #1
 8010720:	b2d2      	uxtb	r2, r2
 8010722:	701a      	strb	r2, [r3, #0]
                break;
 8010724:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010726:	23e0      	movs	r3, #224	; 0xe0
 8010728:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 801072a:	4b0e      	ldr	r3, [pc, #56]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 801072c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 801072e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010730:	4b0c      	ldr	r3, [pc, #48]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 8010732:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8010734:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 8010736:	480c      	ldr	r0, [pc, #48]	; (8010768 <LmhpComplianceTxProcess+0xe4>)
 8010738:	f00d fc5a 	bl	801dff0 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 801073c:	4b0b      	ldr	r3, [pc, #44]	; (801076c <LmhpComplianceTxProcess+0xe8>)
 801073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010740:	2b00      	cmp	r3, #0
 8010742:	d102      	bne.n	801074a <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 8010744:	f04f 33ff 	mov.w	r3, #4294967295
 8010748:	e008      	b.n	801075c <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 801074a:	4b08      	ldr	r3, [pc, #32]	; (801076c <LmhpComplianceTxProcess+0xe8>)
 801074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074e:	4a05      	ldr	r2, [pc, #20]	; (8010764 <LmhpComplianceTxProcess+0xe0>)
 8010750:	78d2      	ldrb	r2, [r2, #3]
 8010752:	4611      	mov	r1, r2
 8010754:	4638      	mov	r0, r7
 8010756:	2201      	movs	r2, #1
 8010758:	4798      	blx	r3
 801075a:	4603      	mov	r3, r0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	20000968 	.word	0x20000968
 8010768:	20000950 	.word	0x20000950
 801076c:	200000f4 	.word	0x200000f4

08010770 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b0a4      	sub	sp, #144	; 0x90
 8010774:	af02      	add	r7, sp, #8
 8010776:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010778:	4ba5      	ldr	r3, [pc, #660]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	f083 0301 	eor.w	r3, r3, #1
 8010780:	b2db      	uxtb	r3, r3
 8010782:	2b00      	cmp	r3, #0
 8010784:	f040 81c6 	bne.w	8010b14 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7b5b      	ldrb	r3, [r3, #13]
 801078c:	f083 0301 	eor.w	r3, r3, #1
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b00      	cmp	r3, #0
 8010794:	f040 81c0 	bne.w	8010b18 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010798:	4b9d      	ldr	r3, [pc, #628]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801079a:	785b      	ldrb	r3, [r3, #1]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00c      	beq.n	80107ba <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7b9b      	ldrb	r3, [r3, #14]
 80107a4:	f083 0301 	eor.w	r3, r3, #1
 80107a8:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d005      	beq.n	80107ba <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80107ae:	4b98      	ldr	r3, [pc, #608]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80107b0:	899b      	ldrh	r3, [r3, #12]
 80107b2:	3301      	adds	r3, #1
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	4b96      	ldr	r3, [pc, #600]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80107b8:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	78db      	ldrb	r3, [r3, #3]
 80107be:	2be0      	cmp	r3, #224	; 0xe0
 80107c0:	f040 81ac 	bne.w	8010b1c <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80107c4:	4b92      	ldr	r3, [pc, #584]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80107c6:	785b      	ldrb	r3, [r3, #1]
 80107c8:	f083 0301 	eor.w	r3, r3, #1
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d060      	beq.n	8010894 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	7b1b      	ldrb	r3, [r3, #12]
 80107d6:	2b04      	cmp	r3, #4
 80107d8:	f040 81a7 	bne.w	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	f040 81a1 	bne.w	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	3301      	adds	r3, #1
 80107ee:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	f040 819a 	bne.w	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	3302      	adds	r3, #2
 80107fc:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80107fe:	2b01      	cmp	r3, #1
 8010800:	f040 8193 	bne.w	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	3303      	adds	r3, #3
 801080a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 801080c:	2b01      	cmp	r3, #1
 801080e:	f040 818c 	bne.w	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 8010812:	4b7f      	ldr	r3, [pc, #508]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010814:	2200      	movs	r2, #0
 8010816:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010818:	4b7d      	ldr	r3, [pc, #500]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801081a:	22e0      	movs	r2, #224	; 0xe0
 801081c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 801081e:	4b7c      	ldr	r3, [pc, #496]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010820:	2202      	movs	r2, #2
 8010822:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010824:	4b7a      	ldr	r3, [pc, #488]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010826:	2200      	movs	r2, #0
 8010828:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 801082a:	4b79      	ldr	r3, [pc, #484]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801082c:	2200      	movs	r2, #0
 801082e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010830:	4b77      	ldr	r3, [pc, #476]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010832:	2200      	movs	r2, #0
 8010834:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8010836:	4b76      	ldr	r3, [pc, #472]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010838:	2200      	movs	r2, #0
 801083a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 801083c:	4b74      	ldr	r3, [pc, #464]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801083e:	2201      	movs	r2, #1
 8010840:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8010842:	4b73      	ldr	r3, [pc, #460]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010844:	2201      	movs	r2, #1
 8010846:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 8010848:	2304      	movs	r3, #4
 801084a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 801084c:	2301      	movs	r3, #1
 801084e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010850:	f107 030c 	add.w	r3, r7, #12
 8010854:	4618      	mov	r0, r3
 8010856:	f004 f8a1 	bl	801499c <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 801085a:	2000      	movs	r0, #0
 801085c:	f004 fe7a 	bl	8015554 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010860:	4b6c      	ldr	r3, [pc, #432]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d003      	beq.n	8010872 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 801086a:	4b6a      	ldr	r3, [pc, #424]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8010872:	2300      	movs	r3, #0
 8010874:	9300      	str	r3, [sp, #0]
 8010876:	4b68      	ldr	r3, [pc, #416]	; (8010a18 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010878:	2200      	movs	r2, #0
 801087a:	f04f 31ff 	mov.w	r1, #4294967295
 801087e:	4867      	ldr	r0, [pc, #412]	; (8010a1c <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010880:	f00d fb80 	bl	801df84 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010884:	f241 3188 	movw	r1, #5000	; 0x1388
 8010888:	4864      	ldr	r0, [pc, #400]	; (8010a1c <LmhpComplianceOnMcpsIndication+0x2ac>)
 801088a:	f00d fc8f 	bl	801e1ac <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 801088e:	f7ff fef9 	bl	8010684 <LmhpComplianceTxProcess>
 8010892:	e14a      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	781a      	ldrb	r2, [r3, #0]
 801089a:	4b5d      	ldr	r3, [pc, #372]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801089c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801089e:	4b5c      	ldr	r3, [pc, #368]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a0:	789b      	ldrb	r3, [r3, #2]
 80108a2:	2b0a      	cmp	r3, #10
 80108a4:	f200 813c 	bhi.w	8010b20 <LmhpComplianceOnMcpsIndication+0x3b0>
 80108a8:	a201      	add	r2, pc, #4	; (adr r2, 80108b0 <LmhpComplianceOnMcpsIndication+0x140>)
 80108aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ae:	bf00      	nop
 80108b0:	080108dd 	.word	0x080108dd
 80108b4:	08010927 	.word	0x08010927
 80108b8:	0801092f 	.word	0x0801092f
 80108bc:	0801093d 	.word	0x0801093d
 80108c0:	0801094b 	.word	0x0801094b
 80108c4:	080109a3 	.word	0x080109a3
 80108c8:	080109b5 	.word	0x080109b5
 80108cc:	08010a25 	.word	0x08010a25
 80108d0:	08010acd 	.word	0x08010acd
 80108d4:	08010adf 	.word	0x08010adf
 80108d8:	08010af9 	.word	0x08010af9
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80108dc:	484f      	ldr	r0, [pc, #316]	; (8010a1c <LmhpComplianceOnMcpsIndication+0x2ac>)
 80108de:	f00d fbf5 	bl	801e0cc <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80108e2:	4b4b      	ldr	r3, [pc, #300]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80108e8:	4b49      	ldr	r3, [pc, #292]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ea:	2200      	movs	r2, #0
 80108ec:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80108ee:	2304      	movs	r3, #4
 80108f0:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80108f2:	4b48      	ldr	r3, [pc, #288]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80108fa:	f107 030c 	add.w	r3, r7, #12
 80108fe:	4618      	mov	r0, r3
 8010900:	f004 f84c 	bl	801499c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010904:	4b43      	ldr	r3, [pc, #268]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	785b      	ldrb	r3, [r3, #1]
 801090a:	4618      	mov	r0, r3
 801090c:	f004 fe22 	bl	8015554 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010910:	4b40      	ldr	r3, [pc, #256]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	689b      	ldr	r3, [r3, #8]
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 8104 	beq.w	8010b24 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 801091c:	4b3d      	ldr	r3, [pc, #244]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	689b      	ldr	r3, [r3, #8]
 8010922:	4798      	blx	r3
                    }
                }
                break;
 8010924:	e0fe      	b.n	8010b24 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 8010926:	4b3a      	ldr	r3, [pc, #232]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010928:	2202      	movs	r2, #2
 801092a:	719a      	strb	r2, [r3, #6]
                break;
 801092c:	e0fd      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 801092e:	4b38      	ldr	r3, [pc, #224]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010930:	2201      	movs	r2, #1
 8010932:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8010934:	4b36      	ldr	r3, [pc, #216]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010936:	2201      	movs	r2, #1
 8010938:	709a      	strb	r2, [r3, #2]
                break;
 801093a:	e0f6      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 801093c:	4b34      	ldr	r3, [pc, #208]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801093e:	2200      	movs	r2, #0
 8010940:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8010942:	4b33      	ldr	r3, [pc, #204]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010944:	2201      	movs	r2, #1
 8010946:	709a      	strb	r2, [r3, #2]
                break;
 8010948:	e0ef      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	7b1a      	ldrb	r2, [r3, #12]
 801094e:	4b30      	ldr	r3, [pc, #192]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010950:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 8010952:	4b2f      	ldr	r3, [pc, #188]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	2204      	movs	r2, #4
 8010958:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801095a:	2301      	movs	r3, #1
 801095c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010960:	e012      	b.n	8010988 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	689a      	ldr	r2, [r3, #8]
 8010966:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801096a:	4413      	add	r3, r2
 801096c:	781a      	ldrb	r2, [r3, #0]
 801096e:	4b28      	ldr	r3, [pc, #160]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010970:	6899      	ldr	r1, [r3, #8]
 8010972:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010976:	440b      	add	r3, r1
 8010978:	3201      	adds	r2, #1
 801097a:	b2d2      	uxtb	r2, r2
 801097c:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801097e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010982:	3301      	adds	r3, #1
 8010984:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010988:	4b21      	ldr	r3, [pc, #132]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801098a:	795a      	ldrb	r2, [r3, #5]
 801098c:	4b20      	ldr	r3, [pc, #128]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801098e:	799b      	ldrb	r3, [r3, #6]
 8010990:	4293      	cmp	r3, r2
 8010992:	bf28      	it	cs
 8010994:	4613      	movcs	r3, r2
 8010996:	b2db      	uxtb	r3, r3
 8010998:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 801099c:	429a      	cmp	r2, r3
 801099e:	d3e0      	bcc.n	8010962 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 80109a0:	e0c3      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 80109a2:	2305      	movs	r3, #5
 80109a4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 80109a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80109ac:	4618      	mov	r0, r3
 80109ae:	f004 fb89 	bl	80150c4 <LoRaMacMlmeRequest>
                }
                break;
 80109b2:	e0ba      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80109b4:	4819      	ldr	r0, [pc, #100]	; (8010a1c <LmhpComplianceOnMcpsIndication+0x2ac>)
 80109b6:	f00d fb89 	bl	801e0cc <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80109ba:	4b15      	ldr	r3, [pc, #84]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109bc:	2200      	movs	r2, #0
 80109be:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80109c0:	4b13      	ldr	r3, [pc, #76]	; (8010a10 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80109c6:	2304      	movs	r3, #4
 80109c8:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80109ca:	4b12      	ldr	r3, [pc, #72]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80109d2:	f107 030c 	add.w	r3, r7, #12
 80109d6:	4618      	mov	r0, r3
 80109d8:	f003 ffe0 	bl	801499c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80109dc:	4b0d      	ldr	r3, [pc, #52]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	785b      	ldrb	r3, [r3, #1]
 80109e2:	4618      	mov	r0, r3
 80109e4:	f004 fdb6 	bl	8015554 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80109e8:	4b0a      	ldr	r3, [pc, #40]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d003      	beq.n	80109fa <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 80109f2:	4b08      	ldr	r3, [pc, #32]	; (8010a14 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 80109fa:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <LmhpComplianceOnMcpsIndication+0x2b0>)
 80109fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f000 8092 	beq.w	8010b28 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010a04:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a08:	2101      	movs	r1, #1
 8010a0a:	2002      	movs	r0, #2
 8010a0c:	4798      	blx	r3
                    }
                }
                break;
 8010a0e:	e08b      	b.n	8010b28 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010a10:	20000968 	.word	0x20000968
 8010a14:	2000097c 	.word	0x2000097c
 8010a18:	08010b41 	.word	0x08010b41
 8010a1c:	20000950 	.word	0x20000950
 8010a20:	200000f4 	.word	0x200000f4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	7b1b      	ldrb	r3, [r3, #12]
 8010a28:	2b03      	cmp	r3, #3
 8010a2a:	d113      	bne.n	8010a54 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010a2c:	2306      	movs	r3, #6
 8010a2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	3301      	adds	r3, #1
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	021b      	lsls	r3, r3, #8
 8010a3c:	b21a      	sxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	689b      	ldr	r3, [r3, #8]
 8010a42:	3302      	adds	r3, #2
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	b21b      	sxth	r3, r3
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	b21b      	sxth	r3, r3
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010a52:	e032      	b.n	8010aba <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	7b1b      	ldrb	r3, [r3, #12]
 8010a58:	2b07      	cmp	r3, #7
 8010a5a:	d12e      	bne.n	8010aba <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010a5c:	2307      	movs	r3, #7
 8010a5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	689b      	ldr	r3, [r3, #8]
 8010a66:	3301      	adds	r3, #1
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	021b      	lsls	r3, r3, #8
 8010a6c:	b21a      	sxth	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	689b      	ldr	r3, [r3, #8]
 8010a72:	3302      	adds	r3, #2
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	b21b      	sxth	r3, r3
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	b21b      	sxth	r3, r3
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	3303      	adds	r3, #3
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	041a      	lsls	r2, r3, #16
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	3304      	adds	r3, #4
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	021b      	lsls	r3, r3, #8
 8010a96:	4313      	orrs	r3, r2
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	6892      	ldr	r2, [r2, #8]
 8010a9c:	3205      	adds	r2, #5
 8010a9e:	7812      	ldrb	r2, [r2, #0]
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	2364      	movs	r3, #100	; 0x64
 8010aa6:	fb02 f303 	mul.w	r3, r2, r3
 8010aaa:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	3306      	adds	r3, #6
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	b25b      	sxtb	r3, r3
 8010ab6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 8010aba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f004 fb00 	bl	80150c4 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8010ac4:	4b1a      	ldr	r3, [pc, #104]	; (8010b30 <LmhpComplianceOnMcpsIndication+0x3c0>)
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	709a      	strb	r2, [r3, #2]
                }
                break;
 8010aca:	e02e      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8010acc:	230a      	movs	r3, #10
 8010ace:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f004 faf4 	bl	80150c4 <LoRaMacMlmeRequest>
                }
                break;
 8010adc:	e025      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010aec:	f107 030c 	add.w	r3, r7, #12
 8010af0:	4618      	mov	r0, r3
 8010af2:	f003 ff53 	bl	801499c <LoRaMacMibSetRequestConfirm>
                }
                break;
 8010af6:	e018      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010af8:	230d      	movs	r3, #13
 8010afa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	689b      	ldr	r3, [r3, #8]
 8010b02:	785b      	ldrb	r3, [r3, #1]
 8010b04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f004 fad9 	bl	80150c4 <LoRaMacMlmeRequest>
                }
                break;
 8010b12:	e00a      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b14:	bf00      	nop
 8010b16:	e008      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b18:	bf00      	nop
 8010b1a:	e006      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b1c:	bf00      	nop
 8010b1e:	e004      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010b20:	bf00      	nop
 8010b22:	e002      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010b24:	bf00      	nop
 8010b26:	e000      	b.n	8010b2a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010b28:	bf00      	nop
        }
    }
}
 8010b2a:	3788      	adds	r7, #136	; 0x88
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	20000968 	.word	0x20000968

08010b34 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010b34:	b480      	push	{r7}
 8010b36:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010b38:	bf00      	nop
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bc80      	pop	{r7}
 8010b3e:	4770      	bx	lr

08010b40 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010b48:	f7ff fd9c 	bl	8010684 <LmhpComplianceTxProcess>
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	370c      	adds	r7, #12
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bc80      	pop	{r7}
 8010b66:	4770      	bx	lr

08010b68 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	6039      	str	r1, [r7, #0]
 8010b72:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010b74:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bc80      	pop	{r7}
 8010b80:	4770      	bx	lr
	...

08010b84 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010b84:	b590      	push	{r4, r7, lr}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010b8a:	f00d fbb9 	bl	801e300 <UTIL_TIMER_GetCurrentTime>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	4a0f      	ldr	r2, [pc, #60]	; (8010bd0 <OnRadioTxDone+0x4c>)
 8010b92:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010b94:	4c0f      	ldr	r4, [pc, #60]	; (8010bd4 <OnRadioTxDone+0x50>)
 8010b96:	463b      	mov	r3, r7
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f00c fd2f 	bl	801d5fc <SysTimeGet>
 8010b9e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010ba2:	463a      	mov	r2, r7
 8010ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ba8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010bac:	4a0a      	ldr	r2, [pc, #40]	; (8010bd8 <OnRadioTxDone+0x54>)
 8010bae:	7813      	ldrb	r3, [r2, #0]
 8010bb0:	f043 0310 	orr.w	r3, r3, #16
 8010bb4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010bb6:	f003 f8e1 	bl	8013d7c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010bba:	4b08      	ldr	r3, [pc, #32]	; (8010bdc <OnRadioTxDone+0x58>)
 8010bbc:	2201      	movs	r2, #1
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	2002      	movs	r0, #2
 8010bc2:	f00d fc8d 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd90      	pop	{r4, r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	200015f4 	.word	0x200015f4
 8010bd4:	20000980 	.word	0x20000980
 8010bd8:	200015f0 	.word	0x200015f0
 8010bdc:	0801f2ac 	.word	0x0801f2ac

08010be0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	4608      	mov	r0, r1
 8010bea:	4611      	mov	r1, r2
 8010bec:	461a      	mov	r2, r3
 8010bee:	4603      	mov	r3, r0
 8010bf0:	817b      	strh	r3, [r7, #10]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	813b      	strh	r3, [r7, #8]
 8010bf6:	4613      	mov	r3, r2
 8010bf8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010bfa:	f00d fb81 	bl	801e300 <UTIL_TIMER_GetCurrentTime>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	4a0f      	ldr	r2, [pc, #60]	; (8010c40 <OnRadioRxDone+0x60>)
 8010c02:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010c04:	4a0e      	ldr	r2, [pc, #56]	; (8010c40 <OnRadioRxDone+0x60>)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010c0a:	4a0d      	ldr	r2, [pc, #52]	; (8010c40 <OnRadioRxDone+0x60>)
 8010c0c:	897b      	ldrh	r3, [r7, #10]
 8010c0e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010c10:	4a0b      	ldr	r2, [pc, #44]	; (8010c40 <OnRadioRxDone+0x60>)
 8010c12:	893b      	ldrh	r3, [r7, #8]
 8010c14:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010c16:	4a0a      	ldr	r2, [pc, #40]	; (8010c40 <OnRadioRxDone+0x60>)
 8010c18:	79fb      	ldrb	r3, [r7, #7]
 8010c1a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010c1c:	4a09      	ldr	r2, [pc, #36]	; (8010c44 <OnRadioRxDone+0x64>)
 8010c1e:	7813      	ldrb	r3, [r2, #0]
 8010c20:	f043 0308 	orr.w	r3, r3, #8
 8010c24:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010c26:	f003 f8a9 	bl	8013d7c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010c2a:	4b07      	ldr	r3, [pc, #28]	; (8010c48 <OnRadioRxDone+0x68>)
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	2100      	movs	r1, #0
 8010c30:	2002      	movs	r0, #2
 8010c32:	f00d fc55 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c36:	bf00      	nop
 8010c38:	3710      	adds	r7, #16
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	200015f8 	.word	0x200015f8
 8010c44:	200015f0 	.word	0x200015f0
 8010c48:	0801f2bc 	.word	0x0801f2bc

08010c4c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010c50:	4a07      	ldr	r2, [pc, #28]	; (8010c70 <OnRadioTxTimeout+0x24>)
 8010c52:	7813      	ldrb	r3, [r2, #0]
 8010c54:	f043 0304 	orr.w	r3, r3, #4
 8010c58:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c5a:	f003 f88f 	bl	8013d7c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010c5e:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <OnRadioTxTimeout+0x28>)
 8010c60:	2201      	movs	r2, #1
 8010c62:	2100      	movs	r1, #0
 8010c64:	2002      	movs	r0, #2
 8010c66:	f00d fc3b 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c6a:	bf00      	nop
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	200015f0 	.word	0x200015f0
 8010c74:	0801f2cc 	.word	0x0801f2cc

08010c78 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010c7c:	4a04      	ldr	r2, [pc, #16]	; (8010c90 <OnRadioRxError+0x18>)
 8010c7e:	7813      	ldrb	r3, [r2, #0]
 8010c80:	f043 0302 	orr.w	r3, r3, #2
 8010c84:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c86:	f003 f879 	bl	8013d7c <OnMacProcessNotify>
}
 8010c8a:	bf00      	nop
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	200015f0 	.word	0x200015f0

08010c94 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010c98:	4a07      	ldr	r2, [pc, #28]	; (8010cb8 <OnRadioRxTimeout+0x24>)
 8010c9a:	7813      	ldrb	r3, [r2, #0]
 8010c9c:	f043 0301 	orr.w	r3, r3, #1
 8010ca0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010ca2:	f003 f86b 	bl	8013d7c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010ca6:	4b05      	ldr	r3, [pc, #20]	; (8010cbc <OnRadioRxTimeout+0x28>)
 8010ca8:	2201      	movs	r2, #1
 8010caa:	2100      	movs	r1, #0
 8010cac:	2002      	movs	r0, #2
 8010cae:	f00d fc17 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010cb2:	bf00      	nop
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	200015f0 	.word	0x200015f0
 8010cbc:	0801f2dc 	.word	0x0801f2dc

08010cc0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010cc4:	4b08      	ldr	r3, [pc, #32]	; (8010ce8 <UpdateRxSlotIdleState+0x28>)
 8010cc6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d004      	beq.n	8010cd8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010cce:	4b07      	ldr	r3, [pc, #28]	; (8010cec <UpdateRxSlotIdleState+0x2c>)
 8010cd0:	2206      	movs	r2, #6
 8010cd2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010cd6:	e003      	b.n	8010ce0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010cd8:	4b04      	ldr	r3, [pc, #16]	; (8010cec <UpdateRxSlotIdleState+0x2c>)
 8010cda:	2202      	movs	r2, #2
 8010cdc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8010ce0:	bf00      	nop
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bc80      	pop	{r7}
 8010ce6:	4770      	bx	lr
 8010ce8:	20000e88 	.word	0x20000e88
 8010cec:	20000980 	.word	0x20000980

08010cf0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b092      	sub	sp, #72	; 0x48
 8010cf4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010cf6:	4b50      	ldr	r3, [pc, #320]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010cf8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d002      	beq.n	8010d06 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010d00:	4b4e      	ldr	r3, [pc, #312]	; (8010e3c <ProcessRadioTxDone+0x14c>)
 8010d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d04:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d06:	f3ef 8310 	mrs	r3, PRIMASK
 8010d0a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010d10:	b672      	cpsid	i
}
 8010d12:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010d14:	f00d faf4 	bl	801e300 <UTIL_TIMER_GetCurrentTime>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	4b49      	ldr	r3, [pc, #292]	; (8010e40 <ProcessRadioTxDone+0x150>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010d22:	4b48      	ldr	r3, [pc, #288]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010d24:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	4846      	ldr	r0, [pc, #280]	; (8010e48 <ProcessRadioTxDone+0x158>)
 8010d30:	f00d fa3c 	bl	801e1ac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010d34:	4844      	ldr	r0, [pc, #272]	; (8010e48 <ProcessRadioTxDone+0x158>)
 8010d36:	f00d f95b 	bl	801dff0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010d3a:	4b42      	ldr	r3, [pc, #264]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010d3c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	4619      	mov	r1, r3
 8010d46:	4841      	ldr	r0, [pc, #260]	; (8010e4c <ProcessRadioTxDone+0x15c>)
 8010d48:	f00d fa30 	bl	801e1ac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010d4c:	483f      	ldr	r0, [pc, #252]	; (8010e4c <ProcessRadioTxDone+0x15c>)
 8010d4e:	f00d f94f 	bl	801dff0 <UTIL_TIMER_Start>
 8010d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d54:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d58:	f383 8810 	msr	PRIMASK, r3
}
 8010d5c:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010d5e:	4b36      	ldr	r3, [pc, #216]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010d60:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d004      	beq.n	8010d72 <ProcessRadioTxDone+0x82>
 8010d68:	4b36      	ldr	r3, [pc, #216]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010d6a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d019      	beq.n	8010da6 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010d72:	2316      	movs	r3, #22
 8010d74:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d78:	4b2f      	ldr	r3, [pc, #188]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010d7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010d7e:	f107 0220 	add.w	r2, r7, #32
 8010d82:	4611      	mov	r1, r2
 8010d84:	4618      	mov	r0, r3
 8010d86:	f006 fcec 	bl	8017762 <RegionGetPhyParam>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010d8e:	4b2d      	ldr	r3, [pc, #180]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010d90:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	4413      	add	r3, r2
 8010d98:	4619      	mov	r1, r3
 8010d9a:	482d      	ldr	r0, [pc, #180]	; (8010e50 <ProcessRadioTxDone+0x160>)
 8010d9c:	f00d fa06 	bl	801e1ac <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010da0:	482b      	ldr	r0, [pc, #172]	; (8010e50 <ProcessRadioTxDone+0x160>)
 8010da2:	f00d f925 	bl	801dff0 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010da6:	4b26      	ldr	r3, [pc, #152]	; (8010e40 <ProcessRadioTxDone+0x150>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4a23      	ldr	r2, [pc, #140]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010dae:	4b25      	ldr	r3, [pc, #148]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010db0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010db4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010db6:	4b22      	ldr	r3, [pc, #136]	; (8010e40 <ProcessRadioTxDone+0x150>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f00c fc53 	bl	801d66c <SysTimeGetMcuTime>
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	4b1b      	ldr	r3, [pc, #108]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010dca:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8010dce:	9200      	str	r2, [sp, #0]
 8010dd0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010dd4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010dd8:	ca06      	ldmia	r2, {r1, r2}
 8010dda:	f00c fba8 	bl	801d52e <SysTimeSub>
 8010dde:	f107 0314 	add.w	r3, r7, #20
 8010de2:	463a      	mov	r2, r7
 8010de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010de8:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010dec:	4b15      	ldr	r3, [pc, #84]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010dee:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8010df2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010df4:	2301      	movs	r3, #1
 8010df6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010df8:	4b0f      	ldr	r3, [pc, #60]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010dfa:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d101      	bne.n	8010e06 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010e02:	2300      	movs	r3, #0
 8010e04:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010e06:	4b0c      	ldr	r3, [pc, #48]	; (8010e38 <ProcessRadioTxDone+0x148>)
 8010e08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e0c:	f107 0208 	add.w	r2, r7, #8
 8010e10:	4611      	mov	r1, r2
 8010e12:	4618      	mov	r0, r3
 8010e14:	f006 fcbd 	bl	8017792 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010e18:	4b0a      	ldr	r3, [pc, #40]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010e1a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010e1e:	f083 0301 	eor.w	r3, r3, #1
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d003      	beq.n	8010e30 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010e28:	4b06      	ldr	r3, [pc, #24]	; (8010e44 <ProcessRadioTxDone+0x154>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010e30:	bf00      	nop
 8010e32:	3740      	adds	r7, #64	; 0x40
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	20000e88 	.word	0x20000e88
 8010e3c:	0801f98c 	.word	0x0801f98c
 8010e40:	200015f4 	.word	0x200015f4
 8010e44:	20000980 	.word	0x20000980
 8010e48:	20000d00 	.word	0x20000d00
 8010e4c:	20000d18 	.word	0x20000d18
 8010e50:	20000d74 	.word	0x20000d74

08010e54 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010e58:	4b10      	ldr	r3, [pc, #64]	; (8010e9c <PrepareRxDoneAbort+0x48>)
 8010e5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e62:	4a0e      	ldr	r2, [pc, #56]	; (8010e9c <PrepareRxDoneAbort+0x48>)
 8010e64:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010e68:	4b0c      	ldr	r3, [pc, #48]	; (8010e9c <PrepareRxDoneAbort+0x48>)
 8010e6a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d002      	beq.n	8010e78 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010e72:	2000      	movs	r0, #0
 8010e74:	f001 f950 	bl	8012118 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010e78:	4a08      	ldr	r2, [pc, #32]	; (8010e9c <PrepareRxDoneAbort+0x48>)
 8010e7a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010e7e:	f043 0302 	orr.w	r3, r3, #2
 8010e82:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010e86:	4a05      	ldr	r2, [pc, #20]	; (8010e9c <PrepareRxDoneAbort+0x48>)
 8010e88:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010e8c:	f043 0310 	orr.w	r3, r3, #16
 8010e90:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010e94:	f7ff ff14 	bl	8010cc0 <UpdateRxSlotIdleState>
}
 8010e98:	bf00      	nop
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	20000980 	.word	0x20000980

08010ea0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010ea0:	b5b0      	push	{r4, r5, r7, lr}
 8010ea2:	b0aa      	sub	sp, #168	; 0xa8
 8010ea4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010ea6:	2313      	movs	r3, #19
 8010ea8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010eac:	4b78      	ldr	r3, [pc, #480]	; (8011090 <ProcessRadioRxDone+0x1f0>)
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010eb4:	4b76      	ldr	r3, [pc, #472]	; (8011090 <ProcessRadioRxDone+0x1f0>)
 8010eb6:	891b      	ldrh	r3, [r3, #8]
 8010eb8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010ebc:	4b74      	ldr	r3, [pc, #464]	; (8011090 <ProcessRadioRxDone+0x1f0>)
 8010ebe:	895b      	ldrh	r3, [r3, #10]
 8010ec0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010ec4:	4b72      	ldr	r3, [pc, #456]	; (8011090 <ProcessRadioRxDone+0x1f0>)
 8010ec6:	7b1b      	ldrb	r3, [r3, #12]
 8010ec8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010ed6:	4b6f      	ldr	r3, [pc, #444]	; (8011094 <ProcessRadioRxDone+0x1f4>)
 8010ed8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010eec:	2301      	movs	r3, #1
 8010eee:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010ef2:	4b69      	ldr	r3, [pc, #420]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010efa:	4a67      	ldr	r2, [pc, #412]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010efc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010f00:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010f04:	4a64      	ldr	r2, [pc, #400]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f06:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010f0a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010f0e:	4b62      	ldr	r3, [pc, #392]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f10:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010f14:	4b60      	ldr	r3, [pc, #384]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f16:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010f1a:	4b5f      	ldr	r3, [pc, #380]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010f22:	4b5d      	ldr	r3, [pc, #372]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010f2a:	4b5b      	ldr	r3, [pc, #364]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010f32:	4b59      	ldr	r3, [pc, #356]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010f3a:	4b57      	ldr	r3, [pc, #348]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010f42:	4b55      	ldr	r3, [pc, #340]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010f4a:	4b53      	ldr	r3, [pc, #332]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010f52:	4b51      	ldr	r3, [pc, #324]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f54:	2200      	movs	r2, #0
 8010f56:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010f5a:	4b4f      	ldr	r3, [pc, #316]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010f62:	4b4d      	ldr	r3, [pc, #308]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010f6a:	4b4b      	ldr	r3, [pc, #300]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010f72:	4b4a      	ldr	r3, [pc, #296]	; (801109c <ProcessRadioRxDone+0x1fc>)
 8010f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f76:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010f78:	4849      	ldr	r0, [pc, #292]	; (80110a0 <ProcessRadioRxDone+0x200>)
 8010f7a:	f00d f8a7 	bl	801e0cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010f7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010f82:	4619      	mov	r1, r3
 8010f84:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010f88:	f004 fc4b 	bl	8015822 <LoRaMacClassBRxBeacon>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d00b      	beq.n	8010faa <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010f92:	4a41      	ldr	r2, [pc, #260]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f94:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010f98:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010f9c:	4a3e      	ldr	r2, [pc, #248]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010f9e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010fa2:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8010fa6:	f000 bc1f 	b.w	80117e8 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010faa:	4b3a      	ldr	r3, [pc, #232]	; (8011094 <ProcessRadioRxDone+0x1f4>)
 8010fac:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d11e      	bne.n	8010ff2 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010fb4:	f004 fc48 	bl	8015848 <LoRaMacClassBIsPingExpected>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00a      	beq.n	8010fd4 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	f004 fbf9 	bl	80157b6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	f004 fc1a 	bl	80157fe <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010fca:	4b33      	ldr	r3, [pc, #204]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010fcc:	2204      	movs	r2, #4
 8010fce:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8010fd2:	e00e      	b.n	8010ff2 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010fd4:	f004 fc3f 	bl	8015856 <LoRaMacClassBIsMulticastExpected>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d009      	beq.n	8010ff2 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010fde:	2000      	movs	r0, #0
 8010fe0:	f004 fbf3 	bl	80157ca <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	f004 fc13 	bl	8015810 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010fea:	4b2b      	ldr	r3, [pc, #172]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010fec:	2205      	movs	r2, #5
 8010fee:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8010ff2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ffa:	4b27      	ldr	r3, [pc, #156]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 8011002:	f7ff ff27 	bl	8010e54 <PrepareRxDoneAbort>
        return;
 8011006:	e3ef      	b.n	80117e8 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011008:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801100c:	1c5a      	adds	r2, r3, #1
 801100e:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8011012:	461a      	mov	r2, r3
 8011014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011018:	4413      	add	r3, r2
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8011020:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011024:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011028:	b2db      	uxtb	r3, r3
 801102a:	3b01      	subs	r3, #1
 801102c:	2b06      	cmp	r3, #6
 801102e:	f200 83b4 	bhi.w	801179a <ProcessRadioRxDone+0x8fa>
 8011032:	a201      	add	r2, pc, #4	; (adr r2, 8011038 <ProcessRadioRxDone+0x198>)
 8011034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011038:	08011055 	.word	0x08011055
 801103c:	0801179b 	.word	0x0801179b
 8011040:	08011235 	.word	0x08011235
 8011044:	0801179b 	.word	0x0801179b
 8011048:	0801122d 	.word	0x0801122d
 801104c:	0801179b 	.word	0x0801179b
 8011050:	0801173f 	.word	0x0801173f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011054:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011058:	2b10      	cmp	r3, #16
 801105a:	d806      	bhi.n	801106a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801105c:	4b0e      	ldr	r3, [pc, #56]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 801105e:	2201      	movs	r2, #1
 8011060:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011064:	f7ff fef6 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 8011068:	e3be      	b.n	80117e8 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 801106a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801106e:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 8011070:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011074:	b2db      	uxtb	r3, r3
 8011076:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011078:	4b06      	ldr	r3, [pc, #24]	; (8011094 <ProcessRadioRxDone+0x1f4>)
 801107a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801107e:	2b00      	cmp	r3, #0
 8011080:	d010      	beq.n	80110a4 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011082:	4b05      	ldr	r3, [pc, #20]	; (8011098 <ProcessRadioRxDone+0x1f8>)
 8011084:	2201      	movs	r2, #1
 8011086:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801108a:	f7ff fee3 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 801108e:	e3ab      	b.n	80117e8 <ProcessRadioRxDone+0x948>
 8011090:	200015f8 	.word	0x200015f8
 8011094:	20000e88 	.word	0x20000e88
 8011098:	20000980 	.word	0x20000980
 801109c:	0801f98c 	.word	0x0801f98c
 80110a0:	20000d18 	.word	0x20000d18
            }

            SecureElementGetJoinEui( joinEui );
 80110a4:	1d3b      	adds	r3, r7, #4
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fe fa92 	bl	800f5d0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80110ac:	f107 0214 	add.w	r2, r7, #20
 80110b0:	1d3b      	adds	r3, r7, #4
 80110b2:	4619      	mov	r1, r3
 80110b4:	20ff      	movs	r0, #255	; 0xff
 80110b6:	f005 fdd5 	bl	8016c64 <LoRaMacCryptoHandleJoinAccept>
 80110ba:	4603      	mov	r3, r0
 80110bc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 80110c0:	2300      	movs	r3, #0
 80110c2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80110c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	b25b      	sxtb	r3, r3
 80110d2:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80110d4:	4bbb      	ldr	r3, [pc, #748]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80110d6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80110da:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80110dc:	4bb9      	ldr	r3, [pc, #740]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80110de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80110e2:	4639      	mov	r1, r7
 80110e4:	2207      	movs	r2, #7
 80110e6:	4618      	mov	r0, r3
 80110e8:	f006 fb76 	bl	80177d8 <RegionVerify>
 80110ec:	4603      	mov	r3, r0
 80110ee:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80110f2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	f040 808c 	bne.w	8011214 <ProcessRadioRxDone+0x374>
 80110fc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011100:	2b00      	cmp	r3, #0
 8011102:	f000 8087 	beq.w	8011214 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011106:	7f7b      	ldrb	r3, [r7, #29]
 8011108:	461a      	mov	r2, r3
 801110a:	4bae      	ldr	r3, [pc, #696]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801110c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8011110:	4bac      	ldr	r3, [pc, #688]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011112:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011116:	7fbb      	ldrb	r3, [r7, #30]
 8011118:	021b      	lsls	r3, r3, #8
 801111a:	4313      	orrs	r3, r2
 801111c:	4aa9      	ldr	r2, [pc, #676]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801111e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8011122:	4ba8      	ldr	r3, [pc, #672]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011124:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011128:	7ffb      	ldrb	r3, [r7, #31]
 801112a:	041b      	lsls	r3, r3, #16
 801112c:	4313      	orrs	r3, r2
 801112e:	4aa5      	ldr	r2, [pc, #660]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	4aa3      	ldr	r2, [pc, #652]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011138:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 801113c:	4ba1      	ldr	r3, [pc, #644]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801113e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8011142:	4619      	mov	r1, r3
 8011144:	2002      	movs	r0, #2
 8011146:	f7fe fa5b 	bl	800f600 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 801114a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801114e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8011152:	b2db      	uxtb	r3, r3
 8011154:	461a      	mov	r2, r3
 8011156:	4b9b      	ldr	r3, [pc, #620]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011158:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801115c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011160:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011164:	b2db      	uxtb	r3, r3
 8011166:	461a      	mov	r2, r3
 8011168:	4b96      	ldr	r3, [pc, #600]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801116a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801116e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011172:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011176:	b2db      	uxtb	r3, r3
 8011178:	461a      	mov	r2, r3
 801117a:	4b92      	ldr	r3, [pc, #584]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801117c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011180:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011184:	461a      	mov	r2, r3
 8011186:	4b8f      	ldr	r3, [pc, #572]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011188:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 801118a:	4b8e      	ldr	r3, [pc, #568]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801118e:	2b00      	cmp	r3, #0
 8011190:	d102      	bne.n	8011198 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011192:	4b8c      	ldr	r3, [pc, #560]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011194:	2201      	movs	r2, #1
 8011196:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011198:	4b8a      	ldr	r3, [pc, #552]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801119c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80111a0:	fb02 f303 	mul.w	r3, r2, r3
 80111a4:	4a87      	ldr	r2, [pc, #540]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111a6:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80111a8:	4b86      	ldr	r3, [pc, #536]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111ac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80111b0:	4a84      	ldr	r2, [pc, #528]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111b2:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80111b4:	4b83      	ldr	r3, [pc, #524]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111b6:	2201      	movs	r2, #1
 80111b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80111bc:	4b81      	ldr	r3, [pc, #516]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80111c4:	f107 0314 	add.w	r3, r7, #20
 80111c8:	3312      	adds	r3, #18
 80111ca:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 80111cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	3b11      	subs	r3, #17
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80111da:	4b7a      	ldr	r3, [pc, #488]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80111e4:	4611      	mov	r1, r2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f006 fb0d 	bl	8017806 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80111ec:	4b75      	ldr	r3, [pc, #468]	; (80113c4 <ProcessRadioRxDone+0x524>)
 80111ee:	2202      	movs	r2, #2
 80111f0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80111f4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80111f8:	4618      	mov	r0, r3
 80111fa:	f005 f80d 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 82d2 	beq.w	80117aa <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8011206:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801120a:	4619      	mov	r1, r3
 801120c:	2000      	movs	r0, #0
 801120e:	f004 ff77 	bl	8016100 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011212:	e2ca      	b.n	80117aa <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011214:	2001      	movs	r0, #1
 8011216:	f004 ffff 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	f000 82c3 	beq.w	80117a8 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8011222:	2101      	movs	r1, #1
 8011224:	2007      	movs	r0, #7
 8011226:	f004 ff6b 	bl	8016100 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 801122a:	e2bd      	b.n	80117a8 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801122c:	4b66      	ldr	r3, [pc, #408]	; (80113c8 <ProcessRadioRxDone+0x528>)
 801122e:	2201      	movs	r2, #1
 8011230:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011234:	4b63      	ldr	r3, [pc, #396]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011236:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801123a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801123e:	4b62      	ldr	r3, [pc, #392]	; (80113c8 <ProcessRadioRxDone+0x528>)
 8011240:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011244:	b25b      	sxtb	r3, r3
 8011246:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 801124a:	230d      	movs	r3, #13
 801124c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011250:	4b5c      	ldr	r3, [pc, #368]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011252:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011256:	2b00      	cmp	r3, #0
 8011258:	d002      	beq.n	8011260 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801125a:	230e      	movs	r3, #14
 801125c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011260:	4b58      	ldr	r3, [pc, #352]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011262:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011266:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801126a:	4611      	mov	r1, r2
 801126c:	4618      	mov	r0, r3
 801126e:	f006 fa78 	bl	8017762 <RegionGetPhyParam>
 8011272:	4603      	mov	r3, r0
 8011274:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011276:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801127a:	3b0d      	subs	r3, #13
 801127c:	b29b      	uxth	r3, r3
 801127e:	b21b      	sxth	r3, r3
 8011280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011284:	b21a      	sxth	r2, r3
 8011286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011288:	b21b      	sxth	r3, r3
 801128a:	429a      	cmp	r2, r3
 801128c:	dc03      	bgt.n	8011296 <ProcessRadioRxDone+0x3f6>
 801128e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011292:	2b0b      	cmp	r3, #11
 8011294:	d806      	bhi.n	80112a4 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011296:	4b4c      	ldr	r3, [pc, #304]	; (80113c8 <ProcessRadioRxDone+0x528>)
 8011298:	2201      	movs	r2, #1
 801129a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801129e:	f7ff fdd9 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 80112a2:	e2a1      	b.n	80117e8 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 80112a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 80112aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80112b4:	4b45      	ldr	r3, [pc, #276]	; (80113cc <ProcessRadioRxDone+0x52c>)
 80112b6:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80112b8:	23ff      	movs	r3, #255	; 0xff
 80112ba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80112be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80112c2:	4618      	mov	r0, r3
 80112c4:	f005 ffd0 	bl	8017268 <LoRaMacParserData>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d006      	beq.n	80112dc <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112ce:	4b3e      	ldr	r3, [pc, #248]	; (80113c8 <ProcessRadioRxDone+0x528>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80112d6:	f7ff fdbd 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 80112da:	e285      	b.n	80117e8 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80112dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112de:	4a3a      	ldr	r2, [pc, #232]	; (80113c8 <ProcessRadioRxDone+0x528>)
 80112e0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80112e4:	f107 020e 	add.w	r2, r7, #14
 80112e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80112ec:	4611      	mov	r1, r2
 80112ee:	4618      	mov	r0, r3
 80112f0:	f002 fc6b 	bl	8013bca <DetermineFrameType>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d006      	beq.n	8011308 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112fa:	4b33      	ldr	r3, [pc, #204]	; (80113c8 <ProcessRadioRxDone+0x528>)
 80112fc:	2201      	movs	r2, #1
 80112fe:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011302:	f7ff fda7 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 8011306:	e26f      	b.n	80117e8 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011308:	2300      	movs	r3, #0
 801130a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 801130e:	2300      	movs	r3, #0
 8011310:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011312:	2300      	movs	r3, #0
 8011314:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011318:	e04f      	b.n	80113ba <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801131a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 801131e:	4929      	ldr	r1, [pc, #164]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011320:	4613      	mov	r3, r2
 8011322:	005b      	lsls	r3, r3, #1
 8011324:	4413      	add	r3, r2
 8011326:	011b      	lsls	r3, r3, #4
 8011328:	440b      	add	r3, r1
 801132a:	33ec      	adds	r3, #236	; 0xec
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011330:	429a      	cmp	r2, r3
 8011332:	d13d      	bne.n	80113b0 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8011334:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011338:	4922      	ldr	r1, [pc, #136]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801133a:	4613      	mov	r3, r2
 801133c:	005b      	lsls	r3, r3, #1
 801133e:	4413      	add	r3, r2
 8011340:	011b      	lsls	r3, r3, #4
 8011342:	440b      	add	r3, r1
 8011344:	33e9      	adds	r3, #233	; 0xe9
 8011346:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011348:	2b00      	cmp	r3, #0
 801134a:	d031      	beq.n	80113b0 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 801134c:	2301      	movs	r3, #1
 801134e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8011352:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011356:	491b      	ldr	r1, [pc, #108]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011358:	4613      	mov	r3, r2
 801135a:	005b      	lsls	r3, r3, #1
 801135c:	4413      	add	r3, r2
 801135e:	011b      	lsls	r3, r3, #4
 8011360:	440b      	add	r3, r1
 8011362:	33ea      	adds	r3, #234	; 0xea
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 801136a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 801136e:	4915      	ldr	r1, [pc, #84]	; (80113c4 <ProcessRadioRxDone+0x524>)
 8011370:	4613      	mov	r3, r2
 8011372:	005b      	lsls	r3, r3, #1
 8011374:	4413      	add	r3, r2
 8011376:	011b      	lsls	r3, r3, #4
 8011378:	440b      	add	r3, r1
 801137a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011384:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011388:	490e      	ldr	r1, [pc, #56]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801138a:	4613      	mov	r3, r2
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	4413      	add	r3, r2
 8011390:	011b      	lsls	r3, r3, #4
 8011392:	440b      	add	r3, r1
 8011394:	33ec      	adds	r3, #236	; 0xec
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801139c:	4b09      	ldr	r3, [pc, #36]	; (80113c4 <ProcessRadioRxDone+0x524>)
 801139e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113a2:	2b02      	cmp	r3, #2
 80113a4:	d114      	bne.n	80113d0 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80113a6:	4b08      	ldr	r3, [pc, #32]	; (80113c8 <ProcessRadioRxDone+0x528>)
 80113a8:	2203      	movs	r2, #3
 80113aa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 80113ae:	e00f      	b.n	80113d0 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80113b0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80113b4:	3301      	adds	r3, #1
 80113b6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80113ba:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d0ab      	beq.n	801131a <ProcessRadioRxDone+0x47a>
 80113c2:	e006      	b.n	80113d2 <ProcessRadioRxDone+0x532>
 80113c4:	20000e88 	.word	0x20000e88
 80113c8:	20000980 	.word	0x20000980
 80113cc:	20000bb8 	.word	0x20000bb8
                    break;
 80113d0:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80113d2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d117      	bne.n	801140a <ProcessRadioRxDone+0x56a>
 80113da:	7bbb      	ldrb	r3, [r7, #14]
 80113dc:	2b03      	cmp	r3, #3
 80113de:	d10d      	bne.n	80113fc <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80113e0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80113e4:	f003 0320 	and.w	r3, r3, #32
 80113e8:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d106      	bne.n	80113fc <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 80113ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80113f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113f6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d006      	beq.n	801140a <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80113fc:	4bb3      	ldr	r3, [pc, #716]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80113fe:	2201      	movs	r2, #1
 8011400:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011404:	f7ff fd26 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 8011408:	e1ee      	b.n	80117e8 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 801140a:	2315      	movs	r3, #21
 801140c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011410:	4baf      	ldr	r3, [pc, #700]	; (80116d0 <ProcessRadioRxDone+0x830>)
 8011412:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011416:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801141a:	4611      	mov	r1, r2
 801141c:	4618      	mov	r0, r3
 801141e:	f006 f9a0 	bl	8017762 <RegionGetPhyParam>
 8011422:	4603      	mov	r3, r0
 8011424:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8011426:	7bb9      	ldrb	r1, [r7, #14]
 8011428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801142a:	b29b      	uxth	r3, r3
 801142c:	4da8      	ldr	r5, [pc, #672]	; (80116d0 <ProcessRadioRxDone+0x830>)
 801142e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8011432:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8011436:	f107 0210 	add.w	r2, r7, #16
 801143a:	9202      	str	r2, [sp, #8]
 801143c:	f107 020f 	add.w	r2, r7, #15
 8011440:	9201      	str	r2, [sp, #4]
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8011448:	4622      	mov	r2, r4
 801144a:	f000 fe8d 	bl	8012168 <GetFCntDown>
 801144e:	4603      	mov	r3, r0
 8011450:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011454:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011458:	2b00      	cmp	r3, #0
 801145a:	d035      	beq.n	80114c8 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801145c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011460:	2b07      	cmp	r3, #7
 8011462:	d119      	bne.n	8011498 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011464:	4b99      	ldr	r3, [pc, #612]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011466:	2208      	movs	r2, #8
 8011468:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 801146c:	4b98      	ldr	r3, [pc, #608]	; (80116d0 <ProcessRadioRxDone+0x830>)
 801146e:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011472:	2b00      	cmp	r3, #0
 8011474:	d11d      	bne.n	80114b2 <ProcessRadioRxDone+0x612>
 8011476:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801147a:	f023 031f 	bic.w	r3, r3, #31
 801147e:	b2db      	uxtb	r3, r3
 8011480:	2ba0      	cmp	r3, #160	; 0xa0
 8011482:	d116      	bne.n	80114b2 <ProcessRadioRxDone+0x612>
 8011484:	4b92      	ldr	r3, [pc, #584]	; (80116d0 <ProcessRadioRxDone+0x830>)
 8011486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801148a:	429a      	cmp	r2, r3
 801148c:	d111      	bne.n	80114b2 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801148e:	4b90      	ldr	r3, [pc, #576]	; (80116d0 <ProcessRadioRxDone+0x830>)
 8011490:	2201      	movs	r2, #1
 8011492:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011496:	e00c      	b.n	80114b2 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011498:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801149c:	2b08      	cmp	r3, #8
 801149e:	d104      	bne.n	80114aa <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80114a0:	4b8a      	ldr	r3, [pc, #552]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80114a2:	220a      	movs	r2, #10
 80114a4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80114a8:	e003      	b.n	80114b2 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114aa:	4b88      	ldr	r3, [pc, #544]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80114ac:	2201      	movs	r2, #1
 80114ae:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	4a85      	ldr	r2, [pc, #532]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80114b6:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	4a83      	ldr	r2, [pc, #524]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80114be:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 80114c2:	f7ff fcc7 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 80114c6:	e18f      	b.n	80117e8 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80114c8:	7bfa      	ldrb	r2, [r7, #15]
 80114ca:	6939      	ldr	r1, [r7, #16]
 80114cc:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80114d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	460b      	mov	r3, r1
 80114d8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80114dc:	f005 fd24 	bl	8016f28 <LoRaMacCryptoUnsecureMessage>
 80114e0:	4603      	mov	r3, r0
 80114e2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80114e6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00f      	beq.n	801150e <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80114ee:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114f2:	2b02      	cmp	r3, #2
 80114f4:	d104      	bne.n	8011500 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80114f6:	4b75      	ldr	r3, [pc, #468]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80114f8:	220b      	movs	r2, #11
 80114fa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80114fe:	e003      	b.n	8011508 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011500:	4b72      	ldr	r3, [pc, #456]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011502:	220c      	movs	r2, #12
 8011504:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8011508:	f7ff fca4 	bl	8010e54 <PrepareRxDoneAbort>
                return;
 801150c:	e16c      	b.n	80117e8 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801150e:	4b6f      	ldr	r3, [pc, #444]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 8011516:	4a6d      	ldr	r2, [pc, #436]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011518:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801151c:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 8011520:	4b6a      	ldr	r3, [pc, #424]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011522:	2200      	movs	r2, #0
 8011524:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 8011528:	4b68      	ldr	r3, [pc, #416]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801152a:	2200      	movs	r2, #0
 801152c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	4a66      	ldr	r2, [pc, #408]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011534:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	4a64      	ldr	r2, [pc, #400]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801153c:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011540:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011544:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011548:	b2db      	uxtb	r3, r3
 801154a:	2b00      	cmp	r3, #0
 801154c:	bf14      	ite	ne
 801154e:	2301      	movne	r3, #1
 8011550:	2300      	moveq	r3, #0
 8011552:	b2da      	uxtb	r2, r3
 8011554:	4b5d      	ldr	r3, [pc, #372]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011556:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801155a:	4b5c      	ldr	r3, [pc, #368]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801155c:	2200      	movs	r2, #0
 801155e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011562:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011566:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801156a:	b2db      	uxtb	r3, r3
 801156c:	2b00      	cmp	r3, #0
 801156e:	bf14      	ite	ne
 8011570:	2301      	movne	r3, #1
 8011572:	2300      	moveq	r3, #0
 8011574:	b2da      	uxtb	r2, r3
 8011576:	4b55      	ldr	r3, [pc, #340]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011578:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801157c:	4b53      	ldr	r3, [pc, #332]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801157e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011582:	2b00      	cmp	r3, #0
 8011584:	d004      	beq.n	8011590 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011586:	4b51      	ldr	r3, [pc, #324]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011588:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801158c:	2b01      	cmp	r3, #1
 801158e:	d102      	bne.n	8011596 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011590:	4b4f      	ldr	r3, [pc, #316]	; (80116d0 <ProcessRadioRxDone+0x830>)
 8011592:	2200      	movs	r2, #0
 8011594:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011596:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801159a:	2b01      	cmp	r3, #1
 801159c:	d104      	bne.n	80115a8 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801159e:	4b4b      	ldr	r3, [pc, #300]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80115a0:	2202      	movs	r2, #2
 80115a2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80115a6:	e01f      	b.n	80115e8 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80115a8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80115ac:	f023 031f 	bic.w	r3, r3, #31
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2ba0      	cmp	r3, #160	; 0xa0
 80115b4:	d110      	bne.n	80115d8 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80115b6:	4b46      	ldr	r3, [pc, #280]	; (80116d0 <ProcessRadioRxDone+0x830>)
 80115b8:	2201      	movs	r2, #1
 80115ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80115be:	4b44      	ldr	r3, [pc, #272]	; (80116d0 <ProcessRadioRxDone+0x830>)
 80115c0:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d102      	bne.n	80115ce <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80115c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80115ca:	4a41      	ldr	r2, [pc, #260]	; (80116d0 <ProcessRadioRxDone+0x830>)
 80115cc:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80115ce:	4b3f      	ldr	r3, [pc, #252]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80115d6:	e007      	b.n	80115e8 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80115d8:	4b3d      	ldr	r3, [pc, #244]	; (80116d0 <ProcessRadioRxDone+0x830>)
 80115da:	2200      	movs	r2, #0
 80115dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80115e0:	4b3a      	ldr	r3, [pc, #232]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 80115e8:	4b39      	ldr	r3, [pc, #228]	; (80116d0 <ProcessRadioRxDone+0x830>)
 80115ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d106      	bne.n	8011600 <ProcessRadioRxDone+0x760>
 80115f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115f6:	f003 0310 	and.w	r3, r3, #16
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d008      	beq.n	8011612 <ProcessRadioRxDone+0x772>
 8011600:	4b33      	ldr	r3, [pc, #204]	; (80116d0 <ProcessRadioRxDone+0x830>)
 8011602:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011606:	2b00      	cmp	r3, #0
 8011608:	d103      	bne.n	8011612 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 801160a:	4b30      	ldr	r3, [pc, #192]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801160c:	2201      	movs	r2, #1
 801160e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011612:	4b2e      	ldr	r3, [pc, #184]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011614:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011618:	4a2c      	ldr	r2, [pc, #176]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801161a:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 801161e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8011622:	4618      	mov	r0, r3
 8011624:	f001 fef2 	bl	801340c <RemoveMacCommands>

            switch( fType )
 8011628:	7bbb      	ldrb	r3, [r7, #14]
 801162a:	2b03      	cmp	r3, #3
 801162c:	d878      	bhi.n	8011720 <ProcessRadioRxDone+0x880>
 801162e:	a201      	add	r2, pc, #4	; (adr r2, 8011634 <ProcessRadioRxDone+0x794>)
 8011630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011634:	08011645 	.word	0x08011645
 8011638:	08011695 	.word	0x08011695
 801163c:	080116d5 	.word	0x080116d5
 8011640:	080116fb 	.word	0x080116fb
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011644:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011648:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801164c:	b2db      	uxtb	r3, r3
 801164e:	461c      	mov	r4, r3
 8011650:	4b1e      	ldr	r3, [pc, #120]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011652:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011656:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 801165a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801165e:	f102 0010 	add.w	r0, r2, #16
 8011662:	9300      	str	r3, [sp, #0]
 8011664:	460b      	mov	r3, r1
 8011666:	4622      	mov	r2, r4
 8011668:	2100      	movs	r1, #0
 801166a:	f000 fef7 	bl	801245c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801166e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8011672:	4b16      	ldr	r3, [pc, #88]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011674:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801167a:	4a14      	ldr	r2, [pc, #80]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801167c:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011680:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011684:	4b11      	ldr	r3, [pc, #68]	; (80116cc <ProcessRadioRxDone+0x82c>)
 8011686:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 801168a:	4b10      	ldr	r3, [pc, #64]	; (80116cc <ProcessRadioRxDone+0x82c>)
 801168c:	2201      	movs	r2, #1
 801168e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8011692:	e04c      	b.n	801172e <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011694:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011698:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801169c:	b2db      	uxtb	r3, r3
 801169e:	461c      	mov	r4, r3
 80116a0:	4b0a      	ldr	r3, [pc, #40]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80116a2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116a6:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80116aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80116ae:	f102 0010 	add.w	r0, r2, #16
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	460b      	mov	r3, r1
 80116b6:	4622      	mov	r2, r4
 80116b8:	2100      	movs	r1, #0
 80116ba:	f000 fecf 	bl	801245c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116be:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116c2:	4b02      	ldr	r3, [pc, #8]	; (80116cc <ProcessRadioRxDone+0x82c>)
 80116c4:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 80116c8:	e031      	b.n	801172e <ProcessRadioRxDone+0x88e>
 80116ca:	bf00      	nop
 80116cc:	20000980 	.word	0x20000980
 80116d0:	20000e88 	.word	0x20000e88
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80116d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80116d6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80116da:	4b45      	ldr	r3, [pc, #276]	; (80117f0 <ProcessRadioRxDone+0x950>)
 80116dc:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116e0:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	460b      	mov	r3, r1
 80116e8:	2100      	movs	r1, #0
 80116ea:	f000 feb7 	bl	801245c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116ee:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116f2:	4b3f      	ldr	r3, [pc, #252]	; (80117f0 <ProcessRadioRxDone+0x950>)
 80116f4:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 80116f8:	e019      	b.n	801172e <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116fa:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116fe:	4b3c      	ldr	r3, [pc, #240]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011700:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011706:	4a3a      	ldr	r2, [pc, #232]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011708:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801170c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011710:	4b37      	ldr	r3, [pc, #220]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011712:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011716:	4b36      	ldr	r3, [pc, #216]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011718:	2201      	movs	r2, #1
 801171a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801171e:	e006      	b.n	801172e <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011720:	4b33      	ldr	r3, [pc, #204]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011722:	2201      	movs	r2, #1
 8011724:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8011728:	f7ff fb94 	bl	8010e54 <PrepareRxDoneAbort>
                    break;
 801172c:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801172e:	4a30      	ldr	r2, [pc, #192]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011730:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011734:	f043 0302 	orr.w	r3, r3, #2
 8011738:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 801173c:	e035      	b.n	80117aa <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801173e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011742:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011746:	18d1      	adds	r1, r2, r3
 8011748:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801174c:	b29b      	uxth	r3, r3
 801174e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011752:	1ad3      	subs	r3, r2, r3
 8011754:	b29b      	uxth	r3, r3
 8011756:	461a      	mov	r2, r3
 8011758:	4826      	ldr	r0, [pc, #152]	; (80117f4 <ProcessRadioRxDone+0x954>)
 801175a:	f008 fb1c 	bl	8019d96 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801175e:	4b24      	ldr	r3, [pc, #144]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011760:	2203      	movs	r2, #3
 8011762:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011766:	4b22      	ldr	r3, [pc, #136]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011768:	2200      	movs	r2, #0
 801176a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801176e:	4b20      	ldr	r3, [pc, #128]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011770:	4a20      	ldr	r2, [pc, #128]	; (80117f4 <ProcessRadioRxDone+0x954>)
 8011772:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011776:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801177a:	b2da      	uxtb	r2, r3
 801177c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	b2da      	uxtb	r2, r3
 8011784:	4b1a      	ldr	r3, [pc, #104]	; (80117f0 <ProcessRadioRxDone+0x950>)
 8011786:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 801178a:	4a19      	ldr	r2, [pc, #100]	; (80117f0 <ProcessRadioRxDone+0x950>)
 801178c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011790:	f043 0302 	orr.w	r3, r3, #2
 8011794:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011798:	e007      	b.n	80117aa <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801179a:	4b15      	ldr	r3, [pc, #84]	; (80117f0 <ProcessRadioRxDone+0x950>)
 801179c:	2201      	movs	r2, #1
 801179e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 80117a2:	f7ff fb57 	bl	8010e54 <PrepareRxDoneAbort>
            break;
 80117a6:	e000      	b.n	80117aa <ProcessRadioRxDone+0x90a>
            break;
 80117a8:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 80117aa:	4b11      	ldr	r3, [pc, #68]	; (80117f0 <ProcessRadioRxDone+0x950>)
 80117ac:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d008      	beq.n	80117c6 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80117b4:	4b0e      	ldr	r3, [pc, #56]	; (80117f0 <ProcessRadioRxDone+0x950>)
 80117b6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d00b      	beq.n	80117d6 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 80117be:	2000      	movs	r0, #0
 80117c0:	f000 fcaa 	bl	8012118 <OnAckTimeoutTimerEvent>
 80117c4:	e007      	b.n	80117d6 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80117c6:	4b0c      	ldr	r3, [pc, #48]	; (80117f8 <ProcessRadioRxDone+0x958>)
 80117c8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d102      	bne.n	80117d6 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 80117d0:	2000      	movs	r0, #0
 80117d2:	f000 fca1 	bl	8012118 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80117d6:	4a06      	ldr	r2, [pc, #24]	; (80117f0 <ProcessRadioRxDone+0x950>)
 80117d8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117dc:	f043 0310 	orr.w	r3, r3, #16
 80117e0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80117e4:	f7ff fa6c 	bl	8010cc0 <UpdateRxSlotIdleState>
}
 80117e8:	3798      	adds	r7, #152	; 0x98
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bdb0      	pop	{r4, r5, r7, pc}
 80117ee:	bf00      	nop
 80117f0:	20000980 	.word	0x20000980
 80117f4:	20000bb8 	.word	0x20000bb8
 80117f8:	20000e88 	.word	0x20000e88

080117fc <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011800:	4b11      	ldr	r3, [pc, #68]	; (8011848 <ProcessRadioTxTimeout+0x4c>)
 8011802:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011806:	2b02      	cmp	r3, #2
 8011808:	d002      	beq.n	8011810 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801180a:	4b10      	ldr	r3, [pc, #64]	; (801184c <ProcessRadioTxTimeout+0x50>)
 801180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801180e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011810:	f7ff fa56 	bl	8010cc0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011814:	4b0e      	ldr	r3, [pc, #56]	; (8011850 <ProcessRadioTxTimeout+0x54>)
 8011816:	2202      	movs	r2, #2
 8011818:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801181c:	2002      	movs	r0, #2
 801181e:	f004 fcc7 	bl	80161b0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011822:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <ProcessRadioTxTimeout+0x54>)
 8011824:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011828:	2b00      	cmp	r3, #0
 801182a:	d003      	beq.n	8011834 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 801182c:	4b08      	ldr	r3, [pc, #32]	; (8011850 <ProcessRadioTxTimeout+0x54>)
 801182e:	2201      	movs	r2, #1
 8011830:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011834:	4a06      	ldr	r2, [pc, #24]	; (8011850 <ProcessRadioTxTimeout+0x54>)
 8011836:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801183a:	f043 0310 	orr.w	r3, r3, #16
 801183e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8011842:	bf00      	nop
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	20000e88 	.word	0x20000e88
 801184c:	0801f98c 	.word	0x0801f98c
 8011850:	20000980 	.word	0x20000980

08011854 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	4603      	mov	r3, r0
 801185c:	460a      	mov	r2, r1
 801185e:	71fb      	strb	r3, [r7, #7]
 8011860:	4613      	mov	r3, r2
 8011862:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011864:	2300      	movs	r3, #0
 8011866:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011868:	4b40      	ldr	r3, [pc, #256]	; (801196c <HandleRadioRxErrorTimeout+0x118>)
 801186a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801186e:	2b02      	cmp	r3, #2
 8011870:	d002      	beq.n	8011878 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011872:	4b3f      	ldr	r3, [pc, #252]	; (8011970 <HandleRadioRxErrorTimeout+0x11c>)
 8011874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011876:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011878:	f003 ffdf 	bl	801583a <LoRaMacClassBIsBeaconExpected>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d007      	beq.n	8011892 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011882:	2002      	movs	r0, #2
 8011884:	f003 ff8d 	bl	80157a2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011888:	2000      	movs	r0, #0
 801188a:	f003 ffaf 	bl	80157ec <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801188e:	2301      	movs	r3, #1
 8011890:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011892:	4b36      	ldr	r3, [pc, #216]	; (801196c <HandleRadioRxErrorTimeout+0x118>)
 8011894:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011898:	2b01      	cmp	r3, #1
 801189a:	d119      	bne.n	80118d0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801189c:	f003 ffd4 	bl	8015848 <LoRaMacClassBIsPingExpected>
 80118a0:	4603      	mov	r3, r0
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d007      	beq.n	80118b6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80118a6:	2000      	movs	r0, #0
 80118a8:	f003 ff85 	bl	80157b6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80118ac:	2000      	movs	r0, #0
 80118ae:	f003 ffa6 	bl	80157fe <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80118b2:	2301      	movs	r3, #1
 80118b4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80118b6:	f003 ffce 	bl	8015856 <LoRaMacClassBIsMulticastExpected>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d007      	beq.n	80118d0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80118c0:	2000      	movs	r0, #0
 80118c2:	f003 ff82 	bl	80157ca <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80118c6:	2000      	movs	r0, #0
 80118c8:	f003 ffa2 	bl	8015810 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80118cc:	2301      	movs	r3, #1
 80118ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80118d0:	7bfb      	ldrb	r3, [r7, #15]
 80118d2:	f083 0301 	eor.w	r3, r3, #1
 80118d6:	b2db      	uxtb	r3, r3
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d040      	beq.n	801195e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80118dc:	4b25      	ldr	r3, [pc, #148]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 80118de:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d122      	bne.n	801192c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80118e6:	4b23      	ldr	r3, [pc, #140]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 80118e8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d003      	beq.n	80118f8 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80118f0:	4a20      	ldr	r2, [pc, #128]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80118f8:	79fb      	ldrb	r3, [r7, #7]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f004 fc58 	bl	80161b0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011900:	4b1a      	ldr	r3, [pc, #104]	; (801196c <HandleRadioRxErrorTimeout+0x118>)
 8011902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011904:	4618      	mov	r0, r3
 8011906:	f00c fd0d 	bl	801e324 <UTIL_TIMER_GetElapsedTime>
 801190a:	4602      	mov	r2, r0
 801190c:	4b19      	ldr	r3, [pc, #100]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 801190e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011912:	429a      	cmp	r2, r3
 8011914:	d323      	bcc.n	801195e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011916:	4818      	ldr	r0, [pc, #96]	; (8011978 <HandleRadioRxErrorTimeout+0x124>)
 8011918:	f00c fbd8 	bl	801e0cc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801191c:	4a15      	ldr	r2, [pc, #84]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 801191e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011922:	f043 0310 	orr.w	r3, r3, #16
 8011926:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 801192a:	e018      	b.n	801195e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801192c:	4b11      	ldr	r3, [pc, #68]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 801192e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011932:	2b00      	cmp	r3, #0
 8011934:	d003      	beq.n	801193e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011936:	4a0f      	ldr	r2, [pc, #60]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 8011938:	79bb      	ldrb	r3, [r7, #6]
 801193a:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801193e:	79bb      	ldrb	r3, [r7, #6]
 8011940:	4618      	mov	r0, r3
 8011942:	f004 fc35 	bl	80161b0 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011946:	4b09      	ldr	r3, [pc, #36]	; (801196c <HandleRadioRxErrorTimeout+0x118>)
 8011948:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801194c:	2b02      	cmp	r3, #2
 801194e:	d006      	beq.n	801195e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011950:	4a08      	ldr	r2, [pc, #32]	; (8011974 <HandleRadioRxErrorTimeout+0x120>)
 8011952:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011956:	f043 0310 	orr.w	r3, r3, #16
 801195a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 801195e:	f7ff f9af 	bl	8010cc0 <UpdateRxSlotIdleState>
}
 8011962:	bf00      	nop
 8011964:	3710      	adds	r7, #16
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	20000e88 	.word	0x20000e88
 8011970:	0801f98c 	.word	0x0801f98c
 8011974:	20000980 	.word	0x20000980
 8011978:	20000d18 	.word	0x20000d18

0801197c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 801197c:	b580      	push	{r7, lr}
 801197e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011980:	2106      	movs	r1, #6
 8011982:	2005      	movs	r0, #5
 8011984:	f7ff ff66 	bl	8011854 <HandleRadioRxErrorTimeout>
}
 8011988:	bf00      	nop
 801198a:	bd80      	pop	{r7, pc}

0801198c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011990:	2104      	movs	r1, #4
 8011992:	2003      	movs	r0, #3
 8011994:	f7ff ff5e 	bl	8011854 <HandleRadioRxErrorTimeout>
}
 8011998:	bf00      	nop
 801199a:	bd80      	pop	{r7, pc}

0801199c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119a2:	f3ef 8310 	mrs	r3, PRIMASK
 80119a6:	607b      	str	r3, [r7, #4]
  return(result);
 80119a8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80119aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80119ac:	b672      	cpsid	i
}
 80119ae:	bf00      	nop
    events = LoRaMacRadioEvents;
 80119b0:	4b1d      	ldr	r3, [pc, #116]	; (8011a28 <LoRaMacHandleIrqEvents+0x8c>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80119b6:	4b1c      	ldr	r3, [pc, #112]	; (8011a28 <LoRaMacHandleIrqEvents+0x8c>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	f383 8810 	msr	PRIMASK, r3
}
 80119c6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d027      	beq.n	8011a1e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80119ce:	783b      	ldrb	r3, [r7, #0]
 80119d0:	f003 0310 	and.w	r3, r3, #16
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d001      	beq.n	80119de <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80119da:	f7ff f989 	bl	8010cf0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80119de:	783b      	ldrb	r3, [r7, #0]
 80119e0:	f003 0308 	and.w	r3, r3, #8
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d001      	beq.n	80119ee <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80119ea:	f7ff fa59 	bl	8010ea0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80119ee:	783b      	ldrb	r3, [r7, #0]
 80119f0:	f003 0304 	and.w	r3, r3, #4
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d001      	beq.n	80119fe <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80119fa:	f7ff feff 	bl	80117fc <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80119fe:	783b      	ldrb	r3, [r7, #0]
 8011a00:	f003 0302 	and.w	r3, r3, #2
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d001      	beq.n	8011a0e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011a0a:	f7ff ffb7 	bl	801197c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011a0e:	783b      	ldrb	r3, [r7, #0]
 8011a10:	f003 0301 	and.w	r3, r3, #1
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d001      	beq.n	8011a1e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011a1a:	f7ff ffb7 	bl	801198c <ProcessRadioRxTimeout>
        }
    }
}
 8011a1e:	bf00      	nop
 8011a20:	3710      	adds	r7, #16
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop
 8011a28:	200015f0 	.word	0x200015f0

08011a2c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011a30:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <LoRaMacIsBusy+0x34>)
 8011a32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d101      	bne.n	8011a3e <LoRaMacIsBusy+0x12>
    {
        return false;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	e00c      	b.n	8011a58 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011a3e:	4b08      	ldr	r3, [pc, #32]	; (8011a60 <LoRaMacIsBusy+0x34>)
 8011a40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d106      	bne.n	8011a56 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011a48:	4b05      	ldr	r3, [pc, #20]	; (8011a60 <LoRaMacIsBusy+0x34>)
 8011a4a:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d101      	bne.n	8011a56 <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011a52:	2300      	movs	r3, #0
 8011a54:	e000      	b.n	8011a58 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011a56:	2301      	movs	r3, #1
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bc80      	pop	{r7}
 8011a5e:	4770      	bx	lr
 8011a60:	20000980 	.word	0x20000980

08011a64 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011a64:	b480      	push	{r7}
 8011a66:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011a68:	4b05      	ldr	r3, [pc, #20]	; (8011a80 <LoRaMacIsStopped+0x1c>)
 8011a6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d101      	bne.n	8011a76 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011a72:	2301      	movs	r3, #1
 8011a74:	e000      	b.n	8011a78 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bc80      	pop	{r7}
 8011a7e:	4770      	bx	lr
 8011a80:	20000980 	.word	0x20000980

08011a84 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011a8e:	4a04      	ldr	r2, [pc, #16]	; (8011aa0 <LoRaMacEnableRequests+0x1c>)
 8011a90:	79fb      	ldrb	r3, [r7, #7]
 8011a92:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011a96:	bf00      	nop
 8011a98:	370c      	adds	r7, #12
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bc80      	pop	{r7}
 8011a9e:	4770      	bx	lr
 8011aa0:	20000980 	.word	0x20000980

08011aa4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011aaa:	4b2c      	ldr	r3, [pc, #176]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011aac:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ab0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011ab2:	4b2a      	ldr	r3, [pc, #168]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011ab4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d14a      	bne.n	8011b52 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011abc:	4b27      	ldr	r3, [pc, #156]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011abe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ac2:	f003 0301 	and.w	r3, r3, #1
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d006      	beq.n	8011ada <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011acc:	4a23      	ldr	r2, [pc, #140]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011ace:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011ad2:	f36f 0300 	bfc	r3, #0, #1
 8011ad6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011ada:	4b20      	ldr	r3, [pc, #128]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011adc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ae0:	f003 0304 	and.w	r3, r3, #4
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d006      	beq.n	8011af8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011aea:	4a1c      	ldr	r2, [pc, #112]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011aec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011af0:	f36f 0382 	bfc	r3, #2, #1
 8011af4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011af8:	2001      	movs	r0, #1
 8011afa:	f7ff ffc3 	bl	8011a84 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011afe:	793b      	ldrb	r3, [r7, #4]
 8011b00:	f003 0301 	and.w	r3, r3, #1
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d005      	beq.n	8011b16 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011b0a:	4b14      	ldr	r3, [pc, #80]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011b0c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	4813      	ldr	r0, [pc, #76]	; (8011b60 <LoRaMacHandleRequestEvents+0xbc>)
 8011b14:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011b16:	793b      	ldrb	r3, [r7, #4]
 8011b18:	f003 0304 	and.w	r3, r3, #4
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00e      	beq.n	8011b40 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011b22:	4810      	ldr	r0, [pc, #64]	; (8011b64 <LoRaMacHandleRequestEvents+0xc0>)
 8011b24:	f004 fb92 	bl	801624c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011b28:	f004 fbe2 	bl	80162f0 <LoRaMacConfirmQueueGetCnt>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d006      	beq.n	8011b40 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011b32:	4a0a      	ldr	r2, [pc, #40]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011b34:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b38:	f043 0304 	orr.w	r3, r3, #4
 8011b3c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011b40:	f003 fea7 	bl	8015892 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011b44:	4a05      	ldr	r2, [pc, #20]	; (8011b5c <LoRaMacHandleRequestEvents+0xb8>)
 8011b46:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b4a:	f36f 1304 	bfc	r3, #4, #1
 8011b4e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011b52:	bf00      	nop
 8011b54:	3708      	adds	r7, #8
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	20000980 	.word	0x20000980
 8011b60:	20000db4 	.word	0x20000db4
 8011b64:	20000dc8 	.word	0x20000dc8

08011b68 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011b6c:	4b16      	ldr	r3, [pc, #88]	; (8011bc8 <LoRaMacHandleIndicationEvents+0x60>)
 8011b6e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b72:	f003 0308 	and.w	r3, r3, #8
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00d      	beq.n	8011b98 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011b7c:	4a12      	ldr	r2, [pc, #72]	; (8011bc8 <LoRaMacHandleIndicationEvents+0x60>)
 8011b7e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b82:	f36f 03c3 	bfc	r3, #3, #1
 8011b86:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011b8a:	4b0f      	ldr	r3, [pc, #60]	; (8011bc8 <LoRaMacHandleIndicationEvents+0x60>)
 8011b8c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	490e      	ldr	r1, [pc, #56]	; (8011bcc <LoRaMacHandleIndicationEvents+0x64>)
 8011b94:	480e      	ldr	r0, [pc, #56]	; (8011bd0 <LoRaMacHandleIndicationEvents+0x68>)
 8011b96:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011b98:	4b0b      	ldr	r3, [pc, #44]	; (8011bc8 <LoRaMacHandleIndicationEvents+0x60>)
 8011b9a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b9e:	f003 0302 	and.w	r3, r3, #2
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00d      	beq.n	8011bc4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011ba8:	4a07      	ldr	r2, [pc, #28]	; (8011bc8 <LoRaMacHandleIndicationEvents+0x60>)
 8011baa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bae:	f36f 0341 	bfc	r3, #1, #1
 8011bb2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011bb6:	4b04      	ldr	r3, [pc, #16]	; (8011bc8 <LoRaMacHandleIndicationEvents+0x60>)
 8011bb8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	4903      	ldr	r1, [pc, #12]	; (8011bcc <LoRaMacHandleIndicationEvents+0x64>)
 8011bc0:	4804      	ldr	r0, [pc, #16]	; (8011bd4 <LoRaMacHandleIndicationEvents+0x6c>)
 8011bc2:	4798      	blx	r3
    }
}
 8011bc4:	bf00      	nop
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	20000980 	.word	0x20000980
 8011bcc:	20000dfc 	.word	0x20000dfc
 8011bd0:	20000ddc 	.word	0x20000ddc
 8011bd4:	20000d98 	.word	0x20000d98

08011bd8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011bde:	4b32      	ldr	r3, [pc, #200]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011be0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011be4:	f003 0301 	and.w	r3, r3, #1
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d058      	beq.n	8011ca0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011bf6:	4b2c      	ldr	r3, [pc, #176]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011bf8:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d004      	beq.n	8011c0a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011c00:	4b29      	ldr	r3, [pc, #164]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c02:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c06:	2b03      	cmp	r3, #3
 8011c08:	d104      	bne.n	8011c14 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011c0a:	f002 f82d 	bl	8013c68 <CheckRetransUnconfirmedUplink>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	71fb      	strb	r3, [r7, #7]
 8011c12:	e020      	b.n	8011c56 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011c14:	4b24      	ldr	r3, [pc, #144]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c16:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d11b      	bne.n	8011c56 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011c1e:	4b22      	ldr	r3, [pc, #136]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c20:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d014      	beq.n	8011c52 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011c28:	f002 f84a 	bl	8013cc0 <CheckRetransConfirmedUplink>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011c30:	4b1e      	ldr	r3, [pc, #120]	; (8011cac <LoRaMacHandleMcpsRequest+0xd4>)
 8011c32:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d10d      	bne.n	8011c56 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011c3a:	79fb      	ldrb	r3, [r7, #7]
 8011c3c:	f083 0301 	eor.w	r3, r3, #1
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d002      	beq.n	8011c4c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011c46:	f002 f8cd 	bl	8013de4 <AckTimeoutRetriesProcess>
 8011c4a:	e004      	b.n	8011c56 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011c4c:	f002 f908 	bl	8013e60 <AckTimeoutRetriesFinalize>
 8011c50:	e001      	b.n	8011c56 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011c52:	2301      	movs	r3, #1
 8011c54:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011c56:	79fb      	ldrb	r3, [r7, #7]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00d      	beq.n	8011c78 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011c5c:	4814      	ldr	r0, [pc, #80]	; (8011cb0 <LoRaMacHandleMcpsRequest+0xd8>)
 8011c5e:	f00c fa35 	bl	801e0cc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011c62:	4b11      	ldr	r3, [pc, #68]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c64:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c68:	f023 0320 	bic.w	r3, r3, #32
 8011c6c:	4a0e      	ldr	r2, [pc, #56]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c6e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011c72:	f002 f847 	bl	8013d04 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011c76:	e013      	b.n	8011ca0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011c78:	79bb      	ldrb	r3, [r7, #6]
 8011c7a:	f083 0301 	eor.w	r3, r3, #1
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00d      	beq.n	8011ca0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011c84:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c86:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c8a:	f36f 1304 	bfc	r3, #4, #1
 8011c8e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011c92:	4b05      	ldr	r3, [pc, #20]	; (8011ca8 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c94:	2200      	movs	r2, #0
 8011c96:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	f000 f992 	bl	8011fc4 <OnTxDelayedTimerEvent>
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	20000980 	.word	0x20000980
 8011cac:	20000e88 	.word	0x20000e88
 8011cb0:	20000ce8 	.word	0x20000ce8

08011cb4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011cb8:	4b1b      	ldr	r3, [pc, #108]	; (8011d28 <LoRaMacHandleMlmeRequest+0x74>)
 8011cba:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011cbe:	f003 0304 	and.w	r3, r3, #4
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d02c      	beq.n	8011d22 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011cc8:	2001      	movs	r0, #1
 8011cca:	f004 faa5 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d012      	beq.n	8011cfa <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011cd4:	2001      	movs	r0, #1
 8011cd6:	f004 fa41 	bl	801615c <LoRaMacConfirmQueueGetStatus>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d103      	bne.n	8011ce8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011ce0:	4b11      	ldr	r3, [pc, #68]	; (8011d28 <LoRaMacHandleMlmeRequest+0x74>)
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ce8:	4b0f      	ldr	r3, [pc, #60]	; (8011d28 <LoRaMacHandleMlmeRequest+0x74>)
 8011cea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011cee:	f023 0302 	bic.w	r3, r3, #2
 8011cf2:	4a0d      	ldr	r2, [pc, #52]	; (8011d28 <LoRaMacHandleMlmeRequest+0x74>)
 8011cf4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011cf8:	e013      	b.n	8011d22 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011cfa:	2006      	movs	r0, #6
 8011cfc:	f004 fa8c 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d105      	bne.n	8011d12 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011d06:	2007      	movs	r0, #7
 8011d08:	f004 fa86 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8011d0c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d007      	beq.n	8011d22 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d12:	4b05      	ldr	r3, [pc, #20]	; (8011d28 <LoRaMacHandleMlmeRequest+0x74>)
 8011d14:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d18:	f023 0302 	bic.w	r3, r3, #2
 8011d1c:	4a02      	ldr	r2, [pc, #8]	; (8011d28 <LoRaMacHandleMlmeRequest+0x74>)
 8011d1e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011d22:	bf00      	nop
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	20000980 	.word	0x20000980

08011d2c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011d30:	200c      	movs	r0, #12
 8011d32:	f004 fa71 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d019      	beq.n	8011d70 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011d3c:	4b0e      	ldr	r3, [pc, #56]	; (8011d78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011d3e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d42:	f003 0301 	and.w	r3, r3, #1
 8011d46:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d111      	bne.n	8011d70 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d4c:	4b0a      	ldr	r3, [pc, #40]	; (8011d78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011d4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d52:	f003 0304 	and.w	r3, r3, #4
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d009      	beq.n	8011d70 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d5c:	4b06      	ldr	r3, [pc, #24]	; (8011d78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011d5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d62:	f023 0302 	bic.w	r3, r3, #2
 8011d66:	4a04      	ldr	r2, [pc, #16]	; (8011d78 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011d68:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e000      	b.n	8011d72 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011d70:	2300      	movs	r3, #0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	20000980 	.word	0x20000980

08011d7c <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011d80:	4b0d      	ldr	r3, [pc, #52]	; (8011db8 <LoRaMacCheckForRxAbort+0x3c>)
 8011d82:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00f      	beq.n	8011dae <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011d8e:	4b0a      	ldr	r3, [pc, #40]	; (8011db8 <LoRaMacCheckForRxAbort+0x3c>)
 8011d90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d98:	4a07      	ldr	r2, [pc, #28]	; (8011db8 <LoRaMacCheckForRxAbort+0x3c>)
 8011d9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d9e:	4b06      	ldr	r3, [pc, #24]	; (8011db8 <LoRaMacCheckForRxAbort+0x3c>)
 8011da0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011da4:	f023 0302 	bic.w	r3, r3, #2
 8011da8:	4a03      	ldr	r2, [pc, #12]	; (8011db8 <LoRaMacCheckForRxAbort+0x3c>)
 8011daa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011dae:	bf00      	nop
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bc80      	pop	{r7}
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	20000980 	.word	0x20000980

08011dbc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011dcc:	4b50      	ldr	r3, [pc, #320]	; (8011f10 <LoRaMacHandleNvm+0x154>)
 8011dce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f040 8098 	bne.w	8011f08 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2124      	movs	r1, #36	; 0x24
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f008 f82f 	bl	8019e40 <Crc32>
 8011de2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	68ba      	ldr	r2, [r7, #8]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d006      	beq.n	8011dfc <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011df4:	89fb      	ldrh	r3, [r7, #14]
 8011df6:	f043 0301 	orr.w	r3, r3, #1
 8011dfa:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	3328      	adds	r3, #40	; 0x28
 8011e00:	211c      	movs	r1, #28
 8011e02:	4618      	mov	r0, r3
 8011e04:	f008 f81c 	bl	8019e40 <Crc32>
 8011e08:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e0e:	68ba      	ldr	r2, [r7, #8]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d006      	beq.n	8011e22 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	68ba      	ldr	r2, [r7, #8]
 8011e18:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011e1a:	89fb      	ldrh	r3, [r7, #14]
 8011e1c:	f043 0302 	orr.w	r3, r3, #2
 8011e20:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	3348      	adds	r3, #72	; 0x48
 8011e26:	21fc      	movs	r1, #252	; 0xfc
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f008 f809 	bl	8019e40 <Crc32>
 8011e2e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d007      	beq.n	8011e4c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011e44:	89fb      	ldrh	r3, [r7, #14]
 8011e46:	f043 0304 	orr.w	r3, r3, #4
 8011e4a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011e52:	21d4      	movs	r1, #212	; 0xd4
 8011e54:	4618      	mov	r0, r3
 8011e56:	f007 fff3 	bl	8019e40 <Crc32>
 8011e5a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011e62:	68ba      	ldr	r2, [r7, #8]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d007      	beq.n	8011e78 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011e70:	89fb      	ldrh	r3, [r7, #14]
 8011e72:	f043 0308 	orr.w	r3, r3, #8
 8011e76:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011e7e:	2190      	movs	r1, #144	; 0x90
 8011e80:	4618      	mov	r0, r3
 8011e82:	f007 ffdd 	bl	8019e40 <Crc32>
 8011e86:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011e8e:	68ba      	ldr	r2, [r7, #8]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d007      	beq.n	8011ea4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011e9c:	89fb      	ldrh	r3, [r7, #14]
 8011e9e:	f043 0310 	orr.w	r3, r3, #16
 8011ea2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011eaa:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f007 ffc6 	bl	8019e40 <Crc32>
 8011eb4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011ebc:	68ba      	ldr	r2, [r7, #8]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d007      	beq.n	8011ed2 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68ba      	ldr	r2, [r7, #8]
 8011ec6:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011eca:	89fb      	ldrh	r3, [r7, #14]
 8011ecc:	f043 0320 	orr.w	r3, r3, #32
 8011ed0:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011ed8:	2114      	movs	r1, #20
 8011eda:	4618      	mov	r0, r3
 8011edc:	f007 ffb0 	bl	8019e40 <Crc32>
 8011ee0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d007      	beq.n	8011efe <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	68ba      	ldr	r2, [r7, #8]
 8011ef2:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011ef6:	89fb      	ldrh	r3, [r7, #14]
 8011ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011efc:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011efe:	89fb      	ldrh	r3, [r7, #14]
 8011f00:	4618      	mov	r0, r3
 8011f02:	f001 ff51 	bl	8013da8 <CallNvmDataChangeCallback>
 8011f06:	e000      	b.n	8011f0a <LoRaMacHandleNvm+0x14e>
        return;
 8011f08:	bf00      	nop
}
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20000980 	.word	0x20000980

08011f14 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011f1e:	f7ff fd3d 	bl	801199c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011f22:	f003 fd1a 	bl	801595a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011f26:	4b25      	ldr	r3, [pc, #148]	; (8011fbc <LoRaMacProcess+0xa8>)
 8011f28:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011f2c:	f003 0310 	and.w	r3, r3, #16
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d023      	beq.n	8011f7e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011f36:	2000      	movs	r0, #0
 8011f38:	f7ff fda4 	bl	8011a84 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011f3c:	f7ff ff1e 	bl	8011d7c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011f40:	f001 ffc2 	bl	8013ec8 <IsRequestPending>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d006      	beq.n	8011f58 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011f4a:	f7ff feef 	bl	8011d2c <LoRaMacCheckForBeaconAcquisition>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	461a      	mov	r2, r3
 8011f52:	79fb      	ldrb	r3, [r7, #7]
 8011f54:	4313      	orrs	r3, r2
 8011f56:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011f58:	79fb      	ldrb	r3, [r7, #7]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d103      	bne.n	8011f66 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011f5e:	f7ff fea9 	bl	8011cb4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011f62:	f7ff fe39 	bl	8011bd8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011f66:	f7ff fd9d 	bl	8011aa4 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011f6a:	2001      	movs	r0, #1
 8011f6c:	f7ff fd8a 	bl	8011a84 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011f70:	4a12      	ldr	r2, [pc, #72]	; (8011fbc <LoRaMacProcess+0xa8>)
 8011f72:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011f76:	f043 0320 	orr.w	r3, r3, #32
 8011f7a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8011f7e:	f7ff fdf3 	bl	8011b68 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011f82:	4b0e      	ldr	r3, [pc, #56]	; (8011fbc <LoRaMacProcess+0xa8>)
 8011f84:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011f88:	2b02      	cmp	r3, #2
 8011f8a:	d101      	bne.n	8011f90 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8011f8c:	f001 fbb8 	bl	8013700 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011f90:	4b0a      	ldr	r3, [pc, #40]	; (8011fbc <LoRaMacProcess+0xa8>)
 8011f92:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011f96:	f003 0320 	and.w	r3, r3, #32
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d009      	beq.n	8011fb4 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011fa0:	4a06      	ldr	r2, [pc, #24]	; (8011fbc <LoRaMacProcess+0xa8>)
 8011fa2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011fa6:	f36f 1345 	bfc	r3, #5, #1
 8011faa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8011fae:	4804      	ldr	r0, [pc, #16]	; (8011fc0 <LoRaMacProcess+0xac>)
 8011fb0:	f7ff ff04 	bl	8011dbc <LoRaMacHandleNvm>
    }
}
 8011fb4:	bf00      	nop
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	20000980 	.word	0x20000980
 8011fc0:	20000e88 	.word	0x20000e88

08011fc4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011fcc:	4817      	ldr	r0, [pc, #92]	; (801202c <OnTxDelayedTimerEvent+0x68>)
 8011fce:	f00c f87d 	bl	801e0cc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011fd2:	4b17      	ldr	r3, [pc, #92]	; (8012030 <OnTxDelayedTimerEvent+0x6c>)
 8011fd4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fd8:	f023 0320 	bic.w	r3, r3, #32
 8011fdc:	4a14      	ldr	r2, [pc, #80]	; (8012030 <OnTxDelayedTimerEvent+0x6c>)
 8011fde:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	f001 f8e4 	bl	80131b0 <ScheduleTx>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d018      	beq.n	8012020 <OnTxDelayedTimerEvent+0x5c>
 8011fee:	2b0b      	cmp	r3, #11
 8011ff0:	d016      	beq.n	8012020 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ff2:	4b10      	ldr	r3, [pc, #64]	; (8012034 <OnTxDelayedTimerEvent+0x70>)
 8011ff4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	4b0d      	ldr	r3, [pc, #52]	; (8012030 <OnTxDelayedTimerEvent+0x6c>)
 8011ffc:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012000:	4b0b      	ldr	r3, [pc, #44]	; (8012030 <OnTxDelayedTimerEvent+0x6c>)
 8012002:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012006:	4b0a      	ldr	r3, [pc, #40]	; (8012030 <OnTxDelayedTimerEvent+0x6c>)
 8012008:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 801200c:	4b08      	ldr	r3, [pc, #32]	; (8012030 <OnTxDelayedTimerEvent+0x6c>)
 801200e:	2209      	movs	r2, #9
 8012010:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8012014:	2009      	movs	r0, #9
 8012016:	f004 f8cb 	bl	80161b0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801201a:	f001 fe73 	bl	8013d04 <StopRetransmission>
            break;
 801201e:	e000      	b.n	8012022 <OnTxDelayedTimerEvent+0x5e>
            break;
 8012020:	bf00      	nop
        }
    }
}
 8012022:	bf00      	nop
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	20000ce8 	.word	0x20000ce8
 8012030:	20000980 	.word	0x20000980
 8012034:	20000e88 	.word	0x20000e88

08012038 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8012040:	4b14      	ldr	r3, [pc, #80]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 8012042:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012046:	4b13      	ldr	r3, [pc, #76]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 8012048:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 801204c:	4b12      	ldr	r3, [pc, #72]	; (8012098 <OnRxWindow1TimerEvent+0x60>)
 801204e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012052:	b25a      	sxtb	r2, r3
 8012054:	4b0f      	ldr	r3, [pc, #60]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 8012056:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801205a:	4b0f      	ldr	r3, [pc, #60]	; (8012098 <OnRxWindow1TimerEvent+0x60>)
 801205c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012060:	4b0c      	ldr	r3, [pc, #48]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 8012062:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012066:	4b0c      	ldr	r3, [pc, #48]	; (8012098 <OnRxWindow1TimerEvent+0x60>)
 8012068:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801206c:	4b09      	ldr	r3, [pc, #36]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 801206e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8012072:	4b08      	ldr	r3, [pc, #32]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 8012074:	2200      	movs	r2, #0
 8012076:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801207a:	4b06      	ldr	r3, [pc, #24]	; (8012094 <OnRxWindow1TimerEvent+0x5c>)
 801207c:	2200      	movs	r2, #0
 801207e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8012082:	4906      	ldr	r1, [pc, #24]	; (801209c <OnRxWindow1TimerEvent+0x64>)
 8012084:	4806      	ldr	r0, [pc, #24]	; (80120a0 <OnRxWindow1TimerEvent+0x68>)
 8012086:	f001 fb07 	bl	8013698 <RxWindowSetup>
}
 801208a:	bf00      	nop
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	20000980 	.word	0x20000980
 8012098:	20000e88 	.word	0x20000e88
 801209c:	20000d38 	.word	0x20000d38
 80120a0:	20000d00 	.word	0x20000d00

080120a4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80120ac:	4b16      	ldr	r3, [pc, #88]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120ae:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d023      	beq.n	80120fe <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80120b6:	4b14      	ldr	r3, [pc, #80]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120b8:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80120bc:	4b12      	ldr	r3, [pc, #72]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120be:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80120c2:	4b12      	ldr	r3, [pc, #72]	; (801210c <OnRxWindow2TimerEvent+0x68>)
 80120c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120c6:	4a10      	ldr	r2, [pc, #64]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120c8:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120cc:	4b0f      	ldr	r3, [pc, #60]	; (801210c <OnRxWindow2TimerEvent+0x68>)
 80120ce:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80120d2:	4b0d      	ldr	r3, [pc, #52]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120d4:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80120d8:	4b0c      	ldr	r3, [pc, #48]	; (801210c <OnRxWindow2TimerEvent+0x68>)
 80120da:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80120de:	4b0a      	ldr	r3, [pc, #40]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120e0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80120e4:	4b08      	ldr	r3, [pc, #32]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120e6:	2200      	movs	r2, #0
 80120e8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80120ec:	4b06      	ldr	r3, [pc, #24]	; (8012108 <OnRxWindow2TimerEvent+0x64>)
 80120ee:	2201      	movs	r2, #1
 80120f0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80120f4:	4906      	ldr	r1, [pc, #24]	; (8012110 <OnRxWindow2TimerEvent+0x6c>)
 80120f6:	4807      	ldr	r0, [pc, #28]	; (8012114 <OnRxWindow2TimerEvent+0x70>)
 80120f8:	f001 face 	bl	8013698 <RxWindowSetup>
 80120fc:	e000      	b.n	8012100 <OnRxWindow2TimerEvent+0x5c>
        return;
 80120fe:	bf00      	nop
}
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	20000980 	.word	0x20000980
 801210c:	20000e88 	.word	0x20000e88
 8012110:	20000d4c 	.word	0x20000d4c
 8012114:	20000d18 	.word	0x20000d18

08012118 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012120:	480e      	ldr	r0, [pc, #56]	; (801215c <OnAckTimeoutTimerEvent+0x44>)
 8012122:	f00b ffd3 	bl	801e0cc <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8012126:	4b0e      	ldr	r3, [pc, #56]	; (8012160 <OnAckTimeoutTimerEvent+0x48>)
 8012128:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801212c:	2b00      	cmp	r3, #0
 801212e:	d003      	beq.n	8012138 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8012130:	4b0b      	ldr	r3, [pc, #44]	; (8012160 <OnAckTimeoutTimerEvent+0x48>)
 8012132:	2201      	movs	r2, #1
 8012134:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012138:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <OnAckTimeoutTimerEvent+0x4c>)
 801213a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801213e:	2b02      	cmp	r3, #2
 8012140:	d106      	bne.n	8012150 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8012142:	4a07      	ldr	r2, [pc, #28]	; (8012160 <OnAckTimeoutTimerEvent+0x48>)
 8012144:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012148:	f043 0310 	orr.w	r3, r3, #16
 801214c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 8012150:	f001 fe14 	bl	8013d7c <OnMacProcessNotify>
}
 8012154:	bf00      	nop
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	20000d74 	.word	0x20000d74
 8012160:	20000980 	.word	0x20000980
 8012164:	20000e88 	.word	0x20000e88

08012168 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	60ba      	str	r2, [r7, #8]
 8012170:	607b      	str	r3, [r7, #4]
 8012172:	4603      	mov	r3, r0
 8012174:	73fb      	strb	r3, [r7, #15]
 8012176:	460b      	mov	r3, r1
 8012178:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d005      	beq.n	801218c <GetFCntDown+0x24>
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d002      	beq.n	801218c <GetFCntDown+0x24>
 8012186:	6a3b      	ldr	r3, [r7, #32]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801218c:	230a      	movs	r3, #10
 801218e:	e029      	b.n	80121e4 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012190:	7bfb      	ldrb	r3, [r7, #15]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d016      	beq.n	80121c4 <GetFCntDown+0x5c>
 8012196:	2b01      	cmp	r3, #1
 8012198:	d118      	bne.n	80121cc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801219a:	79bb      	ldrb	r3, [r7, #6]
 801219c:	2b01      	cmp	r3, #1
 801219e:	d10d      	bne.n	80121bc <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80121a0:	7bbb      	ldrb	r3, [r7, #14]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d002      	beq.n	80121ac <GetFCntDown+0x44>
 80121a6:	7bbb      	ldrb	r3, [r7, #14]
 80121a8:	2b03      	cmp	r3, #3
 80121aa:	d103      	bne.n	80121b4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	2202      	movs	r2, #2
 80121b0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80121b2:	e00d      	b.n	80121d0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	2201      	movs	r2, #1
 80121b8:	701a      	strb	r2, [r3, #0]
            break;
 80121ba:	e009      	b.n	80121d0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	2203      	movs	r2, #3
 80121c0:	701a      	strb	r2, [r3, #0]
            break;
 80121c2:	e005      	b.n	80121d0 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	2204      	movs	r2, #4
 80121c8:	701a      	strb	r2, [r3, #0]
            break;
 80121ca:	e001      	b.n	80121d0 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80121cc:	2305      	movs	r3, #5
 80121ce:	e009      	b.n	80121e4 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	7818      	ldrb	r0, [r3, #0]
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	89db      	ldrh	r3, [r3, #14]
 80121d8:	461a      	mov	r2, r3
 80121da:	8b39      	ldrh	r1, [r7, #24]
 80121dc:	6a3b      	ldr	r3, [r7, #32]
 80121de:	f004 fc25 	bl	8016a2c <LoRaMacCryptoGetFCntDown>
 80121e2:	4603      	mov	r3, r0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3710      	adds	r7, #16
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80121ec:	b5b0      	push	{r4, r5, r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	4603      	mov	r3, r0
 80121f4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121f6:	2303      	movs	r3, #3
 80121f8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80121fa:	4b6d      	ldr	r3, [pc, #436]	; (80123b0 <SwitchClass+0x1c4>)
 80121fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012200:	2b02      	cmp	r3, #2
 8012202:	f000 80b9 	beq.w	8012378 <SwitchClass+0x18c>
 8012206:	2b02      	cmp	r3, #2
 8012208:	f300 80cc 	bgt.w	80123a4 <SwitchClass+0x1b8>
 801220c:	2b00      	cmp	r3, #0
 801220e:	d003      	beq.n	8012218 <SwitchClass+0x2c>
 8012210:	2b01      	cmp	r3, #1
 8012212:	f000 80a3 	beq.w	801235c <SwitchClass+0x170>
 8012216:	e0c5      	b.n	80123a4 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012218:	79fb      	ldrb	r3, [r7, #7]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d109      	bne.n	8012232 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801221e:	4b64      	ldr	r3, [pc, #400]	; (80123b0 <SwitchClass+0x1c4>)
 8012220:	4a63      	ldr	r2, [pc, #396]	; (80123b0 <SwitchClass+0x1c4>)
 8012222:	3374      	adds	r3, #116	; 0x74
 8012224:	326c      	adds	r2, #108	; 0x6c
 8012226:	e892 0003 	ldmia.w	r2, {r0, r1}
 801222a:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 801222e:	2300      	movs	r3, #0
 8012230:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8012232:	79fb      	ldrb	r3, [r7, #7]
 8012234:	2b01      	cmp	r3, #1
 8012236:	d10c      	bne.n	8012252 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8012238:	79fb      	ldrb	r3, [r7, #7]
 801223a:	4618      	mov	r0, r3
 801223c:	f003 fb2f 	bl	801589e <LoRaMacClassBSwitchClass>
 8012240:	4603      	mov	r3, r0
 8012242:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8012244:	7bfb      	ldrb	r3, [r7, #15]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d103      	bne.n	8012252 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801224a:	4a59      	ldr	r2, [pc, #356]	; (80123b0 <SwitchClass+0x1c4>)
 801224c:	79fb      	ldrb	r3, [r7, #7]
 801224e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8012252:	79fb      	ldrb	r3, [r7, #7]
 8012254:	2b02      	cmp	r3, #2
 8012256:	f040 80a0 	bne.w	801239a <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801225a:	4a55      	ldr	r2, [pc, #340]	; (80123b0 <SwitchClass+0x1c4>)
 801225c:	79fb      	ldrb	r3, [r7, #7]
 801225e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012262:	4a54      	ldr	r2, [pc, #336]	; (80123b4 <SwitchClass+0x1c8>)
 8012264:	4b53      	ldr	r3, [pc, #332]	; (80123b4 <SwitchClass+0x1c8>)
 8012266:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801226a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801226e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012272:	682b      	ldr	r3, [r5, #0]
 8012274:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012276:	4b4f      	ldr	r3, [pc, #316]	; (80123b4 <SwitchClass+0x1c8>)
 8012278:	2202      	movs	r2, #2
 801227a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801227e:	2300      	movs	r3, #0
 8012280:	73bb      	strb	r3, [r7, #14]
 8012282:	e05b      	b.n	801233c <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012284:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012288:	4949      	ldr	r1, [pc, #292]	; (80123b0 <SwitchClass+0x1c4>)
 801228a:	4613      	mov	r3, r2
 801228c:	005b      	lsls	r3, r3, #1
 801228e:	4413      	add	r3, r2
 8012290:	011b      	lsls	r3, r3, #4
 8012292:	440b      	add	r3, r1
 8012294:	33e9      	adds	r3, #233	; 0xe9
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d049      	beq.n	8012330 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 801229c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80122a0:	4943      	ldr	r1, [pc, #268]	; (80123b0 <SwitchClass+0x1c4>)
 80122a2:	4613      	mov	r3, r2
 80122a4:	005b      	lsls	r3, r3, #1
 80122a6:	4413      	add	r3, r2
 80122a8:	011b      	lsls	r3, r3, #4
 80122aa:	440b      	add	r3, r1
 80122ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122b0:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	d13c      	bne.n	8012330 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80122b6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80122ba:	493d      	ldr	r1, [pc, #244]	; (80123b0 <SwitchClass+0x1c4>)
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	011b      	lsls	r3, r3, #4
 80122c4:	440b      	add	r3, r1
 80122c6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a38      	ldr	r2, [pc, #224]	; (80123b0 <SwitchClass+0x1c4>)
 80122ce:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80122d0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80122d4:	4936      	ldr	r1, [pc, #216]	; (80123b0 <SwitchClass+0x1c4>)
 80122d6:	4613      	mov	r3, r2
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	4413      	add	r3, r2
 80122dc:	011b      	lsls	r3, r3, #4
 80122de:	440b      	add	r3, r1
 80122e0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80122e4:	f993 3000 	ldrsb.w	r3, [r3]
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	4b31      	ldr	r3, [pc, #196]	; (80123b0 <SwitchClass+0x1c4>)
 80122ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80122f0:	4b30      	ldr	r3, [pc, #192]	; (80123b4 <SwitchClass+0x1c8>)
 80122f2:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80122f6:	4b2f      	ldr	r3, [pc, #188]	; (80123b4 <SwitchClass+0x1c8>)
 80122f8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80122fc:	4b2c      	ldr	r3, [pc, #176]	; (80123b0 <SwitchClass+0x1c4>)
 80122fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012300:	4a2c      	ldr	r2, [pc, #176]	; (80123b4 <SwitchClass+0x1c8>)
 8012302:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012306:	4b2a      	ldr	r3, [pc, #168]	; (80123b0 <SwitchClass+0x1c4>)
 8012308:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801230c:	4b29      	ldr	r3, [pc, #164]	; (80123b4 <SwitchClass+0x1c8>)
 801230e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012312:	4b27      	ldr	r3, [pc, #156]	; (80123b0 <SwitchClass+0x1c4>)
 8012314:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012318:	4b26      	ldr	r3, [pc, #152]	; (80123b4 <SwitchClass+0x1c8>)
 801231a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801231e:	4b25      	ldr	r3, [pc, #148]	; (80123b4 <SwitchClass+0x1c8>)
 8012320:	2203      	movs	r2, #3
 8012322:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8012326:	4b23      	ldr	r3, [pc, #140]	; (80123b4 <SwitchClass+0x1c8>)
 8012328:	2201      	movs	r2, #1
 801232a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 801232e:	e009      	b.n	8012344 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012334:	b2db      	uxtb	r3, r3
 8012336:	3301      	adds	r3, #1
 8012338:	b2db      	uxtb	r3, r3
 801233a:	73bb      	strb	r3, [r7, #14]
 801233c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012340:	2b00      	cmp	r3, #0
 8012342:	dd9f      	ble.n	8012284 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8012344:	4b1b      	ldr	r3, [pc, #108]	; (80123b4 <SwitchClass+0x1c8>)
 8012346:	2200      	movs	r2, #0
 8012348:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 801234c:	4b1a      	ldr	r3, [pc, #104]	; (80123b8 <SwitchClass+0x1cc>)
 801234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012350:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8012352:	f001 f9d5 	bl	8013700 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8012356:	2300      	movs	r3, #0
 8012358:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801235a:	e01e      	b.n	801239a <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 801235c:	79fb      	ldrb	r3, [r7, #7]
 801235e:	4618      	mov	r0, r3
 8012360:	f003 fa9d 	bl	801589e <LoRaMacClassBSwitchClass>
 8012364:	4603      	mov	r3, r0
 8012366:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d117      	bne.n	801239e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801236e:	4a10      	ldr	r2, [pc, #64]	; (80123b0 <SwitchClass+0x1c4>)
 8012370:	79fb      	ldrb	r3, [r7, #7]
 8012372:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8012376:	e012      	b.n	801239e <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012378:	79fb      	ldrb	r3, [r7, #7]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d111      	bne.n	80123a2 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801237e:	4b0d      	ldr	r3, [pc, #52]	; (80123b4 <SwitchClass+0x1c8>)
 8012380:	2206      	movs	r2, #6
 8012382:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012386:	4a0a      	ldr	r2, [pc, #40]	; (80123b0 <SwitchClass+0x1c4>)
 8012388:	79fb      	ldrb	r3, [r7, #7]
 801238a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801238e:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <SwitchClass+0x1cc>)
 8012390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012392:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012398:	e003      	b.n	80123a2 <SwitchClass+0x1b6>
            break;
 801239a:	bf00      	nop
 801239c:	e002      	b.n	80123a4 <SwitchClass+0x1b8>
            break;
 801239e:	bf00      	nop
 80123a0:	e000      	b.n	80123a4 <SwitchClass+0x1b8>
            break;
 80123a2:	bf00      	nop
        }
    }

    return status;
 80123a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3710      	adds	r7, #16
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bdb0      	pop	{r4, r5, r7, pc}
 80123ae:	bf00      	nop
 80123b0:	20000e88 	.word	0x20000e88
 80123b4:	20000980 	.word	0x20000980
 80123b8:	0801f98c 	.word	0x0801f98c

080123bc <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	4603      	mov	r3, r0
 80123c4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80123c6:	4b10      	ldr	r3, [pc, #64]	; (8012408 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80123c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80123cc:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80123ce:	79fb      	ldrb	r3, [r7, #7]
 80123d0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80123d2:	230d      	movs	r3, #13
 80123d4:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80123d6:	4b0c      	ldr	r3, [pc, #48]	; (8012408 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80123d8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80123e0:	230e      	movs	r3, #14
 80123e2:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123e4:	4b08      	ldr	r3, [pc, #32]	; (8012408 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80123e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80123ea:	f107 0210 	add.w	r2, r7, #16
 80123ee:	4611      	mov	r1, r2
 80123f0:	4618      	mov	r0, r3
 80123f2:	f005 f9b6 	bl	8017762 <RegionGetPhyParam>
 80123f6:	4603      	mov	r3, r0
 80123f8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	b2db      	uxtb	r3, r3
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3718      	adds	r7, #24
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	20000e88 	.word	0x20000e88

0801240c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	4603      	mov	r3, r0
 8012414:	71fb      	strb	r3, [r7, #7]
 8012416:	460b      	mov	r3, r1
 8012418:	71bb      	strb	r3, [r7, #6]
 801241a:	4613      	mov	r3, r2
 801241c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8012422:	2300      	movs	r3, #0
 8012424:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012426:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801242a:	4618      	mov	r0, r3
 801242c:	f7ff ffc6 	bl	80123bc <GetMaxAppPayloadWithoutFOptsLength>
 8012430:	4603      	mov	r3, r0
 8012432:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8012434:	79fb      	ldrb	r3, [r7, #7]
 8012436:	b29a      	uxth	r2, r3
 8012438:	797b      	ldrb	r3, [r7, #5]
 801243a:	b29b      	uxth	r3, r3
 801243c:	4413      	add	r3, r2
 801243e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012440:	89ba      	ldrh	r2, [r7, #12]
 8012442:	89fb      	ldrh	r3, [r7, #14]
 8012444:	429a      	cmp	r2, r3
 8012446:	d804      	bhi.n	8012452 <ValidatePayloadLength+0x46>
 8012448:	89bb      	ldrh	r3, [r7, #12]
 801244a:	2bff      	cmp	r3, #255	; 0xff
 801244c:	d801      	bhi.n	8012452 <ValidatePayloadLength+0x46>
    {
        return true;
 801244e:	2301      	movs	r3, #1
 8012450:	e000      	b.n	8012454 <ValidatePayloadLength+0x48>
    }
    return false;
 8012452:	2300      	movs	r3, #0
}
 8012454:	4618      	mov	r0, r3
 8012456:	3710      	adds	r7, #16
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 801245c:	b590      	push	{r4, r7, lr}
 801245e:	b0a5      	sub	sp, #148	; 0x94
 8012460:	af02      	add	r7, sp, #8
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	4608      	mov	r0, r1
 8012466:	4611      	mov	r1, r2
 8012468:	461a      	mov	r2, r3
 801246a:	4603      	mov	r3, r0
 801246c:	70fb      	strb	r3, [r7, #3]
 801246e:	460b      	mov	r3, r1
 8012470:	70bb      	strb	r3, [r7, #2]
 8012472:	4613      	mov	r3, r2
 8012474:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012476:	2300      	movs	r3, #0
 8012478:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 801247c:	2300      	movs	r3, #0
 801247e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012482:	2300      	movs	r3, #0
 8012484:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012488:	f000 bc6d 	b.w	8012d66 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801248c:	78fb      	ldrb	r3, [r7, #3]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	4413      	add	r3, r2
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	4618      	mov	r0, r3
 8012496:	f003 fce7 	bl	8015e68 <LoRaMacCommandsGetCmdSize>
 801249a:	4603      	mov	r3, r0
 801249c:	461a      	mov	r2, r3
 801249e:	78fb      	ldrb	r3, [r7, #3]
 80124a0:	441a      	add	r2, r3
 80124a2:	78bb      	ldrb	r3, [r7, #2]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	f300 8464 	bgt.w	8012d72 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80124aa:	78fb      	ldrb	r3, [r7, #3]
 80124ac:	1c5a      	adds	r2, r3, #1
 80124ae:	70fa      	strb	r2, [r7, #3]
 80124b0:	461a      	mov	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4413      	add	r3, r2
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	3b02      	subs	r3, #2
 80124ba:	2b11      	cmp	r3, #17
 80124bc:	f200 845b 	bhi.w	8012d76 <ProcessMacCommands+0x91a>
 80124c0:	a201      	add	r2, pc, #4	; (adr r2, 80124c8 <ProcessMacCommands+0x6c>)
 80124c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124c6:	bf00      	nop
 80124c8:	08012511 	.word	0x08012511
 80124cc:	08012553 	.word	0x08012553
 80124d0:	0801266f 	.word	0x0801266f
 80124d4:	080126ad 	.word	0x080126ad
 80124d8:	08012799 	.word	0x08012799
 80124dc:	080127f5 	.word	0x080127f5
 80124e0:	080128b1 	.word	0x080128b1
 80124e4:	08012907 	.word	0x08012907
 80124e8:	080129ed 	.word	0x080129ed
 80124ec:	08012d77 	.word	0x08012d77
 80124f0:	08012d77 	.word	0x08012d77
 80124f4:	08012a91 	.word	0x08012a91
 80124f8:	08012d77 	.word	0x08012d77
 80124fc:	08012d77 	.word	0x08012d77
 8012500:	08012ba7 	.word	0x08012ba7
 8012504:	08012bdb 	.word	0x08012bdb
 8012508:	08012c6b 	.word	0x08012c6b
 801250c:	08012ce1 	.word	0x08012ce1
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012510:	2005      	movs	r0, #5
 8012512:	f003 fe81 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	f000 8424 	beq.w	8012d66 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801251e:	2105      	movs	r1, #5
 8012520:	2000      	movs	r0, #0
 8012522:	f003 fded 	bl	8016100 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012526:	78fb      	ldrb	r3, [r7, #3]
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	70fa      	strb	r2, [r7, #3]
 801252c:	461a      	mov	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4413      	add	r3, r2
 8012532:	781a      	ldrb	r2, [r3, #0]
 8012534:	4bac      	ldr	r3, [pc, #688]	; (80127e8 <ProcessMacCommands+0x38c>)
 8012536:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801253a:	78fb      	ldrb	r3, [r7, #3]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	70fa      	strb	r2, [r7, #3]
 8012540:	461a      	mov	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4413      	add	r3, r2
 8012546:	781a      	ldrb	r2, [r3, #0]
 8012548:	4ba7      	ldr	r3, [pc, #668]	; (80127e8 <ProcessMacCommands+0x38c>)
 801254a:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 801254e:	f000 bc0a 	b.w	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012552:	2300      	movs	r3, #0
 8012554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012558:	2300      	movs	r3, #0
 801255a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 801256a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801256e:	f083 0301 	eor.w	r3, r3, #1
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2b00      	cmp	r3, #0
 8012576:	d078      	beq.n	801266a <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012578:	2301      	movs	r3, #1
 801257a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801257e:	78fb      	ldrb	r3, [r7, #3]
 8012580:	3b01      	subs	r3, #1
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	4413      	add	r3, r2
 8012586:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012588:	78ba      	ldrb	r2, [r7, #2]
 801258a:	78fb      	ldrb	r3, [r7, #3]
 801258c:	1ad3      	subs	r3, r2, r3
 801258e:	b2db      	uxtb	r3, r3
 8012590:	3301      	adds	r3, #1
 8012592:	b2db      	uxtb	r3, r3
 8012594:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012598:	4b94      	ldr	r3, [pc, #592]	; (80127ec <ProcessMacCommands+0x390>)
 801259a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801259e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80125a2:	4b92      	ldr	r3, [pc, #584]	; (80127ec <ProcessMacCommands+0x390>)
 80125a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80125a8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80125ac:	4b8f      	ldr	r3, [pc, #572]	; (80127ec <ProcessMacCommands+0x390>)
 80125ae:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80125b2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80125b6:	4b8d      	ldr	r3, [pc, #564]	; (80127ec <ProcessMacCommands+0x390>)
 80125b8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80125bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80125c0:	4b8a      	ldr	r3, [pc, #552]	; (80127ec <ProcessMacCommands+0x390>)
 80125c2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80125c6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80125ca:	4b88      	ldr	r3, [pc, #544]	; (80127ec <ProcessMacCommands+0x390>)
 80125cc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80125d0:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80125d2:	4b86      	ldr	r3, [pc, #536]	; (80127ec <ProcessMacCommands+0x390>)
 80125d4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80125d8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80125dc:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80125e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80125e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80125e8:	9301      	str	r3, [sp, #4]
 80125ea:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80125ee:	9300      	str	r3, [sp, #0]
 80125f0:	4623      	mov	r3, r4
 80125f2:	f005 f973 	bl	80178dc <RegionLinkAdrReq>
 80125f6:	4603      	mov	r3, r0
 80125f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80125fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012600:	f003 0307 	and.w	r3, r3, #7
 8012604:	2b07      	cmp	r3, #7
 8012606:	d10e      	bne.n	8012626 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012608:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801260c:	4b77      	ldr	r3, [pc, #476]	; (80127ec <ProcessMacCommands+0x390>)
 801260e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012612:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012616:	4b75      	ldr	r3, [pc, #468]	; (80127ec <ProcessMacCommands+0x390>)
 8012618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801261c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012620:	4b72      	ldr	r3, [pc, #456]	; (80127ec <ProcessMacCommands+0x390>)
 8012622:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012626:	2300      	movs	r3, #0
 8012628:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801262c:	e00b      	b.n	8012646 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801262e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012632:	2201      	movs	r2, #1
 8012634:	4619      	mov	r1, r3
 8012636:	2003      	movs	r0, #3
 8012638:	f003 fab6 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801263c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012640:	3301      	adds	r3, #1
 8012642:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012646:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801264a:	4a69      	ldr	r2, [pc, #420]	; (80127f0 <ProcessMacCommands+0x394>)
 801264c:	fba2 2303 	umull	r2, r3, r2, r3
 8012650:	089b      	lsrs	r3, r3, #2
 8012652:	b2db      	uxtb	r3, r3
 8012654:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012658:	429a      	cmp	r2, r3
 801265a:	d3e8      	bcc.n	801262e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 801265c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012660:	78fb      	ldrb	r3, [r7, #3]
 8012662:	4413      	add	r3, r2
 8012664:	b2db      	uxtb	r3, r3
 8012666:	3b01      	subs	r3, #1
 8012668:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801266a:	bf00      	nop
 801266c:	e37b      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801266e:	78fb      	ldrb	r3, [r7, #3]
 8012670:	1c5a      	adds	r2, r3, #1
 8012672:	70fa      	strb	r2, [r7, #3]
 8012674:	461a      	mov	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4413      	add	r3, r2
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	f003 030f 	and.w	r3, r3, #15
 8012680:	b2da      	uxtb	r2, r3
 8012682:	4b5a      	ldr	r3, [pc, #360]	; (80127ec <ProcessMacCommands+0x390>)
 8012684:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012688:	4b58      	ldr	r3, [pc, #352]	; (80127ec <ProcessMacCommands+0x390>)
 801268a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801268e:	461a      	mov	r2, r3
 8012690:	2301      	movs	r3, #1
 8012692:	4093      	lsls	r3, r2
 8012694:	b29a      	uxth	r2, r3
 8012696:	4b55      	ldr	r3, [pc, #340]	; (80127ec <ProcessMacCommands+0x390>)
 8012698:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801269c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80126a0:	2200      	movs	r2, #0
 80126a2:	4619      	mov	r1, r3
 80126a4:	2004      	movs	r0, #4
 80126a6:	f003 fa7f 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                break;
 80126aa:	e35c      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80126ac:	2307      	movs	r3, #7
 80126ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80126b2:	78fb      	ldrb	r3, [r7, #3]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	4413      	add	r3, r2
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	091b      	lsrs	r3, r3, #4
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	b25b      	sxtb	r3, r3
 80126c0:	f003 0307 	and.w	r3, r3, #7
 80126c4:	b25b      	sxtb	r3, r3
 80126c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80126ca:	78fb      	ldrb	r3, [r7, #3]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	4413      	add	r3, r2
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	b25b      	sxtb	r3, r3
 80126d4:	f003 030f 	and.w	r3, r3, #15
 80126d8:	b25b      	sxtb	r3, r3
 80126da:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80126de:	78fb      	ldrb	r3, [r7, #3]
 80126e0:	3301      	adds	r3, #1
 80126e2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80126e4:	78fb      	ldrb	r3, [r7, #3]
 80126e6:	1c5a      	adds	r2, r3, #1
 80126e8:	70fa      	strb	r2, [r7, #3]
 80126ea:	461a      	mov	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4413      	add	r3, r2
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80126f4:	78fb      	ldrb	r3, [r7, #3]
 80126f6:	1c5a      	adds	r2, r3, #1
 80126f8:	70fa      	strb	r2, [r7, #3]
 80126fa:	461a      	mov	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	4413      	add	r3, r2
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	021a      	lsls	r2, r3, #8
 8012704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012706:	4313      	orrs	r3, r2
 8012708:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801270a:	78fb      	ldrb	r3, [r7, #3]
 801270c:	1c5a      	adds	r2, r3, #1
 801270e:	70fa      	strb	r2, [r7, #3]
 8012710:	461a      	mov	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4413      	add	r3, r2
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	041a      	lsls	r2, r3, #16
 801271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801271c:	4313      	orrs	r3, r2
 801271e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012722:	2264      	movs	r2, #100	; 0x64
 8012724:	fb02 f303 	mul.w	r3, r2, r3
 8012728:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801272a:	4b30      	ldr	r3, [pc, #192]	; (80127ec <ProcessMacCommands+0x390>)
 801272c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012730:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012734:	4611      	mov	r1, r2
 8012736:	4618      	mov	r0, r3
 8012738:	f005 f8ea 	bl	8017910 <RegionRxParamSetupReq>
 801273c:	4603      	mov	r3, r0
 801273e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012742:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012746:	f003 0307 	and.w	r3, r3, #7
 801274a:	2b07      	cmp	r3, #7
 801274c:	d117      	bne.n	801277e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801274e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012752:	b2da      	uxtb	r2, r3
 8012754:	4b25      	ldr	r3, [pc, #148]	; (80127ec <ProcessMacCommands+0x390>)
 8012756:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801275a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801275e:	b2da      	uxtb	r2, r3
 8012760:	4b22      	ldr	r3, [pc, #136]	; (80127ec <ProcessMacCommands+0x390>)
 8012762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012768:	4a20      	ldr	r2, [pc, #128]	; (80127ec <ProcessMacCommands+0x390>)
 801276a:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801276c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801276e:	4a1f      	ldr	r2, [pc, #124]	; (80127ec <ProcessMacCommands+0x390>)
 8012770:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012772:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012776:	b2da      	uxtb	r2, r3
 8012778:	4b1c      	ldr	r3, [pc, #112]	; (80127ec <ProcessMacCommands+0x390>)
 801277a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801277e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012782:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012786:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801278a:	2201      	movs	r2, #1
 801278c:	4619      	mov	r1, r3
 801278e:	2005      	movs	r0, #5
 8012790:	f003 fa0a 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                break;
 8012794:	bf00      	nop
 8012796:	e2e6      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012798:	23ff      	movs	r3, #255	; 0xff
 801279a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801279e:	4b12      	ldr	r3, [pc, #72]	; (80127e8 <ProcessMacCommands+0x38c>)
 80127a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00d      	beq.n	80127c4 <ProcessMacCommands+0x368>
 80127a8:	4b0f      	ldr	r3, [pc, #60]	; (80127e8 <ProcessMacCommands+0x38c>)
 80127aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d007      	beq.n	80127c4 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80127b4:	4b0c      	ldr	r3, [pc, #48]	; (80127e8 <ProcessMacCommands+0x38c>)
 80127b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	4798      	blx	r3
 80127be:	4603      	mov	r3, r0
 80127c0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80127c4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80127c8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80127cc:	787b      	ldrb	r3, [r7, #1]
 80127ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80127d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80127dc:	2202      	movs	r2, #2
 80127de:	4619      	mov	r1, r3
 80127e0:	2006      	movs	r0, #6
 80127e2:	f003 f9e1 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                break;
 80127e6:	e2be      	b.n	8012d66 <ProcessMacCommands+0x90a>
 80127e8:	20000980 	.word	0x20000980
 80127ec:	20000e88 	.word	0x20000e88
 80127f0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80127f4:	2303      	movs	r3, #3
 80127f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80127fa:	78fb      	ldrb	r3, [r7, #3]
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	70fa      	strb	r2, [r7, #3]
 8012800:	461a      	mov	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4413      	add	r3, r2
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	b25b      	sxtb	r3, r3
 801280a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801280e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012812:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012814:	78fb      	ldrb	r3, [r7, #3]
 8012816:	1c5a      	adds	r2, r3, #1
 8012818:	70fa      	strb	r2, [r7, #3]
 801281a:	461a      	mov	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4413      	add	r3, r2
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012824:	78fb      	ldrb	r3, [r7, #3]
 8012826:	1c5a      	adds	r2, r3, #1
 8012828:	70fa      	strb	r2, [r7, #3]
 801282a:	461a      	mov	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	4413      	add	r3, r2
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	021a      	lsls	r2, r3, #8
 8012834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012836:	4313      	orrs	r3, r2
 8012838:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801283a:	78fb      	ldrb	r3, [r7, #3]
 801283c:	1c5a      	adds	r2, r3, #1
 801283e:	70fa      	strb	r2, [r7, #3]
 8012840:	461a      	mov	r2, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	4413      	add	r3, r2
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	041a      	lsls	r2, r3, #16
 801284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284c:	4313      	orrs	r3, r2
 801284e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012852:	2264      	movs	r2, #100	; 0x64
 8012854:	fb02 f303 	mul.w	r3, r2, r3
 8012858:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801285a:	2300      	movs	r3, #0
 801285c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801285e:	78fb      	ldrb	r3, [r7, #3]
 8012860:	1c5a      	adds	r2, r3, #1
 8012862:	70fa      	strb	r2, [r7, #3]
 8012864:	461a      	mov	r2, r3
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	4413      	add	r3, r2
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	b25b      	sxtb	r3, r3
 801286e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012872:	4b85      	ldr	r3, [pc, #532]	; (8012a88 <ProcessMacCommands+0x62c>)
 8012874:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012878:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801287c:	4611      	mov	r1, r2
 801287e:	4618      	mov	r0, r3
 8012880:	f005 f859 	bl	8017936 <RegionNewChannelReq>
 8012884:	4603      	mov	r3, r0
 8012886:	b2db      	uxtb	r3, r3
 8012888:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801288c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012890:	b25b      	sxtb	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	db0a      	blt.n	80128ac <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012896:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801289a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801289e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128a2:	2201      	movs	r2, #1
 80128a4:	4619      	mov	r1, r3
 80128a6:	2007      	movs	r0, #7
 80128a8:	f003 f97e 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                }
                break;
 80128ac:	bf00      	nop
 80128ae:	e25a      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80128b0:	78fb      	ldrb	r3, [r7, #3]
 80128b2:	1c5a      	adds	r2, r3, #1
 80128b4:	70fa      	strb	r2, [r7, #3]
 80128b6:	461a      	mov	r2, r3
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4413      	add	r3, r2
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	f003 030f 	and.w	r3, r3, #15
 80128c2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80128c6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d104      	bne.n	80128d8 <ProcessMacCommands+0x47c>
                {
                    delay++;
 80128ce:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80128d2:	3301      	adds	r3, #1
 80128d4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80128d8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80128dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80128e0:	fb02 f303 	mul.w	r3, r2, r3
 80128e4:	461a      	mov	r2, r3
 80128e6:	4b68      	ldr	r3, [pc, #416]	; (8012a88 <ProcessMacCommands+0x62c>)
 80128e8:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80128ea:	4b67      	ldr	r3, [pc, #412]	; (8012a88 <ProcessMacCommands+0x62c>)
 80128ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80128f2:	4a65      	ldr	r2, [pc, #404]	; (8012a88 <ProcessMacCommands+0x62c>)
 80128f4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80128f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128fa:	2200      	movs	r2, #0
 80128fc:	4619      	mov	r1, r3
 80128fe:	2008      	movs	r0, #8
 8012900:	f003 f952 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                break;
 8012904:	e22f      	b.n	8012d66 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012906:	78fb      	ldrb	r3, [r7, #3]
 8012908:	1c5a      	adds	r2, r3, #1
 801290a:	70fa      	strb	r2, [r7, #3]
 801290c:	461a      	mov	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	4413      	add	r3, r2
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012924:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012928:	f003 0320 	and.w	r3, r3, #32
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012930:	2301      	movs	r3, #1
 8012932:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012936:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801293a:	f003 0310 	and.w	r3, r3, #16
 801293e:	2b00      	cmp	r3, #0
 8012940:	d002      	beq.n	8012948 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012942:	2301      	movs	r3, #1
 8012944:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012948:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801294c:	f003 030f 	and.w	r3, r3, #15
 8012950:	b2db      	uxtb	r3, r3
 8012952:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012956:	4b4c      	ldr	r3, [pc, #304]	; (8012a88 <ProcessMacCommands+0x62c>)
 8012958:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801295c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012960:	4611      	mov	r1, r2
 8012962:	4618      	mov	r0, r3
 8012964:	f004 fffa 	bl	801795c <RegionTxParamSetupReq>
 8012968:	4603      	mov	r3, r0
 801296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801296e:	d03b      	beq.n	80129e8 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012970:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012974:	4b44      	ldr	r3, [pc, #272]	; (8012a88 <ProcessMacCommands+0x62c>)
 8012976:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801297a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801297e:	4b42      	ldr	r3, [pc, #264]	; (8012a88 <ProcessMacCommands+0x62c>)
 8012980:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012984:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012988:	461a      	mov	r2, r3
 801298a:	4b40      	ldr	r3, [pc, #256]	; (8012a8c <ProcessMacCommands+0x630>)
 801298c:	5c9b      	ldrb	r3, [r3, r2]
 801298e:	4618      	mov	r0, r3
 8012990:	f7ee f97e 	bl	8000c90 <__aeabi_ui2f>
 8012994:	4603      	mov	r3, r0
 8012996:	4a3c      	ldr	r2, [pc, #240]	; (8012a88 <ProcessMacCommands+0x62c>)
 8012998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801299c:	2302      	movs	r3, #2
 801299e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80129a2:	4b39      	ldr	r3, [pc, #228]	; (8012a88 <ProcessMacCommands+0x62c>)
 80129a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80129a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80129ac:	4b36      	ldr	r3, [pc, #216]	; (8012a88 <ProcessMacCommands+0x62c>)
 80129ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80129b6:	4611      	mov	r1, r2
 80129b8:	4618      	mov	r0, r3
 80129ba:	f004 fed2 	bl	8017762 <RegionGetPhyParam>
 80129be:	4603      	mov	r3, r0
 80129c0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	b25a      	sxtb	r2, r3
 80129c6:	4b30      	ldr	r3, [pc, #192]	; (8012a88 <ProcessMacCommands+0x62c>)
 80129c8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80129cc:	4293      	cmp	r3, r2
 80129ce:	bfb8      	it	lt
 80129d0:	4613      	movlt	r3, r2
 80129d2:	b25a      	sxtb	r2, r3
 80129d4:	4b2c      	ldr	r3, [pc, #176]	; (8012a88 <ProcessMacCommands+0x62c>)
 80129d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80129da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80129de:	2200      	movs	r2, #0
 80129e0:	4619      	mov	r1, r3
 80129e2:	2009      	movs	r0, #9
 80129e4:	f003 f8e0 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                }
                break;
 80129e8:	bf00      	nop
 80129ea:	e1bc      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80129ec:	2303      	movs	r3, #3
 80129ee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80129f2:	78fb      	ldrb	r3, [r7, #3]
 80129f4:	1c5a      	adds	r2, r3, #1
 80129f6:	70fa      	strb	r2, [r7, #3]
 80129f8:	461a      	mov	r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	4413      	add	r3, r2
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012a04:	78fb      	ldrb	r3, [r7, #3]
 8012a06:	1c5a      	adds	r2, r3, #1
 8012a08:	70fa      	strb	r2, [r7, #3]
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	4413      	add	r3, r2
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a14:	78fb      	ldrb	r3, [r7, #3]
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	70fa      	strb	r2, [r7, #3]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	4413      	add	r3, r2
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	021a      	lsls	r2, r3, #8
 8012a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a26:	4313      	orrs	r3, r2
 8012a28:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012a2a:	78fb      	ldrb	r3, [r7, #3]
 8012a2c:	1c5a      	adds	r2, r3, #1
 8012a2e:	70fa      	strb	r2, [r7, #3]
 8012a30:	461a      	mov	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4413      	add	r3, r2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	041a      	lsls	r2, r3, #16
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a42:	2264      	movs	r2, #100	; 0x64
 8012a44:	fb02 f303 	mul.w	r3, r2, r3
 8012a48:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012a4a:	4b0f      	ldr	r3, [pc, #60]	; (8012a88 <ProcessMacCommands+0x62c>)
 8012a4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a50:	f107 0220 	add.w	r2, r7, #32
 8012a54:	4611      	mov	r1, r2
 8012a56:	4618      	mov	r0, r3
 8012a58:	f004 ff93 	bl	8017982 <RegionDlChannelReq>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012a64:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012a68:	b25b      	sxtb	r3, r3
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	db0a      	blt.n	8012a84 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012a6e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012a72:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012a76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	200a      	movs	r0, #10
 8012a80:	f003 f892 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                }
                break;
 8012a84:	bf00      	nop
 8012a86:	e16e      	b.n	8012d66 <ProcessMacCommands+0x90a>
 8012a88:	20000e88 	.word	0x20000e88
 8012a8c:	0801f944 	.word	0x0801f944
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012a90:	200a      	movs	r0, #10
 8012a92:	f003 fbc1 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f000 8164 	beq.w	8012d66 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012a9e:	210a      	movs	r1, #10
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	f003 fb2d 	bl	8016100 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012aa6:	f107 0318 	add.w	r3, r7, #24
 8012aaa:	2200      	movs	r2, #0
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012ab0:	f107 0310 	add.w	r3, r7, #16
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	601a      	str	r2, [r3, #0]
 8012ab8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012aba:	f107 0308 	add.w	r3, r7, #8
 8012abe:	2200      	movs	r2, #0
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012ac4:	78fb      	ldrb	r3, [r7, #3]
 8012ac6:	1c5a      	adds	r2, r3, #1
 8012ac8:	70fa      	strb	r2, [r7, #3]
 8012aca:	461a      	mov	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4413      	add	r3, r2
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012ad4:	78fb      	ldrb	r3, [r7, #3]
 8012ad6:	1c5a      	adds	r2, r3, #1
 8012ad8:	70fa      	strb	r2, [r7, #3]
 8012ada:	461a      	mov	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4413      	add	r3, r2
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	021a      	lsls	r2, r3, #8
 8012ae4:	69bb      	ldr	r3, [r7, #24]
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012aea:	78fb      	ldrb	r3, [r7, #3]
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	70fa      	strb	r2, [r7, #3]
 8012af0:	461a      	mov	r2, r3
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4413      	add	r3, r2
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	041a      	lsls	r2, r3, #16
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	4313      	orrs	r3, r2
 8012afe:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012b00:	78fb      	ldrb	r3, [r7, #3]
 8012b02:	1c5a      	adds	r2, r3, #1
 8012b04:	70fa      	strb	r2, [r7, #3]
 8012b06:	461a      	mov	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	061a      	lsls	r2, r3, #24
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	4313      	orrs	r3, r2
 8012b14:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012b16:	78fb      	ldrb	r3, [r7, #3]
 8012b18:	1c5a      	adds	r2, r3, #1
 8012b1a:	70fa      	strb	r2, [r7, #3]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4413      	add	r3, r2
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	b21b      	sxth	r3, r3
 8012b26:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012b28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b32:	fb02 f303 	mul.w	r3, r2, r3
 8012b36:	121b      	asrs	r3, r3, #8
 8012b38:	b21b      	sxth	r3, r3
 8012b3a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012b3c:	f107 0310 	add.w	r3, r7, #16
 8012b40:	f107 0218 	add.w	r2, r7, #24
 8012b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b48:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012b4c:	693a      	ldr	r2, [r7, #16]
 8012b4e:	4b8c      	ldr	r3, [pc, #560]	; (8012d80 <ProcessMacCommands+0x924>)
 8012b50:	4413      	add	r3, r2
 8012b52:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012b54:	f107 0308 	add.w	r3, r7, #8
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f00a fd4f 	bl	801d5fc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012b5e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012b62:	4b88      	ldr	r3, [pc, #544]	; (8012d84 <ProcessMacCommands+0x928>)
 8012b64:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012b68:	9200      	str	r2, [sp, #0]
 8012b6a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012b6e:	f107 0210 	add.w	r2, r7, #16
 8012b72:	ca06      	ldmia	r2, {r1, r2}
 8012b74:	f00a fcdb 	bl	801d52e <SysTimeSub>
 8012b78:	f107 0010 	add.w	r0, r7, #16
 8012b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b7e:	9300      	str	r3, [sp, #0]
 8012b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b82:	f107 0208 	add.w	r2, r7, #8
 8012b86:	ca06      	ldmia	r2, {r1, r2}
 8012b88:	f00a fc98 	bl	801d4bc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012b8c:	f107 0310 	add.w	r3, r7, #16
 8012b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b94:	f00a fd04 	bl	801d5a0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012b98:	f002 febf 	bl	801591a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012b9c:	4b79      	ldr	r3, [pc, #484]	; (8012d84 <ProcessMacCommands+0x928>)
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012ba4:	e0df      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012ba6:	200d      	movs	r0, #13
 8012ba8:	f003 fb36 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 80d9 	beq.w	8012d66 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012bb4:	210d      	movs	r1, #13
 8012bb6:	2000      	movs	r0, #0
 8012bb8:	f003 faa2 	bl	8016100 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012bbc:	4b71      	ldr	r3, [pc, #452]	; (8012d84 <ProcessMacCommands+0x928>)
 8012bbe:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012bc2:	2b04      	cmp	r3, #4
 8012bc4:	f000 80cf 	beq.w	8012d66 <ProcessMacCommands+0x90a>
 8012bc8:	4b6e      	ldr	r3, [pc, #440]	; (8012d84 <ProcessMacCommands+0x928>)
 8012bca:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012bce:	2b05      	cmp	r3, #5
 8012bd0:	f000 80c9 	beq.w	8012d66 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012bd4:	f002 fe82 	bl	80158dc <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012bd8:	e0c5      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012bda:	2303      	movs	r3, #3
 8012bdc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012be0:	2300      	movs	r3, #0
 8012be2:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012be4:	78fb      	ldrb	r3, [r7, #3]
 8012be6:	1c5a      	adds	r2, r3, #1
 8012be8:	70fa      	strb	r2, [r7, #3]
 8012bea:	461a      	mov	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	4413      	add	r3, r2
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012bf4:	78fb      	ldrb	r3, [r7, #3]
 8012bf6:	1c5a      	adds	r2, r3, #1
 8012bf8:	70fa      	strb	r2, [r7, #3]
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4413      	add	r3, r2
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	021b      	lsls	r3, r3, #8
 8012c04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c06:	4313      	orrs	r3, r2
 8012c08:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c0a:	78fb      	ldrb	r3, [r7, #3]
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	70fa      	strb	r2, [r7, #3]
 8012c10:	461a      	mov	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	4413      	add	r3, r2
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	041b      	lsls	r3, r3, #16
 8012c1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c22:	2264      	movs	r2, #100	; 0x64
 8012c24:	fb02 f303 	mul.w	r3, r2, r3
 8012c28:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012c2a:	78fb      	ldrb	r3, [r7, #3]
 8012c2c:	1c5a      	adds	r2, r3, #1
 8012c2e:	70fa      	strb	r2, [r7, #3]
 8012c30:	461a      	mov	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	4413      	add	r3, r2
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	f003 030f 	and.w	r3, r3, #15
 8012c3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012c40:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012c44:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012c46:	4618      	mov	r0, r3
 8012c48:	f002 fe4e 	bl	80158e8 <LoRaMacClassBPingSlotChannelReq>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012c52:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012c56:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012c5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c5e:	2201      	movs	r2, #1
 8012c60:	4619      	mov	r1, r3
 8012c62:	2011      	movs	r0, #17
 8012c64:	f002 ffa0 	bl	8015ba8 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012c68:	e07d      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012c6a:	200e      	movs	r0, #14
 8012c6c:	f003 fad4 	bl	8016218 <LoRaMacConfirmQueueIsCmdActive>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d077      	beq.n	8012d66 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012c76:	210e      	movs	r1, #14
 8012c78:	2000      	movs	r0, #0
 8012c7a:	f003 fa41 	bl	8016100 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012c84:	2300      	movs	r3, #0
 8012c86:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012c8a:	78fb      	ldrb	r3, [r7, #3]
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	70fa      	strb	r2, [r7, #3]
 8012c90:	461a      	mov	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4413      	add	r3, r2
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012c9c:	78fb      	ldrb	r3, [r7, #3]
 8012c9e:	1c5a      	adds	r2, r3, #1
 8012ca0:	70fa      	strb	r2, [r7, #3]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	021b      	lsls	r3, r3, #8
 8012cac:	b21a      	sxth	r2, r3
 8012cae:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012cb2:	4313      	orrs	r3, r2
 8012cb4:	b21b      	sxth	r3, r3
 8012cb6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012cba:	78fb      	ldrb	r3, [r7, #3]
 8012cbc:	1c5a      	adds	r2, r3, #1
 8012cbe:	70fa      	strb	r2, [r7, #3]
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012ccc:	4b2e      	ldr	r3, [pc, #184]	; (8012d88 <ProcessMacCommands+0x92c>)
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012cd4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f002 fe11 	bl	8015900 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012cde:	e042      	b.n	8012d66 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012ce6:	78fb      	ldrb	r3, [r7, #3]
 8012ce8:	1c5a      	adds	r2, r3, #1
 8012cea:	70fa      	strb	r2, [r7, #3]
 8012cec:	461a      	mov	r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012cf8:	78fb      	ldrb	r3, [r7, #3]
 8012cfa:	1c5a      	adds	r2, r3, #1
 8012cfc:	70fa      	strb	r2, [r7, #3]
 8012cfe:	461a      	mov	r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	4413      	add	r3, r2
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	021b      	lsls	r3, r3, #8
 8012d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d0c:	4313      	orrs	r3, r2
 8012d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012d12:	78fb      	ldrb	r3, [r7, #3]
 8012d14:	1c5a      	adds	r2, r3, #1
 8012d16:	70fa      	strb	r2, [r7, #3]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	041b      	lsls	r3, r3, #16
 8012d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d26:	4313      	orrs	r3, r2
 8012d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d30:	2264      	movs	r2, #100	; 0x64
 8012d32:	fb02 f303 	mul.w	r3, r2, r3
 8012d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012d3a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012d3e:	f002 fdf2 	bl	8015926 <LoRaMacClassBBeaconFreqReq>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d003      	beq.n	8012d50 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012d4e:	e002      	b.n	8012d56 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012d50:	2300      	movs	r3, #0
 8012d52:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012d56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	2013      	movs	r0, #19
 8012d60:	f002 ff22 	bl	8015ba8 <LoRaMacCommandsAddCmd>
                }
                break;
 8012d64:	bf00      	nop
    while( macIndex < commandsSize )
 8012d66:	78fa      	ldrb	r2, [r7, #3]
 8012d68:	78bb      	ldrb	r3, [r7, #2]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	f4ff ab8e 	bcc.w	801248c <ProcessMacCommands+0x30>
 8012d70:	e002      	b.n	8012d78 <ProcessMacCommands+0x91c>
            return;
 8012d72:	bf00      	nop
 8012d74:	e000      	b.n	8012d78 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012d76:	bf00      	nop
        }
    }
}
 8012d78:	378c      	adds	r7, #140	; 0x8c
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd90      	pop	{r4, r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	12d53d80 	.word	0x12d53d80
 8012d84:	20000980 	.word	0x20000980
 8012d88:	200015f8 	.word	0x200015f8

08012d8c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b08e      	sub	sp, #56	; 0x38
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	60f8      	str	r0, [r7, #12]
 8012d94:	607a      	str	r2, [r7, #4]
 8012d96:	461a      	mov	r2, r3
 8012d98:	460b      	mov	r3, r1
 8012d9a:	72fb      	strb	r3, [r7, #11]
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012da0:	2303      	movs	r3, #3
 8012da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012da6:	4b65      	ldr	r3, [pc, #404]	; (8012f3c <Send+0x1b0>)
 8012da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012dac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012db0:	4b62      	ldr	r3, [pc, #392]	; (8012f3c <Send+0x1b0>)
 8012db2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012db6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012dba:	4b60      	ldr	r3, [pc, #384]	; (8012f3c <Send+0x1b0>)
 8012dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012dc0:	4b5e      	ldr	r3, [pc, #376]	; (8012f3c <Send+0x1b0>)
 8012dc2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d101      	bne.n	8012dce <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012dca:	2307      	movs	r3, #7
 8012dcc:	e0b1      	b.n	8012f32 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012dce:	4b5b      	ldr	r3, [pc, #364]	; (8012f3c <Send+0x1b0>)
 8012dd0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d102      	bne.n	8012dde <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012dd8:	4b58      	ldr	r3, [pc, #352]	; (8012f3c <Send+0x1b0>)
 8012dda:	2200      	movs	r2, #0
 8012ddc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012de4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012de8:	f36f 0303 	bfc	r3, #0, #4
 8012dec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012df0:	4b52      	ldr	r3, [pc, #328]	; (8012f3c <Send+0x1b0>)
 8012df2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012df6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012dfa:	f362 13c7 	bfi	r3, r2, #7, #1
 8012dfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e02:	4b4e      	ldr	r3, [pc, #312]	; (8012f3c <Send+0x1b0>)
 8012e04:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d106      	bne.n	8012e1a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012e0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e10:	f043 0310 	orr.w	r3, r3, #16
 8012e14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012e18:	e005      	b.n	8012e26 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e1e:	f36f 1304 	bfc	r3, #4, #1
 8012e22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012e26:	4b45      	ldr	r3, [pc, #276]	; (8012f3c <Send+0x1b0>)
 8012e28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d005      	beq.n	8012e3c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012e30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e34:	f043 0320 	orr.w	r3, r3, #32
 8012e38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012e40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	bf14      	ite	ne
 8012e4e:	2301      	movne	r3, #1
 8012e50:	2300      	moveq	r3, #0
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012e56:	4b39      	ldr	r3, [pc, #228]	; (8012f3c <Send+0x1b0>)
 8012e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e5a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012e5c:	4b37      	ldr	r3, [pc, #220]	; (8012f3c <Send+0x1b0>)
 8012e5e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012e62:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012e64:	4b35      	ldr	r3, [pc, #212]	; (8012f3c <Send+0x1b0>)
 8012e66:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012e6a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e6c:	4b33      	ldr	r3, [pc, #204]	; (8012f3c <Send+0x1b0>)
 8012e6e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012e72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e76:	4b31      	ldr	r3, [pc, #196]	; (8012f3c <Send+0x1b0>)
 8012e78:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012e7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012e80:	4b2e      	ldr	r3, [pc, #184]	; (8012f3c <Send+0x1b0>)
 8012e82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012e8a:	4b2c      	ldr	r3, [pc, #176]	; (8012f3c <Send+0x1b0>)
 8012e8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012e94:	4b29      	ldr	r3, [pc, #164]	; (8012f3c <Send+0x1b0>)
 8012e96:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012e9a:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ea0:	f107 0014 	add.w	r0, r7, #20
 8012ea4:	4a26      	ldr	r2, [pc, #152]	; (8012f40 <Send+0x1b4>)
 8012ea6:	4927      	ldr	r1, [pc, #156]	; (8012f44 <Send+0x1b8>)
 8012ea8:	f002 fc58 	bl	801575c <LoRaMacAdrCalcNext>
 8012eac:	4603      	mov	r3, r0
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eb4:	f362 1386 	bfi	r3, r2, #6, #1
 8012eb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012ebc:	7afa      	ldrb	r2, [r7, #11]
 8012ebe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012ec2:	893b      	ldrh	r3, [r7, #8]
 8012ec4:	9300      	str	r3, [sp, #0]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f000 fc5d 	bl	8013788 <PrepareFrame>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d003      	beq.n	8012ee4 <Send+0x158>
 8012edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ee0:	2b0a      	cmp	r3, #10
 8012ee2:	d107      	bne.n	8012ef4 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012ee4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f000 f961 	bl	80131b0 <ScheduleTx>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d00a      	beq.n	8012f12 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012efc:	4a0f      	ldr	r2, [pc, #60]	; (8012f3c <Send+0x1b0>)
 8012efe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012f02:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012f06:	4a0d      	ldr	r2, [pc, #52]	; (8012f3c <Send+0x1b0>)
 8012f08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f0c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012f10:	e00d      	b.n	8012f2e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012f12:	4b0a      	ldr	r3, [pc, #40]	; (8012f3c <Send+0x1b0>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1c:	4a07      	ldr	r2, [pc, #28]	; (8012f3c <Send+0x1b0>)
 8012f1e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012f20:	f002 fee8 	bl	8015cf4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d001      	beq.n	8012f2e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f2a:	2313      	movs	r3, #19
 8012f2c:	e001      	b.n	8012f32 <Send+0x1a6>
        }
    }
    return status;
 8012f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3730      	adds	r7, #48	; 0x30
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	20000e88 	.word	0x20000e88
 8012f40:	20000ec0 	.word	0x20000ec0
 8012f44:	20000ec1 	.word	0x20000ec1

08012f48 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	4603      	mov	r3, r0
 8012f50:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012f52:	2300      	movs	r3, #0
 8012f54:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012f56:	2300      	movs	r3, #0
 8012f58:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012f5e:	79fb      	ldrb	r3, [r7, #7]
 8012f60:	2bff      	cmp	r3, #255	; 0xff
 8012f62:	d11f      	bne.n	8012fa4 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012f64:	2000      	movs	r0, #0
 8012f66:	f7ff f941 	bl	80121ec <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012f6a:	4b15      	ldr	r3, [pc, #84]	; (8012fc0 <SendReJoinReq+0x78>)
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012f72:	4b13      	ldr	r3, [pc, #76]	; (8012fc0 <SendReJoinReq+0x78>)
 8012f74:	4a13      	ldr	r2, [pc, #76]	; (8012fc4 <SendReJoinReq+0x7c>)
 8012f76:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012f7a:	4b11      	ldr	r3, [pc, #68]	; (8012fc0 <SendReJoinReq+0x78>)
 8012f7c:	22ff      	movs	r2, #255	; 0xff
 8012f7e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012f82:	7b3b      	ldrb	r3, [r7, #12]
 8012f84:	f36f 1347 	bfc	r3, #5, #3
 8012f88:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012f8a:	7b3a      	ldrb	r2, [r7, #12]
 8012f8c:	4b0c      	ldr	r3, [pc, #48]	; (8012fc0 <SendReJoinReq+0x78>)
 8012f8e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012f92:	480d      	ldr	r0, [pc, #52]	; (8012fc8 <SendReJoinReq+0x80>)
 8012f94:	f7fc fb1c 	bl	800f5d0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012f98:	480c      	ldr	r0, [pc, #48]	; (8012fcc <SendReJoinReq+0x84>)
 8012f9a:	f7fc fae9 	bl	800f570 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	73fb      	strb	r3, [r7, #15]

            break;
 8012fa2:	e002      	b.n	8012faa <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	73bb      	strb	r3, [r7, #14]
            break;
 8012fa8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012faa:	7bfb      	ldrb	r3, [r7, #15]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f000 f8ff 	bl	80131b0 <ScheduleTx>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	73bb      	strb	r3, [r7, #14]
    return status;
 8012fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3710      	adds	r7, #16
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	20000980 	.word	0x20000980
 8012fc4:	20000982 	.word	0x20000982
 8012fc8:	20000a8e 	.word	0x20000a8e
 8012fcc:	20000a96 	.word	0x20000a96

08012fd0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012fd4:	f002 fc31 	bl	801583a <LoRaMacClassBIsBeaconExpected>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d001      	beq.n	8012fe2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012fde:	230e      	movs	r3, #14
 8012fe0:	e013      	b.n	801300a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012fe2:	4b0b      	ldr	r3, [pc, #44]	; (8013010 <CheckForClassBCollision+0x40>)
 8012fe4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d10d      	bne.n	8013008 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012fec:	f002 fc2c 	bl	8015848 <LoRaMacClassBIsPingExpected>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d001      	beq.n	8012ffa <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012ff6:	230f      	movs	r3, #15
 8012ff8:	e007      	b.n	801300a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012ffa:	f002 fc2c 	bl	8015856 <LoRaMacClassBIsMulticastExpected>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013004:	230f      	movs	r3, #15
 8013006:	e000      	b.n	801300a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	20000e88 	.word	0x20000e88

08013014 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8013014:	b590      	push	{r4, r7, lr}
 8013016:	b083      	sub	sp, #12
 8013018:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801301a:	4b2d      	ldr	r3, [pc, #180]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 801301c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013020:	4b2b      	ldr	r3, [pc, #172]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013022:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013026:	4b2a      	ldr	r3, [pc, #168]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013028:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 801302c:	4b28      	ldr	r3, [pc, #160]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 801302e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8013032:	4b27      	ldr	r3, [pc, #156]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013034:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013038:	b25b      	sxtb	r3, r3
 801303a:	f004 fcf9 	bl	8017a30 <RegionApplyDrOffset>
 801303e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013040:	b259      	sxtb	r1, r3
 8013042:	4b23      	ldr	r3, [pc, #140]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013044:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013048:	4b21      	ldr	r3, [pc, #132]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 801304a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801304c:	4821      	ldr	r0, [pc, #132]	; (80130d4 <ComputeRxWindowParameters+0xc0>)
 801304e:	9000      	str	r0, [sp, #0]
 8013050:	4620      	mov	r0, r4
 8013052:	f004 fbfd 	bl	8017850 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013056:	4b1e      	ldr	r3, [pc, #120]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013058:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 801305c:	4b1c      	ldr	r3, [pc, #112]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 801305e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013062:	b259      	sxtb	r1, r3
 8013064:	4b1a      	ldr	r3, [pc, #104]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013066:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801306a:	4b19      	ldr	r3, [pc, #100]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 801306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801306e:	4c1a      	ldr	r4, [pc, #104]	; (80130d8 <ComputeRxWindowParameters+0xc4>)
 8013070:	9400      	str	r4, [sp, #0]
 8013072:	f004 fbed 	bl	8017850 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013076:	4b16      	ldr	r3, [pc, #88]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 8013078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801307a:	4a18      	ldr	r2, [pc, #96]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 801307c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013080:	4413      	add	r3, r2
 8013082:	4a16      	ldr	r2, [pc, #88]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 8013084:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013088:	4b11      	ldr	r3, [pc, #68]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 801308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801308c:	4a13      	ldr	r2, [pc, #76]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 801308e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013092:	4413      	add	r3, r2
 8013094:	4a11      	ldr	r2, [pc, #68]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 8013096:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 801309a:	4b10      	ldr	r3, [pc, #64]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 801309c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80130a0:	2b04      	cmp	r3, #4
 80130a2:	d011      	beq.n	80130c8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80130a4:	4b0a      	ldr	r3, [pc, #40]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 80130a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80130a8:	4a0c      	ldr	r2, [pc, #48]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 80130aa:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80130ae:	4413      	add	r3, r2
 80130b0:	4a0a      	ldr	r2, [pc, #40]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 80130b2:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80130b6:	4b06      	ldr	r3, [pc, #24]	; (80130d0 <ComputeRxWindowParameters+0xbc>)
 80130b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130ba:	4a08      	ldr	r2, [pc, #32]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 80130bc:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80130c0:	4413      	add	r3, r2
 80130c2:	4a06      	ldr	r2, [pc, #24]	; (80130dc <ComputeRxWindowParameters+0xc8>)
 80130c4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80130c8:	bf00      	nop
 80130ca:	3704      	adds	r7, #4
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd90      	pop	{r4, r7, pc}
 80130d0:	20000e88 	.word	0x20000e88
 80130d4:	20000d38 	.word	0x20000d38
 80130d8:	20000d4c 	.word	0x20000d4c
 80130dc:	20000980 	.word	0x20000980

080130e0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80130e6:	2300      	movs	r3, #0
 80130e8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80130ea:	4b13      	ldr	r3, [pc, #76]	; (8013138 <VerifyTxFrame+0x58>)
 80130ec:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01b      	beq.n	801312c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80130f4:	1d3b      	adds	r3, r7, #4
 80130f6:	4618      	mov	r0, r3
 80130f8:	f002 fe4c 	bl	8015d94 <LoRaMacCommandsGetSizeSerializedCmds>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d001      	beq.n	8013106 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013102:	2313      	movs	r3, #19
 8013104:	e013      	b.n	801312e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013106:	4b0d      	ldr	r3, [pc, #52]	; (801313c <VerifyTxFrame+0x5c>)
 8013108:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801310c:	4a0a      	ldr	r2, [pc, #40]	; (8013138 <VerifyTxFrame+0x58>)
 801310e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	b2d2      	uxtb	r2, r2
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff f978 	bl	801240c <ValidatePayloadLength>
 801311c:	4603      	mov	r3, r0
 801311e:	f083 0301 	eor.w	r3, r3, #1
 8013122:	b2db      	uxtb	r3, r3
 8013124:	2b00      	cmp	r3, #0
 8013126:	d001      	beq.n	801312c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013128:	2308      	movs	r3, #8
 801312a:	e000      	b.n	801312e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 801312c:	2300      	movs	r3, #0
}
 801312e:	4618      	mov	r0, r3
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	20000e88 	.word	0x20000e88
 801313c:	20000980 	.word	0x20000980

08013140 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8013146:	4b18      	ldr	r3, [pc, #96]	; (80131a8 <SerializeTxFrame+0x68>)
 8013148:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801314c:	2b00      	cmp	r3, #0
 801314e:	d002      	beq.n	8013156 <SerializeTxFrame+0x16>
 8013150:	2b04      	cmp	r3, #4
 8013152:	d011      	beq.n	8013178 <SerializeTxFrame+0x38>
 8013154:	e021      	b.n	801319a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013156:	4815      	ldr	r0, [pc, #84]	; (80131ac <SerializeTxFrame+0x6c>)
 8013158:	f004 f97a 	bl	8017450 <LoRaMacSerializerJoinRequest>
 801315c:	4603      	mov	r3, r0
 801315e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013160:	79fb      	ldrb	r3, [r7, #7]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d001      	beq.n	801316a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013166:	2311      	movs	r3, #17
 8013168:	e01a      	b.n	80131a0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801316a:	4b0f      	ldr	r3, [pc, #60]	; (80131a8 <SerializeTxFrame+0x68>)
 801316c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013170:	b29a      	uxth	r2, r3
 8013172:	4b0d      	ldr	r3, [pc, #52]	; (80131a8 <SerializeTxFrame+0x68>)
 8013174:	801a      	strh	r2, [r3, #0]
            break;
 8013176:	e012      	b.n	801319e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013178:	480c      	ldr	r0, [pc, #48]	; (80131ac <SerializeTxFrame+0x6c>)
 801317a:	f004 f9eb 	bl	8017554 <LoRaMacSerializerData>
 801317e:	4603      	mov	r3, r0
 8013180:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013182:	79fb      	ldrb	r3, [r7, #7]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013188:	2311      	movs	r3, #17
 801318a:	e009      	b.n	80131a0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801318c:	4b06      	ldr	r3, [pc, #24]	; (80131a8 <SerializeTxFrame+0x68>)
 801318e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013192:	b29a      	uxth	r2, r3
 8013194:	4b04      	ldr	r3, [pc, #16]	; (80131a8 <SerializeTxFrame+0x68>)
 8013196:	801a      	strh	r2, [r3, #0]
            break;
 8013198:	e001      	b.n	801319e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801319a:	2303      	movs	r3, #3
 801319c:	e000      	b.n	80131a0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	20000980 	.word	0x20000980
 80131ac:	20000a88 	.word	0x20000a88

080131b0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b090      	sub	sp, #64	; 0x40
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	4603      	mov	r3, r0
 80131b8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131ba:	2303      	movs	r3, #3
 80131bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80131c0:	f7ff ff06 	bl	8012fd0 <CheckForClassBCollision>
 80131c4:	4603      	mov	r3, r0
 80131c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80131ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d002      	beq.n	80131d8 <ScheduleTx+0x28>
    {
        return status;
 80131d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131d6:	e092      	b.n	80132fe <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80131d8:	f000 f8fe 	bl	80133d8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80131dc:	f7ff ffb0 	bl	8013140 <SerializeTxFrame>
 80131e0:	4603      	mov	r3, r0
 80131e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80131e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d002      	beq.n	80131f4 <ScheduleTx+0x44>
    {
        return status;
 80131ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131f2:	e084      	b.n	80132fe <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80131f4:	4b44      	ldr	r3, [pc, #272]	; (8013308 <ScheduleTx+0x158>)
 80131f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80131fa:	4b43      	ldr	r3, [pc, #268]	; (8013308 <ScheduleTx+0x158>)
 80131fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013200:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8013202:	4b41      	ldr	r3, [pc, #260]	; (8013308 <ScheduleTx+0x158>)
 8013204:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013208:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801320a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801320e:	4618      	mov	r0, r3
 8013210:	f00a fa2c 	bl	801d66c <SysTimeGetMcuTime>
 8013214:	4638      	mov	r0, r7
 8013216:	4b3c      	ldr	r3, [pc, #240]	; (8013308 <ScheduleTx+0x158>)
 8013218:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 801321c:	9200      	str	r2, [sp, #0]
 801321e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013222:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013226:	ca06      	ldmia	r2, {r1, r2}
 8013228:	f00a f981 	bl	801d52e <SysTimeSub>
 801322c:	f107 0320 	add.w	r3, r7, #32
 8013230:	463a      	mov	r2, r7
 8013232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013236:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801323a:	4b33      	ldr	r3, [pc, #204]	; (8013308 <ScheduleTx+0x158>)
 801323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8013240:	2300      	movs	r3, #0
 8013242:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8013246:	2301      	movs	r3, #1
 8013248:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801324a:	4b30      	ldr	r3, [pc, #192]	; (801330c <ScheduleTx+0x15c>)
 801324c:	881b      	ldrh	r3, [r3, #0]
 801324e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013250:	4b2d      	ldr	r3, [pc, #180]	; (8013308 <ScheduleTx+0x158>)
 8013252:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8013256:	2b00      	cmp	r3, #0
 8013258:	d104      	bne.n	8013264 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801325a:	2301      	movs	r3, #1
 801325c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013260:	2300      	movs	r3, #0
 8013262:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013264:	4b28      	ldr	r3, [pc, #160]	; (8013308 <ScheduleTx+0x158>)
 8013266:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801326a:	f107 0114 	add.w	r1, r7, #20
 801326e:	4b28      	ldr	r3, [pc, #160]	; (8013310 <ScheduleTx+0x160>)
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	4b28      	ldr	r3, [pc, #160]	; (8013314 <ScheduleTx+0x164>)
 8013274:	4a28      	ldr	r2, [pc, #160]	; (8013318 <ScheduleTx+0x168>)
 8013276:	f004 fbb1 	bl	80179dc <RegionNextChannel>
 801327a:	4603      	mov	r3, r0
 801327c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013284:	2b00      	cmp	r3, #0
 8013286:	d025      	beq.n	80132d4 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801328c:	2b0b      	cmp	r3, #11
 801328e:	d11e      	bne.n	80132ce <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8013290:	4b1e      	ldr	r3, [pc, #120]	; (801330c <ScheduleTx+0x15c>)
 8013292:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013296:	2b00      	cmp	r3, #0
 8013298:	d01c      	beq.n	80132d4 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 801329a:	7bfb      	ldrb	r3, [r7, #15]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d013      	beq.n	80132c8 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80132a0:	4b1a      	ldr	r3, [pc, #104]	; (801330c <ScheduleTx+0x15c>)
 80132a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80132a6:	f043 0320 	orr.w	r3, r3, #32
 80132aa:	4a18      	ldr	r2, [pc, #96]	; (801330c <ScheduleTx+0x15c>)
 80132ac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80132b0:	4b16      	ldr	r3, [pc, #88]	; (801330c <ScheduleTx+0x15c>)
 80132b2:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80132b6:	4619      	mov	r1, r3
 80132b8:	4818      	ldr	r0, [pc, #96]	; (801331c <ScheduleTx+0x16c>)
 80132ba:	f00a ff77 	bl	801e1ac <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80132be:	4817      	ldr	r0, [pc, #92]	; (801331c <ScheduleTx+0x16c>)
 80132c0:	f00a fe96 	bl	801dff0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80132c4:	2300      	movs	r3, #0
 80132c6:	e01a      	b.n	80132fe <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80132c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132cc:	e017      	b.n	80132fe <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80132ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132d2:	e014      	b.n	80132fe <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80132d4:	f7ff fe9e 	bl	8013014 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80132d8:	f7ff ff02 	bl	80130e0 <VerifyTxFrame>
 80132dc:	4603      	mov	r3, r0
 80132de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80132e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d002      	beq.n	80132f0 <ScheduleTx+0x140>
    {
        return status;
 80132ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132ee:	e006      	b.n	80132fe <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80132f0:	4b06      	ldr	r3, [pc, #24]	; (801330c <ScheduleTx+0x15c>)
 80132f2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80132f6:	4618      	mov	r0, r3
 80132f8:	f000 fb62 	bl	80139c0 <SendFrameOnChannel>
 80132fc:	4603      	mov	r3, r0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3738      	adds	r7, #56	; 0x38
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	20000e88 	.word	0x20000e88
 801330c:	20000980 	.word	0x20000980
 8013310:	20000eb8 	.word	0x20000eb8
 8013314:	20000e04 	.word	0x20000e04
 8013318:	20000d91 	.word	0x20000d91
 801331c:	20000ce8 	.word	0x20000ce8

08013320 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	4603      	mov	r3, r0
 8013328:	460a      	mov	r2, r1
 801332a:	71fb      	strb	r3, [r7, #7]
 801332c:	4613      	mov	r3, r2
 801332e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013330:	2313      	movs	r3, #19
 8013332:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013334:	2300      	movs	r3, #0
 8013336:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013338:	4b25      	ldr	r3, [pc, #148]	; (80133d0 <SecureFrame+0xb0>)
 801333a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801333e:	2b00      	cmp	r3, #0
 8013340:	d002      	beq.n	8013348 <SecureFrame+0x28>
 8013342:	2b04      	cmp	r3, #4
 8013344:	d011      	beq.n	801336a <SecureFrame+0x4a>
 8013346:	e03b      	b.n	80133c0 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013348:	4822      	ldr	r0, [pc, #136]	; (80133d4 <SecureFrame+0xb4>)
 801334a:	f003 fc47 	bl	8016bdc <LoRaMacCryptoPrepareJoinRequest>
 801334e:	4603      	mov	r3, r0
 8013350:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013352:	7bfb      	ldrb	r3, [r7, #15]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d001      	beq.n	801335c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013358:	2311      	movs	r3, #17
 801335a:	e034      	b.n	80133c6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801335c:	4b1c      	ldr	r3, [pc, #112]	; (80133d0 <SecureFrame+0xb0>)
 801335e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013362:	b29a      	uxth	r2, r3
 8013364:	4b1a      	ldr	r3, [pc, #104]	; (80133d0 <SecureFrame+0xb0>)
 8013366:	801a      	strh	r2, [r3, #0]
            break;
 8013368:	e02c      	b.n	80133c4 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801336a:	f107 0308 	add.w	r3, r7, #8
 801336e:	4618      	mov	r0, r3
 8013370:	f003 fb44 	bl	80169fc <LoRaMacCryptoGetFCntUp>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801337a:	2312      	movs	r3, #18
 801337c:	e023      	b.n	80133c6 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 801337e:	4b14      	ldr	r3, [pc, #80]	; (80133d0 <SecureFrame+0xb0>)
 8013380:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013384:	2b00      	cmp	r3, #0
 8013386:	d104      	bne.n	8013392 <SecureFrame+0x72>
 8013388:	4b11      	ldr	r3, [pc, #68]	; (80133d0 <SecureFrame+0xb0>)
 801338a:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 801338e:	2b01      	cmp	r3, #1
 8013390:	d902      	bls.n	8013398 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	3b01      	subs	r3, #1
 8013396:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013398:	68b8      	ldr	r0, [r7, #8]
 801339a:	79ba      	ldrb	r2, [r7, #6]
 801339c:	79f9      	ldrb	r1, [r7, #7]
 801339e:	4b0d      	ldr	r3, [pc, #52]	; (80133d4 <SecureFrame+0xb4>)
 80133a0:	f003 fd4a 	bl	8016e38 <LoRaMacCryptoSecureMessage>
 80133a4:	4603      	mov	r3, r0
 80133a6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80133a8:	7bfb      	ldrb	r3, [r7, #15]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d001      	beq.n	80133b2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133ae:	2311      	movs	r3, #17
 80133b0:	e009      	b.n	80133c6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80133b2:	4b07      	ldr	r3, [pc, #28]	; (80133d0 <SecureFrame+0xb0>)
 80133b4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	4b05      	ldr	r3, [pc, #20]	; (80133d0 <SecureFrame+0xb0>)
 80133bc:	801a      	strh	r2, [r3, #0]
            break;
 80133be:	e001      	b.n	80133c4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80133c0:	2303      	movs	r3, #3
 80133c2:	e000      	b.n	80133c6 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3710      	adds	r7, #16
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	20000980 	.word	0x20000980
 80133d4:	20000a88 	.word	0x20000a88

080133d8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80133d8:	b480      	push	{r7}
 80133da:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80133dc:	4b09      	ldr	r3, [pc, #36]	; (8013404 <CalculateBackOff+0x2c>)
 80133de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d10a      	bne.n	80133fa <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80133e4:	4b07      	ldr	r3, [pc, #28]	; (8013404 <CalculateBackOff+0x2c>)
 80133e6:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 80133ea:	3b01      	subs	r3, #1
 80133ec:	4a06      	ldr	r2, [pc, #24]	; (8013408 <CalculateBackOff+0x30>)
 80133ee:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 80133f2:	fb02 f303 	mul.w	r3, r2, r3
 80133f6:	4a03      	ldr	r2, [pc, #12]	; (8013404 <CalculateBackOff+0x2c>)
 80133f8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80133fa:	bf00      	nop
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bc80      	pop	{r7}
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	20000e88 	.word	0x20000e88
 8013408:	20000980 	.word	0x20000980

0801340c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
 8013412:	4603      	mov	r3, r0
 8013414:	7139      	strb	r1, [r7, #4]
 8013416:	71fb      	strb	r3, [r7, #7]
 8013418:	4613      	mov	r3, r2
 801341a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801341c:	79fb      	ldrb	r3, [r7, #7]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d002      	beq.n	8013428 <RemoveMacCommands+0x1c>
 8013422:	79fb      	ldrb	r3, [r7, #7]
 8013424:	2b01      	cmp	r3, #1
 8013426:	d10d      	bne.n	8013444 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013428:	79bb      	ldrb	r3, [r7, #6]
 801342a:	2b01      	cmp	r3, #1
 801342c:	d108      	bne.n	8013440 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801342e:	793b      	ldrb	r3, [r7, #4]
 8013430:	f003 0320 	and.w	r3, r3, #32
 8013434:	b2db      	uxtb	r3, r3
 8013436:	2b00      	cmp	r3, #0
 8013438:	d004      	beq.n	8013444 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801343a:	f002 fc7f 	bl	8015d3c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801343e:	e001      	b.n	8013444 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013440:	f002 fc7c 	bl	8015d3c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013444:	bf00      	nop
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 801344c:	b5b0      	push	{r4, r5, r7, lr}
 801344e:	b090      	sub	sp, #64	; 0x40
 8013450:	af00      	add	r7, sp, #0
 8013452:	4603      	mov	r3, r0
 8013454:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8013456:	79fb      	ldrb	r3, [r7, #7]
 8013458:	f083 0301 	eor.w	r3, r3, #1
 801345c:	b2db      	uxtb	r3, r3
 801345e:	2b00      	cmp	r3, #0
 8013460:	d003      	beq.n	801346a <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8013462:	4b80      	ldr	r3, [pc, #512]	; (8013664 <ResetMacParameters+0x218>)
 8013464:	2200      	movs	r2, #0
 8013466:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801346a:	4b7e      	ldr	r3, [pc, #504]	; (8013664 <ResetMacParameters+0x218>)
 801346c:	2200      	movs	r2, #0
 801346e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013470:	4b7d      	ldr	r3, [pc, #500]	; (8013668 <ResetMacParameters+0x21c>)
 8013472:	2200      	movs	r2, #0
 8013474:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8013478:	4b7b      	ldr	r3, [pc, #492]	; (8013668 <ResetMacParameters+0x21c>)
 801347a:	2201      	movs	r2, #1
 801347c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013480:	4b79      	ldr	r3, [pc, #484]	; (8013668 <ResetMacParameters+0x21c>)
 8013482:	2201      	movs	r2, #1
 8013484:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8013488:	4b77      	ldr	r3, [pc, #476]	; (8013668 <ResetMacParameters+0x21c>)
 801348a:	2200      	movs	r2, #0
 801348c:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013490:	4b74      	ldr	r3, [pc, #464]	; (8013664 <ResetMacParameters+0x218>)
 8013492:	2200      	movs	r2, #0
 8013494:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013498:	4b72      	ldr	r3, [pc, #456]	; (8013664 <ResetMacParameters+0x218>)
 801349a:	2201      	movs	r2, #1
 801349c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80134a0:	4b70      	ldr	r3, [pc, #448]	; (8013664 <ResetMacParameters+0x218>)
 80134a2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80134a6:	4b6f      	ldr	r3, [pc, #444]	; (8013664 <ResetMacParameters+0x218>)
 80134a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80134ac:	4b6d      	ldr	r3, [pc, #436]	; (8013664 <ResetMacParameters+0x218>)
 80134ae:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80134b2:	4b6c      	ldr	r3, [pc, #432]	; (8013664 <ResetMacParameters+0x218>)
 80134b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80134b8:	4b6a      	ldr	r3, [pc, #424]	; (8013664 <ResetMacParameters+0x218>)
 80134ba:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80134be:	4b69      	ldr	r3, [pc, #420]	; (8013664 <ResetMacParameters+0x218>)
 80134c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80134c4:	4b67      	ldr	r3, [pc, #412]	; (8013664 <ResetMacParameters+0x218>)
 80134c6:	4a67      	ldr	r2, [pc, #412]	; (8013664 <ResetMacParameters+0x218>)
 80134c8:	336c      	adds	r3, #108	; 0x6c
 80134ca:	32b4      	adds	r2, #180	; 0xb4
 80134cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134d0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80134d4:	4b63      	ldr	r3, [pc, #396]	; (8013664 <ResetMacParameters+0x218>)
 80134d6:	4a63      	ldr	r2, [pc, #396]	; (8013664 <ResetMacParameters+0x218>)
 80134d8:	3374      	adds	r3, #116	; 0x74
 80134da:	32bc      	adds	r2, #188	; 0xbc
 80134dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134e0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80134e4:	4b5f      	ldr	r3, [pc, #380]	; (8013664 <ResetMacParameters+0x218>)
 80134e6:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80134ea:	4b5e      	ldr	r3, [pc, #376]	; (8013664 <ResetMacParameters+0x218>)
 80134ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80134f0:	4b5c      	ldr	r3, [pc, #368]	; (8013664 <ResetMacParameters+0x218>)
 80134f2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80134f6:	4b5b      	ldr	r3, [pc, #364]	; (8013664 <ResetMacParameters+0x218>)
 80134f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80134fc:	4b59      	ldr	r3, [pc, #356]	; (8013664 <ResetMacParameters+0x218>)
 80134fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013502:	4a58      	ldr	r2, [pc, #352]	; (8013664 <ResetMacParameters+0x218>)
 8013504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013508:	4b56      	ldr	r3, [pc, #344]	; (8013664 <ResetMacParameters+0x218>)
 801350a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801350e:	4a55      	ldr	r2, [pc, #340]	; (8013664 <ResetMacParameters+0x218>)
 8013510:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013514:	4b53      	ldr	r3, [pc, #332]	; (8013664 <ResetMacParameters+0x218>)
 8013516:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801351a:	4b52      	ldr	r3, [pc, #328]	; (8013664 <ResetMacParameters+0x218>)
 801351c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013520:	4b50      	ldr	r3, [pc, #320]	; (8013664 <ResetMacParameters+0x218>)
 8013522:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8013526:	4b4f      	ldr	r3, [pc, #316]	; (8013664 <ResetMacParameters+0x218>)
 8013528:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 801352c:	4b4e      	ldr	r3, [pc, #312]	; (8013668 <ResetMacParameters+0x21c>)
 801352e:	2200      	movs	r2, #0
 8013530:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8013534:	4b4b      	ldr	r3, [pc, #300]	; (8013664 <ResetMacParameters+0x218>)
 8013536:	2200      	movs	r2, #0
 8013538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 801353c:	4b49      	ldr	r3, [pc, #292]	; (8013664 <ResetMacParameters+0x218>)
 801353e:	2200      	movs	r2, #0
 8013540:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8013544:	4b47      	ldr	r3, [pc, #284]	; (8013664 <ResetMacParameters+0x218>)
 8013546:	2200      	movs	r2, #0
 8013548:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 801354c:	4b45      	ldr	r3, [pc, #276]	; (8013664 <ResetMacParameters+0x218>)
 801354e:	2200      	movs	r2, #0
 8013550:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8013554:	4b43      	ldr	r3, [pc, #268]	; (8013664 <ResetMacParameters+0x218>)
 8013556:	2200      	movs	r2, #0
 8013558:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 801355c:	4b41      	ldr	r3, [pc, #260]	; (8013664 <ResetMacParameters+0x218>)
 801355e:	2200      	movs	r2, #0
 8013560:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8013564:	4b3f      	ldr	r3, [pc, #252]	; (8013664 <ResetMacParameters+0x218>)
 8013566:	2200      	movs	r2, #0
 8013568:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 801356c:	4b3d      	ldr	r3, [pc, #244]	; (8013664 <ResetMacParameters+0x218>)
 801356e:	2200      	movs	r2, #0
 8013570:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013574:	4b3b      	ldr	r3, [pc, #236]	; (8013664 <ResetMacParameters+0x218>)
 8013576:	2200      	movs	r2, #0
 8013578:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801357c:	2301      	movs	r3, #1
 801357e:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013580:	4b3a      	ldr	r3, [pc, #232]	; (801366c <ResetMacParameters+0x220>)
 8013582:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013584:	4b3a      	ldr	r3, [pc, #232]	; (8013670 <ResetMacParameters+0x224>)
 8013586:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013588:	4b36      	ldr	r3, [pc, #216]	; (8013664 <ResetMacParameters+0x218>)
 801358a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801358e:	f107 020c 	add.w	r2, r7, #12
 8013592:	4611      	mov	r1, r2
 8013594:	4618      	mov	r0, r3
 8013596:	f004 f90d 	bl	80177b4 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801359a:	4b33      	ldr	r3, [pc, #204]	; (8013668 <ResetMacParameters+0x21c>)
 801359c:	2200      	movs	r2, #0
 801359e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80135a2:	4b31      	ldr	r3, [pc, #196]	; (8013668 <ResetMacParameters+0x21c>)
 80135a4:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80135a8:	4b2f      	ldr	r3, [pc, #188]	; (8013668 <ResetMacParameters+0x21c>)
 80135aa:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80135ae:	4b2d      	ldr	r3, [pc, #180]	; (8013664 <ResetMacParameters+0x218>)
 80135b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135b2:	4a2d      	ldr	r2, [pc, #180]	; (8013668 <ResetMacParameters+0x21c>)
 80135b4:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80135b8:	4b2a      	ldr	r3, [pc, #168]	; (8013664 <ResetMacParameters+0x218>)
 80135ba:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80135be:	4b2a      	ldr	r3, [pc, #168]	; (8013668 <ResetMacParameters+0x21c>)
 80135c0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80135c4:	4b27      	ldr	r3, [pc, #156]	; (8013664 <ResetMacParameters+0x218>)
 80135c6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80135ca:	4b27      	ldr	r3, [pc, #156]	; (8013668 <ResetMacParameters+0x21c>)
 80135cc:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80135d0:	4b25      	ldr	r3, [pc, #148]	; (8013668 <ResetMacParameters+0x21c>)
 80135d2:	2200      	movs	r2, #0
 80135d4:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80135d8:	4b23      	ldr	r3, [pc, #140]	; (8013668 <ResetMacParameters+0x21c>)
 80135da:	2201      	movs	r2, #1
 80135dc:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80135e0:	4a21      	ldr	r2, [pc, #132]	; (8013668 <ResetMacParameters+0x21c>)
 80135e2:	4b21      	ldr	r3, [pc, #132]	; (8013668 <ResetMacParameters+0x21c>)
 80135e4:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80135e8:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80135ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135f0:	682b      	ldr	r3, [r5, #0]
 80135f2:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80135f4:	4b1c      	ldr	r3, [pc, #112]	; (8013668 <ResetMacParameters+0x21c>)
 80135f6:	2201      	movs	r2, #1
 80135f8:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80135fc:	4b1a      	ldr	r3, [pc, #104]	; (8013668 <ResetMacParameters+0x21c>)
 80135fe:	2202      	movs	r2, #2
 8013600:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013604:	2300      	movs	r3, #0
 8013606:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8013608:	2300      	movs	r3, #0
 801360a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 801360c:	4b16      	ldr	r3, [pc, #88]	; (8013668 <ResetMacParameters+0x21c>)
 801360e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013612:	2b00      	cmp	r3, #0
 8013614:	d009      	beq.n	801362a <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013616:	4b14      	ldr	r3, [pc, #80]	; (8013668 <ResetMacParameters+0x21c>)
 8013618:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013620:	4b11      	ldr	r3, [pc, #68]	; (8013668 <ResetMacParameters+0x21c>)
 8013622:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013626:	695b      	ldr	r3, [r3, #20]
 8013628:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801362a:	4b12      	ldr	r3, [pc, #72]	; (8013674 <ResetMacParameters+0x228>)
 801362c:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801362e:	4b12      	ldr	r3, [pc, #72]	; (8013678 <ResetMacParameters+0x22c>)
 8013630:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013632:	4b12      	ldr	r3, [pc, #72]	; (801367c <ResetMacParameters+0x230>)
 8013634:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013636:	4b12      	ldr	r3, [pc, #72]	; (8013680 <ResetMacParameters+0x234>)
 8013638:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801363a:	4b12      	ldr	r3, [pc, #72]	; (8013684 <ResetMacParameters+0x238>)
 801363c:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801363e:	4b12      	ldr	r3, [pc, #72]	; (8013688 <ResetMacParameters+0x23c>)
 8013640:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013642:	4b12      	ldr	r3, [pc, #72]	; (801368c <ResetMacParameters+0x240>)
 8013644:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013646:	4b12      	ldr	r3, [pc, #72]	; (8013690 <ResetMacParameters+0x244>)
 8013648:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801364a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801364e:	f107 0318 	add.w	r3, r7, #24
 8013652:	4a10      	ldr	r2, [pc, #64]	; (8013694 <ResetMacParameters+0x248>)
 8013654:	4618      	mov	r0, r3
 8013656:	f002 f899 	bl	801578c <LoRaMacClassBInit>
}
 801365a:	bf00      	nop
 801365c:	3740      	adds	r7, #64	; 0x40
 801365e:	46bd      	mov	sp, r7
 8013660:	bdb0      	pop	{r4, r5, r7, pc}
 8013662:	bf00      	nop
 8013664:	20000e88 	.word	0x20000e88
 8013668:	20000980 	.word	0x20000980
 801366c:	200010a8 	.word	0x200010a8
 8013670:	2000113c 	.word	0x2000113c
 8013674:	20000ddc 	.word	0x20000ddc
 8013678:	20000d98 	.word	0x20000d98
 801367c:	20000dc8 	.word	0x20000dc8
 8013680:	20000e01 	.word	0x20000e01
 8013684:	20000f6c 	.word	0x20000f6c
 8013688:	20000ed0 	.word	0x20000ed0
 801368c:	20000ed4 	.word	0x20000ed4
 8013690:	20000f70 	.word	0x20000f70
 8013694:	200015d8 	.word	0x200015d8

08013698 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f00a fd12 	bl	801e0cc <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80136a8:	4b11      	ldr	r3, [pc, #68]	; (80136f0 <RxWindowSetup+0x58>)
 80136aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136ac:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80136ae:	4b11      	ldr	r3, [pc, #68]	; (80136f4 <RxWindowSetup+0x5c>)
 80136b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80136b4:	4a10      	ldr	r2, [pc, #64]	; (80136f8 <RxWindowSetup+0x60>)
 80136b6:	6839      	ldr	r1, [r7, #0]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f004 f8e3 	bl	8017884 <RegionRxConfig>
 80136be:	4603      	mov	r3, r0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d010      	beq.n	80136e6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80136c4:	4b0d      	ldr	r3, [pc, #52]	; (80136fc <RxWindowSetup+0x64>)
 80136c6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80136ca:	4b0c      	ldr	r3, [pc, #48]	; (80136fc <RxWindowSetup+0x64>)
 80136cc:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <RxWindowSetup+0x58>)
 80136d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136d4:	4a07      	ldr	r2, [pc, #28]	; (80136f4 <RxWindowSetup+0x5c>)
 80136d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80136d8:	4610      	mov	r0, r2
 80136da:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	7cda      	ldrb	r2, [r3, #19]
 80136e0:	4b06      	ldr	r3, [pc, #24]	; (80136fc <RxWindowSetup+0x64>)
 80136e2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80136e6:	bf00      	nop
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	0801f98c 	.word	0x0801f98c
 80136f4:	20000e88 	.word	0x20000e88
 80136f8:	20000d9c 	.word	0x20000d9c
 80136fc:	20000980 	.word	0x20000980

08013700 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013700:	b590      	push	{r4, r7, lr}
 8013702:	b083      	sub	sp, #12
 8013704:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013706:	4b1b      	ldr	r3, [pc, #108]	; (8013774 <OpenContinuousRxCWindow+0x74>)
 8013708:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801370c:	4b19      	ldr	r3, [pc, #100]	; (8013774 <OpenContinuousRxCWindow+0x74>)
 801370e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013712:	b259      	sxtb	r1, r3
 8013714:	4b17      	ldr	r3, [pc, #92]	; (8013774 <OpenContinuousRxCWindow+0x74>)
 8013716:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801371a:	4b16      	ldr	r3, [pc, #88]	; (8013774 <OpenContinuousRxCWindow+0x74>)
 801371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801371e:	4c16      	ldr	r4, [pc, #88]	; (8013778 <OpenContinuousRxCWindow+0x78>)
 8013720:	9400      	str	r4, [sp, #0]
 8013722:	f004 f895 	bl	8017850 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013726:	4b15      	ldr	r3, [pc, #84]	; (801377c <OpenContinuousRxCWindow+0x7c>)
 8013728:	2202      	movs	r2, #2
 801372a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801372e:	4b13      	ldr	r3, [pc, #76]	; (801377c <OpenContinuousRxCWindow+0x7c>)
 8013730:	2201      	movs	r2, #1
 8013732:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013736:	4b0f      	ldr	r3, [pc, #60]	; (8013774 <OpenContinuousRxCWindow+0x74>)
 8013738:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801373c:	4a10      	ldr	r2, [pc, #64]	; (8013780 <OpenContinuousRxCWindow+0x80>)
 801373e:	490e      	ldr	r1, [pc, #56]	; (8013778 <OpenContinuousRxCWindow+0x78>)
 8013740:	4618      	mov	r0, r3
 8013742:	f004 f89f 	bl	8017884 <RegionRxConfig>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00f      	beq.n	801376c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801374c:	4b0b      	ldr	r3, [pc, #44]	; (801377c <OpenContinuousRxCWindow+0x7c>)
 801374e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8013752:	4b0a      	ldr	r3, [pc, #40]	; (801377c <OpenContinuousRxCWindow+0x7c>)
 8013754:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8013758:	4b0a      	ldr	r3, [pc, #40]	; (8013784 <OpenContinuousRxCWindow+0x84>)
 801375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801375c:	2000      	movs	r0, #0
 801375e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013760:	4b06      	ldr	r3, [pc, #24]	; (801377c <OpenContinuousRxCWindow+0x7c>)
 8013762:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8013766:	4b05      	ldr	r3, [pc, #20]	; (801377c <OpenContinuousRxCWindow+0x7c>)
 8013768:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801376c:	bf00      	nop
 801376e:	3704      	adds	r7, #4
 8013770:	46bd      	mov	sp, r7
 8013772:	bd90      	pop	{r4, r7, pc}
 8013774:	20000e88 	.word	0x20000e88
 8013778:	20000d60 	.word	0x20000d60
 801377c:	20000980 	.word	0x20000980
 8013780:	20000d9c 	.word	0x20000d9c
 8013784:	0801f98c 	.word	0x0801f98c

08013788 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b088      	sub	sp, #32
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	603b      	str	r3, [r7, #0]
 8013794:	4613      	mov	r3, r2
 8013796:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013798:	4b82      	ldr	r3, [pc, #520]	; (80139a4 <PrepareFrame+0x21c>)
 801379a:	2200      	movs	r2, #0
 801379c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801379e:	4b81      	ldr	r3, [pc, #516]	; (80139a4 <PrepareFrame+0x21c>)
 80137a0:	2200      	movs	r2, #0
 80137a2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 80137a6:	2300      	movs	r3, #0
 80137a8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80137aa:	2300      	movs	r3, #0
 80137ac:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80137ae:	2300      	movs	r3, #0
 80137b0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d101      	bne.n	80137bc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80137b8:	2300      	movs	r3, #0
 80137ba:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80137bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80137be:	461a      	mov	r2, r3
 80137c0:	6839      	ldr	r1, [r7, #0]
 80137c2:	4879      	ldr	r0, [pc, #484]	; (80139a8 <PrepareFrame+0x220>)
 80137c4:	f006 fae7 	bl	8019d96 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80137c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80137ca:	b2da      	uxtb	r2, r3
 80137cc:	4b75      	ldr	r3, [pc, #468]	; (80139a4 <PrepareFrame+0x21c>)
 80137ce:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	781a      	ldrb	r2, [r3, #0]
 80137d6:	4b73      	ldr	r3, [pc, #460]	; (80139a4 <PrepareFrame+0x21c>)
 80137d8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	2b07      	cmp	r3, #7
 80137e6:	f000 80b9 	beq.w	801395c <PrepareFrame+0x1d4>
 80137ea:	2b07      	cmp	r3, #7
 80137ec:	f300 80d0 	bgt.w	8013990 <PrepareFrame+0x208>
 80137f0:	2b02      	cmp	r3, #2
 80137f2:	d006      	beq.n	8013802 <PrepareFrame+0x7a>
 80137f4:	2b04      	cmp	r3, #4
 80137f6:	f040 80cb 	bne.w	8013990 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80137fa:	4b6a      	ldr	r3, [pc, #424]	; (80139a4 <PrepareFrame+0x21c>)
 80137fc:	2201      	movs	r2, #1
 80137fe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013802:	4b68      	ldr	r3, [pc, #416]	; (80139a4 <PrepareFrame+0x21c>)
 8013804:	2204      	movs	r2, #4
 8013806:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801380a:	4b66      	ldr	r3, [pc, #408]	; (80139a4 <PrepareFrame+0x21c>)
 801380c:	4a67      	ldr	r2, [pc, #412]	; (80139ac <PrepareFrame+0x224>)
 801380e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013812:	4b64      	ldr	r3, [pc, #400]	; (80139a4 <PrepareFrame+0x21c>)
 8013814:	22ff      	movs	r2, #255	; 0xff
 8013816:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	781a      	ldrb	r2, [r3, #0]
 801381e:	4b61      	ldr	r3, [pc, #388]	; (80139a4 <PrepareFrame+0x21c>)
 8013820:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013824:	4a5f      	ldr	r2, [pc, #380]	; (80139a4 <PrepareFrame+0x21c>)
 8013826:	79fb      	ldrb	r3, [r7, #7]
 8013828:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801382c:	4b60      	ldr	r3, [pc, #384]	; (80139b0 <PrepareFrame+0x228>)
 801382e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013832:	4a5c      	ldr	r2, [pc, #368]	; (80139a4 <PrepareFrame+0x21c>)
 8013834:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	781a      	ldrb	r2, [r3, #0]
 801383c:	4b59      	ldr	r3, [pc, #356]	; (80139a4 <PrepareFrame+0x21c>)
 801383e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013842:	4b58      	ldr	r3, [pc, #352]	; (80139a4 <PrepareFrame+0x21c>)
 8013844:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013848:	4b56      	ldr	r3, [pc, #344]	; (80139a4 <PrepareFrame+0x21c>)
 801384a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801384e:	4b55      	ldr	r3, [pc, #340]	; (80139a4 <PrepareFrame+0x21c>)
 8013850:	4a55      	ldr	r2, [pc, #340]	; (80139a8 <PrepareFrame+0x220>)
 8013852:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013856:	f107 0318 	add.w	r3, r7, #24
 801385a:	4618      	mov	r0, r3
 801385c:	f003 f8ce 	bl	80169fc <LoRaMacCryptoGetFCntUp>
 8013860:	4603      	mov	r3, r0
 8013862:	2b00      	cmp	r3, #0
 8013864:	d001      	beq.n	801386a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013866:	2312      	movs	r3, #18
 8013868:	e098      	b.n	801399c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	b29a      	uxth	r2, r3
 801386e:	4b4d      	ldr	r3, [pc, #308]	; (80139a4 <PrepareFrame+0x21c>)
 8013870:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8013874:	4b4b      	ldr	r3, [pc, #300]	; (80139a4 <PrepareFrame+0x21c>)
 8013876:	2200      	movs	r2, #0
 8013878:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801387c:	4b49      	ldr	r3, [pc, #292]	; (80139a4 <PrepareFrame+0x21c>)
 801387e:	2200      	movs	r2, #0
 8013880:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	4a47      	ldr	r2, [pc, #284]	; (80139a4 <PrepareFrame+0x21c>)
 8013888:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801388c:	f107 0314 	add.w	r3, r7, #20
 8013890:	4618      	mov	r0, r3
 8013892:	f002 fa7f 	bl	8015d94 <LoRaMacCommandsGetSizeSerializedCmds>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d001      	beq.n	80138a0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801389c:	2313      	movs	r3, #19
 801389e:	e07d      	b.n	801399c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d076      	beq.n	8013994 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80138a6:	4b42      	ldr	r3, [pc, #264]	; (80139b0 <PrepareFrame+0x228>)
 80138a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7fe fd85 	bl	80123bc <GetMaxAppPayloadWithoutFOptsLength>
 80138b2:	4603      	mov	r3, r0
 80138b4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80138b6:	4b3b      	ldr	r3, [pc, #236]	; (80139a4 <PrepareFrame+0x21c>)
 80138b8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d01d      	beq.n	80138fc <PrepareFrame+0x174>
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	2b0f      	cmp	r3, #15
 80138c4:	d81a      	bhi.n	80138fc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80138c6:	f107 0314 	add.w	r3, r7, #20
 80138ca:	4a3a      	ldr	r2, [pc, #232]	; (80139b4 <PrepareFrame+0x22c>)
 80138cc:	4619      	mov	r1, r3
 80138ce:	200f      	movs	r0, #15
 80138d0:	f002 fa76 	bl	8015dc0 <LoRaMacCommandsSerializeCmds>
 80138d4:	4603      	mov	r3, r0
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d001      	beq.n	80138de <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80138da:	2313      	movs	r3, #19
 80138dc:	e05e      	b.n	801399c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	f003 030f 	and.w	r3, r3, #15
 80138e4:	b2d9      	uxtb	r1, r3
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	7813      	ldrb	r3, [r2, #0]
 80138ea:	f361 0303 	bfi	r3, r1, #0, #4
 80138ee:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	781a      	ldrb	r2, [r3, #0]
 80138f4:	4b2b      	ldr	r3, [pc, #172]	; (80139a4 <PrepareFrame+0x21c>)
 80138f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80138fa:	e04b      	b.n	8013994 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80138fc:	4b29      	ldr	r3, [pc, #164]	; (80139a4 <PrepareFrame+0x21c>)
 80138fe:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013902:	2b00      	cmp	r3, #0
 8013904:	d010      	beq.n	8013928 <PrepareFrame+0x1a0>
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	2b0f      	cmp	r3, #15
 801390a:	d90d      	bls.n	8013928 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801390c:	7ffb      	ldrb	r3, [r7, #31]
 801390e:	f107 0114 	add.w	r1, r7, #20
 8013912:	4a29      	ldr	r2, [pc, #164]	; (80139b8 <PrepareFrame+0x230>)
 8013914:	4618      	mov	r0, r3
 8013916:	f002 fa53 	bl	8015dc0 <LoRaMacCommandsSerializeCmds>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d001      	beq.n	8013924 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013920:	2313      	movs	r3, #19
 8013922:	e03b      	b.n	801399c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013924:	230a      	movs	r3, #10
 8013926:	e039      	b.n	801399c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013928:	7ffb      	ldrb	r3, [r7, #31]
 801392a:	f107 0114 	add.w	r1, r7, #20
 801392e:	4a22      	ldr	r2, [pc, #136]	; (80139b8 <PrepareFrame+0x230>)
 8013930:	4618      	mov	r0, r3
 8013932:	f002 fa45 	bl	8015dc0 <LoRaMacCommandsSerializeCmds>
 8013936:	4603      	mov	r3, r0
 8013938:	2b00      	cmp	r3, #0
 801393a:	d001      	beq.n	8013940 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801393c:	2313      	movs	r3, #19
 801393e:	e02d      	b.n	801399c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013940:	4b18      	ldr	r3, [pc, #96]	; (80139a4 <PrepareFrame+0x21c>)
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013948:	4b16      	ldr	r3, [pc, #88]	; (80139a4 <PrepareFrame+0x21c>)
 801394a:	4a1b      	ldr	r2, [pc, #108]	; (80139b8 <PrepareFrame+0x230>)
 801394c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	b2da      	uxtb	r2, r3
 8013954:	4b13      	ldr	r3, [pc, #76]	; (80139a4 <PrepareFrame+0x21c>)
 8013956:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801395a:	e01b      	b.n	8013994 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d01a      	beq.n	8013998 <PrepareFrame+0x210>
 8013962:	4b10      	ldr	r3, [pc, #64]	; (80139a4 <PrepareFrame+0x21c>)
 8013964:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013968:	2b00      	cmp	r3, #0
 801396a:	d015      	beq.n	8013998 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801396c:	4813      	ldr	r0, [pc, #76]	; (80139bc <PrepareFrame+0x234>)
 801396e:	4b0d      	ldr	r3, [pc, #52]	; (80139a4 <PrepareFrame+0x21c>)
 8013970:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013974:	b29b      	uxth	r3, r3
 8013976:	461a      	mov	r2, r3
 8013978:	6839      	ldr	r1, [r7, #0]
 801397a:	f006 fa0c 	bl	8019d96 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801397e:	4b09      	ldr	r3, [pc, #36]	; (80139a4 <PrepareFrame+0x21c>)
 8013980:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013984:	b29b      	uxth	r3, r3
 8013986:	3301      	adds	r3, #1
 8013988:	b29a      	uxth	r2, r3
 801398a:	4b06      	ldr	r3, [pc, #24]	; (80139a4 <PrepareFrame+0x21c>)
 801398c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801398e:	e003      	b.n	8013998 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013990:	2302      	movs	r3, #2
 8013992:	e003      	b.n	801399c <PrepareFrame+0x214>
            break;
 8013994:	bf00      	nop
 8013996:	e000      	b.n	801399a <PrepareFrame+0x212>
            break;
 8013998:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3720      	adds	r7, #32
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	20000980 	.word	0x20000980
 80139a8:	20000ab8 	.word	0x20000ab8
 80139ac:	20000982 	.word	0x20000982
 80139b0:	20000e88 	.word	0x20000e88
 80139b4:	20000a98 	.word	0x20000a98
 80139b8:	20000e08 	.word	0x20000e08
 80139bc:	20000983 	.word	0x20000983

080139c0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b08a      	sub	sp, #40	; 0x28
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	4603      	mov	r3, r0
 80139c8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139ca:	2303      	movs	r3, #3
 80139cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80139d0:	2300      	movs	r3, #0
 80139d2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80139d4:	79fb      	ldrb	r3, [r7, #7]
 80139d6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80139d8:	4b48      	ldr	r3, [pc, #288]	; (8013afc <SendFrameOnChannel+0x13c>)
 80139da:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80139de:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80139e0:	4b46      	ldr	r3, [pc, #280]	; (8013afc <SendFrameOnChannel+0x13c>)
 80139e2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80139e6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80139e8:	4b44      	ldr	r3, [pc, #272]	; (8013afc <SendFrameOnChannel+0x13c>)
 80139ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139ee:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80139f0:	4b42      	ldr	r3, [pc, #264]	; (8013afc <SendFrameOnChannel+0x13c>)
 80139f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139f6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80139f8:	4b41      	ldr	r3, [pc, #260]	; (8013b00 <SendFrameOnChannel+0x140>)
 80139fa:	881b      	ldrh	r3, [r3, #0]
 80139fc:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80139fe:	4b3f      	ldr	r3, [pc, #252]	; (8013afc <SendFrameOnChannel+0x13c>)
 8013a00:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013a04:	f107 020f 	add.w	r2, r7, #15
 8013a08:	f107 0110 	add.w	r1, r7, #16
 8013a0c:	4b3d      	ldr	r3, [pc, #244]	; (8013b04 <SendFrameOnChannel+0x144>)
 8013a0e:	f003 ff4e 	bl	80178ae <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a12:	4b3b      	ldr	r3, [pc, #236]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a14:	2201      	movs	r2, #1
 8013a16:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a1a:	4b38      	ldr	r3, [pc, #224]	; (8013afc <SendFrameOnChannel+0x13c>)
 8013a1c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a20:	b2da      	uxtb	r2, r3
 8013a22:	4b37      	ldr	r3, [pc, #220]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a24:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013a28:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013a2c:	4b34      	ldr	r3, [pc, #208]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a2e:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013a32:	79fb      	ldrb	r3, [r7, #7]
 8013a34:	4a32      	ldr	r2, [pc, #200]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a36:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013a3a:	4b31      	ldr	r3, [pc, #196]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a3c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013a40:	4a2f      	ldr	r2, [pc, #188]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a42:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013a46:	4b2e      	ldr	r3, [pc, #184]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a48:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013a4c:	4a2c      	ldr	r2, [pc, #176]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a4e:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013a52:	f001 ff07 	bl	8015864 <LoRaMacClassBIsBeaconModeActive>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00b      	beq.n	8013a74 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013a5c:	4b28      	ldr	r3, [pc, #160]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a5e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013a62:	4618      	mov	r0, r3
 8013a64:	f001 ff69 	bl	801593a <LoRaMacClassBIsUplinkCollision>
 8013a68:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013a6a:	6a3b      	ldr	r3, [r7, #32]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d001      	beq.n	8013a74 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013a70:	2310      	movs	r3, #16
 8013a72:	e03e      	b.n	8013af2 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013a74:	4b21      	ldr	r3, [pc, #132]	; (8013afc <SendFrameOnChannel+0x13c>)
 8013a76:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d101      	bne.n	8013a82 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013a7e:	f001 ff66 	bl	801594e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013a82:	f001 ff00 	bl	8015886 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013a86:	4b1d      	ldr	r3, [pc, #116]	; (8013afc <SendFrameOnChannel+0x13c>)
 8013a88:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a8c:	b2db      	uxtb	r3, r3
 8013a8e:	4a1c      	ldr	r2, [pc, #112]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013a90:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013a94:	4611      	mov	r1, r2
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7ff fc42 	bl	8013320 <SecureFrame>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d002      	beq.n	8013ab0 <SendFrameOnChannel+0xf0>
    {
        return status;
 8013aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013aae:	e020      	b.n	8013af2 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013ab0:	4b13      	ldr	r3, [pc, #76]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013ab2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013ab6:	f043 0302 	orr.w	r3, r3, #2
 8013aba:	4a11      	ldr	r2, [pc, #68]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013abc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013ac0:	4b0f      	ldr	r3, [pc, #60]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013ac2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013ac6:	f083 0301 	eor.w	r3, r3, #1
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d007      	beq.n	8013ae0 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013ad0:	4b0b      	ldr	r3, [pc, #44]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013ad2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	b2da      	uxtb	r2, r3
 8013ada:	4b09      	ldr	r3, [pc, #36]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013adc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013ae0:	4b09      	ldr	r3, [pc, #36]	; (8013b08 <SendFrameOnChannel+0x148>)
 8013ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae4:	4a06      	ldr	r2, [pc, #24]	; (8013b00 <SendFrameOnChannel+0x140>)
 8013ae6:	8812      	ldrh	r2, [r2, #0]
 8013ae8:	b2d2      	uxtb	r2, r2
 8013aea:	4611      	mov	r1, r2
 8013aec:	4807      	ldr	r0, [pc, #28]	; (8013b0c <SendFrameOnChannel+0x14c>)
 8013aee:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3728      	adds	r7, #40	; 0x28
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
 8013afa:	bf00      	nop
 8013afc:	20000e88 	.word	0x20000e88
 8013b00:	20000980 	.word	0x20000980
 8013b04:	20000d94 	.word	0x20000d94
 8013b08:	0801f98c 	.word	0x0801f98c
 8013b0c:	20000982 	.word	0x20000982

08013b10 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013b1a:	4b16      	ldr	r3, [pc, #88]	; (8013b74 <SetTxContinuousWave+0x64>)
 8013b1c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013b20:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013b22:	4b15      	ldr	r3, [pc, #84]	; (8013b78 <SetTxContinuousWave+0x68>)
 8013b24:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b28:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013b2a:	4b13      	ldr	r3, [pc, #76]	; (8013b78 <SetTxContinuousWave+0x68>)
 8013b2c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013b30:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013b32:	4b11      	ldr	r3, [pc, #68]	; (8013b78 <SetTxContinuousWave+0x68>)
 8013b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b38:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013b3a:	4b0f      	ldr	r3, [pc, #60]	; (8013b78 <SetTxContinuousWave+0x68>)
 8013b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b40:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013b42:	88fb      	ldrh	r3, [r7, #6]
 8013b44:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013b46:	4b0c      	ldr	r3, [pc, #48]	; (8013b78 <SetTxContinuousWave+0x68>)
 8013b48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b4c:	f107 0208 	add.w	r2, r7, #8
 8013b50:	4611      	mov	r1, r2
 8013b52:	4618      	mov	r0, r3
 8013b54:	f003 ff5a 	bl	8017a0c <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b58:	4b06      	ldr	r3, [pc, #24]	; (8013b74 <SetTxContinuousWave+0x64>)
 8013b5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013b5e:	f043 0302 	orr.w	r3, r3, #2
 8013b62:	4a04      	ldr	r2, [pc, #16]	; (8013b74 <SetTxContinuousWave+0x64>)
 8013b64:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013b68:	2300      	movs	r3, #0
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3718      	adds	r7, #24
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	20000980 	.word	0x20000980
 8013b78:	20000e88 	.word	0x20000e88

08013b7c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	4603      	mov	r3, r0
 8013b84:	6039      	str	r1, [r7, #0]
 8013b86:	80fb      	strh	r3, [r7, #6]
 8013b88:	4613      	mov	r3, r2
 8013b8a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013b8c:	4b09      	ldr	r3, [pc, #36]	; (8013bb4 <SetTxContinuousWave1+0x38>)
 8013b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b90:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013b94:	88fa      	ldrh	r2, [r7, #6]
 8013b96:	6838      	ldr	r0, [r7, #0]
 8013b98:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b9a:	4b07      	ldr	r3, [pc, #28]	; (8013bb8 <SetTxContinuousWave1+0x3c>)
 8013b9c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013ba0:	f043 0302 	orr.w	r3, r3, #2
 8013ba4:	4a04      	ldr	r2, [pc, #16]	; (8013bb8 <SetTxContinuousWave1+0x3c>)
 8013ba6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013baa:	2300      	movs	r3, #0
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	0801f98c 	.word	0x0801f98c
 8013bb8:	20000980 	.word	0x20000980

08013bbc <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013bc0:	2300      	movs	r3, #0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bc80      	pop	{r7}
 8013bc8:	4770      	bx	lr

08013bca <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013bca:	b480      	push	{r7}
 8013bcc:	b083      	sub	sp, #12
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
 8013bd2:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <DetermineFrameType+0x16>
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d101      	bne.n	8013be4 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013be0:	2303      	movs	r3, #3
 8013be2:	e03b      	b.n	8013c5c <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	7b1b      	ldrb	r3, [r3, #12]
 8013be8:	f003 030f 	and.w	r3, r3, #15
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d008      	beq.n	8013c04 <DetermineFrameType+0x3a>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d003      	beq.n	8013c04 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	701a      	strb	r2, [r3, #0]
 8013c02:	e02a      	b.n	8013c5a <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d103      	bne.n	8013c16 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	2201      	movs	r2, #1
 8013c12:	701a      	strb	r2, [r3, #0]
 8013c14:	e021      	b.n	8013c5a <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	7b1b      	ldrb	r3, [r3, #12]
 8013c1a:	f003 030f 	and.w	r3, r3, #15
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d108      	bne.n	8013c36 <DetermineFrameType+0x6c>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d103      	bne.n	8013c36 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	2202      	movs	r2, #2
 8013c32:	701a      	strb	r2, [r3, #0]
 8013c34:	e011      	b.n	8013c5a <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	7b1b      	ldrb	r3, [r3, #12]
 8013c3a:	f003 030f 	and.w	r3, r3, #15
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d108      	bne.n	8013c56 <DetermineFrameType+0x8c>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d003      	beq.n	8013c56 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	2203      	movs	r2, #3
 8013c52:	701a      	strb	r2, [r3, #0]
 8013c54:	e001      	b.n	8013c5a <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013c56:	2318      	movs	r3, #24
 8013c58:	e000      	b.n	8013c5c <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013c5a:	2300      	movs	r3, #0
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	370c      	adds	r7, #12
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bc80      	pop	{r7}
 8013c64:	4770      	bx	lr
	...

08013c68 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013c68:	b480      	push	{r7}
 8013c6a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013c6c:	4b12      	ldr	r3, [pc, #72]	; (8013cb8 <CheckRetransUnconfirmedUplink+0x50>)
 8013c6e:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013c72:	4b12      	ldr	r3, [pc, #72]	; (8013cbc <CheckRetransUnconfirmedUplink+0x54>)
 8013c74:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d301      	bcc.n	8013c80 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e016      	b.n	8013cae <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013c80:	4b0d      	ldr	r3, [pc, #52]	; (8013cb8 <CheckRetransUnconfirmedUplink+0x50>)
 8013c82:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013c86:	f003 0302 	and.w	r3, r3, #2
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d00d      	beq.n	8013cac <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013c90:	4b0a      	ldr	r3, [pc, #40]	; (8013cbc <CheckRetransUnconfirmedUplink+0x54>)
 8013c92:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d101      	bne.n	8013c9e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	e007      	b.n	8013cae <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013c9e:	4b06      	ldr	r3, [pc, #24]	; (8013cb8 <CheckRetransUnconfirmedUplink+0x50>)
 8013ca0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d101      	bne.n	8013cac <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	e000      	b.n	8013cae <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013cac:	2300      	movs	r3, #0
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bc80      	pop	{r7}
 8013cb4:	4770      	bx	lr
 8013cb6:	bf00      	nop
 8013cb8:	20000980 	.word	0x20000980
 8013cbc:	20000e88 	.word	0x20000e88

08013cc0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013cc4:	4b0e      	ldr	r3, [pc, #56]	; (8013d00 <CheckRetransConfirmedUplink+0x40>)
 8013cc6:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8013cca:	4b0d      	ldr	r3, [pc, #52]	; (8013d00 <CheckRetransConfirmedUplink+0x40>)
 8013ccc:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d301      	bcc.n	8013cd8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	e00f      	b.n	8013cf8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013cd8:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <CheckRetransConfirmedUplink+0x40>)
 8013cda:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013cde:	f003 0302 	and.w	r3, r3, #2
 8013ce2:	b2db      	uxtb	r3, r3
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d006      	beq.n	8013cf6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013ce8:	4b05      	ldr	r3, [pc, #20]	; (8013d00 <CheckRetransConfirmedUplink+0x40>)
 8013cea:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	e000      	b.n	8013cf8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013cf6:	2300      	movs	r3, #0
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bc80      	pop	{r7}
 8013cfe:	4770      	bx	lr
 8013d00:	20000980 	.word	0x20000980

08013d04 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d04:	b480      	push	{r7}
 8013d06:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d08:	4b1a      	ldr	r3, [pc, #104]	; (8013d74 <StopRetransmission+0x70>)
 8013d0a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d0e:	f003 0302 	and.w	r3, r3, #2
 8013d12:	b2db      	uxtb	r3, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d009      	beq.n	8013d2c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d18:	4b16      	ldr	r3, [pc, #88]	; (8013d74 <StopRetransmission+0x70>)
 8013d1a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d00e      	beq.n	8013d40 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013d22:	4b14      	ldr	r3, [pc, #80]	; (8013d74 <StopRetransmission+0x70>)
 8013d24:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d009      	beq.n	8013d40 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013d2c:	4b12      	ldr	r3, [pc, #72]	; (8013d78 <StopRetransmission+0x74>)
 8013d2e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d004      	beq.n	8013d40 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013d36:	4b10      	ldr	r3, [pc, #64]	; (8013d78 <StopRetransmission+0x74>)
 8013d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	4a0e      	ldr	r2, [pc, #56]	; (8013d78 <StopRetransmission+0x74>)
 8013d3e:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013d40:	4b0c      	ldr	r3, [pc, #48]	; (8013d74 <StopRetransmission+0x70>)
 8013d42:	2200      	movs	r2, #0
 8013d44:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013d48:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <StopRetransmission+0x70>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013d50:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <StopRetransmission+0x70>)
 8013d52:	2200      	movs	r2, #0
 8013d54:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013d58:	4b06      	ldr	r3, [pc, #24]	; (8013d74 <StopRetransmission+0x70>)
 8013d5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d5e:	f023 0302 	bic.w	r3, r3, #2
 8013d62:	4a04      	ldr	r2, [pc, #16]	; (8013d74 <StopRetransmission+0x70>)
 8013d64:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013d68:	2301      	movs	r3, #1
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bc80      	pop	{r7}
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop
 8013d74:	20000980 	.word	0x20000980
 8013d78:	20000e88 	.word	0x20000e88

08013d7c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013d80:	4b08      	ldr	r3, [pc, #32]	; (8013da4 <OnMacProcessNotify+0x28>)
 8013d82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00a      	beq.n	8013da0 <OnMacProcessNotify+0x24>
 8013d8a:	4b06      	ldr	r3, [pc, #24]	; (8013da4 <OnMacProcessNotify+0x28>)
 8013d8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013d90:	695b      	ldr	r3, [r3, #20]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d004      	beq.n	8013da0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013d96:	4b03      	ldr	r3, [pc, #12]	; (8013da4 <OnMacProcessNotify+0x28>)
 8013d98:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	4798      	blx	r3
    }
}
 8013da0:	bf00      	nop
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	20000980 	.word	0x20000980

08013da8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	4603      	mov	r3, r0
 8013db0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013db2:	4b0b      	ldr	r3, [pc, #44]	; (8013de0 <CallNvmDataChangeCallback+0x38>)
 8013db4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00c      	beq.n	8013dd6 <CallNvmDataChangeCallback+0x2e>
 8013dbc:	4b08      	ldr	r3, [pc, #32]	; (8013de0 <CallNvmDataChangeCallback+0x38>)
 8013dbe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013dc2:	691b      	ldr	r3, [r3, #16]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d006      	beq.n	8013dd6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013dc8:	4b05      	ldr	r3, [pc, #20]	; (8013de0 <CallNvmDataChangeCallback+0x38>)
 8013dca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013dce:	691b      	ldr	r3, [r3, #16]
 8013dd0:	88fa      	ldrh	r2, [r7, #6]
 8013dd2:	4610      	mov	r0, r2
 8013dd4:	4798      	blx	r3
    }
}
 8013dd6:	bf00      	nop
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	20000980 	.word	0x20000980

08013de4 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013dea:	4b1b      	ldr	r3, [pc, #108]	; (8013e58 <AckTimeoutRetriesProcess+0x74>)
 8013dec:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013df0:	4b19      	ldr	r3, [pc, #100]	; (8013e58 <AckTimeoutRetriesProcess+0x74>)
 8013df2:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d229      	bcs.n	8013e4e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013dfa:	4b17      	ldr	r3, [pc, #92]	; (8013e58 <AckTimeoutRetriesProcess+0x74>)
 8013dfc:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e00:	3301      	adds	r3, #1
 8013e02:	b2da      	uxtb	r2, r3
 8013e04:	4b14      	ldr	r3, [pc, #80]	; (8013e58 <AckTimeoutRetriesProcess+0x74>)
 8013e06:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013e0a:	4b13      	ldr	r3, [pc, #76]	; (8013e58 <AckTimeoutRetriesProcess+0x74>)
 8013e0c:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e10:	f003 0301 	and.w	r3, r3, #1
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d019      	beq.n	8013e4e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013e1a:	2322      	movs	r3, #34	; 0x22
 8013e1c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e1e:	4b0f      	ldr	r3, [pc, #60]	; (8013e5c <AckTimeoutRetriesProcess+0x78>)
 8013e20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013e24:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013e26:	4b0d      	ldr	r3, [pc, #52]	; (8013e5c <AckTimeoutRetriesProcess+0x78>)
 8013e28:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013e2c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e2e:	4b0b      	ldr	r3, [pc, #44]	; (8013e5c <AckTimeoutRetriesProcess+0x78>)
 8013e30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e34:	f107 0208 	add.w	r2, r7, #8
 8013e38:	4611      	mov	r1, r2
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f003 fc91 	bl	8017762 <RegionGetPhyParam>
 8013e40:	4603      	mov	r3, r0
 8013e42:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	b25a      	sxtb	r2, r3
 8013e48:	4b04      	ldr	r3, [pc, #16]	; (8013e5c <AckTimeoutRetriesProcess+0x78>)
 8013e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013e4e:	bf00      	nop
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	20000980 	.word	0x20000980
 8013e5c:	20000e88 	.word	0x20000e88

08013e60 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013e66:	4b14      	ldr	r3, [pc, #80]	; (8013eb8 <AckTimeoutRetriesFinalize+0x58>)
 8013e68:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013e6c:	f083 0301 	eor.w	r3, r3, #1
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d015      	beq.n	8013ea2 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013e76:	2302      	movs	r3, #2
 8013e78:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013e7a:	4b10      	ldr	r3, [pc, #64]	; (8013ebc <AckTimeoutRetriesFinalize+0x5c>)
 8013e7c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013e7e:	4b10      	ldr	r3, [pc, #64]	; (8013ec0 <AckTimeoutRetriesFinalize+0x60>)
 8013e80:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013e82:	4b10      	ldr	r3, [pc, #64]	; (8013ec4 <AckTimeoutRetriesFinalize+0x64>)
 8013e84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e88:	1d3a      	adds	r2, r7, #4
 8013e8a:	4611      	mov	r1, r2
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f003 fc91 	bl	80177b4 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013e92:	4b09      	ldr	r3, [pc, #36]	; (8013eb8 <AckTimeoutRetriesFinalize+0x58>)
 8013e94:	2200      	movs	r2, #0
 8013e96:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013e9a:	4b07      	ldr	r3, [pc, #28]	; (8013eb8 <AckTimeoutRetriesFinalize+0x58>)
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013ea2:	4b05      	ldr	r3, [pc, #20]	; (8013eb8 <AckTimeoutRetriesFinalize+0x58>)
 8013ea4:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013ea8:	4b03      	ldr	r3, [pc, #12]	; (8013eb8 <AckTimeoutRetriesFinalize+0x58>)
 8013eaa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013eae:	bf00      	nop
 8013eb0:	3710      	adds	r7, #16
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	20000980 	.word	0x20000980
 8013ebc:	200010a8 	.word	0x200010a8
 8013ec0:	2000113c 	.word	0x2000113c
 8013ec4:	20000e88 	.word	0x20000e88

08013ec8 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013ec8:	b480      	push	{r7}
 8013eca:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013ecc:	4b0b      	ldr	r3, [pc, #44]	; (8013efc <IsRequestPending+0x34>)
 8013ece:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013ed2:	f003 0304 	and.w	r3, r3, #4
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d107      	bne.n	8013eec <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013edc:	4b07      	ldr	r3, [pc, #28]	; (8013efc <IsRequestPending+0x34>)
 8013ede:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013ee2:	f003 0301 	and.w	r3, r3, #1
 8013ee6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d001      	beq.n	8013ef0 <IsRequestPending+0x28>
    {
        return 1;
 8013eec:	2301      	movs	r3, #1
 8013eee:	e000      	b.n	8013ef2 <IsRequestPending+0x2a>
    }
    return 0;
 8013ef0:	2300      	movs	r3, #0
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bc80      	pop	{r7}
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop
 8013efc:	20000980 	.word	0x20000980

08013f00 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013f00:	b590      	push	{r4, r7, lr}
 8013f02:	b08f      	sub	sp, #60	; 0x3c
 8013f04:	af02      	add	r7, sp, #8
 8013f06:	6178      	str	r0, [r7, #20]
 8013f08:	6139      	str	r1, [r7, #16]
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d002      	beq.n	8013f1a <LoRaMacInitialization+0x1a>
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f1a:	2303      	movs	r3, #3
 8013f1c:	e273      	b.n	8014406 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d00b      	beq.n	8013f3e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d007      	beq.n	8013f3e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d003      	beq.n	8013f3e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d101      	bne.n	8013f42 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f3e:	2303      	movs	r3, #3
 8013f40:	e261      	b.n	8014406 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013f42:	7bfb      	ldrb	r3, [r7, #15]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f003 fbfc 	bl	8017742 <RegionIsActive>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	f083 0301 	eor.w	r3, r3, #1
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d001      	beq.n	8013f5a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013f56:	2309      	movs	r3, #9
 8013f58:	e255      	b.n	8014406 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013f5a:	6978      	ldr	r0, [r7, #20]
 8013f5c:	f002 f852 	bl	8016004 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013f60:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013f64:	2100      	movs	r1, #0
 8013f66:	48c7      	ldr	r0, [pc, #796]	; (8014284 <LoRaMacInitialization+0x384>)
 8013f68:	f005 ff50 	bl	8019e0c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013f6c:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013f70:	2100      	movs	r1, #0
 8013f72:	48c5      	ldr	r0, [pc, #788]	; (8014288 <LoRaMacInitialization+0x388>)
 8013f74:	f005 ff4a 	bl	8019e0c <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013f78:	4bc3      	ldr	r3, [pc, #780]	; (8014288 <LoRaMacInitialization+0x388>)
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8013f80:	4bc1      	ldr	r3, [pc, #772]	; (8014288 <LoRaMacInitialization+0x388>)
 8013f82:	2201      	movs	r2, #1
 8013f84:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013f88:	4abe      	ldr	r2, [pc, #760]	; (8014284 <LoRaMacInitialization+0x384>)
 8013f8a:	7bfb      	ldrb	r3, [r7, #15]
 8013f8c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013f90:	4bbc      	ldr	r3, [pc, #752]	; (8014284 <LoRaMacInitialization+0x384>)
 8013f92:	2200      	movs	r2, #0
 8013f94:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013f98:	4bba      	ldr	r3, [pc, #744]	; (8014284 <LoRaMacInitialization+0x384>)
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013fa0:	4bb8      	ldr	r3, [pc, #736]	; (8014284 <LoRaMacInitialization+0x384>)
 8013fa2:	4aba      	ldr	r2, [pc, #744]	; (801428c <LoRaMacInitialization+0x38c>)
 8013fa4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013fa8:	230f      	movs	r3, #15
 8013faa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013fae:	4bb5      	ldr	r3, [pc, #724]	; (8014284 <LoRaMacInitialization+0x384>)
 8013fb0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013fb8:	4611      	mov	r1, r2
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f003 fbd1 	bl	8017762 <RegionGetPhyParam>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	bf14      	ite	ne
 8013fca:	2301      	movne	r3, #1
 8013fcc:	2300      	moveq	r3, #0
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	4bac      	ldr	r3, [pc, #688]	; (8014284 <LoRaMacInitialization+0x384>)
 8013fd2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013fd6:	230a      	movs	r3, #10
 8013fd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013fdc:	4ba9      	ldr	r3, [pc, #676]	; (8014284 <LoRaMacInitialization+0x384>)
 8013fde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fe2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013fe6:	4611      	mov	r1, r2
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f003 fbba 	bl	8017762 <RegionGetPhyParam>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	b25a      	sxtb	r2, r3
 8013ff6:	4ba3      	ldr	r3, [pc, #652]	; (8014284 <LoRaMacInitialization+0x384>)
 8013ff8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013ffc:	2306      	movs	r3, #6
 8013ffe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014002:	4ba0      	ldr	r3, [pc, #640]	; (8014284 <LoRaMacInitialization+0x384>)
 8014004:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014008:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801400c:	4611      	mov	r1, r2
 801400e:	4618      	mov	r0, r3
 8014010:	f003 fba7 	bl	8017762 <RegionGetPhyParam>
 8014014:	4603      	mov	r3, r0
 8014016:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401a:	b25a      	sxtb	r2, r3
 801401c:	4b99      	ldr	r3, [pc, #612]	; (8014284 <LoRaMacInitialization+0x384>)
 801401e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8014022:	2310      	movs	r3, #16
 8014024:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014028:	4b96      	ldr	r3, [pc, #600]	; (8014284 <LoRaMacInitialization+0x384>)
 801402a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801402e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014032:	4611      	mov	r1, r2
 8014034:	4618      	mov	r0, r3
 8014036:	f003 fb94 	bl	8017762 <RegionGetPhyParam>
 801403a:	4603      	mov	r3, r0
 801403c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014040:	4a90      	ldr	r2, [pc, #576]	; (8014284 <LoRaMacInitialization+0x384>)
 8014042:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8014046:	2311      	movs	r3, #17
 8014048:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801404c:	4b8d      	ldr	r3, [pc, #564]	; (8014284 <LoRaMacInitialization+0x384>)
 801404e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014056:	4611      	mov	r1, r2
 8014058:	4618      	mov	r0, r3
 801405a:	f003 fb82 	bl	8017762 <RegionGetPhyParam>
 801405e:	4603      	mov	r3, r0
 8014060:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	4a87      	ldr	r2, [pc, #540]	; (8014284 <LoRaMacInitialization+0x384>)
 8014066:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801406a:	2312      	movs	r3, #18
 801406c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014070:	4b84      	ldr	r3, [pc, #528]	; (8014284 <LoRaMacInitialization+0x384>)
 8014072:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014076:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801407a:	4611      	mov	r1, r2
 801407c:	4618      	mov	r0, r3
 801407e:	f003 fb70 	bl	8017762 <RegionGetPhyParam>
 8014082:	4603      	mov	r3, r0
 8014084:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014088:	4a7e      	ldr	r2, [pc, #504]	; (8014284 <LoRaMacInitialization+0x384>)
 801408a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801408e:	2313      	movs	r3, #19
 8014090:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014094:	4b7b      	ldr	r3, [pc, #492]	; (8014284 <LoRaMacInitialization+0x384>)
 8014096:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801409a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801409e:	4611      	mov	r1, r2
 80140a0:	4618      	mov	r0, r3
 80140a2:	f003 fb5e 	bl	8017762 <RegionGetPhyParam>
 80140a6:	4603      	mov	r3, r0
 80140a8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80140aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ac:	4a75      	ldr	r2, [pc, #468]	; (8014284 <LoRaMacInitialization+0x384>)
 80140ae:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80140b2:	2314      	movs	r3, #20
 80140b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140b8:	4b72      	ldr	r3, [pc, #456]	; (8014284 <LoRaMacInitialization+0x384>)
 80140ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140c2:	4611      	mov	r1, r2
 80140c4:	4618      	mov	r0, r3
 80140c6:	f003 fb4c 	bl	8017762 <RegionGetPhyParam>
 80140ca:	4603      	mov	r3, r0
 80140cc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80140ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d0:	4a6c      	ldr	r2, [pc, #432]	; (8014284 <LoRaMacInitialization+0x384>)
 80140d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80140d6:	2317      	movs	r3, #23
 80140d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140dc:	4b69      	ldr	r3, [pc, #420]	; (8014284 <LoRaMacInitialization+0x384>)
 80140de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140e6:	4611      	mov	r1, r2
 80140e8:	4618      	mov	r0, r3
 80140ea:	f003 fb3a 	bl	8017762 <RegionGetPhyParam>
 80140ee:	4603      	mov	r3, r0
 80140f0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80140f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f4:	b2da      	uxtb	r2, r3
 80140f6:	4b63      	ldr	r3, [pc, #396]	; (8014284 <LoRaMacInitialization+0x384>)
 80140f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80140fc:	2318      	movs	r3, #24
 80140fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014102:	4b60      	ldr	r3, [pc, #384]	; (8014284 <LoRaMacInitialization+0x384>)
 8014104:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014108:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801410c:	4611      	mov	r1, r2
 801410e:	4618      	mov	r0, r3
 8014110:	f003 fb27 	bl	8017762 <RegionGetPhyParam>
 8014114:	4603      	mov	r3, r0
 8014116:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411a:	4a5a      	ldr	r2, [pc, #360]	; (8014284 <LoRaMacInitialization+0x384>)
 801411c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	4a58      	ldr	r2, [pc, #352]	; (8014284 <LoRaMacInitialization+0x384>)
 8014124:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8014128:	2319      	movs	r3, #25
 801412a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801412e:	4b55      	ldr	r3, [pc, #340]	; (8014284 <LoRaMacInitialization+0x384>)
 8014130:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014134:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014138:	4611      	mov	r1, r2
 801413a:	4618      	mov	r0, r3
 801413c:	f003 fb11 	bl	8017762 <RegionGetPhyParam>
 8014140:	4603      	mov	r3, r0
 8014142:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8014144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014146:	b2da      	uxtb	r2, r3
 8014148:	4b4e      	ldr	r3, [pc, #312]	; (8014284 <LoRaMacInitialization+0x384>)
 801414a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014150:	b2da      	uxtb	r2, r3
 8014152:	4b4c      	ldr	r3, [pc, #304]	; (8014284 <LoRaMacInitialization+0x384>)
 8014154:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014158:	231e      	movs	r3, #30
 801415a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801415e:	4b49      	ldr	r3, [pc, #292]	; (8014284 <LoRaMacInitialization+0x384>)
 8014160:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014164:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014168:	4611      	mov	r1, r2
 801416a:	4618      	mov	r0, r3
 801416c:	f003 faf9 	bl	8017762 <RegionGetPhyParam>
 8014170:	4603      	mov	r3, r0
 8014172:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014176:	b2da      	uxtb	r2, r3
 8014178:	4b42      	ldr	r3, [pc, #264]	; (8014284 <LoRaMacInitialization+0x384>)
 801417a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801417e:	231f      	movs	r3, #31
 8014180:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014184:	4b3f      	ldr	r3, [pc, #252]	; (8014284 <LoRaMacInitialization+0x384>)
 8014186:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801418a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801418e:	4611      	mov	r1, r2
 8014190:	4618      	mov	r0, r3
 8014192:	f003 fae6 	bl	8017762 <RegionGetPhyParam>
 8014196:	4603      	mov	r3, r0
 8014198:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419c:	b2da      	uxtb	r2, r3
 801419e:	4b39      	ldr	r3, [pc, #228]	; (8014284 <LoRaMacInitialization+0x384>)
 80141a0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80141a4:	2320      	movs	r3, #32
 80141a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141aa:	4b36      	ldr	r3, [pc, #216]	; (8014284 <LoRaMacInitialization+0x384>)
 80141ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141b4:	4611      	mov	r1, r2
 80141b6:	4618      	mov	r0, r3
 80141b8:	f003 fad3 	bl	8017762 <RegionGetPhyParam>
 80141bc:	4603      	mov	r3, r0
 80141be:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	4a30      	ldr	r2, [pc, #192]	; (8014284 <LoRaMacInitialization+0x384>)
 80141c4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80141c8:	2321      	movs	r3, #33	; 0x21
 80141ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141ce:	4b2d      	ldr	r3, [pc, #180]	; (8014284 <LoRaMacInitialization+0x384>)
 80141d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141d8:	4611      	mov	r1, r2
 80141da:	4618      	mov	r0, r3
 80141dc:	f003 fac1 	bl	8017762 <RegionGetPhyParam>
 80141e0:	4603      	mov	r3, r0
 80141e2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	4a27      	ldr	r2, [pc, #156]	; (8014284 <LoRaMacInitialization+0x384>)
 80141e8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80141ec:	230b      	movs	r3, #11
 80141ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141f2:	4b24      	ldr	r3, [pc, #144]	; (8014284 <LoRaMacInitialization+0x384>)
 80141f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141fc:	4611      	mov	r1, r2
 80141fe:	4618      	mov	r0, r3
 8014200:	f003 faaf 	bl	8017762 <RegionGetPhyParam>
 8014204:	4603      	mov	r3, r0
 8014206:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420a:	b29a      	uxth	r2, r3
 801420c:	4b1d      	ldr	r3, [pc, #116]	; (8014284 <LoRaMacInitialization+0x384>)
 801420e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8014212:	230c      	movs	r3, #12
 8014214:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014218:	4b1a      	ldr	r3, [pc, #104]	; (8014284 <LoRaMacInitialization+0x384>)
 801421a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801421e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014222:	4611      	mov	r1, r2
 8014224:	4618      	mov	r0, r3
 8014226:	f003 fa9c 	bl	8017762 <RegionGetPhyParam>
 801422a:	4603      	mov	r3, r0
 801422c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014230:	b29a      	uxth	r2, r3
 8014232:	4b14      	ldr	r3, [pc, #80]	; (8014284 <LoRaMacInitialization+0x384>)
 8014234:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014238:	4b12      	ldr	r3, [pc, #72]	; (8014284 <LoRaMacInitialization+0x384>)
 801423a:	2201      	movs	r2, #1
 801423c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014240:	4b10      	ldr	r3, [pc, #64]	; (8014284 <LoRaMacInitialization+0x384>)
 8014242:	220a      	movs	r2, #10
 8014244:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8014248:	4b0e      	ldr	r3, [pc, #56]	; (8014284 <LoRaMacInitialization+0x384>)
 801424a:	2206      	movs	r2, #6
 801424c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8014250:	4b0c      	ldr	r3, [pc, #48]	; (8014284 <LoRaMacInitialization+0x384>)
 8014252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014256:	4a0b      	ldr	r2, [pc, #44]	; (8014284 <LoRaMacInitialization+0x384>)
 8014258:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801425a:	4b0a      	ldr	r3, [pc, #40]	; (8014284 <LoRaMacInitialization+0x384>)
 801425c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014260:	4b08      	ldr	r3, [pc, #32]	; (8014284 <LoRaMacInitialization+0x384>)
 8014262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014266:	4b07      	ldr	r3, [pc, #28]	; (8014284 <LoRaMacInitialization+0x384>)
 8014268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801426c:	4a05      	ldr	r2, [pc, #20]	; (8014284 <LoRaMacInitialization+0x384>)
 801426e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014270:	4b04      	ldr	r3, [pc, #16]	; (8014284 <LoRaMacInitialization+0x384>)
 8014272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014276:	4a03      	ldr	r2, [pc, #12]	; (8014284 <LoRaMacInitialization+0x384>)
 8014278:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801427a:	4b02      	ldr	r3, [pc, #8]	; (8014284 <LoRaMacInitialization+0x384>)
 801427c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014280:	e006      	b.n	8014290 <LoRaMacInitialization+0x390>
 8014282:	bf00      	nop
 8014284:	20000e88 	.word	0x20000e88
 8014288:	20000980 	.word	0x20000980
 801428c:	01000300 	.word	0x01000300
 8014290:	4a5f      	ldr	r2, [pc, #380]	; (8014410 <LoRaMacInitialization+0x510>)
 8014292:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014294:	4b5e      	ldr	r3, [pc, #376]	; (8014410 <LoRaMacInitialization+0x510>)
 8014296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801429a:	4a5d      	ldr	r2, [pc, #372]	; (8014410 <LoRaMacInitialization+0x510>)
 801429c:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801429e:	4b5c      	ldr	r3, [pc, #368]	; (8014410 <LoRaMacInitialization+0x510>)
 80142a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80142a4:	4a5a      	ldr	r2, [pc, #360]	; (8014410 <LoRaMacInitialization+0x510>)
 80142a6:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80142a8:	4b59      	ldr	r3, [pc, #356]	; (8014410 <LoRaMacInitialization+0x510>)
 80142aa:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80142ae:	4b58      	ldr	r3, [pc, #352]	; (8014410 <LoRaMacInitialization+0x510>)
 80142b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80142b4:	2300      	movs	r3, #0
 80142b6:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80142ba:	4b56      	ldr	r3, [pc, #344]	; (8014414 <LoRaMacInitialization+0x514>)
 80142bc:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80142be:	4b56      	ldr	r3, [pc, #344]	; (8014418 <LoRaMacInitialization+0x518>)
 80142c0:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80142c2:	4b53      	ldr	r3, [pc, #332]	; (8014410 <LoRaMacInitialization+0x510>)
 80142c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142c8:	f107 0218 	add.w	r2, r7, #24
 80142cc:	4611      	mov	r1, r2
 80142ce:	4618      	mov	r0, r3
 80142d0:	f003 fa70 	bl	80177b4 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80142d4:	4a51      	ldr	r2, [pc, #324]	; (801441c <LoRaMacInitialization+0x51c>)
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 80142dc:	2000      	movs	r0, #0
 80142de:	f7ff f8b5 	bl	801344c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80142e2:	4b4b      	ldr	r3, [pc, #300]	; (8014410 <LoRaMacInitialization+0x510>)
 80142e4:	2201      	movs	r2, #1
 80142e6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 80142ea:	4a4c      	ldr	r2, [pc, #304]	; (801441c <LoRaMacInitialization+0x51c>)
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80142f2:	4b4a      	ldr	r3, [pc, #296]	; (801441c <LoRaMacInitialization+0x51c>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 80142fa:	4b48      	ldr	r3, [pc, #288]	; (801441c <LoRaMacInitialization+0x51c>)
 80142fc:	2201      	movs	r2, #1
 80142fe:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014302:	4b43      	ldr	r3, [pc, #268]	; (8014410 <LoRaMacInitialization+0x510>)
 8014304:	2200      	movs	r2, #0
 8014306:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014308:	4b41      	ldr	r3, [pc, #260]	; (8014410 <LoRaMacInitialization+0x510>)
 801430a:	2200      	movs	r2, #0
 801430c:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801430e:	2300      	movs	r3, #0
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	4b43      	ldr	r3, [pc, #268]	; (8014420 <LoRaMacInitialization+0x520>)
 8014314:	2200      	movs	r2, #0
 8014316:	f04f 31ff 	mov.w	r1, #4294967295
 801431a:	4842      	ldr	r0, [pc, #264]	; (8014424 <LoRaMacInitialization+0x524>)
 801431c:	f009 fe32 	bl	801df84 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014320:	2300      	movs	r3, #0
 8014322:	9300      	str	r3, [sp, #0]
 8014324:	4b40      	ldr	r3, [pc, #256]	; (8014428 <LoRaMacInitialization+0x528>)
 8014326:	2200      	movs	r2, #0
 8014328:	f04f 31ff 	mov.w	r1, #4294967295
 801432c:	483f      	ldr	r0, [pc, #252]	; (801442c <LoRaMacInitialization+0x52c>)
 801432e:	f009 fe29 	bl	801df84 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014332:	2300      	movs	r3, #0
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	4b3e      	ldr	r3, [pc, #248]	; (8014430 <LoRaMacInitialization+0x530>)
 8014338:	2200      	movs	r2, #0
 801433a:	f04f 31ff 	mov.w	r1, #4294967295
 801433e:	483d      	ldr	r0, [pc, #244]	; (8014434 <LoRaMacInitialization+0x534>)
 8014340:	f009 fe20 	bl	801df84 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8014344:	2300      	movs	r3, #0
 8014346:	9300      	str	r3, [sp, #0]
 8014348:	4b3b      	ldr	r3, [pc, #236]	; (8014438 <LoRaMacInitialization+0x538>)
 801434a:	2200      	movs	r2, #0
 801434c:	f04f 31ff 	mov.w	r1, #4294967295
 8014350:	483a      	ldr	r0, [pc, #232]	; (801443c <LoRaMacInitialization+0x53c>)
 8014352:	f009 fe17 	bl	801df84 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014356:	4c2e      	ldr	r4, [pc, #184]	; (8014410 <LoRaMacInitialization+0x510>)
 8014358:	463b      	mov	r3, r7
 801435a:	4618      	mov	r0, r3
 801435c:	f009 f986 	bl	801d66c <SysTimeGetMcuTime>
 8014360:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8014364:	463a      	mov	r2, r7
 8014366:	e892 0003 	ldmia.w	r2, {r0, r1}
 801436a:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801436e:	4b2b      	ldr	r3, [pc, #172]	; (801441c <LoRaMacInitialization+0x51c>)
 8014370:	4a33      	ldr	r2, [pc, #204]	; (8014440 <LoRaMacInitialization+0x540>)
 8014372:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014376:	4b29      	ldr	r3, [pc, #164]	; (801441c <LoRaMacInitialization+0x51c>)
 8014378:	4a32      	ldr	r2, [pc, #200]	; (8014444 <LoRaMacInitialization+0x544>)
 801437a:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801437e:	4b27      	ldr	r3, [pc, #156]	; (801441c <LoRaMacInitialization+0x51c>)
 8014380:	4a31      	ldr	r2, [pc, #196]	; (8014448 <LoRaMacInitialization+0x548>)
 8014382:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014386:	4b25      	ldr	r3, [pc, #148]	; (801441c <LoRaMacInitialization+0x51c>)
 8014388:	4a30      	ldr	r2, [pc, #192]	; (801444c <LoRaMacInitialization+0x54c>)
 801438a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801438e:	4b23      	ldr	r3, [pc, #140]	; (801441c <LoRaMacInitialization+0x51c>)
 8014390:	4a2f      	ldr	r2, [pc, #188]	; (8014450 <LoRaMacInitialization+0x550>)
 8014392:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014396:	4b2f      	ldr	r3, [pc, #188]	; (8014454 <LoRaMacInitialization+0x554>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	482f      	ldr	r0, [pc, #188]	; (8014458 <LoRaMacInitialization+0x558>)
 801439c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801439e:	482f      	ldr	r0, [pc, #188]	; (801445c <LoRaMacInitialization+0x55c>)
 80143a0:	f7fa fe10 	bl	800efc4 <SecureElementInit>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d001      	beq.n	80143ae <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80143aa:	2311      	movs	r3, #17
 80143ac:	e02b      	b.n	8014406 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80143ae:	4818      	ldr	r0, [pc, #96]	; (8014410 <LoRaMacInitialization+0x510>)
 80143b0:	f002 fae8 	bl	8016984 <LoRaMacCryptoInit>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d001      	beq.n	80143be <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80143ba:	2311      	movs	r3, #17
 80143bc:	e023      	b.n	8014406 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80143be:	f001 fbe3 	bl	8015b88 <LoRaMacCommandsInit>
 80143c2:	4603      	mov	r3, r0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d001      	beq.n	80143cc <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80143c8:	2313      	movs	r3, #19
 80143ca:	e01c      	b.n	8014406 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80143cc:	4824      	ldr	r0, [pc, #144]	; (8014460 <LoRaMacInitialization+0x560>)
 80143ce:	f002 fba3 	bl	8016b18 <LoRaMacCryptoSetMulticastReference>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80143d8:	2311      	movs	r3, #17
 80143da:	e014      	b.n	8014406 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80143dc:	4b1d      	ldr	r3, [pc, #116]	; (8014454 <LoRaMacInitialization+0x554>)
 80143de:	695b      	ldr	r3, [r3, #20]
 80143e0:	4798      	blx	r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	4618      	mov	r0, r3
 80143e6:	f005 fcb1 	bl	8019d4c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80143ea:	4b1a      	ldr	r3, [pc, #104]	; (8014454 <LoRaMacInitialization+0x554>)
 80143ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143ee:	4a08      	ldr	r2, [pc, #32]	; (8014410 <LoRaMacInitialization+0x510>)
 80143f0:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80143f4:	4610      	mov	r0, r2
 80143f6:	4798      	blx	r3
    Radio.Sleep( );
 80143f8:	4b16      	ldr	r3, [pc, #88]	; (8014454 <LoRaMacInitialization+0x554>)
 80143fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143fc:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80143fe:	2001      	movs	r0, #1
 8014400:	f7fd fb40 	bl	8011a84 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014404:	2300      	movs	r3, #0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3734      	adds	r7, #52	; 0x34
 801440a:	46bd      	mov	sp, r7
 801440c:	bd90      	pop	{r4, r7, pc}
 801440e:	bf00      	nop
 8014410:	20000e88 	.word	0x20000e88
 8014414:	200010a8 	.word	0x200010a8
 8014418:	2000113c 	.word	0x2000113c
 801441c:	20000980 	.word	0x20000980
 8014420:	08011fc5 	.word	0x08011fc5
 8014424:	20000ce8 	.word	0x20000ce8
 8014428:	08012039 	.word	0x08012039
 801442c:	20000d00 	.word	0x20000d00
 8014430:	080120a5 	.word	0x080120a5
 8014434:	20000d18 	.word	0x20000d18
 8014438:	08012119 	.word	0x08012119
 801443c:	20000d74 	.word	0x20000d74
 8014440:	08010b85 	.word	0x08010b85
 8014444:	08010be1 	.word	0x08010be1
 8014448:	08010c79 	.word	0x08010c79
 801444c:	08010c4d 	.word	0x08010c4d
 8014450:	08010c95 	.word	0x08010c95
 8014454:	0801f98c 	.word	0x0801f98c
 8014458:	20000ccc 	.word	0x20000ccc
 801445c:	20000fd0 	.word	0x20000fd0
 8014460:	20000f70 	.word	0x20000f70

08014464 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014468:	4b04      	ldr	r3, [pc, #16]	; (801447c <LoRaMacStart+0x18>)
 801446a:	2200      	movs	r2, #0
 801446c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8014470:	f7fc fc26 	bl	8010cc0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	20000980 	.word	0x20000980

08014480 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014480:	b580      	push	{r7, lr}
 8014482:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014484:	f7fd fad2 	bl	8011a2c <LoRaMacIsBusy>
 8014488:	4603      	mov	r3, r0
 801448a:	f083 0301 	eor.w	r3, r3, #1
 801448e:	b2db      	uxtb	r3, r3
 8014490:	2b00      	cmp	r3, #0
 8014492:	d00d      	beq.n	80144b0 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014494:	4b0b      	ldr	r3, [pc, #44]	; (80144c4 <LoRaMacStop+0x44>)
 8014496:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801449a:	2b02      	cmp	r3, #2
 801449c:	d102      	bne.n	80144a4 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801449e:	4b0a      	ldr	r3, [pc, #40]	; (80144c8 <LoRaMacStop+0x48>)
 80144a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a2:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80144a4:	4b09      	ldr	r3, [pc, #36]	; (80144cc <LoRaMacStop+0x4c>)
 80144a6:	2201      	movs	r2, #1
 80144a8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80144ac:	2300      	movs	r3, #0
 80144ae:	e007      	b.n	80144c0 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80144b0:	4b06      	ldr	r3, [pc, #24]	; (80144cc <LoRaMacStop+0x4c>)
 80144b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d101      	bne.n	80144be <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80144ba:	2300      	movs	r3, #0
 80144bc:	e000      	b.n	80144c0 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80144be:	2301      	movs	r3, #1
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	20000e88 	.word	0x20000e88
 80144c8:	0801f98c 	.word	0x0801f98c
 80144cc:	20000980 	.word	0x20000980

080144d0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80144d4:	480d      	ldr	r0, [pc, #52]	; (801450c <LoRaMacHalt+0x3c>)
 80144d6:	f009 fdf9 	bl	801e0cc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80144da:	480d      	ldr	r0, [pc, #52]	; (8014510 <LoRaMacHalt+0x40>)
 80144dc:	f009 fdf6 	bl	801e0cc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80144e0:	480c      	ldr	r0, [pc, #48]	; (8014514 <LoRaMacHalt+0x44>)
 80144e2:	f009 fdf3 	bl	801e0cc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80144e6:	480c      	ldr	r0, [pc, #48]	; (8014518 <LoRaMacHalt+0x48>)
 80144e8:	f009 fdf0 	bl	801e0cc <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80144ec:	f001 f9cb 	bl	8015886 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80144f0:	4b0a      	ldr	r3, [pc, #40]	; (801451c <LoRaMacHalt+0x4c>)
 80144f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80144f6:	4b0a      	ldr	r3, [pc, #40]	; (8014520 <LoRaMacHalt+0x50>)
 80144f8:	2200      	movs	r2, #0
 80144fa:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80144fe:	4b08      	ldr	r3, [pc, #32]	; (8014520 <LoRaMacHalt+0x50>)
 8014500:	2201      	movs	r2, #1
 8014502:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014506:	2300      	movs	r3, #0
}
 8014508:	4618      	mov	r0, r3
 801450a:	bd80      	pop	{r7, pc}
 801450c:	20000ce8 	.word	0x20000ce8
 8014510:	20000d00 	.word	0x20000d00
 8014514:	20000d18 	.word	0x20000d18
 8014518:	20000d74 	.word	0x20000d74
 801451c:	0801f98c 	.word	0x0801f98c
 8014520:	20000980 	.word	0x20000980

08014524 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b08a      	sub	sp, #40	; 0x28
 8014528:	af00      	add	r7, sp, #0
 801452a:	4603      	mov	r3, r0
 801452c:	6039      	str	r1, [r7, #0]
 801452e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014530:	4b3e      	ldr	r3, [pc, #248]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014534:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014536:	4b3d      	ldr	r3, [pc, #244]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014538:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 801453c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801453e:	4b3b      	ldr	r3, [pc, #236]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014540:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8014544:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014546:	2300      	movs	r3, #0
 8014548:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d101      	bne.n	8014554 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014550:	2303      	movs	r3, #3
 8014552:	e066      	b.n	8014622 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8014554:	4b35      	ldr	r3, [pc, #212]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014556:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801455a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801455c:	2300      	movs	r3, #0
 801455e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014560:	4b32      	ldr	r3, [pc, #200]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014562:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014566:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014568:	4b30      	ldr	r3, [pc, #192]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 801456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801456c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801456e:	4b2f      	ldr	r3, [pc, #188]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014570:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014574:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014576:	4b2d      	ldr	r3, [pc, #180]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014578:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801457c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801457e:	4b2b      	ldr	r3, [pc, #172]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014580:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014584:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014588:	4b28      	ldr	r3, [pc, #160]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 801458a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801458e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014592:	4b26      	ldr	r3, [pc, #152]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 8014594:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801459c:	4b23      	ldr	r3, [pc, #140]	; (801462c <LoRaMacQueryTxPossible+0x108>)
 801459e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80145a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80145a6:	f107 0310 	add.w	r3, r7, #16
 80145aa:	f107 020e 	add.w	r2, r7, #14
 80145ae:	f107 010f 	add.w	r1, r7, #15
 80145b2:	f107 0014 	add.w	r0, r7, #20
 80145b6:	f001 f8d1 	bl	801575c <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80145ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fd fefc 	bl	80123bc <GetMaxAppPayloadWithoutFOptsLength>
 80145c4:	4603      	mov	r3, r0
 80145c6:	461a      	mov	r2, r3
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80145cc:	f107 0308 	add.w	r3, r7, #8
 80145d0:	4618      	mov	r0, r3
 80145d2:	f001 fbdf 	bl	8015d94 <LoRaMacCommandsGetSizeSerializedCmds>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80145dc:	2313      	movs	r3, #19
 80145de:	e020      	b.n	8014622 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	2b0f      	cmp	r3, #15
 80145e4:	d819      	bhi.n	801461a <LoRaMacQueryTxPossible+0xf6>
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	785b      	ldrb	r3, [r3, #1]
 80145ea:	461a      	mov	r2, r3
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d313      	bcc.n	801461a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	785a      	ldrb	r2, [r3, #1]
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	b2da      	uxtb	r2, r3
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	785b      	ldrb	r3, [r3, #1]
 8014606:	4619      	mov	r1, r3
 8014608:	79fa      	ldrb	r2, [r7, #7]
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	4413      	add	r3, r2
 801460e:	4299      	cmp	r1, r3
 8014610:	d301      	bcc.n	8014616 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8014612:	2300      	movs	r3, #0
 8014614:	e005      	b.n	8014622 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014616:	2308      	movs	r3, #8
 8014618:	e003      	b.n	8014622 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	2200      	movs	r2, #0
 801461e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014620:	2308      	movs	r3, #8
    }
}
 8014622:	4618      	mov	r0, r3
 8014624:	3728      	adds	r7, #40	; 0x28
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	20000e88 	.word	0x20000e88

08014630 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014630:	b590      	push	{r4, r7, lr}
 8014632:	b087      	sub	sp, #28
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014638:	2300      	movs	r3, #0
 801463a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d101      	bne.n	8014646 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014642:	2303      	movs	r3, #3
 8014644:	e1a4      	b.n	8014990 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	2b3f      	cmp	r3, #63	; 0x3f
 801464c:	f200 8199 	bhi.w	8014982 <LoRaMacMibGetRequestConfirm+0x352>
 8014650:	a201      	add	r2, pc, #4	; (adr r2, 8014658 <LoRaMacMibGetRequestConfirm+0x28>)
 8014652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014656:	bf00      	nop
 8014658:	08014759 	.word	0x08014759
 801465c:	08014765 	.word	0x08014765
 8014660:	08014771 	.word	0x08014771
 8014664:	0801477d 	.word	0x0801477d
 8014668:	08014789 	.word	0x08014789
 801466c:	08014795 	.word	0x08014795
 8014670:	080147a1 	.word	0x080147a1
 8014674:	08014983 	.word	0x08014983
 8014678:	08014983 	.word	0x08014983
 801467c:	08014983 	.word	0x08014983
 8014680:	08014983 	.word	0x08014983
 8014684:	08014983 	.word	0x08014983
 8014688:	08014983 	.word	0x08014983
 801468c:	08014983 	.word	0x08014983
 8014690:	08014983 	.word	0x08014983
 8014694:	080147b5 	.word	0x080147b5
 8014698:	080147c1 	.word	0x080147c1
 801469c:	080147cd 	.word	0x080147cd
 80146a0:	080147ef 	.word	0x080147ef
 80146a4:	08014801 	.word	0x08014801
 80146a8:	08014813 	.word	0x08014813
 80146ac:	08014825 	.word	0x08014825
 80146b0:	08014859 	.word	0x08014859
 80146b4:	08014837 	.word	0x08014837
 80146b8:	0801487b 	.word	0x0801487b
 80146bc:	08014887 	.word	0x08014887
 80146c0:	08014891 	.word	0x08014891
 80146c4:	0801489b 	.word	0x0801489b
 80146c8:	080148a5 	.word	0x080148a5
 80146cc:	080148af 	.word	0x080148af
 80146d0:	080148b9 	.word	0x080148b9
 80146d4:	080148c5 	.word	0x080148c5
 80146d8:	080148dd 	.word	0x080148dd
 80146dc:	080148d1 	.word	0x080148d1
 80146e0:	080148e9 	.word	0x080148e9
 80146e4:	080148f3 	.word	0x080148f3
 80146e8:	080148ff 	.word	0x080148ff
 80146ec:	0801491b 	.word	0x0801491b
 80146f0:	0801490b 	.word	0x0801490b
 80146f4:	08014913 	.word	0x08014913
 80146f8:	08014983 	.word	0x08014983
 80146fc:	08014927 	.word	0x08014927
 8014700:	08014983 	.word	0x08014983
 8014704:	08014983 	.word	0x08014983
 8014708:	08014983 	.word	0x08014983
 801470c:	08014983 	.word	0x08014983
 8014710:	08014983 	.word	0x08014983
 8014714:	08014983 	.word	0x08014983
 8014718:	08014983 	.word	0x08014983
 801471c:	08014983 	.word	0x08014983
 8014720:	08014983 	.word	0x08014983
 8014724:	08014983 	.word	0x08014983
 8014728:	08014983 	.word	0x08014983
 801472c:	08014983 	.word	0x08014983
 8014730:	08014983 	.word	0x08014983
 8014734:	08014983 	.word	0x08014983
 8014738:	08014983 	.word	0x08014983
 801473c:	0801493b 	.word	0x0801493b
 8014740:	08014947 	.word	0x08014947
 8014744:	08014953 	.word	0x08014953
 8014748:	0801495f 	.word	0x0801495f
 801474c:	0801496b 	.word	0x0801496b
 8014750:	08014977 	.word	0x08014977
 8014754:	0801497d 	.word	0x0801497d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014758:	4b8f      	ldr	r3, [pc, #572]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801475a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	711a      	strb	r2, [r3, #4]
            break;
 8014762:	e114      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014764:	4b8c      	ldr	r3, [pc, #560]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014766:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	711a      	strb	r2, [r3, #4]
            break;
 801476e:	e10e      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	4618      	mov	r0, r3
 8014776:	f7fa fefb 	bl	800f570 <SecureElementGetDevEui>
            break;
 801477a:	e108      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	4618      	mov	r0, r3
 8014782:	f7fa ff25 	bl	800f5d0 <SecureElementGetJoinEui>
            break;
 8014786:	e102      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014788:	4b83      	ldr	r3, [pc, #524]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801478a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	711a      	strb	r2, [r3, #4]
            break;
 8014792:	e0fc      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014794:	4b80      	ldr	r3, [pc, #512]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	605a      	str	r2, [r3, #4]
            break;
 801479e:	e0f6      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80147a0:	4b7d      	ldr	r3, [pc, #500]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80147a2:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3304      	adds	r3, #4
 80147aa:	4619      	mov	r1, r3
 80147ac:	4610      	mov	r0, r2
 80147ae:	f7fa ff41 	bl	800f634 <SecureElementGetDevAddr>
            break;
 80147b2:	e0ec      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80147b4:	4b78      	ldr	r3, [pc, #480]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80147b6:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	711a      	strb	r2, [r3, #4]
            break;
 80147be:	e0e6      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80147c0:	4b75      	ldr	r3, [pc, #468]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80147c2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	711a      	strb	r2, [r3, #4]
            break;
 80147ca:	e0e0      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80147cc:	231d      	movs	r3, #29
 80147ce:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147d0:	4b71      	ldr	r3, [pc, #452]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80147d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147d6:	f107 0210 	add.w	r2, r7, #16
 80147da:	4611      	mov	r1, r2
 80147dc:	4618      	mov	r0, r3
 80147de:	f002 ffc0 	bl	8017762 <RegionGetPhyParam>
 80147e2:	4603      	mov	r3, r0
 80147e4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80147e6:	68fa      	ldr	r2, [r7, #12]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	605a      	str	r2, [r3, #4]
            break;
 80147ec:	e0cf      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	4a69      	ldr	r2, [pc, #420]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80147f2:	3304      	adds	r3, #4
 80147f4:	326c      	adds	r2, #108	; 0x6c
 80147f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147fa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147fe:	e0c6      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	4a65      	ldr	r2, [pc, #404]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014804:	3304      	adds	r3, #4
 8014806:	32b4      	adds	r2, #180	; 0xb4
 8014808:	e892 0003 	ldmia.w	r2, {r0, r1}
 801480c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014810:	e0bd      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4a60      	ldr	r2, [pc, #384]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014816:	3304      	adds	r3, #4
 8014818:	3274      	adds	r2, #116	; 0x74
 801481a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801481e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014822:	e0b4      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	4a5c      	ldr	r2, [pc, #368]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014828:	3304      	adds	r3, #4
 801482a:	32bc      	adds	r2, #188	; 0xbc
 801482c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014830:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014834:	e0ab      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014836:	231b      	movs	r3, #27
 8014838:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801483a:	4b57      	ldr	r3, [pc, #348]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801483c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014840:	f107 0210 	add.w	r2, r7, #16
 8014844:	4611      	mov	r1, r2
 8014846:	4618      	mov	r0, r3
 8014848:	f002 ff8b 	bl	8017762 <RegionGetPhyParam>
 801484c:	4603      	mov	r3, r0
 801484e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014850:	68fa      	ldr	r2, [r7, #12]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	605a      	str	r2, [r3, #4]
            break;
 8014856:	e09a      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014858:	231a      	movs	r3, #26
 801485a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801485c:	4b4e      	ldr	r3, [pc, #312]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801485e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014862:	f107 0210 	add.w	r2, r7, #16
 8014866:	4611      	mov	r1, r2
 8014868:	4618      	mov	r0, r3
 801486a:	f002 ff7a 	bl	8017762 <RegionGetPhyParam>
 801486e:	4603      	mov	r3, r0
 8014870:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014872:	68fa      	ldr	r2, [r7, #12]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	605a      	str	r2, [r3, #4]
            break;
 8014878:	e089      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801487a:	4b47      	ldr	r3, [pc, #284]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801487c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	711a      	strb	r2, [r3, #4]
            break;
 8014884:	e083      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014886:	4b44      	ldr	r3, [pc, #272]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	605a      	str	r2, [r3, #4]
            break;
 801488e:	e07e      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014890:	4b41      	ldr	r3, [pc, #260]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014892:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	605a      	str	r2, [r3, #4]
            break;
 8014898:	e079      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801489a:	4b3f      	ldr	r3, [pc, #252]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801489c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	605a      	str	r2, [r3, #4]
            break;
 80148a2:	e074      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80148a4:	4b3c      	ldr	r3, [pc, #240]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	605a      	str	r2, [r3, #4]
            break;
 80148ac:	e06f      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80148ae:	4b3a      	ldr	r3, [pc, #232]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	605a      	str	r2, [r3, #4]
            break;
 80148b6:	e06a      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80148b8:	4b37      	ldr	r3, [pc, #220]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148ba:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	711a      	strb	r2, [r3, #4]
            break;
 80148c2:	e064      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80148c4:	4b34      	ldr	r3, [pc, #208]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148c6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	711a      	strb	r2, [r3, #4]
            break;
 80148ce:	e05e      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80148d0:	4b31      	ldr	r3, [pc, #196]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148d2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	711a      	strb	r2, [r3, #4]
            break;
 80148da:	e058      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80148dc:	4b2e      	ldr	r3, [pc, #184]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148de:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	711a      	strb	r2, [r3, #4]
            break;
 80148e6:	e052      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80148e8:	4b2b      	ldr	r3, [pc, #172]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	605a      	str	r2, [r3, #4]
            break;
 80148f0:	e04d      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80148f2:	4b29      	ldr	r3, [pc, #164]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 80148f4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	711a      	strb	r2, [r3, #4]
            break;
 80148fc:	e047      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80148fe:	4b26      	ldr	r3, [pc, #152]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014900:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	605a      	str	r2, [r3, #4]
            break;
 8014908:	e041      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4a22      	ldr	r2, [pc, #136]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801490e:	605a      	str	r2, [r3, #4]
            break;
 8014910:	e03d      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014918:	e039      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801491a:	4b1f      	ldr	r3, [pc, #124]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801491c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	605a      	str	r2, [r3, #4]
            break;
 8014924:	e033      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	4a1b      	ldr	r2, [pc, #108]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801492a:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 801492e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014930:	687c      	ldr	r4, [r7, #4]
 8014932:	f003 f89f 	bl	8017a74 <RegionGetVersion>
 8014936:	60a0      	str	r0, [r4, #8]
            break;
 8014938:	e029      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801493a:	4b17      	ldr	r3, [pc, #92]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801493c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	605a      	str	r2, [r3, #4]
            break;
 8014944:	e023      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014946:	4b14      	ldr	r3, [pc, #80]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014948:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	809a      	strh	r2, [r3, #4]
            break;
 8014950:	e01d      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014952:	4b11      	ldr	r3, [pc, #68]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014954:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	809a      	strh	r2, [r3, #4]
            break;
 801495c:	e017      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801495e:	4b0e      	ldr	r3, [pc, #56]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 8014960:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	809a      	strh	r2, [r3, #4]
            break;
 8014968:	e011      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801496a:	4b0b      	ldr	r3, [pc, #44]	; (8014998 <LoRaMacMibGetRequestConfirm+0x368>)
 801496c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	809a      	strh	r2, [r3, #4]
            break;
 8014974:	e00b      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014976:	2318      	movs	r3, #24
 8014978:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801497a:	e008      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801497c:	2318      	movs	r3, #24
 801497e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014980:	e005      	b.n	801498e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 ff96 	bl	80158b4 <LoRaMacClassBMibGetRequestConfirm>
 8014988:	4603      	mov	r3, r0
 801498a:	75fb      	strb	r3, [r7, #23]
            break;
 801498c:	bf00      	nop
        }
    }
    return status;
 801498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014990:	4618      	mov	r0, r3
 8014992:	371c      	adds	r7, #28
 8014994:	46bd      	mov	sp, r7
 8014996:	bd90      	pop	{r4, r7, pc}
 8014998:	20000e88 	.word	0x20000e88

0801499c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b086      	sub	sp, #24
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80149a4:	2300      	movs	r3, #0
 80149a6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d101      	bne.n	80149b2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80149ae:	2303      	movs	r3, #3
 80149b0:	e382      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80149b2:	4bbb      	ldr	r3, [pc, #748]	; (8014ca0 <LoRaMacMibSetRequestConfirm+0x304>)
 80149b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80149b8:	f003 0302 	and.w	r3, r3, #2
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d001      	beq.n	80149c4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80149c0:	2301      	movs	r3, #1
 80149c2:	e379      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	2b3f      	cmp	r3, #63	; 0x3f
 80149ca:	f200 8353 	bhi.w	8015074 <LoRaMacMibSetRequestConfirm+0x6d8>
 80149ce:	a201      	add	r2, pc, #4	; (adr r2, 80149d4 <LoRaMacMibSetRequestConfirm+0x38>)
 80149d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149d4:	08014ad5 	.word	0x08014ad5
 80149d8:	08014ae5 	.word	0x08014ae5
 80149dc:	08014aff 	.word	0x08014aff
 80149e0:	08014b17 	.word	0x08014b17
 80149e4:	08014b2f 	.word	0x08014b2f
 80149e8:	08014b3b 	.word	0x08014b3b
 80149ec:	08014b47 	.word	0x08014b47
 80149f0:	08014b71 	.word	0x08014b71
 80149f4:	08014b97 	.word	0x08014b97
 80149f8:	08014bbd 	.word	0x08014bbd
 80149fc:	08014be3 	.word	0x08014be3
 8014a00:	08014c09 	.word	0x08014c09
 8014a04:	08014c2f 	.word	0x08014c2f
 8014a08:	08014c55 	.word	0x08014c55
 8014a0c:	08014c7b 	.word	0x08014c7b
 8014a10:	08014ca9 	.word	0x08014ca9
 8014a14:	08014cc9 	.word	0x08014cc9
 8014a18:	08015075 	.word	0x08015075
 8014a1c:	08014cd5 	.word	0x08014cd5
 8014a20:	08014d45 	.word	0x08014d45
 8014a24:	08014d85 	.word	0x08014d85
 8014a28:	08014de7 	.word	0x08014de7
 8014a2c:	08014e57 	.word	0x08014e57
 8014a30:	08014e27 	.word	0x08014e27
 8014a34:	08014e87 	.word	0x08014e87
 8014a38:	08014ea9 	.word	0x08014ea9
 8014a3c:	08014eb3 	.word	0x08014eb3
 8014a40:	08014ebd 	.word	0x08014ebd
 8014a44:	08014ec7 	.word	0x08014ec7
 8014a48:	08014ed1 	.word	0x08014ed1
 8014a4c:	08014edb 	.word	0x08014edb
 8014a50:	08014f0d 	.word	0x08014f0d
 8014a54:	08014f81 	.word	0x08014f81
 8014a58:	08014f47 	.word	0x08014f47
 8014a5c:	08014fb3 	.word	0x08014fb3
 8014a60:	08014fc9 	.word	0x08014fc9
 8014a64:	08014fe1 	.word	0x08014fe1
 8014a68:	08014fed 	.word	0x08014fed
 8014a6c:	08014ff9 	.word	0x08014ff9
 8014a70:	08015075 	.word	0x08015075
 8014a74:	08015003 	.word	0x08015003
 8014a78:	08015075 	.word	0x08015075
 8014a7c:	08015075 	.word	0x08015075
 8014a80:	08015075 	.word	0x08015075
 8014a84:	08015075 	.word	0x08015075
 8014a88:	08015075 	.word	0x08015075
 8014a8c:	08015075 	.word	0x08015075
 8014a90:	08015075 	.word	0x08015075
 8014a94:	08015075 	.word	0x08015075
 8014a98:	08015075 	.word	0x08015075
 8014a9c:	08015075 	.word	0x08015075
 8014aa0:	08015075 	.word	0x08015075
 8014aa4:	08015075 	.word	0x08015075
 8014aa8:	08015075 	.word	0x08015075
 8014aac:	08015075 	.word	0x08015075
 8014ab0:	08015075 	.word	0x08015075
 8014ab4:	08015075 	.word	0x08015075
 8014ab8:	0801502d 	.word	0x0801502d
 8014abc:	08015039 	.word	0x08015039
 8014ac0:	08015045 	.word	0x08015045
 8014ac4:	08015051 	.word	0x08015051
 8014ac8:	0801505d 	.word	0x0801505d
 8014acc:	08015069 	.word	0x08015069
 8014ad0:	0801506f 	.word	0x0801506f
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	791b      	ldrb	r3, [r3, #4]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fd fb87 	bl	80121ec <SwitchClass>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	75fb      	strb	r3, [r7, #23]
            break;
 8014ae2:	e2e8      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	791b      	ldrb	r3, [r3, #4]
 8014ae8:	2b02      	cmp	r3, #2
 8014aea:	d005      	beq.n	8014af8 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	791a      	ldrb	r2, [r3, #4]
 8014af0:	4b6c      	ldr	r3, [pc, #432]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x308>)
 8014af2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014af6:	e2de      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014af8:	2303      	movs	r3, #3
 8014afa:	75fb      	strb	r3, [r7, #23]
            break;
 8014afc:	e2db      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fa fd1c 	bl	800f540 <SecureElementSetDevEui>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	f000 82b8 	beq.w	8015080 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b10:	2303      	movs	r3, #3
 8014b12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b14:	e2b4      	b.n	8015080 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fa fd40 	bl	800f5a0 <SecureElementSetJoinEui>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f000 82ae 	beq.w	8015084 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b28:	2303      	movs	r3, #3
 8014b2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b2c:	e2aa      	b.n	8015084 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	791a      	ldrb	r2, [r3, #4]
 8014b32:	4b5c      	ldr	r3, [pc, #368]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b34:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014b38:	e2bd      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	4a59      	ldr	r2, [pc, #356]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014b44:	e2b7      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014b46:	4b57      	ldr	r3, [pc, #348]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b48:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	4619      	mov	r1, r3
 8014b52:	4610      	mov	r0, r2
 8014b54:	f7fa fd54 	bl	800f600 <SecureElementSetDevAddr>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d002      	beq.n	8014b64 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b5e:	2303      	movs	r3, #3
 8014b60:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014b62:	e2a8      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	4a4e      	ldr	r2, [pc, #312]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b6a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014b6e:	e2a2      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d00b      	beq.n	8014b90 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	2000      	movs	r0, #0
 8014b80:	f001 fff4 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014b84:	4603      	mov	r3, r0
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	f000 827e 	beq.w	8015088 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014b8c:	2311      	movs	r3, #17
 8014b8e:	e293      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b90:	2303      	movs	r3, #3
 8014b92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b94:	e278      	b.n	8015088 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00b      	beq.n	8014bb6 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	2001      	movs	r0, #1
 8014ba6:	f001 ffe1 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 826d 	beq.w	801508c <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bb2:	2311      	movs	r3, #17
 8014bb4:	e280      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bb6:	2303      	movs	r3, #3
 8014bb8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bba:	e267      	b.n	801508c <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00b      	beq.n	8014bdc <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	4619      	mov	r1, r3
 8014bca:	2008      	movs	r0, #8
 8014bcc:	f001 ffce 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f000 825c 	beq.w	8015090 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bd8:	2311      	movs	r3, #17
 8014bda:	e26d      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014be0:	e256      	b.n	8015090 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00b      	beq.n	8014c02 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	2009      	movs	r0, #9
 8014bf2:	f001 ffbb 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f000 824b 	beq.w	8015094 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bfe:	2311      	movs	r3, #17
 8014c00:	e25a      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c02:	2303      	movs	r3, #3
 8014c04:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c06:	e245      	b.n	8015094 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00b      	beq.n	8014c28 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	4619      	mov	r1, r3
 8014c16:	200c      	movs	r0, #12
 8014c18:	f001 ffa8 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f000 823a 	beq.w	8015098 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c24:	2311      	movs	r3, #17
 8014c26:	e247      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c28:	2303      	movs	r3, #3
 8014c2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c2c:	e234      	b.n	8015098 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d00b      	beq.n	8014c4e <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	200d      	movs	r0, #13
 8014c3e:	f001 ff95 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f000 8229 	beq.w	801509c <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c4a:	2311      	movs	r3, #17
 8014c4c:	e234      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c52:	e223      	b.n	801509c <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d00b      	beq.n	8014c74 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	4619      	mov	r1, r3
 8014c62:	200e      	movs	r0, #14
 8014c64:	f001 ff82 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	f000 8218 	beq.w	80150a0 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c70:	2311      	movs	r3, #17
 8014c72:	e221      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c74:	2303      	movs	r3, #3
 8014c76:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c78:	e212      	b.n	80150a0 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d00b      	beq.n	8014c9a <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	4619      	mov	r1, r3
 8014c88:	200f      	movs	r0, #15
 8014c8a:	f001 ff6f 	bl	8016b6c <LoRaMacCryptoSetKey>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 8207 	beq.w	80150a4 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c96:	2311      	movs	r3, #17
 8014c98:	e20e      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c9a:	2303      	movs	r3, #3
 8014c9c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c9e:	e201      	b.n	80150a4 <LoRaMacMibSetRequestConfirm+0x708>
 8014ca0:	20000980 	.word	0x20000980
 8014ca4:	20000e88 	.word	0x20000e88
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	791a      	ldrb	r2, [r3, #4]
 8014cac:	4bb2      	ldr	r3, [pc, #712]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014cae:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014cb2:	4bb2      	ldr	r3, [pc, #712]	; (8014f7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cb6:	4ab0      	ldr	r2, [pc, #704]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014cb8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014cbc:	4610      	mov	r0, r2
 8014cbe:	4798      	blx	r3
            Radio.Sleep( );
 8014cc0:	4bae      	ldr	r3, [pc, #696]	; (8014f7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc4:	4798      	blx	r3
            break;
 8014cc6:	e1f6      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	791a      	ldrb	r2, [r3, #4]
 8014ccc:	4baa      	ldr	r3, [pc, #680]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014cce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014cd2:	e1f0      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	7a1b      	ldrb	r3, [r3, #8]
 8014cd8:	b25b      	sxtb	r3, r3
 8014cda:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014cdc:	4ba6      	ldr	r3, [pc, #664]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014cde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014ce2:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014ce4:	4ba4      	ldr	r3, [pc, #656]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014cea:	f107 0108 	add.w	r1, r7, #8
 8014cee:	2207      	movs	r2, #7
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f002 fd71 	bl	80177d8 <RegionVerify>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	f083 0301 	eor.w	r3, r3, #1
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d002      	beq.n	8014d08 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d02:	2303      	movs	r3, #3
 8014d04:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d06:	e1d6      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d0e:	4b9a      	ldr	r3, [pc, #616]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d14:	f107 0108 	add.w	r1, r7, #8
 8014d18:	2200      	movs	r2, #0
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f002 fd5c 	bl	80177d8 <RegionVerify>
 8014d20:	4603      	mov	r3, r0
 8014d22:	f083 0301 	eor.w	r3, r3, #1
 8014d26:	b2db      	uxtb	r3, r3
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d2c:	2303      	movs	r3, #3
 8014d2e:	75fb      	strb	r3, [r7, #23]
            break;
 8014d30:	e1c1      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014d32:	4b91      	ldr	r3, [pc, #580]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	336c      	adds	r3, #108	; 0x6c
 8014d38:	3204      	adds	r2, #4
 8014d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d3e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014d42:	e1b8      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	7a1b      	ldrb	r3, [r3, #8]
 8014d48:	b25b      	sxtb	r3, r3
 8014d4a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d4c:	4b8a      	ldr	r3, [pc, #552]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d4e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d52:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014d54:	4b88      	ldr	r3, [pc, #544]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d5a:	f107 0108 	add.w	r1, r7, #8
 8014d5e:	2207      	movs	r2, #7
 8014d60:	4618      	mov	r0, r3
 8014d62:	f002 fd39 	bl	80177d8 <RegionVerify>
 8014d66:	4603      	mov	r3, r0
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d008      	beq.n	8014d7e <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014d6c:	4b82      	ldr	r3, [pc, #520]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	33b4      	adds	r3, #180	; 0xb4
 8014d72:	3204      	adds	r2, #4
 8014d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d78:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014d7c:	e19b      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d7e:	2303      	movs	r3, #3
 8014d80:	75fb      	strb	r3, [r7, #23]
            break;
 8014d82:	e198      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	7a1b      	ldrb	r3, [r3, #8]
 8014d88:	b25b      	sxtb	r3, r3
 8014d8a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d8c:	4b7a      	ldr	r3, [pc, #488]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d8e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d92:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014d94:	4b78      	ldr	r3, [pc, #480]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d9a:	f107 0108 	add.w	r1, r7, #8
 8014d9e:	2207      	movs	r2, #7
 8014da0:	4618      	mov	r0, r3
 8014da2:	f002 fd19 	bl	80177d8 <RegionVerify>
 8014da6:	4603      	mov	r3, r0
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d019      	beq.n	8014de0 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014dac:	4b72      	ldr	r3, [pc, #456]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	3374      	adds	r3, #116	; 0x74
 8014db2:	3204      	adds	r2, #4
 8014db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014db8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014dbc:	4b6e      	ldr	r3, [pc, #440]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dbe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014dc2:	2b02      	cmp	r3, #2
 8014dc4:	f040 8170 	bne.w	80150a8 <LoRaMacMibSetRequestConfirm+0x70c>
 8014dc8:	4b6b      	ldr	r3, [pc, #428]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dca:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f000 816a 	beq.w	80150a8 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014dd4:	4b69      	ldr	r3, [pc, #420]	; (8014f7c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dd8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014dda:	f7fe fc91 	bl	8013700 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014dde:	e163      	b.n	80150a8 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014de0:	2303      	movs	r3, #3
 8014de2:	75fb      	strb	r3, [r7, #23]
            break;
 8014de4:	e160      	b.n	80150a8 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	7a1b      	ldrb	r3, [r3, #8]
 8014dea:	b25b      	sxtb	r3, r3
 8014dec:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014dee:	4b62      	ldr	r3, [pc, #392]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014df0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014df4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014df6:	4b60      	ldr	r3, [pc, #384]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014df8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dfc:	f107 0108 	add.w	r1, r7, #8
 8014e00:	2207      	movs	r2, #7
 8014e02:	4618      	mov	r0, r3
 8014e04:	f002 fce8 	bl	80177d8 <RegionVerify>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d008      	beq.n	8014e20 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e0e:	4b5a      	ldr	r3, [pc, #360]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	33bc      	adds	r3, #188	; 0xbc
 8014e14:	3204      	adds	r2, #4
 8014e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e1a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e1e:	e14a      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e20:	2303      	movs	r3, #3
 8014e22:	75fb      	strb	r3, [r7, #23]
            break;
 8014e24:	e147      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e30:	4b51      	ldr	r3, [pc, #324]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e36:	f107 020c 	add.w	r2, r7, #12
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f002 fcf4 	bl	801782a <RegionChanMaskSet>
 8014e42:	4603      	mov	r3, r0
 8014e44:	f083 0301 	eor.w	r3, r3, #1
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	f000 812e 	beq.w	80150ac <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e50:	2303      	movs	r3, #3
 8014e52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e54:	e12a      	b.n	80150ac <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e60:	4b45      	ldr	r3, [pc, #276]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e66:	f107 020c 	add.w	r2, r7, #12
 8014e6a:	4611      	mov	r1, r2
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f002 fcdc 	bl	801782a <RegionChanMaskSet>
 8014e72:	4603      	mov	r3, r0
 8014e74:	f083 0301 	eor.w	r3, r3, #1
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f000 8118 	beq.w	80150b0 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e80:	2303      	movs	r3, #3
 8014e82:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e84:	e114      	b.n	80150b0 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	791b      	ldrb	r3, [r3, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d009      	beq.n	8014ea2 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014e92:	2b0f      	cmp	r3, #15
 8014e94:	d805      	bhi.n	8014ea2 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	791a      	ldrb	r2, [r3, #4]
 8014e9a:	4b37      	ldr	r3, [pc, #220]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ea0:	e109      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ea2:	2303      	movs	r3, #3
 8014ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8014ea6:	e106      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	4a32      	ldr	r2, [pc, #200]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014eae:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014eb0:	e101      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	4a30      	ldr	r2, [pc, #192]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014eb8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014eba:	e0fc      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	4a2d      	ldr	r2, [pc, #180]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ec2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014ec4:	e0f7      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	4a2b      	ldr	r2, [pc, #172]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ecc:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014ece:	e0f2      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	4a28      	ldr	r2, [pc, #160]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ed6:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014ed8:	e0ed      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ee0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014ee2:	4b25      	ldr	r3, [pc, #148]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ee4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ee8:	f107 0108 	add.w	r1, r7, #8
 8014eec:	2206      	movs	r2, #6
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f002 fc72 	bl	80177d8 <RegionVerify>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d005      	beq.n	8014f06 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014efa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014efe:	4b1e      	ldr	r3, [pc, #120]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f00:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f04:	e0d7      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f06:	2303      	movs	r3, #3
 8014f08:	75fb      	strb	r3, [r7, #23]
            break;
 8014f0a:	e0d4      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f12:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f14:	4b18      	ldr	r3, [pc, #96]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f1a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014f1c:	4b16      	ldr	r3, [pc, #88]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f22:	f107 0108 	add.w	r1, r7, #8
 8014f26:	2205      	movs	r2, #5
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f002 fc55 	bl	80177d8 <RegionVerify>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d005      	beq.n	8014f40 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014f34:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f38:	4b0f      	ldr	r3, [pc, #60]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f3e:	e0ba      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f40:	2303      	movs	r3, #3
 8014f42:	75fb      	strb	r3, [r7, #23]
            break;
 8014f44:	e0b7      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f4c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014f4e:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f54:	f107 0108 	add.w	r1, r7, #8
 8014f58:	220a      	movs	r2, #10
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f002 fc3c 	bl	80177d8 <RegionVerify>
 8014f60:	4603      	mov	r3, r0
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d005      	beq.n	8014f72 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014f66:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f6a:	4b03      	ldr	r3, [pc, #12]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f6c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f70:	e0a1      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f72:	2303      	movs	r3, #3
 8014f74:	75fb      	strb	r3, [r7, #23]
            break;
 8014f76:	e09e      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
 8014f78:	20000e88 	.word	0x20000e88
 8014f7c:	0801f98c 	.word	0x0801f98c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f86:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014f88:	4b4d      	ldr	r3, [pc, #308]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014f8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f8e:	f107 0108 	add.w	r1, r7, #8
 8014f92:	2209      	movs	r2, #9
 8014f94:	4618      	mov	r0, r3
 8014f96:	f002 fc1f 	bl	80177d8 <RegionVerify>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d005      	beq.n	8014fac <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014fa0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fa4:	4b46      	ldr	r3, [pc, #280]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014faa:	e084      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fac:	2303      	movs	r3, #3
 8014fae:	75fb      	strb	r3, [r7, #23]
            break;
 8014fb0:	e081      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	4a42      	ldr	r2, [pc, #264]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014fbc:	4b40      	ldr	r3, [pc, #256]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014fc2:	4a3f      	ldr	r2, [pc, #252]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014fc6:	e076      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	791a      	ldrb	r2, [r3, #4]
 8014fcc:	4b3c      	ldr	r3, [pc, #240]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8014fd2:	4b3b      	ldr	r3, [pc, #236]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fd4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014fd8:	4b39      	ldr	r3, [pc, #228]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8014fde:	e06a      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	4a36      	ldr	r2, [pc, #216]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014fe6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8014fea:	e064      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	4a33      	ldr	r2, [pc, #204]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014ff2:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8014ff6:	e05e      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014ff8:	f7fe fde0 	bl	8013bbc <RestoreNvmData>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8015000:	e059      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	799b      	ldrb	r3, [r3, #6]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d80d      	bhi.n	8015026 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801500a:	4a2d      	ldr	r2, [pc, #180]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6858      	ldr	r0, [r3, #4]
 8015018:	f001 fce0 	bl	80169dc <LoRaMacCryptoSetLrWanVersion>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d048      	beq.n	80150b4 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015022:	2311      	movs	r3, #17
 8015024:	e048      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015026:	2303      	movs	r3, #3
 8015028:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801502a:	e043      	b.n	80150b4 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	685b      	ldr	r3, [r3, #4]
 8015030:	4a23      	ldr	r2, [pc, #140]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8015032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8015036:	e03e      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	889a      	ldrh	r2, [r3, #4]
 801503c:	4b20      	ldr	r3, [pc, #128]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 801503e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8015042:	e038      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	889a      	ldrh	r2, [r3, #4]
 8015048:	4b1d      	ldr	r3, [pc, #116]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 801504a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 801504e:	e032      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	889a      	ldrh	r2, [r3, #4]
 8015054:	4b1a      	ldr	r3, [pc, #104]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8015056:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 801505a:	e02c      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	889a      	ldrh	r2, [r3, #4]
 8015060:	4b17      	ldr	r3, [pc, #92]	; (80150c0 <LoRaMacMibSetRequestConfirm+0x724>)
 8015062:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8015066:	e026      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015068:	2318      	movs	r3, #24
 801506a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801506c:	e023      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801506e:	2318      	movs	r3, #24
 8015070:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8015072:	e020      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f000 fc27 	bl	80158c8 <LoRaMacMibClassBSetRequestConfirm>
 801507a:	4603      	mov	r3, r0
 801507c:	75fb      	strb	r3, [r7, #23]
            break;
 801507e:	e01a      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015080:	bf00      	nop
 8015082:	e018      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015084:	bf00      	nop
 8015086:	e016      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015088:	bf00      	nop
 801508a:	e014      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801508c:	bf00      	nop
 801508e:	e012      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015090:	bf00      	nop
 8015092:	e010      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015094:	bf00      	nop
 8015096:	e00e      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015098:	bf00      	nop
 801509a:	e00c      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801509c:	bf00      	nop
 801509e:	e00a      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150a0:	bf00      	nop
 80150a2:	e008      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150a4:	bf00      	nop
 80150a6:	e006      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150a8:	bf00      	nop
 80150aa:	e004      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150ac:	bf00      	nop
 80150ae:	e002      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150b0:	bf00      	nop
 80150b2:	e000      	b.n	80150b6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150b4:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 80150b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3718      	adds	r7, #24
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	20000e88 	.word	0x20000e88

080150c4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b086      	sub	sp, #24
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80150cc:	2302      	movs	r3, #2
 80150ce:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80150d0:	2300      	movs	r3, #0
 80150d2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d101      	bne.n	80150de <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80150da:	2303      	movs	r3, #3
 80150dc:	e13a      	b.n	8015354 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80150de:	f7fc fca5 	bl	8011a2c <LoRaMacIsBusy>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d001      	beq.n	80150ec <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80150e8:	2301      	movs	r3, #1
 80150ea:	e133      	b.n	8015354 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80150ec:	f001 f90c 	bl	8016308 <LoRaMacConfirmQueueIsFull>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d001      	beq.n	80150fa <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80150f6:	2301      	movs	r3, #1
 80150f8:	e12c      	b.n	8015354 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80150fa:	f001 f8f9 	bl	80162f0 <LoRaMacConfirmQueueGetCnt>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d104      	bne.n	801510e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015104:	2214      	movs	r2, #20
 8015106:	2100      	movs	r1, #0
 8015108:	4894      	ldr	r0, [pc, #592]	; (801535c <LoRaMacMlmeRequest+0x298>)
 801510a:	f004 fe7f 	bl	8019e0c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801510e:	4b94      	ldr	r3, [pc, #592]	; (8015360 <LoRaMacMlmeRequest+0x29c>)
 8015110:	2201      	movs	r2, #1
 8015112:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8015116:	4a92      	ldr	r2, [pc, #584]	; (8015360 <LoRaMacMlmeRequest+0x29c>)
 8015118:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801511c:	f043 0304 	orr.w	r3, r3, #4
 8015120:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801512a:	2301      	movs	r3, #1
 801512c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801512e:	2300      	movs	r3, #0
 8015130:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	3b01      	subs	r3, #1
 8015138:	2b0d      	cmp	r3, #13
 801513a:	f200 80e1 	bhi.w	8015300 <LoRaMacMlmeRequest+0x23c>
 801513e:	a201      	add	r2, pc, #4	; (adr r2, 8015144 <LoRaMacMlmeRequest+0x80>)
 8015140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015144:	0801517d 	.word	0x0801517d
 8015148:	08015301 	.word	0x08015301
 801514c:	08015301 	.word	0x08015301
 8015150:	08015301 	.word	0x08015301
 8015154:	080151f5 	.word	0x080151f5
 8015158:	08015213 	.word	0x08015213
 801515c:	08015223 	.word	0x08015223
 8015160:	08015301 	.word	0x08015301
 8015164:	08015301 	.word	0x08015301
 8015168:	0801523f 	.word	0x0801523f
 801516c:	08015301 	.word	0x08015301
 8015170:	080152d5 	.word	0x080152d5
 8015174:	08015275 	.word	0x08015275
 8015178:	080152b7 	.word	0x080152b7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801517c:	4b78      	ldr	r3, [pc, #480]	; (8015360 <LoRaMacMlmeRequest+0x29c>)
 801517e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015182:	f003 0320 	and.w	r3, r3, #32
 8015186:	2b00      	cmp	r3, #0
 8015188:	d001      	beq.n	801518e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 801518a:	2301      	movs	r3, #1
 801518c:	e0e2      	b.n	8015354 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801518e:	2000      	movs	r0, #0
 8015190:	f7fe f95c 	bl	801344c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015194:	4b73      	ldr	r3, [pc, #460]	; (8015364 <LoRaMacMlmeRequest+0x2a0>)
 8015196:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	795b      	ldrb	r3, [r3, #5]
 801519e:	b25b      	sxtb	r3, r3
 80151a0:	2200      	movs	r2, #0
 80151a2:	4619      	mov	r1, r3
 80151a4:	f002 fc00 	bl	80179a8 <RegionAlternateDr>
 80151a8:	4603      	mov	r3, r0
 80151aa:	461a      	mov	r2, r3
 80151ac:	4b6d      	ldr	r3, [pc, #436]	; (8015364 <LoRaMacMlmeRequest+0x2a0>)
 80151ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80151b8:	4b6a      	ldr	r3, [pc, #424]	; (8015364 <LoRaMacMlmeRequest+0x2a0>)
 80151ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80151be:	2307      	movs	r3, #7
 80151c0:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80151c2:	20ff      	movs	r0, #255	; 0xff
 80151c4:	f7fd fec0 	bl	8012f48 <SendReJoinReq>
 80151c8:	4603      	mov	r3, r0
 80151ca:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80151cc:	7dfb      	ldrb	r3, [r7, #23]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f000 8098 	beq.w	8015304 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80151d4:	4b63      	ldr	r3, [pc, #396]	; (8015364 <LoRaMacMlmeRequest+0x2a0>)
 80151d6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	795b      	ldrb	r3, [r3, #5]
 80151de:	b25b      	sxtb	r3, r3
 80151e0:	2201      	movs	r2, #1
 80151e2:	4619      	mov	r1, r3
 80151e4:	f002 fbe0 	bl	80179a8 <RegionAlternateDr>
 80151e8:	4603      	mov	r3, r0
 80151ea:	461a      	mov	r2, r3
 80151ec:	4b5d      	ldr	r3, [pc, #372]	; (8015364 <LoRaMacMlmeRequest+0x2a0>)
 80151ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80151f2:	e087      	b.n	8015304 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80151f4:	2300      	movs	r3, #0
 80151f6:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80151f8:	f107 030c 	add.w	r3, r7, #12
 80151fc:	2200      	movs	r2, #0
 80151fe:	4619      	mov	r1, r3
 8015200:	2002      	movs	r0, #2
 8015202:	f000 fcd1 	bl	8015ba8 <LoRaMacCommandsAddCmd>
 8015206:	4603      	mov	r3, r0
 8015208:	2b00      	cmp	r3, #0
 801520a:	d07d      	beq.n	8015308 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801520c:	2313      	movs	r3, #19
 801520e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015210:	e07a      	b.n	8015308 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	889b      	ldrh	r3, [r3, #4]
 8015216:	4618      	mov	r0, r3
 8015218:	f7fe fc7a 	bl	8013b10 <SetTxContinuousWave>
 801521c:	4603      	mov	r3, r0
 801521e:	75fb      	strb	r3, [r7, #23]
            break;
 8015220:	e079      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	8898      	ldrh	r0, [r3, #4]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6899      	ldr	r1, [r3, #8]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015230:	b2db      	uxtb	r3, r3
 8015232:	461a      	mov	r2, r3
 8015234:	f7fe fca2 	bl	8013b7c <SetTxContinuousWave1>
 8015238:	4603      	mov	r3, r0
 801523a:	75fb      	strb	r3, [r7, #23]
            break;
 801523c:	e06b      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801523e:	2300      	movs	r3, #0
 8015240:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8015242:	f107 0308 	add.w	r3, r7, #8
 8015246:	4619      	mov	r1, r3
 8015248:	200d      	movs	r0, #13
 801524a:	f000 fd2d 	bl	8015ca8 <LoRaMacCommandsGetCmd>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d102      	bne.n	801525a <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8015254:	2300      	movs	r3, #0
 8015256:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8015258:	e058      	b.n	801530c <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801525a:	f107 030c 	add.w	r3, r7, #12
 801525e:	2200      	movs	r2, #0
 8015260:	4619      	mov	r1, r3
 8015262:	200d      	movs	r0, #13
 8015264:	f000 fca0 	bl	8015ba8 <LoRaMacCommandsAddCmd>
 8015268:	4603      	mov	r3, r0
 801526a:	2b00      	cmp	r3, #0
 801526c:	d04e      	beq.n	801530c <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801526e:	2313      	movs	r3, #19
 8015270:	75fb      	strb	r3, [r7, #23]
            break;
 8015272:	e04b      	b.n	801530c <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015274:	4b3b      	ldr	r3, [pc, #236]	; (8015364 <LoRaMacMlmeRequest+0x2a0>)
 8015276:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801527a:	2b00      	cmp	r3, #0
 801527c:	d148      	bne.n	8015310 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	791b      	ldrb	r3, [r3, #4]
 8015282:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	791b      	ldrb	r3, [r3, #4]
 8015288:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801528c:	b2db      	uxtb	r3, r3
 801528e:	4618      	mov	r0, r3
 8015290:	f000 faef 	bl	8015872 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015294:	7dbb      	ldrb	r3, [r7, #22]
 8015296:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015298:	2300      	movs	r3, #0
 801529a:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801529c:	f107 030c 	add.w	r3, r7, #12
 80152a0:	2201      	movs	r2, #1
 80152a2:	4619      	mov	r1, r3
 80152a4:	2010      	movs	r0, #16
 80152a6:	f000 fc7f 	bl	8015ba8 <LoRaMacCommandsAddCmd>
 80152aa:	4603      	mov	r3, r0
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d02f      	beq.n	8015310 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152b0:	2313      	movs	r3, #19
 80152b2:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80152b4:	e02c      	b.n	8015310 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152ba:	f107 030c 	add.w	r3, r7, #12
 80152be:	2200      	movs	r2, #0
 80152c0:	4619      	mov	r1, r3
 80152c2:	2012      	movs	r0, #18
 80152c4:	f000 fc70 	bl	8015ba8 <LoRaMacCommandsAddCmd>
 80152c8:	4603      	mov	r3, r0
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d022      	beq.n	8015314 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152ce:	2313      	movs	r3, #19
 80152d0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80152d2:	e01f      	b.n	8015314 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80152d4:	2301      	movs	r3, #1
 80152d6:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80152d8:	f000 fa81 	bl	80157de <LoRaMacClassBIsAcquisitionInProgress>
 80152dc:	4603      	mov	r3, r0
 80152de:	f083 0301 	eor.w	r3, r3, #1
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d008      	beq.n	80152fa <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80152e8:	2000      	movs	r0, #0
 80152ea:	f000 fa5a 	bl	80157a2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80152ee:	2000      	movs	r0, #0
 80152f0:	f000 fa7c 	bl	80157ec <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80152f4:	2300      	movs	r3, #0
 80152f6:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80152f8:	e00d      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 80152fa:	2301      	movs	r3, #1
 80152fc:	75fb      	strb	r3, [r7, #23]
            break;
 80152fe:	e00a      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8015300:	bf00      	nop
 8015302:	e008      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
            break;
 8015304:	bf00      	nop
 8015306:	e006      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
            break;
 8015308:	bf00      	nop
 801530a:	e004      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
            break;
 801530c:	bf00      	nop
 801530e:	e002      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
            break;
 8015310:	bf00      	nop
 8015312:	e000      	b.n	8015316 <LoRaMacMlmeRequest+0x252>
            break;
 8015314:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015316:	4b12      	ldr	r3, [pc, #72]	; (8015360 <LoRaMacMlmeRequest+0x29c>)
 8015318:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015320:	7dfb      	ldrb	r3, [r7, #23]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d010      	beq.n	8015348 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015326:	f000 ffe3 	bl	80162f0 <LoRaMacConfirmQueueGetCnt>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d110      	bne.n	8015352 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8015330:	4b0b      	ldr	r3, [pc, #44]	; (8015360 <LoRaMacMlmeRequest+0x29c>)
 8015332:	2200      	movs	r2, #0
 8015334:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015338:	4a09      	ldr	r2, [pc, #36]	; (8015360 <LoRaMacMlmeRequest+0x29c>)
 801533a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801533e:	f36f 0382 	bfc	r3, #2, #1
 8015342:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015346:	e004      	b.n	8015352 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015348:	f107 0310 	add.w	r3, r7, #16
 801534c:	4618      	mov	r0, r3
 801534e:	f000 fe7b 	bl	8016048 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8015352:	7dfb      	ldrb	r3, [r7, #23]
}
 8015354:	4618      	mov	r0, r3
 8015356:	3718      	adds	r7, #24
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20000dc8 	.word	0x20000dc8
 8015360:	20000980 	.word	0x20000980
 8015364:	20000e88 	.word	0x20000e88

08015368 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b08c      	sub	sp, #48	; 0x30
 801536c:	af02      	add	r7, sp, #8
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	460b      	mov	r3, r1
 8015372:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015374:	2302      	movs	r3, #2
 8015376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801537a:	2300      	movs	r3, #0
 801537c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 8015380:	2300      	movs	r3, #0
 8015382:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015384:	2300      	movs	r3, #0
 8015386:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015388:	2300      	movs	r3, #0
 801538a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d101      	bne.n	8015396 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015392:	2303      	movs	r3, #3
 8015394:	e0d4      	b.n	8015540 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015396:	f7fc fb49 	bl	8011a2c <LoRaMacIsBusy>
 801539a:	4603      	mov	r3, r0
 801539c:	2b00      	cmp	r3, #0
 801539e:	d001      	beq.n	80153a4 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80153a0:	2301      	movs	r3, #1
 80153a2:	e0cd      	b.n	8015540 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80153a4:	2300      	movs	r3, #0
 80153a6:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80153a8:	2214      	movs	r2, #20
 80153aa:	2100      	movs	r1, #0
 80153ac:	4866      	ldr	r0, [pc, #408]	; (8015548 <LoRaMacMcpsRequest+0x1e0>)
 80153ae:	f004 fd2d 	bl	8019e0c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80153b2:	4b66      	ldr	r3, [pc, #408]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 80153b4:	2201      	movs	r2, #1
 80153b6:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80153ba:	4b64      	ldr	r3, [pc, #400]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 80153bc:	2201      	movs	r2, #1
 80153be:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	d03d      	beq.n	8015446 <LoRaMacMcpsRequest+0xde>
 80153ca:	2b03      	cmp	r3, #3
 80153cc:	dc4f      	bgt.n	801546e <LoRaMacMcpsRequest+0x106>
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d002      	beq.n	80153d8 <LoRaMacMcpsRequest+0x70>
 80153d2:	2b01      	cmp	r3, #1
 80153d4:	d019      	beq.n	801540a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80153d6:	e04a      	b.n	801546e <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80153d8:	2301      	movs	r3, #1
 80153da:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80153dc:	4b5b      	ldr	r3, [pc, #364]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 80153de:	2201      	movs	r2, #1
 80153e0:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80153e4:	7b3b      	ldrb	r3, [r7, #12]
 80153e6:	2202      	movs	r2, #2
 80153e8:	f362 1347 	bfi	r3, r2, #5, #3
 80153ec:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	791b      	ldrb	r3, [r3, #4]
 80153f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	689b      	ldr	r3, [r3, #8]
 80153fa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	899b      	ldrh	r3, [r3, #12]
 8015400:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	7b9b      	ldrb	r3, [r3, #14]
 8015406:	777b      	strb	r3, [r7, #29]
            break;
 8015408:	e032      	b.n	8015470 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801540a:	2301      	movs	r3, #1
 801540c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	7bdb      	ldrb	r3, [r3, #15]
 8015412:	2b08      	cmp	r3, #8
 8015414:	bf28      	it	cs
 8015416:	2308      	movcs	r3, #8
 8015418:	b2da      	uxtb	r2, r3
 801541a:	4b4c      	ldr	r3, [pc, #304]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 801541c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015420:	7b3b      	ldrb	r3, [r7, #12]
 8015422:	2204      	movs	r2, #4
 8015424:	f362 1347 	bfi	r3, r2, #5, #3
 8015428:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	791b      	ldrb	r3, [r3, #4]
 801542e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	689b      	ldr	r3, [r3, #8]
 8015436:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	899b      	ldrh	r3, [r3, #12]
 801543c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	7b9b      	ldrb	r3, [r3, #14]
 8015442:	777b      	strb	r3, [r7, #29]
            break;
 8015444:	e014      	b.n	8015470 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015446:	2301      	movs	r3, #1
 8015448:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801544a:	4b40      	ldr	r3, [pc, #256]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 801544c:	2201      	movs	r2, #1
 801544e:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015452:	7b3b      	ldrb	r3, [r7, #12]
 8015454:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015458:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	891b      	ldrh	r3, [r3, #8]
 8015464:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	7a9b      	ldrb	r3, [r3, #10]
 801546a:	777b      	strb	r3, [r7, #29]
            break;
 801546c:	e000      	b.n	8015470 <LoRaMacMcpsRequest+0x108>
            break;
 801546e:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015470:	2302      	movs	r3, #2
 8015472:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015474:	4b36      	ldr	r3, [pc, #216]	; (8015550 <LoRaMacMcpsRequest+0x1e8>)
 8015476:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801547a:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801547c:	4b34      	ldr	r3, [pc, #208]	; (8015550 <LoRaMacMcpsRequest+0x1e8>)
 801547e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015482:	f107 0214 	add.w	r2, r7, #20
 8015486:	4611      	mov	r1, r2
 8015488:	4618      	mov	r0, r3
 801548a:	f002 f96a 	bl	8017762 <RegionGetPhyParam>
 801548e:	4603      	mov	r3, r0
 8015490:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	b25b      	sxtb	r3, r3
 8015496:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801549a:	4293      	cmp	r3, r2
 801549c:	bfb8      	it	lt
 801549e:	4613      	movlt	r3, r2
 80154a0:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80154a2:	7f3b      	ldrb	r3, [r7, #28]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d044      	beq.n	8015532 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80154a8:	4b29      	ldr	r3, [pc, #164]	; (8015550 <LoRaMacMcpsRequest+0x1e8>)
 80154aa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80154ae:	f083 0301 	eor.w	r3, r3, #1
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d019      	beq.n	80154ec <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80154b8:	7f7b      	ldrb	r3, [r7, #29]
 80154ba:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80154bc:	4b24      	ldr	r3, [pc, #144]	; (8015550 <LoRaMacMcpsRequest+0x1e8>)
 80154be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80154c2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80154c4:	4b22      	ldr	r3, [pc, #136]	; (8015550 <LoRaMacMcpsRequest+0x1e8>)
 80154c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154ca:	f107 0108 	add.w	r1, r7, #8
 80154ce:	2205      	movs	r2, #5
 80154d0:	4618      	mov	r0, r3
 80154d2:	f002 f981 	bl	80177d8 <RegionVerify>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d005      	beq.n	80154e8 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80154dc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80154e0:	4b1b      	ldr	r3, [pc, #108]	; (8015550 <LoRaMacMcpsRequest+0x1e8>)
 80154e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80154e6:	e001      	b.n	80154ec <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80154e8:	2303      	movs	r3, #3
 80154ea:	e029      	b.n	8015540 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80154ec:	8bfa      	ldrh	r2, [r7, #30]
 80154ee:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80154f2:	f107 000c 	add.w	r0, r7, #12
 80154f6:	78fb      	ldrb	r3, [r7, #3]
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	4613      	mov	r3, r2
 80154fc:	6a3a      	ldr	r2, [r7, #32]
 80154fe:	f7fd fc45 	bl	8012d8c <Send>
 8015502:	4603      	mov	r3, r0
 8015504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801550c:	2b00      	cmp	r3, #0
 801550e:	d10c      	bne.n	801552a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	781a      	ldrb	r2, [r3, #0]
 8015514:	4b0d      	ldr	r3, [pc, #52]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 8015516:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801551a:	4a0c      	ldr	r2, [pc, #48]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 801551c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015520:	f043 0301 	orr.w	r3, r3, #1
 8015524:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015528:	e003      	b.n	8015532 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801552a:	4b08      	ldr	r3, [pc, #32]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 801552c:	2200      	movs	r2, #0
 801552e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015532:	4b06      	ldr	r3, [pc, #24]	; (801554c <LoRaMacMcpsRequest+0x1e4>)
 8015534:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	611a      	str	r2, [r3, #16]

    return status;
 801553c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015540:	4618      	mov	r0, r3
 8015542:	3728      	adds	r7, #40	; 0x28
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}
 8015548:	20000db4 	.word	0x20000db4
 801554c:	20000980 	.word	0x20000980
 8015550:	20000e88 	.word	0x20000e88

08015554 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801555e:	79fb      	ldrb	r3, [r7, #7]
 8015560:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015562:	4b0d      	ldr	r3, [pc, #52]	; (8015598 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015564:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015568:	f107 010c 	add.w	r1, r7, #12
 801556c:	220f      	movs	r2, #15
 801556e:	4618      	mov	r0, r3
 8015570:	f002 f932 	bl	80177d8 <RegionVerify>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00a      	beq.n	8015590 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801557a:	4a07      	ldr	r2, [pc, #28]	; (8015598 <LoRaMacTestSetDutyCycleOn+0x44>)
 801557c:	79fb      	ldrb	r3, [r7, #7]
 801557e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015582:	4a06      	ldr	r2, [pc, #24]	; (801559c <LoRaMacTestSetDutyCycleOn+0x48>)
 8015584:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015588:	f043 0320 	orr.w	r3, r3, #32
 801558c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8015590:	bf00      	nop
 8015592:	3710      	adds	r7, #16
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	20000e88 	.word	0x20000e88
 801559c:	20000980 	.word	0x20000980

080155a0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80155a4:	f7fe ff6c 	bl	8014480 <LoRaMacStop>
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d115      	bne.n	80155da <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80155ae:	480c      	ldr	r0, [pc, #48]	; (80155e0 <LoRaMacDeInitialization+0x40>)
 80155b0:	f008 fd8c 	bl	801e0cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80155b4:	480b      	ldr	r0, [pc, #44]	; (80155e4 <LoRaMacDeInitialization+0x44>)
 80155b6:	f008 fd89 	bl	801e0cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80155ba:	480b      	ldr	r0, [pc, #44]	; (80155e8 <LoRaMacDeInitialization+0x48>)
 80155bc:	f008 fd86 	bl	801e0cc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 80155c0:	480a      	ldr	r0, [pc, #40]	; (80155ec <LoRaMacDeInitialization+0x4c>)
 80155c2:	f008 fd83 	bl	801e0cc <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80155c6:	f000 f95e 	bl	8015886 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80155ca:	2000      	movs	r0, #0
 80155cc:	f7fd ff3e 	bl	801344c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80155d0:	4b07      	ldr	r3, [pc, #28]	; (80155f0 <LoRaMacDeInitialization+0x50>)
 80155d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155d4:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80155d6:	2300      	movs	r3, #0
 80155d8:	e000      	b.n	80155dc <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80155da:	2301      	movs	r3, #1
    }
}
 80155dc:	4618      	mov	r0, r3
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	20000ce8 	.word	0x20000ce8
 80155e4:	20000d00 	.word	0x20000d00
 80155e8:	20000d18 	.word	0x20000d18
 80155ec:	20000d74 	.word	0x20000d74
 80155f0:	0801f98c 	.word	0x0801f98c

080155f4 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b08c      	sub	sp, #48	; 0x30
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015602:	2300      	movs	r3, #0
 8015604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	7c1b      	ldrb	r3, [r3, #16]
 801560c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	7c5b      	ldrb	r3, [r3, #17]
 8015614:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	689a      	ldr	r2, [r3, #8]
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	795b      	ldrb	r3, [r3, #5]
 8015624:	2b00      	cmp	r3, #0
 8015626:	f000 808b 	beq.w	8015740 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801562a:	2302      	movs	r3, #2
 801562c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	7c9b      	ldrb	r3, [r3, #18]
 8015634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	7cdb      	ldrb	r3, [r3, #19]
 801563c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015640:	4611      	mov	r1, r2
 8015642:	4618      	mov	r0, r3
 8015644:	f002 f88d 	bl	8017762 <RegionGetPhyParam>
 8015648:	4603      	mov	r3, r0
 801564a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801564c:	6a3b      	ldr	r3, [r7, #32]
 801564e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8015652:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8015656:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801565a:	4293      	cmp	r3, r2
 801565c:	bfb8      	it	lt
 801565e:	4613      	movlt	r3, r2
 8015660:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015664:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015668:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801566c:	429a      	cmp	r2, r3
 801566e:	d106      	bne.n	801567e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	2200      	movs	r2, #0
 8015674:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8015676:	2300      	movs	r3, #0
 8015678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801567c:	e060      	b.n	8015740 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	689b      	ldr	r3, [r3, #8]
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	8992      	ldrh	r2, [r2, #12]
 8015686:	4293      	cmp	r3, r2
 8015688:	d303      	bcc.n	8015692 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801568a:	2301      	movs	r3, #1
 801568c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015690:	e002      	b.n	8015698 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8015692:	2300      	movs	r3, #0
 8015694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	689b      	ldr	r3, [r3, #8]
 801569c:	68fa      	ldr	r2, [r7, #12]
 801569e:	8992      	ldrh	r2, [r2, #12]
 80156a0:	4611      	mov	r1, r2
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	89d2      	ldrh	r2, [r2, #14]
 80156a6:	440a      	add	r2, r1
 80156a8:	4293      	cmp	r3, r2
 80156aa:	d349      	bcc.n	8015740 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80156ac:	2308      	movs	r3, #8
 80156ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	7cdb      	ldrb	r3, [r3, #19]
 80156b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156ba:	4611      	mov	r1, r2
 80156bc:	4618      	mov	r0, r3
 80156be:	f002 f850 	bl	8017762 <RegionGetPhyParam>
 80156c2:	4603      	mov	r3, r0
 80156c4:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80156c6:	6a3b      	ldr	r3, [r7, #32]
 80156c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	68fa      	ldr	r2, [r7, #12]
 80156d2:	89d2      	ldrh	r2, [r2, #14]
 80156d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80156d8:	fb01 f202 	mul.w	r2, r1, r2
 80156dc:	1a9b      	subs	r3, r3, r2
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d12e      	bne.n	8015740 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80156e2:	2322      	movs	r3, #34	; 0x22
 80156e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80156e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80156ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	7c9b      	ldrb	r3, [r3, #18]
 80156f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	7cdb      	ldrb	r3, [r3, #19]
 80156fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015700:	4611      	mov	r1, r2
 8015702:	4618      	mov	r0, r3
 8015704:	f002 f82d 	bl	8017762 <RegionGetPhyParam>
 8015708:	4603      	mov	r3, r0
 801570a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 801570c:	6a3b      	ldr	r3, [r7, #32]
 801570e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8015712:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015716:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801571a:	429a      	cmp	r2, r3
 801571c:	d110      	bne.n	8015740 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801571e:	2300      	movs	r3, #0
 8015720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	791b      	ldrb	r3, [r3, #4]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d009      	beq.n	8015740 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801572c:	2302      	movs	r3, #2
 801572e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	7cdb      	ldrb	r3, [r3, #19]
 8015734:	f107 0214 	add.w	r2, r7, #20
 8015738:	4611      	mov	r1, r2
 801573a:	4618      	mov	r0, r3
 801573c:	f002 f83a 	bl	80177b4 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015746:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801574e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015754:	4618      	mov	r0, r3
 8015756:	3730      	adds	r7, #48	; 0x30
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	60f8      	str	r0, [r7, #12]
 8015764:	60b9      	str	r1, [r7, #8]
 8015766:	607a      	str	r2, [r7, #4]
 8015768:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	789b      	ldrb	r3, [r3, #2]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d107      	bne.n	8015782 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	687a      	ldr	r2, [r7, #4]
 8015776:	68b9      	ldr	r1, [r7, #8]
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f7ff ff3b 	bl	80155f4 <CalcNextV10X>
 801577e:	4603      	mov	r3, r0
 8015780:	e000      	b.n	8015784 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3710      	adds	r7, #16
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801578c:	b480      	push	{r7}
 801578e:	b085      	sub	sp, #20
 8015790:	af00      	add	r7, sp, #0
 8015792:	60f8      	str	r0, [r7, #12]
 8015794:	60b9      	str	r1, [r7, #8]
 8015796:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015798:	bf00      	nop
 801579a:	3714      	adds	r7, #20
 801579c:	46bd      	mov	sp, r7
 801579e:	bc80      	pop	{r7}
 80157a0:	4770      	bx	lr

080157a2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80157a2:	b480      	push	{r7}
 80157a4:	b083      	sub	sp, #12
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	4603      	mov	r3, r0
 80157aa:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80157ac:	bf00      	nop
 80157ae:	370c      	adds	r7, #12
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bc80      	pop	{r7}
 80157b4:	4770      	bx	lr

080157b6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80157b6:	b480      	push	{r7}
 80157b8:	b083      	sub	sp, #12
 80157ba:	af00      	add	r7, sp, #0
 80157bc:	4603      	mov	r3, r0
 80157be:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80157c0:	bf00      	nop
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bc80      	pop	{r7}
 80157c8:	4770      	bx	lr

080157ca <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80157ca:	b480      	push	{r7}
 80157cc:	b083      	sub	sp, #12
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	4603      	mov	r3, r0
 80157d2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80157d4:	bf00      	nop
 80157d6:	370c      	adds	r7, #12
 80157d8:	46bd      	mov	sp, r7
 80157da:	bc80      	pop	{r7}
 80157dc:	4770      	bx	lr

080157de <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80157de:	b480      	push	{r7}
 80157e0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80157e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bc80      	pop	{r7}
 80157ea:	4770      	bx	lr

080157ec <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80157ec:	b480      	push	{r7}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80157f4:	bf00      	nop
 80157f6:	370c      	adds	r7, #12
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bc80      	pop	{r7}
 80157fc:	4770      	bx	lr

080157fe <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80157fe:	b480      	push	{r7}
 8015800:	b083      	sub	sp, #12
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015806:	bf00      	nop
 8015808:	370c      	adds	r7, #12
 801580a:	46bd      	mov	sp, r7
 801580c:	bc80      	pop	{r7}
 801580e:	4770      	bx	lr

08015810 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015810:	b480      	push	{r7}
 8015812:	b083      	sub	sp, #12
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015818:	bf00      	nop
 801581a:	370c      	adds	r7, #12
 801581c:	46bd      	mov	sp, r7
 801581e:	bc80      	pop	{r7}
 8015820:	4770      	bx	lr

08015822 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015822:	b480      	push	{r7}
 8015824:	b083      	sub	sp, #12
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	460b      	mov	r3, r1
 801582c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801582e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015830:	4618      	mov	r0, r3
 8015832:	370c      	adds	r7, #12
 8015834:	46bd      	mov	sp, r7
 8015836:	bc80      	pop	{r7}
 8015838:	4770      	bx	lr

0801583a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801583a:	b480      	push	{r7}
 801583c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801583e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015840:	4618      	mov	r0, r3
 8015842:	46bd      	mov	sp, r7
 8015844:	bc80      	pop	{r7}
 8015846:	4770      	bx	lr

08015848 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015848:	b480      	push	{r7}
 801584a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801584c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801584e:	4618      	mov	r0, r3
 8015850:	46bd      	mov	sp, r7
 8015852:	bc80      	pop	{r7}
 8015854:	4770      	bx	lr

08015856 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015856:	b480      	push	{r7}
 8015858:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801585a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801585c:	4618      	mov	r0, r3
 801585e:	46bd      	mov	sp, r7
 8015860:	bc80      	pop	{r7}
 8015862:	4770      	bx	lr

08015864 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015864:	b480      	push	{r7}
 8015866:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015868:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801586a:	4618      	mov	r0, r3
 801586c:	46bd      	mov	sp, r7
 801586e:	bc80      	pop	{r7}
 8015870:	4770      	bx	lr

08015872 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015872:	b480      	push	{r7}
 8015874:	b083      	sub	sp, #12
 8015876:	af00      	add	r7, sp, #0
 8015878:	4603      	mov	r3, r0
 801587a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801587c:	bf00      	nop
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	bc80      	pop	{r7}
 8015884:	4770      	bx	lr

08015886 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015886:	b480      	push	{r7}
 8015888:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801588a:	bf00      	nop
 801588c:	46bd      	mov	sp, r7
 801588e:	bc80      	pop	{r7}
 8015890:	4770      	bx	lr

08015892 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015892:	b480      	push	{r7}
 8015894:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015896:	bf00      	nop
 8015898:	46bd      	mov	sp, r7
 801589a:	bc80      	pop	{r7}
 801589c:	4770      	bx	lr

0801589e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801589e:	b480      	push	{r7}
 80158a0:	b083      	sub	sp, #12
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	4603      	mov	r3, r0
 80158a6:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80158a8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	370c      	adds	r7, #12
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bc80      	pop	{r7}
 80158b2:	4770      	bx	lr

080158b4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80158b4:	b480      	push	{r7}
 80158b6:	b083      	sub	sp, #12
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80158bc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158be:	4618      	mov	r0, r3
 80158c0:	370c      	adds	r7, #12
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bc80      	pop	{r7}
 80158c6:	4770      	bx	lr

080158c8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80158c8:	b480      	push	{r7}
 80158ca:	b083      	sub	sp, #12
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80158d0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bc80      	pop	{r7}
 80158da:	4770      	bx	lr

080158dc <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80158dc:	b480      	push	{r7}
 80158de:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158e0:	bf00      	nop
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bc80      	pop	{r7}
 80158e6:	4770      	bx	lr

080158e8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80158e8:	b480      	push	{r7}
 80158ea:	b083      	sub	sp, #12
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	4603      	mov	r3, r0
 80158f0:	6039      	str	r1, [r7, #0]
 80158f2:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80158f4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	370c      	adds	r7, #12
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bc80      	pop	{r7}
 80158fe:	4770      	bx	lr

08015900 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	4603      	mov	r3, r0
 8015908:	603a      	str	r2, [r7, #0]
 801590a:	80fb      	strh	r3, [r7, #6]
 801590c:	460b      	mov	r3, r1
 801590e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015910:	bf00      	nop
 8015912:	370c      	adds	r7, #12
 8015914:	46bd      	mov	sp, r7
 8015916:	bc80      	pop	{r7}
 8015918:	4770      	bx	lr

0801591a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801591a:	b480      	push	{r7}
 801591c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801591e:	bf00      	nop
 8015920:	46bd      	mov	sp, r7
 8015922:	bc80      	pop	{r7}
 8015924:	4770      	bx	lr

08015926 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015926:	b480      	push	{r7}
 8015928:	b083      	sub	sp, #12
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801592e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015930:	4618      	mov	r0, r3
 8015932:	370c      	adds	r7, #12
 8015934:	46bd      	mov	sp, r7
 8015936:	bc80      	pop	{r7}
 8015938:	4770      	bx	lr

0801593a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801593a:	b480      	push	{r7}
 801593c:	b083      	sub	sp, #12
 801593e:	af00      	add	r7, sp, #0
 8015940:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015942:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015944:	4618      	mov	r0, r3
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	bc80      	pop	{r7}
 801594c:	4770      	bx	lr

0801594e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801594e:	b480      	push	{r7}
 8015950:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015952:	bf00      	nop
 8015954:	46bd      	mov	sp, r7
 8015956:	bc80      	pop	{r7}
 8015958:	4770      	bx	lr

0801595a <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801595a:	b480      	push	{r7}
 801595c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801595e:	bf00      	nop
 8015960:	46bd      	mov	sp, r7
 8015962:	bc80      	pop	{r7}
 8015964:	4770      	bx	lr

08015966 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015966:	b480      	push	{r7}
 8015968:	b085      	sub	sp, #20
 801596a:	af00      	add	r7, sp, #0
 801596c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015972:	2300      	movs	r3, #0
 8015974:	81fb      	strh	r3, [r7, #14]
 8015976:	e00a      	b.n	801598e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015978:	89fb      	ldrh	r3, [r7, #14]
 801597a:	68ba      	ldr	r2, [r7, #8]
 801597c:	4413      	add	r3, r2
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d001      	beq.n	8015988 <IsSlotFree+0x22>
        {
            return false;
 8015984:	2300      	movs	r3, #0
 8015986:	e006      	b.n	8015996 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015988:	89fb      	ldrh	r3, [r7, #14]
 801598a:	3301      	adds	r3, #1
 801598c:	81fb      	strh	r3, [r7, #14]
 801598e:	89fb      	ldrh	r3, [r7, #14]
 8015990:	2b0f      	cmp	r3, #15
 8015992:	d9f1      	bls.n	8015978 <IsSlotFree+0x12>
        }
    }
    return true;
 8015994:	2301      	movs	r3, #1
}
 8015996:	4618      	mov	r0, r3
 8015998:	3714      	adds	r7, #20
 801599a:	46bd      	mov	sp, r7
 801599c:	bc80      	pop	{r7}
 801599e:	4770      	bx	lr

080159a0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80159a6:	2300      	movs	r3, #0
 80159a8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80159aa:	e007      	b.n	80159bc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80159ac:	79fb      	ldrb	r3, [r7, #7]
 80159ae:	3301      	adds	r3, #1
 80159b0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80159b2:	79fb      	ldrb	r3, [r7, #7]
 80159b4:	2b0f      	cmp	r3, #15
 80159b6:	d101      	bne.n	80159bc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80159b8:	2300      	movs	r3, #0
 80159ba:	e012      	b.n	80159e2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80159bc:	79fb      	ldrb	r3, [r7, #7]
 80159be:	011b      	lsls	r3, r3, #4
 80159c0:	3308      	adds	r3, #8
 80159c2:	4a0a      	ldr	r2, [pc, #40]	; (80159ec <MallocNewMacCommandSlot+0x4c>)
 80159c4:	4413      	add	r3, r2
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7ff ffcd 	bl	8015966 <IsSlotFree>
 80159cc:	4603      	mov	r3, r0
 80159ce:	f083 0301 	eor.w	r3, r3, #1
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d1e9      	bne.n	80159ac <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80159d8:	79fb      	ldrb	r3, [r7, #7]
 80159da:	011b      	lsls	r3, r3, #4
 80159dc:	3308      	adds	r3, #8
 80159de:	4a03      	ldr	r2, [pc, #12]	; (80159ec <MallocNewMacCommandSlot+0x4c>)
 80159e0:	4413      	add	r3, r2
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	20001608 	.word	0x20001608

080159f0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d101      	bne.n	8015a02 <FreeMacCommandSlot+0x12>
    {
        return false;
 80159fe:	2300      	movs	r3, #0
 8015a00:	e005      	b.n	8015a0e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015a02:	2210      	movs	r2, #16
 8015a04:	2100      	movs	r1, #0
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f004 fa00 	bl	8019e0c <memset1>

    return true;
 8015a0c:	2301      	movs	r3, #1
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3708      	adds	r7, #8
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}

08015a16 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015a16:	b480      	push	{r7}
 8015a18:	b083      	sub	sp, #12
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d101      	bne.n	8015a28 <LinkedListInit+0x12>
    {
        return false;
 8015a24:	2300      	movs	r3, #0
 8015a26:	e006      	b.n	8015a36 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2200      	movs	r2, #0
 8015a32:	605a      	str	r2, [r3, #4]

    return true;
 8015a34:	2301      	movs	r3, #1
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	370c      	adds	r7, #12
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bc80      	pop	{r7}
 8015a3e:	4770      	bx	lr

08015a40 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d002      	beq.n	8015a56 <LinkedListAdd+0x16>
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d101      	bne.n	8015a5a <LinkedListAdd+0x1a>
    {
        return false;
 8015a56:	2300      	movs	r3, #0
 8015a58:	e015      	b.n	8015a86 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d102      	bne.n	8015a68 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	683a      	ldr	r2, [r7, #0]
 8015a66:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	685b      	ldr	r3, [r3, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d003      	beq.n	8015a78 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	683a      	ldr	r2, [r7, #0]
 8015a76:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	683a      	ldr	r2, [r7, #0]
 8015a82:	605a      	str	r2, [r3, #4]

    return true;
 8015a84:	2301      	movs	r3, #1
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	370c      	adds	r7, #12
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bc80      	pop	{r7}
 8015a8e:	4770      	bx	lr

08015a90 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015a90:	b480      	push	{r7}
 8015a92:	b085      	sub	sp, #20
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d002      	beq.n	8015aa6 <LinkedListGetPrevious+0x16>
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d101      	bne.n	8015aaa <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e016      	b.n	8015ad8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015ab0:	683a      	ldr	r2, [r7, #0]
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	d00c      	beq.n	8015ad2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015ab8:	e002      	b.n	8015ac0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d007      	beq.n	8015ad6 <LinkedListGetPrevious+0x46>
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	683a      	ldr	r2, [r7, #0]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d1f4      	bne.n	8015aba <LinkedListGetPrevious+0x2a>
 8015ad0:	e001      	b.n	8015ad6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3714      	adds	r7, #20
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bc80      	pop	{r7}
 8015ae0:	4770      	bx	lr

08015ae2 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015ae2:	b580      	push	{r7, lr}
 8015ae4:	b084      	sub	sp, #16
 8015ae6:	af00      	add	r7, sp, #0
 8015ae8:	6078      	str	r0, [r7, #4]
 8015aea:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d002      	beq.n	8015af8 <LinkedListRemove+0x16>
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d101      	bne.n	8015afc <LinkedListRemove+0x1a>
    {
        return false;
 8015af8:	2300      	movs	r3, #0
 8015afa:	e020      	b.n	8015b3e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7ff ffc6 	bl	8015a90 <LinkedListGetPrevious>
 8015b04:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	683a      	ldr	r2, [r7, #0]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d103      	bne.n	8015b18 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	683a      	ldr	r2, [r7, #0]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d102      	bne.n	8015b28 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	68fa      	ldr	r2, [r7, #12]
 8015b26:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d003      	beq.n	8015b36 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	2200      	movs	r2, #0
 8015b3a:	601a      	str	r2, [r3, #0]

    return true;
 8015b3c:	2301      	movs	r3, #1
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3710      	adds	r7, #16
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015b46:	b480      	push	{r7}
 8015b48:	b083      	sub	sp, #12
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015b50:	79fb      	ldrb	r3, [r7, #7]
 8015b52:	2b05      	cmp	r3, #5
 8015b54:	d004      	beq.n	8015b60 <IsSticky+0x1a>
 8015b56:	2b05      	cmp	r3, #5
 8015b58:	db04      	blt.n	8015b64 <IsSticky+0x1e>
 8015b5a:	3b08      	subs	r3, #8
 8015b5c:	2b02      	cmp	r3, #2
 8015b5e:	d801      	bhi.n	8015b64 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015b60:	2301      	movs	r3, #1
 8015b62:	e000      	b.n	8015b66 <IsSticky+0x20>
        default:
            return false;
 8015b64:	2300      	movs	r3, #0
    }
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	370c      	adds	r7, #12
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bc80      	pop	{r7}
 8015b6e:	4770      	bx	lr

08015b70 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015b70:	b480      	push	{r7}
 8015b72:	b083      	sub	sp, #12
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015b7a:	2300      	movs	r3, #0
    }
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	370c      	adds	r7, #12
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bc80      	pop	{r7}
 8015b84:	4770      	bx	lr
	...

08015b88 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015b8c:	22fc      	movs	r2, #252	; 0xfc
 8015b8e:	2100      	movs	r1, #0
 8015b90:	4804      	ldr	r0, [pc, #16]	; (8015ba4 <LoRaMacCommandsInit+0x1c>)
 8015b92:	f004 f93b 	bl	8019e0c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015b96:	4803      	ldr	r0, [pc, #12]	; (8015ba4 <LoRaMacCommandsInit+0x1c>)
 8015b98:	f7ff ff3d 	bl	8015a16 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015b9c:	2300      	movs	r3, #0
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	20001608 	.word	0x20001608

08015ba8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b086      	sub	sp, #24
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	4603      	mov	r3, r0
 8015bb0:	60b9      	str	r1, [r7, #8]
 8015bb2:	607a      	str	r2, [r7, #4]
 8015bb4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015bb6:	68bb      	ldr	r3, [r7, #8]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d101      	bne.n	8015bc0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	e03b      	b.n	8015c38 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015bc0:	f7ff feee 	bl	80159a0 <MallocNewMacCommandSlot>
 8015bc4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d101      	bne.n	8015bd0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015bcc:	2302      	movs	r3, #2
 8015bce:	e033      	b.n	8015c38 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015bd0:	6979      	ldr	r1, [r7, #20]
 8015bd2:	481b      	ldr	r0, [pc, #108]	; (8015c40 <LoRaMacCommandsAddCmd+0x98>)
 8015bd4:	f7ff ff34 	bl	8015a40 <LinkedListAdd>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	f083 0301 	eor.w	r3, r3, #1
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d001      	beq.n	8015be8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015be4:	2305      	movs	r3, #5
 8015be6:	e027      	b.n	8015c38 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	7bfa      	ldrb	r2, [r7, #15]
 8015bec:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	687a      	ldr	r2, [r7, #4]
 8015bf2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	3305      	adds	r3, #5
 8015bf8:	687a      	ldr	r2, [r7, #4]
 8015bfa:	b292      	uxth	r2, r2
 8015bfc:	68b9      	ldr	r1, [r7, #8]
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f004 f8c9 	bl	8019d96 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015c04:	7bfb      	ldrb	r3, [r7, #15]
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff ff9d 	bl	8015b46 <IsSticky>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	461a      	mov	r2, r3
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7ff ffaa 	bl	8015b70 <IsConfirmationRequired>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	461a      	mov	r2, r3
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015c24:	4b06      	ldr	r3, [pc, #24]	; (8015c40 <LoRaMacCommandsAddCmd+0x98>)
 8015c26:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	4413      	add	r3, r2
 8015c2e:	3301      	adds	r3, #1
 8015c30:	4a03      	ldr	r2, [pc, #12]	; (8015c40 <LoRaMacCommandsAddCmd+0x98>)
 8015c32:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015c36:	2300      	movs	r3, #0
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3718      	adds	r7, #24
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}
 8015c40:	20001608 	.word	0x20001608

08015c44 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d101      	bne.n	8015c56 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c52:	2301      	movs	r3, #1
 8015c54:	e021      	b.n	8015c9a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015c56:	6879      	ldr	r1, [r7, #4]
 8015c58:	4812      	ldr	r0, [pc, #72]	; (8015ca4 <LoRaMacCommandsRemoveCmd+0x60>)
 8015c5a:	f7ff ff42 	bl	8015ae2 <LinkedListRemove>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	f083 0301 	eor.w	r3, r3, #1
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d001      	beq.n	8015c6e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015c6a:	2303      	movs	r3, #3
 8015c6c:	e015      	b.n	8015c9a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015c6e:	4b0d      	ldr	r3, [pc, #52]	; (8015ca4 <LoRaMacCommandsRemoveCmd+0x60>)
 8015c70:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	689b      	ldr	r3, [r3, #8]
 8015c78:	1ad3      	subs	r3, r2, r3
 8015c7a:	3b01      	subs	r3, #1
 8015c7c:	4a09      	ldr	r2, [pc, #36]	; (8015ca4 <LoRaMacCommandsRemoveCmd+0x60>)
 8015c7e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f7ff feb4 	bl	80159f0 <FreeMacCommandSlot>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	f083 0301 	eor.w	r3, r3, #1
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d001      	beq.n	8015c98 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015c94:	2305      	movs	r3, #5
 8015c96:	e000      	b.n	8015c9a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3708      	adds	r7, #8
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	20001608 	.word	0x20001608

08015ca8 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b085      	sub	sp, #20
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	4603      	mov	r3, r0
 8015cb0:	6039      	str	r1, [r7, #0]
 8015cb2:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015cb4:	4b0e      	ldr	r3, [pc, #56]	; (8015cf0 <LoRaMacCommandsGetCmd+0x48>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015cba:	e002      	b.n	8015cc2 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d004      	beq.n	8015cd2 <LoRaMacCommandsGetCmd+0x2a>
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	791b      	ldrb	r3, [r3, #4]
 8015ccc:	79fa      	ldrb	r2, [r7, #7]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d1f4      	bne.n	8015cbc <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	68fa      	ldr	r2, [r7, #12]
 8015cd6:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d101      	bne.n	8015ce2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015cde:	2303      	movs	r3, #3
 8015ce0:	e000      	b.n	8015ce4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015ce2:	2300      	movs	r3, #0
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3714      	adds	r7, #20
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bc80      	pop	{r7}
 8015cec:	4770      	bx	lr
 8015cee:	bf00      	nop
 8015cf0:	20001608 	.word	0x20001608

08015cf4 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015cfa:	4b0f      	ldr	r3, [pc, #60]	; (8015d38 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d00:	e012      	b.n	8015d28 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	7b1b      	ldrb	r3, [r3, #12]
 8015d06:	f083 0301 	eor.w	r3, r3, #1
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d008      	beq.n	8015d22 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f7ff ff94 	bl	8015c44 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	607b      	str	r3, [r7, #4]
 8015d20:	e002      	b.n	8015d28 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d1e9      	bne.n	8015d02 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d2e:	2300      	movs	r3, #0
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	20001608 	.word	0x20001608

08015d3c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d42:	4b13      	ldr	r3, [pc, #76]	; (8015d90 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d48:	e01a      	b.n	8015d80 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	791b      	ldrb	r3, [r3, #4]
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7ff fef6 	bl	8015b46 <IsSticky>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d00d      	beq.n	8015d7c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	791b      	ldrb	r3, [r3, #4]
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7ff ff03 	bl	8015b70 <IsConfirmationRequired>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	f083 0301 	eor.w	r3, r3, #1
 8015d70:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d002      	beq.n	8015d7c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7ff ff64 	bl	8015c44 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1e1      	bne.n	8015d4a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d86:	2300      	movs	r3, #0
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}
 8015d90:	20001608 	.word	0x20001608

08015d94 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015d94:	b480      	push	{r7}
 8015d96:	b083      	sub	sp, #12
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d101      	bne.n	8015da6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015da2:	2301      	movs	r3, #1
 8015da4:	e005      	b.n	8015db2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015da6:	4b05      	ldr	r3, [pc, #20]	; (8015dbc <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015da8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	370c      	adds	r7, #12
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bc80      	pop	{r7}
 8015dba:	4770      	bx	lr
 8015dbc:	20001608 	.word	0x20001608

08015dc0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b088      	sub	sp, #32
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	60f8      	str	r0, [r7, #12]
 8015dc8:	60b9      	str	r1, [r7, #8]
 8015dca:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015dcc:	4b25      	ldr	r3, [pc, #148]	; (8015e64 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d002      	beq.n	8015de2 <LoRaMacCommandsSerializeCmds+0x22>
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d126      	bne.n	8015e30 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015de2:	2301      	movs	r3, #1
 8015de4:	e039      	b.n	8015e5a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015de6:	7efb      	ldrb	r3, [r7, #27]
 8015de8:	68fa      	ldr	r2, [r7, #12]
 8015dea:	1ad2      	subs	r2, r2, r3
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	689b      	ldr	r3, [r3, #8]
 8015df0:	3301      	adds	r3, #1
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d320      	bcc.n	8015e38 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015df6:	7efb      	ldrb	r3, [r7, #27]
 8015df8:	1c5a      	adds	r2, r3, #1
 8015dfa:	76fa      	strb	r2, [r7, #27]
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	4413      	add	r3, r2
 8015e02:	69fa      	ldr	r2, [r7, #28]
 8015e04:	7912      	ldrb	r2, [r2, #4]
 8015e06:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e08:	7efb      	ldrb	r3, [r7, #27]
 8015e0a:	687a      	ldr	r2, [r7, #4]
 8015e0c:	18d0      	adds	r0, r2, r3
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	1d59      	adds	r1, r3, #5
 8015e12:	69fb      	ldr	r3, [r7, #28]
 8015e14:	689b      	ldr	r3, [r3, #8]
 8015e16:	b29b      	uxth	r3, r3
 8015e18:	461a      	mov	r2, r3
 8015e1a:	f003 ffbc 	bl	8019d96 <memcpy1>
            itr += curElement->PayloadSize;
 8015e1e:	69fb      	ldr	r3, [r7, #28]
 8015e20:	689b      	ldr	r3, [r3, #8]
 8015e22:	b2da      	uxtb	r2, r3
 8015e24:	7efb      	ldrb	r3, [r7, #27]
 8015e26:	4413      	add	r3, r2
 8015e28:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d1d7      	bne.n	8015de6 <LoRaMacCommandsSerializeCmds+0x26>
 8015e36:	e009      	b.n	8015e4c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015e38:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015e3a:	e007      	b.n	8015e4c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015e42:	69f8      	ldr	r0, [r7, #28]
 8015e44:	f7ff fefe 	bl	8015c44 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d1f4      	bne.n	8015e3c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015e52:	68b8      	ldr	r0, [r7, #8]
 8015e54:	f7ff ff9e 	bl	8015d94 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3720      	adds	r7, #32
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	20001608 	.word	0x20001608

08015e68 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015e68:	b480      	push	{r7}
 8015e6a:	b085      	sub	sp, #20
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	4603      	mov	r3, r0
 8015e70:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015e72:	2300      	movs	r3, #0
 8015e74:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015e76:	79fb      	ldrb	r3, [r7, #7]
 8015e78:	3b02      	subs	r3, #2
 8015e7a:	2b11      	cmp	r3, #17
 8015e7c:	d850      	bhi.n	8015f20 <LoRaMacCommandsGetCmdSize+0xb8>
 8015e7e:	a201      	add	r2, pc, #4	; (adr r2, 8015e84 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e84:	08015ecd 	.word	0x08015ecd
 8015e88:	08015ed3 	.word	0x08015ed3
 8015e8c:	08015ed9 	.word	0x08015ed9
 8015e90:	08015edf 	.word	0x08015edf
 8015e94:	08015ee5 	.word	0x08015ee5
 8015e98:	08015eeb 	.word	0x08015eeb
 8015e9c:	08015ef1 	.word	0x08015ef1
 8015ea0:	08015ef7 	.word	0x08015ef7
 8015ea4:	08015efd 	.word	0x08015efd
 8015ea8:	08015f21 	.word	0x08015f21
 8015eac:	08015f21 	.word	0x08015f21
 8015eb0:	08015f03 	.word	0x08015f03
 8015eb4:	08015f21 	.word	0x08015f21
 8015eb8:	08015f21 	.word	0x08015f21
 8015ebc:	08015f09 	.word	0x08015f09
 8015ec0:	08015f0f 	.word	0x08015f0f
 8015ec4:	08015f15 	.word	0x08015f15
 8015ec8:	08015f1b 	.word	0x08015f1b
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	73fb      	strb	r3, [r7, #15]
            break;
 8015ed0:	e027      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015ed2:	2305      	movs	r3, #5
 8015ed4:	73fb      	strb	r3, [r7, #15]
            break;
 8015ed6:	e024      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015ed8:	2302      	movs	r3, #2
 8015eda:	73fb      	strb	r3, [r7, #15]
            break;
 8015edc:	e021      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015ede:	2305      	movs	r3, #5
 8015ee0:	73fb      	strb	r3, [r7, #15]
            break;
 8015ee2:	e01e      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	73fb      	strb	r3, [r7, #15]
            break;
 8015ee8:	e01b      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015eea:	2306      	movs	r3, #6
 8015eec:	73fb      	strb	r3, [r7, #15]
            break;
 8015eee:	e018      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015ef0:	2302      	movs	r3, #2
 8015ef2:	73fb      	strb	r3, [r7, #15]
            break;
 8015ef4:	e015      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015ef6:	2302      	movs	r3, #2
 8015ef8:	73fb      	strb	r3, [r7, #15]
            break;
 8015efa:	e012      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015efc:	2305      	movs	r3, #5
 8015efe:	73fb      	strb	r3, [r7, #15]
            break;
 8015f00:	e00f      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015f02:	2306      	movs	r3, #6
 8015f04:	73fb      	strb	r3, [r7, #15]
            break;
 8015f06:	e00c      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015f08:	2301      	movs	r3, #1
 8015f0a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f0c:	e009      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015f0e:	2305      	movs	r3, #5
 8015f10:	73fb      	strb	r3, [r7, #15]
            break;
 8015f12:	e006      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015f14:	2304      	movs	r3, #4
 8015f16:	73fb      	strb	r3, [r7, #15]
            break;
 8015f18:	e003      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015f1a:	2304      	movs	r3, #4
 8015f1c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f1e:	e000      	b.n	8015f22 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015f20:	bf00      	nop
        }
    }
    return cidSize;
 8015f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3714      	adds	r7, #20
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bc80      	pop	{r7}
 8015f2c:	4770      	bx	lr
 8015f2e:	bf00      	nop

08015f30 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	4a07      	ldr	r2, [pc, #28]	; (8015f58 <IncreaseBufferPointer+0x28>)
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	d102      	bne.n	8015f46 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015f40:	4b06      	ldr	r3, [pc, #24]	; (8015f5c <IncreaseBufferPointer+0x2c>)
 8015f42:	607b      	str	r3, [r7, #4]
 8015f44:	e002      	b.n	8015f4c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	3304      	adds	r3, #4
 8015f4a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015f4c:	687b      	ldr	r3, [r7, #4]
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	370c      	adds	r7, #12
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bc80      	pop	{r7}
 8015f56:	4770      	bx	lr
 8015f58:	20001720 	.word	0x20001720
 8015f5c:	20001710 	.word	0x20001710

08015f60 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015f60:	b480      	push	{r7}
 8015f62:	b083      	sub	sp, #12
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	4603      	mov	r3, r0
 8015f68:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015f6a:	79fb      	ldrb	r3, [r7, #7]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d101      	bne.n	8015f74 <IsListEmpty+0x14>
    {
        return true;
 8015f70:	2301      	movs	r3, #1
 8015f72:	e000      	b.n	8015f76 <IsListEmpty+0x16>
    }
    return false;
 8015f74:	2300      	movs	r3, #0
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	370c      	adds	r7, #12
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bc80      	pop	{r7}
 8015f7e:	4770      	bx	lr

08015f80 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015f80:	b480      	push	{r7}
 8015f82:	b083      	sub	sp, #12
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	4603      	mov	r3, r0
 8015f88:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015f8a:	79fb      	ldrb	r3, [r7, #7]
 8015f8c:	2b04      	cmp	r3, #4
 8015f8e:	d901      	bls.n	8015f94 <IsListFull+0x14>
    {
        return true;
 8015f90:	2301      	movs	r3, #1
 8015f92:	e000      	b.n	8015f96 <IsListFull+0x16>
    }
    return false;
 8015f94:	2300      	movs	r3, #0
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	370c      	adds	r7, #12
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bc80      	pop	{r7}
 8015f9e:	4770      	bx	lr

08015fa0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	607a      	str	r2, [r7, #4]
 8015fac:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015fb2:	4b13      	ldr	r3, [pc, #76]	; (8016000 <GetElement+0x60>)
 8015fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7ff ffd1 	bl	8015f60 <IsListEmpty>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d001      	beq.n	8015fc8 <GetElement+0x28>
    {
        return NULL;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	e017      	b.n	8015ff8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015fc8:	2300      	movs	r3, #0
 8015fca:	74fb      	strb	r3, [r7, #19]
 8015fcc:	e00d      	b.n	8015fea <GetElement+0x4a>
    {
        if( element->Request == request )
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	7bfa      	ldrb	r2, [r7, #15]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d101      	bne.n	8015fdc <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	e00d      	b.n	8015ff8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015fdc:	6978      	ldr	r0, [r7, #20]
 8015fde:	f7ff ffa7 	bl	8015f30 <IncreaseBufferPointer>
 8015fe2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015fe4:	7cfb      	ldrb	r3, [r7, #19]
 8015fe6:	3301      	adds	r3, #1
 8015fe8:	74fb      	strb	r3, [r7, #19]
 8015fea:	4b05      	ldr	r3, [pc, #20]	; (8016000 <GetElement+0x60>)
 8015fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ff0:	7cfa      	ldrb	r2, [r7, #19]
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d3eb      	bcc.n	8015fce <GetElement+0x2e>
    }

    return NULL;
 8015ff6:	2300      	movs	r3, #0
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3718      	adds	r7, #24
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	20001704 	.word	0x20001704

08016004 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801600c:	4a0c      	ldr	r2, [pc, #48]	; (8016040 <LoRaMacConfirmQueueInit+0x3c>)
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8016012:	4b0b      	ldr	r3, [pc, #44]	; (8016040 <LoRaMacConfirmQueueInit+0x3c>)
 8016014:	2200      	movs	r2, #0
 8016016:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801601a:	4b09      	ldr	r3, [pc, #36]	; (8016040 <LoRaMacConfirmQueueInit+0x3c>)
 801601c:	4a09      	ldr	r2, [pc, #36]	; (8016044 <LoRaMacConfirmQueueInit+0x40>)
 801601e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016020:	4b07      	ldr	r3, [pc, #28]	; (8016040 <LoRaMacConfirmQueueInit+0x3c>)
 8016022:	4a08      	ldr	r2, [pc, #32]	; (8016044 <LoRaMacConfirmQueueInit+0x40>)
 8016024:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8016026:	2214      	movs	r2, #20
 8016028:	21ff      	movs	r1, #255	; 0xff
 801602a:	4806      	ldr	r0, [pc, #24]	; (8016044 <LoRaMacConfirmQueueInit+0x40>)
 801602c:	f003 feee 	bl	8019e0c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016030:	4b03      	ldr	r3, [pc, #12]	; (8016040 <LoRaMacConfirmQueueInit+0x3c>)
 8016032:	2201      	movs	r2, #1
 8016034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016038:	bf00      	nop
 801603a:	3708      	adds	r7, #8
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}
 8016040:	20001704 	.word	0x20001704
 8016044:	20001710 	.word	0x20001710

08016048 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b082      	sub	sp, #8
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016050:	4b19      	ldr	r3, [pc, #100]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 8016052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016056:	4618      	mov	r0, r3
 8016058:	f7ff ff92 	bl	8015f80 <IsListFull>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d001      	beq.n	8016066 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8016062:	2300      	movs	r3, #0
 8016064:	e023      	b.n	80160ae <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8016066:	4b14      	ldr	r3, [pc, #80]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 8016068:	689b      	ldr	r3, [r3, #8]
 801606a:	687a      	ldr	r2, [r7, #4]
 801606c:	7812      	ldrb	r2, [r2, #0]
 801606e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8016070:	4b11      	ldr	r3, [pc, #68]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 8016072:	689b      	ldr	r3, [r3, #8]
 8016074:	687a      	ldr	r2, [r7, #4]
 8016076:	7852      	ldrb	r2, [r2, #1]
 8016078:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801607a:	4b0f      	ldr	r3, [pc, #60]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 801607c:	689b      	ldr	r3, [r3, #8]
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	78d2      	ldrb	r2, [r2, #3]
 8016082:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016084:	4b0c      	ldr	r3, [pc, #48]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 8016086:	689b      	ldr	r3, [r3, #8]
 8016088:	2200      	movs	r2, #0
 801608a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801608c:	4b0a      	ldr	r3, [pc, #40]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 801608e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016092:	3301      	adds	r3, #1
 8016094:	b2da      	uxtb	r2, r3
 8016096:	4b08      	ldr	r3, [pc, #32]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 8016098:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801609c:	4b06      	ldr	r3, [pc, #24]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 801609e:	689b      	ldr	r3, [r3, #8]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ff ff45 	bl	8015f30 <IncreaseBufferPointer>
 80160a6:	4603      	mov	r3, r0
 80160a8:	4a03      	ldr	r2, [pc, #12]	; (80160b8 <LoRaMacConfirmQueueAdd+0x70>)
 80160aa:	6093      	str	r3, [r2, #8]

    return true;
 80160ac:	2301      	movs	r3, #1
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3708      	adds	r7, #8
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	20001704 	.word	0x20001704

080160bc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160c0:	4b0e      	ldr	r3, [pc, #56]	; (80160fc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80160c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7ff ff4a 	bl	8015f60 <IsListEmpty>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d001      	beq.n	80160d6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80160d2:	2300      	movs	r3, #0
 80160d4:	e010      	b.n	80160f8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80160d6:	4b09      	ldr	r3, [pc, #36]	; (80160fc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80160d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160dc:	3b01      	subs	r3, #1
 80160de:	b2da      	uxtb	r2, r3
 80160e0:	4b06      	ldr	r3, [pc, #24]	; (80160fc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80160e2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80160e6:	4b05      	ldr	r3, [pc, #20]	; (80160fc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7ff ff20 	bl	8015f30 <IncreaseBufferPointer>
 80160f0:	4603      	mov	r3, r0
 80160f2:	4a02      	ldr	r2, [pc, #8]	; (80160fc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80160f4:	6053      	str	r3, [r2, #4]

    return true;
 80160f6:	2301      	movs	r3, #1
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	bd80      	pop	{r7, pc}
 80160fc:	20001704 	.word	0x20001704

08016100 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	4603      	mov	r3, r0
 8016108:	460a      	mov	r2, r1
 801610a:	71fb      	strb	r3, [r7, #7]
 801610c:	4613      	mov	r3, r2
 801610e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8016110:	2300      	movs	r3, #0
 8016112:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016114:	4b10      	ldr	r3, [pc, #64]	; (8016158 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016116:	f893 3020 	ldrb.w	r3, [r3, #32]
 801611a:	4618      	mov	r0, r3
 801611c:	f7ff ff20 	bl	8015f60 <IsListEmpty>
 8016120:	4603      	mov	r3, r0
 8016122:	f083 0301 	eor.w	r3, r3, #1
 8016126:	b2db      	uxtb	r3, r3
 8016128:	2b00      	cmp	r3, #0
 801612a:	d011      	beq.n	8016150 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801612c:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <LoRaMacConfirmQueueSetStatus+0x58>)
 801612e:	6859      	ldr	r1, [r3, #4]
 8016130:	4b09      	ldr	r3, [pc, #36]	; (8016158 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016132:	689a      	ldr	r2, [r3, #8]
 8016134:	79bb      	ldrb	r3, [r7, #6]
 8016136:	4618      	mov	r0, r3
 8016138:	f7ff ff32 	bl	8015fa0 <GetElement>
 801613c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d005      	beq.n	8016150 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	79fa      	ldrb	r2, [r7, #7]
 8016148:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2201      	movs	r2, #1
 801614e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8016150:	bf00      	nop
 8016152:	3710      	adds	r7, #16
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	20001704 	.word	0x20001704

0801615c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b084      	sub	sp, #16
 8016160:	af00      	add	r7, sp, #0
 8016162:	4603      	mov	r3, r0
 8016164:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8016166:	2300      	movs	r3, #0
 8016168:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801616a:	4b10      	ldr	r3, [pc, #64]	; (80161ac <LoRaMacConfirmQueueGetStatus+0x50>)
 801616c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016170:	4618      	mov	r0, r3
 8016172:	f7ff fef5 	bl	8015f60 <IsListEmpty>
 8016176:	4603      	mov	r3, r0
 8016178:	f083 0301 	eor.w	r3, r3, #1
 801617c:	b2db      	uxtb	r3, r3
 801617e:	2b00      	cmp	r3, #0
 8016180:	d00e      	beq.n	80161a0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016182:	4b0a      	ldr	r3, [pc, #40]	; (80161ac <LoRaMacConfirmQueueGetStatus+0x50>)
 8016184:	6859      	ldr	r1, [r3, #4]
 8016186:	4b09      	ldr	r3, [pc, #36]	; (80161ac <LoRaMacConfirmQueueGetStatus+0x50>)
 8016188:	689a      	ldr	r2, [r3, #8]
 801618a:	79fb      	ldrb	r3, [r7, #7]
 801618c:	4618      	mov	r0, r3
 801618e:	f7ff ff07 	bl	8015fa0 <GetElement>
 8016192:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d002      	beq.n	80161a0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	785b      	ldrb	r3, [r3, #1]
 801619e:	e000      	b.n	80161a2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80161a0:	2301      	movs	r3, #1
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3710      	adds	r7, #16
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	20001704 	.word	0x20001704

080161b0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	4603      	mov	r3, r0
 80161b8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80161ba:	4b16      	ldr	r3, [pc, #88]	; (8016214 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80161c0:	4a14      	ldr	r2, [pc, #80]	; (8016214 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80161c2:	79fb      	ldrb	r3, [r7, #7]
 80161c4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161c8:	4b12      	ldr	r3, [pc, #72]	; (8016214 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80161ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7ff fec6 	bl	8015f60 <IsListEmpty>
 80161d4:	4603      	mov	r3, r0
 80161d6:	f083 0301 	eor.w	r3, r3, #1
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d015      	beq.n	801620c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	79fa      	ldrb	r2, [r7, #7]
 80161e4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	78db      	ldrb	r3, [r3, #3]
 80161ea:	f083 0301 	eor.w	r3, r3, #1
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d002      	beq.n	80161fa <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2201      	movs	r2, #1
 80161f8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	f7ff fe98 	bl	8015f30 <IncreaseBufferPointer>
 8016200:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8016202:	4b04      	ldr	r3, [pc, #16]	; (8016214 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016204:	689b      	ldr	r3, [r3, #8]
 8016206:	68fa      	ldr	r2, [r7, #12]
 8016208:	429a      	cmp	r2, r3
 801620a:	d1e9      	bne.n	80161e0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801620c:	bf00      	nop
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	20001704 	.word	0x20001704

08016218 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b082      	sub	sp, #8
 801621c:	af00      	add	r7, sp, #0
 801621e:	4603      	mov	r3, r0
 8016220:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8016222:	4b09      	ldr	r3, [pc, #36]	; (8016248 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016224:	6859      	ldr	r1, [r3, #4]
 8016226:	4b08      	ldr	r3, [pc, #32]	; (8016248 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016228:	689a      	ldr	r2, [r3, #8]
 801622a:	79fb      	ldrb	r3, [r7, #7]
 801622c:	4618      	mov	r0, r3
 801622e:	f7ff feb7 	bl	8015fa0 <GetElement>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d001      	beq.n	801623c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8016238:	2301      	movs	r3, #1
 801623a:	e000      	b.n	801623e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801623c:	2300      	movs	r3, #0
}
 801623e:	4618      	mov	r0, r3
 8016240:	3708      	adds	r7, #8
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}
 8016246:	bf00      	nop
 8016248:	20001704 	.word	0x20001704

0801624c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016254:	4b25      	ldr	r3, [pc, #148]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016256:	f893 3020 	ldrb.w	r3, [r3, #32]
 801625a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801625c:	2300      	movs	r3, #0
 801625e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8016260:	f107 0308 	add.w	r3, r7, #8
 8016264:	2204      	movs	r2, #4
 8016266:	2100      	movs	r1, #0
 8016268:	4618      	mov	r0, r3
 801626a:	f003 fdcf 	bl	8019e0c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801626e:	2300      	movs	r3, #0
 8016270:	73fb      	strb	r3, [r7, #15]
 8016272:	e032      	b.n	80162da <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016274:	4b1d      	ldr	r3, [pc, #116]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016276:	685b      	ldr	r3, [r3, #4]
 8016278:	781a      	ldrb	r2, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801627e:	4b1b      	ldr	r3, [pc, #108]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016280:	685b      	ldr	r3, [r3, #4]
 8016282:	785a      	ldrb	r2, [r3, #1]
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016288:	4b18      	ldr	r3, [pc, #96]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	789b      	ldrb	r3, [r3, #2]
 801628e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8016290:	7b7b      	ldrb	r3, [r7, #13]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d005      	beq.n	80162a2 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016296:	4b15      	ldr	r3, [pc, #84]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	689b      	ldr	r3, [r3, #8]
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	4798      	blx	r3
 80162a0:	e00b      	b.n	80162ba <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80162a2:	4b12      	ldr	r3, [pc, #72]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162a4:	685b      	ldr	r3, [r3, #4]
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80162aa:	4b10      	ldr	r3, [pc, #64]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	785b      	ldrb	r3, [r3, #1]
 80162b0:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80162b2:	4b0e      	ldr	r3, [pc, #56]	; (80162ec <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	78db      	ldrb	r3, [r3, #3]
 80162b8:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80162ba:	f7ff feff 	bl	80160bc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80162be:	7b7b      	ldrb	r3, [r7, #13]
 80162c0:	f083 0301 	eor.w	r3, r3, #1
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d004      	beq.n	80162d4 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80162ca:	f107 0308 	add.w	r3, r7, #8
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7ff feba 	bl	8016048 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80162d4:	7bfb      	ldrb	r3, [r7, #15]
 80162d6:	3301      	adds	r3, #1
 80162d8:	73fb      	strb	r3, [r7, #15]
 80162da:	7bfa      	ldrb	r2, [r7, #15]
 80162dc:	7bbb      	ldrb	r3, [r7, #14]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d3c8      	bcc.n	8016274 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80162e2:	bf00      	nop
 80162e4:	bf00      	nop
 80162e6:	3710      	adds	r7, #16
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}
 80162ec:	20001704 	.word	0x20001704

080162f0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80162f0:	b480      	push	{r7}
 80162f2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80162f4:	4b03      	ldr	r3, [pc, #12]	; (8016304 <LoRaMacConfirmQueueGetCnt+0x14>)
 80162f6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bc80      	pop	{r7}
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop
 8016304:	20001704 	.word	0x20001704

08016308 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016308:	b580      	push	{r7, lr}
 801630a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801630c:	4b06      	ldr	r3, [pc, #24]	; (8016328 <LoRaMacConfirmQueueIsFull+0x20>)
 801630e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016312:	4618      	mov	r0, r3
 8016314:	f7ff fe34 	bl	8015f80 <IsListFull>
 8016318:	4603      	mov	r3, r0
 801631a:	2b00      	cmp	r3, #0
 801631c:	d001      	beq.n	8016322 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801631e:	2301      	movs	r3, #1
 8016320:	e000      	b.n	8016324 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8016322:	2300      	movs	r3, #0
    }
}
 8016324:	4618      	mov	r0, r3
 8016326:	bd80      	pop	{r7, pc}
 8016328:	20001704 	.word	0x20001704

0801632c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b08e      	sub	sp, #56	; 0x38
 8016330:	af00      	add	r7, sp, #0
 8016332:	60f8      	str	r0, [r7, #12]
 8016334:	607b      	str	r3, [r7, #4]
 8016336:	460b      	mov	r3, r1
 8016338:	817b      	strh	r3, [r7, #10]
 801633a:	4613      	mov	r3, r2
 801633c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d101      	bne.n	8016348 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016344:	230a      	movs	r3, #10
 8016346:	e086      	b.n	8016456 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8016348:	2300      	movs	r3, #0
 801634a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801634e:	2301      	movs	r3, #1
 8016350:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8016352:	2300      	movs	r3, #0
 8016354:	623b      	str	r3, [r7, #32]
 8016356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801635a:	2200      	movs	r2, #0
 801635c:	601a      	str	r2, [r3, #0]
 801635e:	605a      	str	r2, [r3, #4]
 8016360:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8016362:	2300      	movs	r3, #0
 8016364:	613b      	str	r3, [r7, #16]
 8016366:	f107 0314 	add.w	r3, r7, #20
 801636a:	2200      	movs	r2, #0
 801636c:	601a      	str	r2, [r3, #0]
 801636e:	605a      	str	r2, [r3, #4]
 8016370:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8016372:	2301      	movs	r3, #1
 8016374:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8016376:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801637a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	b2db      	uxtb	r3, r3
 8016380:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	0a1b      	lsrs	r3, r3, #8
 8016386:	b2db      	uxtb	r3, r3
 8016388:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	0c1b      	lsrs	r3, r3, #16
 801638e:	b2db      	uxtb	r3, r3
 8016390:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	0e1b      	lsrs	r3, r3, #24
 8016396:	b2db      	uxtb	r3, r3
 8016398:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801639a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801639c:	b2db      	uxtb	r3, r3
 801639e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80163a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163a2:	0a1b      	lsrs	r3, r3, #8
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80163a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163aa:	0c1b      	lsrs	r3, r3, #16
 80163ac:	b2db      	uxtb	r3, r3
 80163ae:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80163b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163b2:	0e1b      	lsrs	r3, r3, #24
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80163b8:	e048      	b.n	801644c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80163ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80163c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80163c2:	3301      	adds	r3, #1
 80163c4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80163c6:	f107 0320 	add.w	r3, r7, #32
 80163ca:	7a7a      	ldrb	r2, [r7, #9]
 80163cc:	f107 0010 	add.w	r0, r7, #16
 80163d0:	2110      	movs	r1, #16
 80163d2:	f7f8 ff69 	bl	800f2a8 <SecureElementAesEncrypt>
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d001      	beq.n	80163e0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80163dc:	230f      	movs	r3, #15
 80163de:	e03a      	b.n	8016456 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80163e0:	2300      	movs	r3, #0
 80163e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80163e6:	e01e      	b.n	8016426 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80163e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80163ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80163f0:	4413      	add	r3, r2
 80163f2:	461a      	mov	r2, r3
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	4413      	add	r3, r2
 80163f8:	7819      	ldrb	r1, [r3, #0]
 80163fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80163fe:	3338      	adds	r3, #56	; 0x38
 8016400:	443b      	add	r3, r7
 8016402:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016406:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801640a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801640e:	4403      	add	r3, r0
 8016410:	4618      	mov	r0, r3
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	4403      	add	r3, r0
 8016416:	404a      	eors	r2, r1
 8016418:	b2d2      	uxtb	r2, r2
 801641a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801641c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016420:	3301      	adds	r3, #1
 8016422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801642a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801642e:	2a10      	cmp	r2, #16
 8016430:	bfa8      	it	ge
 8016432:	2210      	movge	r2, #16
 8016434:	b212      	sxth	r2, r2
 8016436:	4293      	cmp	r3, r2
 8016438:	dbd6      	blt.n	80163e8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801643a:	897b      	ldrh	r3, [r7, #10]
 801643c:	3b10      	subs	r3, #16
 801643e:	b29b      	uxth	r3, r3
 8016440:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8016442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016446:	3310      	adds	r3, #16
 8016448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 801644c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016450:	2b00      	cmp	r3, #0
 8016452:	dcb2      	bgt.n	80163ba <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016454:	2300      	movs	r3, #0
}
 8016456:	4618      	mov	r0, r3
 8016458:	3738      	adds	r7, #56	; 0x38
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}

0801645e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801645e:	b490      	push	{r4, r7}
 8016460:	b082      	sub	sp, #8
 8016462:	af00      	add	r7, sp, #0
 8016464:	4604      	mov	r4, r0
 8016466:	4608      	mov	r0, r1
 8016468:	4611      	mov	r1, r2
 801646a:	461a      	mov	r2, r3
 801646c:	4623      	mov	r3, r4
 801646e:	80fb      	strh	r3, [r7, #6]
 8016470:	4603      	mov	r3, r0
 8016472:	717b      	strb	r3, [r7, #5]
 8016474:	460b      	mov	r3, r1
 8016476:	713b      	strb	r3, [r7, #4]
 8016478:	4613      	mov	r3, r2
 801647a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801647c:	69bb      	ldr	r3, [r7, #24]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016482:	230a      	movs	r3, #10
 8016484:	e04e      	b.n	8016524 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016486:	69bb      	ldr	r3, [r7, #24]
 8016488:	2249      	movs	r2, #73	; 0x49
 801648a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801648c:	69bb      	ldr	r3, [r7, #24]
 801648e:	3301      	adds	r3, #1
 8016490:	2200      	movs	r2, #0
 8016492:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016494:	69bb      	ldr	r3, [r7, #24]
 8016496:	3302      	adds	r3, #2
 8016498:	2200      	movs	r2, #0
 801649a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801649c:	69bb      	ldr	r3, [r7, #24]
 801649e:	3303      	adds	r3, #3
 80164a0:	2200      	movs	r2, #0
 80164a2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80164a4:	69bb      	ldr	r3, [r7, #24]
 80164a6:	3304      	adds	r3, #4
 80164a8:	2200      	movs	r2, #0
 80164aa:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80164ac:	69bb      	ldr	r3, [r7, #24]
 80164ae:	3305      	adds	r3, #5
 80164b0:	78fa      	ldrb	r2, [r7, #3]
 80164b2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	3306      	adds	r3, #6
 80164b8:	693a      	ldr	r2, [r7, #16]
 80164ba:	b2d2      	uxtb	r2, r2
 80164bc:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	0a1a      	lsrs	r2, r3, #8
 80164c2:	69bb      	ldr	r3, [r7, #24]
 80164c4:	3307      	adds	r3, #7
 80164c6:	b2d2      	uxtb	r2, r2
 80164c8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	0c1a      	lsrs	r2, r3, #16
 80164ce:	69bb      	ldr	r3, [r7, #24]
 80164d0:	3308      	adds	r3, #8
 80164d2:	b2d2      	uxtb	r2, r2
 80164d4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	0e1a      	lsrs	r2, r3, #24
 80164da:	69bb      	ldr	r3, [r7, #24]
 80164dc:	3309      	adds	r3, #9
 80164de:	b2d2      	uxtb	r2, r2
 80164e0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80164e2:	69bb      	ldr	r3, [r7, #24]
 80164e4:	330a      	adds	r3, #10
 80164e6:	697a      	ldr	r2, [r7, #20]
 80164e8:	b2d2      	uxtb	r2, r2
 80164ea:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	0a1a      	lsrs	r2, r3, #8
 80164f0:	69bb      	ldr	r3, [r7, #24]
 80164f2:	330b      	adds	r3, #11
 80164f4:	b2d2      	uxtb	r2, r2
 80164f6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80164f8:	697b      	ldr	r3, [r7, #20]
 80164fa:	0c1a      	lsrs	r2, r3, #16
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	330c      	adds	r3, #12
 8016500:	b2d2      	uxtb	r2, r2
 8016502:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	0e1a      	lsrs	r2, r3, #24
 8016508:	69bb      	ldr	r3, [r7, #24]
 801650a:	330d      	adds	r3, #13
 801650c:	b2d2      	uxtb	r2, r2
 801650e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016510:	69bb      	ldr	r3, [r7, #24]
 8016512:	330e      	adds	r3, #14
 8016514:	2200      	movs	r2, #0
 8016516:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	330f      	adds	r3, #15
 801651c:	88fa      	ldrh	r2, [r7, #6]
 801651e:	b2d2      	uxtb	r2, r2
 8016520:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016522:	2300      	movs	r3, #0
}
 8016524:	4618      	mov	r0, r3
 8016526:	3708      	adds	r7, #8
 8016528:	46bd      	mov	sp, r7
 801652a:	bc90      	pop	{r4, r7}
 801652c:	4770      	bx	lr

0801652e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801652e:	b590      	push	{r4, r7, lr}
 8016530:	b08b      	sub	sp, #44	; 0x2c
 8016532:	af04      	add	r7, sp, #16
 8016534:	6078      	str	r0, [r7, #4]
 8016536:	4608      	mov	r0, r1
 8016538:	4611      	mov	r1, r2
 801653a:	461a      	mov	r2, r3
 801653c:	4603      	mov	r3, r0
 801653e:	807b      	strh	r3, [r7, #2]
 8016540:	460b      	mov	r3, r1
 8016542:	707b      	strb	r3, [r7, #1]
 8016544:	4613      	mov	r3, r2
 8016546:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d002      	beq.n	8016554 <ComputeCmacB0+0x26>
 801654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016550:	2b00      	cmp	r3, #0
 8016552:	d101      	bne.n	8016558 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016554:	230a      	movs	r3, #10
 8016556:	e024      	b.n	80165a2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016558:	887b      	ldrh	r3, [r7, #2]
 801655a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801655e:	d901      	bls.n	8016564 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016560:	230e      	movs	r3, #14
 8016562:	e01e      	b.n	80165a2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016564:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016568:	783a      	ldrb	r2, [r7, #0]
 801656a:	7879      	ldrb	r1, [r7, #1]
 801656c:	8878      	ldrh	r0, [r7, #2]
 801656e:	f107 0308 	add.w	r3, r7, #8
 8016572:	9302      	str	r3, [sp, #8]
 8016574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016576:	9301      	str	r3, [sp, #4]
 8016578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	4623      	mov	r3, r4
 801657e:	f7ff ff6e 	bl	801645e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016582:	887a      	ldrh	r2, [r7, #2]
 8016584:	7879      	ldrb	r1, [r7, #1]
 8016586:	f107 0008 	add.w	r0, r7, #8
 801658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801658c:	9300      	str	r3, [sp, #0]
 801658e:	460b      	mov	r3, r1
 8016590:	6879      	ldr	r1, [r7, #4]
 8016592:	f7f8 fe43 	bl	800f21c <SecureElementComputeAesCmac>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801659c:	230f      	movs	r3, #15
 801659e:	e000      	b.n	80165a2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80165a0:	2300      	movs	r3, #0
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	371c      	adds	r7, #28
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd90      	pop	{r4, r7, pc}

080165aa <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80165aa:	b590      	push	{r4, r7, lr}
 80165ac:	b0cd      	sub	sp, #308	; 0x134
 80165ae:	af04      	add	r7, sp, #16
 80165b0:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80165b4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80165b8:	6020      	str	r0, [r4, #0]
 80165ba:	460c      	mov	r4, r1
 80165bc:	4610      	mov	r0, r2
 80165be:	4619      	mov	r1, r3
 80165c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80165c4:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80165c8:	4622      	mov	r2, r4
 80165ca:	801a      	strh	r2, [r3, #0]
 80165cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80165d0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80165d4:	4602      	mov	r2, r0
 80165d6:	701a      	strb	r2, [r3, #0]
 80165d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80165dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80165e0:	460a      	mov	r2, r1
 80165e2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80165e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80165e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d101      	bne.n	80165f6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165f2:	230a      	movs	r3, #10
 80165f4:	e063      	b.n	80166be <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80165f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80165fa:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016604:	d901      	bls.n	801660a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016606:	230e      	movs	r3, #14
 8016608:	e059      	b.n	80166be <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801660a:	f107 030c 	add.w	r3, r7, #12
 801660e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016612:	2100      	movs	r1, #0
 8016614:	4618      	mov	r0, r3
 8016616:	f003 fbf9 	bl	8019e0c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801661a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801661e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016622:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016626:	781a      	ldrb	r2, [r3, #0]
 8016628:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801662c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016630:	7819      	ldrb	r1, [r3, #0]
 8016632:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016636:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801663a:	8818      	ldrh	r0, [r3, #0]
 801663c:	f107 030c 	add.w	r3, r7, #12
 8016640:	9302      	str	r3, [sp, #8]
 8016642:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016646:	9301      	str	r3, [sp, #4]
 8016648:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801664c:	9300      	str	r3, [sp, #0]
 801664e:	4623      	mov	r3, r4
 8016650:	f7ff ff05 	bl	801645e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016654:	f107 030c 	add.w	r3, r7, #12
 8016658:	3310      	adds	r3, #16
 801665a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801665e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016662:	8812      	ldrh	r2, [r2, #0]
 8016664:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016668:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801666c:	6809      	ldr	r1, [r1, #0]
 801666e:	4618      	mov	r0, r3
 8016670:	f003 fb91 	bl	8019d96 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016674:	2306      	movs	r3, #6
 8016676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801667a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801667e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	3310      	adds	r3, #16
 8016686:	4619      	mov	r1, r3
 8016688:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801668c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	f107 000c 	add.w	r0, r7, #12
 8016696:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801669a:	f7f8 fdd9 	bl	800f250 <SecureElementVerifyAesCmac>
 801669e:	4603      	mov	r3, r0
 80166a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80166a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d101      	bne.n	80166b0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80166ac:	2300      	movs	r3, #0
 80166ae:	e006      	b.n	80166be <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80166b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	d101      	bne.n	80166bc <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80166b8:	2301      	movs	r3, #1
 80166ba:	e000      	b.n	80166be <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166bc:	230f      	movs	r3, #15
}
 80166be:	4618      	mov	r0, r3
 80166c0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd90      	pop	{r4, r7, pc}

080166c8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80166c8:	b480      	push	{r7}
 80166ca:	b085      	sub	sp, #20
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	4603      	mov	r3, r0
 80166d0:	6039      	str	r1, [r7, #0]
 80166d2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80166d4:	2300      	movs	r3, #0
 80166d6:	73fb      	strb	r3, [r7, #15]
 80166d8:	e011      	b.n	80166fe <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80166da:	7bfb      	ldrb	r3, [r7, #15]
 80166dc:	4a0c      	ldr	r2, [pc, #48]	; (8016710 <GetKeyAddrItem+0x48>)
 80166de:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80166e2:	79fa      	ldrb	r2, [r7, #7]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d107      	bne.n	80166f8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80166e8:	7bfb      	ldrb	r3, [r7, #15]
 80166ea:	009b      	lsls	r3, r3, #2
 80166ec:	4a08      	ldr	r2, [pc, #32]	; (8016710 <GetKeyAddrItem+0x48>)
 80166ee:	441a      	add	r2, r3
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80166f4:	2300      	movs	r3, #0
 80166f6:	e006      	b.n	8016706 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80166f8:	7bfb      	ldrb	r3, [r7, #15]
 80166fa:	3301      	adds	r3, #1
 80166fc:	73fb      	strb	r3, [r7, #15]
 80166fe:	7bfb      	ldrb	r3, [r7, #15]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d9ea      	bls.n	80166da <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016704:	230c      	movs	r3, #12
}
 8016706:	4618      	mov	r0, r3
 8016708:	3714      	adds	r7, #20
 801670a:	46bd      	mov	sp, r7
 801670c:	bc80      	pop	{r7}
 801670e:	4770      	bx	lr
 8016710:	20000130 	.word	0x20000130

08016714 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b088      	sub	sp, #32
 8016718:	af00      	add	r7, sp, #0
 801671a:	60b9      	str	r1, [r7, #8]
 801671c:	607a      	str	r2, [r7, #4]
 801671e:	461a      	mov	r2, r3
 8016720:	4603      	mov	r3, r0
 8016722:	73fb      	strb	r3, [r7, #15]
 8016724:	4613      	mov	r3, r2
 8016726:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016728:	2300      	movs	r3, #0
 801672a:	613b      	str	r3, [r7, #16]
 801672c:	f107 0314 	add.w	r3, r7, #20
 8016730:	2200      	movs	r2, #0
 8016732:	601a      	str	r2, [r3, #0]
 8016734:	605a      	str	r2, [r3, #4]
 8016736:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016738:	7bfb      	ldrb	r3, [r7, #15]
 801673a:	2b08      	cmp	r3, #8
 801673c:	d002      	beq.n	8016744 <DeriveSessionKey10x+0x30>
 801673e:	2b09      	cmp	r3, #9
 8016740:	d003      	beq.n	801674a <DeriveSessionKey10x+0x36>
 8016742:	e005      	b.n	8016750 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8016744:	2301      	movs	r3, #1
 8016746:	743b      	strb	r3, [r7, #16]
            break;
 8016748:	e004      	b.n	8016754 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801674a:	2302      	movs	r3, #2
 801674c:	743b      	strb	r3, [r7, #16]
            break;
 801674e:	e001      	b.n	8016754 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016750:	230b      	movs	r3, #11
 8016752:	e02a      	b.n	80167aa <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	b2db      	uxtb	r3, r3
 8016758:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	0a1b      	lsrs	r3, r3, #8
 801675e:	b2db      	uxtb	r3, r3
 8016760:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	0c1b      	lsrs	r3, r3, #16
 8016766:	b2db      	uxtb	r3, r3
 8016768:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	b2db      	uxtb	r3, r3
 801676e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	0a1b      	lsrs	r3, r3, #8
 8016774:	b2db      	uxtb	r3, r3
 8016776:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	0c1b      	lsrs	r3, r3, #16
 801677c:	b2db      	uxtb	r3, r3
 801677e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016780:	89bb      	ldrh	r3, [r7, #12]
 8016782:	b2db      	uxtb	r3, r3
 8016784:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016786:	89bb      	ldrh	r3, [r7, #12]
 8016788:	0a1b      	lsrs	r3, r3, #8
 801678a:	b29b      	uxth	r3, r3
 801678c:	b2db      	uxtb	r3, r3
 801678e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016790:	7bfa      	ldrb	r2, [r7, #15]
 8016792:	f107 0310 	add.w	r3, r7, #16
 8016796:	2101      	movs	r1, #1
 8016798:	4618      	mov	r0, r3
 801679a:	f7f8 fe05 	bl	800f3a8 <SecureElementDeriveAndStoreKey>
 801679e:	4603      	mov	r3, r0
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d001      	beq.n	80167a8 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167a4:	230f      	movs	r3, #15
 80167a6:	e000      	b.n	80167aa <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80167a8:	2300      	movs	r3, #0
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3720      	adds	r7, #32
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
	...

080167b4 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80167b4:	b480      	push	{r7}
 80167b6:	b083      	sub	sp, #12
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	4603      	mov	r3, r0
 80167bc:	6039      	str	r1, [r7, #0]
 80167be:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d101      	bne.n	80167ca <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80167c6:	230a      	movs	r3, #10
 80167c8:	e029      	b.n	801681e <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80167ca:	79fb      	ldrb	r3, [r7, #7]
 80167cc:	3b01      	subs	r3, #1
 80167ce:	2b03      	cmp	r3, #3
 80167d0:	d822      	bhi.n	8016818 <GetLastFcntDown+0x64>
 80167d2:	a201      	add	r2, pc, #4	; (adr r2, 80167d8 <GetLastFcntDown+0x24>)
 80167d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167d8:	080167e9 	.word	0x080167e9
 80167dc:	080167f5 	.word	0x080167f5
 80167e0:	08016801 	.word	0x08016801
 80167e4:	0801680d 	.word	0x0801680d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80167e8:	4b0f      	ldr	r3, [pc, #60]	; (8016828 <GetLastFcntDown+0x74>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	691a      	ldr	r2, [r3, #16]
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	601a      	str	r2, [r3, #0]
            break;
 80167f2:	e013      	b.n	801681c <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80167f4:	4b0c      	ldr	r3, [pc, #48]	; (8016828 <GetLastFcntDown+0x74>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	695a      	ldr	r2, [r3, #20]
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	601a      	str	r2, [r3, #0]
            break;
 80167fe:	e00d      	b.n	801681c <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016800:	4b09      	ldr	r3, [pc, #36]	; (8016828 <GetLastFcntDown+0x74>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	699a      	ldr	r2, [r3, #24]
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	601a      	str	r2, [r3, #0]
            break;
 801680a:	e007      	b.n	801681c <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801680c:	4b06      	ldr	r3, [pc, #24]	; (8016828 <GetLastFcntDown+0x74>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	69da      	ldr	r2, [r3, #28]
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	601a      	str	r2, [r3, #0]
            break;
 8016816:	e001      	b.n	801681c <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016818:	2305      	movs	r3, #5
 801681a:	e000      	b.n	801681e <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801681c:	2300      	movs	r3, #0
}
 801681e:	4618      	mov	r0, r3
 8016820:	370c      	adds	r7, #12
 8016822:	46bd      	mov	sp, r7
 8016824:	bc80      	pop	{r7}
 8016826:	4770      	bx	lr
 8016828:	20001728 	.word	0x20001728

0801682c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	4603      	mov	r3, r0
 8016834:	6039      	str	r1, [r7, #0]
 8016836:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016838:	2300      	movs	r3, #0
 801683a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801683c:	f107 020c 	add.w	r2, r7, #12
 8016840:	79fb      	ldrb	r3, [r7, #7]
 8016842:	4611      	mov	r1, r2
 8016844:	4618      	mov	r0, r3
 8016846:	f7ff ffb5 	bl	80167b4 <GetLastFcntDown>
 801684a:	4603      	mov	r3, r0
 801684c:	2b00      	cmp	r3, #0
 801684e:	d001      	beq.n	8016854 <CheckFCntDown+0x28>
    {
        return false;
 8016850:	2300      	movs	r3, #0
 8016852:	e00a      	b.n	801686a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	683a      	ldr	r2, [r7, #0]
 8016858:	429a      	cmp	r2, r3
 801685a:	d803      	bhi.n	8016864 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 801685c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016862:	d101      	bne.n	8016868 <CheckFCntDown+0x3c>
    {
        return true;
 8016864:	2301      	movs	r3, #1
 8016866:	e000      	b.n	801686a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016868:	2300      	movs	r3, #0
    }
}
 801686a:	4618      	mov	r0, r3
 801686c:	3710      	adds	r7, #16
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
	...

08016874 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016874:	b480      	push	{r7}
 8016876:	b083      	sub	sp, #12
 8016878:	af00      	add	r7, sp, #0
 801687a:	4603      	mov	r3, r0
 801687c:	6039      	str	r1, [r7, #0]
 801687e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016880:	79fb      	ldrb	r3, [r7, #7]
 8016882:	3b01      	subs	r3, #1
 8016884:	2b03      	cmp	r3, #3
 8016886:	d82b      	bhi.n	80168e0 <UpdateFCntDown+0x6c>
 8016888:	a201      	add	r2, pc, #4	; (adr r2, 8016890 <UpdateFCntDown+0x1c>)
 801688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801688e:	bf00      	nop
 8016890:	080168a1 	.word	0x080168a1
 8016894:	080168b3 	.word	0x080168b3
 8016898:	080168c5 	.word	0x080168c5
 801689c:	080168d7 	.word	0x080168d7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80168a0:	4b12      	ldr	r3, [pc, #72]	; (80168ec <UpdateFCntDown+0x78>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	683a      	ldr	r2, [r7, #0]
 80168a6:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80168a8:	4b10      	ldr	r3, [pc, #64]	; (80168ec <UpdateFCntDown+0x78>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	683a      	ldr	r2, [r7, #0]
 80168ae:	621a      	str	r2, [r3, #32]
            break;
 80168b0:	e017      	b.n	80168e2 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80168b2:	4b0e      	ldr	r3, [pc, #56]	; (80168ec <UpdateFCntDown+0x78>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	683a      	ldr	r2, [r7, #0]
 80168b8:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80168ba:	4b0c      	ldr	r3, [pc, #48]	; (80168ec <UpdateFCntDown+0x78>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	683a      	ldr	r2, [r7, #0]
 80168c0:	621a      	str	r2, [r3, #32]
            break;
 80168c2:	e00e      	b.n	80168e2 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80168c4:	4b09      	ldr	r3, [pc, #36]	; (80168ec <UpdateFCntDown+0x78>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	683a      	ldr	r2, [r7, #0]
 80168ca:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80168cc:	4b07      	ldr	r3, [pc, #28]	; (80168ec <UpdateFCntDown+0x78>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	683a      	ldr	r2, [r7, #0]
 80168d2:	621a      	str	r2, [r3, #32]
            break;
 80168d4:	e005      	b.n	80168e2 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80168d6:	4b05      	ldr	r3, [pc, #20]	; (80168ec <UpdateFCntDown+0x78>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	683a      	ldr	r2, [r7, #0]
 80168dc:	61da      	str	r2, [r3, #28]
            break;
 80168de:	e000      	b.n	80168e2 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80168e0:	bf00      	nop
    }
}
 80168e2:	bf00      	nop
 80168e4:	370c      	adds	r7, #12
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bc80      	pop	{r7}
 80168ea:	4770      	bx	lr
 80168ec:	20001728 	.word	0x20001728

080168f0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80168f0:	b480      	push	{r7}
 80168f2:	b083      	sub	sp, #12
 80168f4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80168f6:	4b18      	ldr	r3, [pc, #96]	; (8016958 <ResetFCnts+0x68>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2200      	movs	r2, #0
 80168fc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80168fe:	4b16      	ldr	r3, [pc, #88]	; (8016958 <ResetFCnts+0x68>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f04f 32ff 	mov.w	r2, #4294967295
 8016906:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016908:	4b13      	ldr	r3, [pc, #76]	; (8016958 <ResetFCnts+0x68>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	f04f 32ff 	mov.w	r2, #4294967295
 8016910:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016912:	4b11      	ldr	r3, [pc, #68]	; (8016958 <ResetFCnts+0x68>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f04f 32ff 	mov.w	r2, #4294967295
 801691a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801691c:	4b0e      	ldr	r3, [pc, #56]	; (8016958 <ResetFCnts+0x68>)
 801691e:	681a      	ldr	r2, [r3, #0]
 8016920:	4b0d      	ldr	r3, [pc, #52]	; (8016958 <ResetFCnts+0x68>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	6992      	ldr	r2, [r2, #24]
 8016926:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016928:	2300      	movs	r3, #0
 801692a:	607b      	str	r3, [r7, #4]
 801692c:	e00b      	b.n	8016946 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801692e:	4b0a      	ldr	r3, [pc, #40]	; (8016958 <ResetFCnts+0x68>)
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	3306      	adds	r3, #6
 8016936:	009b      	lsls	r3, r3, #2
 8016938:	4413      	add	r3, r2
 801693a:	f04f 32ff 	mov.w	r2, #4294967295
 801693e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	3301      	adds	r3, #1
 8016944:	607b      	str	r3, [r7, #4]
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2b00      	cmp	r3, #0
 801694a:	ddf0      	ble.n	801692e <ResetFCnts+0x3e>
    }
}
 801694c:	bf00      	nop
 801694e:	bf00      	nop
 8016950:	370c      	adds	r7, #12
 8016952:	46bd      	mov	sp, r7
 8016954:	bc80      	pop	{r7}
 8016956:	4770      	bx	lr
 8016958:	20001728 	.word	0x20001728

0801695c <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 801695c:	b480      	push	{r7}
 801695e:	b083      	sub	sp, #12
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016964:	4b06      	ldr	r3, [pc, #24]	; (8016980 <IsJoinNonce10xOk+0x24>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	689b      	ldr	r3, [r3, #8]
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	429a      	cmp	r2, r3
 801696e:	bf8c      	ite	hi
 8016970:	2301      	movhi	r3, #1
 8016972:	2300      	movls	r3, #0
 8016974:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016976:	4618      	mov	r0, r3
 8016978:	370c      	adds	r7, #12
 801697a:	46bd      	mov	sp, r7
 801697c:	bc80      	pop	{r7}
 801697e:	4770      	bx	lr
 8016980:	20001728 	.word	0x20001728

08016984 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d101      	bne.n	8016996 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016992:	2309      	movs	r3, #9
 8016994:	e01c      	b.n	80169d0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016996:	4a10      	ldr	r2, [pc, #64]	; (80169d8 <LoRaMacCryptoInit+0x54>)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801699c:	4b0e      	ldr	r3, [pc, #56]	; (80169d8 <LoRaMacCryptoInit+0x54>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2228      	movs	r2, #40	; 0x28
 80169a2:	2100      	movs	r1, #0
 80169a4:	4618      	mov	r0, r3
 80169a6:	f003 fa31 	bl	8019e0c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80169aa:	4b0b      	ldr	r3, [pc, #44]	; (80169d8 <LoRaMacCryptoInit+0x54>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2201      	movs	r2, #1
 80169b0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80169b2:	4b09      	ldr	r3, [pc, #36]	; (80169d8 <LoRaMacCryptoInit+0x54>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2201      	movs	r2, #1
 80169b8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80169ba:	4b07      	ldr	r3, [pc, #28]	; (80169d8 <LoRaMacCryptoInit+0x54>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2201      	movs	r2, #1
 80169c0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80169c2:	4b05      	ldr	r3, [pc, #20]	; (80169d8 <LoRaMacCryptoInit+0x54>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	2200      	movs	r2, #0
 80169c8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80169ca:	f7ff ff91 	bl	80168f0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80169ce:	2300      	movs	r3, #0
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3708      	adds	r7, #8
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}
 80169d8:	20001728 	.word	0x20001728

080169dc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80169dc:	b480      	push	{r7}
 80169de:	b083      	sub	sp, #12
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80169e4:	4b04      	ldr	r3, [pc, #16]	; (80169f8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	687a      	ldr	r2, [r7, #4]
 80169ea:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80169ec:	2300      	movs	r3, #0
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	370c      	adds	r7, #12
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bc80      	pop	{r7}
 80169f6:	4770      	bx	lr
 80169f8:	20001728 	.word	0x20001728

080169fc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80169fc:	b480      	push	{r7}
 80169fe:	b083      	sub	sp, #12
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d101      	bne.n	8016a0e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a0a:	230a      	movs	r3, #10
 8016a0c:	e006      	b.n	8016a1c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016a0e:	4b06      	ldr	r3, [pc, #24]	; (8016a28 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	1c5a      	adds	r2, r3, #1
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a1a:	2300      	movs	r3, #0
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	370c      	adds	r7, #12
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bc80      	pop	{r7}
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop
 8016a28:	20001728 	.word	0x20001728

08016a2c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016a30:	b08a      	sub	sp, #40	; 0x28
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	613a      	str	r2, [r7, #16]
 8016a36:	60fb      	str	r3, [r7, #12]
 8016a38:	4603      	mov	r3, r0
 8016a3a:	75fb      	strb	r3, [r7, #23]
 8016a3c:	460b      	mov	r3, r1
 8016a3e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016a40:	2300      	movs	r3, #0
 8016a42:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016a44:	2300      	movs	r3, #0
 8016a46:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016a48:	2313      	movs	r3, #19
 8016a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d101      	bne.n	8016a58 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a54:	230a      	movs	r3, #10
 8016a56:	e057      	b.n	8016b08 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016a58:	f107 021c 	add.w	r2, r7, #28
 8016a5c:	7dfb      	ldrb	r3, [r7, #23]
 8016a5e:	4611      	mov	r1, r2
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7ff fea7 	bl	80167b4 <GetLastFcntDown>
 8016a66:	4603      	mov	r3, r0
 8016a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d002      	beq.n	8016a7a <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016a74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016a78:	e046      	b.n	8016b08 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a80:	d103      	bne.n	8016a8a <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	693a      	ldr	r2, [r7, #16]
 8016a86:	601a      	str	r2, [r3, #0]
 8016a88:	e01e      	b.n	8016ac8 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	693a      	ldr	r2, [r7, #16]
 8016a90:	1ad3      	subs	r3, r2, r3
 8016a92:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	dd05      	ble.n	8016aa6 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016a9a:	69fa      	ldr	r2, [r7, #28]
 8016a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9e:	441a      	add	r2, r3
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	601a      	str	r2, [r3, #0]
 8016aa4:	e010      	b.n	8016ac8 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d104      	bne.n	8016ab6 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016aac:	69fa      	ldr	r2, [r7, #28]
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016ab2:	2307      	movs	r3, #7
 8016ab4:	e028      	b.n	8016b08 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	0c1b      	lsrs	r3, r3, #16
 8016aba:	041b      	lsls	r3, r3, #16
 8016abc:	693a      	ldr	r2, [r7, #16]
 8016abe:	4413      	add	r3, r2
 8016ac0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016ac8:	4b12      	ldr	r3, [pc, #72]	; (8016b14 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	789b      	ldrb	r3, [r3, #2]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d119      	bne.n	8016b06 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	603b      	str	r3, [r7, #0]
 8016ada:	607a      	str	r2, [r7, #4]
 8016adc:	69fb      	ldr	r3, [r7, #28]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	469a      	mov	sl, r3
 8016ae2:	4693      	mov	fp, r2
 8016ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ae8:	4611      	mov	r1, r2
 8016aea:	ebb1 040a 	subs.w	r4, r1, sl
 8016aee:	eb63 050b 	sbc.w	r5, r3, fp
 8016af2:	8abb      	ldrh	r3, [r7, #20]
 8016af4:	2200      	movs	r2, #0
 8016af6:	4698      	mov	r8, r3
 8016af8:	4691      	mov	r9, r2
 8016afa:	4544      	cmp	r4, r8
 8016afc:	eb75 0309 	sbcs.w	r3, r5, r9
 8016b00:	db01      	blt.n	8016b06 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016b02:	2308      	movs	r3, #8
 8016b04:	e000      	b.n	8016b08 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b06:	2300      	movs	r3, #0
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3728      	adds	r7, #40	; 0x28
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b12:	bf00      	nop
 8016b14:	20001728 	.word	0x20001728

08016b18 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b085      	sub	sp, #20
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d101      	bne.n	8016b2a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b26:	230a      	movs	r3, #10
 8016b28:	e019      	b.n	8016b5e <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	60fb      	str	r3, [r7, #12]
 8016b2e:	e012      	b.n	8016b56 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016b30:	4b0d      	ldr	r3, [pc, #52]	; (8016b68 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016b32:	6819      	ldr	r1, [r3, #0]
 8016b34:	68fa      	ldr	r2, [r7, #12]
 8016b36:	4613      	mov	r3, r2
 8016b38:	005b      	lsls	r3, r3, #1
 8016b3a:	4413      	add	r3, r2
 8016b3c:	011b      	lsls	r3, r3, #4
 8016b3e:	461a      	mov	r2, r3
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	4413      	add	r3, r2
 8016b44:	68fa      	ldr	r2, [r7, #12]
 8016b46:	3206      	adds	r2, #6
 8016b48:	0092      	lsls	r2, r2, #2
 8016b4a:	440a      	add	r2, r1
 8016b4c:	3204      	adds	r2, #4
 8016b4e:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	3301      	adds	r3, #1
 8016b54:	60fb      	str	r3, [r7, #12]
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dde9      	ble.n	8016b30 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3714      	adds	r7, #20
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bc80      	pop	{r7}
 8016b66:	4770      	bx	lr
 8016b68:	20001728 	.word	0x20001728

08016b6c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	4603      	mov	r3, r0
 8016b74:	6039      	str	r1, [r7, #0]
 8016b76:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016b78:	79fb      	ldrb	r3, [r7, #7]
 8016b7a:	6839      	ldr	r1, [r7, #0]
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f7f8 faef 	bl	800f160 <SecureElementSetKey>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d001      	beq.n	8016b8c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b88:	230f      	movs	r3, #15
 8016b8a:	e021      	b.n	8016bd0 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016b8c:	79fb      	ldrb	r3, [r7, #7]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d11d      	bne.n	8016bce <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016b92:	4b11      	ldr	r3, [pc, #68]	; (8016bd8 <LoRaMacCryptoSetKey+0x6c>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	789b      	ldrb	r3, [r3, #2]
 8016b98:	210b      	movs	r1, #11
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f000 fa5e 	bl	801705c <LoRaMacCryptoDeriveLifeTimeKey>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d001      	beq.n	8016baa <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ba6:	230f      	movs	r3, #15
 8016ba8:	e012      	b.n	8016bd0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016baa:	210c      	movs	r1, #12
 8016bac:	2000      	movs	r0, #0
 8016bae:	f000 fa55 	bl	801705c <LoRaMacCryptoDeriveLifeTimeKey>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d001      	beq.n	8016bbc <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016bb8:	230f      	movs	r3, #15
 8016bba:	e009      	b.n	8016bd0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016bbc:	210a      	movs	r1, #10
 8016bbe:	2000      	movs	r0, #0
 8016bc0:	f000 fa4c 	bl	801705c <LoRaMacCryptoDeriveLifeTimeKey>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d001      	beq.n	8016bce <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016bca:	230f      	movs	r3, #15
 8016bcc:	e000      	b.n	8016bd0 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016bce:	2300      	movs	r3, #0
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3708      	adds	r7, #8
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	20001728 	.word	0x20001728

08016bdc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b086      	sub	sp, #24
 8016be0:	af02      	add	r7, sp, #8
 8016be2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d101      	bne.n	8016bee <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016bea:	230a      	movs	r3, #10
 8016bec:	e033      	b.n	8016c56 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016bee:	2301      	movs	r3, #1
 8016bf0:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016bf6:	f107 0308 	add.w	r3, r7, #8
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f8 fc8a 	bl	800f514 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016c00:	68ba      	ldr	r2, [r7, #8]
 8016c02:	4b17      	ldr	r3, [pc, #92]	; (8016c60 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	b292      	uxth	r2, r2
 8016c08:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016c0a:	4b15      	ldr	r3, [pc, #84]	; (8016c60 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	889a      	ldrh	r2, [r3, #4]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f000 fc1b 	bl	8017450 <LoRaMacSerializerJoinRequest>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d001      	beq.n	8016c24 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016c20:	2311      	movs	r3, #17
 8016c22:	e018      	b.n	8016c56 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6819      	ldr	r1, [r3, #0]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	3318      	adds	r3, #24
 8016c2c:	7bfa      	ldrb	r2, [r7, #15]
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	4613      	mov	r3, r2
 8016c32:	2213      	movs	r2, #19
 8016c34:	2000      	movs	r0, #0
 8016c36:	f7f8 faf1 	bl	800f21c <SecureElementComputeAesCmac>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d001      	beq.n	8016c44 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c40:	230f      	movs	r3, #15
 8016c42:	e008      	b.n	8016c56 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f000 fc03 	bl	8017450 <LoRaMacSerializerJoinRequest>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d001      	beq.n	8016c54 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016c50:	2311      	movs	r3, #17
 8016c52:	e000      	b.n	8016c56 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c54:	2300      	movs	r3, #0
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3710      	adds	r7, #16
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	20001728 	.word	0x20001728

08016c64 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016c64:	b590      	push	{r4, r7, lr}
 8016c66:	b097      	sub	sp, #92	; 0x5c
 8016c68:	af04      	add	r7, sp, #16
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	60b9      	str	r1, [r7, #8]
 8016c6e:	607a      	str	r2, [r7, #4]
 8016c70:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d002      	beq.n	8016c7e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d101      	bne.n	8016c82 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c7e:	230a      	movs	r3, #10
 8016c80:	e0d3      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016c82:	2313      	movs	r3, #19
 8016c84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016c88:	2300      	movs	r3, #0
 8016c8a:	617b      	str	r3, [r7, #20]
 8016c8c:	f107 0318 	add.w	r3, r7, #24
 8016c90:	221d      	movs	r2, #29
 8016c92:	2100      	movs	r1, #0
 8016c94:	4618      	mov	r0, r3
 8016c96:	f007 fe9b 	bl	801e9d0 <memset>
    uint8_t versionMinor         = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016c9e:	4b65      	ldr	r3, [pc, #404]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	889b      	ldrh	r3, [r3, #4]
 8016ca4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681c      	ldr	r4, [r3, #0]
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	791b      	ldrb	r3, [r3, #4]
 8016cb0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016cb4:	7bf8      	ldrb	r0, [r7, #15]
 8016cb6:	f107 0213 	add.w	r2, r7, #19
 8016cba:	9202      	str	r2, [sp, #8]
 8016cbc:	f107 0214 	add.w	r2, r7, #20
 8016cc0:	9201      	str	r2, [sp, #4]
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	4623      	mov	r3, r4
 8016cc6:	460a      	mov	r2, r1
 8016cc8:	68b9      	ldr	r1, [r7, #8]
 8016cca:	f7f8 fbad 	bl	800f428 <SecureElementProcessJoinAccept>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d001      	beq.n	8016cd8 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cd4:	230f      	movs	r3, #15
 8016cd6:	e0a8      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6818      	ldr	r0, [r3, #0]
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	791b      	ldrb	r3, [r3, #4]
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	f107 0314 	add.w	r3, r7, #20
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	f003 f855 	bl	8019d96 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f000 f9f0 	bl	80170d2 <LoRaMacParserJoinAccept>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d001      	beq.n	8016cfc <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016cf8:	2310      	movs	r3, #16
 8016cfa:	e096      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	799b      	ldrb	r3, [r3, #6]
 8016d06:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	79db      	ldrb	r3, [r3, #7]
 8016d0c:	021b      	lsls	r3, r3, #8
 8016d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d10:	4313      	orrs	r3, r2
 8016d12:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	7a1b      	ldrb	r3, [r3, #8]
 8016d18:	041b      	lsls	r3, r3, #16
 8016d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d1c:	4313      	orrs	r3, r2
 8016d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016d20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d22:	f7ff fe1b 	bl	801695c <IsJoinNonce10xOk>
 8016d26:	4603      	mov	r3, r0
 8016d28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d010      	beq.n	8016d56 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016d34:	4b3f      	ldr	r3, [pc, #252]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d3a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016d3c:	7cfb      	ldrb	r3, [r7, #19]
 8016d3e:	210b      	movs	r1, #11
 8016d40:	4618      	mov	r0, r3
 8016d42:	f000 f98b 	bl	801705c <LoRaMacCryptoDeriveLifeTimeKey>
 8016d46:	4603      	mov	r3, r0
 8016d48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d005      	beq.n	8016d60 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016d54:	e001      	b.n	8016d5a <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016d56:	2303      	movs	r3, #3
 8016d58:	e067      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d5e:	e064      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016d60:	210c      	movs	r1, #12
 8016d62:	2000      	movs	r0, #0
 8016d64:	f000 f97a 	bl	801705c <LoRaMacCryptoDeriveLifeTimeKey>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016d6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d002      	beq.n	8016d7c <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016d76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d7a:	e056      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016d7c:	210a      	movs	r1, #10
 8016d7e:	2000      	movs	r0, #0
 8016d80:	f000 f96c 	bl	801705c <LoRaMacCryptoDeriveLifeTimeKey>
 8016d84:	4603      	mov	r3, r0
 8016d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016d8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d002      	beq.n	8016d98 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016d92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d96:	e048      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	7a5b      	ldrb	r3, [r3, #9]
 8016d9c:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	7a9b      	ldrb	r3, [r3, #10]
 8016da2:	021b      	lsls	r3, r3, #8
 8016da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016da6:	4313      	orrs	r3, r2
 8016da8:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	7adb      	ldrb	r3, [r3, #11]
 8016dae:	041b      	lsls	r3, r3, #16
 8016db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016db2:	4313      	orrs	r3, r2
 8016db4:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016db6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016dbe:	2009      	movs	r0, #9
 8016dc0:	f7ff fca8 	bl	8016714 <DeriveSessionKey10x>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d002      	beq.n	8016dd8 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016dd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dd6:	e028      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016dd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016de0:	2008      	movs	r0, #8
 8016de2:	f7ff fc97 	bl	8016714 <DeriveSessionKey10x>
 8016de6:	4603      	mov	r3, r0
 8016de8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d002      	beq.n	8016dfa <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016df4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016df8:	e017      	b.n	8016e2a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016dfa:	4b0e      	ldr	r3, [pc, #56]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	7cfa      	ldrb	r2, [r7, #19]
 8016e00:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e02:	4b0c      	ldr	r3, [pc, #48]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	2200      	movs	r2, #0
 8016e08:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e0a:	4b0a      	ldr	r3, [pc, #40]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e12:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e14:	4b07      	ldr	r3, [pc, #28]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	f04f 32ff 	mov.w	r2, #4294967295
 8016e1c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e1e:	4b05      	ldr	r3, [pc, #20]	; (8016e34 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f04f 32ff 	mov.w	r2, #4294967295
 8016e26:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016e28:	2300      	movs	r3, #0
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	374c      	adds	r7, #76	; 0x4c
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd90      	pop	{r4, r7, pc}
 8016e32:	bf00      	nop
 8016e34:	20001728 	.word	0x20001728

08016e38 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016e38:	b590      	push	{r4, r7, lr}
 8016e3a:	b08b      	sub	sp, #44	; 0x2c
 8016e3c:	af04      	add	r7, sp, #16
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	607b      	str	r3, [r7, #4]
 8016e42:	460b      	mov	r3, r1
 8016e44:	72fb      	strb	r3, [r7, #11]
 8016e46:	4613      	mov	r3, r2
 8016e48:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016e4a:	2313      	movs	r3, #19
 8016e4c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016e4e:	2309      	movs	r3, #9
 8016e50:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d101      	bne.n	8016e5c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016e58:	230a      	movs	r3, #10
 8016e5a:	e05f      	b.n	8016f1c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016e5c:	4b31      	ldr	r3, [pc, #196]	; (8016f24 <LoRaMacCryptoSecureMessage+0xec>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	429a      	cmp	r2, r3
 8016e66:	d201      	bcs.n	8016e6c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016e68:	2306      	movs	r3, #6
 8016e6a:	e057      	b.n	8016f1c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d101      	bne.n	8016e7a <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016e76:	2308      	movs	r3, #8
 8016e78:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016e7a:	4b2a      	ldr	r3, [pc, #168]	; (8016f24 <LoRaMacCryptoSecureMessage+0xec>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	68fa      	ldr	r2, [r7, #12]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d916      	bls.n	8016eb4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016e90:	b219      	sxth	r1, r3
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	689c      	ldr	r4, [r3, #8]
 8016e96:	7dfa      	ldrb	r2, [r7, #23]
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	9301      	str	r3, [sp, #4]
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	4623      	mov	r3, r4
 8016ea2:	f7ff fa43 	bl	801632c <PayloadEncrypt>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016eaa:	7dbb      	ldrb	r3, [r7, #22]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d001      	beq.n	8016eb4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016eb0:	7dbb      	ldrb	r3, [r7, #22]
 8016eb2:	e033      	b.n	8016f1c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f000 fb4d 	bl	8017554 <LoRaMacSerializerData>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d001      	beq.n	8016ec4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ec0:	2311      	movs	r3, #17
 8016ec2:	e02b      	b.n	8016f1c <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016ec4:	2308      	movs	r3, #8
 8016ec6:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6818      	ldr	r0, [r3, #0]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	791b      	ldrb	r3, [r3, #4]
 8016ed0:	b29b      	uxth	r3, r3
 8016ed2:	3b04      	subs	r3, #4
 8016ed4:	b299      	uxth	r1, r3
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	689b      	ldr	r3, [r3, #8]
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	322c      	adds	r2, #44	; 0x2c
 8016ede:	7dfc      	ldrb	r4, [r7, #23]
 8016ee0:	9203      	str	r2, [sp, #12]
 8016ee2:	68fa      	ldr	r2, [r7, #12]
 8016ee4:	9202      	str	r2, [sp, #8]
 8016ee6:	9301      	str	r3, [sp, #4]
 8016ee8:	2300      	movs	r3, #0
 8016eea:	9300      	str	r3, [sp, #0]
 8016eec:	2300      	movs	r3, #0
 8016eee:	4622      	mov	r2, r4
 8016ef0:	f7ff fb1d 	bl	801652e <ComputeCmacB0>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ef8:	7dbb      	ldrb	r3, [r7, #22]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d001      	beq.n	8016f02 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016efe:	7dbb      	ldrb	r3, [r7, #22]
 8016f00:	e00c      	b.n	8016f1c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f000 fb26 	bl	8017554 <LoRaMacSerializerData>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d001      	beq.n	8016f12 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f0e:	2311      	movs	r3, #17
 8016f10:	e004      	b.n	8016f1c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f12:	4b04      	ldr	r3, [pc, #16]	; (8016f24 <LoRaMacCryptoSecureMessage+0xec>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	68fa      	ldr	r2, [r7, #12]
 8016f18:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f1a:	2300      	movs	r3, #0
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	371c      	adds	r7, #28
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd90      	pop	{r4, r7, pc}
 8016f24:	20001728 	.word	0x20001728

08016f28 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016f28:	b590      	push	{r4, r7, lr}
 8016f2a:	b08b      	sub	sp, #44	; 0x2c
 8016f2c:	af04      	add	r7, sp, #16
 8016f2e:	60b9      	str	r1, [r7, #8]
 8016f30:	607b      	str	r3, [r7, #4]
 8016f32:	4603      	mov	r3, r0
 8016f34:	73fb      	strb	r3, [r7, #15]
 8016f36:	4613      	mov	r3, r2
 8016f38:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d101      	bne.n	8016f44 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f40:	230a      	movs	r3, #10
 8016f42:	e084      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016f44:	7bbb      	ldrb	r3, [r7, #14]
 8016f46:	6879      	ldr	r1, [r7, #4]
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f7ff fc6f 	bl	801682c <CheckFCntDown>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	f083 0301 	eor.w	r3, r3, #1
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d001      	beq.n	8016f5e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016f5a:	2306      	movs	r3, #6
 8016f5c:	e077      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016f5e:	2313      	movs	r3, #19
 8016f60:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016f62:	2309      	movs	r3, #9
 8016f64:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016f66:	2308      	movs	r3, #8
 8016f68:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f6c:	f000 f97c 	bl	8017268 <LoRaMacParserData>
 8016f70:	4603      	mov	r3, r0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d001      	beq.n	8016f7a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016f76:	2310      	movs	r3, #16
 8016f78:	e069      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016f7a:	f107 0210 	add.w	r2, r7, #16
 8016f7e:	7bfb      	ldrb	r3, [r7, #15]
 8016f80:	4611      	mov	r1, r2
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7ff fba0 	bl	80166c8 <GetKeyAddrItem>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f8c:	7d7b      	ldrb	r3, [r7, #21]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d001      	beq.n	8016f96 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016f92:	7d7b      	ldrb	r3, [r7, #21]
 8016f94:	e05b      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	785b      	ldrb	r3, [r3, #1]
 8016f9a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016f9c:	693b      	ldr	r3, [r7, #16]
 8016f9e:	789b      	ldrb	r3, [r3, #2]
 8016fa0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa4:	689b      	ldr	r3, [r3, #8]
 8016fa6:	68ba      	ldr	r2, [r7, #8]
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d001      	beq.n	8016fb0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016fac:	2302      	movs	r3, #2
 8016fae:	e04e      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb2:	7b1b      	ldrb	r3, [r3, #12]
 8016fb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	bf14      	ite	ne
 8016fbe:	2301      	movne	r3, #1
 8016fc0:	2300      	moveq	r3, #0
 8016fc2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016fc4:	4b24      	ldr	r3, [pc, #144]	; (8017058 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	789b      	ldrb	r3, [r3, #2]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d101      	bne.n	8016fd2 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd4:	6818      	ldr	r0, [r3, #0]
 8016fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd8:	791b      	ldrb	r3, [r3, #4]
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	3b04      	subs	r3, #4
 8016fde:	b299      	uxth	r1, r3
 8016fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fe4:	7dbc      	ldrb	r4, [r7, #22]
 8016fe6:	7d3a      	ldrb	r2, [r7, #20]
 8016fe8:	9303      	str	r3, [sp, #12]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	9302      	str	r3, [sp, #8]
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	9301      	str	r3, [sp, #4]
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	9300      	str	r3, [sp, #0]
 8016ff6:	4623      	mov	r3, r4
 8016ff8:	f7ff fad7 	bl	80165aa <VerifyCmacB0>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017000:	7d7b      	ldrb	r3, [r7, #21]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8017006:	7d7b      	ldrb	r3, [r7, #21]
 8017008:	e021      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d101      	bne.n	8017018 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017014:	2308      	movs	r3, #8
 8017016:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017022:	b219      	sxth	r1, r3
 8017024:	7dfa      	ldrb	r2, [r7, #23]
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	9301      	str	r3, [sp, #4]
 801702a:	2301      	movs	r3, #1
 801702c:	9300      	str	r3, [sp, #0]
 801702e:	68bb      	ldr	r3, [r7, #8]
 8017030:	f7ff f97c 	bl	801632c <PayloadEncrypt>
 8017034:	4603      	mov	r3, r0
 8017036:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017038:	7d7b      	ldrb	r3, [r7, #21]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d001      	beq.n	8017042 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801703e:	7d7b      	ldrb	r3, [r7, #21]
 8017040:	e005      	b.n	801704e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8017042:	7bbb      	ldrb	r3, [r7, #14]
 8017044:	6879      	ldr	r1, [r7, #4]
 8017046:	4618      	mov	r0, r3
 8017048:	f7ff fc14 	bl	8016874 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801704c:	2300      	movs	r3, #0
}
 801704e:	4618      	mov	r0, r3
 8017050:	371c      	adds	r7, #28
 8017052:	46bd      	mov	sp, r7
 8017054:	bd90      	pop	{r4, r7, pc}
 8017056:	bf00      	nop
 8017058:	20001728 	.word	0x20001728

0801705c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b088      	sub	sp, #32
 8017060:	af00      	add	r7, sp, #0
 8017062:	4603      	mov	r3, r0
 8017064:	460a      	mov	r2, r1
 8017066:	71fb      	strb	r3, [r7, #7]
 8017068:	4613      	mov	r3, r2
 801706a:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 801706c:	2300      	movs	r3, #0
 801706e:	60fb      	str	r3, [r7, #12]
 8017070:	f107 0310 	add.w	r3, r7, #16
 8017074:	2200      	movs	r2, #0
 8017076:	601a      	str	r2, [r3, #0]
 8017078:	605a      	str	r2, [r3, #4]
 801707a:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 801707c:	2300      	movs	r3, #0
 801707e:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8017080:	79bb      	ldrb	r3, [r7, #6]
 8017082:	2b0c      	cmp	r3, #12
 8017084:	d00b      	beq.n	801709e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017086:	2b0c      	cmp	r3, #12
 8017088:	dc0f      	bgt.n	80170aa <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 801708a:	2b0a      	cmp	r3, #10
 801708c:	d00a      	beq.n	80170a4 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801708e:	2b0b      	cmp	r3, #11
 8017090:	d10b      	bne.n	80170aa <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8017092:	79fb      	ldrb	r3, [r7, #7]
 8017094:	2b01      	cmp	r3, #1
 8017096:	d10a      	bne.n	80170ae <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017098:	2320      	movs	r3, #32
 801709a:	733b      	strb	r3, [r7, #12]
            }
            break;
 801709c:	e007      	b.n	80170ae <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801709e:	230b      	movs	r3, #11
 80170a0:	77fb      	strb	r3, [r7, #31]
            break;
 80170a2:	e005      	b.n	80170b0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80170a4:	2330      	movs	r3, #48	; 0x30
 80170a6:	733b      	strb	r3, [r7, #12]
            break;
 80170a8:	e002      	b.n	80170b0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80170aa:	230b      	movs	r3, #11
 80170ac:	e00d      	b.n	80170ca <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80170ae:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80170b0:	79ba      	ldrb	r2, [r7, #6]
 80170b2:	7ff9      	ldrb	r1, [r7, #31]
 80170b4:	f107 030c 	add.w	r3, r7, #12
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7f8 f975 	bl	800f3a8 <SecureElementDeriveAndStoreKey>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d001      	beq.n	80170c8 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80170c4:	230f      	movs	r3, #15
 80170c6:	e000      	b.n	80170ca <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80170c8:	2300      	movs	r3, #0
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	3720      	adds	r7, #32
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd80      	pop	{r7, pc}

080170d2 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80170d2:	b580      	push	{r7, lr}
 80170d4:	b084      	sub	sp, #16
 80170d6:	af00      	add	r7, sp, #0
 80170d8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d003      	beq.n	80170e8 <LoRaMacParserJoinAccept+0x16>
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d101      	bne.n	80170ec <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80170e8:	2302      	movs	r3, #2
 80170ea:	e0b9      	b.n	8017260 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80170ec:	2300      	movs	r3, #0
 80170ee:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	89fb      	ldrh	r3, [r7, #14]
 80170f6:	1c59      	adds	r1, r3, #1
 80170f8:	81f9      	strh	r1, [r7, #14]
 80170fa:	4413      	add	r3, r2
 80170fc:	781a      	ldrb	r2, [r3, #0]
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	1d98      	adds	r0, r3, #6
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681a      	ldr	r2, [r3, #0]
 801710a:	89fb      	ldrh	r3, [r7, #14]
 801710c:	4413      	add	r3, r2
 801710e:	2203      	movs	r2, #3
 8017110:	4619      	mov	r1, r3
 8017112:	f002 fe40 	bl	8019d96 <memcpy1>
    bufItr = bufItr + 3;
 8017116:	89fb      	ldrh	r3, [r7, #14]
 8017118:	3303      	adds	r3, #3
 801711a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f103 0009 	add.w	r0, r3, #9
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	89fb      	ldrh	r3, [r7, #14]
 8017128:	4413      	add	r3, r2
 801712a:	2203      	movs	r2, #3
 801712c:	4619      	mov	r1, r3
 801712e:	f002 fe32 	bl	8019d96 <memcpy1>
    bufItr = bufItr + 3;
 8017132:	89fb      	ldrh	r3, [r7, #14]
 8017134:	3303      	adds	r3, #3
 8017136:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681a      	ldr	r2, [r3, #0]
 801713c:	89fb      	ldrh	r3, [r7, #14]
 801713e:	1c59      	adds	r1, r3, #1
 8017140:	81f9      	strh	r1, [r7, #14]
 8017142:	4413      	add	r3, r2
 8017144:	781b      	ldrb	r3, [r3, #0]
 8017146:	461a      	mov	r2, r3
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681a      	ldr	r2, [r3, #0]
 8017150:	89fb      	ldrh	r3, [r7, #14]
 8017152:	1c59      	adds	r1, r3, #1
 8017154:	81f9      	strh	r1, [r7, #14]
 8017156:	4413      	add	r3, r2
 8017158:	781b      	ldrb	r3, [r3, #0]
 801715a:	021a      	lsls	r2, r3, #8
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	68db      	ldr	r3, [r3, #12]
 8017160:	431a      	orrs	r2, r3
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	89fb      	ldrh	r3, [r7, #14]
 801716c:	1c59      	adds	r1, r3, #1
 801716e:	81f9      	strh	r1, [r7, #14]
 8017170:	4413      	add	r3, r2
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	041a      	lsls	r2, r3, #16
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	68db      	ldr	r3, [r3, #12]
 801717a:	431a      	orrs	r2, r3
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	89fb      	ldrh	r3, [r7, #14]
 8017186:	1c59      	adds	r1, r3, #1
 8017188:	81f9      	strh	r1, [r7, #14]
 801718a:	4413      	add	r3, r2
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	061a      	lsls	r2, r3, #24
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	68db      	ldr	r3, [r3, #12]
 8017194:	431a      	orrs	r2, r3
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	89fb      	ldrh	r3, [r7, #14]
 80171a0:	1c59      	adds	r1, r3, #1
 80171a2:	81f9      	strh	r1, [r7, #14]
 80171a4:	4413      	add	r3, r2
 80171a6:	781a      	ldrb	r2, [r3, #0]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	89fb      	ldrh	r3, [r7, #14]
 80171b2:	1c59      	adds	r1, r3, #1
 80171b4:	81f9      	strh	r1, [r7, #14]
 80171b6:	4413      	add	r3, r2
 80171b8:	781a      	ldrb	r2, [r3, #0]
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	791b      	ldrb	r3, [r3, #4]
 80171c2:	1f1a      	subs	r2, r3, #4
 80171c4:	89fb      	ldrh	r3, [r7, #14]
 80171c6:	1ad3      	subs	r3, r2, r3
 80171c8:	2b10      	cmp	r3, #16
 80171ca:	d10e      	bne.n	80171ea <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f103 0012 	add.w	r0, r3, #18
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	89fb      	ldrh	r3, [r7, #14]
 80171d8:	4413      	add	r3, r2
 80171da:	2210      	movs	r2, #16
 80171dc:	4619      	mov	r1, r3
 80171de:	f002 fdda 	bl	8019d96 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80171e2:	89fb      	ldrh	r3, [r7, #14]
 80171e4:	3310      	adds	r3, #16
 80171e6:	81fb      	strh	r3, [r7, #14]
 80171e8:	e008      	b.n	80171fc <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	791b      	ldrb	r3, [r3, #4]
 80171ee:	1f1a      	subs	r2, r3, #4
 80171f0:	89fb      	ldrh	r3, [r7, #14]
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	dd01      	ble.n	80171fc <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80171f8:	2301      	movs	r3, #1
 80171fa:	e031      	b.n	8017260 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	89fb      	ldrh	r3, [r7, #14]
 8017202:	1c59      	adds	r1, r3, #1
 8017204:	81f9      	strh	r1, [r7, #14]
 8017206:	4413      	add	r3, r2
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	461a      	mov	r2, r3
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681a      	ldr	r2, [r3, #0]
 8017214:	89fb      	ldrh	r3, [r7, #14]
 8017216:	1c59      	adds	r1, r3, #1
 8017218:	81f9      	strh	r1, [r7, #14]
 801721a:	4413      	add	r3, r2
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	021a      	lsls	r2, r3, #8
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017224:	431a      	orrs	r2, r3
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681a      	ldr	r2, [r3, #0]
 801722e:	89fb      	ldrh	r3, [r7, #14]
 8017230:	1c59      	adds	r1, r3, #1
 8017232:	81f9      	strh	r1, [r7, #14]
 8017234:	4413      	add	r3, r2
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	041a      	lsls	r2, r3, #16
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801723e:	431a      	orrs	r2, r3
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	89fb      	ldrh	r3, [r7, #14]
 801724a:	1c59      	adds	r1, r3, #1
 801724c:	81f9      	strh	r1, [r7, #14]
 801724e:	4413      	add	r3, r2
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	061a      	lsls	r2, r3, #24
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017258:	431a      	orrs	r2, r3
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801725e:	2300      	movs	r3, #0
}
 8017260:	4618      	mov	r0, r3
 8017262:	3710      	adds	r7, #16
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}

08017268 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d003      	beq.n	801727e <LoRaMacParserData+0x16>
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d101      	bne.n	8017282 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801727e:	2302      	movs	r3, #2
 8017280:	e0e2      	b.n	8017448 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8017282:	2300      	movs	r3, #0
 8017284:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681a      	ldr	r2, [r3, #0]
 801728a:	89fb      	ldrh	r3, [r7, #14]
 801728c:	1c59      	adds	r1, r3, #1
 801728e:	81f9      	strh	r1, [r7, #14]
 8017290:	4413      	add	r3, r2
 8017292:	781a      	ldrb	r2, [r3, #0]
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681a      	ldr	r2, [r3, #0]
 801729c:	89fb      	ldrh	r3, [r7, #14]
 801729e:	1c59      	adds	r1, r3, #1
 80172a0:	81f9      	strh	r1, [r7, #14]
 80172a2:	4413      	add	r3, r2
 80172a4:	781b      	ldrb	r3, [r3, #0]
 80172a6:	461a      	mov	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681a      	ldr	r2, [r3, #0]
 80172b0:	89fb      	ldrh	r3, [r7, #14]
 80172b2:	1c59      	adds	r1, r3, #1
 80172b4:	81f9      	strh	r1, [r7, #14]
 80172b6:	4413      	add	r3, r2
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	021a      	lsls	r2, r3, #8
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	689b      	ldr	r3, [r3, #8]
 80172c0:	431a      	orrs	r2, r3
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	89fb      	ldrh	r3, [r7, #14]
 80172cc:	1c59      	adds	r1, r3, #1
 80172ce:	81f9      	strh	r1, [r7, #14]
 80172d0:	4413      	add	r3, r2
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	041a      	lsls	r2, r3, #16
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	689b      	ldr	r3, [r3, #8]
 80172da:	431a      	orrs	r2, r3
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	89fb      	ldrh	r3, [r7, #14]
 80172e6:	1c59      	adds	r1, r3, #1
 80172e8:	81f9      	strh	r1, [r7, #14]
 80172ea:	4413      	add	r3, r2
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	061a      	lsls	r2, r3, #24
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	689b      	ldr	r3, [r3, #8]
 80172f4:	431a      	orrs	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681a      	ldr	r2, [r3, #0]
 80172fe:	89fb      	ldrh	r3, [r7, #14]
 8017300:	1c59      	adds	r1, r3, #1
 8017302:	81f9      	strh	r1, [r7, #14]
 8017304:	4413      	add	r3, r2
 8017306:	781a      	ldrb	r2, [r3, #0]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681a      	ldr	r2, [r3, #0]
 8017310:	89fb      	ldrh	r3, [r7, #14]
 8017312:	1c59      	adds	r1, r3, #1
 8017314:	81f9      	strh	r1, [r7, #14]
 8017316:	4413      	add	r3, r2
 8017318:	781b      	ldrb	r3, [r3, #0]
 801731a:	b29a      	uxth	r2, r3
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681a      	ldr	r2, [r3, #0]
 8017324:	89fb      	ldrh	r3, [r7, #14]
 8017326:	1c59      	adds	r1, r3, #1
 8017328:	81f9      	strh	r1, [r7, #14]
 801732a:	4413      	add	r3, r2
 801732c:	781b      	ldrb	r3, [r3, #0]
 801732e:	0219      	lsls	r1, r3, #8
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	89db      	ldrh	r3, [r3, #14]
 8017334:	b21a      	sxth	r2, r3
 8017336:	b20b      	sxth	r3, r1
 8017338:	4313      	orrs	r3, r2
 801733a:	b21b      	sxth	r3, r3
 801733c:	b29a      	uxth	r2, r3
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	f103 0010 	add.w	r0, r3, #16
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681a      	ldr	r2, [r3, #0]
 801734c:	89fb      	ldrh	r3, [r7, #14]
 801734e:	18d1      	adds	r1, r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	7b1b      	ldrb	r3, [r3, #12]
 8017354:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017358:	b2db      	uxtb	r3, r3
 801735a:	b29b      	uxth	r3, r3
 801735c:	461a      	mov	r2, r3
 801735e:	f002 fd1a 	bl	8019d96 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	7b1b      	ldrb	r3, [r3, #12]
 8017366:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801736a:	b2db      	uxtb	r3, r3
 801736c:	b29a      	uxth	r2, r3
 801736e:	89fb      	ldrh	r3, [r7, #14]
 8017370:	4413      	add	r3, r2
 8017372:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2200      	movs	r2, #0
 8017378:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	791b      	ldrb	r3, [r3, #4]
 8017388:	461a      	mov	r2, r3
 801738a:	89fb      	ldrh	r3, [r7, #14]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	2b04      	cmp	r3, #4
 8017390:	dd28      	ble.n	80173e4 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	681a      	ldr	r2, [r3, #0]
 8017396:	89fb      	ldrh	r3, [r7, #14]
 8017398:	1c59      	adds	r1, r3, #1
 801739a:	81f9      	strh	r1, [r7, #14]
 801739c:	4413      	add	r3, r2
 801739e:	781a      	ldrb	r2, [r3, #0]
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	791a      	ldrb	r2, [r3, #4]
 80173aa:	89fb      	ldrh	r3, [r7, #14]
 80173ac:	b2db      	uxtb	r3, r3
 80173ae:	1ad3      	subs	r3, r2, r3
 80173b0:	b2db      	uxtb	r3, r3
 80173b2:	3b04      	subs	r3, #4
 80173b4:	b2da      	uxtb	r2, r3
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681a      	ldr	r2, [r3, #0]
 80173c4:	89fb      	ldrh	r3, [r7, #14]
 80173c6:	18d1      	adds	r1, r2, r3
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173ce:	b29b      	uxth	r3, r3
 80173d0:	461a      	mov	r2, r3
 80173d2:	f002 fce0 	bl	8019d96 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173dc:	b29a      	uxth	r2, r3
 80173de:	89fb      	ldrh	r3, [r7, #14]
 80173e0:	4413      	add	r3, r2
 80173e2:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	791b      	ldrb	r3, [r3, #4]
 80173ec:	3b04      	subs	r3, #4
 80173ee:	4413      	add	r3, r2
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	461a      	mov	r2, r3
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	6819      	ldr	r1, [r3, #0]
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	791b      	ldrb	r3, [r3, #4]
 8017404:	3b03      	subs	r3, #3
 8017406:	440b      	add	r3, r1
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	021b      	lsls	r3, r3, #8
 801740c:	431a      	orrs	r2, r3
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	6819      	ldr	r1, [r3, #0]
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	791b      	ldrb	r3, [r3, #4]
 801741e:	3b02      	subs	r3, #2
 8017420:	440b      	add	r3, r1
 8017422:	781b      	ldrb	r3, [r3, #0]
 8017424:	041b      	lsls	r3, r3, #16
 8017426:	431a      	orrs	r2, r3
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6819      	ldr	r1, [r3, #0]
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	791b      	ldrb	r3, [r3, #4]
 8017438:	3b01      	subs	r3, #1
 801743a:	440b      	add	r3, r1
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	061b      	lsls	r3, r3, #24
 8017440:	431a      	orrs	r2, r3
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8017446:	2300      	movs	r3, #0
}
 8017448:	4618      	mov	r0, r3
 801744a:	3710      	adds	r7, #16
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d003      	beq.n	8017466 <LoRaMacSerializerJoinRequest+0x16>
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d101      	bne.n	801746a <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017466:	2301      	movs	r3, #1
 8017468:	e070      	b.n	801754c <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801746a:	2300      	movs	r3, #0
 801746c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	791b      	ldrb	r3, [r3, #4]
 8017472:	2b16      	cmp	r3, #22
 8017474:	d801      	bhi.n	801747a <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017476:	2302      	movs	r3, #2
 8017478:	e068      	b.n	801754c <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	89fb      	ldrh	r3, [r7, #14]
 8017480:	1c59      	adds	r1, r3, #1
 8017482:	81f9      	strh	r1, [r7, #14]
 8017484:	4413      	add	r3, r2
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	7952      	ldrb	r2, [r2, #5]
 801748a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	681a      	ldr	r2, [r3, #0]
 8017490:	89fb      	ldrh	r3, [r7, #14]
 8017492:	18d0      	adds	r0, r2, r3
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	3306      	adds	r3, #6
 8017498:	2208      	movs	r2, #8
 801749a:	4619      	mov	r1, r3
 801749c:	f002 fc96 	bl	8019dcc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80174a0:	89fb      	ldrh	r3, [r7, #14]
 80174a2:	3308      	adds	r3, #8
 80174a4:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	89fb      	ldrh	r3, [r7, #14]
 80174ac:	18d0      	adds	r0, r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	330e      	adds	r3, #14
 80174b2:	2208      	movs	r2, #8
 80174b4:	4619      	mov	r1, r3
 80174b6:	f002 fc89 	bl	8019dcc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80174ba:	89fb      	ldrh	r3, [r7, #14]
 80174bc:	3308      	adds	r3, #8
 80174be:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	8ad9      	ldrh	r1, [r3, #22]
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681a      	ldr	r2, [r3, #0]
 80174c8:	89fb      	ldrh	r3, [r7, #14]
 80174ca:	1c58      	adds	r0, r3, #1
 80174cc:	81f8      	strh	r0, [r7, #14]
 80174ce:	4413      	add	r3, r2
 80174d0:	b2ca      	uxtb	r2, r1
 80174d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	8adb      	ldrh	r3, [r3, #22]
 80174d8:	0a1b      	lsrs	r3, r3, #8
 80174da:	b299      	uxth	r1, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681a      	ldr	r2, [r3, #0]
 80174e0:	89fb      	ldrh	r3, [r7, #14]
 80174e2:	1c58      	adds	r0, r3, #1
 80174e4:	81f8      	strh	r0, [r7, #14]
 80174e6:	4413      	add	r3, r2
 80174e8:	b2ca      	uxtb	r2, r1
 80174ea:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6999      	ldr	r1, [r3, #24]
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	681a      	ldr	r2, [r3, #0]
 80174f4:	89fb      	ldrh	r3, [r7, #14]
 80174f6:	1c58      	adds	r0, r3, #1
 80174f8:	81f8      	strh	r0, [r7, #14]
 80174fa:	4413      	add	r3, r2
 80174fc:	b2ca      	uxtb	r2, r1
 80174fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	699b      	ldr	r3, [r3, #24]
 8017504:	0a19      	lsrs	r1, r3, #8
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	89fb      	ldrh	r3, [r7, #14]
 801750c:	1c58      	adds	r0, r3, #1
 801750e:	81f8      	strh	r0, [r7, #14]
 8017510:	4413      	add	r3, r2
 8017512:	b2ca      	uxtb	r2, r1
 8017514:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	699b      	ldr	r3, [r3, #24]
 801751a:	0c19      	lsrs	r1, r3, #16
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	681a      	ldr	r2, [r3, #0]
 8017520:	89fb      	ldrh	r3, [r7, #14]
 8017522:	1c58      	adds	r0, r3, #1
 8017524:	81f8      	strh	r0, [r7, #14]
 8017526:	4413      	add	r3, r2
 8017528:	b2ca      	uxtb	r2, r1
 801752a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	699b      	ldr	r3, [r3, #24]
 8017530:	0e19      	lsrs	r1, r3, #24
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681a      	ldr	r2, [r3, #0]
 8017536:	89fb      	ldrh	r3, [r7, #14]
 8017538:	1c58      	adds	r0, r3, #1
 801753a:	81f8      	strh	r0, [r7, #14]
 801753c:	4413      	add	r3, r2
 801753e:	b2ca      	uxtb	r2, r1
 8017540:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017542:	89fb      	ldrh	r3, [r7, #14]
 8017544:	b2da      	uxtb	r2, r3
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801754a:	2300      	movs	r3, #0
}
 801754c:	4618      	mov	r0, r3
 801754e:	3710      	adds	r7, #16
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}

08017554 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b084      	sub	sp, #16
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d003      	beq.n	801756a <LoRaMacSerializerData+0x16>
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d101      	bne.n	801756e <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801756a:	2301      	movs	r3, #1
 801756c:	e0e5      	b.n	801773a <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801756e:	2300      	movs	r3, #0
 8017570:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017572:	2308      	movs	r3, #8
 8017574:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	7b1b      	ldrb	r3, [r3, #12]
 801757a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801757e:	b2db      	uxtb	r3, r3
 8017580:	b29a      	uxth	r2, r3
 8017582:	89bb      	ldrh	r3, [r7, #12]
 8017584:	4413      	add	r3, r2
 8017586:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801758e:	2b00      	cmp	r3, #0
 8017590:	d002      	beq.n	8017598 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017592:	89bb      	ldrh	r3, [r7, #12]
 8017594:	3301      	adds	r3, #1
 8017596:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801759e:	b29a      	uxth	r2, r3
 80175a0:	89bb      	ldrh	r3, [r7, #12]
 80175a2:	4413      	add	r3, r2
 80175a4:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80175a6:	89bb      	ldrh	r3, [r7, #12]
 80175a8:	3304      	adds	r3, #4
 80175aa:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	791b      	ldrb	r3, [r3, #4]
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	89ba      	ldrh	r2, [r7, #12]
 80175b4:	429a      	cmp	r2, r3
 80175b6:	d901      	bls.n	80175bc <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80175b8:	2302      	movs	r3, #2
 80175ba:	e0be      	b.n	801773a <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681a      	ldr	r2, [r3, #0]
 80175c0:	89fb      	ldrh	r3, [r7, #14]
 80175c2:	1c59      	adds	r1, r3, #1
 80175c4:	81f9      	strh	r1, [r7, #14]
 80175c6:	4413      	add	r3, r2
 80175c8:	687a      	ldr	r2, [r7, #4]
 80175ca:	7952      	ldrb	r2, [r2, #5]
 80175cc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6899      	ldr	r1, [r3, #8]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681a      	ldr	r2, [r3, #0]
 80175d6:	89fb      	ldrh	r3, [r7, #14]
 80175d8:	1c58      	adds	r0, r3, #1
 80175da:	81f8      	strh	r0, [r7, #14]
 80175dc:	4413      	add	r3, r2
 80175de:	b2ca      	uxtb	r2, r1
 80175e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	689b      	ldr	r3, [r3, #8]
 80175e6:	0a19      	lsrs	r1, r3, #8
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	89fb      	ldrh	r3, [r7, #14]
 80175ee:	1c58      	adds	r0, r3, #1
 80175f0:	81f8      	strh	r0, [r7, #14]
 80175f2:	4413      	add	r3, r2
 80175f4:	b2ca      	uxtb	r2, r1
 80175f6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	689b      	ldr	r3, [r3, #8]
 80175fc:	0c19      	lsrs	r1, r3, #16
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	89fb      	ldrh	r3, [r7, #14]
 8017604:	1c58      	adds	r0, r3, #1
 8017606:	81f8      	strh	r0, [r7, #14]
 8017608:	4413      	add	r3, r2
 801760a:	b2ca      	uxtb	r2, r1
 801760c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	689b      	ldr	r3, [r3, #8]
 8017612:	0e19      	lsrs	r1, r3, #24
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681a      	ldr	r2, [r3, #0]
 8017618:	89fb      	ldrh	r3, [r7, #14]
 801761a:	1c58      	adds	r0, r3, #1
 801761c:	81f8      	strh	r0, [r7, #14]
 801761e:	4413      	add	r3, r2
 8017620:	b2ca      	uxtb	r2, r1
 8017622:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	89fb      	ldrh	r3, [r7, #14]
 801762a:	1c59      	adds	r1, r3, #1
 801762c:	81f9      	strh	r1, [r7, #14]
 801762e:	4413      	add	r3, r2
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	7b12      	ldrb	r2, [r2, #12]
 8017634:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	89d9      	ldrh	r1, [r3, #14]
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	681a      	ldr	r2, [r3, #0]
 801763e:	89fb      	ldrh	r3, [r7, #14]
 8017640:	1c58      	adds	r0, r3, #1
 8017642:	81f8      	strh	r0, [r7, #14]
 8017644:	4413      	add	r3, r2
 8017646:	b2ca      	uxtb	r2, r1
 8017648:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	89db      	ldrh	r3, [r3, #14]
 801764e:	0a1b      	lsrs	r3, r3, #8
 8017650:	b299      	uxth	r1, r3
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	89fb      	ldrh	r3, [r7, #14]
 8017658:	1c58      	adds	r0, r3, #1
 801765a:	81f8      	strh	r0, [r7, #14]
 801765c:	4413      	add	r3, r2
 801765e:	b2ca      	uxtb	r2, r1
 8017660:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	89fb      	ldrh	r3, [r7, #14]
 8017668:	18d0      	adds	r0, r2, r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f103 0110 	add.w	r1, r3, #16
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	7b1b      	ldrb	r3, [r3, #12]
 8017674:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017678:	b2db      	uxtb	r3, r3
 801767a:	b29b      	uxth	r3, r3
 801767c:	461a      	mov	r2, r3
 801767e:	f002 fb8a 	bl	8019d96 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	7b1b      	ldrb	r3, [r3, #12]
 8017686:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801768a:	b2db      	uxtb	r3, r3
 801768c:	b29a      	uxth	r2, r3
 801768e:	89fb      	ldrh	r3, [r7, #14]
 8017690:	4413      	add	r3, r2
 8017692:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801769a:	2b00      	cmp	r3, #0
 801769c:	d009      	beq.n	80176b2 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	681a      	ldr	r2, [r3, #0]
 80176a2:	89fb      	ldrh	r3, [r7, #14]
 80176a4:	1c59      	adds	r1, r3, #1
 80176a6:	81f9      	strh	r1, [r7, #14]
 80176a8:	4413      	add	r3, r2
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80176b0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681a      	ldr	r2, [r3, #0]
 80176b6:	89fb      	ldrh	r3, [r7, #14]
 80176b8:	18d0      	adds	r0, r2, r3
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176c4:	b29b      	uxth	r3, r3
 80176c6:	461a      	mov	r2, r3
 80176c8:	f002 fb65 	bl	8019d96 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	89fb      	ldrh	r3, [r7, #14]
 80176d6:	4413      	add	r3, r2
 80176d8:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681a      	ldr	r2, [r3, #0]
 80176e2:	89fb      	ldrh	r3, [r7, #14]
 80176e4:	1c58      	adds	r0, r3, #1
 80176e6:	81f8      	strh	r0, [r7, #14]
 80176e8:	4413      	add	r3, r2
 80176ea:	b2ca      	uxtb	r2, r1
 80176ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176f2:	0a19      	lsrs	r1, r3, #8
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681a      	ldr	r2, [r3, #0]
 80176f8:	89fb      	ldrh	r3, [r7, #14]
 80176fa:	1c58      	adds	r0, r3, #1
 80176fc:	81f8      	strh	r0, [r7, #14]
 80176fe:	4413      	add	r3, r2
 8017700:	b2ca      	uxtb	r2, r1
 8017702:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017708:	0c19      	lsrs	r1, r3, #16
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681a      	ldr	r2, [r3, #0]
 801770e:	89fb      	ldrh	r3, [r7, #14]
 8017710:	1c58      	adds	r0, r3, #1
 8017712:	81f8      	strh	r0, [r7, #14]
 8017714:	4413      	add	r3, r2
 8017716:	b2ca      	uxtb	r2, r1
 8017718:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801771e:	0e19      	lsrs	r1, r3, #24
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681a      	ldr	r2, [r3, #0]
 8017724:	89fb      	ldrh	r3, [r7, #14]
 8017726:	1c58      	adds	r0, r3, #1
 8017728:	81f8      	strh	r0, [r7, #14]
 801772a:	4413      	add	r3, r2
 801772c:	b2ca      	uxtb	r2, r1
 801772e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017730:	89fb      	ldrh	r3, [r7, #14]
 8017732:	b2da      	uxtb	r2, r3
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017738:	2300      	movs	r3, #0
}
 801773a:	4618      	mov	r0, r3
 801773c:	3710      	adds	r7, #16
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}

08017742 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017742:	b480      	push	{r7}
 8017744:	b083      	sub	sp, #12
 8017746:	af00      	add	r7, sp, #0
 8017748:	4603      	mov	r3, r0
 801774a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801774c:	79fb      	ldrb	r3, [r7, #7]
 801774e:	2b05      	cmp	r3, #5
 8017750:	d101      	bne.n	8017756 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017752:	2301      	movs	r3, #1
 8017754:	e000      	b.n	8017758 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017756:	2300      	movs	r3, #0
        }
    }
}
 8017758:	4618      	mov	r0, r3
 801775a:	370c      	adds	r7, #12
 801775c:	46bd      	mov	sp, r7
 801775e:	bc80      	pop	{r7}
 8017760:	4770      	bx	lr

08017762 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017762:	b580      	push	{r7, lr}
 8017764:	b084      	sub	sp, #16
 8017766:	af00      	add	r7, sp, #0
 8017768:	4603      	mov	r3, r0
 801776a:	6039      	str	r1, [r7, #0]
 801776c:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801776e:	2300      	movs	r3, #0
 8017770:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017772:	79fb      	ldrb	r3, [r7, #7]
 8017774:	2b05      	cmp	r3, #5
 8017776:	d105      	bne.n	8017784 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017778:	6838      	ldr	r0, [r7, #0]
 801777a:	f001 f995 	bl	8018aa8 <RegionEU868GetPhyParam>
 801777e:	4603      	mov	r3, r0
 8017780:	60fb      	str	r3, [r7, #12]
 8017782:	e001      	b.n	8017788 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	4618      	mov	r0, r3
 801778c:	3710      	adds	r7, #16
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}

08017792 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017792:	b580      	push	{r7, lr}
 8017794:	b082      	sub	sp, #8
 8017796:	af00      	add	r7, sp, #0
 8017798:	4603      	mov	r3, r0
 801779a:	6039      	str	r1, [r7, #0]
 801779c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801779e:	79fb      	ldrb	r3, [r7, #7]
 80177a0:	2b05      	cmp	r3, #5
 80177a2:	d103      	bne.n	80177ac <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80177a4:	6838      	ldr	r0, [r7, #0]
 80177a6:	f001 facb 	bl	8018d40 <RegionEU868SetBandTxDone>
 80177aa:	e000      	b.n	80177ae <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80177ac:	bf00      	nop
        }
    }
}
 80177ae:	3708      	adds	r7, #8
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}

080177b4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	4603      	mov	r3, r0
 80177bc:	6039      	str	r1, [r7, #0]
 80177be:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177c0:	79fb      	ldrb	r3, [r7, #7]
 80177c2:	2b05      	cmp	r3, #5
 80177c4:	d103      	bne.n	80177ce <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80177c6:	6838      	ldr	r0, [r7, #0]
 80177c8:	f001 fae6 	bl	8018d98 <RegionEU868InitDefaults>
 80177cc:	e000      	b.n	80177d0 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80177ce:	bf00      	nop
        }
    }
}
 80177d0:	bf00      	nop
 80177d2:	3708      	adds	r7, #8
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	4603      	mov	r3, r0
 80177e0:	6039      	str	r1, [r7, #0]
 80177e2:	71fb      	strb	r3, [r7, #7]
 80177e4:	4613      	mov	r3, r2
 80177e6:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80177e8:	79fb      	ldrb	r3, [r7, #7]
 80177ea:	2b05      	cmp	r3, #5
 80177ec:	d106      	bne.n	80177fc <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80177ee:	79bb      	ldrb	r3, [r7, #6]
 80177f0:	4619      	mov	r1, r3
 80177f2:	6838      	ldr	r0, [r7, #0]
 80177f4:	f001 fb6e 	bl	8018ed4 <RegionEU868Verify>
 80177f8:	4603      	mov	r3, r0
 80177fa:	e000      	b.n	80177fe <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80177fc:	2300      	movs	r3, #0
        }
    }
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3708      	adds	r7, #8
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}

08017806 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017806:	b580      	push	{r7, lr}
 8017808:	b082      	sub	sp, #8
 801780a:	af00      	add	r7, sp, #0
 801780c:	4603      	mov	r3, r0
 801780e:	6039      	str	r1, [r7, #0]
 8017810:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017812:	79fb      	ldrb	r3, [r7, #7]
 8017814:	2b05      	cmp	r3, #5
 8017816:	d103      	bne.n	8017820 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017818:	6838      	ldr	r0, [r7, #0]
 801781a:	f001 fbd7 	bl	8018fcc <RegionEU868ApplyCFList>
 801781e:	e000      	b.n	8017822 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017820:	bf00      	nop
        }
    }
}
 8017822:	bf00      	nop
 8017824:	3708      	adds	r7, #8
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}

0801782a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801782a:	b580      	push	{r7, lr}
 801782c:	b082      	sub	sp, #8
 801782e:	af00      	add	r7, sp, #0
 8017830:	4603      	mov	r3, r0
 8017832:	6039      	str	r1, [r7, #0]
 8017834:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017836:	79fb      	ldrb	r3, [r7, #7]
 8017838:	2b05      	cmp	r3, #5
 801783a:	d104      	bne.n	8017846 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801783c:	6838      	ldr	r0, [r7, #0]
 801783e:	f001 fc39 	bl	80190b4 <RegionEU868ChanMaskSet>
 8017842:	4603      	mov	r3, r0
 8017844:	e000      	b.n	8017848 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017846:	2300      	movs	r3, #0
        }
    }
}
 8017848:	4618      	mov	r0, r3
 801784a:	3708      	adds	r7, #8
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}

08017850 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b082      	sub	sp, #8
 8017854:	af00      	add	r7, sp, #0
 8017856:	603b      	str	r3, [r7, #0]
 8017858:	4603      	mov	r3, r0
 801785a:	71fb      	strb	r3, [r7, #7]
 801785c:	460b      	mov	r3, r1
 801785e:	71bb      	strb	r3, [r7, #6]
 8017860:	4613      	mov	r3, r2
 8017862:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017864:	79fb      	ldrb	r3, [r7, #7]
 8017866:	2b05      	cmp	r3, #5
 8017868:	d107      	bne.n	801787a <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801786a:	7979      	ldrb	r1, [r7, #5]
 801786c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017870:	693b      	ldr	r3, [r7, #16]
 8017872:	683a      	ldr	r2, [r7, #0]
 8017874:	f001 fc48 	bl	8019108 <RegionEU868ComputeRxWindowParameters>
 8017878:	e000      	b.n	801787c <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801787a:	bf00      	nop
        }
    }
}
 801787c:	bf00      	nop
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	4603      	mov	r3, r0
 801788c:	60b9      	str	r1, [r7, #8]
 801788e:	607a      	str	r2, [r7, #4]
 8017890:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017892:	7bfb      	ldrb	r3, [r7, #15]
 8017894:	2b05      	cmp	r3, #5
 8017896:	d105      	bne.n	80178a4 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017898:	6879      	ldr	r1, [r7, #4]
 801789a:	68b8      	ldr	r0, [r7, #8]
 801789c:	f001 fc8e 	bl	80191bc <RegionEU868RxConfig>
 80178a0:	4603      	mov	r3, r0
 80178a2:	e000      	b.n	80178a6 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80178a4:	2300      	movs	r3, #0
        }
    }
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3710      	adds	r7, #16
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}

080178ae <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80178ae:	b580      	push	{r7, lr}
 80178b0:	b084      	sub	sp, #16
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	607a      	str	r2, [r7, #4]
 80178b8:	603b      	str	r3, [r7, #0]
 80178ba:	4603      	mov	r3, r0
 80178bc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80178be:	7bfb      	ldrb	r3, [r7, #15]
 80178c0:	2b05      	cmp	r3, #5
 80178c2:	d106      	bne.n	80178d2 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80178c4:	683a      	ldr	r2, [r7, #0]
 80178c6:	6879      	ldr	r1, [r7, #4]
 80178c8:	68b8      	ldr	r0, [r7, #8]
 80178ca:	f001 fd47 	bl	801935c <RegionEU868TxConfig>
 80178ce:	4603      	mov	r3, r0
 80178d0:	e000      	b.n	80178d4 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80178d2:	2300      	movs	r3, #0
        }
    }
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3710      	adds	r7, #16
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b086      	sub	sp, #24
 80178e0:	af02      	add	r7, sp, #8
 80178e2:	60b9      	str	r1, [r7, #8]
 80178e4:	607a      	str	r2, [r7, #4]
 80178e6:	603b      	str	r3, [r7, #0]
 80178e8:	4603      	mov	r3, r0
 80178ea:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80178ec:	7bfb      	ldrb	r3, [r7, #15]
 80178ee:	2b05      	cmp	r3, #5
 80178f0:	d109      	bne.n	8017906 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80178f2:	69fb      	ldr	r3, [r7, #28]
 80178f4:	9300      	str	r3, [sp, #0]
 80178f6:	69bb      	ldr	r3, [r7, #24]
 80178f8:	683a      	ldr	r2, [r7, #0]
 80178fa:	6879      	ldr	r1, [r7, #4]
 80178fc:	68b8      	ldr	r0, [r7, #8]
 80178fe:	f001 fdfd 	bl	80194fc <RegionEU868LinkAdrReq>
 8017902:	4603      	mov	r3, r0
 8017904:	e000      	b.n	8017908 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017906:	2300      	movs	r3, #0
        }
    }
}
 8017908:	4618      	mov	r0, r3
 801790a:	3710      	adds	r7, #16
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b082      	sub	sp, #8
 8017914:	af00      	add	r7, sp, #0
 8017916:	4603      	mov	r3, r0
 8017918:	6039      	str	r1, [r7, #0]
 801791a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801791c:	79fb      	ldrb	r3, [r7, #7]
 801791e:	2b05      	cmp	r3, #5
 8017920:	d104      	bne.n	801792c <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017922:	6838      	ldr	r0, [r7, #0]
 8017924:	f001 ff0c 	bl	8019740 <RegionEU868RxParamSetupReq>
 8017928:	4603      	mov	r3, r0
 801792a:	e000      	b.n	801792e <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801792c:	2300      	movs	r3, #0
        }
    }
}
 801792e:	4618      	mov	r0, r3
 8017930:	3708      	adds	r7, #8
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}

08017936 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017936:	b580      	push	{r7, lr}
 8017938:	b082      	sub	sp, #8
 801793a:	af00      	add	r7, sp, #0
 801793c:	4603      	mov	r3, r0
 801793e:	6039      	str	r1, [r7, #0]
 8017940:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017942:	79fb      	ldrb	r3, [r7, #7]
 8017944:	2b05      	cmp	r3, #5
 8017946:	d104      	bne.n	8017952 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017948:	6838      	ldr	r0, [r7, #0]
 801794a:	f001 ff37 	bl	80197bc <RegionEU868NewChannelReq>
 801794e:	4603      	mov	r3, r0
 8017950:	e000      	b.n	8017954 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017952:	2300      	movs	r3, #0
        }
    }
}
 8017954:	4618      	mov	r0, r3
 8017956:	3708      	adds	r7, #8
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	af00      	add	r7, sp, #0
 8017962:	4603      	mov	r3, r0
 8017964:	6039      	str	r1, [r7, #0]
 8017966:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017968:	79fb      	ldrb	r3, [r7, #7]
 801796a:	2b05      	cmp	r3, #5
 801796c:	d104      	bne.n	8017978 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801796e:	6838      	ldr	r0, [r7, #0]
 8017970:	f001 ff82 	bl	8019878 <RegionEU868TxParamSetupReq>
 8017974:	4603      	mov	r3, r0
 8017976:	e000      	b.n	801797a <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017978:	2300      	movs	r3, #0
        }
    }
}
 801797a:	4618      	mov	r0, r3
 801797c:	3708      	adds	r7, #8
 801797e:	46bd      	mov	sp, r7
 8017980:	bd80      	pop	{r7, pc}

08017982 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017982:	b580      	push	{r7, lr}
 8017984:	b082      	sub	sp, #8
 8017986:	af00      	add	r7, sp, #0
 8017988:	4603      	mov	r3, r0
 801798a:	6039      	str	r1, [r7, #0]
 801798c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801798e:	79fb      	ldrb	r3, [r7, #7]
 8017990:	2b05      	cmp	r3, #5
 8017992:	d104      	bne.n	801799e <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017994:	6838      	ldr	r0, [r7, #0]
 8017996:	f001 ff7b 	bl	8019890 <RegionEU868DlChannelReq>
 801799a:	4603      	mov	r3, r0
 801799c:	e000      	b.n	80179a0 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801799e:	2300      	movs	r3, #0
        }
    }
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3708      	adds	r7, #8
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	4603      	mov	r3, r0
 80179b0:	71fb      	strb	r3, [r7, #7]
 80179b2:	460b      	mov	r3, r1
 80179b4:	71bb      	strb	r3, [r7, #6]
 80179b6:	4613      	mov	r3, r2
 80179b8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80179ba:	79fb      	ldrb	r3, [r7, #7]
 80179bc:	2b05      	cmp	r3, #5
 80179be:	d108      	bne.n	80179d2 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80179c0:	797a      	ldrb	r2, [r7, #5]
 80179c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80179c6:	4611      	mov	r1, r2
 80179c8:	4618      	mov	r0, r3
 80179ca:	f001 ffab 	bl	8019924 <RegionEU868AlternateDr>
 80179ce:	4603      	mov	r3, r0
 80179d0:	e000      	b.n	80179d4 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80179d2:	2300      	movs	r3, #0
        }
    }
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3708      	adds	r7, #8
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	60b9      	str	r1, [r7, #8]
 80179e4:	607a      	str	r2, [r7, #4]
 80179e6:	603b      	str	r3, [r7, #0]
 80179e8:	4603      	mov	r3, r0
 80179ea:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179ec:	7bfb      	ldrb	r3, [r7, #15]
 80179ee:	2b05      	cmp	r3, #5
 80179f0:	d107      	bne.n	8017a02 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80179f2:	69bb      	ldr	r3, [r7, #24]
 80179f4:	683a      	ldr	r2, [r7, #0]
 80179f6:	6879      	ldr	r1, [r7, #4]
 80179f8:	68b8      	ldr	r0, [r7, #8]
 80179fa:	f001 ffa3 	bl	8019944 <RegionEU868NextChannel>
 80179fe:	4603      	mov	r3, r0
 8017a00:	e000      	b.n	8017a04 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017a02:	2309      	movs	r3, #9
        }
    }
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	4603      	mov	r3, r0
 8017a14:	6039      	str	r1, [r7, #0]
 8017a16:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a18:	79fb      	ldrb	r3, [r7, #7]
 8017a1a:	2b05      	cmp	r3, #5
 8017a1c:	d103      	bne.n	8017a26 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017a1e:	6838      	ldr	r0, [r7, #0]
 8017a20:	f002 f90a 	bl	8019c38 <RegionEU868SetContinuousWave>
 8017a24:	e000      	b.n	8017a28 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017a26:	bf00      	nop
        }
    }
}
 8017a28:	bf00      	nop
 8017a2a:	3708      	adds	r7, #8
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017a30:	b590      	push	{r4, r7, lr}
 8017a32:	b083      	sub	sp, #12
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	4604      	mov	r4, r0
 8017a38:	4608      	mov	r0, r1
 8017a3a:	4611      	mov	r1, r2
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	4623      	mov	r3, r4
 8017a40:	71fb      	strb	r3, [r7, #7]
 8017a42:	4603      	mov	r3, r0
 8017a44:	71bb      	strb	r3, [r7, #6]
 8017a46:	460b      	mov	r3, r1
 8017a48:	717b      	strb	r3, [r7, #5]
 8017a4a:	4613      	mov	r3, r2
 8017a4c:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017a4e:	79fb      	ldrb	r3, [r7, #7]
 8017a50:	2b05      	cmp	r3, #5
 8017a52:	d109      	bne.n	8017a68 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017a54:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017a58:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017a5c:	79bb      	ldrb	r3, [r7, #6]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f002 f938 	bl	8019cd4 <RegionEU868ApplyDrOffset>
 8017a64:	4603      	mov	r3, r0
 8017a66:	e000      	b.n	8017a6a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017a68:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	370c      	adds	r7, #12
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd90      	pop	{r4, r7, pc}
	...

08017a74 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017a74:	b480      	push	{r7}
 8017a76:	b083      	sub	sp, #12
 8017a78:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017a7a:	4b04      	ldr	r3, [pc, #16]	; (8017a8c <RegionGetVersion+0x18>)
 8017a7c:	607b      	str	r3, [r7, #4]

    return version;
 8017a7e:	687b      	ldr	r3, [r7, #4]
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	370c      	adds	r7, #12
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bc80      	pop	{r7}
 8017a88:	4770      	bx	lr
 8017a8a:	bf00      	nop
 8017a8c:	01010003 	.word	0x01010003

08017a90 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017a90:	b480      	push	{r7}
 8017a92:	b087      	sub	sp, #28
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60f8      	str	r0, [r7, #12]
 8017a98:	4608      	mov	r0, r1
 8017a9a:	4639      	mov	r1, r7
 8017a9c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	881b      	ldrh	r3, [r3, #0]
 8017aa8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017aaa:	7afb      	ldrb	r3, [r7, #11]
 8017aac:	f083 0301 	eor.w	r3, r3, #1
 8017ab0:	b2db      	uxtb	r3, r3
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d01b      	beq.n	8017aee <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017ab6:	f242 7310 	movw	r3, #10000	; 0x2710
 8017aba:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017ac2:	d202      	bcs.n	8017aca <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017ac4:	2364      	movs	r3, #100	; 0x64
 8017ac6:	82bb      	strh	r3, [r7, #20]
 8017ac8:	e00b      	b.n	8017ae2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017ad0:	4293      	cmp	r3, r2
 8017ad2:	d803      	bhi.n	8017adc <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ad8:	82bb      	strh	r3, [r7, #20]
 8017ada:	e002      	b.n	8017ae2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017adc:	f242 7310 	movw	r3, #10000	; 0x2710
 8017ae0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017ae2:	8aba      	ldrh	r2, [r7, #20]
 8017ae4:	8afb      	ldrh	r3, [r7, #22]
 8017ae6:	4293      	cmp	r3, r2
 8017ae8:	bf38      	it	cc
 8017aea:	4613      	movcc	r3, r2
 8017aec:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017aee:	8afb      	ldrh	r3, [r7, #22]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d101      	bne.n	8017af8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017af4:	2301      	movs	r3, #1
 8017af6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017af8:	8afb      	ldrh	r3, [r7, #22]
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	371c      	adds	r7, #28
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bc80      	pop	{r7}
 8017b02:	4770      	bx	lr

08017b04 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b08e      	sub	sp, #56	; 0x38
 8017b08:	af02      	add	r7, sp, #8
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	4608      	mov	r0, r1
 8017b0e:	4639      	mov	r1, r7
 8017b10:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b14:	4603      	mov	r3, r0
 8017b16:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	881b      	ldrh	r3, [r3, #0]
 8017b1c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017b1e:	4b4b      	ldr	r3, [pc, #300]	; (8017c4c <SetMaxTimeCredits+0x148>)
 8017b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017b22:	463b      	mov	r3, r7
 8017b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b28:	f005 fdc0 	bl	801d6ac <SysTimeToMs>
 8017b2c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017b2e:	f107 0314 	add.w	r3, r7, #20
 8017b32:	2200      	movs	r2, #0
 8017b34:	601a      	str	r2, [r3, #0]
 8017b36:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017b38:	7af9      	ldrb	r1, [r7, #11]
 8017b3a:	463b      	mov	r3, r7
 8017b3c:	cb0c      	ldmia	r3, {r2, r3}
 8017b3e:	68f8      	ldr	r0, [r7, #12]
 8017b40:	f7ff ffa6 	bl	8017a90 <GetDutyCycle>
 8017b44:	4603      	mov	r3, r0
 8017b46:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017b48:	7afb      	ldrb	r3, [r7, #11]
 8017b4a:	f083 0301 	eor.w	r3, r3, #1
 8017b4e:	b2db      	uxtb	r3, r3
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d062      	beq.n	8017c1a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017b54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b56:	2b64      	cmp	r3, #100	; 0x64
 8017b58:	d105      	bne.n	8017b66 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017b5a:	4b3c      	ldr	r3, [pc, #240]	; (8017c4c <SetMaxTimeCredits+0x148>)
 8017b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b62:	609a      	str	r2, [r3, #8]
 8017b64:	e00b      	b.n	8017b7e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017b66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017b6c:	d105      	bne.n	8017b7a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017b6e:	4b38      	ldr	r3, [pc, #224]	; (8017c50 <SetMaxTimeCredits+0x14c>)
 8017b70:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b76:	609a      	str	r2, [r3, #8]
 8017b78:	e001      	b.n	8017b7e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017b7a:	4b36      	ldr	r3, [pc, #216]	; (8017c54 <SetMaxTimeCredits+0x150>)
 8017b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	689a      	ldr	r2, [r3, #8]
 8017b82:	f107 031c 	add.w	r3, r7, #28
 8017b86:	4611      	mov	r1, r2
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f005 fdb7 	bl	801d6fc <SysTimeFromMs>
 8017b8e:	f107 0014 	add.w	r0, r7, #20
 8017b92:	6a3b      	ldr	r3, [r7, #32]
 8017b94:	9300      	str	r3, [sp, #0]
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	463a      	mov	r2, r7
 8017b9a:	ca06      	ldmia	r2, {r1, r2}
 8017b9c:	f005 fcc7 	bl	801d52e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017ba0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017ba4:	f083 0301 	eor.w	r3, r3, #1
 8017ba8:	b2db      	uxtb	r3, r3
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d006      	beq.n	8017bbc <SetMaxTimeCredits+0xb8>
 8017bae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017bb2:	f083 0301 	eor.w	r3, r3, #1
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d108      	bne.n	8017bce <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d103      	bne.n	8017bce <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017bc6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017bc8:	4a23      	ldr	r2, [pc, #140]	; (8017c58 <SetMaxTimeCredits+0x154>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d92f      	bls.n	8017c2e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bd2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	4a21      	ldr	r2, [pc, #132]	; (8017c5c <SetMaxTimeCredits+0x158>)
 8017bd8:	4293      	cmp	r3, r2
 8017bda:	d928      	bls.n	8017c2e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017be2:	3b30      	subs	r3, #48	; 0x30
 8017be4:	4a1e      	ldr	r2, [pc, #120]	; (8017c60 <SetMaxTimeCredits+0x15c>)
 8017be6:	fba2 2303 	umull	r2, r3, r2, r3
 8017bea:	0c1b      	lsrs	r3, r3, #16
 8017bec:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	4a1c      	ldr	r2, [pc, #112]	; (8017c64 <SetMaxTimeCredits+0x160>)
 8017bf2:	fb02 f303 	mul.w	r3, r2, r3
 8017bf6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017bf8:	697b      	ldr	r3, [r7, #20]
 8017bfa:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017bfe:	3330      	adds	r3, #48	; 0x30
 8017c00:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017c02:	2300      	movs	r3, #0
 8017c04:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017c06:	f107 0314 	add.w	r3, r7, #20
 8017c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c0e:	f005 fd4d 	bl	801d6ac <SysTimeToMs>
 8017c12:	4602      	mov	r2, r0
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	609a      	str	r2, [r3, #8]
 8017c18:	e009      	b.n	8017c2e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017c1a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c1e:	f083 0301 	eor.w	r3, r3, #1
 8017c22:	b2db      	uxtb	r3, r3
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d002      	beq.n	8017c2e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c2c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	685b      	ldr	r3, [r3, #4]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d102      	bne.n	8017c3c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c3a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c40:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3730      	adds	r7, #48	; 0x30
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	001b7740 	.word	0x001b7740
 8017c50:	0112a880 	.word	0x0112a880
 8017c54:	02932e00 	.word	0x02932e00
 8017c58:	0001517f 	.word	0x0001517f
 8017c5c:	0001ec2f 	.word	0x0001ec2f
 8017c60:	c22e4507 	.word	0xc22e4507
 8017c64:	00015180 	.word	0x00015180

08017c68 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b086      	sub	sp, #24
 8017c6c:	af02      	add	r7, sp, #8
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	4608      	mov	r0, r1
 8017c72:	4611      	mov	r1, r2
 8017c74:	461a      	mov	r2, r3
 8017c76:	4603      	mov	r3, r0
 8017c78:	70fb      	strb	r3, [r7, #3]
 8017c7a:	460b      	mov	r3, r1
 8017c7c:	70bb      	strb	r3, [r7, #2]
 8017c7e:	4613      	mov	r3, r2
 8017c80:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017c82:	78f9      	ldrb	r1, [r7, #3]
 8017c84:	787b      	ldrb	r3, [r7, #1]
 8017c86:	9301      	str	r3, [sp, #4]
 8017c88:	78bb      	ldrb	r3, [r7, #2]
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	f107 0318 	add.w	r3, r7, #24
 8017c90:	cb0c      	ldmia	r3, {r2, r3}
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	f7ff ff36 	bl	8017b04 <SetMaxTimeCredits>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017c9c:	78fb      	ldrb	r3, [r7, #3]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d00a      	beq.n	8017cb8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	685b      	ldr	r3, [r3, #4]
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f006 fb3c 	bl	801e324 <UTIL_TIMER_GetElapsedTime>
 8017cac:	4602      	mov	r2, r0
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	68db      	ldr	r3, [r3, #12]
 8017cb2:	441a      	add	r2, r3
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	68da      	ldr	r2, [r3, #12]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	691b      	ldr	r3, [r3, #16]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d903      	bls.n	8017ccc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	691a      	ldr	r2, [r3, #16]
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	6a3a      	ldr	r2, [r7, #32]
 8017cd0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017cd2:	89fb      	ldrh	r3, [r7, #14]
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3710      	adds	r7, #16
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017cdc:	b480      	push	{r7}
 8017cde:	b085      	sub	sp, #20
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	460a      	mov	r2, r1
 8017ce6:	80fb      	strh	r3, [r7, #6]
 8017ce8:	4613      	mov	r3, r2
 8017cea:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017cec:	2300      	movs	r3, #0
 8017cee:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	73bb      	strb	r3, [r7, #14]
 8017cf4:	e011      	b.n	8017d1a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017cf6:	88fa      	ldrh	r2, [r7, #6]
 8017cf8:	7bbb      	ldrb	r3, [r7, #14]
 8017cfa:	2101      	movs	r1, #1
 8017cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8017d00:	401a      	ands	r2, r3
 8017d02:	7bbb      	ldrb	r3, [r7, #14]
 8017d04:	2101      	movs	r1, #1
 8017d06:	fa01 f303 	lsl.w	r3, r1, r3
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d102      	bne.n	8017d14 <CountChannels+0x38>
        {
            nbActiveBits++;
 8017d0e:	7bfb      	ldrb	r3, [r7, #15]
 8017d10:	3301      	adds	r3, #1
 8017d12:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017d14:	7bbb      	ldrb	r3, [r7, #14]
 8017d16:	3301      	adds	r3, #1
 8017d18:	73bb      	strb	r3, [r7, #14]
 8017d1a:	7bba      	ldrb	r2, [r7, #14]
 8017d1c:	797b      	ldrb	r3, [r7, #5]
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d3e9      	bcc.n	8017cf6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d24:	4618      	mov	r0, r3
 8017d26:	3714      	adds	r7, #20
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bc80      	pop	{r7}
 8017d2c:	4770      	bx	lr

08017d2e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017d2e:	b580      	push	{r7, lr}
 8017d30:	b084      	sub	sp, #16
 8017d32:	af00      	add	r7, sp, #0
 8017d34:	6039      	str	r1, [r7, #0]
 8017d36:	4611      	mov	r1, r2
 8017d38:	461a      	mov	r2, r3
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	71fb      	strb	r3, [r7, #7]
 8017d3e:	460b      	mov	r3, r1
 8017d40:	71bb      	strb	r3, [r7, #6]
 8017d42:	4613      	mov	r3, r2
 8017d44:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017d46:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017d4a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017d4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017d52:	4618      	mov	r0, r3
 8017d54:	f000 f85d 	bl	8017e12 <RegionCommonValueInRange>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d101      	bne.n	8017d62 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017d5e:	2300      	movs	r3, #0
 8017d60:	e053      	b.n	8017e0a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017d62:	2300      	movs	r3, #0
 8017d64:	73fb      	strb	r3, [r7, #15]
 8017d66:	2300      	movs	r3, #0
 8017d68:	73bb      	strb	r3, [r7, #14]
 8017d6a:	e049      	b.n	8017e00 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	737b      	strb	r3, [r7, #13]
 8017d70:	e03d      	b.n	8017dee <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017d72:	7bbb      	ldrb	r3, [r7, #14]
 8017d74:	005b      	lsls	r3, r3, #1
 8017d76:	683a      	ldr	r2, [r7, #0]
 8017d78:	4413      	add	r3, r2
 8017d7a:	881b      	ldrh	r3, [r3, #0]
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	7b7b      	ldrb	r3, [r7, #13]
 8017d80:	fa42 f303 	asr.w	r3, r2, r3
 8017d84:	f003 0301 	and.w	r3, r3, #1
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d02d      	beq.n	8017de8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017d8c:	7bfa      	ldrb	r2, [r7, #15]
 8017d8e:	7b7b      	ldrb	r3, [r7, #13]
 8017d90:	4413      	add	r3, r2
 8017d92:	461a      	mov	r2, r3
 8017d94:	4613      	mov	r3, r2
 8017d96:	005b      	lsls	r3, r3, #1
 8017d98:	4413      	add	r3, r2
 8017d9a:	009b      	lsls	r3, r3, #2
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	69fb      	ldr	r3, [r7, #28]
 8017da0:	4413      	add	r3, r2
 8017da2:	7a1b      	ldrb	r3, [r3, #8]
 8017da4:	f343 0303 	sbfx	r3, r3, #0, #4
 8017da8:	b25b      	sxtb	r3, r3
 8017daa:	f003 030f 	and.w	r3, r3, #15
 8017dae:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017db0:	7bfa      	ldrb	r2, [r7, #15]
 8017db2:	7b7b      	ldrb	r3, [r7, #13]
 8017db4:	4413      	add	r3, r2
 8017db6:	461a      	mov	r2, r3
 8017db8:	4613      	mov	r3, r2
 8017dba:	005b      	lsls	r3, r3, #1
 8017dbc:	4413      	add	r3, r2
 8017dbe:	009b      	lsls	r3, r3, #2
 8017dc0:	461a      	mov	r2, r3
 8017dc2:	69fb      	ldr	r3, [r7, #28]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	7a1b      	ldrb	r3, [r3, #8]
 8017dc8:	f343 1303 	sbfx	r3, r3, #4, #4
 8017dcc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017dce:	f003 030f 	and.w	r3, r3, #15
 8017dd2:	b25a      	sxtb	r2, r3
 8017dd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f000 f81a 	bl	8017e12 <RegionCommonValueInRange>
 8017dde:	4603      	mov	r3, r0
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d101      	bne.n	8017de8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017de4:	2301      	movs	r3, #1
 8017de6:	e010      	b.n	8017e0a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017de8:	7b7b      	ldrb	r3, [r7, #13]
 8017dea:	3301      	adds	r3, #1
 8017dec:	737b      	strb	r3, [r7, #13]
 8017dee:	7b7b      	ldrb	r3, [r7, #13]
 8017df0:	2b0f      	cmp	r3, #15
 8017df2:	d9be      	bls.n	8017d72 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017df4:	7bfb      	ldrb	r3, [r7, #15]
 8017df6:	3310      	adds	r3, #16
 8017df8:	73fb      	strb	r3, [r7, #15]
 8017dfa:	7bbb      	ldrb	r3, [r7, #14]
 8017dfc:	3301      	adds	r3, #1
 8017dfe:	73bb      	strb	r3, [r7, #14]
 8017e00:	7bfa      	ldrb	r2, [r7, #15]
 8017e02:	79fb      	ldrb	r3, [r7, #7]
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d3b1      	bcc.n	8017d6c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017e08:	2300      	movs	r3, #0
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3710      	adds	r7, #16
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017e12:	b480      	push	{r7}
 8017e14:	b083      	sub	sp, #12
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	4603      	mov	r3, r0
 8017e1a:	71fb      	strb	r3, [r7, #7]
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	71bb      	strb	r3, [r7, #6]
 8017e20:	4613      	mov	r3, r2
 8017e22:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017e24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017e28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	db07      	blt.n	8017e40 <RegionCommonValueInRange+0x2e>
 8017e30:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017e34:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	dc01      	bgt.n	8017e40 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	e000      	b.n	8017e42 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017e40:	2300      	movs	r3, #0
}
 8017e42:	4618      	mov	r0, r3
 8017e44:	370c      	adds	r7, #12
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bc80      	pop	{r7}
 8017e4a:	4770      	bx	lr

08017e4c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b085      	sub	sp, #20
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	460b      	mov	r3, r1
 8017e56:	70fb      	strb	r3, [r7, #3]
 8017e58:	4613      	mov	r3, r2
 8017e5a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017e5c:	78fb      	ldrb	r3, [r7, #3]
 8017e5e:	091b      	lsrs	r3, r3, #4
 8017e60:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017e62:	78bb      	ldrb	r3, [r7, #2]
 8017e64:	091b      	lsrs	r3, r3, #4
 8017e66:	b2db      	uxtb	r3, r3
 8017e68:	7bfa      	ldrb	r2, [r7, #15]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d803      	bhi.n	8017e76 <RegionCommonChanDisable+0x2a>
 8017e6e:	78fa      	ldrb	r2, [r7, #3]
 8017e70:	78bb      	ldrb	r3, [r7, #2]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d301      	bcc.n	8017e7a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017e76:	2300      	movs	r3, #0
 8017e78:	e017      	b.n	8017eaa <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
 8017e7c:	005b      	lsls	r3, r3, #1
 8017e7e:	687a      	ldr	r2, [r7, #4]
 8017e80:	4413      	add	r3, r2
 8017e82:	881b      	ldrh	r3, [r3, #0]
 8017e84:	b21a      	sxth	r2, r3
 8017e86:	78fb      	ldrb	r3, [r7, #3]
 8017e88:	f003 030f 	and.w	r3, r3, #15
 8017e8c:	2101      	movs	r1, #1
 8017e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8017e92:	b21b      	sxth	r3, r3
 8017e94:	43db      	mvns	r3, r3
 8017e96:	b21b      	sxth	r3, r3
 8017e98:	4013      	ands	r3, r2
 8017e9a:	b219      	sxth	r1, r3
 8017e9c:	7bfb      	ldrb	r3, [r7, #15]
 8017e9e:	005b      	lsls	r3, r3, #1
 8017ea0:	687a      	ldr	r2, [r7, #4]
 8017ea2:	4413      	add	r3, r2
 8017ea4:	b28a      	uxth	r2, r1
 8017ea6:	801a      	strh	r2, [r3, #0]

    return true;
 8017ea8:	2301      	movs	r3, #1
}
 8017eaa:	4618      	mov	r0, r3
 8017eac:	3714      	adds	r7, #20
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bc80      	pop	{r7}
 8017eb2:	4770      	bx	lr

08017eb4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b084      	sub	sp, #16
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	460b      	mov	r3, r1
 8017ebe:	70fb      	strb	r3, [r7, #3]
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d101      	bne.n	8017ed2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	e018      	b.n	8017f04 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017ed2:	78fb      	ldrb	r3, [r7, #3]
 8017ed4:	73bb      	strb	r3, [r7, #14]
 8017ed6:	e010      	b.n	8017efa <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017ed8:	7bbb      	ldrb	r3, [r7, #14]
 8017eda:	005b      	lsls	r3, r3, #1
 8017edc:	687a      	ldr	r2, [r7, #4]
 8017ede:	4413      	add	r3, r2
 8017ee0:	881b      	ldrh	r3, [r3, #0]
 8017ee2:	2110      	movs	r1, #16
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7ff fef9 	bl	8017cdc <CountChannels>
 8017eea:	4603      	mov	r3, r0
 8017eec:	461a      	mov	r2, r3
 8017eee:	7bfb      	ldrb	r3, [r7, #15]
 8017ef0:	4413      	add	r3, r2
 8017ef2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017ef4:	7bbb      	ldrb	r3, [r7, #14]
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	73bb      	strb	r3, [r7, #14]
 8017efa:	7bba      	ldrb	r2, [r7, #14]
 8017efc:	78bb      	ldrb	r3, [r7, #2]
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d3ea      	bcc.n	8017ed8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3710      	adds	r7, #16
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}

08017f0c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017f0c:	b480      	push	{r7}
 8017f0e:	b087      	sub	sp, #28
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	60f8      	str	r0, [r7, #12]
 8017f14:	60b9      	str	r1, [r7, #8]
 8017f16:	4613      	mov	r3, r2
 8017f18:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d016      	beq.n	8017f4e <RegionCommonChanMaskCopy+0x42>
 8017f20:	68bb      	ldr	r3, [r7, #8]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d013      	beq.n	8017f4e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017f26:	2300      	movs	r3, #0
 8017f28:	75fb      	strb	r3, [r7, #23]
 8017f2a:	e00c      	b.n	8017f46 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017f2c:	7dfb      	ldrb	r3, [r7, #23]
 8017f2e:	005b      	lsls	r3, r3, #1
 8017f30:	68ba      	ldr	r2, [r7, #8]
 8017f32:	441a      	add	r2, r3
 8017f34:	7dfb      	ldrb	r3, [r7, #23]
 8017f36:	005b      	lsls	r3, r3, #1
 8017f38:	68f9      	ldr	r1, [r7, #12]
 8017f3a:	440b      	add	r3, r1
 8017f3c:	8812      	ldrh	r2, [r2, #0]
 8017f3e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017f40:	7dfb      	ldrb	r3, [r7, #23]
 8017f42:	3301      	adds	r3, #1
 8017f44:	75fb      	strb	r3, [r7, #23]
 8017f46:	7dfa      	ldrb	r2, [r7, #23]
 8017f48:	79fb      	ldrb	r3, [r7, #7]
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d3ee      	bcc.n	8017f2c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017f4e:	bf00      	nop
 8017f50:	371c      	adds	r7, #28
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bc80      	pop	{r7}
 8017f56:	4770      	bx	lr

08017f58 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017f58:	b082      	sub	sp, #8
 8017f5a:	b580      	push	{r7, lr}
 8017f5c:	b086      	sub	sp, #24
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	60f8      	str	r0, [r7, #12]
 8017f62:	60b9      	str	r1, [r7, #8]
 8017f64:	627b      	str	r3, [r7, #36]	; 0x24
 8017f66:	4613      	mov	r3, r2
 8017f68:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017f6a:	79f9      	ldrb	r1, [r7, #7]
 8017f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017f70:	cb0c      	ldmia	r3, {r2, r3}
 8017f72:	68f8      	ldr	r0, [r7, #12]
 8017f74:	f7ff fd8c 	bl	8017a90 <GetDutyCycle>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	68da      	ldr	r2, [r3, #12]
 8017f80:	8afb      	ldrh	r3, [r7, #22]
 8017f82:	68b9      	ldr	r1, [r7, #8]
 8017f84:	fb01 f303 	mul.w	r3, r1, r3
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	d909      	bls.n	8017fa0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	68da      	ldr	r2, [r3, #12]
 8017f90:	8afb      	ldrh	r3, [r7, #22]
 8017f92:	68b9      	ldr	r1, [r7, #8]
 8017f94:	fb01 f303 	mul.w	r3, r1, r3
 8017f98:	1ad2      	subs	r2, r2, r3
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017f9e:	e002      	b.n	8017fa6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	60da      	str	r2, [r3, #12]
}
 8017fa6:	bf00      	nop
 8017fa8:	3718      	adds	r7, #24
 8017faa:	46bd      	mov	sp, r7
 8017fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017fb0:	b002      	add	sp, #8
 8017fb2:	4770      	bx	lr

08017fb4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fb6:	b08f      	sub	sp, #60	; 0x3c
 8017fb8:	af04      	add	r7, sp, #16
 8017fba:	6039      	str	r1, [r7, #0]
 8017fbc:	4611      	mov	r1, r2
 8017fbe:	461a      	mov	r2, r3
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	71fb      	strb	r3, [r7, #7]
 8017fc4:	460b      	mov	r3, r1
 8017fc6:	71bb      	strb	r3, [r7, #6]
 8017fc8:	4613      	mov	r3, r2
 8017fca:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd0:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017fd2:	f006 f995 	bl	801e300 <UTIL_TIMER_GetCurrentTime>
 8017fd6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017fd8:	2300      	movs	r3, #0
 8017fda:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017fdc:	2301      	movs	r3, #1
 8017fde:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017fec:	e0ba      	b.n	8018164 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017fee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017ff2:	4613      	mov	r3, r2
 8017ff4:	005b      	lsls	r3, r3, #1
 8017ff6:	4413      	add	r3, r2
 8017ff8:	00db      	lsls	r3, r3, #3
 8017ffa:	461a      	mov	r2, r3
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	189c      	adds	r4, r3, r2
 8018000:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018004:	797a      	ldrb	r2, [r7, #5]
 8018006:	79fd      	ldrb	r5, [r7, #7]
 8018008:	69fb      	ldr	r3, [r7, #28]
 801800a:	9302      	str	r3, [sp, #8]
 801800c:	46ec      	mov	ip, sp
 801800e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018012:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018016:	e88c 0003 	stmia.w	ip, {r0, r1}
 801801a:	4633      	mov	r3, r6
 801801c:	4629      	mov	r1, r5
 801801e:	4620      	mov	r0, r4
 8018020:	f7ff fe22 	bl	8017c68 <UpdateTimeCredits>
 8018024:	4603      	mov	r3, r0
 8018026:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8018028:	8afa      	ldrh	r2, [r7, #22]
 801802a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801802c:	fb02 f303 	mul.w	r3, r2, r3
 8018030:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018032:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018036:	4613      	mov	r3, r2
 8018038:	005b      	lsls	r3, r3, #1
 801803a:	4413      	add	r3, r2
 801803c:	00db      	lsls	r3, r3, #3
 801803e:	461a      	mov	r2, r3
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	4413      	add	r3, r2
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	69ba      	ldr	r2, [r7, #24]
 8018048:	429a      	cmp	r2, r3
 801804a:	d908      	bls.n	801805e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801804c:	797b      	ldrb	r3, [r7, #5]
 801804e:	f083 0301 	eor.w	r3, r3, #1
 8018052:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018054:	2b00      	cmp	r3, #0
 8018056:	d013      	beq.n	8018080 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018058:	79fb      	ldrb	r3, [r7, #7]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d010      	beq.n	8018080 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801805e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018062:	4613      	mov	r3, r2
 8018064:	005b      	lsls	r3, r3, #1
 8018066:	4413      	add	r3, r2
 8018068:	00db      	lsls	r3, r3, #3
 801806a:	461a      	mov	r2, r3
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	4413      	add	r3, r2
 8018070:	2201      	movs	r2, #1
 8018072:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018078:	3301      	adds	r3, #1
 801807a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801807e:	e06c      	b.n	801815a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8018080:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018084:	4613      	mov	r3, r2
 8018086:	005b      	lsls	r3, r3, #1
 8018088:	4413      	add	r3, r2
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	461a      	mov	r2, r3
 801808e:	683b      	ldr	r3, [r7, #0]
 8018090:	4413      	add	r3, r2
 8018092:	2200      	movs	r2, #0
 8018094:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018096:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801809a:	4613      	mov	r3, r2
 801809c:	005b      	lsls	r3, r3, #1
 801809e:	4413      	add	r3, r2
 80180a0:	00db      	lsls	r3, r3, #3
 80180a2:	461a      	mov	r2, r3
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	4413      	add	r3, r2
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	69ba      	ldr	r2, [r7, #24]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d815      	bhi.n	80180dc <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80180b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180b4:	4613      	mov	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	4413      	add	r3, r2
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	461a      	mov	r2, r3
 80180be:	683b      	ldr	r3, [r7, #0]
 80180c0:	4413      	add	r3, r2
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	69ba      	ldr	r2, [r7, #24]
 80180c6:	1ad3      	subs	r3, r2, r3
 80180c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180ca:	4293      	cmp	r3, r2
 80180cc:	bf28      	it	cs
 80180ce:	4613      	movcs	r3, r2
 80180d0:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80180d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180d6:	3301      	adds	r3, #1
 80180d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80180dc:	79fb      	ldrb	r3, [r7, #7]
 80180de:	f083 0301 	eor.w	r3, r3, #1
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d038      	beq.n	801815a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80180e8:	2300      	movs	r3, #0
 80180ea:	60fb      	str	r3, [r7, #12]
 80180ec:	2300      	movs	r3, #0
 80180ee:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80180f0:	8afb      	ldrh	r3, [r7, #22]
 80180f2:	2b64      	cmp	r3, #100	; 0x64
 80180f4:	d103      	bne.n	80180fe <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80180f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80180fa:	60fb      	str	r3, [r7, #12]
 80180fc:	e009      	b.n	8018112 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80180fe:	8afb      	ldrh	r3, [r7, #22]
 8018100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018104:	d103      	bne.n	801810e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8018106:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801810a:	60fb      	str	r3, [r7, #12]
 801810c:	e001      	b.n	8018112 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801810e:	4b1e      	ldr	r3, [pc, #120]	; (8018188 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018110:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018114:	4a1c      	ldr	r2, [pc, #112]	; (8018188 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018116:	4293      	cmp	r3, r2
 8018118:	d90e      	bls.n	8018138 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801811a:	68fa      	ldr	r2, [r7, #12]
 801811c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801811e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8018122:	3b30      	subs	r3, #48	; 0x30
 8018124:	4919      	ldr	r1, [pc, #100]	; (801818c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8018126:	fba1 1303 	umull	r1, r3, r1, r3
 801812a:	0c1b      	lsrs	r3, r3, #16
 801812c:	3301      	adds	r3, #1
 801812e:	4918      	ldr	r1, [pc, #96]	; (8018190 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018130:	fb01 f303 	mul.w	r3, r1, r3
 8018134:	4413      	add	r3, r2
 8018136:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8018138:	f107 000c 	add.w	r0, r7, #12
 801813c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801813e:	9300      	str	r3, [sp, #0]
 8018140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018142:	f107 020c 	add.w	r2, r7, #12
 8018146:	ca06      	ldmia	r2, {r1, r2}
 8018148:	f005 f9f1 	bl	801d52e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801814c:	f107 030c 	add.w	r3, r7, #12
 8018150:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018154:	f005 faaa 	bl	801d6ac <SysTimeToMs>
 8018158:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801815a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801815e:	3301      	adds	r3, #1
 8018160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018164:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018168:	79bb      	ldrb	r3, [r7, #6]
 801816a:	429a      	cmp	r2, r3
 801816c:	f4ff af3f 	bcc.w	8017fee <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8018170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018174:	2b00      	cmp	r3, #0
 8018176:	d102      	bne.n	801817e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8018178:	f04f 33ff 	mov.w	r3, #4294967295
 801817c:	e000      	b.n	8018180 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018180:	4618      	mov	r0, r3
 8018182:	372c      	adds	r7, #44	; 0x2c
 8018184:	46bd      	mov	sp, r7
 8018186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018188:	0001ec30 	.word	0x0001ec30
 801818c:	c22e4507 	.word	0xc22e4507
 8018190:	00015180 	.word	0x00015180

08018194 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018194:	b480      	push	{r7}
 8018196:	b085      	sub	sp, #20
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
 801819c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801819e:	2300      	movs	r3, #0
 80181a0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	2b03      	cmp	r3, #3
 80181a8:	d13f      	bne.n	801822a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	3301      	adds	r3, #1
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	b25a      	sxtb	r2, r3
 80181b2:	683b      	ldr	r3, [r7, #0]
 80181b4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80181b6:	683b      	ldr	r3, [r7, #0]
 80181b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181bc:	f003 030f 	and.w	r3, r3, #15
 80181c0:	b25a      	sxtb	r2, r3
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	091b      	lsrs	r3, r3, #4
 80181d0:	b2db      	uxtb	r3, r3
 80181d2:	b25a      	sxtb	r2, r3
 80181d4:	683b      	ldr	r3, [r7, #0]
 80181d6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	3302      	adds	r3, #2
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	b29a      	uxth	r2, r3
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	889b      	ldrh	r3, [r3, #4]
 80181e8:	b21a      	sxth	r2, r3
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	3303      	adds	r3, #3
 80181ee:	781b      	ldrb	r3, [r3, #0]
 80181f0:	021b      	lsls	r3, r3, #8
 80181f2:	b21b      	sxth	r3, r3
 80181f4:	4313      	orrs	r3, r2
 80181f6:	b21b      	sxth	r3, r3
 80181f8:	b29a      	uxth	r2, r3
 80181fa:	683b      	ldr	r3, [r7, #0]
 80181fc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	791a      	ldrb	r2, [r3, #4]
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	091b      	lsrs	r3, r3, #4
 801820c:	b2db      	uxtb	r3, r3
 801820e:	f003 0307 	and.w	r3, r3, #7
 8018212:	b2da      	uxtb	r2, r3
 8018214:	683b      	ldr	r3, [r7, #0]
 8018216:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	781b      	ldrb	r3, [r3, #0]
 801821c:	f003 030f 	and.w	r3, r3, #15
 8018220:	b2da      	uxtb	r2, r3
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8018226:	2305      	movs	r3, #5
 8018228:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801822a:	7bfb      	ldrb	r3, [r7, #15]
}
 801822c:	4618      	mov	r0, r3
 801822e:	3714      	adds	r7, #20
 8018230:	46bd      	mov	sp, r7
 8018232:	bc80      	pop	{r7}
 8018234:	4770      	bx	lr

08018236 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8018236:	b5b0      	push	{r4, r5, r7, lr}
 8018238:	b088      	sub	sp, #32
 801823a:	af02      	add	r7, sp, #8
 801823c:	60f8      	str	r0, [r7, #12]
 801823e:	60b9      	str	r1, [r7, #8]
 8018240:	607a      	str	r2, [r7, #4]
 8018242:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	791b      	ldrb	r3, [r3, #4]
 8018248:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	799b      	ldrb	r3, [r3, #6]
 801824e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	79db      	ldrb	r3, [r3, #7]
 8018254:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	7a1b      	ldrb	r3, [r3, #8]
 801825a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	795b      	ldrb	r3, [r3, #5]
 8018260:	f083 0301 	eor.w	r3, r3, #1
 8018264:	b2db      	uxtb	r3, r3
 8018266:	2b00      	cmp	r3, #0
 8018268:	d008      	beq.n	801827c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	7adb      	ldrb	r3, [r3, #11]
 801826e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	7a5b      	ldrb	r3, [r3, #9]
 8018274:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	7a9b      	ldrb	r3, [r3, #10]
 801827a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801827c:	7dfb      	ldrb	r3, [r7, #23]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d04a      	beq.n	8018318 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8018282:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018286:	2b0f      	cmp	r3, #15
 8018288:	d103      	bne.n	8018292 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	7a5b      	ldrb	r3, [r3, #9]
 801828e:	75bb      	strb	r3, [r7, #22]
 8018290:	e01d      	b.n	80182ce <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	7b18      	ldrb	r0, [r3, #12]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	6919      	ldr	r1, [r3, #16]
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80182a6:	68fa      	ldr	r2, [r7, #12]
 80182a8:	6992      	ldr	r2, [r2, #24]
 80182aa:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80182ae:	9201      	str	r2, [sp, #4]
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	462b      	mov	r3, r5
 80182b4:	4622      	mov	r2, r4
 80182b6:	f7ff fd3a 	bl	8017d2e <RegionCommonChanVerifyDr>
 80182ba:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80182bc:	f083 0301 	eor.w	r3, r3, #1
 80182c0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d003      	beq.n	80182ce <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80182c6:	7dfb      	ldrb	r3, [r7, #23]
 80182c8:	f023 0302 	bic.w	r3, r3, #2
 80182cc:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80182ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80182d2:	2b0f      	cmp	r3, #15
 80182d4:	d103      	bne.n	80182de <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	7a9b      	ldrb	r3, [r3, #10]
 80182da:	757b      	strb	r3, [r7, #21]
 80182dc:	e01c      	b.n	8018318 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80182ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7ff fd8f 	bl	8017e12 <RegionCommonValueInRange>
 80182f4:	4603      	mov	r3, r0
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d10e      	bne.n	8018318 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018300:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018304:	429a      	cmp	r2, r3
 8018306:	da03      	bge.n	8018310 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	7f5b      	ldrb	r3, [r3, #29]
 801830c:	757b      	strb	r3, [r7, #21]
 801830e:	e003      	b.n	8018318 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018310:	7dfb      	ldrb	r3, [r7, #23]
 8018312:	f023 0304 	bic.w	r3, r3, #4
 8018316:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018318:	7dfb      	ldrb	r3, [r7, #23]
 801831a:	2b07      	cmp	r3, #7
 801831c:	d105      	bne.n	801832a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801831e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d101      	bne.n	801832a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8018326:	2301      	movs	r3, #1
 8018328:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	7dba      	ldrb	r2, [r7, #22]
 801832e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	7d7a      	ldrb	r2, [r7, #21]
 8018334:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8018336:	7d3a      	ldrb	r2, [r7, #20]
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	701a      	strb	r2, [r3, #0]

    return status;
 801833c:	7dfb      	ldrb	r3, [r7, #23]
}
 801833e:	4618      	mov	r0, r3
 8018340:	3718      	adds	r7, #24
 8018342:	46bd      	mov	sp, r7
 8018344:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018348 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8018348:	b480      	push	{r7}
 801834a:	b083      	sub	sp, #12
 801834c:	af00      	add	r7, sp, #0
 801834e:	4603      	mov	r3, r0
 8018350:	6039      	str	r1, [r7, #0]
 8018352:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8018354:	79fb      	ldrb	r3, [r7, #7]
 8018356:	4a06      	ldr	r2, [pc, #24]	; (8018370 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8018358:	fa02 f303 	lsl.w	r3, r2, r3
 801835c:	461a      	mov	r2, r3
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018364:	4618      	mov	r0, r3
 8018366:	370c      	adds	r7, #12
 8018368:	46bd      	mov	sp, r7
 801836a:	bc80      	pop	{r7}
 801836c:	4770      	bx	lr
 801836e:	bf00      	nop
 8018370:	000f4240 	.word	0x000f4240

08018374 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018374:	b480      	push	{r7}
 8018376:	b083      	sub	sp, #12
 8018378:	af00      	add	r7, sp, #0
 801837a:	4603      	mov	r3, r0
 801837c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801837e:	79fb      	ldrb	r3, [r7, #7]
 8018380:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018384:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018388:	4618      	mov	r0, r3
 801838a:	370c      	adds	r7, #12
 801838c:	46bd      	mov	sp, r7
 801838e:	bc80      	pop	{r7}
 8018390:	4770      	bx	lr
	...

08018394 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018394:	b480      	push	{r7}
 8018396:	b085      	sub	sp, #20
 8018398:	af00      	add	r7, sp, #0
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	607a      	str	r2, [r7, #4]
 801839e:	603b      	str	r3, [r7, #0]
 80183a0:	460b      	mov	r3, r1
 80183a2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80183a4:	7afa      	ldrb	r2, [r7, #11]
 80183a6:	7afb      	ldrb	r3, [r7, #11]
 80183a8:	3b04      	subs	r3, #4
 80183aa:	4619      	mov	r1, r3
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	fb03 f101 	mul.w	r1, r3, r1
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80183b8:	fb00 f303 	mul.w	r3, r0, r3
 80183bc:	440b      	add	r3, r1
 80183be:	005b      	lsls	r3, r3, #1
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d013      	beq.n	80183ec <RegionCommonComputeRxWindowParameters+0x58>
 80183c4:	7afb      	ldrb	r3, [r7, #11]
 80183c6:	3b04      	subs	r3, #4
 80183c8:	4619      	mov	r1, r3
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	fb03 f101 	mul.w	r1, r3, r1
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80183d6:	fb00 f303 	mul.w	r3, r0, r3
 80183da:	440b      	add	r3, r1
 80183dc:	0059      	lsls	r1, r3, #1
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	440b      	add	r3, r1
 80183e2:	1e59      	subs	r1, r3, #1
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80183ea:	e00f      	b.n	801840c <RegionCommonComputeRxWindowParameters+0x78>
 80183ec:	7afb      	ldrb	r3, [r7, #11]
 80183ee:	3b04      	subs	r3, #4
 80183f0:	4619      	mov	r1, r3
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	fb03 f101 	mul.w	r1, r3, r1
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80183fe:	fb00 f303 	mul.w	r3, r0, r3
 8018402:	440b      	add	r3, r1
 8018404:	0059      	lsls	r1, r3, #1
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	fbb1 f3f3 	udiv	r3, r1, r3
 801840c:	429a      	cmp	r2, r3
 801840e:	bf38      	it	cc
 8018410:	461a      	movcc	r2, r3
 8018412:	69bb      	ldr	r3, [r7, #24]
 8018414:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	009b      	lsls	r3, r3, #2
 801841a:	4619      	mov	r1, r3
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	68fa      	ldr	r2, [r7, #12]
 8018422:	fb02 f303 	mul.w	r3, r2, r3
 8018426:	2b00      	cmp	r3, #0
 8018428:	d007      	beq.n	801843a <RegionCommonComputeRxWindowParameters+0xa6>
 801842a:	69bb      	ldr	r3, [r7, #24]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	68fa      	ldr	r2, [r7, #12]
 8018430:	fb02 f303 	mul.w	r3, r2, r3
 8018434:	3301      	adds	r3, #1
 8018436:	085b      	lsrs	r3, r3, #1
 8018438:	e005      	b.n	8018446 <RegionCommonComputeRxWindowParameters+0xb2>
 801843a:	69bb      	ldr	r3, [r7, #24]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	68fa      	ldr	r2, [r7, #12]
 8018440:	fb02 f303 	mul.w	r3, r2, r3
 8018444:	085b      	lsrs	r3, r3, #1
 8018446:	1acb      	subs	r3, r1, r3
 8018448:	683a      	ldr	r2, [r7, #0]
 801844a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801844e:	fb01 f202 	mul.w	r2, r1, r2
 8018452:	1a9b      	subs	r3, r3, r2
 8018454:	2b00      	cmp	r3, #0
 8018456:	dd27      	ble.n	80184a8 <RegionCommonComputeRxWindowParameters+0x114>
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	4619      	mov	r1, r3
 801845e:	69bb      	ldr	r3, [r7, #24]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	68fa      	ldr	r2, [r7, #12]
 8018464:	fb02 f303 	mul.w	r3, r2, r3
 8018468:	2b00      	cmp	r3, #0
 801846a:	d007      	beq.n	801847c <RegionCommonComputeRxWindowParameters+0xe8>
 801846c:	69bb      	ldr	r3, [r7, #24]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	68fa      	ldr	r2, [r7, #12]
 8018472:	fb02 f303 	mul.w	r3, r2, r3
 8018476:	3301      	adds	r3, #1
 8018478:	085b      	lsrs	r3, r3, #1
 801847a:	e005      	b.n	8018488 <RegionCommonComputeRxWindowParameters+0xf4>
 801847c:	69bb      	ldr	r3, [r7, #24]
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	68fa      	ldr	r2, [r7, #12]
 8018482:	fb02 f303 	mul.w	r3, r2, r3
 8018486:	085b      	lsrs	r3, r3, #1
 8018488:	1acb      	subs	r3, r1, r3
 801848a:	683a      	ldr	r2, [r7, #0]
 801848c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018490:	fb01 f202 	mul.w	r2, r1, r2
 8018494:	1a9b      	subs	r3, r3, r2
 8018496:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801849a:	4a19      	ldr	r2, [pc, #100]	; (8018500 <RegionCommonComputeRxWindowParameters+0x16c>)
 801849c:	fb82 1203 	smull	r1, r2, r2, r3
 80184a0:	1192      	asrs	r2, r2, #6
 80184a2:	17db      	asrs	r3, r3, #31
 80184a4:	1ad3      	subs	r3, r2, r3
 80184a6:	e024      	b.n	80184f2 <RegionCommonComputeRxWindowParameters+0x15e>
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	009b      	lsls	r3, r3, #2
 80184ac:	4619      	mov	r1, r3
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	68fa      	ldr	r2, [r7, #12]
 80184b4:	fb02 f303 	mul.w	r3, r2, r3
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d007      	beq.n	80184cc <RegionCommonComputeRxWindowParameters+0x138>
 80184bc:	69bb      	ldr	r3, [r7, #24]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	68fa      	ldr	r2, [r7, #12]
 80184c2:	fb02 f303 	mul.w	r3, r2, r3
 80184c6:	3301      	adds	r3, #1
 80184c8:	085b      	lsrs	r3, r3, #1
 80184ca:	e005      	b.n	80184d8 <RegionCommonComputeRxWindowParameters+0x144>
 80184cc:	69bb      	ldr	r3, [r7, #24]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	68fa      	ldr	r2, [r7, #12]
 80184d2:	fb02 f303 	mul.w	r3, r2, r3
 80184d6:	085b      	lsrs	r3, r3, #1
 80184d8:	1acb      	subs	r3, r1, r3
 80184da:	683a      	ldr	r2, [r7, #0]
 80184dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184e0:	fb01 f202 	mul.w	r2, r1, r2
 80184e4:	1a9b      	subs	r3, r3, r2
 80184e6:	4a06      	ldr	r2, [pc, #24]	; (8018500 <RegionCommonComputeRxWindowParameters+0x16c>)
 80184e8:	fb82 1203 	smull	r1, r2, r2, r3
 80184ec:	1192      	asrs	r2, r2, #6
 80184ee:	17db      	asrs	r3, r3, #31
 80184f0:	1ad3      	subs	r3, r2, r3
 80184f2:	69fa      	ldr	r2, [r7, #28]
 80184f4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80184f6:	bf00      	nop
 80184f8:	3714      	adds	r7, #20
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bc80      	pop	{r7}
 80184fe:	4770      	bx	lr
 8018500:	10624dd3 	.word	0x10624dd3

08018504 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b086      	sub	sp, #24
 8018508:	af00      	add	r7, sp, #0
 801850a:	4603      	mov	r3, r0
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
 8018510:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018512:	2300      	movs	r3, #0
 8018514:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801851a:	005b      	lsls	r3, r3, #1
 801851c:	4618      	mov	r0, r3
 801851e:	f7e8 fbb7 	bl	8000c90 <__aeabi_ui2f>
 8018522:	4603      	mov	r3, r0
 8018524:	4619      	mov	r1, r3
 8018526:	68b8      	ldr	r0, [r7, #8]
 8018528:	f7e8 fb00 	bl	8000b2c <__aeabi_fsub>
 801852c:	4603      	mov	r3, r0
 801852e:	6879      	ldr	r1, [r7, #4]
 8018530:	4618      	mov	r0, r3
 8018532:	f7e8 fafb 	bl	8000b2c <__aeabi_fsub>
 8018536:	4603      	mov	r3, r0
 8018538:	4618      	mov	r0, r3
 801853a:	f7e7 ff89 	bl	8000450 <__aeabi_f2d>
 801853e:	4602      	mov	r2, r0
 8018540:	460b      	mov	r3, r1
 8018542:	4610      	mov	r0, r2
 8018544:	4619      	mov	r1, r3
 8018546:	f006 fad7 	bl	801eaf8 <floor>
 801854a:	4602      	mov	r2, r0
 801854c:	460b      	mov	r3, r1
 801854e:	4610      	mov	r0, r2
 8018550:	4619      	mov	r1, r3
 8018552:	f7e8 fa6f 	bl	8000a34 <__aeabi_d2iz>
 8018556:	4603      	mov	r3, r0
 8018558:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801855a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801855e:	4618      	mov	r0, r3
 8018560:	3718      	adds	r7, #24
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}

08018566 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018566:	b590      	push	{r4, r7, lr}
 8018568:	b087      	sub	sp, #28
 801856a:	af00      	add	r7, sp, #0
 801856c:	60f8      	str	r0, [r7, #12]
 801856e:	60b9      	str	r1, [r7, #8]
 8018570:	607a      	str	r2, [r7, #4]
 8018572:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018574:	2300      	movs	r3, #0
 8018576:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018578:	2300      	movs	r3, #0
 801857a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801857c:	2300      	movs	r3, #0
 801857e:	757b      	strb	r3, [r7, #21]
 8018580:	2300      	movs	r3, #0
 8018582:	753b      	strb	r3, [r7, #20]
 8018584:	e09c      	b.n	80186c0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018586:	2300      	movs	r3, #0
 8018588:	74fb      	strb	r3, [r7, #19]
 801858a:	e08f      	b.n	80186ac <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	685a      	ldr	r2, [r3, #4]
 8018590:	7d3b      	ldrb	r3, [r7, #20]
 8018592:	005b      	lsls	r3, r3, #1
 8018594:	4413      	add	r3, r2
 8018596:	881b      	ldrh	r3, [r3, #0]
 8018598:	461a      	mov	r2, r3
 801859a:	7cfb      	ldrb	r3, [r7, #19]
 801859c:	fa42 f303 	asr.w	r3, r2, r3
 80185a0:	f003 0301 	and.w	r3, r3, #1
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d07e      	beq.n	80186a6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	689a      	ldr	r2, [r3, #8]
 80185ac:	7d79      	ldrb	r1, [r7, #21]
 80185ae:	7cfb      	ldrb	r3, [r7, #19]
 80185b0:	440b      	add	r3, r1
 80185b2:	4619      	mov	r1, r3
 80185b4:	460b      	mov	r3, r1
 80185b6:	005b      	lsls	r3, r3, #1
 80185b8:	440b      	add	r3, r1
 80185ba:	009b      	lsls	r3, r3, #2
 80185bc:	4413      	add	r3, r2
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d06b      	beq.n	801869c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	f083 0301 	eor.w	r3, r3, #1
 80185cc:	b2db      	uxtb	r3, r3
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d011      	beq.n	80185f6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00d      	beq.n	80185f6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	695a      	ldr	r2, [r3, #20]
 80185de:	7d3b      	ldrb	r3, [r7, #20]
 80185e0:	005b      	lsls	r3, r3, #1
 80185e2:	4413      	add	r3, r2
 80185e4:	881b      	ldrh	r3, [r3, #0]
 80185e6:	461a      	mov	r2, r3
 80185e8:	7cfb      	ldrb	r3, [r7, #19]
 80185ea:	fa42 f303 	asr.w	r3, r2, r3
 80185ee:	f003 0301 	and.w	r3, r3, #1
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d054      	beq.n	80186a0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	785b      	ldrb	r3, [r3, #1]
 80185fa:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	689a      	ldr	r2, [r3, #8]
 8018600:	7d79      	ldrb	r1, [r7, #21]
 8018602:	7cfb      	ldrb	r3, [r7, #19]
 8018604:	440b      	add	r3, r1
 8018606:	4619      	mov	r1, r3
 8018608:	460b      	mov	r3, r1
 801860a:	005b      	lsls	r3, r3, #1
 801860c:	440b      	add	r3, r1
 801860e:	009b      	lsls	r3, r3, #2
 8018610:	4413      	add	r3, r2
 8018612:	7a1b      	ldrb	r3, [r3, #8]
 8018614:	f343 0303 	sbfx	r3, r3, #0, #4
 8018618:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801861a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	689a      	ldr	r2, [r3, #8]
 8018620:	7d79      	ldrb	r1, [r7, #21]
 8018622:	7cfb      	ldrb	r3, [r7, #19]
 8018624:	440b      	add	r3, r1
 8018626:	4619      	mov	r1, r3
 8018628:	460b      	mov	r3, r1
 801862a:	005b      	lsls	r3, r3, #1
 801862c:	440b      	add	r3, r1
 801862e:	009b      	lsls	r3, r3, #2
 8018630:	4413      	add	r3, r2
 8018632:	7a1b      	ldrb	r3, [r3, #8]
 8018634:	f343 1303 	sbfx	r3, r3, #4, #4
 8018638:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801863a:	461a      	mov	r2, r3
 801863c:	4621      	mov	r1, r4
 801863e:	f7ff fbe8 	bl	8017e12 <RegionCommonValueInRange>
 8018642:	4603      	mov	r3, r0
 8018644:	2b00      	cmp	r3, #0
 8018646:	d02d      	beq.n	80186a4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	68da      	ldr	r2, [r3, #12]
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	6899      	ldr	r1, [r3, #8]
 8018650:	7d78      	ldrb	r0, [r7, #21]
 8018652:	7cfb      	ldrb	r3, [r7, #19]
 8018654:	4403      	add	r3, r0
 8018656:	4618      	mov	r0, r3
 8018658:	4603      	mov	r3, r0
 801865a:	005b      	lsls	r3, r3, #1
 801865c:	4403      	add	r3, r0
 801865e:	009b      	lsls	r3, r3, #2
 8018660:	440b      	add	r3, r1
 8018662:	7a5b      	ldrb	r3, [r3, #9]
 8018664:	4619      	mov	r1, r3
 8018666:	460b      	mov	r3, r1
 8018668:	005b      	lsls	r3, r3, #1
 801866a:	440b      	add	r3, r1
 801866c:	00db      	lsls	r3, r3, #3
 801866e:	4413      	add	r3, r2
 8018670:	7d1b      	ldrb	r3, [r3, #20]
 8018672:	f083 0301 	eor.w	r3, r3, #1
 8018676:	b2db      	uxtb	r3, r3
 8018678:	2b00      	cmp	r3, #0
 801867a:	d003      	beq.n	8018684 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801867c:	7dbb      	ldrb	r3, [r7, #22]
 801867e:	3301      	adds	r3, #1
 8018680:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018682:	e010      	b.n	80186a6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018684:	7dfb      	ldrb	r3, [r7, #23]
 8018686:	1c5a      	adds	r2, r3, #1
 8018688:	75fa      	strb	r2, [r7, #23]
 801868a:	461a      	mov	r2, r3
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	4413      	add	r3, r2
 8018690:	7d79      	ldrb	r1, [r7, #21]
 8018692:	7cfa      	ldrb	r2, [r7, #19]
 8018694:	440a      	add	r2, r1
 8018696:	b2d2      	uxtb	r2, r2
 8018698:	701a      	strb	r2, [r3, #0]
 801869a:	e004      	b.n	80186a6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801869c:	bf00      	nop
 801869e:	e002      	b.n	80186a6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80186a0:	bf00      	nop
 80186a2:	e000      	b.n	80186a6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80186a4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80186a6:	7cfb      	ldrb	r3, [r7, #19]
 80186a8:	3301      	adds	r3, #1
 80186aa:	74fb      	strb	r3, [r7, #19]
 80186ac:	7cfb      	ldrb	r3, [r7, #19]
 80186ae:	2b0f      	cmp	r3, #15
 80186b0:	f67f af6c 	bls.w	801858c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80186b4:	7d7b      	ldrb	r3, [r7, #21]
 80186b6:	3310      	adds	r3, #16
 80186b8:	757b      	strb	r3, [r7, #21]
 80186ba:	7d3b      	ldrb	r3, [r7, #20]
 80186bc:	3301      	adds	r3, #1
 80186be:	753b      	strb	r3, [r7, #20]
 80186c0:	7d7b      	ldrb	r3, [r7, #21]
 80186c2:	b29a      	uxth	r2, r3
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	8a1b      	ldrh	r3, [r3, #16]
 80186c8:	429a      	cmp	r2, r3
 80186ca:	f4ff af5c 	bcc.w	8018586 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	7dfa      	ldrb	r2, [r7, #23]
 80186d2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80186d4:	683b      	ldr	r3, [r7, #0]
 80186d6:	7dba      	ldrb	r2, [r7, #22]
 80186d8:	701a      	strb	r2, [r3, #0]
}
 80186da:	bf00      	nop
 80186dc:	371c      	adds	r7, #28
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd90      	pop	{r4, r7, pc}

080186e2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80186e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186e4:	b08b      	sub	sp, #44	; 0x2c
 80186e6:	af04      	add	r7, sp, #16
 80186e8:	60f8      	str	r0, [r7, #12]
 80186ea:	60b9      	str	r1, [r7, #8]
 80186ec:	607a      	str	r2, [r7, #4]
 80186ee:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	4618      	mov	r0, r3
 80186f6:	f005 fe15 	bl	801e324 <UTIL_TIMER_GetElapsedTime>
 80186fa:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	681a      	ldr	r2, [r3, #0]
 8018700:	697b      	ldr	r3, [r7, #20]
 8018702:	1ad2      	subs	r2, r2, r3
 8018704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018706:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801870a:	2201      	movs	r2, #1
 801870c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	2200      	movs	r2, #0
 8018712:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	685b      	ldr	r3, [r3, #4]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d004      	beq.n	8018726 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018720:	697a      	ldr	r2, [r7, #20]
 8018722:	429a      	cmp	r2, r3
 8018724:	d32b      	bcc.n	801877e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018726:	68bb      	ldr	r3, [r7, #8]
 8018728:	2200      	movs	r2, #0
 801872a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	69db      	ldr	r3, [r3, #28]
 8018730:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018736:	68dd      	ldr	r5, [r3, #12]
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	7a5e      	ldrb	r6, [r3, #9]
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	7d1b      	ldrb	r3, [r3, #20]
 8018746:	68fa      	ldr	r2, [r7, #12]
 8018748:	6992      	ldr	r2, [r2, #24]
 801874a:	9203      	str	r2, [sp, #12]
 801874c:	68fa      	ldr	r2, [r7, #12]
 801874e:	f10d 0e04 	add.w	lr, sp, #4
 8018752:	320c      	adds	r2, #12
 8018754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018758:	e88e 0003 	stmia.w	lr, {r0, r1}
 801875c:	9300      	str	r3, [sp, #0]
 801875e:	4663      	mov	r3, ip
 8018760:	4632      	mov	r2, r6
 8018762:	4629      	mov	r1, r5
 8018764:	4620      	mov	r0, r4
 8018766:	f7ff fc25 	bl	8017fb4 <RegionCommonUpdateBandTimeOff>
 801876a:	4602      	mov	r2, r0
 801876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801876e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	69d8      	ldr	r0, [r3, #28]
 8018774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018776:	683a      	ldr	r2, [r7, #0]
 8018778:	6879      	ldr	r1, [r7, #4]
 801877a:	f7ff fef4 	bl	8018566 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d004      	beq.n	8018790 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018788:	2200      	movs	r2, #0
 801878a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801878c:	2300      	movs	r3, #0
 801878e:	e006      	b.n	801879e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d001      	beq.n	801879c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018798:	230b      	movs	r3, #11
 801879a:	e000      	b.n	801879e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801879c:	230c      	movs	r3, #12
    }
}
 801879e:	4618      	mov	r0, r3
 80187a0:	371c      	adds	r7, #28
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187a6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80187a6:	b5b0      	push	{r4, r5, r7, lr}
 80187a8:	b086      	sub	sp, #24
 80187aa:	af02      	add	r7, sp, #8
 80187ac:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f993 2000 	ldrsb.w	r2, [r3]
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80187c0:	429a      	cmp	r2, r3
 80187c2:	d103      	bne.n	80187cc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80187ca:	e026      	b.n	801881a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80187cc:	7bfb      	ldrb	r3, [r7, #15]
 80187ce:	3b01      	subs	r3, #1
 80187d0:	b2db      	uxtb	r3, r3
 80187d2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80187da:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80187de:	429a      	cmp	r2, r3
 80187e0:	d019      	beq.n	8018816 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	78d8      	ldrb	r0, [r3, #3]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6859      	ldr	r1, [r3, #4]
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187f6:	687a      	ldr	r2, [r7, #4]
 80187f8:	6892      	ldr	r2, [r2, #8]
 80187fa:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80187fe:	9201      	str	r2, [sp, #4]
 8018800:	9300      	str	r3, [sp, #0]
 8018802:	462b      	mov	r3, r5
 8018804:	4622      	mov	r2, r4
 8018806:	f7ff fa92 	bl	8017d2e <RegionCommonChanVerifyDr>
 801880a:	4603      	mov	r3, r0
 801880c:	f083 0301 	eor.w	r3, r3, #1
 8018810:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018812:	2b00      	cmp	r3, #0
 8018814:	d1da      	bne.n	80187cc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018816:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801881a:	4618      	mov	r0, r3
 801881c:	3710      	adds	r7, #16
 801881e:	46bd      	mov	sp, r7
 8018820:	bdb0      	pop	{r4, r5, r7, pc}

08018822 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018822:	b480      	push	{r7}
 8018824:	b083      	sub	sp, #12
 8018826:	af00      	add	r7, sp, #0
 8018828:	4603      	mov	r3, r0
 801882a:	460a      	mov	r2, r1
 801882c:	71fb      	strb	r3, [r7, #7]
 801882e:	4613      	mov	r3, r2
 8018830:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018832:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801883a:	4293      	cmp	r3, r2
 801883c:	bfb8      	it	lt
 801883e:	4613      	movlt	r3, r2
 8018840:	b25b      	sxtb	r3, r3
}
 8018842:	4618      	mov	r0, r3
 8018844:	370c      	adds	r7, #12
 8018846:	46bd      	mov	sp, r7
 8018848:	bc80      	pop	{r7}
 801884a:	4770      	bx	lr

0801884c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801884c:	b480      	push	{r7}
 801884e:	b083      	sub	sp, #12
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
 8018854:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	009b      	lsls	r3, r3, #2
 801885a:	683a      	ldr	r2, [r7, #0]
 801885c:	4413      	add	r3, r2
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	4a07      	ldr	r2, [pc, #28]	; (8018880 <RegionCommonGetBandwidth+0x34>)
 8018862:	4293      	cmp	r3, r2
 8018864:	d004      	beq.n	8018870 <RegionCommonGetBandwidth+0x24>
 8018866:	4a07      	ldr	r2, [pc, #28]	; (8018884 <RegionCommonGetBandwidth+0x38>)
 8018868:	4293      	cmp	r3, r2
 801886a:	d003      	beq.n	8018874 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801886c:	2300      	movs	r3, #0
 801886e:	e002      	b.n	8018876 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018870:	2301      	movs	r3, #1
 8018872:	e000      	b.n	8018876 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018874:	2302      	movs	r3, #2
    }
}
 8018876:	4618      	mov	r0, r3
 8018878:	370c      	adds	r7, #12
 801887a:	46bd      	mov	sp, r7
 801887c:	bc80      	pop	{r7}
 801887e:	4770      	bx	lr
 8018880:	0003d090 	.word	0x0003d090
 8018884:	0007a120 	.word	0x0007a120

08018888 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b086      	sub	sp, #24
 801888c:	af04      	add	r7, sp, #16
 801888e:	4603      	mov	r3, r0
 8018890:	6039      	str	r1, [r7, #0]
 8018892:	71fb      	strb	r3, [r7, #7]
 8018894:	4613      	mov	r3, r2
 8018896:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018898:	79fb      	ldrb	r3, [r7, #7]
 801889a:	2b05      	cmp	r3, #5
 801889c:	d810      	bhi.n	80188c0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801889e:	79fb      	ldrb	r3, [r7, #7]
 80188a0:	4a0f      	ldr	r2, [pc, #60]	; (80188e0 <RegionCommonRxConfigPrint+0x58>)
 80188a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80188aa:	9202      	str	r2, [sp, #8]
 80188ac:	683a      	ldr	r2, [r7, #0]
 80188ae:	9201      	str	r2, [sp, #4]
 80188b0:	9300      	str	r3, [sp, #0]
 80188b2:	4b0c      	ldr	r3, [pc, #48]	; (80188e4 <RegionCommonRxConfigPrint+0x5c>)
 80188b4:	2201      	movs	r2, #1
 80188b6:	2100      	movs	r1, #0
 80188b8:	2002      	movs	r0, #2
 80188ba:	f005 fe11 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80188be:	e00a      	b.n	80188d6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80188c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	9300      	str	r3, [sp, #0]
 80188ca:	4b07      	ldr	r3, [pc, #28]	; (80188e8 <RegionCommonRxConfigPrint+0x60>)
 80188cc:	2201      	movs	r2, #1
 80188ce:	2100      	movs	r1, #0
 80188d0:	2002      	movs	r0, #2
 80188d2:	f005 fe05 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 80188d6:	bf00      	nop
 80188d8:	3708      	adds	r7, #8
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	bf00      	nop
 80188e0:	20000138 	.word	0x20000138
 80188e4:	0801f32c 	.word	0x0801f32c
 80188e8:	0801f34c 	.word	0x0801f34c

080188ec <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b084      	sub	sp, #16
 80188f0:	af02      	add	r7, sp, #8
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	460b      	mov	r3, r1
 80188f6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80188f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188fc:	9301      	str	r3, [sp, #4]
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	9300      	str	r3, [sp, #0]
 8018902:	4b05      	ldr	r3, [pc, #20]	; (8018918 <RegionCommonTxConfigPrint+0x2c>)
 8018904:	2201      	movs	r2, #1
 8018906:	2100      	movs	r1, #0
 8018908:	2002      	movs	r0, #2
 801890a:	f005 fde9 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
}
 801890e:	bf00      	nop
 8018910:	3708      	adds	r7, #8
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	0801f368 	.word	0x0801f368

0801891c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b082      	sub	sp, #8
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018926:	4b2d      	ldr	r3, [pc, #180]	; (80189dc <VerifyRfFreq+0xc0>)
 8018928:	6a1b      	ldr	r3, [r3, #32]
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	4798      	blx	r3
 801892e:	4603      	mov	r3, r0
 8018930:	f083 0301 	eor.w	r3, r3, #1
 8018934:	b2db      	uxtb	r3, r3
 8018936:	2b00      	cmp	r3, #0
 8018938:	d001      	beq.n	801893e <VerifyRfFreq+0x22>
    {
        return false;
 801893a:	2300      	movs	r3, #0
 801893c:	e04a      	b.n	80189d4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	4a27      	ldr	r2, [pc, #156]	; (80189e0 <VerifyRfFreq+0xc4>)
 8018942:	4293      	cmp	r3, r2
 8018944:	d307      	bcc.n	8018956 <VerifyRfFreq+0x3a>
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	4a26      	ldr	r2, [pc, #152]	; (80189e4 <VerifyRfFreq+0xc8>)
 801894a:	4293      	cmp	r3, r2
 801894c:	d803      	bhi.n	8018956 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	2202      	movs	r2, #2
 8018952:	701a      	strb	r2, [r3, #0]
 8018954:	e03d      	b.n	80189d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	4a22      	ldr	r2, [pc, #136]	; (80189e4 <VerifyRfFreq+0xc8>)
 801895a:	4293      	cmp	r3, r2
 801895c:	d907      	bls.n	801896e <VerifyRfFreq+0x52>
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	4a21      	ldr	r2, [pc, #132]	; (80189e8 <VerifyRfFreq+0xcc>)
 8018962:	4293      	cmp	r3, r2
 8018964:	d803      	bhi.n	801896e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018966:	683b      	ldr	r3, [r7, #0]
 8018968:	2200      	movs	r2, #0
 801896a:	701a      	strb	r2, [r3, #0]
 801896c:	e031      	b.n	80189d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	4a1d      	ldr	r2, [pc, #116]	; (80189e8 <VerifyRfFreq+0xcc>)
 8018972:	4293      	cmp	r3, r2
 8018974:	d907      	bls.n	8018986 <VerifyRfFreq+0x6a>
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	4a1c      	ldr	r2, [pc, #112]	; (80189ec <VerifyRfFreq+0xd0>)
 801897a:	4293      	cmp	r3, r2
 801897c:	d803      	bhi.n	8018986 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801897e:	683b      	ldr	r3, [r7, #0]
 8018980:	2201      	movs	r2, #1
 8018982:	701a      	strb	r2, [r3, #0]
 8018984:	e025      	b.n	80189d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	4a19      	ldr	r2, [pc, #100]	; (80189f0 <VerifyRfFreq+0xd4>)
 801898a:	4293      	cmp	r3, r2
 801898c:	d907      	bls.n	801899e <VerifyRfFreq+0x82>
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	4a18      	ldr	r2, [pc, #96]	; (80189f4 <VerifyRfFreq+0xd8>)
 8018992:	4293      	cmp	r3, r2
 8018994:	d803      	bhi.n	801899e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	2205      	movs	r2, #5
 801899a:	701a      	strb	r2, [r3, #0]
 801899c:	e019      	b.n	80189d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	4a15      	ldr	r2, [pc, #84]	; (80189f8 <VerifyRfFreq+0xdc>)
 80189a2:	4293      	cmp	r3, r2
 80189a4:	d907      	bls.n	80189b6 <VerifyRfFreq+0x9a>
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	4a14      	ldr	r2, [pc, #80]	; (80189fc <VerifyRfFreq+0xe0>)
 80189aa:	4293      	cmp	r3, r2
 80189ac:	d803      	bhi.n	80189b6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	2203      	movs	r2, #3
 80189b2:	701a      	strb	r2, [r3, #0]
 80189b4:	e00d      	b.n	80189d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	4a11      	ldr	r2, [pc, #68]	; (8018a00 <VerifyRfFreq+0xe4>)
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d307      	bcc.n	80189ce <VerifyRfFreq+0xb2>
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	4a10      	ldr	r2, [pc, #64]	; (8018a04 <VerifyRfFreq+0xe8>)
 80189c2:	4293      	cmp	r3, r2
 80189c4:	d803      	bhi.n	80189ce <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80189c6:	683b      	ldr	r3, [r7, #0]
 80189c8:	2204      	movs	r2, #4
 80189ca:	701a      	strb	r2, [r3, #0]
 80189cc:	e001      	b.n	80189d2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80189ce:	2300      	movs	r3, #0
 80189d0:	e000      	b.n	80189d4 <VerifyRfFreq+0xb8>
    }
    return true;
 80189d2:	2301      	movs	r3, #1
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3708      	adds	r7, #8
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}
 80189dc:	0801f98c 	.word	0x0801f98c
 80189e0:	337055c0 	.word	0x337055c0
 80189e4:	338eda3f 	.word	0x338eda3f
 80189e8:	33bca100 	.word	0x33bca100
 80189ec:	33c5c8c0 	.word	0x33c5c8c0
 80189f0:	33c74f5f 	.word	0x33c74f5f
 80189f4:	33cef080 	.word	0x33cef080
 80189f8:	33d1fdbf 	.word	0x33d1fdbf
 80189fc:	33d5ce50 	.word	0x33d5ce50
 8018a00:	33d691a0 	.word	0x33d691a0
 8018a04:	33db2580 	.word	0x33db2580

08018a08 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018a08:	b590      	push	{r4, r7, lr}
 8018a0a:	b08b      	sub	sp, #44	; 0x2c
 8018a0c:	af04      	add	r7, sp, #16
 8018a0e:	4603      	mov	r3, r0
 8018a10:	460a      	mov	r2, r1
 8018a12:	71fb      	strb	r3, [r7, #7]
 8018a14:	4613      	mov	r3, r2
 8018a16:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a1c:	4a1f      	ldr	r2, [pc, #124]	; (8018a9c <GetTimeOnAir+0x94>)
 8018a1e:	5cd3      	ldrb	r3, [r2, r3]
 8018a20:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a26:	491e      	ldr	r1, [pc, #120]	; (8018aa0 <GetTimeOnAir+0x98>)
 8018a28:	4618      	mov	r0, r3
 8018a2a:	f7ff ff0f 	bl	801884c <RegionCommonGetBandwidth>
 8018a2e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018a30:	2300      	movs	r3, #0
 8018a32:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a38:	2b07      	cmp	r3, #7
 8018a3a:	d118      	bne.n	8018a6e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018a3c:	4b19      	ldr	r3, [pc, #100]	; (8018aa4 <GetTimeOnAir+0x9c>)
 8018a3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018a40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018a48:	fb02 f303 	mul.w	r3, r2, r3
 8018a4c:	4619      	mov	r1, r3
 8018a4e:	88bb      	ldrh	r3, [r7, #4]
 8018a50:	b2db      	uxtb	r3, r3
 8018a52:	2201      	movs	r2, #1
 8018a54:	9203      	str	r2, [sp, #12]
 8018a56:	9302      	str	r3, [sp, #8]
 8018a58:	2300      	movs	r3, #0
 8018a5a:	9301      	str	r3, [sp, #4]
 8018a5c:	2305      	movs	r3, #5
 8018a5e:	9300      	str	r3, [sp, #0]
 8018a60:	2300      	movs	r3, #0
 8018a62:	460a      	mov	r2, r1
 8018a64:	68f9      	ldr	r1, [r7, #12]
 8018a66:	2000      	movs	r0, #0
 8018a68:	47a0      	blx	r4
 8018a6a:	6178      	str	r0, [r7, #20]
 8018a6c:	e011      	b.n	8018a92 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018a6e:	4b0d      	ldr	r3, [pc, #52]	; (8018aa4 <GetTimeOnAir+0x9c>)
 8018a70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018a72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018a76:	88bb      	ldrh	r3, [r7, #4]
 8018a78:	b2db      	uxtb	r3, r3
 8018a7a:	2101      	movs	r1, #1
 8018a7c:	9103      	str	r1, [sp, #12]
 8018a7e:	9302      	str	r3, [sp, #8]
 8018a80:	2300      	movs	r3, #0
 8018a82:	9301      	str	r3, [sp, #4]
 8018a84:	2308      	movs	r3, #8
 8018a86:	9300      	str	r3, [sp, #0]
 8018a88:	2301      	movs	r3, #1
 8018a8a:	68f9      	ldr	r1, [r7, #12]
 8018a8c:	2001      	movs	r0, #1
 8018a8e:	47a0      	blx	r4
 8018a90:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018a92:	697b      	ldr	r3, [r7, #20]
}
 8018a94:	4618      	mov	r0, r3
 8018a96:	371c      	adds	r7, #28
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	bd90      	pop	{r4, r7, pc}
 8018a9c:	0801f954 	.word	0x0801f954
 8018aa0:	0801f95c 	.word	0x0801f95c
 8018aa4:	0801f98c 	.word	0x0801f98c

08018aa8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b088      	sub	sp, #32
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	781b      	ldrb	r3, [r3, #0]
 8018ab8:	3b01      	subs	r3, #1
 8018aba:	2b38      	cmp	r3, #56	; 0x38
 8018abc:	f200 8128 	bhi.w	8018d10 <RegionEU868GetPhyParam+0x268>
 8018ac0:	a201      	add	r2, pc, #4	; (adr r2, 8018ac8 <RegionEU868GetPhyParam+0x20>)
 8018ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ac6:	bf00      	nop
 8018ac8:	08018bad 	.word	0x08018bad
 8018acc:	08018bb3 	.word	0x08018bb3
 8018ad0:	08018d11 	.word	0x08018d11
 8018ad4:	08018d11 	.word	0x08018d11
 8018ad8:	08018d11 	.word	0x08018d11
 8018adc:	08018bb9 	.word	0x08018bb9
 8018ae0:	08018d11 	.word	0x08018d11
 8018ae4:	08018bf3 	.word	0x08018bf3
 8018ae8:	08018d11 	.word	0x08018d11
 8018aec:	08018bf9 	.word	0x08018bf9
 8018af0:	08018bff 	.word	0x08018bff
 8018af4:	08018c05 	.word	0x08018c05
 8018af8:	08018c0b 	.word	0x08018c0b
 8018afc:	08018c1b 	.word	0x08018c1b
 8018b00:	08018c2b 	.word	0x08018c2b
 8018b04:	08018c31 	.word	0x08018c31
 8018b08:	08018c39 	.word	0x08018c39
 8018b0c:	08018c41 	.word	0x08018c41
 8018b10:	08018c49 	.word	0x08018c49
 8018b14:	08018c51 	.word	0x08018c51
 8018b18:	08018c59 	.word	0x08018c59
 8018b1c:	08018c61 	.word	0x08018c61
 8018b20:	08018c75 	.word	0x08018c75
 8018b24:	08018c7b 	.word	0x08018c7b
 8018b28:	08018c81 	.word	0x08018c81
 8018b2c:	08018c87 	.word	0x08018c87
 8018b30:	08018c93 	.word	0x08018c93
 8018b34:	08018c9f 	.word	0x08018c9f
 8018b38:	08018ca5 	.word	0x08018ca5
 8018b3c:	08018cad 	.word	0x08018cad
 8018b40:	08018cb3 	.word	0x08018cb3
 8018b44:	08018cb9 	.word	0x08018cb9
 8018b48:	08018cc1 	.word	0x08018cc1
 8018b4c:	08018bbf 	.word	0x08018bbf
 8018b50:	08018d11 	.word	0x08018d11
 8018b54:	08018d11 	.word	0x08018d11
 8018b58:	08018d11 	.word	0x08018d11
 8018b5c:	08018d11 	.word	0x08018d11
 8018b60:	08018d11 	.word	0x08018d11
 8018b64:	08018d11 	.word	0x08018d11
 8018b68:	08018d11 	.word	0x08018d11
 8018b6c:	08018d11 	.word	0x08018d11
 8018b70:	08018d11 	.word	0x08018d11
 8018b74:	08018d11 	.word	0x08018d11
 8018b78:	08018d11 	.word	0x08018d11
 8018b7c:	08018d11 	.word	0x08018d11
 8018b80:	08018d11 	.word	0x08018d11
 8018b84:	08018cc7 	.word	0x08018cc7
 8018b88:	08018ccd 	.word	0x08018ccd
 8018b8c:	08018cdb 	.word	0x08018cdb
 8018b90:	08018d11 	.word	0x08018d11
 8018b94:	08018d11 	.word	0x08018d11
 8018b98:	08018ce1 	.word	0x08018ce1
 8018b9c:	08018ce7 	.word	0x08018ce7
 8018ba0:	08018d11 	.word	0x08018d11
 8018ba4:	08018ced 	.word	0x08018ced
 8018ba8:	08018cfd 	.word	0x08018cfd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018bac:	2300      	movs	r3, #0
 8018bae:	61bb      	str	r3, [r7, #24]
            break;
 8018bb0:	e0af      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	61bb      	str	r3, [r7, #24]
            break;
 8018bb6:	e0ac      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	61bb      	str	r3, [r7, #24]
            break;
 8018bbc:	e0a9      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018bc4:	733b      	strb	r3, [r7, #12]
 8018bc6:	2307      	movs	r3, #7
 8018bc8:	737b      	strb	r3, [r7, #13]
 8018bca:	2300      	movs	r3, #0
 8018bcc:	73bb      	strb	r3, [r7, #14]
 8018bce:	2310      	movs	r3, #16
 8018bd0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018bd2:	4b53      	ldr	r3, [pc, #332]	; (8018d20 <RegionEU868GetPhyParam+0x278>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018bda:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018bdc:	4b50      	ldr	r3, [pc, #320]	; (8018d20 <RegionEU868GetPhyParam+0x278>)
 8018bde:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018be0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018be2:	f107 030c 	add.w	r3, r7, #12
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7ff fddd 	bl	80187a6 <RegionCommonGetNextLowerTxDr>
 8018bec:	4603      	mov	r3, r0
 8018bee:	61bb      	str	r3, [r7, #24]
            break;
 8018bf0:	e08f      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	61bb      	str	r3, [r7, #24]
            break;
 8018bf6:	e08c      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	61bb      	str	r3, [r7, #24]
            break;
 8018bfc:	e089      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018bfe:	2340      	movs	r3, #64	; 0x40
 8018c00:	61bb      	str	r3, [r7, #24]
            break;
 8018c02:	e086      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018c04:	2320      	movs	r3, #32
 8018c06:	61bb      	str	r3, [r7, #24]
            break;
 8018c08:	e083      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c10:	461a      	mov	r2, r3
 8018c12:	4b44      	ldr	r3, [pc, #272]	; (8018d24 <RegionEU868GetPhyParam+0x27c>)
 8018c14:	5c9b      	ldrb	r3, [r3, r2]
 8018c16:	61bb      	str	r3, [r7, #24]
            break;
 8018c18:	e07b      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c20:	461a      	mov	r2, r3
 8018c22:	4b41      	ldr	r3, [pc, #260]	; (8018d28 <RegionEU868GetPhyParam+0x280>)
 8018c24:	5c9b      	ldrb	r3, [r3, r2]
 8018c26:	61bb      	str	r3, [r7, #24]
            break;
 8018c28:	e073      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	61bb      	str	r3, [r7, #24]
            break;
 8018c2e:	e070      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018c30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018c34:	61bb      	str	r3, [r7, #24]
            break;
 8018c36:	e06c      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018c3c:	61bb      	str	r3, [r7, #24]
            break;
 8018c3e:	e068      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018c44:	61bb      	str	r3, [r7, #24]
            break;
 8018c46:	e064      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8018c4c:	61bb      	str	r3, [r7, #24]
            break;
 8018c4e:	e060      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018c50:	f241 7370 	movw	r3, #6000	; 0x1770
 8018c54:	61bb      	str	r3, [r7, #24]
            break;
 8018c56:	e05c      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018c5c:	61bb      	str	r3, [r7, #24]
            break;
 8018c5e:	e058      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018c64:	4831      	ldr	r0, [pc, #196]	; (8018d2c <RegionEU868GetPhyParam+0x284>)
 8018c66:	f001 f87f 	bl	8019d68 <randr>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018c70:	61bb      	str	r3, [r7, #24]
            break;
 8018c72:	e04e      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018c74:	2300      	movs	r3, #0
 8018c76:	61bb      	str	r3, [r7, #24]
            break;
 8018c78:	e04b      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018c7a:	4b2d      	ldr	r3, [pc, #180]	; (8018d30 <RegionEU868GetPhyParam+0x288>)
 8018c7c:	61bb      	str	r3, [r7, #24]
            break;
 8018c7e:	e048      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018c80:	2300      	movs	r3, #0
 8018c82:	61bb      	str	r3, [r7, #24]
            break;
 8018c84:	e045      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018c86:	4b26      	ldr	r3, [pc, #152]	; (8018d20 <RegionEU868GetPhyParam+0x278>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018c8e:	61bb      	str	r3, [r7, #24]
            break;
 8018c90:	e03f      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018c92:	4b23      	ldr	r3, [pc, #140]	; (8018d20 <RegionEU868GetPhyParam+0x278>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018c9a:	61bb      	str	r3, [r7, #24]
            break;
 8018c9c:	e039      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018c9e:	2310      	movs	r3, #16
 8018ca0:	61bb      	str	r3, [r7, #24]
            break;
 8018ca2:	e036      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018ca4:	4b1e      	ldr	r3, [pc, #120]	; (8018d20 <RegionEU868GetPhyParam+0x278>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	61bb      	str	r3, [r7, #24]
            break;
 8018caa:	e032      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018cac:	2300      	movs	r3, #0
 8018cae:	61bb      	str	r3, [r7, #24]
            break;
 8018cb0:	e02f      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	61bb      	str	r3, [r7, #24]
            break;
 8018cb6:	e02c      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018cb8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018cbc:	61bb      	str	r3, [r7, #24]
            break;
 8018cbe:	e028      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018cc0:	4b1c      	ldr	r3, [pc, #112]	; (8018d34 <RegionEU868GetPhyParam+0x28c>)
 8018cc2:	61bb      	str	r3, [r7, #24]
            break;
 8018cc4:	e025      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018cc6:	4b1a      	ldr	r3, [pc, #104]	; (8018d30 <RegionEU868GetPhyParam+0x288>)
 8018cc8:	61bb      	str	r3, [r7, #24]
            break;
 8018cca:	e022      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018ccc:	2311      	movs	r3, #17
 8018cce:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018cd0:	2302      	movs	r3, #2
 8018cd2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	76bb      	strb	r3, [r7, #26]
            break;
 8018cd8:	e01b      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018cda:	2303      	movs	r3, #3
 8018cdc:	61bb      	str	r3, [r7, #24]
            break;
 8018cde:	e018      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018ce0:	4b13      	ldr	r3, [pc, #76]	; (8018d30 <RegionEU868GetPhyParam+0x288>)
 8018ce2:	61bb      	str	r3, [r7, #24]
            break;
 8018ce4:	e015      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018ce6:	2303      	movs	r3, #3
 8018ce8:	61bb      	str	r3, [r7, #24]
            break;
 8018cea:	e012      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018cf2:	461a      	mov	r2, r3
 8018cf4:	4b10      	ldr	r3, [pc, #64]	; (8018d38 <RegionEU868GetPhyParam+0x290>)
 8018cf6:	5c9b      	ldrb	r3, [r3, r2]
 8018cf8:	61bb      	str	r3, [r7, #24]
            break;
 8018cfa:	e00a      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d02:	490e      	ldr	r1, [pc, #56]	; (8018d3c <RegionEU868GetPhyParam+0x294>)
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7ff fda1 	bl	801884c <RegionCommonGetBandwidth>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	61bb      	str	r3, [r7, #24]
            break;
 8018d0e:	e000      	b.n	8018d12 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018d10:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018d12:	69bb      	ldr	r3, [r7, #24]
 8018d14:	61fb      	str	r3, [r7, #28]
 8018d16:	69fb      	ldr	r3, [r7, #28]
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3720      	adds	r7, #32
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}
 8018d20:	20001730 	.word	0x20001730
 8018d24:	0801f97c 	.word	0x0801f97c
 8018d28:	0801f984 	.word	0x0801f984
 8018d2c:	fffffc18 	.word	0xfffffc18
 8018d30:	33d3e608 	.word	0x33d3e608
 8018d34:	4009999a 	.word	0x4009999a
 8018d38:	0801f954 	.word	0x0801f954
 8018d3c:	0801f95c 	.word	0x0801f95c

08018d40 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018d40:	b590      	push	{r4, r7, lr}
 8018d42:	b085      	sub	sp, #20
 8018d44:	af02      	add	r7, sp, #8
 8018d46:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018d48:	4b11      	ldr	r3, [pc, #68]	; (8018d90 <RegionEU868SetBandTxDone+0x50>)
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	4b11      	ldr	r3, [pc, #68]	; (8018d94 <RegionEU868SetBandTxDone+0x54>)
 8018d4e:	6819      	ldr	r1, [r3, #0]
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	781b      	ldrb	r3, [r3, #0]
 8018d54:	4618      	mov	r0, r3
 8018d56:	4603      	mov	r3, r0
 8018d58:	005b      	lsls	r3, r3, #1
 8018d5a:	4403      	add	r3, r0
 8018d5c:	009b      	lsls	r3, r3, #2
 8018d5e:	440b      	add	r3, r1
 8018d60:	3309      	adds	r3, #9
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	4619      	mov	r1, r3
 8018d66:	460b      	mov	r3, r1
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	440b      	add	r3, r1
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	18d0      	adds	r0, r2, r3
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6899      	ldr	r1, [r3, #8]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	785c      	ldrb	r4, [r3, #1]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	691a      	ldr	r2, [r3, #16]
 8018d7c:	9200      	str	r2, [sp, #0]
 8018d7e:	68db      	ldr	r3, [r3, #12]
 8018d80:	4622      	mov	r2, r4
 8018d82:	f7ff f8e9 	bl	8017f58 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018d86:	bf00      	nop
 8018d88:	370c      	adds	r7, #12
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd90      	pop	{r4, r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	2000172c 	.word	0x2000172c
 8018d94:	20001730 	.word	0x20001730

08018d98 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b0b0      	sub	sp, #192	; 0xc0
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018da4:	2290      	movs	r2, #144	; 0x90
 8018da6:	2100      	movs	r1, #0
 8018da8:	4618      	mov	r0, r3
 8018daa:	f005 fe11 	bl	801e9d0 <memset>
 8018dae:	2364      	movs	r3, #100	; 0x64
 8018db0:	863b      	strh	r3, [r7, #48]	; 0x30
 8018db2:	2364      	movs	r3, #100	; 0x64
 8018db4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018dbc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018dc0:	230a      	movs	r3, #10
 8018dc2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018dc6:	2364      	movs	r3, #100	; 0x64
 8018dc8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018dd0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	7a1b      	ldrb	r3, [r3, #8]
 8018dd8:	2b02      	cmp	r3, #2
 8018dda:	d05e      	beq.n	8018e9a <RegionEU868InitDefaults+0x102>
 8018ddc:	2b02      	cmp	r3, #2
 8018dde:	dc6b      	bgt.n	8018eb8 <RegionEU868InitDefaults+0x120>
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d002      	beq.n	8018dea <RegionEU868InitDefaults+0x52>
 8018de4:	2b01      	cmp	r3, #1
 8018de6:	d03f      	beq.n	8018e68 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018de8:	e066      	b.n	8018eb8 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d063      	beq.n	8018eba <RegionEU868InitDefaults+0x122>
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	685b      	ldr	r3, [r3, #4]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d05f      	beq.n	8018eba <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	4a30      	ldr	r2, [pc, #192]	; (8018ec0 <RegionEU868InitDefaults+0x128>)
 8018e00:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	4a2f      	ldr	r2, [pc, #188]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e08:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018e0a:	4b2d      	ldr	r3, [pc, #180]	; (8018ec0 <RegionEU868InitDefaults+0x128>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e14:	2290      	movs	r2, #144	; 0x90
 8018e16:	4619      	mov	r1, r3
 8018e18:	f000 ffbd 	bl	8019d96 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018e1c:	4b29      	ldr	r3, [pc, #164]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a29      	ldr	r2, [pc, #164]	; (8018ec8 <RegionEU868InitDefaults+0x130>)
 8018e22:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018e28:	4b26      	ldr	r3, [pc, #152]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	4a27      	ldr	r2, [pc, #156]	; (8018ecc <RegionEU868InitDefaults+0x134>)
 8018e2e:	330c      	adds	r3, #12
 8018e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018e36:	4b23      	ldr	r3, [pc, #140]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	4a25      	ldr	r2, [pc, #148]	; (8018ed0 <RegionEU868InitDefaults+0x138>)
 8018e3c:	3318      	adds	r3, #24
 8018e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018e44:	4b1f      	ldr	r3, [pc, #124]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2207      	movs	r2, #7
 8018e4a:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018e4e:	4b1d      	ldr	r3, [pc, #116]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018e56:	4b1b      	ldr	r3, [pc, #108]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018e5e:	2201      	movs	r2, #1
 8018e60:	4619      	mov	r1, r3
 8018e62:	f7ff f853 	bl	8017f0c <RegionCommonChanMaskCopy>
 8018e66:	e028      	b.n	8018eba <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018e68:	4b16      	ldr	r3, [pc, #88]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018e70:	4b14      	ldr	r3, [pc, #80]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	2200      	movs	r2, #0
 8018e76:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018e78:	4b12      	ldr	r3, [pc, #72]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	2200      	movs	r2, #0
 8018e7e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018e80:	4b10      	ldr	r3, [pc, #64]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018e88:	4b0e      	ldr	r3, [pc, #56]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018e90:	2201      	movs	r2, #1
 8018e92:	4619      	mov	r1, r3
 8018e94:	f7ff f83a 	bl	8017f0c <RegionCommonChanMaskCopy>
            break;
 8018e98:	e00f      	b.n	8018eba <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018e9a:	4b0a      	ldr	r3, [pc, #40]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018ea2:	4b08      	ldr	r3, [pc, #32]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018eaa:	4b06      	ldr	r3, [pc, #24]	; (8018ec4 <RegionEU868InitDefaults+0x12c>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	430a      	orrs	r2, r1
 8018eb0:	b292      	uxth	r2, r2
 8018eb2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018eb6:	e000      	b.n	8018eba <RegionEU868InitDefaults+0x122>
            break;
 8018eb8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018eba:	37c0      	adds	r7, #192	; 0xc0
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd80      	pop	{r7, pc}
 8018ec0:	2000172c 	.word	0x2000172c
 8018ec4:	20001730 	.word	0x20001730
 8018ec8:	0801f384 	.word	0x0801f384
 8018ecc:	0801f390 	.word	0x0801f390
 8018ed0:	0801f39c 	.word	0x0801f39c

08018ed4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
 8018edc:	460b      	mov	r3, r1
 8018ede:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018ee0:	78fb      	ldrb	r3, [r7, #3]
 8018ee2:	2b0f      	cmp	r3, #15
 8018ee4:	d86c      	bhi.n	8018fc0 <RegionEU868Verify+0xec>
 8018ee6:	a201      	add	r2, pc, #4	; (adr r2, 8018eec <RegionEU868Verify+0x18>)
 8018ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eec:	08018f2d 	.word	0x08018f2d
 8018ef0:	08018fc1 	.word	0x08018fc1
 8018ef4:	08018fc1 	.word	0x08018fc1
 8018ef8:	08018fc1 	.word	0x08018fc1
 8018efc:	08018fc1 	.word	0x08018fc1
 8018f00:	08018f45 	.word	0x08018f45
 8018f04:	08018f63 	.word	0x08018f63
 8018f08:	08018f81 	.word	0x08018f81
 8018f0c:	08018fc1 	.word	0x08018fc1
 8018f10:	08018f9f 	.word	0x08018f9f
 8018f14:	08018f9f 	.word	0x08018f9f
 8018f18:	08018fc1 	.word	0x08018fc1
 8018f1c:	08018fc1 	.word	0x08018fc1
 8018f20:	08018fc1 	.word	0x08018fc1
 8018f24:	08018fc1 	.word	0x08018fc1
 8018f28:	08018fbd 	.word	0x08018fbd
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	f107 020f 	add.w	r2, r7, #15
 8018f38:	4611      	mov	r1, r2
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f7ff fcee 	bl	801891c <VerifyRfFreq>
 8018f40:	4603      	mov	r3, r0
 8018f42:	e03e      	b.n	8018fc2 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f993 3000 	ldrsb.w	r3, [r3]
 8018f4a:	2207      	movs	r2, #7
 8018f4c:	2100      	movs	r1, #0
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7fe ff5f 	bl	8017e12 <RegionCommonValueInRange>
 8018f54:	4603      	mov	r3, r0
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	bf14      	ite	ne
 8018f5a:	2301      	movne	r3, #1
 8018f5c:	2300      	moveq	r3, #0
 8018f5e:	b2db      	uxtb	r3, r3
 8018f60:	e02f      	b.n	8018fc2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f993 3000 	ldrsb.w	r3, [r3]
 8018f68:	2205      	movs	r2, #5
 8018f6a:	2100      	movs	r1, #0
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f7fe ff50 	bl	8017e12 <RegionCommonValueInRange>
 8018f72:	4603      	mov	r3, r0
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	bf14      	ite	ne
 8018f78:	2301      	movne	r3, #1
 8018f7a:	2300      	moveq	r3, #0
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	e020      	b.n	8018fc2 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	f993 3000 	ldrsb.w	r3, [r3]
 8018f86:	2207      	movs	r2, #7
 8018f88:	2100      	movs	r1, #0
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7fe ff41 	bl	8017e12 <RegionCommonValueInRange>
 8018f90:	4603      	mov	r3, r0
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	bf14      	ite	ne
 8018f96:	2301      	movne	r3, #1
 8018f98:	2300      	moveq	r3, #0
 8018f9a:	b2db      	uxtb	r3, r3
 8018f9c:	e011      	b.n	8018fc2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8018fa4:	2207      	movs	r2, #7
 8018fa6:	2100      	movs	r1, #0
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7fe ff32 	bl	8017e12 <RegionCommonValueInRange>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	bf14      	ite	ne
 8018fb4:	2301      	movne	r3, #1
 8018fb6:	2300      	moveq	r3, #0
 8018fb8:	b2db      	uxtb	r3, r3
 8018fba:	e002      	b.n	8018fc2 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	e000      	b.n	8018fc2 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8018fc0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3710      	adds	r7, #16
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}
 8018fca:	bf00      	nop

08018fcc <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b08a      	sub	sp, #40	; 0x28
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018fd4:	2350      	movs	r3, #80	; 0x50
 8018fd6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	791b      	ldrb	r3, [r3, #4]
 8018fde:	2b10      	cmp	r3, #16
 8018fe0:	d162      	bne.n	80190a8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	330f      	adds	r3, #15
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d15e      	bne.n	80190ac <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018fee:	2300      	movs	r3, #0
 8018ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ff4:	2303      	movs	r3, #3
 8018ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018ffa:	e050      	b.n	801909e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019000:	2b07      	cmp	r3, #7
 8019002:	d824      	bhi.n	801904e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801900c:	4413      	add	r3, r2
 801900e:	781b      	ldrb	r3, [r3, #0]
 8019010:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8019012:	69ba      	ldr	r2, [r7, #24]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	6819      	ldr	r1, [r3, #0]
 8019018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801901c:	3301      	adds	r3, #1
 801901e:	440b      	add	r3, r1
 8019020:	781b      	ldrb	r3, [r3, #0]
 8019022:	021b      	lsls	r3, r3, #8
 8019024:	4313      	orrs	r3, r2
 8019026:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019028:	69ba      	ldr	r2, [r7, #24]
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	6819      	ldr	r1, [r3, #0]
 801902e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019032:	3302      	adds	r3, #2
 8019034:	440b      	add	r3, r1
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	041b      	lsls	r3, r3, #16
 801903a:	4313      	orrs	r3, r2
 801903c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801903e:	69bb      	ldr	r3, [r7, #24]
 8019040:	2264      	movs	r2, #100	; 0x64
 8019042:	fb02 f303 	mul.w	r3, r2, r3
 8019046:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8019048:	2300      	movs	r3, #0
 801904a:	61fb      	str	r3, [r7, #28]
 801904c:	e006      	b.n	801905c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801904e:	2300      	movs	r3, #0
 8019050:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8019052:	2300      	movs	r3, #0
 8019054:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8019058:	2300      	movs	r3, #0
 801905a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801905c:	69bb      	ldr	r3, [r7, #24]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d00b      	beq.n	801907a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8019062:	f107 0318 	add.w	r3, r7, #24
 8019066:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8019068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801906c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801906e:	f107 0310 	add.w	r3, r7, #16
 8019072:	4618      	mov	r0, r3
 8019074:	f000 fd14 	bl	8019aa0 <RegionEU868ChannelAdd>
 8019078:	e007      	b.n	801908a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801907a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801907e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8019080:	f107 030c 	add.w	r3, r7, #12
 8019084:	4618      	mov	r0, r3
 8019086:	f000 fdad 	bl	8019be4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801908a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801908e:	3303      	adds	r3, #3
 8019090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019098:	3301      	adds	r3, #1
 801909a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801909e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190a2:	2b0f      	cmp	r3, #15
 80190a4:	d9aa      	bls.n	8018ffc <RegionEU868ApplyCFList+0x30>
 80190a6:	e002      	b.n	80190ae <RegionEU868ApplyCFList+0xe2>
        return;
 80190a8:	bf00      	nop
 80190aa:	e000      	b.n	80190ae <RegionEU868ApplyCFList+0xe2>
        return;
 80190ac:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80190ae:	3728      	adds	r7, #40	; 0x28
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}

080190b4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b082      	sub	sp, #8
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	791b      	ldrb	r3, [r3, #4]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d002      	beq.n	80190ca <RegionEU868ChanMaskSet+0x16>
 80190c4:	2b01      	cmp	r3, #1
 80190c6:	d00b      	beq.n	80190e0 <RegionEU868ChanMaskSet+0x2c>
 80190c8:	e015      	b.n	80190f6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80190ca:	4b0e      	ldr	r3, [pc, #56]	; (8019104 <RegionEU868ChanMaskSet+0x50>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	2201      	movs	r2, #1
 80190d8:	4619      	mov	r1, r3
 80190da:	f7fe ff17 	bl	8017f0c <RegionCommonChanMaskCopy>
            break;
 80190de:	e00c      	b.n	80190fa <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80190e0:	4b08      	ldr	r3, [pc, #32]	; (8019104 <RegionEU868ChanMaskSet+0x50>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	2201      	movs	r2, #1
 80190ee:	4619      	mov	r1, r3
 80190f0:	f7fe ff0c 	bl	8017f0c <RegionCommonChanMaskCopy>
            break;
 80190f4:	e001      	b.n	80190fa <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80190f6:	2300      	movs	r3, #0
 80190f8:	e000      	b.n	80190fc <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80190fa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3708      	adds	r7, #8
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	20001730 	.word	0x20001730

08019108 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b088      	sub	sp, #32
 801910c:	af02      	add	r7, sp, #8
 801910e:	60ba      	str	r2, [r7, #8]
 8019110:	607b      	str	r3, [r7, #4]
 8019112:	4603      	mov	r3, r0
 8019114:	73fb      	strb	r3, [r7, #15]
 8019116:	460b      	mov	r3, r1
 8019118:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801911a:	2300      	movs	r3, #0
 801911c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801911e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019122:	2b07      	cmp	r3, #7
 8019124:	bfa8      	it	ge
 8019126:	2307      	movge	r3, #7
 8019128:	b25a      	sxtb	r2, r3
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019134:	491e      	ldr	r1, [pc, #120]	; (80191b0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019136:	4618      	mov	r0, r3
 8019138:	f7ff fb88 	bl	801884c <RegionCommonGetBandwidth>
 801913c:	4603      	mov	r3, r0
 801913e:	b2da      	uxtb	r2, r3
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801914a:	2b07      	cmp	r3, #7
 801914c:	d10a      	bne.n	8019164 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019154:	461a      	mov	r2, r3
 8019156:	4b17      	ldr	r3, [pc, #92]	; (80191b4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8019158:	5c9b      	ldrb	r3, [r3, r2]
 801915a:	4618      	mov	r0, r3
 801915c:	f7ff f90a 	bl	8018374 <RegionCommonComputeSymbolTimeFsk>
 8019160:	6178      	str	r0, [r7, #20]
 8019162:	e011      	b.n	8019188 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801916a:	461a      	mov	r2, r3
 801916c:	4b11      	ldr	r3, [pc, #68]	; (80191b4 <RegionEU868ComputeRxWindowParameters+0xac>)
 801916e:	5c9a      	ldrb	r2, [r3, r2]
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019176:	4619      	mov	r1, r3
 8019178:	4b0d      	ldr	r3, [pc, #52]	; (80191b0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801917a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801917e:	4619      	mov	r1, r3
 8019180:	4610      	mov	r0, r2
 8019182:	f7ff f8e1 	bl	8018348 <RegionCommonComputeSymbolTimeLoRa>
 8019186:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019188:	4b0b      	ldr	r3, [pc, #44]	; (80191b8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801918a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801918c:	4798      	blx	r3
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	3308      	adds	r3, #8
 8019192:	687a      	ldr	r2, [r7, #4]
 8019194:	320c      	adds	r2, #12
 8019196:	7bb9      	ldrb	r1, [r7, #14]
 8019198:	9201      	str	r2, [sp, #4]
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	4603      	mov	r3, r0
 801919e:	68ba      	ldr	r2, [r7, #8]
 80191a0:	6978      	ldr	r0, [r7, #20]
 80191a2:	f7ff f8f7 	bl	8018394 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80191a6:	bf00      	nop
 80191a8:	3718      	adds	r7, #24
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	0801f95c 	.word	0x0801f95c
 80191b4:	0801f954 	.word	0x0801f954
 80191b8:	0801f98c 	.word	0x0801f98c

080191bc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80191bc:	b5b0      	push	{r4, r5, r7, lr}
 80191be:	b090      	sub	sp, #64	; 0x40
 80191c0:	af0a      	add	r7, sp, #40	; 0x28
 80191c2:	6078      	str	r0, [r7, #4]
 80191c4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	785b      	ldrb	r3, [r3, #1]
 80191ca:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80191cc:	2300      	movs	r3, #0
 80191ce:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80191d0:	2300      	movs	r3, #0
 80191d2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	685b      	ldr	r3, [r3, #4]
 80191d8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80191da:	4b5a      	ldr	r3, [pc, #360]	; (8019344 <RegionEU868RxConfig+0x188>)
 80191dc:	685b      	ldr	r3, [r3, #4]
 80191de:	4798      	blx	r3
 80191e0:	4603      	mov	r3, r0
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d001      	beq.n	80191ea <RegionEU868RxConfig+0x2e>
    {
        return false;
 80191e6:	2300      	movs	r3, #0
 80191e8:	e0a8      	b.n	801933c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	7cdb      	ldrb	r3, [r3, #19]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d126      	bne.n	8019240 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80191f2:	4b55      	ldr	r3, [pc, #340]	; (8019348 <RegionEU868RxConfig+0x18c>)
 80191f4:	681a      	ldr	r2, [r3, #0]
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	781b      	ldrb	r3, [r3, #0]
 80191fa:	4619      	mov	r1, r3
 80191fc:	460b      	mov	r3, r1
 80191fe:	005b      	lsls	r3, r3, #1
 8019200:	440b      	add	r3, r1
 8019202:	009b      	lsls	r3, r3, #2
 8019204:	4413      	add	r3, r2
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801920a:	4b4f      	ldr	r3, [pc, #316]	; (8019348 <RegionEU868RxConfig+0x18c>)
 801920c:	681a      	ldr	r2, [r3, #0]
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	4619      	mov	r1, r3
 8019214:	460b      	mov	r3, r1
 8019216:	005b      	lsls	r3, r3, #1
 8019218:	440b      	add	r3, r1
 801921a:	009b      	lsls	r3, r3, #2
 801921c:	4413      	add	r3, r2
 801921e:	3304      	adds	r3, #4
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d00c      	beq.n	8019240 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8019226:	4b48      	ldr	r3, [pc, #288]	; (8019348 <RegionEU868RxConfig+0x18c>)
 8019228:	681a      	ldr	r2, [r3, #0]
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	4619      	mov	r1, r3
 8019230:	460b      	mov	r3, r1
 8019232:	005b      	lsls	r3, r3, #1
 8019234:	440b      	add	r3, r1
 8019236:	009b      	lsls	r3, r3, #2
 8019238:	4413      	add	r3, r2
 801923a:	3304      	adds	r3, #4
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8019240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019244:	4a41      	ldr	r2, [pc, #260]	; (801934c <RegionEU868RxConfig+0x190>)
 8019246:	5cd3      	ldrb	r3, [r2, r3]
 8019248:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801924a:	4b3e      	ldr	r3, [pc, #248]	; (8019344 <RegionEU868RxConfig+0x188>)
 801924c:	68db      	ldr	r3, [r3, #12]
 801924e:	6938      	ldr	r0, [r7, #16]
 8019250:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8019252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019256:	2b07      	cmp	r3, #7
 8019258:	d128      	bne.n	80192ac <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801925a:	2300      	movs	r3, #0
 801925c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801925e:	4b39      	ldr	r3, [pc, #228]	; (8019344 <RegionEU868RxConfig+0x188>)
 8019260:	699c      	ldr	r4, [r3, #24]
 8019262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801926a:	fb02 f303 	mul.w	r3, r2, r3
 801926e:	4619      	mov	r1, r3
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	689b      	ldr	r3, [r3, #8]
 8019274:	b29b      	uxth	r3, r3
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	7c92      	ldrb	r2, [r2, #18]
 801927a:	7df8      	ldrb	r0, [r7, #23]
 801927c:	9209      	str	r2, [sp, #36]	; 0x24
 801927e:	2200      	movs	r2, #0
 8019280:	9208      	str	r2, [sp, #32]
 8019282:	2200      	movs	r2, #0
 8019284:	9207      	str	r2, [sp, #28]
 8019286:	2200      	movs	r2, #0
 8019288:	9206      	str	r2, [sp, #24]
 801928a:	2201      	movs	r2, #1
 801928c:	9205      	str	r2, [sp, #20]
 801928e:	2200      	movs	r2, #0
 8019290:	9204      	str	r2, [sp, #16]
 8019292:	2200      	movs	r2, #0
 8019294:	9203      	str	r2, [sp, #12]
 8019296:	9302      	str	r3, [sp, #8]
 8019298:	2305      	movs	r3, #5
 801929a:	9301      	str	r3, [sp, #4]
 801929c:	4b2c      	ldr	r3, [pc, #176]	; (8019350 <RegionEU868RxConfig+0x194>)
 801929e:	9300      	str	r3, [sp, #0]
 80192a0:	2300      	movs	r3, #0
 80192a2:	460a      	mov	r2, r1
 80192a4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80192a8:	47a0      	blx	r4
 80192aa:	e024      	b.n	80192f6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80192ac:	2301      	movs	r3, #1
 80192ae:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80192b0:	4b24      	ldr	r3, [pc, #144]	; (8019344 <RegionEU868RxConfig+0x188>)
 80192b2:	699c      	ldr	r4, [r3, #24]
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	789b      	ldrb	r3, [r3, #2]
 80192b8:	461d      	mov	r5, r3
 80192ba:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	689b      	ldr	r3, [r3, #8]
 80192c2:	b29b      	uxth	r3, r3
 80192c4:	687a      	ldr	r2, [r7, #4]
 80192c6:	7c92      	ldrb	r2, [r2, #18]
 80192c8:	7df8      	ldrb	r0, [r7, #23]
 80192ca:	9209      	str	r2, [sp, #36]	; 0x24
 80192cc:	2201      	movs	r2, #1
 80192ce:	9208      	str	r2, [sp, #32]
 80192d0:	2200      	movs	r2, #0
 80192d2:	9207      	str	r2, [sp, #28]
 80192d4:	2200      	movs	r2, #0
 80192d6:	9206      	str	r2, [sp, #24]
 80192d8:	2200      	movs	r2, #0
 80192da:	9205      	str	r2, [sp, #20]
 80192dc:	2200      	movs	r2, #0
 80192de:	9204      	str	r2, [sp, #16]
 80192e0:	2200      	movs	r2, #0
 80192e2:	9203      	str	r2, [sp, #12]
 80192e4:	9302      	str	r3, [sp, #8]
 80192e6:	2308      	movs	r3, #8
 80192e8:	9301      	str	r3, [sp, #4]
 80192ea:	2300      	movs	r3, #0
 80192ec:	9300      	str	r3, [sp, #0]
 80192ee:	2301      	movs	r3, #1
 80192f0:	460a      	mov	r2, r1
 80192f2:	4629      	mov	r1, r5
 80192f4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	7c5b      	ldrb	r3, [r3, #17]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d005      	beq.n	801930a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80192fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019302:	4a14      	ldr	r2, [pc, #80]	; (8019354 <RegionEU868RxConfig+0x198>)
 8019304:	5cd3      	ldrb	r3, [r2, r3]
 8019306:	75bb      	strb	r3, [r7, #22]
 8019308:	e004      	b.n	8019314 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801930a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801930e:	4a12      	ldr	r2, [pc, #72]	; (8019358 <RegionEU868RxConfig+0x19c>)
 8019310:	5cd3      	ldrb	r3, [r2, r3]
 8019312:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019314:	4b0b      	ldr	r3, [pc, #44]	; (8019344 <RegionEU868RxConfig+0x188>)
 8019316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019318:	7dba      	ldrb	r2, [r7, #22]
 801931a:	320d      	adds	r2, #13
 801931c:	b2d1      	uxtb	r1, r2
 801931e:	7dfa      	ldrb	r2, [r7, #23]
 8019320:	4610      	mov	r0, r2
 8019322:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	7cdb      	ldrb	r3, [r3, #19]
 8019328:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801932c:	6939      	ldr	r1, [r7, #16]
 801932e:	4618      	mov	r0, r3
 8019330:	f7ff faaa 	bl	8018888 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	7bfa      	ldrb	r2, [r7, #15]
 8019338:	701a      	strb	r2, [r3, #0]
    return true;
 801933a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801933c:	4618      	mov	r0, r3
 801933e:	3718      	adds	r7, #24
 8019340:	46bd      	mov	sp, r7
 8019342:	bdb0      	pop	{r4, r5, r7, pc}
 8019344:	0801f98c 	.word	0x0801f98c
 8019348:	20001730 	.word	0x20001730
 801934c:	0801f954 	.word	0x0801f954
 8019350:	00014585 	.word	0x00014585
 8019354:	0801f984 	.word	0x0801f984
 8019358:	0801f97c 	.word	0x0801f97c

0801935c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801935c:	b590      	push	{r4, r7, lr}
 801935e:	b093      	sub	sp, #76	; 0x4c
 8019360:	af0a      	add	r7, sp, #40	; 0x28
 8019362:	60f8      	str	r0, [r7, #12]
 8019364:	60b9      	str	r1, [r7, #8]
 8019366:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801936e:	461a      	mov	r2, r3
 8019370:	4b5d      	ldr	r3, [pc, #372]	; (80194e8 <RegionEU868TxConfig+0x18c>)
 8019372:	5c9b      	ldrb	r3, [r3, r2]
 8019374:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801937c:	4b5b      	ldr	r3, [pc, #364]	; (80194ec <RegionEU868TxConfig+0x190>)
 801937e:	681a      	ldr	r2, [r3, #0]
 8019380:	4b5b      	ldr	r3, [pc, #364]	; (80194f0 <RegionEU868TxConfig+0x194>)
 8019382:	6819      	ldr	r1, [r3, #0]
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	461c      	mov	r4, r3
 801938a:	4623      	mov	r3, r4
 801938c:	005b      	lsls	r3, r3, #1
 801938e:	4423      	add	r3, r4
 8019390:	009b      	lsls	r3, r3, #2
 8019392:	440b      	add	r3, r1
 8019394:	3309      	adds	r3, #9
 8019396:	781b      	ldrb	r3, [r3, #0]
 8019398:	4619      	mov	r1, r3
 801939a:	460b      	mov	r3, r1
 801939c:	005b      	lsls	r3, r3, #1
 801939e:	440b      	add	r3, r1
 80193a0:	00db      	lsls	r3, r3, #3
 80193a2:	4413      	add	r3, r2
 80193a4:	3302      	adds	r3, #2
 80193a6:	f993 3000 	ldrsb.w	r3, [r3]
 80193aa:	4619      	mov	r1, r3
 80193ac:	f7ff fa39 	bl	8018822 <RegionCommonLimitTxPower>
 80193b0:	4603      	mov	r3, r0
 80193b2:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193ba:	494e      	ldr	r1, [pc, #312]	; (80194f4 <RegionEU868TxConfig+0x198>)
 80193bc:	4618      	mov	r0, r3
 80193be:	f7ff fa45 	bl	801884c <RegionCommonGetBandwidth>
 80193c2:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80193c4:	2300      	movs	r3, #0
 80193c6:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	6859      	ldr	r1, [r3, #4]
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	689a      	ldr	r2, [r3, #8]
 80193d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80193d4:	4618      	mov	r0, r3
 80193d6:	f7ff f895 	bl	8018504 <RegionCommonComputeTxPower>
 80193da:	4603      	mov	r3, r0
 80193dc:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80193de:	4b46      	ldr	r3, [pc, #280]	; (80194f8 <RegionEU868TxConfig+0x19c>)
 80193e0:	68da      	ldr	r2, [r3, #12]
 80193e2:	4b43      	ldr	r3, [pc, #268]	; (80194f0 <RegionEU868TxConfig+0x194>)
 80193e4:	6819      	ldr	r1, [r3, #0]
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	781b      	ldrb	r3, [r3, #0]
 80193ea:	4618      	mov	r0, r3
 80193ec:	4603      	mov	r3, r0
 80193ee:	005b      	lsls	r3, r3, #1
 80193f0:	4403      	add	r3, r0
 80193f2:	009b      	lsls	r3, r3, #2
 80193f4:	440b      	add	r3, r1
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	4618      	mov	r0, r3
 80193fa:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019402:	2b07      	cmp	r3, #7
 8019404:	d124      	bne.n	8019450 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019406:	2300      	movs	r3, #0
 8019408:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801940a:	4b3b      	ldr	r3, [pc, #236]	; (80194f8 <RegionEU868TxConfig+0x19c>)
 801940c:	69dc      	ldr	r4, [r3, #28]
 801940e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019416:	fb02 f303 	mul.w	r3, r2, r3
 801941a:	461a      	mov	r2, r3
 801941c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019420:	7ff8      	ldrb	r0, [r7, #31]
 8019422:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019426:	9308      	str	r3, [sp, #32]
 8019428:	2300      	movs	r3, #0
 801942a:	9307      	str	r3, [sp, #28]
 801942c:	2300      	movs	r3, #0
 801942e:	9306      	str	r3, [sp, #24]
 8019430:	2300      	movs	r3, #0
 8019432:	9305      	str	r3, [sp, #20]
 8019434:	2301      	movs	r3, #1
 8019436:	9304      	str	r3, [sp, #16]
 8019438:	2300      	movs	r3, #0
 801943a:	9303      	str	r3, [sp, #12]
 801943c:	2305      	movs	r3, #5
 801943e:	9302      	str	r3, [sp, #8]
 8019440:	2300      	movs	r3, #0
 8019442:	9301      	str	r3, [sp, #4]
 8019444:	9200      	str	r2, [sp, #0]
 8019446:	69bb      	ldr	r3, [r7, #24]
 8019448:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801944c:	47a0      	blx	r4
 801944e:	e01d      	b.n	801948c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8019450:	2301      	movs	r3, #1
 8019452:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019454:	4b28      	ldr	r3, [pc, #160]	; (80194f8 <RegionEU868TxConfig+0x19c>)
 8019456:	69dc      	ldr	r4, [r3, #28]
 8019458:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801945c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019460:	7ff8      	ldrb	r0, [r7, #31]
 8019462:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019466:	9208      	str	r2, [sp, #32]
 8019468:	2200      	movs	r2, #0
 801946a:	9207      	str	r2, [sp, #28]
 801946c:	2200      	movs	r2, #0
 801946e:	9206      	str	r2, [sp, #24]
 8019470:	2200      	movs	r2, #0
 8019472:	9205      	str	r2, [sp, #20]
 8019474:	2201      	movs	r2, #1
 8019476:	9204      	str	r2, [sp, #16]
 8019478:	2200      	movs	r2, #0
 801947a:	9203      	str	r2, [sp, #12]
 801947c:	2208      	movs	r2, #8
 801947e:	9202      	str	r2, [sp, #8]
 8019480:	2201      	movs	r2, #1
 8019482:	9201      	str	r2, [sp, #4]
 8019484:	9300      	str	r3, [sp, #0]
 8019486:	69bb      	ldr	r3, [r7, #24]
 8019488:	2200      	movs	r2, #0
 801948a:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801948c:	4b18      	ldr	r3, [pc, #96]	; (80194f0 <RegionEU868TxConfig+0x194>)
 801948e:	681a      	ldr	r2, [r3, #0]
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	781b      	ldrb	r3, [r3, #0]
 8019494:	4619      	mov	r1, r3
 8019496:	460b      	mov	r3, r1
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	440b      	add	r3, r1
 801949c:	009b      	lsls	r3, r3, #2
 801949e:	4413      	add	r3, r2
 80194a0:	681a      	ldr	r2, [r3, #0]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194a8:	4619      	mov	r1, r3
 80194aa:	4610      	mov	r0, r2
 80194ac:	f7ff fa1e 	bl	80188ec <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	899b      	ldrh	r3, [r3, #12]
 80194ba:	4619      	mov	r1, r3
 80194bc:	4610      	mov	r0, r2
 80194be:	f7ff faa3 	bl	8018a08 <GetTimeOnAir>
 80194c2:	4602      	mov	r2, r0
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80194c8:	4b0b      	ldr	r3, [pc, #44]	; (80194f8 <RegionEU868TxConfig+0x19c>)
 80194ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80194cc:	68fa      	ldr	r2, [r7, #12]
 80194ce:	8992      	ldrh	r2, [r2, #12]
 80194d0:	b2d1      	uxtb	r1, r2
 80194d2:	7ffa      	ldrb	r2, [r7, #31]
 80194d4:	4610      	mov	r0, r2
 80194d6:	4798      	blx	r3

    *txPower = txPowerLimited;
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	7f7a      	ldrb	r2, [r7, #29]
 80194dc:	701a      	strb	r2, [r3, #0]
    return true;
 80194de:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80194e0:	4618      	mov	r0, r3
 80194e2:	3724      	adds	r7, #36	; 0x24
 80194e4:	46bd      	mov	sp, r7
 80194e6:	bd90      	pop	{r4, r7, pc}
 80194e8:	0801f954 	.word	0x0801f954
 80194ec:	2000172c 	.word	0x2000172c
 80194f0:	20001730 	.word	0x20001730
 80194f4:	0801f95c 	.word	0x0801f95c
 80194f8:	0801f98c 	.word	0x0801f98c

080194fc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80194fc:	b590      	push	{r4, r7, lr}
 80194fe:	b093      	sub	sp, #76	; 0x4c
 8019500:	af00      	add	r7, sp, #0
 8019502:	60f8      	str	r0, [r7, #12]
 8019504:	60b9      	str	r1, [r7, #8]
 8019506:	607a      	str	r2, [r7, #4]
 8019508:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801950a:	2307      	movs	r3, #7
 801950c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019514:	2200      	movs	r2, #0
 8019516:	601a      	str	r2, [r3, #0]
 8019518:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801951a:	2300      	movs	r3, #0
 801951c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019520:	2300      	movs	r3, #0
 8019522:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019526:	2300      	movs	r3, #0
 8019528:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801952a:	e085      	b.n	8019638 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	685a      	ldr	r2, [r3, #4]
 8019530:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019534:	4413      	add	r3, r2
 8019536:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801953a:	4611      	mov	r1, r2
 801953c:	4618      	mov	r0, r3
 801953e:	f7fe fe29 	bl	8018194 <RegionCommonParseLinkAdrReq>
 8019542:	4603      	mov	r3, r0
 8019544:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019548:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801954c:	2b00      	cmp	r3, #0
 801954e:	d07b      	beq.n	8019648 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019550:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019554:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019558:	4413      	add	r3, r2
 801955a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801955e:	2307      	movs	r3, #7
 8019560:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019564:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019568:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801956a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801956e:	2b00      	cmp	r3, #0
 8019570:	d109      	bne.n	8019586 <RegionEU868LinkAdrReq+0x8a>
 8019572:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019574:	2b00      	cmp	r3, #0
 8019576:	d106      	bne.n	8019586 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019578:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801957c:	f023 0301 	bic.w	r3, r3, #1
 8019580:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019584:	e058      	b.n	8019638 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801958a:	2b00      	cmp	r3, #0
 801958c:	d003      	beq.n	8019596 <RegionEU868LinkAdrReq+0x9a>
 801958e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019592:	2b05      	cmp	r3, #5
 8019594:	d903      	bls.n	801959e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019596:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801959a:	2b06      	cmp	r3, #6
 801959c:	d906      	bls.n	80195ac <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801959e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80195a2:	f023 0301 	bic.w	r3, r3, #1
 80195a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80195aa:	e045      	b.n	8019638 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80195ac:	2300      	movs	r3, #0
 80195ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80195b2:	e03d      	b.n	8019630 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80195b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195b8:	2b06      	cmp	r3, #6
 80195ba:	d118      	bne.n	80195ee <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80195bc:	4b5f      	ldr	r3, [pc, #380]	; (801973c <RegionEU868LinkAdrReq+0x240>)
 80195be:	6819      	ldr	r1, [r3, #0]
 80195c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80195c4:	4613      	mov	r3, r2
 80195c6:	005b      	lsls	r3, r3, #1
 80195c8:	4413      	add	r3, r2
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	440b      	add	r3, r1
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d028      	beq.n	8019626 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80195d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80195d8:	2201      	movs	r2, #1
 80195da:	fa02 f303 	lsl.w	r3, r2, r3
 80195de:	b21a      	sxth	r2, r3
 80195e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195e2:	b21b      	sxth	r3, r3
 80195e4:	4313      	orrs	r3, r2
 80195e6:	b21b      	sxth	r3, r3
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	877b      	strh	r3, [r7, #58]	; 0x3a
 80195ec:	e01b      	b.n	8019626 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80195ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195f0:	461a      	mov	r2, r3
 80195f2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80195f6:	fa42 f303 	asr.w	r3, r2, r3
 80195fa:	f003 0301 	and.w	r3, r3, #1
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d011      	beq.n	8019626 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019602:	4b4e      	ldr	r3, [pc, #312]	; (801973c <RegionEU868LinkAdrReq+0x240>)
 8019604:	6819      	ldr	r1, [r3, #0]
 8019606:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801960a:	4613      	mov	r3, r2
 801960c:	005b      	lsls	r3, r3, #1
 801960e:	4413      	add	r3, r2
 8019610:	009b      	lsls	r3, r3, #2
 8019612:	440b      	add	r3, r1
 8019614:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019616:	2b00      	cmp	r3, #0
 8019618:	d105      	bne.n	8019626 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801961a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801961e:	f023 0301 	bic.w	r3, r3, #1
 8019622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019626:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801962a:	3301      	adds	r3, #1
 801962c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019630:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019634:	2b0f      	cmp	r3, #15
 8019636:	d9bd      	bls.n	80195b4 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	7a1b      	ldrb	r3, [r3, #8]
 801963c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019640:	429a      	cmp	r2, r3
 8019642:	f4ff af73 	bcc.w	801952c <RegionEU868LinkAdrReq+0x30>
 8019646:	e000      	b.n	801964a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019648:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801964a:	2302      	movs	r3, #2
 801964c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	7a5b      	ldrb	r3, [r3, #9]
 8019654:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801965c:	4618      	mov	r0, r3
 801965e:	f7ff fa23 	bl	8018aa8 <RegionEU868GetPhyParam>
 8019662:	4603      	mov	r3, r0
 8019664:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801966a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	7a9b      	ldrb	r3, [r3, #10]
 8019670:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019672:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019676:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019678:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801967c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801967e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019682:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801968a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019692:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	7b5b      	ldrb	r3, [r3, #13]
 8019698:	b25b      	sxtb	r3, r3
 801969a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801969c:	2310      	movs	r3, #16
 801969e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80196a0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80196a4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80196a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a8:	b25b      	sxtb	r3, r3
 80196aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80196ae:	2307      	movs	r3, #7
 80196b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80196b4:	4b21      	ldr	r3, [pc, #132]	; (801973c <RegionEU868LinkAdrReq+0x240>)
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80196ba:	2307      	movs	r3, #7
 80196bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80196c0:	2300      	movs	r3, #0
 80196c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80196cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80196d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80196d4:	1c9a      	adds	r2, r3, #2
 80196d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80196da:	1c59      	adds	r1, r3, #1
 80196dc:	f107 0010 	add.w	r0, r7, #16
 80196e0:	4623      	mov	r3, r4
 80196e2:	f7fe fda8 	bl	8018236 <RegionCommonLinkAdrReqVerifyParams>
 80196e6:	4603      	mov	r3, r0
 80196e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80196ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196f0:	2b07      	cmp	r3, #7
 80196f2:	d10d      	bne.n	8019710 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80196f4:	4b11      	ldr	r3, [pc, #68]	; (801973c <RegionEU868LinkAdrReq+0x240>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80196fc:	220c      	movs	r2, #12
 80196fe:	2100      	movs	r1, #0
 8019700:	4618      	mov	r0, r3
 8019702:	f000 fb83 	bl	8019e0c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019706:	4b0d      	ldr	r3, [pc, #52]	; (801973c <RegionEU868LinkAdrReq+0x240>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801970c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019710:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019718:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019720:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801972a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801972e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019734:	4618      	mov	r0, r3
 8019736:	374c      	adds	r7, #76	; 0x4c
 8019738:	46bd      	mov	sp, r7
 801973a:	bd90      	pop	{r4, r7, pc}
 801973c:	20001730 	.word	0x20001730

08019740 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b084      	sub	sp, #16
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019748:	2307      	movs	r3, #7
 801974a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801974c:	2300      	movs	r3, #0
 801974e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	685b      	ldr	r3, [r3, #4]
 8019754:	f107 020e 	add.w	r2, r7, #14
 8019758:	4611      	mov	r1, r2
 801975a:	4618      	mov	r0, r3
 801975c:	f7ff f8de 	bl	801891c <VerifyRfFreq>
 8019760:	4603      	mov	r3, r0
 8019762:	f083 0301 	eor.w	r3, r3, #1
 8019766:	b2db      	uxtb	r3, r3
 8019768:	2b00      	cmp	r3, #0
 801976a:	d003      	beq.n	8019774 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801976c:	7bfb      	ldrb	r3, [r7, #15]
 801976e:	f023 0301 	bic.w	r3, r3, #1
 8019772:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f993 3000 	ldrsb.w	r3, [r3]
 801977a:	2207      	movs	r2, #7
 801977c:	2100      	movs	r1, #0
 801977e:	4618      	mov	r0, r3
 8019780:	f7fe fb47 	bl	8017e12 <RegionCommonValueInRange>
 8019784:	4603      	mov	r3, r0
 8019786:	2b00      	cmp	r3, #0
 8019788:	d103      	bne.n	8019792 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801978a:	7bfb      	ldrb	r3, [r7, #15]
 801978c:	f023 0302 	bic.w	r3, r3, #2
 8019790:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019798:	2205      	movs	r2, #5
 801979a:	2100      	movs	r1, #0
 801979c:	4618      	mov	r0, r3
 801979e:	f7fe fb38 	bl	8017e12 <RegionCommonValueInRange>
 80197a2:	4603      	mov	r3, r0
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d103      	bne.n	80197b0 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80197a8:	7bfb      	ldrb	r3, [r7, #15]
 80197aa:	f023 0304 	bic.w	r3, r3, #4
 80197ae:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80197b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80197b2:	4618      	mov	r0, r3
 80197b4:	3710      	adds	r7, #16
 80197b6:	46bd      	mov	sp, r7
 80197b8:	bd80      	pop	{r7, pc}
	...

080197bc <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b086      	sub	sp, #24
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80197c4:	2303      	movs	r3, #3
 80197c6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d114      	bne.n	80197fc <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80197d8:	b2db      	uxtb	r3, r3
 80197da:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80197dc:	f107 0308 	add.w	r3, r7, #8
 80197e0:	4618      	mov	r0, r3
 80197e2:	f000 f9ff 	bl	8019be4 <RegionEU868ChannelsRemove>
 80197e6:	4603      	mov	r3, r0
 80197e8:	f083 0301 	eor.w	r3, r3, #1
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d03b      	beq.n	801986a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80197f2:	7dfb      	ldrb	r3, [r7, #23]
 80197f4:	f023 0303 	bic.w	r3, r3, #3
 80197f8:	75fb      	strb	r3, [r7, #23]
 80197fa:	e036      	b.n	801986a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019808:	b2db      	uxtb	r3, r3
 801980a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801980c:	f107 030c 	add.w	r3, r7, #12
 8019810:	4618      	mov	r0, r3
 8019812:	f000 f945 	bl	8019aa0 <RegionEU868ChannelAdd>
 8019816:	4603      	mov	r3, r0
 8019818:	2b06      	cmp	r3, #6
 801981a:	d820      	bhi.n	801985e <RegionEU868NewChannelReq+0xa2>
 801981c:	a201      	add	r2, pc, #4	; (adr r2, 8019824 <RegionEU868NewChannelReq+0x68>)
 801981e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019822:	bf00      	nop
 8019824:	08019869 	.word	0x08019869
 8019828:	0801985f 	.word	0x0801985f
 801982c:	0801985f 	.word	0x0801985f
 8019830:	0801985f 	.word	0x0801985f
 8019834:	08019841 	.word	0x08019841
 8019838:	0801984b 	.word	0x0801984b
 801983c:	08019855 	.word	0x08019855
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019840:	7dfb      	ldrb	r3, [r7, #23]
 8019842:	f023 0301 	bic.w	r3, r3, #1
 8019846:	75fb      	strb	r3, [r7, #23]
                break;
 8019848:	e00f      	b.n	801986a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801984a:	7dfb      	ldrb	r3, [r7, #23]
 801984c:	f023 0302 	bic.w	r3, r3, #2
 8019850:	75fb      	strb	r3, [r7, #23]
                break;
 8019852:	e00a      	b.n	801986a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019854:	7dfb      	ldrb	r3, [r7, #23]
 8019856:	f023 0303 	bic.w	r3, r3, #3
 801985a:	75fb      	strb	r3, [r7, #23]
                break;
 801985c:	e005      	b.n	801986a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801985e:	7dfb      	ldrb	r3, [r7, #23]
 8019860:	f023 0303 	bic.w	r3, r3, #3
 8019864:	75fb      	strb	r3, [r7, #23]
                break;
 8019866:	e000      	b.n	801986a <RegionEU868NewChannelReq+0xae>
                break;
 8019868:	bf00      	nop
            }
        }
    }

    return status;
 801986a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801986e:	4618      	mov	r0, r3
 8019870:	3718      	adds	r7, #24
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop

08019878 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019878:	b480      	push	{r7}
 801987a:	b083      	sub	sp, #12
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019884:	4618      	mov	r0, r3
 8019886:	370c      	adds	r7, #12
 8019888:	46bd      	mov	sp, r7
 801988a:	bc80      	pop	{r7}
 801988c:	4770      	bx	lr
	...

08019890 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b084      	sub	sp, #16
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019898:	2303      	movs	r3, #3
 801989a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801989c:	2300      	movs	r3, #0
 801989e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	781b      	ldrb	r3, [r3, #0]
 80198a4:	2b0f      	cmp	r3, #15
 80198a6:	d901      	bls.n	80198ac <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80198a8:	2300      	movs	r3, #0
 80198aa:	e035      	b.n	8019918 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	685b      	ldr	r3, [r3, #4]
 80198b0:	f107 020e 	add.w	r2, r7, #14
 80198b4:	4611      	mov	r1, r2
 80198b6:	4618      	mov	r0, r3
 80198b8:	f7ff f830 	bl	801891c <VerifyRfFreq>
 80198bc:	4603      	mov	r3, r0
 80198be:	f083 0301 	eor.w	r3, r3, #1
 80198c2:	b2db      	uxtb	r3, r3
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d003      	beq.n	80198d0 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80198c8:	7bfb      	ldrb	r3, [r7, #15]
 80198ca:	f023 0301 	bic.w	r3, r3, #1
 80198ce:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80198d0:	4b13      	ldr	r3, [pc, #76]	; (8019920 <RegionEU868DlChannelReq+0x90>)
 80198d2:	681a      	ldr	r2, [r3, #0]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	4619      	mov	r1, r3
 80198da:	460b      	mov	r3, r1
 80198dc:	005b      	lsls	r3, r3, #1
 80198de:	440b      	add	r3, r1
 80198e0:	009b      	lsls	r3, r3, #2
 80198e2:	4413      	add	r3, r2
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d103      	bne.n	80198f2 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80198ea:	7bfb      	ldrb	r3, [r7, #15]
 80198ec:	f023 0302 	bic.w	r3, r3, #2
 80198f0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80198f2:	7bfb      	ldrb	r3, [r7, #15]
 80198f4:	2b03      	cmp	r3, #3
 80198f6:	d10d      	bne.n	8019914 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80198f8:	4b09      	ldr	r3, [pc, #36]	; (8019920 <RegionEU868DlChannelReq+0x90>)
 80198fa:	6819      	ldr	r1, [r3, #0]
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	4618      	mov	r0, r3
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	685a      	ldr	r2, [r3, #4]
 8019906:	4603      	mov	r3, r0
 8019908:	005b      	lsls	r3, r3, #1
 801990a:	4403      	add	r3, r0
 801990c:	009b      	lsls	r3, r3, #2
 801990e:	440b      	add	r3, r1
 8019910:	3304      	adds	r3, #4
 8019912:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019918:	4618      	mov	r0, r3
 801991a:	3710      	adds	r7, #16
 801991c:	46bd      	mov	sp, r7
 801991e:	bd80      	pop	{r7, pc}
 8019920:	20001730 	.word	0x20001730

08019924 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019924:	b480      	push	{r7}
 8019926:	b083      	sub	sp, #12
 8019928:	af00      	add	r7, sp, #0
 801992a:	4603      	mov	r3, r0
 801992c:	460a      	mov	r2, r1
 801992e:	71fb      	strb	r3, [r7, #7]
 8019930:	4613      	mov	r3, r2
 8019932:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019934:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019938:	4618      	mov	r0, r3
 801993a:	370c      	adds	r7, #12
 801993c:	46bd      	mov	sp, r7
 801993e:	bc80      	pop	{r7}
 8019940:	4770      	bx	lr
	...

08019944 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b09a      	sub	sp, #104	; 0x68
 8019948:	af02      	add	r7, sp, #8
 801994a:	60f8      	str	r0, [r7, #12]
 801994c:	60b9      	str	r1, [r7, #8]
 801994e:	607a      	str	r2, [r7, #4]
 8019950:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019952:	2300      	movs	r3, #0
 8019954:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019958:	2300      	movs	r3, #0
 801995a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801995e:	2300      	movs	r3, #0
 8019960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019966:	2200      	movs	r2, #0
 8019968:	601a      	str	r2, [r3, #0]
 801996a:	605a      	str	r2, [r3, #4]
 801996c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801996e:	230c      	movs	r3, #12
 8019970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019974:	2307      	movs	r3, #7
 8019976:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019978:	4b47      	ldr	r3, [pc, #284]	; (8019a98 <RegionEU868NextChannel+0x154>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019980:	2201      	movs	r2, #1
 8019982:	2100      	movs	r1, #0
 8019984:	4618      	mov	r0, r3
 8019986:	f7fe fa95 	bl	8017eb4 <RegionCommonCountChannels>
 801998a:	4603      	mov	r3, r0
 801998c:	2b00      	cmp	r3, #0
 801998e:	d10a      	bne.n	80199a6 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019990:	4b41      	ldr	r3, [pc, #260]	; (8019a98 <RegionEU868NextChannel+0x154>)
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019998:	4b3f      	ldr	r3, [pc, #252]	; (8019a98 <RegionEU868NextChannel+0x154>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	f042 0207 	orr.w	r2, r2, #7
 80199a0:	b292      	uxth	r2, r2
 80199a2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	7a5b      	ldrb	r3, [r3, #9]
 80199aa:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80199b2:	b2db      	uxtb	r3, r3
 80199b4:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80199b6:	4b38      	ldr	r3, [pc, #224]	; (8019a98 <RegionEU868NextChannel+0x154>)
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80199be:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80199c0:	4b35      	ldr	r3, [pc, #212]	; (8019a98 <RegionEU868NextChannel+0x154>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80199c6:	4b35      	ldr	r3, [pc, #212]	; (8019a9c <RegionEU868NextChannel+0x158>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80199cc:	2310      	movs	r3, #16
 80199ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80199d0:	f107 0312 	add.w	r3, r7, #18
 80199d4:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	7a9b      	ldrb	r3, [r3, #10]
 80199e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80199ea:	2306      	movs	r3, #6
 80199ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80199f0:	68fa      	ldr	r2, [r7, #12]
 80199f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80199f6:	320c      	adds	r2, #12
 80199f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80199fc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	7d1b      	ldrb	r3, [r3, #20]
 8019a04:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	8adb      	ldrh	r3, [r3, #22]
 8019a12:	4619      	mov	r1, r3
 8019a14:	4610      	mov	r0, r2
 8019a16:	f7fe fff7 	bl	8018a08 <GetTimeOnAir>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019a1e:	f107 0314 	add.w	r3, r7, #20
 8019a22:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019a24:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019a28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019a2c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	9301      	str	r3, [sp, #4]
 8019a34:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019a38:	9300      	str	r3, [sp, #0]
 8019a3a:	460b      	mov	r3, r1
 8019a3c:	6839      	ldr	r1, [r7, #0]
 8019a3e:	f7fe fe50 	bl	80186e2 <RegionCommonIdentifyChannels>
 8019a42:	4603      	mov	r3, r0
 8019a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d10e      	bne.n	8019a6e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019a50:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019a54:	3b01      	subs	r3, #1
 8019a56:	4619      	mov	r1, r3
 8019a58:	2000      	movs	r0, #0
 8019a5a:	f000 f985 	bl	8019d68 <randr>
 8019a5e:	4603      	mov	r3, r0
 8019a60:	3360      	adds	r3, #96	; 0x60
 8019a62:	443b      	add	r3, r7
 8019a64:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	701a      	strb	r2, [r3, #0]
 8019a6c:	e00e      	b.n	8019a8c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019a72:	2b0c      	cmp	r3, #12
 8019a74:	d10a      	bne.n	8019a8c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019a76:	4b08      	ldr	r3, [pc, #32]	; (8019a98 <RegionEU868NextChannel+0x154>)
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019a7e:	4b06      	ldr	r3, [pc, #24]	; (8019a98 <RegionEU868NextChannel+0x154>)
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	f042 0207 	orr.w	r2, r2, #7
 8019a86:	b292      	uxth	r2, r2
 8019a88:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	3760      	adds	r7, #96	; 0x60
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}
 8019a98:	20001730 	.word	0x20001730
 8019a9c:	2000172c 	.word	0x2000172c

08019aa0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b084      	sub	sp, #16
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019aac:	2300      	movs	r3, #0
 8019aae:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	791b      	ldrb	r3, [r3, #4]
 8019ab8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019aba:	7b7b      	ldrb	r3, [r7, #13]
 8019abc:	2b02      	cmp	r3, #2
 8019abe:	d801      	bhi.n	8019ac4 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019ac0:	2306      	movs	r3, #6
 8019ac2:	e089      	b.n	8019bd8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019ac4:	7b7b      	ldrb	r3, [r7, #13]
 8019ac6:	2b0f      	cmp	r3, #15
 8019ac8:	d901      	bls.n	8019ace <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019aca:	2303      	movs	r3, #3
 8019acc:	e084      	b.n	8019bd8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	7a1b      	ldrb	r3, [r3, #8]
 8019ad4:	f343 0303 	sbfx	r3, r3, #0, #4
 8019ad8:	b25b      	sxtb	r3, r3
 8019ada:	2207      	movs	r2, #7
 8019adc:	2100      	movs	r1, #0
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7fe f997 	bl	8017e12 <RegionCommonValueInRange>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d101      	bne.n	8019aee <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019aea:	2301      	movs	r3, #1
 8019aec:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	7a1b      	ldrb	r3, [r3, #8]
 8019af4:	f343 1303 	sbfx	r3, r3, #4, #4
 8019af8:	b25b      	sxtb	r3, r3
 8019afa:	2207      	movs	r2, #7
 8019afc:	2100      	movs	r1, #0
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7fe f987 	bl	8017e12 <RegionCommonValueInRange>
 8019b04:	4603      	mov	r3, r0
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d101      	bne.n	8019b0e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	7a1b      	ldrb	r3, [r3, #8]
 8019b14:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b18:	b25a      	sxtb	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	7a1b      	ldrb	r3, [r3, #8]
 8019b20:	f343 1303 	sbfx	r3, r3, #4, #4
 8019b24:	b25b      	sxtb	r3, r3
 8019b26:	429a      	cmp	r2, r3
 8019b28:	dd01      	ble.n	8019b2e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019b2e:	7bbb      	ldrb	r3, [r7, #14]
 8019b30:	f083 0301 	eor.w	r3, r3, #1
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d010      	beq.n	8019b5c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f107 020c 	add.w	r2, r7, #12
 8019b44:	4611      	mov	r1, r2
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fe fee8 	bl	801891c <VerifyRfFreq>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	f083 0301 	eor.w	r3, r3, #1
 8019b52:	b2db      	uxtb	r3, r3
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d001      	beq.n	8019b5c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019b58:	2301      	movs	r3, #1
 8019b5a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019b5c:	7bfb      	ldrb	r3, [r7, #15]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d004      	beq.n	8019b6c <RegionEU868ChannelAdd+0xcc>
 8019b62:	7bbb      	ldrb	r3, [r7, #14]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d001      	beq.n	8019b6c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b68:	2306      	movs	r3, #6
 8019b6a:	e035      	b.n	8019bd8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019b6c:	7bfb      	ldrb	r3, [r7, #15]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d001      	beq.n	8019b76 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019b72:	2305      	movs	r3, #5
 8019b74:	e030      	b.n	8019bd8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019b76:	7bbb      	ldrb	r3, [r7, #14]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d001      	beq.n	8019b80 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019b7c:	2304      	movs	r3, #4
 8019b7e:	e02b      	b.n	8019bd8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019b80:	4b17      	ldr	r3, [pc, #92]	; (8019be0 <RegionEU868ChannelAdd+0x140>)
 8019b82:	6819      	ldr	r1, [r3, #0]
 8019b84:	7b7a      	ldrb	r2, [r7, #13]
 8019b86:	4613      	mov	r3, r2
 8019b88:	005b      	lsls	r3, r3, #1
 8019b8a:	4413      	add	r3, r2
 8019b8c:	009b      	lsls	r3, r3, #2
 8019b8e:	18c8      	adds	r0, r1, r3
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	220c      	movs	r2, #12
 8019b96:	4619      	mov	r1, r3
 8019b98:	f000 f8fd 	bl	8019d96 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019b9c:	4b10      	ldr	r3, [pc, #64]	; (8019be0 <RegionEU868ChannelAdd+0x140>)
 8019b9e:	6819      	ldr	r1, [r3, #0]
 8019ba0:	7b7a      	ldrb	r2, [r7, #13]
 8019ba2:	7b38      	ldrb	r0, [r7, #12]
 8019ba4:	4613      	mov	r3, r2
 8019ba6:	005b      	lsls	r3, r3, #1
 8019ba8:	4413      	add	r3, r2
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	440b      	add	r3, r1
 8019bae:	3309      	adds	r3, #9
 8019bb0:	4602      	mov	r2, r0
 8019bb2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019bb4:	4b0a      	ldr	r3, [pc, #40]	; (8019be0 <RegionEU868ChannelAdd+0x140>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019bbc:	b21a      	sxth	r2, r3
 8019bbe:	7b7b      	ldrb	r3, [r7, #13]
 8019bc0:	2101      	movs	r1, #1
 8019bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8019bc6:	b21b      	sxth	r3, r3
 8019bc8:	4313      	orrs	r3, r2
 8019bca:	b21a      	sxth	r2, r3
 8019bcc:	4b04      	ldr	r3, [pc, #16]	; (8019be0 <RegionEU868ChannelAdd+0x140>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	b292      	uxth	r2, r2
 8019bd2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019bd6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019bd8:	4618      	mov	r0, r3
 8019bda:	3710      	adds	r7, #16
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	bd80      	pop	{r7, pc}
 8019be0:	20001730 	.word	0x20001730

08019be4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b086      	sub	sp, #24
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019bf2:	7dfb      	ldrb	r3, [r7, #23]
 8019bf4:	2b02      	cmp	r3, #2
 8019bf6:	d801      	bhi.n	8019bfc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	e016      	b.n	8019c2a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019bfc:	4b0d      	ldr	r3, [pc, #52]	; (8019c34 <RegionEU868ChannelsRemove+0x50>)
 8019bfe:	6819      	ldr	r1, [r3, #0]
 8019c00:	7dfa      	ldrb	r2, [r7, #23]
 8019c02:	4613      	mov	r3, r2
 8019c04:	005b      	lsls	r3, r3, #1
 8019c06:	4413      	add	r3, r2
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	440b      	add	r3, r1
 8019c0c:	461a      	mov	r2, r3
 8019c0e:	2300      	movs	r3, #0
 8019c10:	6013      	str	r3, [r2, #0]
 8019c12:	6053      	str	r3, [r2, #4]
 8019c14:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019c16:	4b07      	ldr	r3, [pc, #28]	; (8019c34 <RegionEU868ChannelsRemove+0x50>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019c1e:	7df9      	ldrb	r1, [r7, #23]
 8019c20:	2210      	movs	r2, #16
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7fe f912 	bl	8017e4c <RegionCommonChanDisable>
 8019c28:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	3718      	adds	r7, #24
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}
 8019c32:	bf00      	nop
 8019c34:	20001730 	.word	0x20001730

08019c38 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019c38:	b590      	push	{r4, r7, lr}
 8019c3a:	b085      	sub	sp, #20
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019c46:	4b20      	ldr	r3, [pc, #128]	; (8019cc8 <RegionEU868SetContinuousWave+0x90>)
 8019c48:	681a      	ldr	r2, [r3, #0]
 8019c4a:	4b20      	ldr	r3, [pc, #128]	; (8019ccc <RegionEU868SetContinuousWave+0x94>)
 8019c4c:	6819      	ldr	r1, [r3, #0]
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	781b      	ldrb	r3, [r3, #0]
 8019c52:	461c      	mov	r4, r3
 8019c54:	4623      	mov	r3, r4
 8019c56:	005b      	lsls	r3, r3, #1
 8019c58:	4423      	add	r3, r4
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	440b      	add	r3, r1
 8019c5e:	3309      	adds	r3, #9
 8019c60:	781b      	ldrb	r3, [r3, #0]
 8019c62:	4619      	mov	r1, r3
 8019c64:	460b      	mov	r3, r1
 8019c66:	005b      	lsls	r3, r3, #1
 8019c68:	440b      	add	r3, r1
 8019c6a:	00db      	lsls	r3, r3, #3
 8019c6c:	4413      	add	r3, r2
 8019c6e:	3302      	adds	r3, #2
 8019c70:	f993 3000 	ldrsb.w	r3, [r3]
 8019c74:	4619      	mov	r1, r3
 8019c76:	f7fe fdd4 	bl	8018822 <RegionCommonLimitTxPower>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019c7e:	2300      	movs	r3, #0
 8019c80:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019c82:	4b12      	ldr	r3, [pc, #72]	; (8019ccc <RegionEU868SetContinuousWave+0x94>)
 8019c84:	681a      	ldr	r2, [r3, #0]
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	781b      	ldrb	r3, [r3, #0]
 8019c8a:	4619      	mov	r1, r3
 8019c8c:	460b      	mov	r3, r1
 8019c8e:	005b      	lsls	r3, r3, #1
 8019c90:	440b      	add	r3, r1
 8019c92:	009b      	lsls	r3, r3, #2
 8019c94:	4413      	add	r3, r2
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6859      	ldr	r1, [r3, #4]
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	689a      	ldr	r2, [r3, #8]
 8019ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7fe fc2c 	bl	8018504 <RegionCommonComputeTxPower>
 8019cac:	4603      	mov	r3, r0
 8019cae:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019cb0:	4b07      	ldr	r3, [pc, #28]	; (8019cd0 <RegionEU868SetContinuousWave+0x98>)
 8019cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019cb4:	687a      	ldr	r2, [r7, #4]
 8019cb6:	8992      	ldrh	r2, [r2, #12]
 8019cb8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019cbc:	68b8      	ldr	r0, [r7, #8]
 8019cbe:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019cc0:	bf00      	nop
 8019cc2:	3714      	adds	r7, #20
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd90      	pop	{r4, r7, pc}
 8019cc8:	2000172c 	.word	0x2000172c
 8019ccc:	20001730 	.word	0x20001730
 8019cd0:	0801f98c 	.word	0x0801f98c

08019cd4 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019cd4:	b480      	push	{r7}
 8019cd6:	b085      	sub	sp, #20
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	4603      	mov	r3, r0
 8019cdc:	71fb      	strb	r3, [r7, #7]
 8019cde:	460b      	mov	r3, r1
 8019ce0:	71bb      	strb	r3, [r7, #6]
 8019ce2:	4613      	mov	r3, r2
 8019ce4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019ce6:	79ba      	ldrb	r2, [r7, #6]
 8019ce8:	797b      	ldrb	r3, [r7, #5]
 8019cea:	1ad3      	subs	r3, r2, r3
 8019cec:	b2db      	uxtb	r3, r3
 8019cee:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	da01      	bge.n	8019cfc <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019cfc:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	3714      	adds	r7, #20
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bc80      	pop	{r7}
 8019d06:	4770      	bx	lr

08019d08 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019d08:	b480      	push	{r7}
 8019d0a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019d0c:	4b0d      	ldr	r3, [pc, #52]	; (8019d44 <rand1+0x3c>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	4a0d      	ldr	r2, [pc, #52]	; (8019d48 <rand1+0x40>)
 8019d12:	fb02 f303 	mul.w	r3, r2, r3
 8019d16:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019d1a:	3339      	adds	r3, #57	; 0x39
 8019d1c:	4a09      	ldr	r2, [pc, #36]	; (8019d44 <rand1+0x3c>)
 8019d1e:	6013      	str	r3, [r2, #0]
 8019d20:	4b08      	ldr	r3, [pc, #32]	; (8019d44 <rand1+0x3c>)
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	2303      	movs	r3, #3
 8019d26:	fba3 1302 	umull	r1, r3, r3, r2
 8019d2a:	1ad1      	subs	r1, r2, r3
 8019d2c:	0849      	lsrs	r1, r1, #1
 8019d2e:	440b      	add	r3, r1
 8019d30:	0f99      	lsrs	r1, r3, #30
 8019d32:	460b      	mov	r3, r1
 8019d34:	07db      	lsls	r3, r3, #31
 8019d36:	1a5b      	subs	r3, r3, r1
 8019d38:	1ad1      	subs	r1, r2, r3
 8019d3a:	460b      	mov	r3, r1
}
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bc80      	pop	{r7}
 8019d42:	4770      	bx	lr
 8019d44:	20000150 	.word	0x20000150
 8019d48:	41c64e6d 	.word	0x41c64e6d

08019d4c <srand1>:

void srand1( uint32_t seed )
{
 8019d4c:	b480      	push	{r7}
 8019d4e:	b083      	sub	sp, #12
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
    next = seed;
 8019d54:	4a03      	ldr	r2, [pc, #12]	; (8019d64 <srand1+0x18>)
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	6013      	str	r3, [r2, #0]
}
 8019d5a:	bf00      	nop
 8019d5c:	370c      	adds	r7, #12
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bc80      	pop	{r7}
 8019d62:	4770      	bx	lr
 8019d64:	20000150 	.word	0x20000150

08019d68 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b082      	sub	sp, #8
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
 8019d70:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019d72:	f7ff ffc9 	bl	8019d08 <rand1>
 8019d76:	4602      	mov	r2, r0
 8019d78:	6839      	ldr	r1, [r7, #0]
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	1acb      	subs	r3, r1, r3
 8019d7e:	3301      	adds	r3, #1
 8019d80:	fb92 f1f3 	sdiv	r1, r2, r3
 8019d84:	fb01 f303 	mul.w	r3, r1, r3
 8019d88:	1ad2      	subs	r2, r2, r3
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	4413      	add	r3, r2
}
 8019d8e:	4618      	mov	r0, r3
 8019d90:	3708      	adds	r7, #8
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}

08019d96 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019d96:	b480      	push	{r7}
 8019d98:	b085      	sub	sp, #20
 8019d9a:	af00      	add	r7, sp, #0
 8019d9c:	60f8      	str	r0, [r7, #12]
 8019d9e:	60b9      	str	r1, [r7, #8]
 8019da0:	4613      	mov	r3, r2
 8019da2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019da4:	e007      	b.n	8019db6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019da6:	68ba      	ldr	r2, [r7, #8]
 8019da8:	1c53      	adds	r3, r2, #1
 8019daa:	60bb      	str	r3, [r7, #8]
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	1c59      	adds	r1, r3, #1
 8019db0:	60f9      	str	r1, [r7, #12]
 8019db2:	7812      	ldrb	r2, [r2, #0]
 8019db4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019db6:	88fb      	ldrh	r3, [r7, #6]
 8019db8:	1e5a      	subs	r2, r3, #1
 8019dba:	80fa      	strh	r2, [r7, #6]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d1f2      	bne.n	8019da6 <memcpy1+0x10>
    }
}
 8019dc0:	bf00      	nop
 8019dc2:	bf00      	nop
 8019dc4:	3714      	adds	r7, #20
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bc80      	pop	{r7}
 8019dca:	4770      	bx	lr

08019dcc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019dcc:	b480      	push	{r7}
 8019dce:	b085      	sub	sp, #20
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	60f8      	str	r0, [r7, #12]
 8019dd4:	60b9      	str	r1, [r7, #8]
 8019dd6:	4613      	mov	r3, r2
 8019dd8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019dda:	88fb      	ldrh	r3, [r7, #6]
 8019ddc:	3b01      	subs	r3, #1
 8019dde:	68fa      	ldr	r2, [r7, #12]
 8019de0:	4413      	add	r3, r2
 8019de2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019de4:	e007      	b.n	8019df6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019de6:	68ba      	ldr	r2, [r7, #8]
 8019de8:	1c53      	adds	r3, r2, #1
 8019dea:	60bb      	str	r3, [r7, #8]
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	1e59      	subs	r1, r3, #1
 8019df0:	60f9      	str	r1, [r7, #12]
 8019df2:	7812      	ldrb	r2, [r2, #0]
 8019df4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019df6:	88fb      	ldrh	r3, [r7, #6]
 8019df8:	1e5a      	subs	r2, r3, #1
 8019dfa:	80fa      	strh	r2, [r7, #6]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d1f2      	bne.n	8019de6 <memcpyr+0x1a>
    }
}
 8019e00:	bf00      	nop
 8019e02:	bf00      	nop
 8019e04:	3714      	adds	r7, #20
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bc80      	pop	{r7}
 8019e0a:	4770      	bx	lr

08019e0c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019e0c:	b480      	push	{r7}
 8019e0e:	b083      	sub	sp, #12
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	460b      	mov	r3, r1
 8019e16:	70fb      	strb	r3, [r7, #3]
 8019e18:	4613      	mov	r3, r2
 8019e1a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019e1c:	e004      	b.n	8019e28 <memset1+0x1c>
    {
        *dst++ = value;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	1c5a      	adds	r2, r3, #1
 8019e22:	607a      	str	r2, [r7, #4]
 8019e24:	78fa      	ldrb	r2, [r7, #3]
 8019e26:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e28:	883b      	ldrh	r3, [r7, #0]
 8019e2a:	1e5a      	subs	r2, r3, #1
 8019e2c:	803a      	strh	r2, [r7, #0]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d1f5      	bne.n	8019e1e <memset1+0x12>
    }
}
 8019e32:	bf00      	nop
 8019e34:	bf00      	nop
 8019e36:	370c      	adds	r7, #12
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bc80      	pop	{r7}
 8019e3c:	4770      	bx	lr
	...

08019e40 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019e40:	b480      	push	{r7}
 8019e42:	b085      	sub	sp, #20
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
 8019e48:	460b      	mov	r3, r1
 8019e4a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e50:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d101      	bne.n	8019e5c <Crc32+0x1c>
    {
        return 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	e026      	b.n	8019eaa <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	817b      	strh	r3, [r7, #10]
 8019e60:	e01d      	b.n	8019e9e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019e62:	897b      	ldrh	r3, [r7, #10]
 8019e64:	687a      	ldr	r2, [r7, #4]
 8019e66:	4413      	add	r3, r2
 8019e68:	781b      	ldrb	r3, [r3, #0]
 8019e6a:	461a      	mov	r2, r3
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	4053      	eors	r3, r2
 8019e70:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019e72:	2300      	movs	r3, #0
 8019e74:	813b      	strh	r3, [r7, #8]
 8019e76:	e00c      	b.n	8019e92 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	085a      	lsrs	r2, r3, #1
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	f003 0301 	and.w	r3, r3, #1
 8019e82:	425b      	negs	r3, r3
 8019e84:	490b      	ldr	r1, [pc, #44]	; (8019eb4 <Crc32+0x74>)
 8019e86:	400b      	ands	r3, r1
 8019e88:	4053      	eors	r3, r2
 8019e8a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019e8c:	893b      	ldrh	r3, [r7, #8]
 8019e8e:	3301      	adds	r3, #1
 8019e90:	813b      	strh	r3, [r7, #8]
 8019e92:	893b      	ldrh	r3, [r7, #8]
 8019e94:	2b07      	cmp	r3, #7
 8019e96:	d9ef      	bls.n	8019e78 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019e98:	897b      	ldrh	r3, [r7, #10]
 8019e9a:	3301      	adds	r3, #1
 8019e9c:	817b      	strh	r3, [r7, #10]
 8019e9e:	897a      	ldrh	r2, [r7, #10]
 8019ea0:	887b      	ldrh	r3, [r7, #2]
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d3dd      	bcc.n	8019e62 <Crc32+0x22>
        }
    }

    return ~crc;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	43db      	mvns	r3, r3
}
 8019eaa:	4618      	mov	r0, r3
 8019eac:	3714      	adds	r7, #20
 8019eae:	46bd      	mov	sp, r7
 8019eb0:	bc80      	pop	{r7}
 8019eb2:	4770      	bx	lr
 8019eb4:	edb88320 	.word	0xedb88320

08019eb8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af02      	add	r7, sp, #8
 8019ebe:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019ec0:	4a24      	ldr	r2, [pc, #144]	; (8019f54 <RadioInit+0x9c>)
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019ec6:	4b24      	ldr	r3, [pc, #144]	; (8019f58 <RadioInit+0xa0>)
 8019ec8:	2200      	movs	r2, #0
 8019eca:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019ecc:	4b22      	ldr	r3, [pc, #136]	; (8019f58 <RadioInit+0xa0>)
 8019ece:	2200      	movs	r2, #0
 8019ed0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019ed2:	4b21      	ldr	r3, [pc, #132]	; (8019f58 <RadioInit+0xa0>)
 8019ed4:	2200      	movs	r2, #0
 8019ed6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019ed8:	4b1f      	ldr	r3, [pc, #124]	; (8019f58 <RadioInit+0xa0>)
 8019eda:	2200      	movs	r2, #0
 8019edc:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019ede:	481f      	ldr	r0, [pc, #124]	; (8019f5c <RadioInit+0xa4>)
 8019ee0:	f001 ffc2 	bl	801be68 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019ee4:	4b1c      	ldr	r3, [pc, #112]	; (8019f58 <RadioInit+0xa0>)
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019eea:	4b1b      	ldr	r3, [pc, #108]	; (8019f58 <RadioInit+0xa0>)
 8019eec:	2200      	movs	r2, #0
 8019eee:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019ef0:	f002 fa56 	bl	801c3a0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019ef4:	2100      	movs	r1, #0
 8019ef6:	2000      	movs	r0, #0
 8019ef8:	f002 fe22 	bl	801cb40 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019efc:	2204      	movs	r2, #4
 8019efe:	2100      	movs	r1, #0
 8019f00:	2001      	movs	r0, #1
 8019f02:	f002 fbdf 	bl	801c6c4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019f06:	2300      	movs	r3, #0
 8019f08:	2200      	movs	r2, #0
 8019f0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f12:	f002 fb0f 	bl	801c534 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019f16:	f000 fe99 	bl	801ac4c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	9300      	str	r3, [sp, #0]
 8019f1e:	4b10      	ldr	r3, [pc, #64]	; (8019f60 <RadioInit+0xa8>)
 8019f20:	2200      	movs	r2, #0
 8019f22:	f04f 31ff 	mov.w	r1, #4294967295
 8019f26:	480f      	ldr	r0, [pc, #60]	; (8019f64 <RadioInit+0xac>)
 8019f28:	f004 f82c 	bl	801df84 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	9300      	str	r3, [sp, #0]
 8019f30:	4b0d      	ldr	r3, [pc, #52]	; (8019f68 <RadioInit+0xb0>)
 8019f32:	2200      	movs	r2, #0
 8019f34:	f04f 31ff 	mov.w	r1, #4294967295
 8019f38:	480c      	ldr	r0, [pc, #48]	; (8019f6c <RadioInit+0xb4>)
 8019f3a:	f004 f823 	bl	801df84 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019f3e:	4809      	ldr	r0, [pc, #36]	; (8019f64 <RadioInit+0xac>)
 8019f40:	f004 f8c4 	bl	801e0cc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019f44:	4809      	ldr	r0, [pc, #36]	; (8019f6c <RadioInit+0xb4>)
 8019f46:	f004 f8c1 	bl	801e0cc <UTIL_TIMER_Stop>
}
 8019f4a:	bf00      	nop
 8019f4c:	3708      	adds	r7, #8
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd80      	pop	{r7, pc}
 8019f52:	bf00      	nop
 8019f54:	20001834 	.word	0x20001834
 8019f58:	20001838 	.word	0x20001838
 8019f5c:	0801b045 	.word	0x0801b045
 8019f60:	0801afcd 	.word	0x0801afcd
 8019f64:	20001894 	.word	0x20001894
 8019f68:	0801afe1 	.word	0x0801afe1
 8019f6c:	200018ac 	.word	0x200018ac

08019f70 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019f74:	f001 ffc0 	bl	801bef8 <SUBGRF_GetOperatingMode>
 8019f78:	4603      	mov	r3, r0
 8019f7a:	2b07      	cmp	r3, #7
 8019f7c:	d00a      	beq.n	8019f94 <RadioGetStatus+0x24>
 8019f7e:	2b07      	cmp	r3, #7
 8019f80:	dc0a      	bgt.n	8019f98 <RadioGetStatus+0x28>
 8019f82:	2b04      	cmp	r3, #4
 8019f84:	d002      	beq.n	8019f8c <RadioGetStatus+0x1c>
 8019f86:	2b05      	cmp	r3, #5
 8019f88:	d002      	beq.n	8019f90 <RadioGetStatus+0x20>
 8019f8a:	e005      	b.n	8019f98 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019f8c:	2302      	movs	r3, #2
 8019f8e:	e004      	b.n	8019f9a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019f90:	2301      	movs	r3, #1
 8019f92:	e002      	b.n	8019f9a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019f94:	2303      	movs	r3, #3
 8019f96:	e000      	b.n	8019f9a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019f98:	2300      	movs	r3, #0
    }
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	bd80      	pop	{r7, pc}
	...

08019fa0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b082      	sub	sp, #8
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019faa:	4a2a      	ldr	r2, [pc, #168]	; (801a054 <RadioSetModem+0xb4>)
 8019fac:	79fb      	ldrb	r3, [r7, #7]
 8019fae:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019fb0:	79fb      	ldrb	r3, [r7, #7]
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f003 f997 	bl	801d2e6 <RFW_SetRadioModem>
    switch( modem )
 8019fb8:	79fb      	ldrb	r3, [r7, #7]
 8019fba:	2b05      	cmp	r3, #5
 8019fbc:	d80e      	bhi.n	8019fdc <RadioSetModem+0x3c>
 8019fbe:	a201      	add	r2, pc, #4	; (adr r2, 8019fc4 <RadioSetModem+0x24>)
 8019fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fc4:	08019feb 	.word	0x08019feb
 8019fc8:	08019ff9 	.word	0x08019ff9
 8019fcc:	08019fdd 	.word	0x08019fdd
 8019fd0:	0801a01f 	.word	0x0801a01f
 8019fd4:	0801a02d 	.word	0x0801a02d
 8019fd8:	0801a03b 	.word	0x0801a03b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019fdc:	2003      	movs	r0, #3
 8019fde:	f002 fb4b 	bl	801c678 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019fe2:	4b1c      	ldr	r3, [pc, #112]	; (801a054 <RadioSetModem+0xb4>)
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	735a      	strb	r2, [r3, #13]
        break;
 8019fe8:	e02f      	b.n	801a04a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019fea:	2000      	movs	r0, #0
 8019fec:	f002 fb44 	bl	801c678 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ff0:	4b18      	ldr	r3, [pc, #96]	; (801a054 <RadioSetModem+0xb4>)
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	735a      	strb	r2, [r3, #13]
        break;
 8019ff6:	e028      	b.n	801a04a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019ff8:	2001      	movs	r0, #1
 8019ffa:	f002 fb3d 	bl	801c678 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019ffe:	4b15      	ldr	r3, [pc, #84]	; (801a054 <RadioSetModem+0xb4>)
 801a000:	7b5a      	ldrb	r2, [r3, #13]
 801a002:	4b14      	ldr	r3, [pc, #80]	; (801a054 <RadioSetModem+0xb4>)
 801a004:	7b1b      	ldrb	r3, [r3, #12]
 801a006:	429a      	cmp	r2, r3
 801a008:	d01e      	beq.n	801a048 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a00a:	4b12      	ldr	r3, [pc, #72]	; (801a054 <RadioSetModem+0xb4>)
 801a00c:	7b1a      	ldrb	r2, [r3, #12]
 801a00e:	4b11      	ldr	r3, [pc, #68]	; (801a054 <RadioSetModem+0xb4>)
 801a010:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a012:	4b10      	ldr	r3, [pc, #64]	; (801a054 <RadioSetModem+0xb4>)
 801a014:	7b5b      	ldrb	r3, [r3, #13]
 801a016:	4618      	mov	r0, r3
 801a018:	f000 ffa2 	bl	801af60 <RadioSetPublicNetwork>
        }
        break;
 801a01c:	e014      	b.n	801a048 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a01e:	2002      	movs	r0, #2
 801a020:	f002 fb2a 	bl	801c678 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a024:	4b0b      	ldr	r3, [pc, #44]	; (801a054 <RadioSetModem+0xb4>)
 801a026:	2200      	movs	r2, #0
 801a028:	735a      	strb	r2, [r3, #13]
        break;
 801a02a:	e00e      	b.n	801a04a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a02c:	2002      	movs	r0, #2
 801a02e:	f002 fb23 	bl	801c678 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a032:	4b08      	ldr	r3, [pc, #32]	; (801a054 <RadioSetModem+0xb4>)
 801a034:	2200      	movs	r2, #0
 801a036:	735a      	strb	r2, [r3, #13]
        break;
 801a038:	e007      	b.n	801a04a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a03a:	2000      	movs	r0, #0
 801a03c:	f002 fb1c 	bl	801c678 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a040:	4b04      	ldr	r3, [pc, #16]	; (801a054 <RadioSetModem+0xb4>)
 801a042:	2200      	movs	r2, #0
 801a044:	735a      	strb	r2, [r3, #13]
        break;
 801a046:	e000      	b.n	801a04a <RadioSetModem+0xaa>
        break;
 801a048:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a04a:	bf00      	nop
 801a04c:	3708      	adds	r7, #8
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd80      	pop	{r7, pc}
 801a052:	bf00      	nop
 801a054:	20001838 	.word	0x20001838

0801a058 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b082      	sub	sp, #8
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a060:	6878      	ldr	r0, [r7, #4]
 801a062:	f002 fac3 	bl	801c5ec <SUBGRF_SetRfFrequency>
}
 801a066:	bf00      	nop
 801a068:	3708      	adds	r7, #8
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd80      	pop	{r7, pc}

0801a06e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a06e:	b580      	push	{r7, lr}
 801a070:	b090      	sub	sp, #64	; 0x40
 801a072:	af0a      	add	r7, sp, #40	; 0x28
 801a074:	60f8      	str	r0, [r7, #12]
 801a076:	60b9      	str	r1, [r7, #8]
 801a078:	603b      	str	r3, [r7, #0]
 801a07a:	4613      	mov	r3, r2
 801a07c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a07e:	2301      	movs	r3, #1
 801a080:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a082:	2300      	movs	r3, #0
 801a084:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a086:	2300      	movs	r3, #0
 801a088:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a08a:	f000 fdf2 	bl	801ac72 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a08e:	2000      	movs	r0, #0
 801a090:	f7ff ff86 	bl	8019fa0 <RadioSetModem>

    RadioSetChannel( freq );
 801a094:	68f8      	ldr	r0, [r7, #12]
 801a096:	f7ff ffdf 	bl	801a058 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a09a:	2301      	movs	r3, #1
 801a09c:	9309      	str	r3, [sp, #36]	; 0x24
 801a09e:	2300      	movs	r3, #0
 801a0a0:	9308      	str	r3, [sp, #32]
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	9307      	str	r3, [sp, #28]
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	9306      	str	r3, [sp, #24]
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	9305      	str	r3, [sp, #20]
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	9304      	str	r3, [sp, #16]
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	9303      	str	r3, [sp, #12]
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	9302      	str	r3, [sp, #8]
 801a0ba:	2303      	movs	r3, #3
 801a0bc:	9301      	str	r3, [sp, #4]
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	9300      	str	r3, [sp, #0]
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a0c8:	68b9      	ldr	r1, [r7, #8]
 801a0ca:	2000      	movs	r0, #0
 801a0cc:	f000 f83c 	bl	801a148 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a0d0:	2000      	movs	r0, #0
 801a0d2:	f000 fdd5 	bl	801ac80 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a0d6:	f000 ff71 	bl	801afbc <RadioGetWakeupTime>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7e8 fde3 	bl	8002ca8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a0e2:	f004 f90d 	bl	801e300 <UTIL_TIMER_GetCurrentTime>
 801a0e6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a0e8:	e00d      	b.n	801a106 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a0ea:	2000      	movs	r0, #0
 801a0ec:	f000 feb6 	bl	801ae5c <RadioRssi>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a0f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a0f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	dd02      	ble.n	801a106 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a100:	2300      	movs	r3, #0
 801a102:	75fb      	strb	r3, [r7, #23]
            break;
 801a104:	e006      	b.n	801a114 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a106:	6938      	ldr	r0, [r7, #16]
 801a108:	f004 f90c 	bl	801e324 <UTIL_TIMER_GetElapsedTime>
 801a10c:	4602      	mov	r2, r0
 801a10e:	683b      	ldr	r3, [r7, #0]
 801a110:	4293      	cmp	r3, r2
 801a112:	d8ea      	bhi.n	801a0ea <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a114:	f000 fdad 	bl	801ac72 <RadioStandby>

    return status;
 801a118:	7dfb      	ldrb	r3, [r7, #23]
}
 801a11a:	4618      	mov	r0, r3
 801a11c:	3718      	adds	r7, #24
 801a11e:	46bd      	mov	sp, r7
 801a120:	bd80      	pop	{r7, pc}

0801a122 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a122:	b580      	push	{r7, lr}
 801a124:	b082      	sub	sp, #8
 801a126:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a128:	2300      	movs	r3, #0
 801a12a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a12c:	2300      	movs	r3, #0
 801a12e:	2200      	movs	r2, #0
 801a130:	2100      	movs	r1, #0
 801a132:	2000      	movs	r0, #0
 801a134:	f002 f9fe 	bl	801c534 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a138:	f001 ffaf 	bl	801c09a <SUBGRF_GetRandom>
 801a13c:	6078      	str	r0, [r7, #4]

    return rnd;
 801a13e:	687b      	ldr	r3, [r7, #4]
}
 801a140:	4618      	mov	r0, r3
 801a142:	3708      	adds	r7, #8
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}

0801a148 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b08a      	sub	sp, #40	; 0x28
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	60b9      	str	r1, [r7, #8]
 801a150:	607a      	str	r2, [r7, #4]
 801a152:	461a      	mov	r2, r3
 801a154:	4603      	mov	r3, r0
 801a156:	73fb      	strb	r3, [r7, #15]
 801a158:	4613      	mov	r3, r2
 801a15a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a15c:	4ab9      	ldr	r2, [pc, #740]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a15e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a162:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a164:	f003 f87d 	bl	801d262 <RFW_DeInit>
    if( rxContinuous == true )
 801a168:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d001      	beq.n	801a174 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a170:	2300      	movs	r3, #0
 801a172:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a174:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d004      	beq.n	801a186 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a17c:	4ab2      	ldr	r2, [pc, #712]	; (801a448 <RadioSetRxConfig+0x300>)
 801a17e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a182:	7013      	strb	r3, [r2, #0]
 801a184:	e002      	b.n	801a18c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a186:	4bb0      	ldr	r3, [pc, #704]	; (801a448 <RadioSetRxConfig+0x300>)
 801a188:	22ff      	movs	r2, #255	; 0xff
 801a18a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a18c:	7bfb      	ldrb	r3, [r7, #15]
 801a18e:	2b05      	cmp	r3, #5
 801a190:	d009      	beq.n	801a1a6 <RadioSetRxConfig+0x5e>
 801a192:	2b05      	cmp	r3, #5
 801a194:	f300 81d7 	bgt.w	801a546 <RadioSetRxConfig+0x3fe>
 801a198:	2b00      	cmp	r3, #0
 801a19a:	f000 80bf 	beq.w	801a31c <RadioSetRxConfig+0x1d4>
 801a19e:	2b01      	cmp	r3, #1
 801a1a0:	f000 8124 	beq.w	801a3ec <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a1a4:	e1cf      	b.n	801a546 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a1a6:	2001      	movs	r0, #1
 801a1a8:	f002 f8bc 	bl	801c324 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a1ac:	4ba5      	ldr	r3, [pc, #660]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a1b4:	4aa3      	ldr	r2, [pc, #652]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a1ba:	4ba2      	ldr	r3, [pc, #648]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1bc:	2209      	movs	r2, #9
 801a1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a1c2:	4ba0      	ldr	r3, [pc, #640]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a1c8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a1ca:	68b8      	ldr	r0, [r7, #8]
 801a1cc:	f002 ff7c 	bl	801d0c8 <SUBGRF_GetFskBandwidthRegValue>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	4b9b      	ldr	r3, [pc, #620]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a1da:	4b9a      	ldr	r3, [pc, #616]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1dc:	2200      	movs	r2, #0
 801a1de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a1e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a1e2:	00db      	lsls	r3, r3, #3
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	4b97      	ldr	r3, [pc, #604]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a1ea:	4b96      	ldr	r3, [pc, #600]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a1f0:	4b94      	ldr	r3, [pc, #592]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1f2:	2210      	movs	r2, #16
 801a1f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a1f6:	4b93      	ldr	r3, [pc, #588]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a1fc:	4b91      	ldr	r3, [pc, #580]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a1fe:	2200      	movs	r2, #0
 801a200:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a202:	4b91      	ldr	r3, [pc, #580]	; (801a448 <RadioSetRxConfig+0x300>)
 801a204:	781a      	ldrb	r2, [r3, #0]
 801a206:	4b8f      	ldr	r3, [pc, #572]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a208:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a20a:	4b8e      	ldr	r3, [pc, #568]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a20c:	2201      	movs	r2, #1
 801a20e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a210:	4b8c      	ldr	r3, [pc, #560]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a212:	2200      	movs	r2, #0
 801a214:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a216:	2005      	movs	r0, #5
 801a218:	f7ff fec2 	bl	8019fa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a21c:	488b      	ldr	r0, [pc, #556]	; (801a44c <RadioSetRxConfig+0x304>)
 801a21e:	f002 fb1f 	bl	801c860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a222:	488b      	ldr	r0, [pc, #556]	; (801a450 <RadioSetRxConfig+0x308>)
 801a224:	f002 fbee 	bl	801ca04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a228:	4a8a      	ldr	r2, [pc, #552]	; (801a454 <RadioSetRxConfig+0x30c>)
 801a22a:	f107 031c 	add.w	r3, r7, #28
 801a22e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a232:	e883 0003 	stmia.w	r3, {r0, r1}
 801a236:	f107 031c 	add.w	r3, r7, #28
 801a23a:	4618      	mov	r0, r3
 801a23c:	f001 feab 	bl	801bf96 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a240:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a244:	f001 fef6 	bl	801c034 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a248:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a24c:	f000 fe25 	bl	801ae9a <RadioRead>
 801a250:	4603      	mov	r3, r0
 801a252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a25a:	f023 0310 	bic.w	r3, r3, #16
 801a25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a266:	4619      	mov	r1, r3
 801a268:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a26c:	f000 fe03 	bl	801ae76 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a270:	2104      	movs	r1, #4
 801a272:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a276:	f000 fdfe 	bl	801ae76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a27a:	f640 009b 	movw	r0, #2203	; 0x89b
 801a27e:	f000 fe0c 	bl	801ae9a <RadioRead>
 801a282:	4603      	mov	r3, r0
 801a284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a28c:	f023 031c 	bic.w	r3, r3, #28
 801a290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a298:	f043 0308 	orr.w	r3, r3, #8
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	4619      	mov	r1, r3
 801a2a0:	f640 009b 	movw	r0, #2203	; 0x89b
 801a2a4:	f000 fde7 	bl	801ae76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a2a8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a2ac:	f000 fdf5 	bl	801ae9a <RadioRead>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2ba:	f023 0318 	bic.w	r3, r3, #24
 801a2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2c6:	f043 0318 	orr.w	r3, r3, #24
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	4619      	mov	r1, r3
 801a2ce:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a2d2:	f000 fdd0 	bl	801ae76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a2d6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a2da:	f000 fdde 	bl	801ae9a <RadioRead>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2f4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a2f8:	b2db      	uxtb	r3, r3
 801a2fa:	4619      	mov	r1, r3
 801a2fc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a300:	f000 fdb9 	bl	801ae76 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a304:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a306:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a30a:	fb02 f303 	mul.w	r3, r2, r3
 801a30e:	461a      	mov	r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	fbb2 f3f3 	udiv	r3, r2, r3
 801a316:	4a4b      	ldr	r2, [pc, #300]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a318:	6093      	str	r3, [r2, #8]
            break;
 801a31a:	e115      	b.n	801a548 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a31c:	2000      	movs	r0, #0
 801a31e:	f002 f801 	bl	801c324 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a322:	4b48      	ldr	r3, [pc, #288]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a324:	2200      	movs	r2, #0
 801a326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a32a:	4a46      	ldr	r2, [pc, #280]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a330:	4b44      	ldr	r3, [pc, #272]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a332:	220b      	movs	r2, #11
 801a334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a338:	68b8      	ldr	r0, [r7, #8]
 801a33a:	f002 fec5 	bl	801d0c8 <SUBGRF_GetFskBandwidthRegValue>
 801a33e:	4603      	mov	r3, r0
 801a340:	461a      	mov	r2, r3
 801a342:	4b40      	ldr	r3, [pc, #256]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a348:	4b3e      	ldr	r3, [pc, #248]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a34a:	2200      	movs	r2, #0
 801a34c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a34e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a350:	00db      	lsls	r3, r3, #3
 801a352:	b29a      	uxth	r2, r3
 801a354:	4b3b      	ldr	r3, [pc, #236]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a356:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a358:	4b3a      	ldr	r3, [pc, #232]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a35a:	2204      	movs	r2, #4
 801a35c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a35e:	4b39      	ldr	r3, [pc, #228]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a360:	2218      	movs	r2, #24
 801a362:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a364:	4b37      	ldr	r3, [pc, #220]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a366:	2200      	movs	r2, #0
 801a368:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a36a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a36e:	f083 0301 	eor.w	r3, r3, #1
 801a372:	b2db      	uxtb	r3, r3
 801a374:	461a      	mov	r2, r3
 801a376:	4b33      	ldr	r3, [pc, #204]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a378:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a37a:	4b33      	ldr	r3, [pc, #204]	; (801a448 <RadioSetRxConfig+0x300>)
 801a37c:	781a      	ldrb	r2, [r3, #0]
 801a37e:	4b31      	ldr	r3, [pc, #196]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a380:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a382:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a386:	2b00      	cmp	r3, #0
 801a388:	d003      	beq.n	801a392 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a38a:	4b2e      	ldr	r3, [pc, #184]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a38c:	22f2      	movs	r2, #242	; 0xf2
 801a38e:	75da      	strb	r2, [r3, #23]
 801a390:	e002      	b.n	801a398 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a392:	4b2c      	ldr	r3, [pc, #176]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a394:	2201      	movs	r2, #1
 801a396:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a398:	4b2a      	ldr	r3, [pc, #168]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a39a:	2201      	movs	r2, #1
 801a39c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a39e:	f000 fc68 	bl	801ac72 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a3a2:	2000      	movs	r0, #0
 801a3a4:	f7ff fdfc 	bl	8019fa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a3a8:	4828      	ldr	r0, [pc, #160]	; (801a44c <RadioSetRxConfig+0x304>)
 801a3aa:	f002 fa59 	bl	801c860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a3ae:	4828      	ldr	r0, [pc, #160]	; (801a450 <RadioSetRxConfig+0x308>)
 801a3b0:	f002 fb28 	bl	801ca04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a3b4:	4a28      	ldr	r2, [pc, #160]	; (801a458 <RadioSetRxConfig+0x310>)
 801a3b6:	f107 0314 	add.w	r3, r7, #20
 801a3ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a3be:	e883 0003 	stmia.w	r3, {r0, r1}
 801a3c2:	f107 0314 	add.w	r3, r7, #20
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f001 fde5 	bl	801bf96 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a3cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a3d0:	f001 fe30 	bl	801c034 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a3d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a3d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a3da:	fb02 f303 	mul.w	r3, r2, r3
 801a3de:	461a      	mov	r2, r3
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3e6:	4a17      	ldr	r2, [pc, #92]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a3e8:	6093      	str	r3, [r2, #8]
            break;
 801a3ea:	e0ad      	b.n	801a548 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	f001 ff99 	bl	801c324 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a3f2:	4b14      	ldr	r3, [pc, #80]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a3f4:	2201      	movs	r2, #1
 801a3f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	b2da      	uxtb	r2, r3
 801a3fe:	4b11      	ldr	r3, [pc, #68]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a404:	4a15      	ldr	r2, [pc, #84]	; (801a45c <RadioSetRxConfig+0x314>)
 801a406:	68bb      	ldr	r3, [r7, #8]
 801a408:	4413      	add	r3, r2
 801a40a:	781a      	ldrb	r2, [r3, #0]
 801a40c:	4b0d      	ldr	r3, [pc, #52]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a40e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a412:	4a0c      	ldr	r2, [pc, #48]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a414:	7bbb      	ldrb	r3, [r7, #14]
 801a416:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d105      	bne.n	801a42c <RadioSetRxConfig+0x2e4>
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2b0b      	cmp	r3, #11
 801a424:	d008      	beq.n	801a438 <RadioSetRxConfig+0x2f0>
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	2b0c      	cmp	r3, #12
 801a42a:	d005      	beq.n	801a438 <RadioSetRxConfig+0x2f0>
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	2b01      	cmp	r3, #1
 801a430:	d116      	bne.n	801a460 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2b0c      	cmp	r3, #12
 801a436:	d113      	bne.n	801a460 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a438:	4b02      	ldr	r3, [pc, #8]	; (801a444 <RadioSetRxConfig+0x2fc>)
 801a43a:	2201      	movs	r2, #1
 801a43c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a440:	e012      	b.n	801a468 <RadioSetRxConfig+0x320>
 801a442:	bf00      	nop
 801a444:	20001838 	.word	0x20001838
 801a448:	20000154 	.word	0x20000154
 801a44c:	20001870 	.word	0x20001870
 801a450:	20001846 	.word	0x20001846
 801a454:	0801f3a8 	.word	0x0801f3a8
 801a458:	0801f3b0 	.word	0x0801f3b0
 801a45c:	0801fa18 	.word	0x0801fa18
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a460:	4b3b      	ldr	r3, [pc, #236]	; (801a550 <RadioSetRxConfig+0x408>)
 801a462:	2200      	movs	r2, #0
 801a464:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a468:	4b39      	ldr	r3, [pc, #228]	; (801a550 <RadioSetRxConfig+0x408>)
 801a46a:	2201      	movs	r2, #1
 801a46c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a46e:	4b38      	ldr	r3, [pc, #224]	; (801a550 <RadioSetRxConfig+0x408>)
 801a470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a474:	2b05      	cmp	r3, #5
 801a476:	d004      	beq.n	801a482 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a478:	4b35      	ldr	r3, [pc, #212]	; (801a550 <RadioSetRxConfig+0x408>)
 801a47a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a47e:	2b06      	cmp	r3, #6
 801a480:	d10a      	bne.n	801a498 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a482:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a484:	2b0b      	cmp	r3, #11
 801a486:	d803      	bhi.n	801a490 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a488:	4b31      	ldr	r3, [pc, #196]	; (801a550 <RadioSetRxConfig+0x408>)
 801a48a:	220c      	movs	r2, #12
 801a48c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a48e:	e006      	b.n	801a49e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a490:	4a2f      	ldr	r2, [pc, #188]	; (801a550 <RadioSetRxConfig+0x408>)
 801a492:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a494:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a496:	e002      	b.n	801a49e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a498:	4a2d      	ldr	r2, [pc, #180]	; (801a550 <RadioSetRxConfig+0x408>)
 801a49a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a49c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a49e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a4a2:	4b2b      	ldr	r3, [pc, #172]	; (801a550 <RadioSetRxConfig+0x408>)
 801a4a4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a4a6:	4b2b      	ldr	r3, [pc, #172]	; (801a554 <RadioSetRxConfig+0x40c>)
 801a4a8:	781a      	ldrb	r2, [r3, #0]
 801a4aa:	4b29      	ldr	r3, [pc, #164]	; (801a550 <RadioSetRxConfig+0x408>)
 801a4ac:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a4ae:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a4b2:	4b27      	ldr	r3, [pc, #156]	; (801a550 <RadioSetRxConfig+0x408>)
 801a4b4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a4b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a4bc:	4b24      	ldr	r3, [pc, #144]	; (801a550 <RadioSetRxConfig+0x408>)
 801a4be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a4c2:	f000 fbd6 	bl	801ac72 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a4c6:	2001      	movs	r0, #1
 801a4c8:	f7ff fd6a 	bl	8019fa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a4cc:	4822      	ldr	r0, [pc, #136]	; (801a558 <RadioSetRxConfig+0x410>)
 801a4ce:	f002 f9c7 	bl	801c860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a4d2:	4822      	ldr	r0, [pc, #136]	; (801a55c <RadioSetRxConfig+0x414>)
 801a4d4:	f002 fa96 	bl	801ca04 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a4d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a4da:	b2db      	uxtb	r3, r3
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f001 ff30 	bl	801c342 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a4e2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a4e6:	f002 fbe9 	bl	801ccbc <SUBGRF_ReadRegister>
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	f003 0301 	and.w	r3, r3, #1
 801a4f0:	b2db      	uxtb	r3, r3
 801a4f2:	4619      	mov	r1, r3
 801a4f4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a4f8:	f002 fbcc 	bl	801cc94 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a4fc:	4b14      	ldr	r3, [pc, #80]	; (801a550 <RadioSetRxConfig+0x408>)
 801a4fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a502:	2b01      	cmp	r3, #1
 801a504:	d10d      	bne.n	801a522 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a506:	f240 7036 	movw	r0, #1846	; 0x736
 801a50a:	f002 fbd7 	bl	801ccbc <SUBGRF_ReadRegister>
 801a50e:	4603      	mov	r3, r0
 801a510:	f023 0304 	bic.w	r3, r3, #4
 801a514:	b2db      	uxtb	r3, r3
 801a516:	4619      	mov	r1, r3
 801a518:	f240 7036 	movw	r0, #1846	; 0x736
 801a51c:	f002 fbba 	bl	801cc94 <SUBGRF_WriteRegister>
 801a520:	e00c      	b.n	801a53c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a522:	f240 7036 	movw	r0, #1846	; 0x736
 801a526:	f002 fbc9 	bl	801ccbc <SUBGRF_ReadRegister>
 801a52a:	4603      	mov	r3, r0
 801a52c:	f043 0304 	orr.w	r3, r3, #4
 801a530:	b2db      	uxtb	r3, r3
 801a532:	4619      	mov	r1, r3
 801a534:	f240 7036 	movw	r0, #1846	; 0x736
 801a538:	f002 fbac 	bl	801cc94 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a53c:	4b04      	ldr	r3, [pc, #16]	; (801a550 <RadioSetRxConfig+0x408>)
 801a53e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a542:	609a      	str	r2, [r3, #8]
            break;
 801a544:	e000      	b.n	801a548 <RadioSetRxConfig+0x400>
            break;
 801a546:	bf00      	nop
    }
}
 801a548:	bf00      	nop
 801a54a:	3728      	adds	r7, #40	; 0x28
 801a54c:	46bd      	mov	sp, r7
 801a54e:	bd80      	pop	{r7, pc}
 801a550:	20001838 	.word	0x20001838
 801a554:	20000154 	.word	0x20000154
 801a558:	20001870 	.word	0x20001870
 801a55c:	20001846 	.word	0x20001846

0801a560 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b086      	sub	sp, #24
 801a564:	af00      	add	r7, sp, #0
 801a566:	60ba      	str	r2, [r7, #8]
 801a568:	607b      	str	r3, [r7, #4]
 801a56a:	4603      	mov	r3, r0
 801a56c:	73fb      	strb	r3, [r7, #15]
 801a56e:	460b      	mov	r3, r1
 801a570:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a572:	f002 fe76 	bl	801d262 <RFW_DeInit>
    switch( modem )
 801a576:	7bfb      	ldrb	r3, [r7, #15]
 801a578:	2b04      	cmp	r3, #4
 801a57a:	f000 80c7 	beq.w	801a70c <RadioSetTxConfig+0x1ac>
 801a57e:	2b04      	cmp	r3, #4
 801a580:	f300 80d6 	bgt.w	801a730 <RadioSetTxConfig+0x1d0>
 801a584:	2b00      	cmp	r3, #0
 801a586:	d002      	beq.n	801a58e <RadioSetTxConfig+0x2e>
 801a588:	2b01      	cmp	r3, #1
 801a58a:	d059      	beq.n	801a640 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a58c:	e0d0      	b.n	801a730 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a58e:	4b77      	ldr	r3, [pc, #476]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a590:	2200      	movs	r2, #0
 801a592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a596:	4a75      	ldr	r2, [pc, #468]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a598:	6a3b      	ldr	r3, [r7, #32]
 801a59a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a59c:	4b73      	ldr	r3, [pc, #460]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a59e:	220b      	movs	r2, #11
 801a5a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a5a4:	6878      	ldr	r0, [r7, #4]
 801a5a6:	f002 fd8f 	bl	801d0c8 <SUBGRF_GetFskBandwidthRegValue>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	4b6f      	ldr	r3, [pc, #444]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a5b4:	4a6d      	ldr	r2, [pc, #436]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a5ba:	4b6c      	ldr	r3, [pc, #432]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5bc:	2200      	movs	r2, #0
 801a5be:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a5c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a5c2:	00db      	lsls	r3, r3, #3
 801a5c4:	b29a      	uxth	r2, r3
 801a5c6:	4b69      	ldr	r3, [pc, #420]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5c8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a5ca:	4b68      	ldr	r3, [pc, #416]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5cc:	2204      	movs	r2, #4
 801a5ce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a5d0:	4b66      	ldr	r3, [pc, #408]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5d2:	2218      	movs	r2, #24
 801a5d4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a5d6:	4b65      	ldr	r3, [pc, #404]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5d8:	2200      	movs	r2, #0
 801a5da:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a5dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a5e0:	f083 0301 	eor.w	r3, r3, #1
 801a5e4:	b2db      	uxtb	r3, r3
 801a5e6:	461a      	mov	r2, r3
 801a5e8:	4b60      	ldr	r3, [pc, #384]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5ea:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a5ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d003      	beq.n	801a5fc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a5f4:	4b5d      	ldr	r3, [pc, #372]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5f6:	22f2      	movs	r2, #242	; 0xf2
 801a5f8:	75da      	strb	r2, [r3, #23]
 801a5fa:	e002      	b.n	801a602 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a5fc:	4b5b      	ldr	r3, [pc, #364]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a5fe:	2201      	movs	r2, #1
 801a600:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a602:	4b5a      	ldr	r3, [pc, #360]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a604:	2201      	movs	r2, #1
 801a606:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a608:	f000 fb33 	bl	801ac72 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a60c:	2000      	movs	r0, #0
 801a60e:	f7ff fcc7 	bl	8019fa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a612:	4857      	ldr	r0, [pc, #348]	; (801a770 <RadioSetTxConfig+0x210>)
 801a614:	f002 f924 	bl	801c860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a618:	4856      	ldr	r0, [pc, #344]	; (801a774 <RadioSetTxConfig+0x214>)
 801a61a:	f002 f9f3 	bl	801ca04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a61e:	4a56      	ldr	r2, [pc, #344]	; (801a778 <RadioSetTxConfig+0x218>)
 801a620:	f107 0310 	add.w	r3, r7, #16
 801a624:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a628:	e883 0003 	stmia.w	r3, {r0, r1}
 801a62c:	f107 0310 	add.w	r3, r7, #16
 801a630:	4618      	mov	r0, r3
 801a632:	f001 fcb0 	bl	801bf96 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a636:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a63a:	f001 fcfb 	bl	801c034 <SUBGRF_SetWhiteningSeed>
            break;
 801a63e:	e078      	b.n	801a732 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a640:	4b4a      	ldr	r3, [pc, #296]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a642:	2201      	movs	r2, #1
 801a644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a648:	6a3b      	ldr	r3, [r7, #32]
 801a64a:	b2da      	uxtb	r2, r3
 801a64c:	4b47      	ldr	r3, [pc, #284]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a64e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a652:	4a4a      	ldr	r2, [pc, #296]	; (801a77c <RadioSetTxConfig+0x21c>)
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	4413      	add	r3, r2
 801a658:	781a      	ldrb	r2, [r3, #0]
 801a65a:	4b44      	ldr	r3, [pc, #272]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a65c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a660:	4a42      	ldr	r2, [pc, #264]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a662:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a666:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d105      	bne.n	801a67c <RadioSetTxConfig+0x11c>
 801a670:	6a3b      	ldr	r3, [r7, #32]
 801a672:	2b0b      	cmp	r3, #11
 801a674:	d008      	beq.n	801a688 <RadioSetTxConfig+0x128>
 801a676:	6a3b      	ldr	r3, [r7, #32]
 801a678:	2b0c      	cmp	r3, #12
 801a67a:	d005      	beq.n	801a688 <RadioSetTxConfig+0x128>
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	2b01      	cmp	r3, #1
 801a680:	d107      	bne.n	801a692 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a682:	6a3b      	ldr	r3, [r7, #32]
 801a684:	2b0c      	cmp	r3, #12
 801a686:	d104      	bne.n	801a692 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a688:	4b38      	ldr	r3, [pc, #224]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a68a:	2201      	movs	r2, #1
 801a68c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a690:	e003      	b.n	801a69a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a692:	4b36      	ldr	r3, [pc, #216]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a694:	2200      	movs	r2, #0
 801a696:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a69a:	4b34      	ldr	r3, [pc, #208]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a69c:	2201      	movs	r2, #1
 801a69e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a6a0:	4b32      	ldr	r3, [pc, #200]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a6a6:	2b05      	cmp	r3, #5
 801a6a8:	d004      	beq.n	801a6b4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a6aa:	4b30      	ldr	r3, [pc, #192]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a6b0:	2b06      	cmp	r3, #6
 801a6b2:	d10a      	bne.n	801a6ca <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a6b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a6b6:	2b0b      	cmp	r3, #11
 801a6b8:	d803      	bhi.n	801a6c2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a6ba:	4b2c      	ldr	r3, [pc, #176]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6bc:	220c      	movs	r2, #12
 801a6be:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a6c0:	e006      	b.n	801a6d0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a6c2:	4a2a      	ldr	r2, [pc, #168]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a6c6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a6c8:	e002      	b.n	801a6d0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a6ca:	4a28      	ldr	r2, [pc, #160]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a6ce:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a6d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a6d4:	4b25      	ldr	r3, [pc, #148]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6d6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a6d8:	4b29      	ldr	r3, [pc, #164]	; (801a780 <RadioSetTxConfig+0x220>)
 801a6da:	781a      	ldrb	r2, [r3, #0]
 801a6dc:	4b23      	ldr	r3, [pc, #140]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6de:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a6e0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a6e4:	4b21      	ldr	r3, [pc, #132]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6e6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a6ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a6ee:	4b1f      	ldr	r3, [pc, #124]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a6f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a6f4:	f000 fabd 	bl	801ac72 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a6f8:	2001      	movs	r0, #1
 801a6fa:	f7ff fc51 	bl	8019fa0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6fe:	481c      	ldr	r0, [pc, #112]	; (801a770 <RadioSetTxConfig+0x210>)
 801a700:	f002 f8ae 	bl	801c860 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a704:	481b      	ldr	r0, [pc, #108]	; (801a774 <RadioSetTxConfig+0x214>)
 801a706:	f002 f97d 	bl	801ca04 <SUBGRF_SetPacketParams>
            break;
 801a70a:	e012      	b.n	801a732 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a70c:	2004      	movs	r0, #4
 801a70e:	f7ff fc47 	bl	8019fa0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a712:	4b16      	ldr	r3, [pc, #88]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a714:	2202      	movs	r2, #2
 801a716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a71a:	4a14      	ldr	r2, [pc, #80]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a71c:	6a3b      	ldr	r3, [r7, #32]
 801a71e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a720:	4b12      	ldr	r3, [pc, #72]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a722:	2216      	movs	r2, #22
 801a724:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a728:	4811      	ldr	r0, [pc, #68]	; (801a770 <RadioSetTxConfig+0x210>)
 801a72a:	f002 f899 	bl	801c860 <SUBGRF_SetModulationParams>
            break;
 801a72e:	e000      	b.n	801a732 <RadioSetTxConfig+0x1d2>
            break;
 801a730:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a736:	4618      	mov	r0, r3
 801a738:	f002 fbc8 	bl	801cecc <SUBGRF_SetRfTxPower>
 801a73c:	4603      	mov	r3, r0
 801a73e:	461a      	mov	r2, r3
 801a740:	4b0a      	ldr	r3, [pc, #40]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a742:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a746:	210e      	movs	r1, #14
 801a748:	f640 101f 	movw	r0, #2335	; 0x91f
 801a74c:	f002 faa2 	bl	801cc94 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a750:	4b06      	ldr	r3, [pc, #24]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a752:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a756:	4618      	mov	r0, r3
 801a758:	f002 fd97 	bl	801d28a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a75c:	4a03      	ldr	r2, [pc, #12]	; (801a76c <RadioSetTxConfig+0x20c>)
 801a75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a760:	6053      	str	r3, [r2, #4]
}
 801a762:	bf00      	nop
 801a764:	3718      	adds	r7, #24
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}
 801a76a:	bf00      	nop
 801a76c:	20001838 	.word	0x20001838
 801a770:	20001870 	.word	0x20001870
 801a774:	20001846 	.word	0x20001846
 801a778:	0801f3b0 	.word	0x0801f3b0
 801a77c:	0801fa18 	.word	0x0801fa18
 801a780:	20000154 	.word	0x20000154

0801a784 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a784:	b480      	push	{r7}
 801a786:	b083      	sub	sp, #12
 801a788:	af00      	add	r7, sp, #0
 801a78a:	6078      	str	r0, [r7, #4]
    return true;
 801a78c:	2301      	movs	r3, #1
}
 801a78e:	4618      	mov	r0, r3
 801a790:	370c      	adds	r7, #12
 801a792:	46bd      	mov	sp, r7
 801a794:	bc80      	pop	{r7}
 801a796:	4770      	bx	lr

0801a798 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a798:	b480      	push	{r7}
 801a79a:	b085      	sub	sp, #20
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	4603      	mov	r3, r0
 801a7a0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a7a6:	79fb      	ldrb	r3, [r7, #7]
 801a7a8:	2b0a      	cmp	r3, #10
 801a7aa:	d83e      	bhi.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
 801a7ac:	a201      	add	r2, pc, #4	; (adr r2, 801a7b4 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7b2:	bf00      	nop
 801a7b4:	0801a7e1 	.word	0x0801a7e1
 801a7b8:	0801a7f1 	.word	0x0801a7f1
 801a7bc:	0801a801 	.word	0x0801a801
 801a7c0:	0801a811 	.word	0x0801a811
 801a7c4:	0801a819 	.word	0x0801a819
 801a7c8:	0801a81f 	.word	0x0801a81f
 801a7cc:	0801a825 	.word	0x0801a825
 801a7d0:	0801a82b 	.word	0x0801a82b
 801a7d4:	0801a7e9 	.word	0x0801a7e9
 801a7d8:	0801a7f9 	.word	0x0801a7f9
 801a7dc:	0801a809 	.word	0x0801a809
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a7e0:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a7e4:	60fb      	str	r3, [r7, #12]
        break;
 801a7e6:	e020      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a7e8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a7ec:	60fb      	str	r3, [r7, #12]
        break;
 801a7ee:	e01c      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a7f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a7f4:	60fb      	str	r3, [r7, #12]
        break;
 801a7f6:	e018      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a7f8:	f245 1361 	movw	r3, #20833	; 0x5161
 801a7fc:	60fb      	str	r3, [r7, #12]
        break;
 801a7fe:	e014      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a800:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a804:	60fb      	str	r3, [r7, #12]
        break;
 801a806:	e010      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a808:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a80c:	60fb      	str	r3, [r7, #12]
        break;
 801a80e:	e00c      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a810:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a814:	60fb      	str	r3, [r7, #12]
        break;
 801a816:	e008      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a818:	4b07      	ldr	r3, [pc, #28]	; (801a838 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a81a:	60fb      	str	r3, [r7, #12]
        break;
 801a81c:	e005      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a81e:	4b07      	ldr	r3, [pc, #28]	; (801a83c <RadioGetLoRaBandwidthInHz+0xa4>)
 801a820:	60fb      	str	r3, [r7, #12]
        break;
 801a822:	e002      	b.n	801a82a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a824:	4b06      	ldr	r3, [pc, #24]	; (801a840 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a826:	60fb      	str	r3, [r7, #12]
        break;
 801a828:	bf00      	nop
    }

    return bandwidthInHz;
 801a82a:	68fb      	ldr	r3, [r7, #12]
}
 801a82c:	4618      	mov	r0, r3
 801a82e:	3714      	adds	r7, #20
 801a830:	46bd      	mov	sp, r7
 801a832:	bc80      	pop	{r7}
 801a834:	4770      	bx	lr
 801a836:	bf00      	nop
 801a838:	0001e848 	.word	0x0001e848
 801a83c:	0003d090 	.word	0x0003d090
 801a840:	0007a120 	.word	0x0007a120

0801a844 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a844:	b480      	push	{r7}
 801a846:	b083      	sub	sp, #12
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
 801a84c:	4608      	mov	r0, r1
 801a84e:	4611      	mov	r1, r2
 801a850:	461a      	mov	r2, r3
 801a852:	4603      	mov	r3, r0
 801a854:	70fb      	strb	r3, [r7, #3]
 801a856:	460b      	mov	r3, r1
 801a858:	803b      	strh	r3, [r7, #0]
 801a85a:	4613      	mov	r3, r2
 801a85c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a85e:	883b      	ldrh	r3, [r7, #0]
 801a860:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a862:	78ba      	ldrb	r2, [r7, #2]
 801a864:	f082 0201 	eor.w	r2, r2, #1
 801a868:	b2d2      	uxtb	r2, r2
 801a86a:	2a00      	cmp	r2, #0
 801a86c:	d001      	beq.n	801a872 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a86e:	2208      	movs	r2, #8
 801a870:	e000      	b.n	801a874 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a872:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a874:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a876:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a87a:	7c3b      	ldrb	r3, [r7, #16]
 801a87c:	7d39      	ldrb	r1, [r7, #20]
 801a87e:	2900      	cmp	r1, #0
 801a880:	d001      	beq.n	801a886 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a882:	2102      	movs	r1, #2
 801a884:	e000      	b.n	801a888 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a886:	2100      	movs	r1, #0
 801a888:	440b      	add	r3, r1
 801a88a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a88c:	4413      	add	r3, r2
}
 801a88e:	4618      	mov	r0, r3
 801a890:	370c      	adds	r7, #12
 801a892:	46bd      	mov	sp, r7
 801a894:	bc80      	pop	{r7}
 801a896:	4770      	bx	lr

0801a898 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a898:	b480      	push	{r7}
 801a89a:	b08b      	sub	sp, #44	; 0x2c
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	60f8      	str	r0, [r7, #12]
 801a8a0:	60b9      	str	r1, [r7, #8]
 801a8a2:	4611      	mov	r1, r2
 801a8a4:	461a      	mov	r2, r3
 801a8a6:	460b      	mov	r3, r1
 801a8a8:	71fb      	strb	r3, [r7, #7]
 801a8aa:	4613      	mov	r3, r2
 801a8ac:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a8ae:	79fb      	ldrb	r3, [r7, #7]
 801a8b0:	3304      	adds	r3, #4
 801a8b2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	2b05      	cmp	r3, #5
 801a8be:	d002      	beq.n	801a8c6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a8c0:	68bb      	ldr	r3, [r7, #8]
 801a8c2:	2b06      	cmp	r3, #6
 801a8c4:	d104      	bne.n	801a8d0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a8c6:	88bb      	ldrh	r3, [r7, #4]
 801a8c8:	2b0b      	cmp	r3, #11
 801a8ca:	d801      	bhi.n	801a8d0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a8cc:	230c      	movs	r3, #12
 801a8ce:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d105      	bne.n	801a8e2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a8d6:	68bb      	ldr	r3, [r7, #8]
 801a8d8:	2b0b      	cmp	r3, #11
 801a8da:	d008      	beq.n	801a8ee <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	2b0c      	cmp	r3, #12
 801a8e0:	d005      	beq.n	801a8ee <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	2b01      	cmp	r3, #1
 801a8e6:	d105      	bne.n	801a8f4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	2b0c      	cmp	r3, #12
 801a8ec:	d102      	bne.n	801a8f4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a8ee:	2301      	movs	r3, #1
 801a8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a8f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a8f8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a8fe:	2a00      	cmp	r2, #0
 801a900:	d001      	beq.n	801a906 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a902:	2210      	movs	r2, #16
 801a904:	e000      	b.n	801a908 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a906:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a908:	4413      	add	r3, r2
 801a90a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a90c:	68bb      	ldr	r3, [r7, #8]
 801a90e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a910:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a912:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a916:	2a00      	cmp	r2, #0
 801a918:	d001      	beq.n	801a91e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a91a:	2200      	movs	r2, #0
 801a91c:	e000      	b.n	801a920 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a91e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a920:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a922:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a924:	68bb      	ldr	r3, [r7, #8]
 801a926:	2b06      	cmp	r3, #6
 801a928:	d803      	bhi.n	801a932 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	009b      	lsls	r3, r3, #2
 801a92e:	623b      	str	r3, [r7, #32]
 801a930:	e00e      	b.n	801a950 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a932:	69fb      	ldr	r3, [r7, #28]
 801a934:	3308      	adds	r3, #8
 801a936:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d004      	beq.n	801a94a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	3b02      	subs	r3, #2
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	623b      	str	r3, [r7, #32]
 801a948:	e002      	b.n	801a950 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	009b      	lsls	r3, r3, #2
 801a94e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	2b00      	cmp	r3, #0
 801a954:	da01      	bge.n	801a95a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a956:	2300      	movs	r3, #0
 801a958:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a95a:	69fa      	ldr	r2, [r7, #28]
 801a95c:	6a3b      	ldr	r3, [r7, #32]
 801a95e:	4413      	add	r3, r2
 801a960:	1e5a      	subs	r2, r3, #1
 801a962:	6a3b      	ldr	r3, [r7, #32]
 801a964:	fb92 f3f3 	sdiv	r3, r2, r3
 801a968:	697a      	ldr	r2, [r7, #20]
 801a96a:	fb03 f202 	mul.w	r2, r3, r2
 801a96e:	88bb      	ldrh	r3, [r7, #4]
 801a970:	4413      	add	r3, r2
    int32_t intermediate =
 801a972:	330c      	adds	r3, #12
 801a974:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a976:	68bb      	ldr	r3, [r7, #8]
 801a978:	2b06      	cmp	r3, #6
 801a97a:	d802      	bhi.n	801a982 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a97c:	69bb      	ldr	r3, [r7, #24]
 801a97e:	3302      	adds	r3, #2
 801a980:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a982:	69bb      	ldr	r3, [r7, #24]
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	1c5a      	adds	r2, r3, #1
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	3b02      	subs	r3, #2
 801a98c:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a990:	4618      	mov	r0, r3
 801a992:	372c      	adds	r7, #44	; 0x2c
 801a994:	46bd      	mov	sp, r7
 801a996:	bc80      	pop	{r7}
 801a998:	4770      	bx	lr
	...

0801a99c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b08a      	sub	sp, #40	; 0x28
 801a9a0:	af04      	add	r7, sp, #16
 801a9a2:	60b9      	str	r1, [r7, #8]
 801a9a4:	607a      	str	r2, [r7, #4]
 801a9a6:	461a      	mov	r2, r3
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	73fb      	strb	r3, [r7, #15]
 801a9ac:	4613      	mov	r3, r2
 801a9ae:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a9b8:	7bfb      	ldrb	r3, [r7, #15]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d002      	beq.n	801a9c4 <RadioTimeOnAir+0x28>
 801a9be:	2b01      	cmp	r3, #1
 801a9c0:	d017      	beq.n	801a9f2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a9c2:	e035      	b.n	801aa30 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a9c4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a9c8:	8c3a      	ldrh	r2, [r7, #32]
 801a9ca:	7bb9      	ldrb	r1, [r7, #14]
 801a9cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a9d0:	9301      	str	r3, [sp, #4]
 801a9d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a9d6:	9300      	str	r3, [sp, #0]
 801a9d8:	4603      	mov	r3, r0
 801a9da:	6878      	ldr	r0, [r7, #4]
 801a9dc:	f7ff ff32 	bl	801a844 <RadioGetGfskTimeOnAirNumerator>
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a9e6:	fb02 f303 	mul.w	r3, r2, r3
 801a9ea:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	613b      	str	r3, [r7, #16]
        break;
 801a9f0:	e01e      	b.n	801aa30 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a9f2:	8c39      	ldrh	r1, [r7, #32]
 801a9f4:	7bba      	ldrb	r2, [r7, #14]
 801a9f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a9fa:	9302      	str	r3, [sp, #8]
 801a9fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa00:	9301      	str	r3, [sp, #4]
 801aa02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa06:	9300      	str	r3, [sp, #0]
 801aa08:	460b      	mov	r3, r1
 801aa0a:	6879      	ldr	r1, [r7, #4]
 801aa0c:	68b8      	ldr	r0, [r7, #8]
 801aa0e:	f7ff ff43 	bl	801a898 <RadioGetLoRaTimeOnAirNumerator>
 801aa12:	4603      	mov	r3, r0
 801aa14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa18:	fb02 f303 	mul.w	r3, r2, r3
 801aa1c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801aa1e:	4a0a      	ldr	r2, [pc, #40]	; (801aa48 <RadioTimeOnAir+0xac>)
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	4413      	add	r3, r2
 801aa24:	781b      	ldrb	r3, [r3, #0]
 801aa26:	4618      	mov	r0, r3
 801aa28:	f7ff feb6 	bl	801a798 <RadioGetLoRaBandwidthInHz>
 801aa2c:	6138      	str	r0, [r7, #16]
        break;
 801aa2e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801aa30:	697a      	ldr	r2, [r7, #20]
 801aa32:	693b      	ldr	r3, [r7, #16]
 801aa34:	4413      	add	r3, r2
 801aa36:	1e5a      	subs	r2, r3, #1
 801aa38:	693b      	ldr	r3, [r7, #16]
 801aa3a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	3718      	adds	r7, #24
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}
 801aa46:	bf00      	nop
 801aa48:	0801fa18 	.word	0x0801fa18

0801aa4c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b084      	sub	sp, #16
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	460b      	mov	r3, r1
 801aa56:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801aa58:	2300      	movs	r3, #0
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	f240 2101 	movw	r1, #513	; 0x201
 801aa60:	f240 2001 	movw	r0, #513	; 0x201
 801aa64:	f001 fd66 	bl	801c534 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801aa68:	4b73      	ldr	r3, [pc, #460]	; (801ac38 <RadioSend+0x1ec>)
 801aa6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aa6e:	2101      	movs	r1, #1
 801aa70:	4618      	mov	r0, r3
 801aa72:	f002 fa03 	bl	801ce7c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801aa76:	4b70      	ldr	r3, [pc, #448]	; (801ac38 <RadioSend+0x1ec>)
 801aa78:	781b      	ldrb	r3, [r3, #0]
 801aa7a:	2b01      	cmp	r3, #1
 801aa7c:	d112      	bne.n	801aaa4 <RadioSend+0x58>
 801aa7e:	4b6e      	ldr	r3, [pc, #440]	; (801ac38 <RadioSend+0x1ec>)
 801aa80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aa84:	2b06      	cmp	r3, #6
 801aa86:	d10d      	bne.n	801aaa4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801aa88:	f640 0089 	movw	r0, #2185	; 0x889
 801aa8c:	f002 f916 	bl	801ccbc <SUBGRF_ReadRegister>
 801aa90:	4603      	mov	r3, r0
 801aa92:	f023 0304 	bic.w	r3, r3, #4
 801aa96:	b2db      	uxtb	r3, r3
 801aa98:	4619      	mov	r1, r3
 801aa9a:	f640 0089 	movw	r0, #2185	; 0x889
 801aa9e:	f002 f8f9 	bl	801cc94 <SUBGRF_WriteRegister>
 801aaa2:	e00c      	b.n	801aabe <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801aaa4:	f640 0089 	movw	r0, #2185	; 0x889
 801aaa8:	f002 f908 	bl	801ccbc <SUBGRF_ReadRegister>
 801aaac:	4603      	mov	r3, r0
 801aaae:	f043 0304 	orr.w	r3, r3, #4
 801aab2:	b2db      	uxtb	r3, r3
 801aab4:	4619      	mov	r1, r3
 801aab6:	f640 0089 	movw	r0, #2185	; 0x889
 801aaba:	f002 f8eb 	bl	801cc94 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801aabe:	4b5e      	ldr	r3, [pc, #376]	; (801ac38 <RadioSend+0x1ec>)
 801aac0:	781b      	ldrb	r3, [r3, #0]
 801aac2:	2b04      	cmp	r3, #4
 801aac4:	f200 80a8 	bhi.w	801ac18 <RadioSend+0x1cc>
 801aac8:	a201      	add	r2, pc, #4	; (adr r2, 801aad0 <RadioSend+0x84>)
 801aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aace:	bf00      	nop
 801aad0:	0801aaff 	.word	0x0801aaff
 801aad4:	0801aae5 	.word	0x0801aae5
 801aad8:	0801aaff 	.word	0x0801aaff
 801aadc:	0801ab61 	.word	0x0801ab61
 801aae0:	0801ab81 	.word	0x0801ab81
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801aae4:	4a54      	ldr	r2, [pc, #336]	; (801ac38 <RadioSend+0x1ec>)
 801aae6:	78fb      	ldrb	r3, [r7, #3]
 801aae8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aaea:	4854      	ldr	r0, [pc, #336]	; (801ac3c <RadioSend+0x1f0>)
 801aaec:	f001 ff8a 	bl	801ca04 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801aaf0:	78fb      	ldrb	r3, [r7, #3]
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	4619      	mov	r1, r3
 801aaf6:	6878      	ldr	r0, [r7, #4]
 801aaf8:	f001 fa3a 	bl	801bf70 <SUBGRF_SendPayload>
            break;
 801aafc:	e08d      	b.n	801ac1a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801aafe:	f002 fbb6 	bl	801d26e <RFW_Is_Init>
 801ab02:	4603      	mov	r3, r0
 801ab04:	2b01      	cmp	r3, #1
 801ab06:	d11e      	bne.n	801ab46 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ab08:	f107 020d 	add.w	r2, r7, #13
 801ab0c:	78fb      	ldrb	r3, [r7, #3]
 801ab0e:	4619      	mov	r1, r3
 801ab10:	6878      	ldr	r0, [r7, #4]
 801ab12:	f002 fbc4 	bl	801d29e <RFW_TransmitInit>
 801ab16:	4603      	mov	r3, r0
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d10c      	bne.n	801ab36 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ab1c:	7b7a      	ldrb	r2, [r7, #13]
 801ab1e:	4b46      	ldr	r3, [pc, #280]	; (801ac38 <RadioSend+0x1ec>)
 801ab20:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab22:	4846      	ldr	r0, [pc, #280]	; (801ac3c <RadioSend+0x1f0>)
 801ab24:	f001 ff6e 	bl	801ca04 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801ab28:	7b7b      	ldrb	r3, [r7, #13]
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	4619      	mov	r1, r3
 801ab2e:	6878      	ldr	r0, [r7, #4]
 801ab30:	f001 fa1e 	bl	801bf70 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801ab34:	e071      	b.n	801ac1a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801ab36:	4b42      	ldr	r3, [pc, #264]	; (801ac40 <RadioSend+0x1f4>)
 801ab38:	2201      	movs	r2, #1
 801ab3a:	2100      	movs	r1, #0
 801ab3c:	2002      	movs	r0, #2
 801ab3e:	f003 fccf 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801ab42:	2303      	movs	r3, #3
 801ab44:	e073      	b.n	801ac2e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801ab46:	4a3c      	ldr	r2, [pc, #240]	; (801ac38 <RadioSend+0x1ec>)
 801ab48:	78fb      	ldrb	r3, [r7, #3]
 801ab4a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab4c:	483b      	ldr	r0, [pc, #236]	; (801ac3c <RadioSend+0x1f0>)
 801ab4e:	f001 ff59 	bl	801ca04 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801ab52:	78fb      	ldrb	r3, [r7, #3]
 801ab54:	2200      	movs	r2, #0
 801ab56:	4619      	mov	r1, r3
 801ab58:	6878      	ldr	r0, [r7, #4]
 801ab5a:	f001 fa09 	bl	801bf70 <SUBGRF_SendPayload>
            break;
 801ab5e:	e05c      	b.n	801ac1a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ab60:	4b35      	ldr	r3, [pc, #212]	; (801ac38 <RadioSend+0x1ec>)
 801ab62:	2202      	movs	r2, #2
 801ab64:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801ab66:	4a34      	ldr	r2, [pc, #208]	; (801ac38 <RadioSend+0x1ec>)
 801ab68:	78fb      	ldrb	r3, [r7, #3]
 801ab6a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab6c:	4833      	ldr	r0, [pc, #204]	; (801ac3c <RadioSend+0x1f0>)
 801ab6e:	f001 ff49 	bl	801ca04 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ab72:	78fb      	ldrb	r3, [r7, #3]
 801ab74:	2200      	movs	r2, #0
 801ab76:	4619      	mov	r1, r3
 801ab78:	6878      	ldr	r0, [r7, #4]
 801ab7a:	f001 f9f9 	bl	801bf70 <SUBGRF_SendPayload>
            break;
 801ab7e:	e04c      	b.n	801ac1a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801ab80:	78fb      	ldrb	r3, [r7, #3]
 801ab82:	461a      	mov	r2, r3
 801ab84:	6879      	ldr	r1, [r7, #4]
 801ab86:	482f      	ldr	r0, [pc, #188]	; (801ac44 <RadioSend+0x1f8>)
 801ab88:	f000 fccc 	bl	801b524 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ab8c:	4b2a      	ldr	r3, [pc, #168]	; (801ac38 <RadioSend+0x1ec>)
 801ab8e:	2202      	movs	r2, #2
 801ab90:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801ab92:	78fb      	ldrb	r3, [r7, #3]
 801ab94:	3301      	adds	r3, #1
 801ab96:	b2da      	uxtb	r2, r3
 801ab98:	4b27      	ldr	r3, [pc, #156]	; (801ac38 <RadioSend+0x1ec>)
 801ab9a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab9c:	4827      	ldr	r0, [pc, #156]	; (801ac3c <RadioSend+0x1f0>)
 801ab9e:	f001 ff31 	bl	801ca04 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801aba2:	2100      	movs	r1, #0
 801aba4:	20f1      	movs	r0, #241	; 0xf1
 801aba6:	f000 f966 	bl	801ae76 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801abaa:	2100      	movs	r1, #0
 801abac:	20f0      	movs	r0, #240	; 0xf0
 801abae:	f000 f962 	bl	801ae76 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801abb2:	4b21      	ldr	r3, [pc, #132]	; (801ac38 <RadioSend+0x1ec>)
 801abb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801abb6:	2b64      	cmp	r3, #100	; 0x64
 801abb8:	d108      	bne.n	801abcc <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801abba:	2170      	movs	r1, #112	; 0x70
 801abbc:	20f3      	movs	r0, #243	; 0xf3
 801abbe:	f000 f95a 	bl	801ae76 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801abc2:	211d      	movs	r1, #29
 801abc4:	20f2      	movs	r0, #242	; 0xf2
 801abc6:	f000 f956 	bl	801ae76 <RadioWrite>
 801abca:	e007      	b.n	801abdc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801abcc:	21e1      	movs	r1, #225	; 0xe1
 801abce:	20f3      	movs	r0, #243	; 0xf3
 801abd0:	f000 f951 	bl	801ae76 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801abd4:	2104      	movs	r1, #4
 801abd6:	20f2      	movs	r0, #242	; 0xf2
 801abd8:	f000 f94d 	bl	801ae76 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801abdc:	78fb      	ldrb	r3, [r7, #3]
 801abde:	b29b      	uxth	r3, r3
 801abe0:	00db      	lsls	r3, r3, #3
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	3302      	adds	r3, #2
 801abe6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801abe8:	89fb      	ldrh	r3, [r7, #14]
 801abea:	0a1b      	lsrs	r3, r3, #8
 801abec:	b29b      	uxth	r3, r3
 801abee:	b2db      	uxtb	r3, r3
 801abf0:	4619      	mov	r1, r3
 801abf2:	20f4      	movs	r0, #244	; 0xf4
 801abf4:	f000 f93f 	bl	801ae76 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801abf8:	89fb      	ldrh	r3, [r7, #14]
 801abfa:	b2db      	uxtb	r3, r3
 801abfc:	4619      	mov	r1, r3
 801abfe:	20f5      	movs	r0, #245	; 0xf5
 801ac00:	f000 f939 	bl	801ae76 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801ac04:	78fb      	ldrb	r3, [r7, #3]
 801ac06:	3301      	adds	r3, #1
 801ac08:	b2db      	uxtb	r3, r3
 801ac0a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801ac0e:	4619      	mov	r1, r3
 801ac10:	480c      	ldr	r0, [pc, #48]	; (801ac44 <RadioSend+0x1f8>)
 801ac12:	f001 f9ad 	bl	801bf70 <SUBGRF_SendPayload>
            break;
 801ac16:	e000      	b.n	801ac1a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ac18:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801ac1a:	4b07      	ldr	r3, [pc, #28]	; (801ac38 <RadioSend+0x1ec>)
 801ac1c:	685b      	ldr	r3, [r3, #4]
 801ac1e:	4619      	mov	r1, r3
 801ac20:	4809      	ldr	r0, [pc, #36]	; (801ac48 <RadioSend+0x1fc>)
 801ac22:	f003 fac3 	bl	801e1ac <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801ac26:	4808      	ldr	r0, [pc, #32]	; (801ac48 <RadioSend+0x1fc>)
 801ac28:	f003 f9e2 	bl	801dff0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801ac2c:	2300      	movs	r3, #0
}
 801ac2e:	4618      	mov	r0, r3
 801ac30:	3710      	adds	r7, #16
 801ac32:	46bd      	mov	sp, r7
 801ac34:	bd80      	pop	{r7, pc}
 801ac36:	bf00      	nop
 801ac38:	20001838 	.word	0x20001838
 801ac3c:	20001846 	.word	0x20001846
 801ac40:	0801f3b8 	.word	0x0801f3b8
 801ac44:	20001734 	.word	0x20001734
 801ac48:	20001894 	.word	0x20001894

0801ac4c <RadioSleep>:

static void RadioSleep( void )
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	b082      	sub	sp, #8
 801ac50:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801ac52:	2300      	movs	r3, #0
 801ac54:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801ac56:	793b      	ldrb	r3, [r7, #4]
 801ac58:	f043 0304 	orr.w	r3, r3, #4
 801ac5c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801ac5e:	7938      	ldrb	r0, [r7, #4]
 801ac60:	f001 fa62 	bl	801c128 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801ac64:	2002      	movs	r0, #2
 801ac66:	f7e8 f81f 	bl	8002ca8 <HAL_Delay>
}
 801ac6a:	bf00      	nop
 801ac6c:	3708      	adds	r7, #8
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bd80      	pop	{r7, pc}

0801ac72 <RadioStandby>:

static void RadioStandby( void )
{
 801ac72:	b580      	push	{r7, lr}
 801ac74:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801ac76:	2000      	movs	r0, #0
 801ac78:	f001 fa88 	bl	801c18c <SUBGRF_SetStandby>
}
 801ac7c:	bf00      	nop
 801ac7e:	bd80      	pop	{r7, pc}

0801ac80 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b082      	sub	sp, #8
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801ac88:	f002 faf1 	bl	801d26e <RFW_Is_Init>
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	2b01      	cmp	r3, #1
 801ac90:	d102      	bne.n	801ac98 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801ac92:	f002 fb14 	bl	801d2be <RFW_ReceiveInit>
 801ac96:	e007      	b.n	801aca8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ac98:	2300      	movs	r3, #0
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	f240 2162 	movw	r1, #610	; 0x262
 801aca0:	f240 2062 	movw	r0, #610	; 0x262
 801aca4:	f001 fc46 	bl	801c534 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d006      	beq.n	801acbc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801acae:	6879      	ldr	r1, [r7, #4]
 801acb0:	4811      	ldr	r0, [pc, #68]	; (801acf8 <RadioRx+0x78>)
 801acb2:	f003 fa7b 	bl	801e1ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801acb6:	4810      	ldr	r0, [pc, #64]	; (801acf8 <RadioRx+0x78>)
 801acb8:	f003 f99a 	bl	801dff0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801acbc:	4b0f      	ldr	r3, [pc, #60]	; (801acfc <RadioRx+0x7c>)
 801acbe:	2200      	movs	r2, #0
 801acc0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801acc2:	4b0e      	ldr	r3, [pc, #56]	; (801acfc <RadioRx+0x7c>)
 801acc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801acc8:	2100      	movs	r1, #0
 801acca:	4618      	mov	r0, r3
 801accc:	f002 f8d6 	bl	801ce7c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801acd0:	4b0a      	ldr	r3, [pc, #40]	; (801acfc <RadioRx+0x7c>)
 801acd2:	785b      	ldrb	r3, [r3, #1]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d004      	beq.n	801ace2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801acd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801acdc:	f001 fa92 	bl	801c204 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ace0:	e005      	b.n	801acee <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ace2:	4b06      	ldr	r3, [pc, #24]	; (801acfc <RadioRx+0x7c>)
 801ace4:	689b      	ldr	r3, [r3, #8]
 801ace6:	019b      	lsls	r3, r3, #6
 801ace8:	4618      	mov	r0, r3
 801acea:	f001 fa8b 	bl	801c204 <SUBGRF_SetRx>
}
 801acee:	bf00      	nop
 801acf0:	3708      	adds	r7, #8
 801acf2:	46bd      	mov	sp, r7
 801acf4:	bd80      	pop	{r7, pc}
 801acf6:	bf00      	nop
 801acf8:	200018ac 	.word	0x200018ac
 801acfc:	20001838 	.word	0x20001838

0801ad00 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b082      	sub	sp, #8
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801ad08:	f002 fab1 	bl	801d26e <RFW_Is_Init>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	2b01      	cmp	r3, #1
 801ad10:	d102      	bne.n	801ad18 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801ad12:	f002 fad4 	bl	801d2be <RFW_ReceiveInit>
 801ad16:	e007      	b.n	801ad28 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad18:	2300      	movs	r3, #0
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	f240 2162 	movw	r1, #610	; 0x262
 801ad20:	f240 2062 	movw	r0, #610	; 0x262
 801ad24:	f001 fc06 	bl	801c534 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d006      	beq.n	801ad3c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad2e:	6879      	ldr	r1, [r7, #4]
 801ad30:	4811      	ldr	r0, [pc, #68]	; (801ad78 <RadioRxBoosted+0x78>)
 801ad32:	f003 fa3b 	bl	801e1ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad36:	4810      	ldr	r0, [pc, #64]	; (801ad78 <RadioRxBoosted+0x78>)
 801ad38:	f003 f95a 	bl	801dff0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ad3c:	4b0f      	ldr	r3, [pc, #60]	; (801ad7c <RadioRxBoosted+0x7c>)
 801ad3e:	2200      	movs	r2, #0
 801ad40:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ad42:	4b0e      	ldr	r3, [pc, #56]	; (801ad7c <RadioRxBoosted+0x7c>)
 801ad44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad48:	2100      	movs	r1, #0
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f002 f896 	bl	801ce7c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801ad50:	4b0a      	ldr	r3, [pc, #40]	; (801ad7c <RadioRxBoosted+0x7c>)
 801ad52:	785b      	ldrb	r3, [r3, #1]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d004      	beq.n	801ad62 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801ad58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad5c:	f001 fa72 	bl	801c244 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801ad60:	e005      	b.n	801ad6e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801ad62:	4b06      	ldr	r3, [pc, #24]	; (801ad7c <RadioRxBoosted+0x7c>)
 801ad64:	689b      	ldr	r3, [r3, #8]
 801ad66:	019b      	lsls	r3, r3, #6
 801ad68:	4618      	mov	r0, r3
 801ad6a:	f001 fa6b 	bl	801c244 <SUBGRF_SetRxBoosted>
}
 801ad6e:	bf00      	nop
 801ad70:	3708      	adds	r7, #8
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	200018ac 	.word	0x200018ac
 801ad7c:	20001838 	.word	0x20001838

0801ad80 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b082      	sub	sp, #8
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
 801ad88:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	005a      	lsls	r2, r3, #1
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	4413      	add	r3, r2
 801ad92:	4a0c      	ldr	r2, [pc, #48]	; (801adc4 <RadioSetRxDutyCycle+0x44>)
 801ad94:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801ad96:	2300      	movs	r3, #0
 801ad98:	2200      	movs	r2, #0
 801ad9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ad9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ada2:	f001 fbc7 	bl	801c534 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ada6:	4b07      	ldr	r3, [pc, #28]	; (801adc4 <RadioSetRxDutyCycle+0x44>)
 801ada8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801adac:	2100      	movs	r1, #0
 801adae:	4618      	mov	r0, r3
 801adb0:	f002 f864 	bl	801ce7c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801adb4:	6839      	ldr	r1, [r7, #0]
 801adb6:	6878      	ldr	r0, [r7, #4]
 801adb8:	f001 fa68 	bl	801c28c <SUBGRF_SetRxDutyCycle>
}
 801adbc:	bf00      	nop
 801adbe:	3708      	adds	r7, #8
 801adc0:	46bd      	mov	sp, r7
 801adc2:	bd80      	pop	{r7, pc}
 801adc4:	20001838 	.word	0x20001838

0801adc8 <RadioStartCad>:

static void RadioStartCad( void )
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801adcc:	4b09      	ldr	r3, [pc, #36]	; (801adf4 <RadioStartCad+0x2c>)
 801adce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801add2:	2100      	movs	r1, #0
 801add4:	4618      	mov	r0, r3
 801add6:	f002 f851 	bl	801ce7c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801adda:	2300      	movs	r3, #0
 801addc:	2200      	movs	r2, #0
 801adde:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ade2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801ade6:	f001 fba5 	bl	801c534 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801adea:	f001 fa7b 	bl	801c2e4 <SUBGRF_SetCad>
}
 801adee:	bf00      	nop
 801adf0:	bd80      	pop	{r7, pc}
 801adf2:	bf00      	nop
 801adf4:	20001838 	.word	0x20001838

0801adf8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b084      	sub	sp, #16
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
 801ae00:	460b      	mov	r3, r1
 801ae02:	70fb      	strb	r3, [r7, #3]
 801ae04:	4613      	mov	r3, r2
 801ae06:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801ae08:	883b      	ldrh	r3, [r7, #0]
 801ae0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ae0e:	fb02 f303 	mul.w	r3, r2, r3
 801ae12:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801ae14:	6878      	ldr	r0, [r7, #4]
 801ae16:	f001 fbe9 	bl	801c5ec <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801ae1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae1e:	4618      	mov	r0, r3
 801ae20:	f002 f854 	bl	801cecc <SUBGRF_SetRfTxPower>
 801ae24:	4603      	mov	r3, r0
 801ae26:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ae28:	210e      	movs	r1, #14
 801ae2a:	f640 101f 	movw	r0, #2335	; 0x91f
 801ae2e:	f001 ff31 	bl	801cc94 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801ae32:	7afb      	ldrb	r3, [r7, #11]
 801ae34:	2101      	movs	r1, #1
 801ae36:	4618      	mov	r0, r3
 801ae38:	f002 f820 	bl	801ce7c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801ae3c:	f001 fa60 	bl	801c300 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ae40:	68f9      	ldr	r1, [r7, #12]
 801ae42:	4805      	ldr	r0, [pc, #20]	; (801ae58 <RadioSetTxContinuousWave+0x60>)
 801ae44:	f003 f9b2 	bl	801e1ac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801ae48:	4803      	ldr	r0, [pc, #12]	; (801ae58 <RadioSetTxContinuousWave+0x60>)
 801ae4a:	f003 f8d1 	bl	801dff0 <UTIL_TIMER_Start>
}
 801ae4e:	bf00      	nop
 801ae50:	3710      	adds	r7, #16
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	bf00      	nop
 801ae58:	20001894 	.word	0x20001894

0801ae5c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	4603      	mov	r3, r0
 801ae64:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801ae66:	f001 fe82 	bl	801cb6e <SUBGRF_GetRssiInst>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	b21b      	sxth	r3, r3
}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	3708      	adds	r7, #8
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd80      	pop	{r7, pc}

0801ae76 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801ae76:	b580      	push	{r7, lr}
 801ae78:	b082      	sub	sp, #8
 801ae7a:	af00      	add	r7, sp, #0
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	460a      	mov	r2, r1
 801ae80:	80fb      	strh	r3, [r7, #6]
 801ae82:	4613      	mov	r3, r2
 801ae84:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801ae86:	797a      	ldrb	r2, [r7, #5]
 801ae88:	88fb      	ldrh	r3, [r7, #6]
 801ae8a:	4611      	mov	r1, r2
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f001 ff01 	bl	801cc94 <SUBGRF_WriteRegister>
}
 801ae92:	bf00      	nop
 801ae94:	3708      	adds	r7, #8
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}

0801ae9a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801ae9a:	b580      	push	{r7, lr}
 801ae9c:	b082      	sub	sp, #8
 801ae9e:	af00      	add	r7, sp, #0
 801aea0:	4603      	mov	r3, r0
 801aea2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801aea4:	88fb      	ldrh	r3, [r7, #6]
 801aea6:	4618      	mov	r0, r3
 801aea8:	f001 ff08 	bl	801ccbc <SUBGRF_ReadRegister>
 801aeac:	4603      	mov	r3, r0
}
 801aeae:	4618      	mov	r0, r3
 801aeb0:	3708      	adds	r7, #8
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}

0801aeb6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801aeb6:	b580      	push	{r7, lr}
 801aeb8:	b082      	sub	sp, #8
 801aeba:	af00      	add	r7, sp, #0
 801aebc:	4603      	mov	r3, r0
 801aebe:	6039      	str	r1, [r7, #0]
 801aec0:	80fb      	strh	r3, [r7, #6]
 801aec2:	4613      	mov	r3, r2
 801aec4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801aec6:	797b      	ldrb	r3, [r7, #5]
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	88fb      	ldrh	r3, [r7, #6]
 801aecc:	6839      	ldr	r1, [r7, #0]
 801aece:	4618      	mov	r0, r3
 801aed0:	f001 ff08 	bl	801cce4 <SUBGRF_WriteRegisters>
}
 801aed4:	bf00      	nop
 801aed6:	3708      	adds	r7, #8
 801aed8:	46bd      	mov	sp, r7
 801aeda:	bd80      	pop	{r7, pc}

0801aedc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	4603      	mov	r3, r0
 801aee4:	6039      	str	r1, [r7, #0]
 801aee6:	80fb      	strh	r3, [r7, #6]
 801aee8:	4613      	mov	r3, r2
 801aeea:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801aeec:	797b      	ldrb	r3, [r7, #5]
 801aeee:	b29a      	uxth	r2, r3
 801aef0:	88fb      	ldrh	r3, [r7, #6]
 801aef2:	6839      	ldr	r1, [r7, #0]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f001 ff17 	bl	801cd28 <SUBGRF_ReadRegisters>
}
 801aefa:	bf00      	nop
 801aefc:	3708      	adds	r7, #8
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}
	...

0801af04 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	4603      	mov	r3, r0
 801af0c:	460a      	mov	r2, r1
 801af0e:	71fb      	strb	r3, [r7, #7]
 801af10:	4613      	mov	r3, r2
 801af12:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801af14:	79fb      	ldrb	r3, [r7, #7]
 801af16:	2b01      	cmp	r3, #1
 801af18:	d10a      	bne.n	801af30 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801af1a:	4a0e      	ldr	r2, [pc, #56]	; (801af54 <RadioSetMaxPayloadLength+0x50>)
 801af1c:	79bb      	ldrb	r3, [r7, #6]
 801af1e:	7013      	strb	r3, [r2, #0]
 801af20:	4b0c      	ldr	r3, [pc, #48]	; (801af54 <RadioSetMaxPayloadLength+0x50>)
 801af22:	781a      	ldrb	r2, [r3, #0]
 801af24:	4b0c      	ldr	r3, [pc, #48]	; (801af58 <RadioSetMaxPayloadLength+0x54>)
 801af26:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801af28:	480c      	ldr	r0, [pc, #48]	; (801af5c <RadioSetMaxPayloadLength+0x58>)
 801af2a:	f001 fd6b 	bl	801ca04 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801af2e:	e00d      	b.n	801af4c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801af30:	4b09      	ldr	r3, [pc, #36]	; (801af58 <RadioSetMaxPayloadLength+0x54>)
 801af32:	7d5b      	ldrb	r3, [r3, #21]
 801af34:	2b01      	cmp	r3, #1
 801af36:	d109      	bne.n	801af4c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801af38:	4a06      	ldr	r2, [pc, #24]	; (801af54 <RadioSetMaxPayloadLength+0x50>)
 801af3a:	79bb      	ldrb	r3, [r7, #6]
 801af3c:	7013      	strb	r3, [r2, #0]
 801af3e:	4b05      	ldr	r3, [pc, #20]	; (801af54 <RadioSetMaxPayloadLength+0x50>)
 801af40:	781a      	ldrb	r2, [r3, #0]
 801af42:	4b05      	ldr	r3, [pc, #20]	; (801af58 <RadioSetMaxPayloadLength+0x54>)
 801af44:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801af46:	4805      	ldr	r0, [pc, #20]	; (801af5c <RadioSetMaxPayloadLength+0x58>)
 801af48:	f001 fd5c 	bl	801ca04 <SUBGRF_SetPacketParams>
}
 801af4c:	bf00      	nop
 801af4e:	3708      	adds	r7, #8
 801af50:	46bd      	mov	sp, r7
 801af52:	bd80      	pop	{r7, pc}
 801af54:	20000154 	.word	0x20000154
 801af58:	20001838 	.word	0x20001838
 801af5c:	20001846 	.word	0x20001846

0801af60 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801af60:	b580      	push	{r7, lr}
 801af62:	b082      	sub	sp, #8
 801af64:	af00      	add	r7, sp, #0
 801af66:	4603      	mov	r3, r0
 801af68:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801af6a:	4a13      	ldr	r2, [pc, #76]	; (801afb8 <RadioSetPublicNetwork+0x58>)
 801af6c:	79fb      	ldrb	r3, [r7, #7]
 801af6e:	7313      	strb	r3, [r2, #12]
 801af70:	4b11      	ldr	r3, [pc, #68]	; (801afb8 <RadioSetPublicNetwork+0x58>)
 801af72:	7b1a      	ldrb	r2, [r3, #12]
 801af74:	4b10      	ldr	r3, [pc, #64]	; (801afb8 <RadioSetPublicNetwork+0x58>)
 801af76:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801af78:	2001      	movs	r0, #1
 801af7a:	f7ff f811 	bl	8019fa0 <RadioSetModem>
    if( enable == true )
 801af7e:	79fb      	ldrb	r3, [r7, #7]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d00a      	beq.n	801af9a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801af84:	2134      	movs	r1, #52	; 0x34
 801af86:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801af8a:	f001 fe83 	bl	801cc94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801af8e:	2144      	movs	r1, #68	; 0x44
 801af90:	f240 7041 	movw	r0, #1857	; 0x741
 801af94:	f001 fe7e 	bl	801cc94 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801af98:	e009      	b.n	801afae <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801af9a:	2114      	movs	r1, #20
 801af9c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801afa0:	f001 fe78 	bl	801cc94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801afa4:	2124      	movs	r1, #36	; 0x24
 801afa6:	f240 7041 	movw	r0, #1857	; 0x741
 801afaa:	f001 fe73 	bl	801cc94 <SUBGRF_WriteRegister>
}
 801afae:	bf00      	nop
 801afb0:	3708      	adds	r7, #8
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bd80      	pop	{r7, pc}
 801afb6:	bf00      	nop
 801afb8:	20001838 	.word	0x20001838

0801afbc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801afc0:	f001 ffb8 	bl	801cf34 <SUBGRF_GetRadioWakeUpTime>
 801afc4:	4603      	mov	r3, r0
 801afc6:	3303      	adds	r3, #3
}
 801afc8:	4618      	mov	r0, r3
 801afca:	bd80      	pop	{r7, pc}

0801afcc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801afd4:	f000 f80e 	bl	801aff4 <RadioOnTxTimeoutProcess>
}
 801afd8:	bf00      	nop
 801afda:	3708      	adds	r7, #8
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}

0801afe0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b082      	sub	sp, #8
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801afe8:	f000 f818 	bl	801b01c <RadioOnRxTimeoutProcess>
}
 801afec:	bf00      	nop
 801afee:	3708      	adds	r7, #8
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}

0801aff4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aff8:	4b07      	ldr	r3, [pc, #28]	; (801b018 <RadioOnTxTimeoutProcess+0x24>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d008      	beq.n	801b012 <RadioOnTxTimeoutProcess+0x1e>
 801b000:	4b05      	ldr	r3, [pc, #20]	; (801b018 <RadioOnTxTimeoutProcess+0x24>)
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	685b      	ldr	r3, [r3, #4]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d003      	beq.n	801b012 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b00a:	4b03      	ldr	r3, [pc, #12]	; (801b018 <RadioOnTxTimeoutProcess+0x24>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	685b      	ldr	r3, [r3, #4]
 801b010:	4798      	blx	r3
    }
}
 801b012:	bf00      	nop
 801b014:	bd80      	pop	{r7, pc}
 801b016:	bf00      	nop
 801b018:	20001834 	.word	0x20001834

0801b01c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b020:	4b07      	ldr	r3, [pc, #28]	; (801b040 <RadioOnRxTimeoutProcess+0x24>)
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d008      	beq.n	801b03a <RadioOnRxTimeoutProcess+0x1e>
 801b028:	4b05      	ldr	r3, [pc, #20]	; (801b040 <RadioOnRxTimeoutProcess+0x24>)
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	68db      	ldr	r3, [r3, #12]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d003      	beq.n	801b03a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b032:	4b03      	ldr	r3, [pc, #12]	; (801b040 <RadioOnRxTimeoutProcess+0x24>)
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	68db      	ldr	r3, [r3, #12]
 801b038:	4798      	blx	r3
    }
}
 801b03a:	bf00      	nop
 801b03c:	bd80      	pop	{r7, pc}
 801b03e:	bf00      	nop
 801b040:	20001834 	.word	0x20001834

0801b044 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b044:	b580      	push	{r7, lr}
 801b046:	b082      	sub	sp, #8
 801b048:	af00      	add	r7, sp, #0
 801b04a:	4603      	mov	r3, r0
 801b04c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b04e:	4a05      	ldr	r2, [pc, #20]	; (801b064 <RadioOnDioIrq+0x20>)
 801b050:	88fb      	ldrh	r3, [r7, #6]
 801b052:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b056:	f000 f807 	bl	801b068 <RadioIrqProcess>
}
 801b05a:	bf00      	nop
 801b05c:	3708      	adds	r7, #8
 801b05e:	46bd      	mov	sp, r7
 801b060:	bd80      	pop	{r7, pc}
 801b062:	bf00      	nop
 801b064:	20001838 	.word	0x20001838

0801b068 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b068:	b5b0      	push	{r4, r5, r7, lr}
 801b06a:	b082      	sub	sp, #8
 801b06c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b06e:	2300      	movs	r3, #0
 801b070:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b072:	2300      	movs	r3, #0
 801b074:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b076:	4ba8      	ldr	r3, [pc, #672]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b078:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b080:	f000 810d 	beq.w	801b29e <RadioIrqProcess+0x236>
 801b084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b088:	f300 81e8 	bgt.w	801b45c <RadioIrqProcess+0x3f4>
 801b08c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b090:	f000 80f1 	beq.w	801b276 <RadioIrqProcess+0x20e>
 801b094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b098:	f300 81e0 	bgt.w	801b45c <RadioIrqProcess+0x3f4>
 801b09c:	2b80      	cmp	r3, #128	; 0x80
 801b09e:	f000 80d6 	beq.w	801b24e <RadioIrqProcess+0x1e6>
 801b0a2:	2b80      	cmp	r3, #128	; 0x80
 801b0a4:	f300 81da 	bgt.w	801b45c <RadioIrqProcess+0x3f4>
 801b0a8:	2b20      	cmp	r3, #32
 801b0aa:	dc49      	bgt.n	801b140 <RadioIrqProcess+0xd8>
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	f340 81d5 	ble.w	801b45c <RadioIrqProcess+0x3f4>
 801b0b2:	3b01      	subs	r3, #1
 801b0b4:	2b1f      	cmp	r3, #31
 801b0b6:	f200 81d1 	bhi.w	801b45c <RadioIrqProcess+0x3f4>
 801b0ba:	a201      	add	r2, pc, #4	; (adr r2, 801b0c0 <RadioIrqProcess+0x58>)
 801b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0c0:	0801b149 	.word	0x0801b149
 801b0c4:	0801b183 	.word	0x0801b183
 801b0c8:	0801b45d 	.word	0x0801b45d
 801b0cc:	0801b339 	.word	0x0801b339
 801b0d0:	0801b45d 	.word	0x0801b45d
 801b0d4:	0801b45d 	.word	0x0801b45d
 801b0d8:	0801b45d 	.word	0x0801b45d
 801b0dc:	0801b3b5 	.word	0x0801b3b5
 801b0e0:	0801b45d 	.word	0x0801b45d
 801b0e4:	0801b45d 	.word	0x0801b45d
 801b0e8:	0801b45d 	.word	0x0801b45d
 801b0ec:	0801b45d 	.word	0x0801b45d
 801b0f0:	0801b45d 	.word	0x0801b45d
 801b0f4:	0801b45d 	.word	0x0801b45d
 801b0f8:	0801b45d 	.word	0x0801b45d
 801b0fc:	0801b3d1 	.word	0x0801b3d1
 801b100:	0801b45d 	.word	0x0801b45d
 801b104:	0801b45d 	.word	0x0801b45d
 801b108:	0801b45d 	.word	0x0801b45d
 801b10c:	0801b45d 	.word	0x0801b45d
 801b110:	0801b45d 	.word	0x0801b45d
 801b114:	0801b45d 	.word	0x0801b45d
 801b118:	0801b45d 	.word	0x0801b45d
 801b11c:	0801b45d 	.word	0x0801b45d
 801b120:	0801b45d 	.word	0x0801b45d
 801b124:	0801b45d 	.word	0x0801b45d
 801b128:	0801b45d 	.word	0x0801b45d
 801b12c:	0801b45d 	.word	0x0801b45d
 801b130:	0801b45d 	.word	0x0801b45d
 801b134:	0801b45d 	.word	0x0801b45d
 801b138:	0801b45d 	.word	0x0801b45d
 801b13c:	0801b3df 	.word	0x0801b3df
 801b140:	2b40      	cmp	r3, #64	; 0x40
 801b142:	f000 816d 	beq.w	801b420 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b146:	e189      	b.n	801b45c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b148:	4874      	ldr	r0, [pc, #464]	; (801b31c <RadioIrqProcess+0x2b4>)
 801b14a:	f002 ffbf 	bl	801e0cc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b14e:	2000      	movs	r0, #0
 801b150:	f001 f81c 	bl	801c18c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b154:	f002 f892 	bl	801d27c <RFW_Is_LongPacketModeEnabled>
 801b158:	4603      	mov	r3, r0
 801b15a:	2b01      	cmp	r3, #1
 801b15c:	d101      	bne.n	801b162 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b15e:	f002 f8b6 	bl	801d2ce <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b162:	4b6f      	ldr	r3, [pc, #444]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	2b00      	cmp	r3, #0
 801b168:	f000 817a 	beq.w	801b460 <RadioIrqProcess+0x3f8>
 801b16c:	4b6c      	ldr	r3, [pc, #432]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	2b00      	cmp	r3, #0
 801b174:	f000 8174 	beq.w	801b460 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b178:	4b69      	ldr	r3, [pc, #420]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	4798      	blx	r3
        break;
 801b180:	e16e      	b.n	801b460 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b182:	4868      	ldr	r0, [pc, #416]	; (801b324 <RadioIrqProcess+0x2bc>)
 801b184:	f002 ffa2 	bl	801e0cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b188:	4b63      	ldr	r3, [pc, #396]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b18a:	785b      	ldrb	r3, [r3, #1]
 801b18c:	f083 0301 	eor.w	r3, r3, #1
 801b190:	b2db      	uxtb	r3, r3
 801b192:	2b00      	cmp	r3, #0
 801b194:	d014      	beq.n	801b1c0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b196:	2000      	movs	r0, #0
 801b198:	f000 fff8 	bl	801c18c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b19c:	2100      	movs	r1, #0
 801b19e:	f640 1002 	movw	r0, #2306	; 0x902
 801b1a2:	f001 fd77 	bl	801cc94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b1a6:	f640 1044 	movw	r0, #2372	; 0x944
 801b1aa:	f001 fd87 	bl	801ccbc <SUBGRF_ReadRegister>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	f043 0302 	orr.w	r3, r3, #2
 801b1b4:	b2db      	uxtb	r3, r3
 801b1b6:	4619      	mov	r1, r3
 801b1b8:	f640 1044 	movw	r0, #2372	; 0x944
 801b1bc:	f001 fd6a 	bl	801cc94 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b1c0:	1dfb      	adds	r3, r7, #7
 801b1c2:	22ff      	movs	r2, #255	; 0xff
 801b1c4:	4619      	mov	r1, r3
 801b1c6:	4858      	ldr	r0, [pc, #352]	; (801b328 <RadioIrqProcess+0x2c0>)
 801b1c8:	f000 feb0 	bl	801bf2c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b1cc:	4857      	ldr	r0, [pc, #348]	; (801b32c <RadioIrqProcess+0x2c4>)
 801b1ce:	f001 fd0f 	bl	801cbf0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b1d2:	4b53      	ldr	r3, [pc, #332]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	f000 8144 	beq.w	801b464 <RadioIrqProcess+0x3fc>
 801b1dc:	4b50      	ldr	r3, [pc, #320]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	689b      	ldr	r3, [r3, #8]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	f000 813e 	beq.w	801b464 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b1e8:	4b4b      	ldr	r3, [pc, #300]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b1ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b1ee:	2b01      	cmp	r3, #1
 801b1f0:	d10e      	bne.n	801b210 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b1f2:	4b4b      	ldr	r3, [pc, #300]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	689c      	ldr	r4, [r3, #8]
 801b1f8:	79fb      	ldrb	r3, [r7, #7]
 801b1fa:	b299      	uxth	r1, r3
 801b1fc:	4b46      	ldr	r3, [pc, #280]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b1fe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b202:	b21a      	sxth	r2, r3
 801b204:	4b44      	ldr	r3, [pc, #272]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b206:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b20a:	4847      	ldr	r0, [pc, #284]	; (801b328 <RadioIrqProcess+0x2c0>)
 801b20c:	47a0      	blx	r4
                break;
 801b20e:	e01d      	b.n	801b24c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b210:	4b41      	ldr	r3, [pc, #260]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b214:	463a      	mov	r2, r7
 801b216:	4611      	mov	r1, r2
 801b218:	4618      	mov	r0, r3
 801b21a:	f001 ff7d 	bl	801d118 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b21e:	4b40      	ldr	r3, [pc, #256]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	689c      	ldr	r4, [r3, #8]
 801b224:	79fb      	ldrb	r3, [r7, #7]
 801b226:	b299      	uxth	r1, r3
 801b228:	4b3b      	ldr	r3, [pc, #236]	; (801b318 <RadioIrqProcess+0x2b0>)
 801b22a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b22e:	b218      	sxth	r0, r3
 801b230:	683b      	ldr	r3, [r7, #0]
 801b232:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b236:	4a3e      	ldr	r2, [pc, #248]	; (801b330 <RadioIrqProcess+0x2c8>)
 801b238:	fb82 5203 	smull	r5, r2, r2, r3
 801b23c:	1192      	asrs	r2, r2, #6
 801b23e:	17db      	asrs	r3, r3, #31
 801b240:	1ad3      	subs	r3, r2, r3
 801b242:	b25b      	sxtb	r3, r3
 801b244:	4602      	mov	r2, r0
 801b246:	4838      	ldr	r0, [pc, #224]	; (801b328 <RadioIrqProcess+0x2c0>)
 801b248:	47a0      	blx	r4
                break;
 801b24a:	bf00      	nop
        break;
 801b24c:	e10a      	b.n	801b464 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b24e:	2000      	movs	r0, #0
 801b250:	f000 ff9c 	bl	801c18c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b254:	4b32      	ldr	r3, [pc, #200]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	f000 8105 	beq.w	801b468 <RadioIrqProcess+0x400>
 801b25e:	4b30      	ldr	r3, [pc, #192]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	699b      	ldr	r3, [r3, #24]
 801b264:	2b00      	cmp	r3, #0
 801b266:	f000 80ff 	beq.w	801b468 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b26a:	4b2d      	ldr	r3, [pc, #180]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	699b      	ldr	r3, [r3, #24]
 801b270:	2000      	movs	r0, #0
 801b272:	4798      	blx	r3
        break;
 801b274:	e0f8      	b.n	801b468 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b276:	2000      	movs	r0, #0
 801b278:	f000 ff88 	bl	801c18c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b27c:	4b28      	ldr	r3, [pc, #160]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	2b00      	cmp	r3, #0
 801b282:	f000 80f3 	beq.w	801b46c <RadioIrqProcess+0x404>
 801b286:	4b26      	ldr	r3, [pc, #152]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	699b      	ldr	r3, [r3, #24]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	f000 80ed 	beq.w	801b46c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b292:	4b23      	ldr	r3, [pc, #140]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	699b      	ldr	r3, [r3, #24]
 801b298:	2001      	movs	r0, #1
 801b29a:	4798      	blx	r3
        break;
 801b29c:	e0e6      	b.n	801b46c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b29e:	4b25      	ldr	r3, [pc, #148]	; (801b334 <RadioIrqProcess+0x2cc>)
 801b2a0:	2201      	movs	r2, #1
 801b2a2:	2100      	movs	r1, #0
 801b2a4:	2002      	movs	r0, #2
 801b2a6:	f003 f91b 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b2aa:	f000 fe25 	bl	801bef8 <SUBGRF_GetOperatingMode>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	2b04      	cmp	r3, #4
 801b2b2:	d115      	bne.n	801b2e0 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b2b4:	4819      	ldr	r0, [pc, #100]	; (801b31c <RadioIrqProcess+0x2b4>)
 801b2b6:	f002 ff09 	bl	801e0cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b2ba:	2000      	movs	r0, #0
 801b2bc:	f000 ff66 	bl	801c18c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b2c0:	4b17      	ldr	r3, [pc, #92]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	f000 80d3 	beq.w	801b470 <RadioIrqProcess+0x408>
 801b2ca:	4b15      	ldr	r3, [pc, #84]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	685b      	ldr	r3, [r3, #4]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	f000 80cd 	beq.w	801b470 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b2d6:	4b12      	ldr	r3, [pc, #72]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	4798      	blx	r3
        break;
 801b2de:	e0c7      	b.n	801b470 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b2e0:	f000 fe0a 	bl	801bef8 <SUBGRF_GetOperatingMode>
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	2b05      	cmp	r3, #5
 801b2e8:	f040 80c2 	bne.w	801b470 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b2ec:	480d      	ldr	r0, [pc, #52]	; (801b324 <RadioIrqProcess+0x2bc>)
 801b2ee:	f002 feed 	bl	801e0cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b2f2:	2000      	movs	r0, #0
 801b2f4:	f000 ff4a 	bl	801c18c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b2f8:	4b09      	ldr	r3, [pc, #36]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	f000 80b7 	beq.w	801b470 <RadioIrqProcess+0x408>
 801b302:	4b07      	ldr	r3, [pc, #28]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	68db      	ldr	r3, [r3, #12]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f000 80b1 	beq.w	801b470 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b30e:	4b04      	ldr	r3, [pc, #16]	; (801b320 <RadioIrqProcess+0x2b8>)
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	68db      	ldr	r3, [r3, #12]
 801b314:	4798      	blx	r3
        break;
 801b316:	e0ab      	b.n	801b470 <RadioIrqProcess+0x408>
 801b318:	20001838 	.word	0x20001838
 801b31c:	20001894 	.word	0x20001894
 801b320:	20001834 	.word	0x20001834
 801b324:	200018ac 	.word	0x200018ac
 801b328:	20001734 	.word	0x20001734
 801b32c:	2000185c 	.word	0x2000185c
 801b330:	10624dd3 	.word	0x10624dd3
 801b334:	0801f3d0 	.word	0x0801f3d0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b338:	4b54      	ldr	r3, [pc, #336]	; (801b48c <RadioIrqProcess+0x424>)
 801b33a:	2201      	movs	r2, #1
 801b33c:	2100      	movs	r1, #0
 801b33e:	2002      	movs	r0, #2
 801b340:	f003 f8ce 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b344:	4b52      	ldr	r3, [pc, #328]	; (801b490 <RadioIrqProcess+0x428>)
 801b346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b348:	2b00      	cmp	r3, #0
 801b34a:	f000 8093 	beq.w	801b474 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b34e:	4a51      	ldr	r2, [pc, #324]	; (801b494 <RadioIrqProcess+0x42c>)
 801b350:	4b4f      	ldr	r3, [pc, #316]	; (801b490 <RadioIrqProcess+0x428>)
 801b352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b354:	0c1b      	lsrs	r3, r3, #16
 801b356:	b2db      	uxtb	r3, r3
 801b358:	4619      	mov	r1, r3
 801b35a:	f640 1003 	movw	r0, #2307	; 0x903
 801b35e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b360:	4a4c      	ldr	r2, [pc, #304]	; (801b494 <RadioIrqProcess+0x42c>)
 801b362:	4b4b      	ldr	r3, [pc, #300]	; (801b490 <RadioIrqProcess+0x428>)
 801b364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b366:	0a1b      	lsrs	r3, r3, #8
 801b368:	b2db      	uxtb	r3, r3
 801b36a:	4619      	mov	r1, r3
 801b36c:	f640 1004 	movw	r0, #2308	; 0x904
 801b370:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b372:	4a48      	ldr	r2, [pc, #288]	; (801b494 <RadioIrqProcess+0x42c>)
 801b374:	4b46      	ldr	r3, [pc, #280]	; (801b490 <RadioIrqProcess+0x428>)
 801b376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	4619      	mov	r1, r3
 801b37c:	f640 1005 	movw	r0, #2309	; 0x905
 801b380:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b382:	4c44      	ldr	r4, [pc, #272]	; (801b494 <RadioIrqProcess+0x42c>)
 801b384:	4b44      	ldr	r3, [pc, #272]	; (801b498 <RadioIrqProcess+0x430>)
 801b386:	f640 1002 	movw	r0, #2306	; 0x902
 801b38a:	4798      	blx	r3
 801b38c:	4603      	mov	r3, r0
 801b38e:	f043 0301 	orr.w	r3, r3, #1
 801b392:	b2db      	uxtb	r3, r3
 801b394:	4619      	mov	r1, r3
 801b396:	f640 1002 	movw	r0, #2306	; 0x902
 801b39a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b39c:	4b3c      	ldr	r3, [pc, #240]	; (801b490 <RadioIrqProcess+0x428>)
 801b39e:	2200      	movs	r2, #0
 801b3a0:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	f240 2162 	movw	r1, #610	; 0x262
 801b3aa:	f240 2062 	movw	r0, #610	; 0x262
 801b3ae:	f001 f8c1 	bl	801c534 <SUBGRF_SetDioIrqParams>
        break;
 801b3b2:	e05f      	b.n	801b474 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b3b4:	4b39      	ldr	r3, [pc, #228]	; (801b49c <RadioIrqProcess+0x434>)
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	2100      	movs	r1, #0
 801b3ba:	2002      	movs	r0, #2
 801b3bc:	f003 f890 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b3c0:	f001 ff55 	bl	801d26e <RFW_Is_Init>
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	2b01      	cmp	r3, #1
 801b3c8:	d156      	bne.n	801b478 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b3ca:	f001 ff86 	bl	801d2da <RFW_ReceivePayload>
        break;
 801b3ce:	e053      	b.n	801b478 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b3d0:	4b33      	ldr	r3, [pc, #204]	; (801b4a0 <RadioIrqProcess+0x438>)
 801b3d2:	2201      	movs	r2, #1
 801b3d4:	2100      	movs	r1, #0
 801b3d6:	2002      	movs	r0, #2
 801b3d8:	f003 f882 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b3dc:	e051      	b.n	801b482 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b3de:	4831      	ldr	r0, [pc, #196]	; (801b4a4 <RadioIrqProcess+0x43c>)
 801b3e0:	f002 fe74 	bl	801e0cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b3e4:	4b2a      	ldr	r3, [pc, #168]	; (801b490 <RadioIrqProcess+0x428>)
 801b3e6:	785b      	ldrb	r3, [r3, #1]
 801b3e8:	f083 0301 	eor.w	r3, r3, #1
 801b3ec:	b2db      	uxtb	r3, r3
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d002      	beq.n	801b3f8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b3f2:	2000      	movs	r0, #0
 801b3f4:	f000 feca 	bl	801c18c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b3f8:	4b2b      	ldr	r3, [pc, #172]	; (801b4a8 <RadioIrqProcess+0x440>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d03d      	beq.n	801b47c <RadioIrqProcess+0x414>
 801b400:	4b29      	ldr	r3, [pc, #164]	; (801b4a8 <RadioIrqProcess+0x440>)
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d038      	beq.n	801b47c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b40a:	4b27      	ldr	r3, [pc, #156]	; (801b4a8 <RadioIrqProcess+0x440>)
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	68db      	ldr	r3, [r3, #12]
 801b410:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b412:	4b26      	ldr	r3, [pc, #152]	; (801b4ac <RadioIrqProcess+0x444>)
 801b414:	2201      	movs	r2, #1
 801b416:	2100      	movs	r1, #0
 801b418:	2002      	movs	r0, #2
 801b41a:	f003 f861 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b41e:	e02d      	b.n	801b47c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b420:	4b23      	ldr	r3, [pc, #140]	; (801b4b0 <RadioIrqProcess+0x448>)
 801b422:	2201      	movs	r2, #1
 801b424:	2100      	movs	r1, #0
 801b426:	2002      	movs	r0, #2
 801b428:	f003 f85a 	bl	801e4e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b42c:	4b18      	ldr	r3, [pc, #96]	; (801b490 <RadioIrqProcess+0x428>)
 801b42e:	785b      	ldrb	r3, [r3, #1]
 801b430:	f083 0301 	eor.w	r3, r3, #1
 801b434:	b2db      	uxtb	r3, r3
 801b436:	2b00      	cmp	r3, #0
 801b438:	d002      	beq.n	801b440 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b43a:	2000      	movs	r0, #0
 801b43c:	f000 fea6 	bl	801c18c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b440:	4b19      	ldr	r3, [pc, #100]	; (801b4a8 <RadioIrqProcess+0x440>)
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	2b00      	cmp	r3, #0
 801b446:	d01b      	beq.n	801b480 <RadioIrqProcess+0x418>
 801b448:	4b17      	ldr	r3, [pc, #92]	; (801b4a8 <RadioIrqProcess+0x440>)
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	691b      	ldr	r3, [r3, #16]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d016      	beq.n	801b480 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b452:	4b15      	ldr	r3, [pc, #84]	; (801b4a8 <RadioIrqProcess+0x440>)
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	691b      	ldr	r3, [r3, #16]
 801b458:	4798      	blx	r3
        break;
 801b45a:	e011      	b.n	801b480 <RadioIrqProcess+0x418>
        break;
 801b45c:	bf00      	nop
 801b45e:	e010      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b460:	bf00      	nop
 801b462:	e00e      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b464:	bf00      	nop
 801b466:	e00c      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b468:	bf00      	nop
 801b46a:	e00a      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b46c:	bf00      	nop
 801b46e:	e008      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b470:	bf00      	nop
 801b472:	e006      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b474:	bf00      	nop
 801b476:	e004      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b478:	bf00      	nop
 801b47a:	e002      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b47c:	bf00      	nop
 801b47e:	e000      	b.n	801b482 <RadioIrqProcess+0x41a>
        break;
 801b480:	bf00      	nop
    }
}
 801b482:	bf00      	nop
 801b484:	3708      	adds	r7, #8
 801b486:	46bd      	mov	sp, r7
 801b488:	bdb0      	pop	{r4, r5, r7, pc}
 801b48a:	bf00      	nop
 801b48c:	0801f3e4 	.word	0x0801f3e4
 801b490:	20001838 	.word	0x20001838
 801b494:	0801ae77 	.word	0x0801ae77
 801b498:	0801ae9b 	.word	0x0801ae9b
 801b49c:	0801f3f0 	.word	0x0801f3f0
 801b4a0:	0801f3fc 	.word	0x0801f3fc
 801b4a4:	200018ac 	.word	0x200018ac
 801b4a8:	20001834 	.word	0x20001834
 801b4ac:	0801f408 	.word	0x0801f408
 801b4b0:	0801f414 	.word	0x0801f414

0801b4b4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b4b8:	4b09      	ldr	r3, [pc, #36]	; (801b4e0 <RadioTxPrbs+0x2c>)
 801b4ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b4be:	2101      	movs	r1, #1
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	f001 fcdb 	bl	801ce7c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b4c6:	4b07      	ldr	r3, [pc, #28]	; (801b4e4 <RadioTxPrbs+0x30>)
 801b4c8:	212d      	movs	r1, #45	; 0x2d
 801b4ca:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b4ce:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b4d0:	f000 ff1f 	bl	801c312 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b4d4:	4804      	ldr	r0, [pc, #16]	; (801b4e8 <RadioTxPrbs+0x34>)
 801b4d6:	f000 fe75 	bl	801c1c4 <SUBGRF_SetTx>
}
 801b4da:	bf00      	nop
 801b4dc:	bd80      	pop	{r7, pc}
 801b4de:	bf00      	nop
 801b4e0:	20001838 	.word	0x20001838
 801b4e4:	0801ae77 	.word	0x0801ae77
 801b4e8:	000fffff 	.word	0x000fffff

0801b4ec <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b084      	sub	sp, #16
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b4f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	f001 fce6 	bl	801cecc <SUBGRF_SetRfTxPower>
 801b500:	4603      	mov	r3, r0
 801b502:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b504:	210e      	movs	r1, #14
 801b506:	f640 101f 	movw	r0, #2335	; 0x91f
 801b50a:	f001 fbc3 	bl	801cc94 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b50e:	7bfb      	ldrb	r3, [r7, #15]
 801b510:	2101      	movs	r1, #1
 801b512:	4618      	mov	r0, r3
 801b514:	f001 fcb2 	bl	801ce7c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b518:	f000 fef2 	bl	801c300 <SUBGRF_SetTxContinuousWave>
}
 801b51c:	bf00      	nop
 801b51e:	3710      	adds	r7, #16
 801b520:	46bd      	mov	sp, r7
 801b522:	bd80      	pop	{r7, pc}

0801b524 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b524:	b480      	push	{r7}
 801b526:	b089      	sub	sp, #36	; 0x24
 801b528:	af00      	add	r7, sp, #0
 801b52a:	60f8      	str	r0, [r7, #12]
 801b52c:	60b9      	str	r1, [r7, #8]
 801b52e:	4613      	mov	r3, r2
 801b530:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b532:	2300      	movs	r3, #0
 801b534:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b536:	2300      	movs	r3, #0
 801b538:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b53a:	2300      	movs	r3, #0
 801b53c:	61bb      	str	r3, [r7, #24]
 801b53e:	e011      	b.n	801b564 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b540:	69bb      	ldr	r3, [r7, #24]
 801b542:	68ba      	ldr	r2, [r7, #8]
 801b544:	4413      	add	r3, r2
 801b546:	781a      	ldrb	r2, [r3, #0]
 801b548:	69bb      	ldr	r3, [r7, #24]
 801b54a:	68b9      	ldr	r1, [r7, #8]
 801b54c:	440b      	add	r3, r1
 801b54e:	43d2      	mvns	r2, r2
 801b550:	b2d2      	uxtb	r2, r2
 801b552:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b554:	69bb      	ldr	r3, [r7, #24]
 801b556:	68fa      	ldr	r2, [r7, #12]
 801b558:	4413      	add	r3, r2
 801b55a:	2200      	movs	r2, #0
 801b55c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b55e:	69bb      	ldr	r3, [r7, #24]
 801b560:	3301      	adds	r3, #1
 801b562:	61bb      	str	r3, [r7, #24]
 801b564:	79fb      	ldrb	r3, [r7, #7]
 801b566:	69ba      	ldr	r2, [r7, #24]
 801b568:	429a      	cmp	r2, r3
 801b56a:	dbe9      	blt.n	801b540 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b56c:	2300      	movs	r3, #0
 801b56e:	61bb      	str	r3, [r7, #24]
 801b570:	e049      	b.n	801b606 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b572:	69bb      	ldr	r3, [r7, #24]
 801b574:	425a      	negs	r2, r3
 801b576:	f003 0307 	and.w	r3, r3, #7
 801b57a:	f002 0207 	and.w	r2, r2, #7
 801b57e:	bf58      	it	pl
 801b580:	4253      	negpl	r3, r2
 801b582:	b2db      	uxtb	r3, r3
 801b584:	f1c3 0307 	rsb	r3, r3, #7
 801b588:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b58a:	69bb      	ldr	r3, [r7, #24]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	da00      	bge.n	801b592 <payload_integration+0x6e>
 801b590:	3307      	adds	r3, #7
 801b592:	10db      	asrs	r3, r3, #3
 801b594:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b596:	69bb      	ldr	r3, [r7, #24]
 801b598:	3301      	adds	r3, #1
 801b59a:	425a      	negs	r2, r3
 801b59c:	f003 0307 	and.w	r3, r3, #7
 801b5a0:	f002 0207 	and.w	r2, r2, #7
 801b5a4:	bf58      	it	pl
 801b5a6:	4253      	negpl	r3, r2
 801b5a8:	b2db      	uxtb	r3, r3
 801b5aa:	f1c3 0307 	rsb	r3, r3, #7
 801b5ae:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b5b0:	69bb      	ldr	r3, [r7, #24]
 801b5b2:	3301      	adds	r3, #1
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	da00      	bge.n	801b5ba <payload_integration+0x96>
 801b5b8:	3307      	adds	r3, #7
 801b5ba:	10db      	asrs	r3, r3, #3
 801b5bc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b5be:	7dbb      	ldrb	r3, [r7, #22]
 801b5c0:	68ba      	ldr	r2, [r7, #8]
 801b5c2:	4413      	add	r3, r2
 801b5c4:	781b      	ldrb	r3, [r3, #0]
 801b5c6:	461a      	mov	r2, r3
 801b5c8:	7dfb      	ldrb	r3, [r7, #23]
 801b5ca:	fa42 f303 	asr.w	r3, r2, r3
 801b5ce:	b2db      	uxtb	r3, r3
 801b5d0:	f003 0301 	and.w	r3, r3, #1
 801b5d4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b5d6:	7ffa      	ldrb	r2, [r7, #31]
 801b5d8:	7cfb      	ldrb	r3, [r7, #19]
 801b5da:	4053      	eors	r3, r2
 801b5dc:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b5de:	7d3b      	ldrb	r3, [r7, #20]
 801b5e0:	68fa      	ldr	r2, [r7, #12]
 801b5e2:	4413      	add	r3, r2
 801b5e4:	781b      	ldrb	r3, [r3, #0]
 801b5e6:	b25a      	sxtb	r2, r3
 801b5e8:	7ff9      	ldrb	r1, [r7, #31]
 801b5ea:	7d7b      	ldrb	r3, [r7, #21]
 801b5ec:	fa01 f303 	lsl.w	r3, r1, r3
 801b5f0:	b25b      	sxtb	r3, r3
 801b5f2:	4313      	orrs	r3, r2
 801b5f4:	b259      	sxtb	r1, r3
 801b5f6:	7d3b      	ldrb	r3, [r7, #20]
 801b5f8:	68fa      	ldr	r2, [r7, #12]
 801b5fa:	4413      	add	r3, r2
 801b5fc:	b2ca      	uxtb	r2, r1
 801b5fe:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b600:	69bb      	ldr	r3, [r7, #24]
 801b602:	3301      	adds	r3, #1
 801b604:	61bb      	str	r3, [r7, #24]
 801b606:	79fb      	ldrb	r3, [r7, #7]
 801b608:	00db      	lsls	r3, r3, #3
 801b60a:	69ba      	ldr	r2, [r7, #24]
 801b60c:	429a      	cmp	r2, r3
 801b60e:	dbb0      	blt.n	801b572 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b610:	7ffb      	ldrb	r3, [r7, #31]
 801b612:	01db      	lsls	r3, r3, #7
 801b614:	b25a      	sxtb	r2, r3
 801b616:	7ffb      	ldrb	r3, [r7, #31]
 801b618:	019b      	lsls	r3, r3, #6
 801b61a:	b25b      	sxtb	r3, r3
 801b61c:	4313      	orrs	r3, r2
 801b61e:	b25b      	sxtb	r3, r3
 801b620:	7ffa      	ldrb	r2, [r7, #31]
 801b622:	2a00      	cmp	r2, #0
 801b624:	d101      	bne.n	801b62a <payload_integration+0x106>
 801b626:	2220      	movs	r2, #32
 801b628:	e000      	b.n	801b62c <payload_integration+0x108>
 801b62a:	2200      	movs	r2, #0
 801b62c:	4313      	orrs	r3, r2
 801b62e:	b259      	sxtb	r1, r3
 801b630:	79fb      	ldrb	r3, [r7, #7]
 801b632:	68fa      	ldr	r2, [r7, #12]
 801b634:	4413      	add	r3, r2
 801b636:	b2ca      	uxtb	r2, r1
 801b638:	701a      	strb	r2, [r3, #0]
}
 801b63a:	bf00      	nop
 801b63c:	3724      	adds	r7, #36	; 0x24
 801b63e:	46bd      	mov	sp, r7
 801b640:	bc80      	pop	{r7}
 801b642:	4770      	bx	lr

0801b644 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b08c      	sub	sp, #48	; 0x30
 801b648:	af00      	add	r7, sp, #0
 801b64a:	60b9      	str	r1, [r7, #8]
 801b64c:	607a      	str	r2, [r7, #4]
 801b64e:	603b      	str	r3, [r7, #0]
 801b650:	4603      	mov	r3, r0
 801b652:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b654:	2300      	movs	r3, #0
 801b656:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b658:	2300      	movs	r3, #0
 801b65a:	623b      	str	r3, [r7, #32]
 801b65c:	2300      	movs	r3, #0
 801b65e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b660:	f001 fdff 	bl	801d262 <RFW_DeInit>

    if( rxContinuous != 0 )
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d001      	beq.n	801b66e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b66a:	2300      	movs	r3, #0
 801b66c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	2b00      	cmp	r3, #0
 801b672:	bf14      	ite	ne
 801b674:	2301      	movne	r3, #1
 801b676:	2300      	moveq	r3, #0
 801b678:	b2da      	uxtb	r2, r3
 801b67a:	4ba3      	ldr	r3, [pc, #652]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b67c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b67e:	7bfb      	ldrb	r3, [r7, #15]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d003      	beq.n	801b68c <RadioSetRxGenericConfig+0x48>
 801b684:	2b01      	cmp	r3, #1
 801b686:	f000 80dc 	beq.w	801b842 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b68a:	e194      	b.n	801b9b6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	689b      	ldr	r3, [r3, #8]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d003      	beq.n	801b69c <RadioSetRxGenericConfig+0x58>
 801b694:	68bb      	ldr	r3, [r7, #8]
 801b696:	68db      	ldr	r3, [r3, #12]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d102      	bne.n	801b6a2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b69c:	f04f 33ff 	mov.w	r3, #4294967295
 801b6a0:	e18a      	b.n	801b9b8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b6a2:	68bb      	ldr	r3, [r7, #8]
 801b6a4:	7f9b      	ldrb	r3, [r3, #30]
 801b6a6:	2b08      	cmp	r3, #8
 801b6a8:	d902      	bls.n	801b6b0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b6aa:	f04f 33ff 	mov.w	r3, #4294967295
 801b6ae:	e183      	b.n	801b9b8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	6919      	ldr	r1, [r3, #16]
 801b6b4:	68bb      	ldr	r3, [r7, #8]
 801b6b6:	7f9b      	ldrb	r3, [r3, #30]
 801b6b8:	b29a      	uxth	r2, r3
 801b6ba:	f107 0320 	add.w	r3, r7, #32
 801b6be:	4618      	mov	r0, r3
 801b6c0:	f001 fec2 	bl	801d448 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b6c4:	68bb      	ldr	r3, [r7, #8]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	bf14      	ite	ne
 801b6cc:	2301      	movne	r3, #1
 801b6ce:	2300      	moveq	r3, #0
 801b6d0:	b2db      	uxtb	r3, r3
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	f000 fe26 	bl	801c324 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b6d8:	4b8b      	ldr	r3, [pc, #556]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b6da:	2200      	movs	r2, #0
 801b6dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b6e0:	68bb      	ldr	r3, [r7, #8]
 801b6e2:	689b      	ldr	r3, [r3, #8]
 801b6e4:	4a88      	ldr	r2, [pc, #544]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b6e6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b6e8:	68bb      	ldr	r3, [r7, #8]
 801b6ea:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b6ee:	4b86      	ldr	r3, [pc, #536]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	685b      	ldr	r3, [r3, #4]
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f001 fce5 	bl	801d0c8 <SUBGRF_GetFskBandwidthRegValue>
 801b6fe:	4603      	mov	r3, r0
 801b700:	461a      	mov	r2, r3
 801b702:	4b81      	ldr	r3, [pc, #516]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b708:	4b7f      	ldr	r3, [pc, #508]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b70a:	2200      	movs	r2, #0
 801b70c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b70e:	68bb      	ldr	r3, [r7, #8]
 801b710:	68db      	ldr	r3, [r3, #12]
 801b712:	b29b      	uxth	r3, r3
 801b714:	00db      	lsls	r3, r3, #3
 801b716:	b29a      	uxth	r2, r3
 801b718:	4b7b      	ldr	r3, [pc, #492]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b71a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	7fda      	ldrb	r2, [r3, #31]
 801b720:	4b79      	ldr	r3, [pc, #484]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b722:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b724:	68bb      	ldr	r3, [r7, #8]
 801b726:	7f9b      	ldrb	r3, [r3, #30]
 801b728:	00db      	lsls	r3, r3, #3
 801b72a:	b2da      	uxtb	r2, r3
 801b72c:	4b76      	ldr	r3, [pc, #472]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b72e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b736:	4b74      	ldr	r3, [pc, #464]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b738:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b73a:	68bb      	ldr	r3, [r7, #8]
 801b73c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b740:	2b00      	cmp	r3, #0
 801b742:	d105      	bne.n	801b750 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	695b      	ldr	r3, [r3, #20]
 801b748:	b2da      	uxtb	r2, r3
 801b74a:	4b6f      	ldr	r3, [pc, #444]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b74c:	759a      	strb	r2, [r3, #22]
 801b74e:	e00b      	b.n	801b768 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b756:	2b02      	cmp	r3, #2
 801b758:	d103      	bne.n	801b762 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b75a:	4b6b      	ldr	r3, [pc, #428]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b75c:	22ff      	movs	r2, #255	; 0xff
 801b75e:	759a      	strb	r2, [r3, #22]
 801b760:	e002      	b.n	801b768 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b762:	4b69      	ldr	r3, [pc, #420]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b764:	22ff      	movs	r2, #255	; 0xff
 801b766:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b768:	68bb      	ldr	r3, [r7, #8]
 801b76a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b76e:	2b02      	cmp	r3, #2
 801b770:	d004      	beq.n	801b77c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b778:	2b02      	cmp	r3, #2
 801b77a:	d12d      	bne.n	801b7d8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b782:	2bf1      	cmp	r3, #241	; 0xf1
 801b784:	d00c      	beq.n	801b7a0 <RadioSetRxGenericConfig+0x15c>
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b78c:	2bf2      	cmp	r3, #242	; 0xf2
 801b78e:	d007      	beq.n	801b7a0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b796:	2b01      	cmp	r3, #1
 801b798:	d002      	beq.n	801b7a0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b79a:	f04f 33ff 	mov.w	r3, #4294967295
 801b79e:	e10b      	b.n	801b9b8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b7a8:	4b58      	ldr	r3, [pc, #352]	; (801b90c <RadioSetRxGenericConfig+0x2c8>)
 801b7aa:	6819      	ldr	r1, [r3, #0]
 801b7ac:	f107 0314 	add.w	r3, r7, #20
 801b7b0:	4a57      	ldr	r2, [pc, #348]	; (801b910 <RadioSetRxGenericConfig+0x2cc>)
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f001 fd48 	bl	801d248 <RFW_Init>
 801b7b8:	4603      	mov	r3, r0
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d002      	beq.n	801b7c4 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b7be:	f04f 33ff 	mov.w	r3, #4294967295
 801b7c2:	e0f9      	b.n	801b9b8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b7c4:	4b50      	ldr	r3, [pc, #320]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b7c6:	2200      	movs	r2, #0
 801b7c8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b7ca:	4b4f      	ldr	r3, [pc, #316]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b7cc:	2201      	movs	r2, #1
 801b7ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b7d0:	4b4d      	ldr	r3, [pc, #308]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	755a      	strb	r2, [r3, #21]
        {
 801b7d6:	e00e      	b.n	801b7f6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b7d8:	68bb      	ldr	r3, [r7, #8]
 801b7da:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b7de:	4b4a      	ldr	r3, [pc, #296]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b7e0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b7e2:	68bb      	ldr	r3, [r7, #8]
 801b7e4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b7e8:	4b47      	ldr	r3, [pc, #284]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b7ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b7ec:	68bb      	ldr	r3, [r7, #8]
 801b7ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b7f2:	4b45      	ldr	r3, [pc, #276]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b7f4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b7f6:	f7ff fa3c 	bl	801ac72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	f7fe fbd0 	bl	8019fa0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b800:	4844      	ldr	r0, [pc, #272]	; (801b914 <RadioSetRxGenericConfig+0x2d0>)
 801b802:	f001 f82d 	bl	801c860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b806:	4844      	ldr	r0, [pc, #272]	; (801b918 <RadioSetRxGenericConfig+0x2d4>)
 801b808:	f001 f8fc 	bl	801ca04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b80c:	f107 0320 	add.w	r3, r7, #32
 801b810:	4618      	mov	r0, r3
 801b812:	f000 fbc0 	bl	801bf96 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b816:	68bb      	ldr	r3, [r7, #8]
 801b818:	8b9b      	ldrh	r3, [r3, #28]
 801b81a:	4618      	mov	r0, r3
 801b81c:	f000 fc0a 	bl	801c034 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	8b1b      	ldrh	r3, [r3, #24]
 801b824:	4618      	mov	r0, r3
 801b826:	f000 fbe5 	bl	801bff4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b82a:	683b      	ldr	r3, [r7, #0]
 801b82c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b830:	fb03 f202 	mul.w	r2, r3, r2
 801b834:	68bb      	ldr	r3, [r7, #8]
 801b836:	689b      	ldr	r3, [r3, #8]
 801b838:	fbb2 f3f3 	udiv	r3, r2, r3
 801b83c:	4a32      	ldr	r2, [pc, #200]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b83e:	6093      	str	r3, [r2, #8]
        break;
 801b840:	e0b9      	b.n	801b9b6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b842:	68bb      	ldr	r3, [r7, #8]
 801b844:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b846:	2b00      	cmp	r3, #0
 801b848:	d102      	bne.n	801b850 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b84a:	f04f 33ff 	mov.w	r3, #4294967295
 801b84e:	e0b3      	b.n	801b9b8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b856:	2b01      	cmp	r3, #1
 801b858:	d104      	bne.n	801b864 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b85a:	68bb      	ldr	r3, [r7, #8]
 801b85c:	695b      	ldr	r3, [r3, #20]
 801b85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b862:	e002      	b.n	801b86a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b864:	23ff      	movs	r3, #255	; 0xff
 801b866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b86a:	68bb      	ldr	r3, [r7, #8]
 801b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b86e:	2b00      	cmp	r3, #0
 801b870:	bf14      	ite	ne
 801b872:	2301      	movne	r3, #1
 801b874:	2300      	moveq	r3, #0
 801b876:	b2db      	uxtb	r3, r3
 801b878:	4618      	mov	r0, r3
 801b87a:	f000 fd53 	bl	801c324 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b87e:	683b      	ldr	r3, [r7, #0]
 801b880:	b2db      	uxtb	r3, r3
 801b882:	4618      	mov	r0, r3
 801b884:	f000 fd5d 	bl	801c342 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b888:	4b1f      	ldr	r3, [pc, #124]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b88a:	2201      	movs	r2, #1
 801b88c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b890:	68bb      	ldr	r3, [r7, #8]
 801b892:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b896:	4b1c      	ldr	r3, [pc, #112]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b89c:	68bb      	ldr	r3, [r7, #8]
 801b89e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b8a2:	4b19      	ldr	r3, [pc, #100]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b8a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b8a8:	68bb      	ldr	r3, [r7, #8]
 801b8aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b8ae:	4b16      	ldr	r3, [pc, #88]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b8b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b8ba:	2b02      	cmp	r3, #2
 801b8bc:	d010      	beq.n	801b8e0 <RadioSetRxGenericConfig+0x29c>
 801b8be:	2b02      	cmp	r3, #2
 801b8c0:	dc2c      	bgt.n	801b91c <RadioSetRxGenericConfig+0x2d8>
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d002      	beq.n	801b8cc <RadioSetRxGenericConfig+0x288>
 801b8c6:	2b01      	cmp	r3, #1
 801b8c8:	d005      	beq.n	801b8d6 <RadioSetRxGenericConfig+0x292>
            break;
 801b8ca:	e027      	b.n	801b91c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b8cc:	4b0e      	ldr	r3, [pc, #56]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b8d4:	e023      	b.n	801b91e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b8d6:	4b0c      	ldr	r3, [pc, #48]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b8d8:	2201      	movs	r2, #1
 801b8da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b8de:	e01e      	b.n	801b91e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b8e6:	2b0b      	cmp	r3, #11
 801b8e8:	d004      	beq.n	801b8f4 <RadioSetRxGenericConfig+0x2b0>
 801b8ea:	68bb      	ldr	r3, [r7, #8]
 801b8ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b8f0:	2b0c      	cmp	r3, #12
 801b8f2:	d104      	bne.n	801b8fe <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b8f4:	4b04      	ldr	r3, [pc, #16]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b8f6:	2201      	movs	r2, #1
 801b8f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b8fc:	e00f      	b.n	801b91e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b8fe:	4b02      	ldr	r3, [pc, #8]	; (801b908 <RadioSetRxGenericConfig+0x2c4>)
 801b900:	2200      	movs	r2, #0
 801b902:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b906:	e00a      	b.n	801b91e <RadioSetRxGenericConfig+0x2da>
 801b908:	20001838 	.word	0x20001838
 801b90c:	20001834 	.word	0x20001834
 801b910:	200018ac 	.word	0x200018ac
 801b914:	20001870 	.word	0x20001870
 801b918:	20001846 	.word	0x20001846
            break;
 801b91c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b91e:	4b28      	ldr	r3, [pc, #160]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b920:	2201      	movs	r2, #1
 801b922:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b924:	68bb      	ldr	r3, [r7, #8]
 801b926:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b928:	4b25      	ldr	r3, [pc, #148]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b92a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b92c:	68bb      	ldr	r3, [r7, #8]
 801b92e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b932:	4b23      	ldr	r3, [pc, #140]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b934:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b936:	4a22      	ldr	r2, [pc, #136]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b93c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b944:	4b1e      	ldr	r3, [pc, #120]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b946:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b94a:	68bb      	ldr	r3, [r7, #8]
 801b94c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b950:	4b1b      	ldr	r3, [pc, #108]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b956:	f7ff f98c 	bl	801ac72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b95a:	2001      	movs	r0, #1
 801b95c:	f7fe fb20 	bl	8019fa0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b960:	4818      	ldr	r0, [pc, #96]	; (801b9c4 <RadioSetRxGenericConfig+0x380>)
 801b962:	f000 ff7d 	bl	801c860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b966:	4818      	ldr	r0, [pc, #96]	; (801b9c8 <RadioSetRxGenericConfig+0x384>)
 801b968:	f001 f84c 	bl	801ca04 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b96c:	4b14      	ldr	r3, [pc, #80]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b96e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b972:	2b01      	cmp	r3, #1
 801b974:	d10d      	bne.n	801b992 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b976:	f240 7036 	movw	r0, #1846	; 0x736
 801b97a:	f001 f99f 	bl	801ccbc <SUBGRF_ReadRegister>
 801b97e:	4603      	mov	r3, r0
 801b980:	f023 0304 	bic.w	r3, r3, #4
 801b984:	b2db      	uxtb	r3, r3
 801b986:	4619      	mov	r1, r3
 801b988:	f240 7036 	movw	r0, #1846	; 0x736
 801b98c:	f001 f982 	bl	801cc94 <SUBGRF_WriteRegister>
 801b990:	e00c      	b.n	801b9ac <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b992:	f240 7036 	movw	r0, #1846	; 0x736
 801b996:	f001 f991 	bl	801ccbc <SUBGRF_ReadRegister>
 801b99a:	4603      	mov	r3, r0
 801b99c:	f043 0304 	orr.w	r3, r3, #4
 801b9a0:	b2db      	uxtb	r3, r3
 801b9a2:	4619      	mov	r1, r3
 801b9a4:	f240 7036 	movw	r0, #1846	; 0x736
 801b9a8:	f001 f974 	bl	801cc94 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b9ac:	4b04      	ldr	r3, [pc, #16]	; (801b9c0 <RadioSetRxGenericConfig+0x37c>)
 801b9ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9b2:	609a      	str	r2, [r3, #8]
        break;
 801b9b4:	bf00      	nop
    }
    return status;
 801b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	3730      	adds	r7, #48	; 0x30
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	20001838 	.word	0x20001838
 801b9c4:	20001870 	.word	0x20001870
 801b9c8:	20001846 	.word	0x20001846

0801b9cc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b08e      	sub	sp, #56	; 0x38
 801b9d0:	af00      	add	r7, sp, #0
 801b9d2:	60b9      	str	r1, [r7, #8]
 801b9d4:	607b      	str	r3, [r7, #4]
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	73fb      	strb	r3, [r7, #15]
 801b9da:	4613      	mov	r3, r2
 801b9dc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b9de:	2300      	movs	r3, #0
 801b9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b9e6:	f001 fc3c 	bl	801d262 <RFW_DeInit>
    switch( modem )
 801b9ea:	7bfb      	ldrb	r3, [r7, #15]
 801b9ec:	2b03      	cmp	r3, #3
 801b9ee:	f200 8204 	bhi.w	801bdfa <RadioSetTxGenericConfig+0x42e>
 801b9f2:	a201      	add	r2, pc, #4	; (adr r2, 801b9f8 <RadioSetTxGenericConfig+0x2c>)
 801b9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9f8:	0801bb7d 	.word	0x0801bb7d
 801b9fc:	0801bcc5 	.word	0x0801bcc5
 801ba00:	0801bdbd 	.word	0x0801bdbd
 801ba04:	0801ba09 	.word	0x0801ba09
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	7c9b      	ldrb	r3, [r3, #18]
 801ba0c:	2b08      	cmp	r3, #8
 801ba0e:	d902      	bls.n	801ba16 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ba10:	f04f 33ff 	mov.w	r3, #4294967295
 801ba14:	e206      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ba16:	68bb      	ldr	r3, [r7, #8]
 801ba18:	6899      	ldr	r1, [r3, #8]
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	7c9b      	ldrb	r3, [r3, #18]
 801ba1e:	b29a      	uxth	r2, r3
 801ba20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ba24:	4618      	mov	r0, r3
 801ba26:	f001 fd0f 	bl	801d448 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d102      	bne.n	801ba38 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ba32:	f04f 33ff 	mov.w	r3, #4294967295
 801ba36:	e1f5      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801ba38:	68bb      	ldr	r3, [r7, #8]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	f242 7210 	movw	r2, #10000	; 0x2710
 801ba40:	4293      	cmp	r3, r2
 801ba42:	d813      	bhi.n	801ba6c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801ba44:	2302      	movs	r3, #2
 801ba46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801ba4a:	4b99      	ldr	r3, [pc, #612]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba4c:	2203      	movs	r2, #3
 801ba4e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ba50:	4b97      	ldr	r3, [pc, #604]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba52:	2203      	movs	r2, #3
 801ba54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ba58:	68bb      	ldr	r3, [r7, #8]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	4a94      	ldr	r2, [pc, #592]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba5e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ba60:	68bb      	ldr	r3, [r7, #8]
 801ba62:	7cda      	ldrb	r2, [r3, #19]
 801ba64:	4b92      	ldr	r3, [pc, #584]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ba6a:	e017      	b.n	801ba9c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ba72:	4b8f      	ldr	r3, [pc, #572]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba74:	2200      	movs	r2, #0
 801ba76:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ba78:	4b8d      	ldr	r3, [pc, #564]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4a8a      	ldr	r2, [pc, #552]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba86:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ba88:	68bb      	ldr	r3, [r7, #8]
 801ba8a:	7cda      	ldrb	r2, [r3, #19]
 801ba8c:	4b88      	ldr	r3, [pc, #544]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801ba92:	68bb      	ldr	r3, [r7, #8]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	089b      	lsrs	r3, r3, #2
 801ba98:	4a85      	ldr	r2, [pc, #532]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801ba9a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801ba9c:	68bb      	ldr	r3, [r7, #8]
 801ba9e:	685b      	ldr	r3, [r3, #4]
 801baa0:	b29b      	uxth	r3, r3
 801baa2:	00db      	lsls	r3, r3, #3
 801baa4:	b29a      	uxth	r2, r3
 801baa6:	4b82      	ldr	r3, [pc, #520]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801baa8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801baaa:	4b81      	ldr	r3, [pc, #516]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801baac:	2204      	movs	r2, #4
 801baae:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bab0:	68bb      	ldr	r3, [r7, #8]
 801bab2:	7c9b      	ldrb	r3, [r3, #18]
 801bab4:	00db      	lsls	r3, r3, #3
 801bab6:	b2da      	uxtb	r2, r3
 801bab8:	4b7d      	ldr	r3, [pc, #500]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801baba:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801babc:	4b7c      	ldr	r3, [pc, #496]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801babe:	2200      	movs	r2, #0
 801bac0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bac2:	68bb      	ldr	r3, [r7, #8]
 801bac4:	7d9b      	ldrb	r3, [r3, #22]
 801bac6:	2b02      	cmp	r3, #2
 801bac8:	d003      	beq.n	801bad2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801baca:	68bb      	ldr	r3, [r7, #8]
 801bacc:	7d1b      	ldrb	r3, [r3, #20]
 801bace:	2b02      	cmp	r3, #2
 801bad0:	d12b      	bne.n	801bb2a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bad2:	68bb      	ldr	r3, [r7, #8]
 801bad4:	7d5b      	ldrb	r3, [r3, #21]
 801bad6:	2bf1      	cmp	r3, #241	; 0xf1
 801bad8:	d00a      	beq.n	801baf0 <RadioSetTxGenericConfig+0x124>
 801bada:	68bb      	ldr	r3, [r7, #8]
 801badc:	7d5b      	ldrb	r3, [r3, #21]
 801bade:	2bf2      	cmp	r3, #242	; 0xf2
 801bae0:	d006      	beq.n	801baf0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bae2:	68bb      	ldr	r3, [r7, #8]
 801bae4:	7d5b      	ldrb	r3, [r3, #21]
 801bae6:	2b01      	cmp	r3, #1
 801bae8:	d002      	beq.n	801baf0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801baea:	f04f 33ff 	mov.w	r3, #4294967295
 801baee:	e199      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801baf0:	68bb      	ldr	r3, [r7, #8]
 801baf2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801baf4:	2301      	movs	r3, #1
 801baf6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bafa:	4b6e      	ldr	r3, [pc, #440]	; (801bcb4 <RadioSetTxGenericConfig+0x2e8>)
 801bafc:	6819      	ldr	r1, [r3, #0]
 801bafe:	f107 0320 	add.w	r3, r7, #32
 801bb02:	4a6d      	ldr	r2, [pc, #436]	; (801bcb8 <RadioSetTxGenericConfig+0x2ec>)
 801bb04:	4618      	mov	r0, r3
 801bb06:	f001 fb9f 	bl	801d248 <RFW_Init>
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d002      	beq.n	801bb16 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801bb10:	f04f 33ff 	mov.w	r3, #4294967295
 801bb14:	e186      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bb16:	4b66      	ldr	r3, [pc, #408]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bb18:	2200      	movs	r2, #0
 801bb1a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bb1c:	4b64      	ldr	r3, [pc, #400]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bb1e:	2201      	movs	r2, #1
 801bb20:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bb22:	4b63      	ldr	r3, [pc, #396]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bb24:	2200      	movs	r2, #0
 801bb26:	755a      	strb	r2, [r3, #21]
        {
 801bb28:	e00b      	b.n	801bb42 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	7d5a      	ldrb	r2, [r3, #21]
 801bb2e:	4b60      	ldr	r3, [pc, #384]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bb30:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	7d9a      	ldrb	r2, [r3, #22]
 801bb36:	4b5e      	ldr	r3, [pc, #376]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bb38:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	7d1a      	ldrb	r2, [r3, #20]
 801bb3e:	4b5c      	ldr	r3, [pc, #368]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bb40:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bb42:	f7ff f896 	bl	801ac72 <RadioStandby>
        RadioSetModem( radio_modem );
 801bb46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	f7fe fa28 	bl	8019fa0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bb50:	485a      	ldr	r0, [pc, #360]	; (801bcbc <RadioSetTxGenericConfig+0x2f0>)
 801bb52:	f000 fe85 	bl	801c860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bb56:	485a      	ldr	r0, [pc, #360]	; (801bcc0 <RadioSetTxGenericConfig+0x2f4>)
 801bb58:	f000 ff54 	bl	801ca04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bb5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bb60:	4618      	mov	r0, r3
 801bb62:	f000 fa18 	bl	801bf96 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bb66:	68bb      	ldr	r3, [r7, #8]
 801bb68:	8a1b      	ldrh	r3, [r3, #16]
 801bb6a:	4618      	mov	r0, r3
 801bb6c:	f000 fa62 	bl	801c034 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	899b      	ldrh	r3, [r3, #12]
 801bb74:	4618      	mov	r0, r3
 801bb76:	f000 fa3d 	bl	801bff4 <SUBGRF_SetCrcPolynomial>
        break;
 801bb7a:	e13f      	b.n	801bdfc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bb7c:	68bb      	ldr	r3, [r7, #8]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d102      	bne.n	801bb8a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bb84:	f04f 33ff 	mov.w	r3, #4294967295
 801bb88:	e14c      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bb8a:	68bb      	ldr	r3, [r7, #8]
 801bb8c:	7c9b      	ldrb	r3, [r3, #18]
 801bb8e:	2b08      	cmp	r3, #8
 801bb90:	d902      	bls.n	801bb98 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bb92:	f04f 33ff 	mov.w	r3, #4294967295
 801bb96:	e145      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bb98:	68bb      	ldr	r3, [r7, #8]
 801bb9a:	6899      	ldr	r1, [r3, #8]
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	7c9b      	ldrb	r3, [r3, #18]
 801bba0:	b29a      	uxth	r2, r3
 801bba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bba6:	4618      	mov	r0, r3
 801bba8:	f001 fc4e 	bl	801d448 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bbac:	4b40      	ldr	r3, [pc, #256]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbae:	2200      	movs	r2, #0
 801bbb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bbb4:	68bb      	ldr	r3, [r7, #8]
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	4a3d      	ldr	r2, [pc, #244]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbba:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bbbc:	68bb      	ldr	r3, [r7, #8]
 801bbbe:	7cda      	ldrb	r2, [r3, #19]
 801bbc0:	4b3b      	ldr	r3, [pc, #236]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bbc6:	68bb      	ldr	r3, [r7, #8]
 801bbc8:	699b      	ldr	r3, [r3, #24]
 801bbca:	4a39      	ldr	r2, [pc, #228]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbcc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bbce:	4b38      	ldr	r3, [pc, #224]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bbd4:	68bb      	ldr	r3, [r7, #8]
 801bbd6:	685b      	ldr	r3, [r3, #4]
 801bbd8:	b29b      	uxth	r3, r3
 801bbda:	00db      	lsls	r3, r3, #3
 801bbdc:	b29a      	uxth	r2, r3
 801bbde:	4b34      	ldr	r3, [pc, #208]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbe0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bbe2:	4b33      	ldr	r3, [pc, #204]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbe4:	2204      	movs	r2, #4
 801bbe6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bbe8:	68bb      	ldr	r3, [r7, #8]
 801bbea:	7c9b      	ldrb	r3, [r3, #18]
 801bbec:	00db      	lsls	r3, r3, #3
 801bbee:	b2da      	uxtb	r2, r3
 801bbf0:	4b2f      	ldr	r3, [pc, #188]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbf2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bbf4:	4b2e      	ldr	r3, [pc, #184]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bbfa:	68bb      	ldr	r3, [r7, #8]
 801bbfc:	7d9b      	ldrb	r3, [r3, #22]
 801bbfe:	2b02      	cmp	r3, #2
 801bc00:	d003      	beq.n	801bc0a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bc02:	68bb      	ldr	r3, [r7, #8]
 801bc04:	7d1b      	ldrb	r3, [r3, #20]
 801bc06:	2b02      	cmp	r3, #2
 801bc08:	d12a      	bne.n	801bc60 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	7d5b      	ldrb	r3, [r3, #21]
 801bc0e:	2bf1      	cmp	r3, #241	; 0xf1
 801bc10:	d00a      	beq.n	801bc28 <RadioSetTxGenericConfig+0x25c>
 801bc12:	68bb      	ldr	r3, [r7, #8]
 801bc14:	7d5b      	ldrb	r3, [r3, #21]
 801bc16:	2bf2      	cmp	r3, #242	; 0xf2
 801bc18:	d006      	beq.n	801bc28 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	7d5b      	ldrb	r3, [r3, #21]
 801bc1e:	2b01      	cmp	r3, #1
 801bc20:	d002      	beq.n	801bc28 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bc22:	f04f 33ff 	mov.w	r3, #4294967295
 801bc26:	e0fd      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bc28:	2301      	movs	r3, #1
 801bc2a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bc30:	4b20      	ldr	r3, [pc, #128]	; (801bcb4 <RadioSetTxGenericConfig+0x2e8>)
 801bc32:	6819      	ldr	r1, [r3, #0]
 801bc34:	f107 0314 	add.w	r3, r7, #20
 801bc38:	4a1f      	ldr	r2, [pc, #124]	; (801bcb8 <RadioSetTxGenericConfig+0x2ec>)
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	f001 fb04 	bl	801d248 <RFW_Init>
 801bc40:	4603      	mov	r3, r0
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d002      	beq.n	801bc4c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bc46:	f04f 33ff 	mov.w	r3, #4294967295
 801bc4a:	e0eb      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bc4c:	4b18      	ldr	r3, [pc, #96]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bc4e:	2200      	movs	r2, #0
 801bc50:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bc52:	4b17      	ldr	r3, [pc, #92]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bc54:	2201      	movs	r2, #1
 801bc56:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bc58:	4b15      	ldr	r3, [pc, #84]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	755a      	strb	r2, [r3, #21]
        {
 801bc5e:	e00b      	b.n	801bc78 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	7d5a      	ldrb	r2, [r3, #21]
 801bc64:	4b12      	ldr	r3, [pc, #72]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bc66:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bc68:	68bb      	ldr	r3, [r7, #8]
 801bc6a:	7d9a      	ldrb	r2, [r3, #22]
 801bc6c:	4b10      	ldr	r3, [pc, #64]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bc6e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bc70:	68bb      	ldr	r3, [r7, #8]
 801bc72:	7d1a      	ldrb	r2, [r3, #20]
 801bc74:	4b0e      	ldr	r3, [pc, #56]	; (801bcb0 <RadioSetTxGenericConfig+0x2e4>)
 801bc76:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bc78:	f7fe fffb 	bl	801ac72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bc7c:	2000      	movs	r0, #0
 801bc7e:	f7fe f98f 	bl	8019fa0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc82:	480e      	ldr	r0, [pc, #56]	; (801bcbc <RadioSetTxGenericConfig+0x2f0>)
 801bc84:	f000 fdec 	bl	801c860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc88:	480d      	ldr	r0, [pc, #52]	; (801bcc0 <RadioSetTxGenericConfig+0x2f4>)
 801bc8a:	f000 febb 	bl	801ca04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bc8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc92:	4618      	mov	r0, r3
 801bc94:	f000 f97f 	bl	801bf96 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	8a1b      	ldrh	r3, [r3, #16]
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	f000 f9c9 	bl	801c034 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bca2:	68bb      	ldr	r3, [r7, #8]
 801bca4:	899b      	ldrh	r3, [r3, #12]
 801bca6:	4618      	mov	r0, r3
 801bca8:	f000 f9a4 	bl	801bff4 <SUBGRF_SetCrcPolynomial>
        break;
 801bcac:	e0a6      	b.n	801bdfc <RadioSetTxGenericConfig+0x430>
 801bcae:	bf00      	nop
 801bcb0:	20001838 	.word	0x20001838
 801bcb4:	20001834 	.word	0x20001834
 801bcb8:	20001894 	.word	0x20001894
 801bcbc:	20001870 	.word	0x20001870
 801bcc0:	20001846 	.word	0x20001846
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bcc4:	4b59      	ldr	r3, [pc, #356]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bcc6:	2201      	movs	r2, #1
 801bcc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	781a      	ldrb	r2, [r3, #0]
 801bcd0:	4b56      	ldr	r3, [pc, #344]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bcd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	785a      	ldrb	r2, [r3, #1]
 801bcda:	4b54      	ldr	r3, [pc, #336]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bcdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bce0:	68bb      	ldr	r3, [r7, #8]
 801bce2:	789a      	ldrb	r2, [r3, #2]
 801bce4:	4b51      	ldr	r3, [pc, #324]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bce6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bcea:	68bb      	ldr	r3, [r7, #8]
 801bcec:	78db      	ldrb	r3, [r3, #3]
 801bcee:	2b02      	cmp	r3, #2
 801bcf0:	d010      	beq.n	801bd14 <RadioSetTxGenericConfig+0x348>
 801bcf2:	2b02      	cmp	r3, #2
 801bcf4:	dc20      	bgt.n	801bd38 <RadioSetTxGenericConfig+0x36c>
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d002      	beq.n	801bd00 <RadioSetTxGenericConfig+0x334>
 801bcfa:	2b01      	cmp	r3, #1
 801bcfc:	d005      	beq.n	801bd0a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801bcfe:	e01b      	b.n	801bd38 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd00:	4b4a      	ldr	r3, [pc, #296]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd02:	2200      	movs	r2, #0
 801bd04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd08:	e017      	b.n	801bd3a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd0a:	4b48      	ldr	r3, [pc, #288]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd0c:	2201      	movs	r2, #1
 801bd0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd12:	e012      	b.n	801bd3a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bd14:	68bb      	ldr	r3, [r7, #8]
 801bd16:	781b      	ldrb	r3, [r3, #0]
 801bd18:	2b0b      	cmp	r3, #11
 801bd1a:	d003      	beq.n	801bd24 <RadioSetTxGenericConfig+0x358>
 801bd1c:	68bb      	ldr	r3, [r7, #8]
 801bd1e:	781b      	ldrb	r3, [r3, #0]
 801bd20:	2b0c      	cmp	r3, #12
 801bd22:	d104      	bne.n	801bd2e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd24:	4b41      	ldr	r3, [pc, #260]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd26:	2201      	movs	r2, #1
 801bd28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd2c:	e005      	b.n	801bd3a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd2e:	4b3f      	ldr	r3, [pc, #252]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd30:	2200      	movs	r2, #0
 801bd32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd36:	e000      	b.n	801bd3a <RadioSetTxGenericConfig+0x36e>
            break;
 801bd38:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bd3a:	4b3c      	ldr	r3, [pc, #240]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd3c:	2201      	movs	r2, #1
 801bd3e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bd40:	68bb      	ldr	r3, [r7, #8]
 801bd42:	889a      	ldrh	r2, [r3, #4]
 801bd44:	4b39      	ldr	r3, [pc, #228]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd46:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	799a      	ldrb	r2, [r3, #6]
 801bd4c:	4b37      	ldr	r3, [pc, #220]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd4e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	79da      	ldrb	r2, [r3, #7]
 801bd54:	4b35      	ldr	r3, [pc, #212]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd56:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bd5a:	68bb      	ldr	r3, [r7, #8]
 801bd5c:	7a1a      	ldrb	r2, [r3, #8]
 801bd5e:	4b33      	ldr	r3, [pc, #204]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801bd64:	f7fe ff85 	bl	801ac72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bd68:	2001      	movs	r0, #1
 801bd6a:	f7fe f919 	bl	8019fa0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bd6e:	4830      	ldr	r0, [pc, #192]	; (801be30 <RadioSetTxGenericConfig+0x464>)
 801bd70:	f000 fd76 	bl	801c860 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd74:	482f      	ldr	r0, [pc, #188]	; (801be34 <RadioSetTxGenericConfig+0x468>)
 801bd76:	f000 fe45 	bl	801ca04 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801bd7a:	4b2c      	ldr	r3, [pc, #176]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bd7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bd80:	2b06      	cmp	r3, #6
 801bd82:	d10d      	bne.n	801bda0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801bd84:	f640 0089 	movw	r0, #2185	; 0x889
 801bd88:	f000 ff98 	bl	801ccbc <SUBGRF_ReadRegister>
 801bd8c:	4603      	mov	r3, r0
 801bd8e:	f023 0304 	bic.w	r3, r3, #4
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	4619      	mov	r1, r3
 801bd96:	f640 0089 	movw	r0, #2185	; 0x889
 801bd9a:	f000 ff7b 	bl	801cc94 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801bd9e:	e02d      	b.n	801bdfc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801bda0:	f640 0089 	movw	r0, #2185	; 0x889
 801bda4:	f000 ff8a 	bl	801ccbc <SUBGRF_ReadRegister>
 801bda8:	4603      	mov	r3, r0
 801bdaa:	f043 0304 	orr.w	r3, r3, #4
 801bdae:	b2db      	uxtb	r3, r3
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	f640 0089 	movw	r0, #2185	; 0x889
 801bdb6:	f000 ff6d 	bl	801cc94 <SUBGRF_WriteRegister>
        break;
 801bdba:	e01f      	b.n	801bdfc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801bdbc:	68bb      	ldr	r3, [r7, #8]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d004      	beq.n	801bdce <RadioSetTxGenericConfig+0x402>
 801bdc4:	68bb      	ldr	r3, [r7, #8]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bdcc:	d902      	bls.n	801bdd4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801bdce:	f04f 33ff 	mov.w	r3, #4294967295
 801bdd2:	e027      	b.n	801be24 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801bdd4:	2003      	movs	r0, #3
 801bdd6:	f7fe f8e3 	bl	8019fa0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801bdda:	4b14      	ldr	r3, [pc, #80]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bddc:	2202      	movs	r2, #2
 801bdde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	4a11      	ldr	r2, [pc, #68]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bde8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801bdea:	4b10      	ldr	r3, [pc, #64]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801bdec:	2216      	movs	r2, #22
 801bdee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdf2:	480f      	ldr	r0, [pc, #60]	; (801be30 <RadioSetTxGenericConfig+0x464>)
 801bdf4:	f000 fd34 	bl	801c860 <SUBGRF_SetModulationParams>
        break;
 801bdf8:	e000      	b.n	801bdfc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801bdfa:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801bdfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801be00:	4618      	mov	r0, r3
 801be02:	f001 f863 	bl	801cecc <SUBGRF_SetRfTxPower>
 801be06:	4603      	mov	r3, r0
 801be08:	461a      	mov	r2, r3
 801be0a:	4b08      	ldr	r3, [pc, #32]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801be0c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be10:	4b06      	ldr	r3, [pc, #24]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801be12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be16:	4618      	mov	r0, r3
 801be18:	f001 fa37 	bl	801d28a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801be1c:	4a03      	ldr	r2, [pc, #12]	; (801be2c <RadioSetTxGenericConfig+0x460>)
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	6053      	str	r3, [r2, #4]
    return 0;
 801be22:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801be24:	4618      	mov	r0, r3
 801be26:	3738      	adds	r7, #56	; 0x38
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}
 801be2c:	20001838 	.word	0x20001838
 801be30:	20001870 	.word	0x20001870
 801be34:	20001846 	.word	0x20001846

0801be38 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801be38:	b480      	push	{r7}
 801be3a:	b085      	sub	sp, #20
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801be40:	2301      	movs	r3, #1
 801be42:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801be44:	7bfb      	ldrb	r3, [r7, #15]
}
 801be46:	4618      	mov	r0, r3
 801be48:	3714      	adds	r7, #20
 801be4a:	46bd      	mov	sp, r7
 801be4c:	bc80      	pop	{r7}
 801be4e:	4770      	bx	lr

0801be50 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801be50:	b480      	push	{r7}
 801be52:	b083      	sub	sp, #12
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
 801be58:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801be5a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801be5c:	4618      	mov	r0, r3
 801be5e:	370c      	adds	r7, #12
 801be60:	46bd      	mov	sp, r7
 801be62:	bc80      	pop	{r7}
 801be64:	4770      	bx	lr
	...

0801be68 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b084      	sub	sp, #16
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	2b00      	cmp	r3, #0
 801be74:	d002      	beq.n	801be7c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801be76:	4a1d      	ldr	r2, [pc, #116]	; (801beec <SUBGRF_Init+0x84>)
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801be7c:	f7e6 fd42 	bl	8002904 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801be80:	2002      	movs	r0, #2
 801be82:	f001 f8ff 	bl	801d084 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801be86:	4b1a      	ldr	r3, [pc, #104]	; (801bef0 <SUBGRF_Init+0x88>)
 801be88:	2200      	movs	r2, #0
 801be8a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801be8c:	2000      	movs	r0, #0
 801be8e:	f000 f97d 	bl	801c18c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801be92:	f7f1 ff1f 	bl	800dcd4 <RBI_IsTCXO>
 801be96:	4603      	mov	r3, r0
 801be98:	2b01      	cmp	r3, #1
 801be9a:	d10e      	bne.n	801beba <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801be9c:	2140      	movs	r1, #64	; 0x40
 801be9e:	2001      	movs	r0, #1
 801bea0:	f000 fb82 	bl	801c5a8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bea4:	2100      	movs	r1, #0
 801bea6:	f640 1011 	movw	r0, #2321	; 0x911
 801beaa:	f000 fef3 	bl	801cc94 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801beae:	237f      	movs	r3, #127	; 0x7f
 801beb0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801beb2:	7b38      	ldrb	r0, [r7, #12]
 801beb4:	f000 fa8b 	bl	801c3ce <SUBGRF_Calibrate>
 801beb8:	e009      	b.n	801bece <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801beba:	2120      	movs	r1, #32
 801bebc:	f640 1011 	movw	r0, #2321	; 0x911
 801bec0:	f000 fee8 	bl	801cc94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bec4:	2120      	movs	r1, #32
 801bec6:	f640 1012 	movw	r0, #2322	; 0x912
 801beca:	f000 fee3 	bl	801cc94 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bece:	210e      	movs	r1, #14
 801bed0:	f640 101f 	movw	r0, #2335	; 0x91f
 801bed4:	f000 fede 	bl	801cc94 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bed8:	f7f1 fee0 	bl	800dc9c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bedc:	4b05      	ldr	r3, [pc, #20]	; (801bef4 <SUBGRF_Init+0x8c>)
 801bede:	2201      	movs	r2, #1
 801bee0:	701a      	strb	r2, [r3, #0]
}
 801bee2:	bf00      	nop
 801bee4:	3710      	adds	r7, #16
 801bee6:	46bd      	mov	sp, r7
 801bee8:	bd80      	pop	{r7, pc}
 801beea:	bf00      	nop
 801beec:	200018d0 	.word	0x200018d0
 801bef0:	200018cc 	.word	0x200018cc
 801bef4:	200018c4 	.word	0x200018c4

0801bef8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bef8:	b480      	push	{r7}
 801befa:	af00      	add	r7, sp, #0
    return OperatingMode;
 801befc:	4b02      	ldr	r3, [pc, #8]	; (801bf08 <SUBGRF_GetOperatingMode+0x10>)
 801befe:	781b      	ldrb	r3, [r3, #0]
}
 801bf00:	4618      	mov	r0, r3
 801bf02:	46bd      	mov	sp, r7
 801bf04:	bc80      	pop	{r7}
 801bf06:	4770      	bx	lr
 801bf08:	200018c4 	.word	0x200018c4

0801bf0c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bf0c:	b580      	push	{r7, lr}
 801bf0e:	b082      	sub	sp, #8
 801bf10:	af00      	add	r7, sp, #0
 801bf12:	6078      	str	r0, [r7, #4]
 801bf14:	460b      	mov	r3, r1
 801bf16:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bf18:	78fb      	ldrb	r3, [r7, #3]
 801bf1a:	461a      	mov	r2, r3
 801bf1c:	6879      	ldr	r1, [r7, #4]
 801bf1e:	2000      	movs	r0, #0
 801bf20:	f000 ff24 	bl	801cd6c <SUBGRF_WriteBuffer>
}
 801bf24:	bf00      	nop
 801bf26:	3708      	adds	r7, #8
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	bd80      	pop	{r7, pc}

0801bf2c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b086      	sub	sp, #24
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	60f8      	str	r0, [r7, #12]
 801bf34:	60b9      	str	r1, [r7, #8]
 801bf36:	4613      	mov	r3, r2
 801bf38:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bf3e:	f107 0317 	add.w	r3, r7, #23
 801bf42:	4619      	mov	r1, r3
 801bf44:	68b8      	ldr	r0, [r7, #8]
 801bf46:	f000 fe27 	bl	801cb98 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bf4a:	68bb      	ldr	r3, [r7, #8]
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	79fa      	ldrb	r2, [r7, #7]
 801bf50:	429a      	cmp	r2, r3
 801bf52:	d201      	bcs.n	801bf58 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801bf54:	2301      	movs	r3, #1
 801bf56:	e007      	b.n	801bf68 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801bf58:	7df8      	ldrb	r0, [r7, #23]
 801bf5a:	68bb      	ldr	r3, [r7, #8]
 801bf5c:	781b      	ldrb	r3, [r3, #0]
 801bf5e:	461a      	mov	r2, r3
 801bf60:	68f9      	ldr	r1, [r7, #12]
 801bf62:	f000 ff25 	bl	801cdb0 <SUBGRF_ReadBuffer>

    return 0;
 801bf66:	2300      	movs	r3, #0
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3718      	adds	r7, #24
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}

0801bf70 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b084      	sub	sp, #16
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	60f8      	str	r0, [r7, #12]
 801bf78:	460b      	mov	r3, r1
 801bf7a:	607a      	str	r2, [r7, #4]
 801bf7c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801bf7e:	7afb      	ldrb	r3, [r7, #11]
 801bf80:	4619      	mov	r1, r3
 801bf82:	68f8      	ldr	r0, [r7, #12]
 801bf84:	f7ff ffc2 	bl	801bf0c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	f000 f91b 	bl	801c1c4 <SUBGRF_SetTx>
}
 801bf8e:	bf00      	nop
 801bf90:	3710      	adds	r7, #16
 801bf92:	46bd      	mov	sp, r7
 801bf94:	bd80      	pop	{r7, pc}

0801bf96 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801bf96:	b580      	push	{r7, lr}
 801bf98:	b082      	sub	sp, #8
 801bf9a:	af00      	add	r7, sp, #0
 801bf9c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801bf9e:	2208      	movs	r2, #8
 801bfa0:	6879      	ldr	r1, [r7, #4]
 801bfa2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801bfa6:	f000 fe9d 	bl	801cce4 <SUBGRF_WriteRegisters>
    return 0;
 801bfaa:	2300      	movs	r3, #0
}
 801bfac:	4618      	mov	r0, r3
 801bfae:	3708      	adds	r7, #8
 801bfb0:	46bd      	mov	sp, r7
 801bfb2:	bd80      	pop	{r7, pc}

0801bfb4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b084      	sub	sp, #16
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	4603      	mov	r3, r0
 801bfbc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801bfbe:	88fb      	ldrh	r3, [r7, #6]
 801bfc0:	0a1b      	lsrs	r3, r3, #8
 801bfc2:	b29b      	uxth	r3, r3
 801bfc4:	b2db      	uxtb	r3, r3
 801bfc6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801bfc8:	88fb      	ldrh	r3, [r7, #6]
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801bfce:	f000 fb6f 	bl	801c6b0 <SUBGRF_GetPacketType>
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d108      	bne.n	801bfea <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801bfd8:	f107 030c 	add.w	r3, r7, #12
 801bfdc:	2202      	movs	r2, #2
 801bfde:	4619      	mov	r1, r3
 801bfe0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801bfe4:	f000 fe7e 	bl	801cce4 <SUBGRF_WriteRegisters>
            break;
 801bfe8:	e000      	b.n	801bfec <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801bfea:	bf00      	nop
    }
}
 801bfec:	bf00      	nop
 801bfee:	3710      	adds	r7, #16
 801bff0:	46bd      	mov	sp, r7
 801bff2:	bd80      	pop	{r7, pc}

0801bff4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b084      	sub	sp, #16
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	4603      	mov	r3, r0
 801bffc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801bffe:	88fb      	ldrh	r3, [r7, #6]
 801c000:	0a1b      	lsrs	r3, r3, #8
 801c002:	b29b      	uxth	r3, r3
 801c004:	b2db      	uxtb	r3, r3
 801c006:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c008:	88fb      	ldrh	r3, [r7, #6]
 801c00a:	b2db      	uxtb	r3, r3
 801c00c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c00e:	f000 fb4f 	bl	801c6b0 <SUBGRF_GetPacketType>
 801c012:	4603      	mov	r3, r0
 801c014:	2b00      	cmp	r3, #0
 801c016:	d108      	bne.n	801c02a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c018:	f107 030c 	add.w	r3, r7, #12
 801c01c:	2202      	movs	r2, #2
 801c01e:	4619      	mov	r1, r3
 801c020:	f240 60be 	movw	r0, #1726	; 0x6be
 801c024:	f000 fe5e 	bl	801cce4 <SUBGRF_WriteRegisters>
            break;
 801c028:	e000      	b.n	801c02c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c02a:	bf00      	nop
    }
}
 801c02c:	bf00      	nop
 801c02e:	3710      	adds	r7, #16
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}

0801c034 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	4603      	mov	r3, r0
 801c03c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c03e:	2300      	movs	r3, #0
 801c040:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c042:	f000 fb35 	bl	801c6b0 <SUBGRF_GetPacketType>
 801c046:	4603      	mov	r3, r0
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d121      	bne.n	801c090 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c04c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c050:	f000 fe34 	bl	801ccbc <SUBGRF_ReadRegister>
 801c054:	4603      	mov	r3, r0
 801c056:	f023 0301 	bic.w	r3, r3, #1
 801c05a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c05c:	88fb      	ldrh	r3, [r7, #6]
 801c05e:	0a1b      	lsrs	r3, r3, #8
 801c060:	b29b      	uxth	r3, r3
 801c062:	b25b      	sxtb	r3, r3
 801c064:	f003 0301 	and.w	r3, r3, #1
 801c068:	b25a      	sxtb	r2, r3
 801c06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c06e:	4313      	orrs	r3, r2
 801c070:	b25b      	sxtb	r3, r3
 801c072:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c074:	7bfb      	ldrb	r3, [r7, #15]
 801c076:	4619      	mov	r1, r3
 801c078:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c07c:	f000 fe0a 	bl	801cc94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c080:	88fb      	ldrh	r3, [r7, #6]
 801c082:	b2db      	uxtb	r3, r3
 801c084:	4619      	mov	r1, r3
 801c086:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c08a:	f000 fe03 	bl	801cc94 <SUBGRF_WriteRegister>
            break;
 801c08e:	e000      	b.n	801c092 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c090:	bf00      	nop
    }
}
 801c092:	bf00      	nop
 801c094:	3710      	adds	r7, #16
 801c096:	46bd      	mov	sp, r7
 801c098:	bd80      	pop	{r7, pc}

0801c09a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c09a:	b580      	push	{r7, lr}
 801c09c:	b082      	sub	sp, #8
 801c09e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c0a8:	2300      	movs	r3, #0
 801c0aa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c0ac:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c0b0:	f000 fe04 	bl	801ccbc <SUBGRF_ReadRegister>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c0b8:	79fb      	ldrb	r3, [r7, #7]
 801c0ba:	f023 0301 	bic.w	r3, r3, #1
 801c0be:	b2db      	uxtb	r3, r3
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c0c6:	f000 fde5 	bl	801cc94 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c0ca:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c0ce:	f000 fdf5 	bl	801ccbc <SUBGRF_ReadRegister>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c0d6:	79bb      	ldrb	r3, [r7, #6]
 801c0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c0dc:	b2db      	uxtb	r3, r3
 801c0de:	4619      	mov	r1, r3
 801c0e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c0e4:	f000 fdd6 	bl	801cc94 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c0e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c0ec:	f000 f88a 	bl	801c204 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c0f0:	463b      	mov	r3, r7
 801c0f2:	2204      	movs	r2, #4
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	f640 0019 	movw	r0, #2073	; 0x819
 801c0fa:	f000 fe15 	bl	801cd28 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c0fe:	2000      	movs	r0, #0
 801c100:	f000 f844 	bl	801c18c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c104:	79fb      	ldrb	r3, [r7, #7]
 801c106:	4619      	mov	r1, r3
 801c108:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c10c:	f000 fdc2 	bl	801cc94 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c110:	79bb      	ldrb	r3, [r7, #6]
 801c112:	4619      	mov	r1, r3
 801c114:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c118:	f000 fdbc 	bl	801cc94 <SUBGRF_WriteRegister>

    return number;
 801c11c:	683b      	ldr	r3, [r7, #0]
}
 801c11e:	4618      	mov	r0, r3
 801c120:	3708      	adds	r7, #8
 801c122:	46bd      	mov	sp, r7
 801c124:	bd80      	pop	{r7, pc}
	...

0801c128 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b084      	sub	sp, #16
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c130:	2000      	movs	r0, #0
 801c132:	f7f1 fdba 	bl	800dcaa <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c136:	2002      	movs	r0, #2
 801c138:	f000 ffa4 	bl	801d084 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c13c:	793b      	ldrb	r3, [r7, #4]
 801c13e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c142:	b2db      	uxtb	r3, r3
 801c144:	009b      	lsls	r3, r3, #2
 801c146:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c148:	793b      	ldrb	r3, [r7, #4]
 801c14a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c14e:	b2db      	uxtb	r3, r3
 801c150:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c152:	b25b      	sxtb	r3, r3
 801c154:	4313      	orrs	r3, r2
 801c156:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c158:	793b      	ldrb	r3, [r7, #4]
 801c15a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c15e:	b2db      	uxtb	r3, r3
 801c160:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c162:	4313      	orrs	r3, r2
 801c164:	b25b      	sxtb	r3, r3
 801c166:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c168:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c16a:	f107 030f 	add.w	r3, r7, #15
 801c16e:	2201      	movs	r2, #1
 801c170:	4619      	mov	r1, r3
 801c172:	2084      	movs	r0, #132	; 0x84
 801c174:	f000 fe3e 	bl	801cdf4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c178:	4b03      	ldr	r3, [pc, #12]	; (801c188 <SUBGRF_SetSleep+0x60>)
 801c17a:	2200      	movs	r2, #0
 801c17c:	701a      	strb	r2, [r3, #0]
}
 801c17e:	bf00      	nop
 801c180:	3710      	adds	r7, #16
 801c182:	46bd      	mov	sp, r7
 801c184:	bd80      	pop	{r7, pc}
 801c186:	bf00      	nop
 801c188:	200018c4 	.word	0x200018c4

0801c18c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b082      	sub	sp, #8
 801c190:	af00      	add	r7, sp, #0
 801c192:	4603      	mov	r3, r0
 801c194:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c196:	1dfb      	adds	r3, r7, #7
 801c198:	2201      	movs	r2, #1
 801c19a:	4619      	mov	r1, r3
 801c19c:	2080      	movs	r0, #128	; 0x80
 801c19e:	f000 fe29 	bl	801cdf4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c1a2:	79fb      	ldrb	r3, [r7, #7]
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d103      	bne.n	801c1b0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c1a8:	4b05      	ldr	r3, [pc, #20]	; (801c1c0 <SUBGRF_SetStandby+0x34>)
 801c1aa:	2201      	movs	r2, #1
 801c1ac:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c1ae:	e002      	b.n	801c1b6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c1b0:	4b03      	ldr	r3, [pc, #12]	; (801c1c0 <SUBGRF_SetStandby+0x34>)
 801c1b2:	2202      	movs	r2, #2
 801c1b4:	701a      	strb	r2, [r3, #0]
}
 801c1b6:	bf00      	nop
 801c1b8:	3708      	adds	r7, #8
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd80      	pop	{r7, pc}
 801c1be:	bf00      	nop
 801c1c0:	200018c4 	.word	0x200018c4

0801c1c4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b084      	sub	sp, #16
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c1cc:	4b0c      	ldr	r3, [pc, #48]	; (801c200 <SUBGRF_SetTx+0x3c>)
 801c1ce:	2204      	movs	r2, #4
 801c1d0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	0c1b      	lsrs	r3, r3, #16
 801c1d6:	b2db      	uxtb	r3, r3
 801c1d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	0a1b      	lsrs	r3, r3, #8
 801c1de:	b2db      	uxtb	r3, r3
 801c1e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	b2db      	uxtb	r3, r3
 801c1e6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c1e8:	f107 030c 	add.w	r3, r7, #12
 801c1ec:	2203      	movs	r2, #3
 801c1ee:	4619      	mov	r1, r3
 801c1f0:	2083      	movs	r0, #131	; 0x83
 801c1f2:	f000 fdff 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c1f6:	bf00      	nop
 801c1f8:	3710      	adds	r7, #16
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop
 801c200:	200018c4 	.word	0x200018c4

0801c204 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c204:	b580      	push	{r7, lr}
 801c206:	b084      	sub	sp, #16
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c20c:	4b0c      	ldr	r3, [pc, #48]	; (801c240 <SUBGRF_SetRx+0x3c>)
 801c20e:	2205      	movs	r2, #5
 801c210:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	0c1b      	lsrs	r3, r3, #16
 801c216:	b2db      	uxtb	r3, r3
 801c218:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	0a1b      	lsrs	r3, r3, #8
 801c21e:	b2db      	uxtb	r3, r3
 801c220:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	b2db      	uxtb	r3, r3
 801c226:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c228:	f107 030c 	add.w	r3, r7, #12
 801c22c:	2203      	movs	r2, #3
 801c22e:	4619      	mov	r1, r3
 801c230:	2082      	movs	r0, #130	; 0x82
 801c232:	f000 fddf 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c236:	bf00      	nop
 801c238:	3710      	adds	r7, #16
 801c23a:	46bd      	mov	sp, r7
 801c23c:	bd80      	pop	{r7, pc}
 801c23e:	bf00      	nop
 801c240:	200018c4 	.word	0x200018c4

0801c244 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b084      	sub	sp, #16
 801c248:	af00      	add	r7, sp, #0
 801c24a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c24c:	4b0e      	ldr	r3, [pc, #56]	; (801c288 <SUBGRF_SetRxBoosted+0x44>)
 801c24e:	2205      	movs	r2, #5
 801c250:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c252:	2197      	movs	r1, #151	; 0x97
 801c254:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c258:	f000 fd1c 	bl	801cc94 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	0c1b      	lsrs	r3, r3, #16
 801c260:	b2db      	uxtb	r3, r3
 801c262:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	0a1b      	lsrs	r3, r3, #8
 801c268:	b2db      	uxtb	r3, r3
 801c26a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	b2db      	uxtb	r3, r3
 801c270:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c272:	f107 030c 	add.w	r3, r7, #12
 801c276:	2203      	movs	r2, #3
 801c278:	4619      	mov	r1, r3
 801c27a:	2082      	movs	r0, #130	; 0x82
 801c27c:	f000 fdba 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c280:	bf00      	nop
 801c282:	3710      	adds	r7, #16
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	200018c4 	.word	0x200018c4

0801c28c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b084      	sub	sp, #16
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
 801c294:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	0c1b      	lsrs	r3, r3, #16
 801c29a:	b2db      	uxtb	r3, r3
 801c29c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	0a1b      	lsrs	r3, r3, #8
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	b2db      	uxtb	r3, r3
 801c2aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	0c1b      	lsrs	r3, r3, #16
 801c2b0:	b2db      	uxtb	r3, r3
 801c2b2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	0a1b      	lsrs	r3, r3, #8
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	b2db      	uxtb	r3, r3
 801c2c0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c2c2:	f107 0308 	add.w	r3, r7, #8
 801c2c6:	2206      	movs	r2, #6
 801c2c8:	4619      	mov	r1, r3
 801c2ca:	2094      	movs	r0, #148	; 0x94
 801c2cc:	f000 fd92 	bl	801cdf4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c2d0:	4b03      	ldr	r3, [pc, #12]	; (801c2e0 <SUBGRF_SetRxDutyCycle+0x54>)
 801c2d2:	2206      	movs	r2, #6
 801c2d4:	701a      	strb	r2, [r3, #0]
}
 801c2d6:	bf00      	nop
 801c2d8:	3710      	adds	r7, #16
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	bd80      	pop	{r7, pc}
 801c2de:	bf00      	nop
 801c2e0:	200018c4 	.word	0x200018c4

0801c2e4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	2100      	movs	r1, #0
 801c2ec:	20c5      	movs	r0, #197	; 0xc5
 801c2ee:	f000 fd81 	bl	801cdf4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c2f2:	4b02      	ldr	r3, [pc, #8]	; (801c2fc <SUBGRF_SetCad+0x18>)
 801c2f4:	2207      	movs	r2, #7
 801c2f6:	701a      	strb	r2, [r3, #0]
}
 801c2f8:	bf00      	nop
 801c2fa:	bd80      	pop	{r7, pc}
 801c2fc:	200018c4 	.word	0x200018c4

0801c300 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c300:	b580      	push	{r7, lr}
 801c302:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c304:	2200      	movs	r2, #0
 801c306:	2100      	movs	r1, #0
 801c308:	20d1      	movs	r0, #209	; 0xd1
 801c30a:	f000 fd73 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c30e:	bf00      	nop
 801c310:	bd80      	pop	{r7, pc}

0801c312 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c312:	b580      	push	{r7, lr}
 801c314:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c316:	2200      	movs	r2, #0
 801c318:	2100      	movs	r1, #0
 801c31a:	20d2      	movs	r0, #210	; 0xd2
 801c31c:	f000 fd6a 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c320:	bf00      	nop
 801c322:	bd80      	pop	{r7, pc}

0801c324 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b082      	sub	sp, #8
 801c328:	af00      	add	r7, sp, #0
 801c32a:	4603      	mov	r3, r0
 801c32c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c32e:	1dfb      	adds	r3, r7, #7
 801c330:	2201      	movs	r2, #1
 801c332:	4619      	mov	r1, r3
 801c334:	209f      	movs	r0, #159	; 0x9f
 801c336:	f000 fd5d 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c33a:	bf00      	nop
 801c33c:	3708      	adds	r7, #8
 801c33e:	46bd      	mov	sp, r7
 801c340:	bd80      	pop	{r7, pc}

0801c342 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c342:	b580      	push	{r7, lr}
 801c344:	b084      	sub	sp, #16
 801c346:	af00      	add	r7, sp, #0
 801c348:	4603      	mov	r3, r0
 801c34a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c34c:	1dfb      	adds	r3, r7, #7
 801c34e:	2201      	movs	r2, #1
 801c350:	4619      	mov	r1, r3
 801c352:	20a0      	movs	r0, #160	; 0xa0
 801c354:	f000 fd4e 	bl	801cdf4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c358:	79fb      	ldrb	r3, [r7, #7]
 801c35a:	2b3f      	cmp	r3, #63	; 0x3f
 801c35c:	d91c      	bls.n	801c398 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c35e:	79fb      	ldrb	r3, [r7, #7]
 801c360:	085b      	lsrs	r3, r3, #1
 801c362:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c364:	2300      	movs	r3, #0
 801c366:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c368:	2300      	movs	r3, #0
 801c36a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c36c:	e005      	b.n	801c37a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c36e:	7bfb      	ldrb	r3, [r7, #15]
 801c370:	089b      	lsrs	r3, r3, #2
 801c372:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c374:	7bbb      	ldrb	r3, [r7, #14]
 801c376:	3301      	adds	r3, #1
 801c378:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c37a:	7bfb      	ldrb	r3, [r7, #15]
 801c37c:	2b1f      	cmp	r3, #31
 801c37e:	d8f6      	bhi.n	801c36e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c380:	7bfb      	ldrb	r3, [r7, #15]
 801c382:	00db      	lsls	r3, r3, #3
 801c384:	b2da      	uxtb	r2, r3
 801c386:	7bbb      	ldrb	r3, [r7, #14]
 801c388:	4413      	add	r3, r2
 801c38a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c38c:	7b7b      	ldrb	r3, [r7, #13]
 801c38e:	4619      	mov	r1, r3
 801c390:	f240 7006 	movw	r0, #1798	; 0x706
 801c394:	f000 fc7e 	bl	801cc94 <SUBGRF_WriteRegister>
    }
}
 801c398:	bf00      	nop
 801c39a:	3710      	adds	r7, #16
 801c39c:	46bd      	mov	sp, r7
 801c39e:	bd80      	pop	{r7, pc}

0801c3a0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c3a6:	f7f1 fc9c 	bl	800dce2 <RBI_IsDCDC>
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	2b01      	cmp	r3, #1
 801c3ae:	d102      	bne.n	801c3b6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c3b0:	2301      	movs	r3, #1
 801c3b2:	71fb      	strb	r3, [r7, #7]
 801c3b4:	e001      	b.n	801c3ba <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c3ba:	1dfb      	adds	r3, r7, #7
 801c3bc:	2201      	movs	r2, #1
 801c3be:	4619      	mov	r1, r3
 801c3c0:	2096      	movs	r0, #150	; 0x96
 801c3c2:	f000 fd17 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c3c6:	bf00      	nop
 801c3c8:	3708      	adds	r7, #8
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	bd80      	pop	{r7, pc}

0801c3ce <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c3ce:	b580      	push	{r7, lr}
 801c3d0:	b084      	sub	sp, #16
 801c3d2:	af00      	add	r7, sp, #0
 801c3d4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c3d6:	793b      	ldrb	r3, [r7, #4]
 801c3d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c3dc:	b2db      	uxtb	r3, r3
 801c3de:	019b      	lsls	r3, r3, #6
 801c3e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c3e2:	793b      	ldrb	r3, [r7, #4]
 801c3e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c3e8:	b2db      	uxtb	r3, r3
 801c3ea:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c3ec:	b25b      	sxtb	r3, r3
 801c3ee:	4313      	orrs	r3, r2
 801c3f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c3f2:	793b      	ldrb	r3, [r7, #4]
 801c3f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c3f8:	b2db      	uxtb	r3, r3
 801c3fa:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c3fc:	b25b      	sxtb	r3, r3
 801c3fe:	4313      	orrs	r3, r2
 801c400:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c402:	793b      	ldrb	r3, [r7, #4]
 801c404:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c408:	b2db      	uxtb	r3, r3
 801c40a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c40c:	b25b      	sxtb	r3, r3
 801c40e:	4313      	orrs	r3, r2
 801c410:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c412:	793b      	ldrb	r3, [r7, #4]
 801c414:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c418:	b2db      	uxtb	r3, r3
 801c41a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c41c:	b25b      	sxtb	r3, r3
 801c41e:	4313      	orrs	r3, r2
 801c420:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c422:	793b      	ldrb	r3, [r7, #4]
 801c424:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c428:	b2db      	uxtb	r3, r3
 801c42a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c42c:	b25b      	sxtb	r3, r3
 801c42e:	4313      	orrs	r3, r2
 801c430:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c432:	793b      	ldrb	r3, [r7, #4]
 801c434:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c438:	b2db      	uxtb	r3, r3
 801c43a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c43c:	4313      	orrs	r3, r2
 801c43e:	b25b      	sxtb	r3, r3
 801c440:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c442:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c444:	f107 030f 	add.w	r3, r7, #15
 801c448:	2201      	movs	r2, #1
 801c44a:	4619      	mov	r1, r3
 801c44c:	2089      	movs	r0, #137	; 0x89
 801c44e:	f000 fcd1 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c452:	bf00      	nop
 801c454:	3710      	adds	r7, #16
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}
	...

0801c45c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	4a1d      	ldr	r2, [pc, #116]	; (801c4dc <SUBGRF_CalibrateImage+0x80>)
 801c468:	4293      	cmp	r3, r2
 801c46a:	d904      	bls.n	801c476 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c46c:	23e1      	movs	r3, #225	; 0xe1
 801c46e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c470:	23e9      	movs	r3, #233	; 0xe9
 801c472:	737b      	strb	r3, [r7, #13]
 801c474:	e027      	b.n	801c4c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	4a19      	ldr	r2, [pc, #100]	; (801c4e0 <SUBGRF_CalibrateImage+0x84>)
 801c47a:	4293      	cmp	r3, r2
 801c47c:	d904      	bls.n	801c488 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c47e:	23d7      	movs	r3, #215	; 0xd7
 801c480:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c482:	23db      	movs	r3, #219	; 0xdb
 801c484:	737b      	strb	r3, [r7, #13]
 801c486:	e01e      	b.n	801c4c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	4a16      	ldr	r2, [pc, #88]	; (801c4e4 <SUBGRF_CalibrateImage+0x88>)
 801c48c:	4293      	cmp	r3, r2
 801c48e:	d904      	bls.n	801c49a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c490:	23c1      	movs	r3, #193	; 0xc1
 801c492:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c494:	23c5      	movs	r3, #197	; 0xc5
 801c496:	737b      	strb	r3, [r7, #13]
 801c498:	e015      	b.n	801c4c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	4a12      	ldr	r2, [pc, #72]	; (801c4e8 <SUBGRF_CalibrateImage+0x8c>)
 801c49e:	4293      	cmp	r3, r2
 801c4a0:	d904      	bls.n	801c4ac <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c4a2:	2375      	movs	r3, #117	; 0x75
 801c4a4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c4a6:	2381      	movs	r3, #129	; 0x81
 801c4a8:	737b      	strb	r3, [r7, #13]
 801c4aa:	e00c      	b.n	801c4c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	4a0f      	ldr	r2, [pc, #60]	; (801c4ec <SUBGRF_CalibrateImage+0x90>)
 801c4b0:	4293      	cmp	r3, r2
 801c4b2:	d904      	bls.n	801c4be <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c4b4:	236b      	movs	r3, #107	; 0x6b
 801c4b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c4b8:	236f      	movs	r3, #111	; 0x6f
 801c4ba:	737b      	strb	r3, [r7, #13]
 801c4bc:	e003      	b.n	801c4c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c4be:	2329      	movs	r3, #41	; 0x29
 801c4c0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c4c2:	232b      	movs	r3, #43	; 0x2b
 801c4c4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c4c6:	f107 030c 	add.w	r3, r7, #12
 801c4ca:	2202      	movs	r2, #2
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	2098      	movs	r0, #152	; 0x98
 801c4d0:	f000 fc90 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c4d4:	bf00      	nop
 801c4d6:	3710      	adds	r7, #16
 801c4d8:	46bd      	mov	sp, r7
 801c4da:	bd80      	pop	{r7, pc}
 801c4dc:	35a4e900 	.word	0x35a4e900
 801c4e0:	32a9f880 	.word	0x32a9f880
 801c4e4:	2de54480 	.word	0x2de54480
 801c4e8:	1b6b0b00 	.word	0x1b6b0b00
 801c4ec:	1954fc40 	.word	0x1954fc40

0801c4f0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c4f0:	b590      	push	{r4, r7, lr}
 801c4f2:	b085      	sub	sp, #20
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	4604      	mov	r4, r0
 801c4f8:	4608      	mov	r0, r1
 801c4fa:	4611      	mov	r1, r2
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	4623      	mov	r3, r4
 801c500:	71fb      	strb	r3, [r7, #7]
 801c502:	4603      	mov	r3, r0
 801c504:	71bb      	strb	r3, [r7, #6]
 801c506:	460b      	mov	r3, r1
 801c508:	717b      	strb	r3, [r7, #5]
 801c50a:	4613      	mov	r3, r2
 801c50c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c50e:	79fb      	ldrb	r3, [r7, #7]
 801c510:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c512:	79bb      	ldrb	r3, [r7, #6]
 801c514:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c516:	797b      	ldrb	r3, [r7, #5]
 801c518:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c51a:	793b      	ldrb	r3, [r7, #4]
 801c51c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c51e:	f107 030c 	add.w	r3, r7, #12
 801c522:	2204      	movs	r2, #4
 801c524:	4619      	mov	r1, r3
 801c526:	2095      	movs	r0, #149	; 0x95
 801c528:	f000 fc64 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c52c:	bf00      	nop
 801c52e:	3714      	adds	r7, #20
 801c530:	46bd      	mov	sp, r7
 801c532:	bd90      	pop	{r4, r7, pc}

0801c534 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c534:	b590      	push	{r4, r7, lr}
 801c536:	b085      	sub	sp, #20
 801c538:	af00      	add	r7, sp, #0
 801c53a:	4604      	mov	r4, r0
 801c53c:	4608      	mov	r0, r1
 801c53e:	4611      	mov	r1, r2
 801c540:	461a      	mov	r2, r3
 801c542:	4623      	mov	r3, r4
 801c544:	80fb      	strh	r3, [r7, #6]
 801c546:	4603      	mov	r3, r0
 801c548:	80bb      	strh	r3, [r7, #4]
 801c54a:	460b      	mov	r3, r1
 801c54c:	807b      	strh	r3, [r7, #2]
 801c54e:	4613      	mov	r3, r2
 801c550:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c552:	88fb      	ldrh	r3, [r7, #6]
 801c554:	0a1b      	lsrs	r3, r3, #8
 801c556:	b29b      	uxth	r3, r3
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c55c:	88fb      	ldrh	r3, [r7, #6]
 801c55e:	b2db      	uxtb	r3, r3
 801c560:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c562:	88bb      	ldrh	r3, [r7, #4]
 801c564:	0a1b      	lsrs	r3, r3, #8
 801c566:	b29b      	uxth	r3, r3
 801c568:	b2db      	uxtb	r3, r3
 801c56a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c56c:	88bb      	ldrh	r3, [r7, #4]
 801c56e:	b2db      	uxtb	r3, r3
 801c570:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c572:	887b      	ldrh	r3, [r7, #2]
 801c574:	0a1b      	lsrs	r3, r3, #8
 801c576:	b29b      	uxth	r3, r3
 801c578:	b2db      	uxtb	r3, r3
 801c57a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c57c:	887b      	ldrh	r3, [r7, #2]
 801c57e:	b2db      	uxtb	r3, r3
 801c580:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c582:	883b      	ldrh	r3, [r7, #0]
 801c584:	0a1b      	lsrs	r3, r3, #8
 801c586:	b29b      	uxth	r3, r3
 801c588:	b2db      	uxtb	r3, r3
 801c58a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c58c:	883b      	ldrh	r3, [r7, #0]
 801c58e:	b2db      	uxtb	r3, r3
 801c590:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c592:	f107 0308 	add.w	r3, r7, #8
 801c596:	2208      	movs	r2, #8
 801c598:	4619      	mov	r1, r3
 801c59a:	2008      	movs	r0, #8
 801c59c:	f000 fc2a 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c5a0:	bf00      	nop
 801c5a2:	3714      	adds	r7, #20
 801c5a4:	46bd      	mov	sp, r7
 801c5a6:	bd90      	pop	{r4, r7, pc}

0801c5a8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b084      	sub	sp, #16
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	6039      	str	r1, [r7, #0]
 801c5b2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c5b4:	79fb      	ldrb	r3, [r7, #7]
 801c5b6:	f003 0307 	and.w	r3, r3, #7
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c5be:	683b      	ldr	r3, [r7, #0]
 801c5c0:	0c1b      	lsrs	r3, r3, #16
 801c5c2:	b2db      	uxtb	r3, r3
 801c5c4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c5c6:	683b      	ldr	r3, [r7, #0]
 801c5c8:	0a1b      	lsrs	r3, r3, #8
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c5ce:	683b      	ldr	r3, [r7, #0]
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c5d4:	f107 030c 	add.w	r3, r7, #12
 801c5d8:	2204      	movs	r2, #4
 801c5da:	4619      	mov	r1, r3
 801c5dc:	2097      	movs	r0, #151	; 0x97
 801c5de:	f000 fc09 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c5e2:	bf00      	nop
 801c5e4:	3710      	adds	r7, #16
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	bd80      	pop	{r7, pc}
	...

0801c5ec <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c5ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c5f0:	b084      	sub	sp, #16
 801c5f2:	af00      	add	r7, sp, #0
 801c5f4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c5fa:	4b1d      	ldr	r3, [pc, #116]	; (801c670 <SUBGRF_SetRfFrequency+0x84>)
 801c5fc:	781b      	ldrb	r3, [r3, #0]
 801c5fe:	f083 0301 	eor.w	r3, r3, #1
 801c602:	b2db      	uxtb	r3, r3
 801c604:	2b00      	cmp	r3, #0
 801c606:	d005      	beq.n	801c614 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c608:	6878      	ldr	r0, [r7, #4]
 801c60a:	f7ff ff27 	bl	801c45c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c60e:	4b18      	ldr	r3, [pc, #96]	; (801c670 <SUBGRF_SetRfFrequency+0x84>)
 801c610:	2201      	movs	r2, #1
 801c612:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	2200      	movs	r2, #0
 801c618:	461c      	mov	r4, r3
 801c61a:	4615      	mov	r5, r2
 801c61c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c620:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c624:	4a13      	ldr	r2, [pc, #76]	; (801c674 <SUBGRF_SetRfFrequency+0x88>)
 801c626:	f04f 0300 	mov.w	r3, #0
 801c62a:	4640      	mov	r0, r8
 801c62c:	4649      	mov	r1, r9
 801c62e:	f7e4 fbad 	bl	8000d8c <__aeabi_uldivmod>
 801c632:	4602      	mov	r2, r0
 801c634:	460b      	mov	r3, r1
 801c636:	4613      	mov	r3, r2
 801c638:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	0e1b      	lsrs	r3, r3, #24
 801c63e:	b2db      	uxtb	r3, r3
 801c640:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	0c1b      	lsrs	r3, r3, #16
 801c646:	b2db      	uxtb	r3, r3
 801c648:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	0a1b      	lsrs	r3, r3, #8
 801c64e:	b2db      	uxtb	r3, r3
 801c650:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	b2db      	uxtb	r3, r3
 801c656:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c658:	f107 0308 	add.w	r3, r7, #8
 801c65c:	2204      	movs	r2, #4
 801c65e:	4619      	mov	r1, r3
 801c660:	2086      	movs	r0, #134	; 0x86
 801c662:	f000 fbc7 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c666:	bf00      	nop
 801c668:	3710      	adds	r7, #16
 801c66a:	46bd      	mov	sp, r7
 801c66c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c670:	200018cc 	.word	0x200018cc
 801c674:	01e84800 	.word	0x01e84800

0801c678 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c678:	b580      	push	{r7, lr}
 801c67a:	b082      	sub	sp, #8
 801c67c:	af00      	add	r7, sp, #0
 801c67e:	4603      	mov	r3, r0
 801c680:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c682:	79fa      	ldrb	r2, [r7, #7]
 801c684:	4b09      	ldr	r3, [pc, #36]	; (801c6ac <SUBGRF_SetPacketType+0x34>)
 801c686:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c688:	79fb      	ldrb	r3, [r7, #7]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d104      	bne.n	801c698 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c68e:	2100      	movs	r1, #0
 801c690:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c694:	f000 fafe 	bl	801cc94 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c698:	1dfb      	adds	r3, r7, #7
 801c69a:	2201      	movs	r2, #1
 801c69c:	4619      	mov	r1, r3
 801c69e:	208a      	movs	r0, #138	; 0x8a
 801c6a0:	f000 fba8 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c6a4:	bf00      	nop
 801c6a6:	3708      	adds	r7, #8
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	bd80      	pop	{r7, pc}
 801c6ac:	200018c5 	.word	0x200018c5

0801c6b0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c6b0:	b480      	push	{r7}
 801c6b2:	af00      	add	r7, sp, #0
    return PacketType;
 801c6b4:	4b02      	ldr	r3, [pc, #8]	; (801c6c0 <SUBGRF_GetPacketType+0x10>)
 801c6b6:	781b      	ldrb	r3, [r3, #0]
}
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bc80      	pop	{r7}
 801c6be:	4770      	bx	lr
 801c6c0:	200018c5 	.word	0x200018c5

0801c6c4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b084      	sub	sp, #16
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	4603      	mov	r3, r0
 801c6cc:	71fb      	strb	r3, [r7, #7]
 801c6ce:	460b      	mov	r3, r1
 801c6d0:	71bb      	strb	r3, [r7, #6]
 801c6d2:	4613      	mov	r3, r2
 801c6d4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c6d6:	79fb      	ldrb	r3, [r7, #7]
 801c6d8:	2b01      	cmp	r3, #1
 801c6da:	d149      	bne.n	801c770 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c6dc:	2000      	movs	r0, #0
 801c6de:	f7f1 fb07 	bl	800dcf0 <RBI_GetRFOMaxPowerConfig>
 801c6e2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c6e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c6e8:	68fa      	ldr	r2, [r7, #12]
 801c6ea:	429a      	cmp	r2, r3
 801c6ec:	da01      	bge.n	801c6f2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	2b0e      	cmp	r3, #14
 801c6f6:	d10e      	bne.n	801c716 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c6f8:	2301      	movs	r3, #1
 801c6fa:	2201      	movs	r2, #1
 801c6fc:	2100      	movs	r1, #0
 801c6fe:	2004      	movs	r0, #4
 801c700:	f7ff fef6 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c704:	79ba      	ldrb	r2, [r7, #6]
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	b2db      	uxtb	r3, r3
 801c70a:	1ad3      	subs	r3, r2, r3
 801c70c:	b2db      	uxtb	r3, r3
 801c70e:	330e      	adds	r3, #14
 801c710:	b2db      	uxtb	r3, r3
 801c712:	71bb      	strb	r3, [r7, #6]
 801c714:	e01f      	b.n	801c756 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	2b0a      	cmp	r3, #10
 801c71a:	d10e      	bne.n	801c73a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c71c:	2301      	movs	r3, #1
 801c71e:	2201      	movs	r2, #1
 801c720:	2100      	movs	r1, #0
 801c722:	2001      	movs	r0, #1
 801c724:	f7ff fee4 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c728:	79ba      	ldrb	r2, [r7, #6]
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	b2db      	uxtb	r3, r3
 801c72e:	1ad3      	subs	r3, r2, r3
 801c730:	b2db      	uxtb	r3, r3
 801c732:	330d      	adds	r3, #13
 801c734:	b2db      	uxtb	r3, r3
 801c736:	71bb      	strb	r3, [r7, #6]
 801c738:	e00d      	b.n	801c756 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c73a:	2301      	movs	r3, #1
 801c73c:	2201      	movs	r2, #1
 801c73e:	2100      	movs	r1, #0
 801c740:	2007      	movs	r0, #7
 801c742:	f7ff fed5 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c746:	79ba      	ldrb	r2, [r7, #6]
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	b2db      	uxtb	r3, r3
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	330e      	adds	r3, #14
 801c752:	b2db      	uxtb	r3, r3
 801c754:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c756:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c75a:	f113 0f11 	cmn.w	r3, #17
 801c75e:	da01      	bge.n	801c764 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c760:	23ef      	movs	r3, #239	; 0xef
 801c762:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c764:	2118      	movs	r1, #24
 801c766:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c76a:	f000 fa93 	bl	801cc94 <SUBGRF_WriteRegister>
 801c76e:	e067      	b.n	801c840 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c770:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c774:	f000 faa2 	bl	801ccbc <SUBGRF_ReadRegister>
 801c778:	4603      	mov	r3, r0
 801c77a:	f043 031e 	orr.w	r3, r3, #30
 801c77e:	b2db      	uxtb	r3, r3
 801c780:	4619      	mov	r1, r3
 801c782:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c786:	f000 fa85 	bl	801cc94 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c78a:	2001      	movs	r0, #1
 801c78c:	f7f1 fab0 	bl	800dcf0 <RBI_GetRFOMaxPowerConfig>
 801c790:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c792:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c796:	68fa      	ldr	r2, [r7, #12]
 801c798:	429a      	cmp	r2, r3
 801c79a:	da01      	bge.n	801c7a0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	2b14      	cmp	r3, #20
 801c7a4:	d10e      	bne.n	801c7c4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c7a6:	2301      	movs	r3, #1
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	2105      	movs	r1, #5
 801c7ac:	2003      	movs	r0, #3
 801c7ae:	f7ff fe9f 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c7b2:	79ba      	ldrb	r2, [r7, #6]
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	b2db      	uxtb	r3, r3
 801c7b8:	1ad3      	subs	r3, r2, r3
 801c7ba:	b2db      	uxtb	r3, r3
 801c7bc:	3316      	adds	r3, #22
 801c7be:	b2db      	uxtb	r3, r3
 801c7c0:	71bb      	strb	r3, [r7, #6]
 801c7c2:	e031      	b.n	801c828 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	2b11      	cmp	r3, #17
 801c7c8:	d10e      	bne.n	801c7e8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c7ca:	2301      	movs	r3, #1
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	2103      	movs	r1, #3
 801c7d0:	2002      	movs	r0, #2
 801c7d2:	f7ff fe8d 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c7d6:	79ba      	ldrb	r2, [r7, #6]
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	b2db      	uxtb	r3, r3
 801c7dc:	1ad3      	subs	r3, r2, r3
 801c7de:	b2db      	uxtb	r3, r3
 801c7e0:	3316      	adds	r3, #22
 801c7e2:	b2db      	uxtb	r3, r3
 801c7e4:	71bb      	strb	r3, [r7, #6]
 801c7e6:	e01f      	b.n	801c828 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	2b0e      	cmp	r3, #14
 801c7ec:	d10e      	bne.n	801c80c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c7ee:	2301      	movs	r3, #1
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	2102      	movs	r1, #2
 801c7f4:	2002      	movs	r0, #2
 801c7f6:	f7ff fe7b 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7fa:	79ba      	ldrb	r2, [r7, #6]
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	1ad3      	subs	r3, r2, r3
 801c802:	b2db      	uxtb	r3, r3
 801c804:	330e      	adds	r3, #14
 801c806:	b2db      	uxtb	r3, r3
 801c808:	71bb      	strb	r3, [r7, #6]
 801c80a:	e00d      	b.n	801c828 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c80c:	2301      	movs	r3, #1
 801c80e:	2200      	movs	r2, #0
 801c810:	2107      	movs	r1, #7
 801c812:	2004      	movs	r0, #4
 801c814:	f7ff fe6c 	bl	801c4f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c818:	79ba      	ldrb	r2, [r7, #6]
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	b2db      	uxtb	r3, r3
 801c81e:	1ad3      	subs	r3, r2, r3
 801c820:	b2db      	uxtb	r3, r3
 801c822:	3316      	adds	r3, #22
 801c824:	b2db      	uxtb	r3, r3
 801c826:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c828:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c82c:	f113 0f09 	cmn.w	r3, #9
 801c830:	da01      	bge.n	801c836 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c832:	23f7      	movs	r3, #247	; 0xf7
 801c834:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c836:	2138      	movs	r1, #56	; 0x38
 801c838:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c83c:	f000 fa2a 	bl	801cc94 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c840:	79bb      	ldrb	r3, [r7, #6]
 801c842:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c844:	797b      	ldrb	r3, [r7, #5]
 801c846:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c848:	f107 0308 	add.w	r3, r7, #8
 801c84c:	2202      	movs	r2, #2
 801c84e:	4619      	mov	r1, r3
 801c850:	208e      	movs	r0, #142	; 0x8e
 801c852:	f000 facf 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801c856:	bf00      	nop
 801c858:	3710      	adds	r7, #16
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}
	...

0801c860 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c864:	b086      	sub	sp, #24
 801c866:	af00      	add	r7, sp, #0
 801c868:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c86a:	2300      	movs	r3, #0
 801c86c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c86e:	4a61      	ldr	r2, [pc, #388]	; (801c9f4 <SUBGRF_SetModulationParams+0x194>)
 801c870:	f107 0308 	add.w	r3, r7, #8
 801c874:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c878:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	781a      	ldrb	r2, [r3, #0]
 801c880:	4b5d      	ldr	r3, [pc, #372]	; (801c9f8 <SUBGRF_SetModulationParams+0x198>)
 801c882:	781b      	ldrb	r3, [r3, #0]
 801c884:	429a      	cmp	r2, r3
 801c886:	d004      	beq.n	801c892 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	781b      	ldrb	r3, [r3, #0]
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7ff fef3 	bl	801c678 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	2b03      	cmp	r3, #3
 801c898:	f200 80a5 	bhi.w	801c9e6 <SUBGRF_SetModulationParams+0x186>
 801c89c:	a201      	add	r2, pc, #4	; (adr r2, 801c8a4 <SUBGRF_SetModulationParams+0x44>)
 801c89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8a2:	bf00      	nop
 801c8a4:	0801c8b5 	.word	0x0801c8b5
 801c8a8:	0801c975 	.word	0x0801c975
 801c8ac:	0801c937 	.word	0x0801c937
 801c8b0:	0801c9a3 	.word	0x0801c9a3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c8b4:	2308      	movs	r3, #8
 801c8b6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	685b      	ldr	r3, [r3, #4]
 801c8bc:	4a4f      	ldr	r2, [pc, #316]	; (801c9fc <SUBGRF_SetModulationParams+0x19c>)
 801c8be:	fbb2 f3f3 	udiv	r3, r2, r3
 801c8c2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c8c4:	697b      	ldr	r3, [r7, #20]
 801c8c6:	0c1b      	lsrs	r3, r3, #16
 801c8c8:	b2db      	uxtb	r3, r3
 801c8ca:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	0a1b      	lsrs	r3, r3, #8
 801c8d0:	b2db      	uxtb	r3, r3
 801c8d2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c8d4:	697b      	ldr	r3, [r7, #20]
 801c8d6:	b2db      	uxtb	r3, r3
 801c8d8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	7b1b      	ldrb	r3, [r3, #12]
 801c8de:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	7b5b      	ldrb	r3, [r3, #13]
 801c8e4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	689b      	ldr	r3, [r3, #8]
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	461c      	mov	r4, r3
 801c8ee:	4615      	mov	r5, r2
 801c8f0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c8f4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c8f8:	4a41      	ldr	r2, [pc, #260]	; (801ca00 <SUBGRF_SetModulationParams+0x1a0>)
 801c8fa:	f04f 0300 	mov.w	r3, #0
 801c8fe:	4640      	mov	r0, r8
 801c900:	4649      	mov	r1, r9
 801c902:	f7e4 fa43 	bl	8000d8c <__aeabi_uldivmod>
 801c906:	4602      	mov	r2, r0
 801c908:	460b      	mov	r3, r1
 801c90a:	4613      	mov	r3, r2
 801c90c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c90e:	697b      	ldr	r3, [r7, #20]
 801c910:	0c1b      	lsrs	r3, r3, #16
 801c912:	b2db      	uxtb	r3, r3
 801c914:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c916:	697b      	ldr	r3, [r7, #20]
 801c918:	0a1b      	lsrs	r3, r3, #8
 801c91a:	b2db      	uxtb	r3, r3
 801c91c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c91e:	697b      	ldr	r3, [r7, #20]
 801c920:	b2db      	uxtb	r3, r3
 801c922:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c924:	7cfb      	ldrb	r3, [r7, #19]
 801c926:	b29a      	uxth	r2, r3
 801c928:	f107 0308 	add.w	r3, r7, #8
 801c92c:	4619      	mov	r1, r3
 801c92e:	208b      	movs	r0, #139	; 0x8b
 801c930:	f000 fa60 	bl	801cdf4 <SUBGRF_WriteCommand>
        break;
 801c934:	e058      	b.n	801c9e8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c936:	2304      	movs	r3, #4
 801c938:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	691b      	ldr	r3, [r3, #16]
 801c93e:	4a2f      	ldr	r2, [pc, #188]	; (801c9fc <SUBGRF_SetModulationParams+0x19c>)
 801c940:	fbb2 f3f3 	udiv	r3, r2, r3
 801c944:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c946:	697b      	ldr	r3, [r7, #20]
 801c948:	0c1b      	lsrs	r3, r3, #16
 801c94a:	b2db      	uxtb	r3, r3
 801c94c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c94e:	697b      	ldr	r3, [r7, #20]
 801c950:	0a1b      	lsrs	r3, r3, #8
 801c952:	b2db      	uxtb	r3, r3
 801c954:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	b2db      	uxtb	r3, r3
 801c95a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	7d1b      	ldrb	r3, [r3, #20]
 801c960:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c962:	7cfb      	ldrb	r3, [r7, #19]
 801c964:	b29a      	uxth	r2, r3
 801c966:	f107 0308 	add.w	r3, r7, #8
 801c96a:	4619      	mov	r1, r3
 801c96c:	208b      	movs	r0, #139	; 0x8b
 801c96e:	f000 fa41 	bl	801cdf4 <SUBGRF_WriteCommand>
        break;
 801c972:	e039      	b.n	801c9e8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c974:	2304      	movs	r3, #4
 801c976:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	7e1b      	ldrb	r3, [r3, #24]
 801c97c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	7e5b      	ldrb	r3, [r3, #25]
 801c982:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	7e9b      	ldrb	r3, [r3, #26]
 801c988:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	7edb      	ldrb	r3, [r3, #27]
 801c98e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c990:	7cfb      	ldrb	r3, [r7, #19]
 801c992:	b29a      	uxth	r2, r3
 801c994:	f107 0308 	add.w	r3, r7, #8
 801c998:	4619      	mov	r1, r3
 801c99a:	208b      	movs	r0, #139	; 0x8b
 801c99c:	f000 fa2a 	bl	801cdf4 <SUBGRF_WriteCommand>

        break;
 801c9a0:	e022      	b.n	801c9e8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c9a2:	2305      	movs	r3, #5
 801c9a4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	685b      	ldr	r3, [r3, #4]
 801c9aa:	4a14      	ldr	r2, [pc, #80]	; (801c9fc <SUBGRF_SetModulationParams+0x19c>)
 801c9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9b0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c9b2:	697b      	ldr	r3, [r7, #20]
 801c9b4:	0c1b      	lsrs	r3, r3, #16
 801c9b6:	b2db      	uxtb	r3, r3
 801c9b8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c9ba:	697b      	ldr	r3, [r7, #20]
 801c9bc:	0a1b      	lsrs	r3, r3, #8
 801c9be:	b2db      	uxtb	r3, r3
 801c9c0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	b2db      	uxtb	r3, r3
 801c9c6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	7b1b      	ldrb	r3, [r3, #12]
 801c9cc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	7b5b      	ldrb	r3, [r3, #13]
 801c9d2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9d4:	7cfb      	ldrb	r3, [r7, #19]
 801c9d6:	b29a      	uxth	r2, r3
 801c9d8:	f107 0308 	add.w	r3, r7, #8
 801c9dc:	4619      	mov	r1, r3
 801c9de:	208b      	movs	r0, #139	; 0x8b
 801c9e0:	f000 fa08 	bl	801cdf4 <SUBGRF_WriteCommand>
        break;
 801c9e4:	e000      	b.n	801c9e8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c9e6:	bf00      	nop
    }
}
 801c9e8:	bf00      	nop
 801c9ea:	3718      	adds	r7, #24
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c9f2:	bf00      	nop
 801c9f4:	0801f424 	.word	0x0801f424
 801c9f8:	200018c5 	.word	0x200018c5
 801c9fc:	3d090000 	.word	0x3d090000
 801ca00:	01e84800 	.word	0x01e84800

0801ca04 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b086      	sub	sp, #24
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ca10:	4a48      	ldr	r2, [pc, #288]	; (801cb34 <SUBGRF_SetPacketParams+0x130>)
 801ca12:	f107 030c 	add.w	r3, r7, #12
 801ca16:	ca07      	ldmia	r2, {r0, r1, r2}
 801ca18:	c303      	stmia	r3!, {r0, r1}
 801ca1a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	781a      	ldrb	r2, [r3, #0]
 801ca20:	4b45      	ldr	r3, [pc, #276]	; (801cb38 <SUBGRF_SetPacketParams+0x134>)
 801ca22:	781b      	ldrb	r3, [r3, #0]
 801ca24:	429a      	cmp	r2, r3
 801ca26:	d004      	beq.n	801ca32 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	f7ff fe23 	bl	801c678 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	781b      	ldrb	r3, [r3, #0]
 801ca36:	2b03      	cmp	r3, #3
 801ca38:	d878      	bhi.n	801cb2c <SUBGRF_SetPacketParams+0x128>
 801ca3a:	a201      	add	r2, pc, #4	; (adr r2, 801ca40 <SUBGRF_SetPacketParams+0x3c>)
 801ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca40:	0801ca51 	.word	0x0801ca51
 801ca44:	0801cae1 	.word	0x0801cae1
 801ca48:	0801cad5 	.word	0x0801cad5
 801ca4c:	0801ca51 	.word	0x0801ca51
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	7a5b      	ldrb	r3, [r3, #9]
 801ca54:	2bf1      	cmp	r3, #241	; 0xf1
 801ca56:	d10a      	bne.n	801ca6e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801ca58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ca5c:	f7ff faaa 	bl	801bfb4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801ca60:	f248 0005 	movw	r0, #32773	; 0x8005
 801ca64:	f7ff fac6 	bl	801bff4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801ca68:	2302      	movs	r3, #2
 801ca6a:	75bb      	strb	r3, [r7, #22]
 801ca6c:	e011      	b.n	801ca92 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	7a5b      	ldrb	r3, [r3, #9]
 801ca72:	2bf2      	cmp	r3, #242	; 0xf2
 801ca74:	d10a      	bne.n	801ca8c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801ca76:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801ca7a:	f7ff fa9b 	bl	801bfb4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801ca7e:	f241 0021 	movw	r0, #4129	; 0x1021
 801ca82:	f7ff fab7 	bl	801bff4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801ca86:	2306      	movs	r3, #6
 801ca88:	75bb      	strb	r3, [r7, #22]
 801ca8a:	e002      	b.n	801ca92 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	7a5b      	ldrb	r3, [r3, #9]
 801ca90:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ca92:	2309      	movs	r3, #9
 801ca94:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	885b      	ldrh	r3, [r3, #2]
 801ca9a:	0a1b      	lsrs	r3, r3, #8
 801ca9c:	b29b      	uxth	r3, r3
 801ca9e:	b2db      	uxtb	r3, r3
 801caa0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	885b      	ldrh	r3, [r3, #2]
 801caa6:	b2db      	uxtb	r3, r3
 801caa8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	791b      	ldrb	r3, [r3, #4]
 801caae:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	795b      	ldrb	r3, [r3, #5]
 801cab4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	799b      	ldrb	r3, [r3, #6]
 801caba:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	79db      	ldrb	r3, [r3, #7]
 801cac0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	7a1b      	ldrb	r3, [r3, #8]
 801cac6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cac8:	7dbb      	ldrb	r3, [r7, #22]
 801caca:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	7a9b      	ldrb	r3, [r3, #10]
 801cad0:	753b      	strb	r3, [r7, #20]
        break;
 801cad2:	e022      	b.n	801cb1a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cad4:	2301      	movs	r3, #1
 801cad6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	7b1b      	ldrb	r3, [r3, #12]
 801cadc:	733b      	strb	r3, [r7, #12]
        break;
 801cade:	e01c      	b.n	801cb1a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cae0:	2306      	movs	r3, #6
 801cae2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	89db      	ldrh	r3, [r3, #14]
 801cae8:	0a1b      	lsrs	r3, r3, #8
 801caea:	b29b      	uxth	r3, r3
 801caec:	b2db      	uxtb	r3, r3
 801caee:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	89db      	ldrh	r3, [r3, #14]
 801caf4:	b2db      	uxtb	r3, r3
 801caf6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	7c1a      	ldrb	r2, [r3, #16]
 801cafc:	4b0f      	ldr	r3, [pc, #60]	; (801cb3c <SUBGRF_SetPacketParams+0x138>)
 801cafe:	4611      	mov	r1, r2
 801cb00:	7019      	strb	r1, [r3, #0]
 801cb02:	4613      	mov	r3, r2
 801cb04:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	7c5b      	ldrb	r3, [r3, #17]
 801cb0a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	7c9b      	ldrb	r3, [r3, #18]
 801cb10:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	7cdb      	ldrb	r3, [r3, #19]
 801cb16:	747b      	strb	r3, [r7, #17]
        break;
 801cb18:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cb1a:	7dfb      	ldrb	r3, [r7, #23]
 801cb1c:	b29a      	uxth	r2, r3
 801cb1e:	f107 030c 	add.w	r3, r7, #12
 801cb22:	4619      	mov	r1, r3
 801cb24:	208c      	movs	r0, #140	; 0x8c
 801cb26:	f000 f965 	bl	801cdf4 <SUBGRF_WriteCommand>
 801cb2a:	e000      	b.n	801cb2e <SUBGRF_SetPacketParams+0x12a>
        return;
 801cb2c:	bf00      	nop
}
 801cb2e:	3718      	adds	r7, #24
 801cb30:	46bd      	mov	sp, r7
 801cb32:	bd80      	pop	{r7, pc}
 801cb34:	0801f42c 	.word	0x0801f42c
 801cb38:	200018c5 	.word	0x200018c5
 801cb3c:	200018c6 	.word	0x200018c6

0801cb40 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b084      	sub	sp, #16
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	4603      	mov	r3, r0
 801cb48:	460a      	mov	r2, r1
 801cb4a:	71fb      	strb	r3, [r7, #7]
 801cb4c:	4613      	mov	r3, r2
 801cb4e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cb50:	79fb      	ldrb	r3, [r7, #7]
 801cb52:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cb54:	79bb      	ldrb	r3, [r7, #6]
 801cb56:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cb58:	f107 030c 	add.w	r3, r7, #12
 801cb5c:	2202      	movs	r2, #2
 801cb5e:	4619      	mov	r1, r3
 801cb60:	208f      	movs	r0, #143	; 0x8f
 801cb62:	f000 f947 	bl	801cdf4 <SUBGRF_WriteCommand>
}
 801cb66:	bf00      	nop
 801cb68:	3710      	adds	r7, #16
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}

0801cb6e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cb6e:	b580      	push	{r7, lr}
 801cb70:	b082      	sub	sp, #8
 801cb72:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cb74:	2300      	movs	r3, #0
 801cb76:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cb78:	1d3b      	adds	r3, r7, #4
 801cb7a:	2201      	movs	r2, #1
 801cb7c:	4619      	mov	r1, r3
 801cb7e:	2015      	movs	r0, #21
 801cb80:	f000 f95a 	bl	801ce38 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cb84:	793b      	ldrb	r3, [r7, #4]
 801cb86:	425b      	negs	r3, r3
 801cb88:	105b      	asrs	r3, r3, #1
 801cb8a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cb8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cb90:	4618      	mov	r0, r3
 801cb92:	3708      	adds	r7, #8
 801cb94:	46bd      	mov	sp, r7
 801cb96:	bd80      	pop	{r7, pc}

0801cb98 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b084      	sub	sp, #16
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	6078      	str	r0, [r7, #4]
 801cba0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cba2:	f107 030c 	add.w	r3, r7, #12
 801cba6:	2202      	movs	r2, #2
 801cba8:	4619      	mov	r1, r3
 801cbaa:	2013      	movs	r0, #19
 801cbac:	f000 f944 	bl	801ce38 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cbb0:	f7ff fd7e 	bl	801c6b0 <SUBGRF_GetPacketType>
 801cbb4:	4603      	mov	r3, r0
 801cbb6:	2b01      	cmp	r3, #1
 801cbb8:	d10d      	bne.n	801cbd6 <SUBGRF_GetRxBufferStatus+0x3e>
 801cbba:	4b0c      	ldr	r3, [pc, #48]	; (801cbec <SUBGRF_GetRxBufferStatus+0x54>)
 801cbbc:	781b      	ldrb	r3, [r3, #0]
 801cbbe:	b2db      	uxtb	r3, r3
 801cbc0:	2b01      	cmp	r3, #1
 801cbc2:	d108      	bne.n	801cbd6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cbc4:	f240 7002 	movw	r0, #1794	; 0x702
 801cbc8:	f000 f878 	bl	801ccbc <SUBGRF_ReadRegister>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	461a      	mov	r2, r3
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	701a      	strb	r2, [r3, #0]
 801cbd4:	e002      	b.n	801cbdc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cbd6:	7b3a      	ldrb	r2, [r7, #12]
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cbdc:	7b7a      	ldrb	r2, [r7, #13]
 801cbde:	683b      	ldr	r3, [r7, #0]
 801cbe0:	701a      	strb	r2, [r3, #0]
}
 801cbe2:	bf00      	nop
 801cbe4:	3710      	adds	r7, #16
 801cbe6:	46bd      	mov	sp, r7
 801cbe8:	bd80      	pop	{r7, pc}
 801cbea:	bf00      	nop
 801cbec:	200018c6 	.word	0x200018c6

0801cbf0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b084      	sub	sp, #16
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cbf8:	f107 030c 	add.w	r3, r7, #12
 801cbfc:	2203      	movs	r2, #3
 801cbfe:	4619      	mov	r1, r3
 801cc00:	2014      	movs	r0, #20
 801cc02:	f000 f919 	bl	801ce38 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cc06:	f7ff fd53 	bl	801c6b0 <SUBGRF_GetPacketType>
 801cc0a:	4603      	mov	r3, r0
 801cc0c:	461a      	mov	r2, r3
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d002      	beq.n	801cc20 <SUBGRF_GetPacketStatus+0x30>
 801cc1a:	2b01      	cmp	r3, #1
 801cc1c:	d013      	beq.n	801cc46 <SUBGRF_GetPacketStatus+0x56>
 801cc1e:	e02a      	b.n	801cc76 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cc20:	7b3a      	ldrb	r2, [r7, #12]
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801cc26:	7b7b      	ldrb	r3, [r7, #13]
 801cc28:	425b      	negs	r3, r3
 801cc2a:	105b      	asrs	r3, r3, #1
 801cc2c:	b25a      	sxtb	r2, r3
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801cc32:	7bbb      	ldrb	r3, [r7, #14]
 801cc34:	425b      	negs	r3, r3
 801cc36:	105b      	asrs	r3, r3, #1
 801cc38:	b25a      	sxtb	r2, r3
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	2200      	movs	r2, #0
 801cc42:	609a      	str	r2, [r3, #8]
            break;
 801cc44:	e020      	b.n	801cc88 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801cc46:	7b3b      	ldrb	r3, [r7, #12]
 801cc48:	425b      	negs	r3, r3
 801cc4a:	105b      	asrs	r3, r3, #1
 801cc4c:	b25a      	sxtb	r2, r3
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801cc52:	7b7b      	ldrb	r3, [r7, #13]
 801cc54:	b25b      	sxtb	r3, r3
 801cc56:	3302      	adds	r3, #2
 801cc58:	109b      	asrs	r3, r3, #2
 801cc5a:	b25a      	sxtb	r2, r3
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801cc60:	7bbb      	ldrb	r3, [r7, #14]
 801cc62:	425b      	negs	r3, r3
 801cc64:	105b      	asrs	r3, r3, #1
 801cc66:	b25a      	sxtb	r2, r3
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801cc6c:	4b08      	ldr	r3, [pc, #32]	; (801cc90 <SUBGRF_GetPacketStatus+0xa0>)
 801cc6e:	681a      	ldr	r2, [r3, #0]
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	611a      	str	r2, [r3, #16]
            break;
 801cc74:	e008      	b.n	801cc88 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801cc76:	2214      	movs	r2, #20
 801cc78:	2100      	movs	r1, #0
 801cc7a:	6878      	ldr	r0, [r7, #4]
 801cc7c:	f000 fc03 	bl	801d486 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	220f      	movs	r2, #15
 801cc84:	701a      	strb	r2, [r3, #0]
            break;
 801cc86:	bf00      	nop
    }
}
 801cc88:	bf00      	nop
 801cc8a:	3710      	adds	r7, #16
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bd80      	pop	{r7, pc}
 801cc90:	200018c8 	.word	0x200018c8

0801cc94 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b082      	sub	sp, #8
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	460a      	mov	r2, r1
 801cc9e:	80fb      	strh	r3, [r7, #6]
 801cca0:	4613      	mov	r3, r2
 801cca2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cca4:	1d7a      	adds	r2, r7, #5
 801cca6:	88f9      	ldrh	r1, [r7, #6]
 801cca8:	2301      	movs	r3, #1
 801ccaa:	4803      	ldr	r0, [pc, #12]	; (801ccb8 <SUBGRF_WriteRegister+0x24>)
 801ccac:	f7ed f924 	bl	8009ef8 <HAL_SUBGHZ_WriteRegisters>
}
 801ccb0:	bf00      	nop
 801ccb2:	3708      	adds	r7, #8
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bd80      	pop	{r7, pc}
 801ccb8:	200003a8 	.word	0x200003a8

0801ccbc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801ccbc:	b580      	push	{r7, lr}
 801ccbe:	b084      	sub	sp, #16
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	4603      	mov	r3, r0
 801ccc4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801ccc6:	f107 020f 	add.w	r2, r7, #15
 801ccca:	88f9      	ldrh	r1, [r7, #6]
 801cccc:	2301      	movs	r3, #1
 801ccce:	4804      	ldr	r0, [pc, #16]	; (801cce0 <SUBGRF_ReadRegister+0x24>)
 801ccd0:	f7ed f971 	bl	8009fb6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801ccd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccd6:	4618      	mov	r0, r3
 801ccd8:	3710      	adds	r7, #16
 801ccda:	46bd      	mov	sp, r7
 801ccdc:	bd80      	pop	{r7, pc}
 801ccde:	bf00      	nop
 801cce0:	200003a8 	.word	0x200003a8

0801cce4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b086      	sub	sp, #24
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	4603      	mov	r3, r0
 801ccec:	6039      	str	r1, [r7, #0]
 801ccee:	80fb      	strh	r3, [r7, #6]
 801ccf0:	4613      	mov	r3, r2
 801ccf2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccf4:	f3ef 8310 	mrs	r3, PRIMASK
 801ccf8:	60fb      	str	r3, [r7, #12]
  return(result);
 801ccfa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ccfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccfe:	b672      	cpsid	i
}
 801cd00:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cd02:	88bb      	ldrh	r3, [r7, #4]
 801cd04:	88f9      	ldrh	r1, [r7, #6]
 801cd06:	683a      	ldr	r2, [r7, #0]
 801cd08:	4806      	ldr	r0, [pc, #24]	; (801cd24 <SUBGRF_WriteRegisters+0x40>)
 801cd0a:	f7ed f8f5 	bl	8009ef8 <HAL_SUBGHZ_WriteRegisters>
 801cd0e:	697b      	ldr	r3, [r7, #20]
 801cd10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd12:	693b      	ldr	r3, [r7, #16]
 801cd14:	f383 8810 	msr	PRIMASK, r3
}
 801cd18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cd1a:	bf00      	nop
 801cd1c:	3718      	adds	r7, #24
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	bd80      	pop	{r7, pc}
 801cd22:	bf00      	nop
 801cd24:	200003a8 	.word	0x200003a8

0801cd28 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b086      	sub	sp, #24
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	4603      	mov	r3, r0
 801cd30:	6039      	str	r1, [r7, #0]
 801cd32:	80fb      	strh	r3, [r7, #6]
 801cd34:	4613      	mov	r3, r2
 801cd36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd38:	f3ef 8310 	mrs	r3, PRIMASK
 801cd3c:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cd40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd42:	b672      	cpsid	i
}
 801cd44:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801cd46:	88bb      	ldrh	r3, [r7, #4]
 801cd48:	88f9      	ldrh	r1, [r7, #6]
 801cd4a:	683a      	ldr	r2, [r7, #0]
 801cd4c:	4806      	ldr	r0, [pc, #24]	; (801cd68 <SUBGRF_ReadRegisters+0x40>)
 801cd4e:	f7ed f932 	bl	8009fb6 <HAL_SUBGHZ_ReadRegisters>
 801cd52:	697b      	ldr	r3, [r7, #20]
 801cd54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd56:	693b      	ldr	r3, [r7, #16]
 801cd58:	f383 8810 	msr	PRIMASK, r3
}
 801cd5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cd5e:	bf00      	nop
 801cd60:	3718      	adds	r7, #24
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}
 801cd66:	bf00      	nop
 801cd68:	200003a8 	.word	0x200003a8

0801cd6c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801cd6c:	b580      	push	{r7, lr}
 801cd6e:	b086      	sub	sp, #24
 801cd70:	af00      	add	r7, sp, #0
 801cd72:	4603      	mov	r3, r0
 801cd74:	6039      	str	r1, [r7, #0]
 801cd76:	71fb      	strb	r3, [r7, #7]
 801cd78:	4613      	mov	r3, r2
 801cd7a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd7c:	f3ef 8310 	mrs	r3, PRIMASK
 801cd80:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cd84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd86:	b672      	cpsid	i
}
 801cd88:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801cd8a:	79bb      	ldrb	r3, [r7, #6]
 801cd8c:	b29b      	uxth	r3, r3
 801cd8e:	79f9      	ldrb	r1, [r7, #7]
 801cd90:	683a      	ldr	r2, [r7, #0]
 801cd92:	4806      	ldr	r0, [pc, #24]	; (801cdac <SUBGRF_WriteBuffer+0x40>)
 801cd94:	f7ed fa23 	bl	800a1de <HAL_SUBGHZ_WriteBuffer>
 801cd98:	697b      	ldr	r3, [r7, #20]
 801cd9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd9c:	693b      	ldr	r3, [r7, #16]
 801cd9e:	f383 8810 	msr	PRIMASK, r3
}
 801cda2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cda4:	bf00      	nop
 801cda6:	3718      	adds	r7, #24
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bd80      	pop	{r7, pc}
 801cdac:	200003a8 	.word	0x200003a8

0801cdb0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	b086      	sub	sp, #24
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	6039      	str	r1, [r7, #0]
 801cdba:	71fb      	strb	r3, [r7, #7]
 801cdbc:	4613      	mov	r3, r2
 801cdbe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdc0:	f3ef 8310 	mrs	r3, PRIMASK
 801cdc4:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdc6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdca:	b672      	cpsid	i
}
 801cdcc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801cdce:	79bb      	ldrb	r3, [r7, #6]
 801cdd0:	b29b      	uxth	r3, r3
 801cdd2:	79f9      	ldrb	r1, [r7, #7]
 801cdd4:	683a      	ldr	r2, [r7, #0]
 801cdd6:	4806      	ldr	r0, [pc, #24]	; (801cdf0 <SUBGRF_ReadBuffer+0x40>)
 801cdd8:	f7ed fa54 	bl	800a284 <HAL_SUBGHZ_ReadBuffer>
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cde0:	693b      	ldr	r3, [r7, #16]
 801cde2:	f383 8810 	msr	PRIMASK, r3
}
 801cde6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cde8:	bf00      	nop
 801cdea:	3718      	adds	r7, #24
 801cdec:	46bd      	mov	sp, r7
 801cdee:	bd80      	pop	{r7, pc}
 801cdf0:	200003a8 	.word	0x200003a8

0801cdf4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801cdf4:	b580      	push	{r7, lr}
 801cdf6:	b086      	sub	sp, #24
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	6039      	str	r1, [r7, #0]
 801cdfe:	71fb      	strb	r3, [r7, #7]
 801ce00:	4613      	mov	r3, r2
 801ce02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce04:	f3ef 8310 	mrs	r3, PRIMASK
 801ce08:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce0e:	b672      	cpsid	i
}
 801ce10:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ce12:	88bb      	ldrh	r3, [r7, #4]
 801ce14:	79f9      	ldrb	r1, [r7, #7]
 801ce16:	683a      	ldr	r2, [r7, #0]
 801ce18:	4806      	ldr	r0, [pc, #24]	; (801ce34 <SUBGRF_WriteCommand+0x40>)
 801ce1a:	f7ed f92d 	bl	800a078 <HAL_SUBGHZ_ExecSetCmd>
 801ce1e:	697b      	ldr	r3, [r7, #20]
 801ce20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce22:	693b      	ldr	r3, [r7, #16]
 801ce24:	f383 8810 	msr	PRIMASK, r3
}
 801ce28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce2a:	bf00      	nop
 801ce2c:	3718      	adds	r7, #24
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	bd80      	pop	{r7, pc}
 801ce32:	bf00      	nop
 801ce34:	200003a8 	.word	0x200003a8

0801ce38 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b086      	sub	sp, #24
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	4603      	mov	r3, r0
 801ce40:	6039      	str	r1, [r7, #0]
 801ce42:	71fb      	strb	r3, [r7, #7]
 801ce44:	4613      	mov	r3, r2
 801ce46:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce48:	f3ef 8310 	mrs	r3, PRIMASK
 801ce4c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce52:	b672      	cpsid	i
}
 801ce54:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ce56:	88bb      	ldrh	r3, [r7, #4]
 801ce58:	79f9      	ldrb	r1, [r7, #7]
 801ce5a:	683a      	ldr	r2, [r7, #0]
 801ce5c:	4806      	ldr	r0, [pc, #24]	; (801ce78 <SUBGRF_ReadCommand+0x40>)
 801ce5e:	f7ed f96a 	bl	800a136 <HAL_SUBGHZ_ExecGetCmd>
 801ce62:	697b      	ldr	r3, [r7, #20]
 801ce64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce66:	693b      	ldr	r3, [r7, #16]
 801ce68:	f383 8810 	msr	PRIMASK, r3
}
 801ce6c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce6e:	bf00      	nop
 801ce70:	3718      	adds	r7, #24
 801ce72:	46bd      	mov	sp, r7
 801ce74:	bd80      	pop	{r7, pc}
 801ce76:	bf00      	nop
 801ce78:	200003a8 	.word	0x200003a8

0801ce7c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b084      	sub	sp, #16
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	4603      	mov	r3, r0
 801ce84:	460a      	mov	r2, r1
 801ce86:	71fb      	strb	r3, [r7, #7]
 801ce88:	4613      	mov	r3, r2
 801ce8a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801ce8c:	2301      	movs	r3, #1
 801ce8e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801ce90:	79bb      	ldrb	r3, [r7, #6]
 801ce92:	2b01      	cmp	r3, #1
 801ce94:	d10d      	bne.n	801ceb2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801ce96:	79fb      	ldrb	r3, [r7, #7]
 801ce98:	2b01      	cmp	r3, #1
 801ce9a:	d104      	bne.n	801cea6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801ce9c:	2302      	movs	r3, #2
 801ce9e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cea0:	2004      	movs	r0, #4
 801cea2:	f000 f8ef 	bl	801d084 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cea6:	79fb      	ldrb	r3, [r7, #7]
 801cea8:	2b02      	cmp	r3, #2
 801ceaa:	d107      	bne.n	801cebc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801ceac:	2303      	movs	r3, #3
 801ceae:	73fb      	strb	r3, [r7, #15]
 801ceb0:	e004      	b.n	801cebc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801ceb2:	79bb      	ldrb	r3, [r7, #6]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d101      	bne.n	801cebc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801ceb8:	2301      	movs	r3, #1
 801ceba:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cebc:	7bfb      	ldrb	r3, [r7, #15]
 801cebe:	4618      	mov	r0, r3
 801cec0:	f7f0 fef3 	bl	800dcaa <RBI_ConfigRFSwitch>
}
 801cec4:	bf00      	nop
 801cec6:	3710      	adds	r7, #16
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}

0801cecc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b084      	sub	sp, #16
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	4603      	mov	r3, r0
 801ced4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801ced6:	2301      	movs	r3, #1
 801ced8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801ceda:	f7f0 fef4 	bl	800dcc6 <RBI_GetTxConfig>
 801cede:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cee0:	68bb      	ldr	r3, [r7, #8]
 801cee2:	2b02      	cmp	r3, #2
 801cee4:	d016      	beq.n	801cf14 <SUBGRF_SetRfTxPower+0x48>
 801cee6:	68bb      	ldr	r3, [r7, #8]
 801cee8:	2b02      	cmp	r3, #2
 801ceea:	dc16      	bgt.n	801cf1a <SUBGRF_SetRfTxPower+0x4e>
 801ceec:	68bb      	ldr	r3, [r7, #8]
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d003      	beq.n	801cefa <SUBGRF_SetRfTxPower+0x2e>
 801cef2:	68bb      	ldr	r3, [r7, #8]
 801cef4:	2b01      	cmp	r3, #1
 801cef6:	d00a      	beq.n	801cf0e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cef8:	e00f      	b.n	801cf1a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cefa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cefe:	2b0f      	cmp	r3, #15
 801cf00:	dd02      	ble.n	801cf08 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cf02:	2302      	movs	r3, #2
 801cf04:	73fb      	strb	r3, [r7, #15]
            break;
 801cf06:	e009      	b.n	801cf1c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cf08:	2301      	movs	r3, #1
 801cf0a:	73fb      	strb	r3, [r7, #15]
            break;
 801cf0c:	e006      	b.n	801cf1c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cf0e:	2301      	movs	r3, #1
 801cf10:	73fb      	strb	r3, [r7, #15]
            break;
 801cf12:	e003      	b.n	801cf1c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cf14:	2302      	movs	r3, #2
 801cf16:	73fb      	strb	r3, [r7, #15]
            break;
 801cf18:	e000      	b.n	801cf1c <SUBGRF_SetRfTxPower+0x50>
            break;
 801cf1a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cf1c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cf20:	7bfb      	ldrb	r3, [r7, #15]
 801cf22:	2202      	movs	r2, #2
 801cf24:	4618      	mov	r0, r3
 801cf26:	f7ff fbcd 	bl	801c6c4 <SUBGRF_SetTxParams>

    return paSelect;
 801cf2a:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	3710      	adds	r7, #16
 801cf30:	46bd      	mov	sp, r7
 801cf32:	bd80      	pop	{r7, pc}

0801cf34 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cf34:	b480      	push	{r7}
 801cf36:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cf38:	2301      	movs	r3, #1
}
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bc80      	pop	{r7}
 801cf40:	4770      	bx	lr
	...

0801cf44 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b082      	sub	sp, #8
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cf4c:	4b03      	ldr	r3, [pc, #12]	; (801cf5c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	2001      	movs	r0, #1
 801cf52:	4798      	blx	r3
}
 801cf54:	bf00      	nop
 801cf56:	3708      	adds	r7, #8
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	bd80      	pop	{r7, pc}
 801cf5c:	200018d0 	.word	0x200018d0

0801cf60 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b082      	sub	sp, #8
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801cf68:	4b03      	ldr	r3, [pc, #12]	; (801cf78 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	2002      	movs	r0, #2
 801cf6e:	4798      	blx	r3
}
 801cf70:	bf00      	nop
 801cf72:	3708      	adds	r7, #8
 801cf74:	46bd      	mov	sp, r7
 801cf76:	bd80      	pop	{r7, pc}
 801cf78:	200018d0 	.word	0x200018d0

0801cf7c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b082      	sub	sp, #8
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801cf84:	4b03      	ldr	r3, [pc, #12]	; (801cf94 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	2040      	movs	r0, #64	; 0x40
 801cf8a:	4798      	blx	r3
}
 801cf8c:	bf00      	nop
 801cf8e:	3708      	adds	r7, #8
 801cf90:	46bd      	mov	sp, r7
 801cf92:	bd80      	pop	{r7, pc}
 801cf94:	200018d0 	.word	0x200018d0

0801cf98 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b082      	sub	sp, #8
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	6078      	str	r0, [r7, #4]
 801cfa0:	460b      	mov	r3, r1
 801cfa2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801cfa4:	78fb      	ldrb	r3, [r7, #3]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d002      	beq.n	801cfb0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801cfaa:	2b01      	cmp	r3, #1
 801cfac:	d005      	beq.n	801cfba <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801cfae:	e00a      	b.n	801cfc6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801cfb0:	4b07      	ldr	r3, [pc, #28]	; (801cfd0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	2080      	movs	r0, #128	; 0x80
 801cfb6:	4798      	blx	r3
            break;
 801cfb8:	e005      	b.n	801cfc6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801cfba:	4b05      	ldr	r3, [pc, #20]	; (801cfd0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 801cfc2:	4798      	blx	r3
            break;
 801cfc4:	bf00      	nop
    }
}
 801cfc6:	bf00      	nop
 801cfc8:	3708      	adds	r7, #8
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	200018d0 	.word	0x200018d0

0801cfd4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b082      	sub	sp, #8
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801cfdc:	4b04      	ldr	r3, [pc, #16]	; (801cff0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801cfe4:	4798      	blx	r3
}
 801cfe6:	bf00      	nop
 801cfe8:	3708      	adds	r7, #8
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd80      	pop	{r7, pc}
 801cfee:	bf00      	nop
 801cff0:	200018d0 	.word	0x200018d0

0801cff4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b082      	sub	sp, #8
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801cffc:	4b03      	ldr	r3, [pc, #12]	; (801d00c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	2020      	movs	r0, #32
 801d002:	4798      	blx	r3
}
 801d004:	bf00      	nop
 801d006:	3708      	adds	r7, #8
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd80      	pop	{r7, pc}
 801d00c:	200018d0 	.word	0x200018d0

0801d010 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b082      	sub	sp, #8
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d018:	4b03      	ldr	r3, [pc, #12]	; (801d028 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	2004      	movs	r0, #4
 801d01e:	4798      	blx	r3
}
 801d020:	bf00      	nop
 801d022:	3708      	adds	r7, #8
 801d024:	46bd      	mov	sp, r7
 801d026:	bd80      	pop	{r7, pc}
 801d028:	200018d0 	.word	0x200018d0

0801d02c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b082      	sub	sp, #8
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d034:	4b03      	ldr	r3, [pc, #12]	; (801d044 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	2008      	movs	r0, #8
 801d03a:	4798      	blx	r3
}
 801d03c:	bf00      	nop
 801d03e:	3708      	adds	r7, #8
 801d040:	46bd      	mov	sp, r7
 801d042:	bd80      	pop	{r7, pc}
 801d044:	200018d0 	.word	0x200018d0

0801d048 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	b082      	sub	sp, #8
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d050:	4b03      	ldr	r3, [pc, #12]	; (801d060 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	2010      	movs	r0, #16
 801d056:	4798      	blx	r3
}
 801d058:	bf00      	nop
 801d05a:	3708      	adds	r7, #8
 801d05c:	46bd      	mov	sp, r7
 801d05e:	bd80      	pop	{r7, pc}
 801d060:	200018d0 	.word	0x200018d0

0801d064 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d064:	b580      	push	{r7, lr}
 801d066:	b082      	sub	sp, #8
 801d068:	af00      	add	r7, sp, #0
 801d06a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d06c:	4b04      	ldr	r3, [pc, #16]	; (801d080 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d074:	4798      	blx	r3
}
 801d076:	bf00      	nop
 801d078:	3708      	adds	r7, #8
 801d07a:	46bd      	mov	sp, r7
 801d07c:	bd80      	pop	{r7, pc}
 801d07e:	bf00      	nop
 801d080:	200018d0 	.word	0x200018d0

0801d084 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b084      	sub	sp, #16
 801d088:	af00      	add	r7, sp, #0
 801d08a:	4603      	mov	r3, r0
 801d08c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d08e:	f7f0 fe28 	bl	800dce2 <RBI_IsDCDC>
 801d092:	4603      	mov	r3, r0
 801d094:	2b01      	cmp	r3, #1
 801d096:	d112      	bne.n	801d0be <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d098:	f640 1023 	movw	r0, #2339	; 0x923
 801d09c:	f7ff fe0e 	bl	801ccbc <SUBGRF_ReadRegister>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d0a4:	7bfb      	ldrb	r3, [r7, #15]
 801d0a6:	f023 0306 	bic.w	r3, r3, #6
 801d0aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d0ac:	7bfa      	ldrb	r2, [r7, #15]
 801d0ae:	79fb      	ldrb	r3, [r7, #7]
 801d0b0:	4313      	orrs	r3, r2
 801d0b2:	b2db      	uxtb	r3, r3
 801d0b4:	4619      	mov	r1, r3
 801d0b6:	f640 1023 	movw	r0, #2339	; 0x923
 801d0ba:	f7ff fdeb 	bl	801cc94 <SUBGRF_WriteRegister>
  }
}
 801d0be:	bf00      	nop
 801d0c0:	3710      	adds	r7, #16
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
	...

0801d0c8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d0c8:	b480      	push	{r7}
 801d0ca:	b085      	sub	sp, #20
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d101      	bne.n	801d0da <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d0d6:	231f      	movs	r3, #31
 801d0d8:	e016      	b.n	801d108 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d0da:	2300      	movs	r3, #0
 801d0dc:	73fb      	strb	r3, [r7, #15]
 801d0de:	e00f      	b.n	801d100 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d0e0:	7bfb      	ldrb	r3, [r7, #15]
 801d0e2:	4a0c      	ldr	r2, [pc, #48]	; (801d114 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d0e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d0e8:	687a      	ldr	r2, [r7, #4]
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	d205      	bcs.n	801d0fa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d0ee:	7bfb      	ldrb	r3, [r7, #15]
 801d0f0:	4a08      	ldr	r2, [pc, #32]	; (801d114 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d0f2:	00db      	lsls	r3, r3, #3
 801d0f4:	4413      	add	r3, r2
 801d0f6:	791b      	ldrb	r3, [r3, #4]
 801d0f8:	e006      	b.n	801d108 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d0fa:	7bfb      	ldrb	r3, [r7, #15]
 801d0fc:	3301      	adds	r3, #1
 801d0fe:	73fb      	strb	r3, [r7, #15]
 801d100:	7bfb      	ldrb	r3, [r7, #15]
 801d102:	2b15      	cmp	r3, #21
 801d104:	d9ec      	bls.n	801d0e0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d106:	e7fe      	b.n	801d106 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d108:	4618      	mov	r0, r3
 801d10a:	3714      	adds	r7, #20
 801d10c:	46bd      	mov	sp, r7
 801d10e:	bc80      	pop	{r7}
 801d110:	4770      	bx	lr
 801d112:	bf00      	nop
 801d114:	0801fa1c 	.word	0x0801fa1c

0801d118 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b08a      	sub	sp, #40	; 0x28
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
 801d120:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d122:	4b35      	ldr	r3, [pc, #212]	; (801d1f8 <SUBGRF_GetCFO+0xe0>)
 801d124:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d126:	f640 0007 	movw	r0, #2055	; 0x807
 801d12a:	f7ff fdc7 	bl	801ccbc <SUBGRF_ReadRegister>
 801d12e:	4603      	mov	r3, r0
 801d130:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d132:	7ffb      	ldrb	r3, [r7, #31]
 801d134:	08db      	lsrs	r3, r3, #3
 801d136:	b2db      	uxtb	r3, r3
 801d138:	f003 0303 	and.w	r3, r3, #3
 801d13c:	3328      	adds	r3, #40	; 0x28
 801d13e:	443b      	add	r3, r7
 801d140:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d144:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d146:	7ffb      	ldrb	r3, [r7, #31]
 801d148:	f003 0307 	and.w	r3, r3, #7
 801d14c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d14e:	7fba      	ldrb	r2, [r7, #30]
 801d150:	7f7b      	ldrb	r3, [r7, #29]
 801d152:	3301      	adds	r3, #1
 801d154:	fa02 f303 	lsl.w	r3, r2, r3
 801d158:	461a      	mov	r2, r3
 801d15a:	4b28      	ldr	r3, [pc, #160]	; (801d1fc <SUBGRF_GetCFO+0xe4>)
 801d15c:	fbb3 f3f2 	udiv	r3, r3, r2
 801d160:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d162:	69ba      	ldr	r2, [r7, #24]
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	fbb2 f3f3 	udiv	r3, r2, r3
 801d16a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d16c:	2301      	movs	r3, #1
 801d16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d176:	697a      	ldr	r2, [r7, #20]
 801d178:	fb02 f303 	mul.w	r3, r2, r3
 801d17c:	2b07      	cmp	r3, #7
 801d17e:	d802      	bhi.n	801d186 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d180:	2302      	movs	r3, #2
 801d182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d18a:	697a      	ldr	r2, [r7, #20]
 801d18c:	fb02 f303 	mul.w	r3, r2, r3
 801d190:	2b03      	cmp	r3, #3
 801d192:	d802      	bhi.n	801d19a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d194:	2304      	movs	r3, #4
 801d196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d19a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d19e:	69bb      	ldr	r3, [r7, #24]
 801d1a0:	fb02 f303 	mul.w	r3, r2, r3
 801d1a4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d1a6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d1aa:	f7ff fd87 	bl	801ccbc <SUBGRF_ReadRegister>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	021b      	lsls	r3, r3, #8
 801d1b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d1b6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d1b8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d1bc:	f7ff fd7e 	bl	801ccbc <SUBGRF_ReadRegister>
 801d1c0:	4603      	mov	r3, r0
 801d1c2:	461a      	mov	r2, r3
 801d1c4:	6a3b      	ldr	r3, [r7, #32]
 801d1c6:	4313      	orrs	r3, r2
 801d1c8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d1ca:	6a3b      	ldr	r3, [r7, #32]
 801d1cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d005      	beq.n	801d1e0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d1d4:	6a3b      	ldr	r3, [r7, #32]
 801d1d6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d1da:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d1de:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d1e0:	693b      	ldr	r3, [r7, #16]
 801d1e2:	095b      	lsrs	r3, r3, #5
 801d1e4:	6a3a      	ldr	r2, [r7, #32]
 801d1e6:	fb02 f303 	mul.w	r3, r2, r3
 801d1ea:	11da      	asrs	r2, r3, #7
 801d1ec:	683b      	ldr	r3, [r7, #0]
 801d1ee:	601a      	str	r2, [r3, #0]
}
 801d1f0:	bf00      	nop
 801d1f2:	3728      	adds	r7, #40	; 0x28
 801d1f4:	46bd      	mov	sp, r7
 801d1f6:	bd80      	pop	{r7, pc}
 801d1f8:	0c0a0804 	.word	0x0c0a0804
 801d1fc:	01e84800 	.word	0x01e84800

0801d200 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d200:	b480      	push	{r7}
 801d202:	b087      	sub	sp, #28
 801d204:	af00      	add	r7, sp, #0
 801d206:	4603      	mov	r3, r0
 801d208:	60b9      	str	r1, [r7, #8]
 801d20a:	607a      	str	r2, [r7, #4]
 801d20c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d20e:	2300      	movs	r3, #0
 801d210:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d212:	f04f 33ff 	mov.w	r3, #4294967295
 801d216:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d218:	697b      	ldr	r3, [r7, #20]
}
 801d21a:	4618      	mov	r0, r3
 801d21c:	371c      	adds	r7, #28
 801d21e:	46bd      	mov	sp, r7
 801d220:	bc80      	pop	{r7}
 801d222:	4770      	bx	lr

0801d224 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d224:	b480      	push	{r7}
 801d226:	b087      	sub	sp, #28
 801d228:	af00      	add	r7, sp, #0
 801d22a:	4603      	mov	r3, r0
 801d22c:	60b9      	str	r1, [r7, #8]
 801d22e:	607a      	str	r2, [r7, #4]
 801d230:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d232:	2300      	movs	r3, #0
 801d234:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d236:	f04f 33ff 	mov.w	r3, #4294967295
 801d23a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d23c:	697b      	ldr	r3, [r7, #20]
}
 801d23e:	4618      	mov	r0, r3
 801d240:	371c      	adds	r7, #28
 801d242:	46bd      	mov	sp, r7
 801d244:	bc80      	pop	{r7}
 801d246:	4770      	bx	lr

0801d248 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d248:	b480      	push	{r7}
 801d24a:	b085      	sub	sp, #20
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	60f8      	str	r0, [r7, #12]
 801d250:	60b9      	str	r1, [r7, #8]
 801d252:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d254:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d258:	4618      	mov	r0, r3
 801d25a:	3714      	adds	r7, #20
 801d25c:	46bd      	mov	sp, r7
 801d25e:	bc80      	pop	{r7}
 801d260:	4770      	bx	lr

0801d262 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d262:	b480      	push	{r7}
 801d264:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d266:	bf00      	nop
 801d268:	46bd      	mov	sp, r7
 801d26a:	bc80      	pop	{r7}
 801d26c:	4770      	bx	lr

0801d26e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d26e:	b480      	push	{r7}
 801d270:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d272:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d274:	4618      	mov	r0, r3
 801d276:	46bd      	mov	sp, r7
 801d278:	bc80      	pop	{r7}
 801d27a:	4770      	bx	lr

0801d27c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d27c:	b480      	push	{r7}
 801d27e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d280:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d282:	4618      	mov	r0, r3
 801d284:	46bd      	mov	sp, r7
 801d286:	bc80      	pop	{r7}
 801d288:	4770      	bx	lr

0801d28a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d28a:	b480      	push	{r7}
 801d28c:	b083      	sub	sp, #12
 801d28e:	af00      	add	r7, sp, #0
 801d290:	4603      	mov	r3, r0
 801d292:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d294:	bf00      	nop
 801d296:	370c      	adds	r7, #12
 801d298:	46bd      	mov	sp, r7
 801d29a:	bc80      	pop	{r7}
 801d29c:	4770      	bx	lr

0801d29e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d29e:	b480      	push	{r7}
 801d2a0:	b087      	sub	sp, #28
 801d2a2:	af00      	add	r7, sp, #0
 801d2a4:	60f8      	str	r0, [r7, #12]
 801d2a6:	460b      	mov	r3, r1
 801d2a8:	607a      	str	r2, [r7, #4]
 801d2aa:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d2ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d2b0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d2b2:	697b      	ldr	r3, [r7, #20]
}
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	371c      	adds	r7, #28
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	bc80      	pop	{r7}
 801d2bc:	4770      	bx	lr

0801d2be <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d2be:	b480      	push	{r7}
 801d2c0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d2c2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	46bd      	mov	sp, r7
 801d2ca:	bc80      	pop	{r7}
 801d2cc:	4770      	bx	lr

0801d2ce <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d2ce:	b480      	push	{r7}
 801d2d0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d2d2:	bf00      	nop
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bc80      	pop	{r7}
 801d2d8:	4770      	bx	lr

0801d2da <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d2da:	b480      	push	{r7}
 801d2dc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d2de:	bf00      	nop
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	bc80      	pop	{r7}
 801d2e4:	4770      	bx	lr

0801d2e6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d2e6:	b480      	push	{r7}
 801d2e8:	b083      	sub	sp, #12
 801d2ea:	af00      	add	r7, sp, #0
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d2f0:	bf00      	nop
 801d2f2:	370c      	adds	r7, #12
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	bc80      	pop	{r7}
 801d2f8:	4770      	bx	lr
	...

0801d2fc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d2fc:	b480      	push	{r7}
 801d2fe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d300:	4b04      	ldr	r3, [pc, #16]	; (801d314 <UTIL_LPM_Init+0x18>)
 801d302:	2200      	movs	r2, #0
 801d304:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d306:	4b04      	ldr	r3, [pc, #16]	; (801d318 <UTIL_LPM_Init+0x1c>)
 801d308:	2200      	movs	r2, #0
 801d30a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d30c:	bf00      	nop
 801d30e:	46bd      	mov	sp, r7
 801d310:	bc80      	pop	{r7}
 801d312:	4770      	bx	lr
 801d314:	200018d4 	.word	0x200018d4
 801d318:	200018d8 	.word	0x200018d8

0801d31c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d31c:	b480      	push	{r7}
 801d31e:	b087      	sub	sp, #28
 801d320:	af00      	add	r7, sp, #0
 801d322:	6078      	str	r0, [r7, #4]
 801d324:	460b      	mov	r3, r1
 801d326:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d328:	f3ef 8310 	mrs	r3, PRIMASK
 801d32c:	613b      	str	r3, [r7, #16]
  return(result);
 801d32e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d332:	b672      	cpsid	i
}
 801d334:	bf00      	nop
  
  switch( state )
 801d336:	78fb      	ldrb	r3, [r7, #3]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d008      	beq.n	801d34e <UTIL_LPM_SetStopMode+0x32>
 801d33c:	2b01      	cmp	r3, #1
 801d33e:	d10e      	bne.n	801d35e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d340:	4b0d      	ldr	r3, [pc, #52]	; (801d378 <UTIL_LPM_SetStopMode+0x5c>)
 801d342:	681a      	ldr	r2, [r3, #0]
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	4313      	orrs	r3, r2
 801d348:	4a0b      	ldr	r2, [pc, #44]	; (801d378 <UTIL_LPM_SetStopMode+0x5c>)
 801d34a:	6013      	str	r3, [r2, #0]
      break;
 801d34c:	e008      	b.n	801d360 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	43da      	mvns	r2, r3
 801d352:	4b09      	ldr	r3, [pc, #36]	; (801d378 <UTIL_LPM_SetStopMode+0x5c>)
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	4013      	ands	r3, r2
 801d358:	4a07      	ldr	r2, [pc, #28]	; (801d378 <UTIL_LPM_SetStopMode+0x5c>)
 801d35a:	6013      	str	r3, [r2, #0]
      break;
 801d35c:	e000      	b.n	801d360 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d35e:	bf00      	nop
 801d360:	697b      	ldr	r3, [r7, #20]
 801d362:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	f383 8810 	msr	PRIMASK, r3
}
 801d36a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d36c:	bf00      	nop
 801d36e:	371c      	adds	r7, #28
 801d370:	46bd      	mov	sp, r7
 801d372:	bc80      	pop	{r7}
 801d374:	4770      	bx	lr
 801d376:	bf00      	nop
 801d378:	200018d4 	.word	0x200018d4

0801d37c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d37c:	b480      	push	{r7}
 801d37e:	b087      	sub	sp, #28
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
 801d384:	460b      	mov	r3, r1
 801d386:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d388:	f3ef 8310 	mrs	r3, PRIMASK
 801d38c:	613b      	str	r3, [r7, #16]
  return(result);
 801d38e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d392:	b672      	cpsid	i
}
 801d394:	bf00      	nop
  
  switch(state)
 801d396:	78fb      	ldrb	r3, [r7, #3]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d008      	beq.n	801d3ae <UTIL_LPM_SetOffMode+0x32>
 801d39c:	2b01      	cmp	r3, #1
 801d39e:	d10e      	bne.n	801d3be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d3a0:	4b0d      	ldr	r3, [pc, #52]	; (801d3d8 <UTIL_LPM_SetOffMode+0x5c>)
 801d3a2:	681a      	ldr	r2, [r3, #0]
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	4313      	orrs	r3, r2
 801d3a8:	4a0b      	ldr	r2, [pc, #44]	; (801d3d8 <UTIL_LPM_SetOffMode+0x5c>)
 801d3aa:	6013      	str	r3, [r2, #0]
      break;
 801d3ac:	e008      	b.n	801d3c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	43da      	mvns	r2, r3
 801d3b2:	4b09      	ldr	r3, [pc, #36]	; (801d3d8 <UTIL_LPM_SetOffMode+0x5c>)
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	4013      	ands	r3, r2
 801d3b8:	4a07      	ldr	r2, [pc, #28]	; (801d3d8 <UTIL_LPM_SetOffMode+0x5c>)
 801d3ba:	6013      	str	r3, [r2, #0]
      break;
 801d3bc:	e000      	b.n	801d3c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d3be:	bf00      	nop
 801d3c0:	697b      	ldr	r3, [r7, #20]
 801d3c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	f383 8810 	msr	PRIMASK, r3
}
 801d3ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d3cc:	bf00      	nop
 801d3ce:	371c      	adds	r7, #28
 801d3d0:	46bd      	mov	sp, r7
 801d3d2:	bc80      	pop	{r7}
 801d3d4:	4770      	bx	lr
 801d3d6:	bf00      	nop
 801d3d8:	200018d8 	.word	0x200018d8

0801d3dc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b084      	sub	sp, #16
 801d3e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3e2:	f3ef 8310 	mrs	r3, PRIMASK
 801d3e6:	60bb      	str	r3, [r7, #8]
  return(result);
 801d3e8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d3ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3ec:	b672      	cpsid	i
}
 801d3ee:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d3f0:	4b12      	ldr	r3, [pc, #72]	; (801d43c <UTIL_LPM_EnterLowPower+0x60>)
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d006      	beq.n	801d406 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d3f8:	4b11      	ldr	r3, [pc, #68]	; (801d440 <UTIL_LPM_EnterLowPower+0x64>)
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d3fe:	4b10      	ldr	r3, [pc, #64]	; (801d440 <UTIL_LPM_EnterLowPower+0x64>)
 801d400:	685b      	ldr	r3, [r3, #4]
 801d402:	4798      	blx	r3
 801d404:	e010      	b.n	801d428 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d406:	4b0f      	ldr	r3, [pc, #60]	; (801d444 <UTIL_LPM_EnterLowPower+0x68>)
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d006      	beq.n	801d41c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d40e:	4b0c      	ldr	r3, [pc, #48]	; (801d440 <UTIL_LPM_EnterLowPower+0x64>)
 801d410:	689b      	ldr	r3, [r3, #8]
 801d412:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d414:	4b0a      	ldr	r3, [pc, #40]	; (801d440 <UTIL_LPM_EnterLowPower+0x64>)
 801d416:	68db      	ldr	r3, [r3, #12]
 801d418:	4798      	blx	r3
 801d41a:	e005      	b.n	801d428 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d41c:	4b08      	ldr	r3, [pc, #32]	; (801d440 <UTIL_LPM_EnterLowPower+0x64>)
 801d41e:	691b      	ldr	r3, [r3, #16]
 801d420:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d422:	4b07      	ldr	r3, [pc, #28]	; (801d440 <UTIL_LPM_EnterLowPower+0x64>)
 801d424:	695b      	ldr	r3, [r3, #20]
 801d426:	4798      	blx	r3
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	f383 8810 	msr	PRIMASK, r3
}
 801d432:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d434:	bf00      	nop
 801d436:	3710      	adds	r7, #16
 801d438:	46bd      	mov	sp, r7
 801d43a:	bd80      	pop	{r7, pc}
 801d43c:	200018d4 	.word	0x200018d4
 801d440:	0801f490 	.word	0x0801f490
 801d444:	200018d8 	.word	0x200018d8

0801d448 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d448:	b480      	push	{r7}
 801d44a:	b087      	sub	sp, #28
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	60f8      	str	r0, [r7, #12]
 801d450:	60b9      	str	r1, [r7, #8]
 801d452:	4613      	mov	r3, r2
 801d454:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d45a:	68bb      	ldr	r3, [r7, #8]
 801d45c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d45e:	e007      	b.n	801d470 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d460:	693a      	ldr	r2, [r7, #16]
 801d462:	1c53      	adds	r3, r2, #1
 801d464:	613b      	str	r3, [r7, #16]
 801d466:	697b      	ldr	r3, [r7, #20]
 801d468:	1c59      	adds	r1, r3, #1
 801d46a:	6179      	str	r1, [r7, #20]
 801d46c:	7812      	ldrb	r2, [r2, #0]
 801d46e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d470:	88fb      	ldrh	r3, [r7, #6]
 801d472:	1e5a      	subs	r2, r3, #1
 801d474:	80fa      	strh	r2, [r7, #6]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d1f2      	bne.n	801d460 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d47a:	bf00      	nop
 801d47c:	bf00      	nop
 801d47e:	371c      	adds	r7, #28
 801d480:	46bd      	mov	sp, r7
 801d482:	bc80      	pop	{r7}
 801d484:	4770      	bx	lr

0801d486 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d486:	b480      	push	{r7}
 801d488:	b085      	sub	sp, #20
 801d48a:	af00      	add	r7, sp, #0
 801d48c:	6078      	str	r0, [r7, #4]
 801d48e:	460b      	mov	r3, r1
 801d490:	70fb      	strb	r3, [r7, #3]
 801d492:	4613      	mov	r3, r2
 801d494:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d49a:	e004      	b.n	801d4a6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	1c5a      	adds	r2, r3, #1
 801d4a0:	60fa      	str	r2, [r7, #12]
 801d4a2:	78fa      	ldrb	r2, [r7, #3]
 801d4a4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d4a6:	883b      	ldrh	r3, [r7, #0]
 801d4a8:	1e5a      	subs	r2, r3, #1
 801d4aa:	803a      	strh	r2, [r7, #0]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d1f5      	bne.n	801d49c <UTIL_MEM_set_8+0x16>
  }
}
 801d4b0:	bf00      	nop
 801d4b2:	bf00      	nop
 801d4b4:	3714      	adds	r7, #20
 801d4b6:	46bd      	mov	sp, r7
 801d4b8:	bc80      	pop	{r7}
 801d4ba:	4770      	bx	lr

0801d4bc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d4bc:	b082      	sub	sp, #8
 801d4be:	b480      	push	{r7}
 801d4c0:	b087      	sub	sp, #28
 801d4c2:	af00      	add	r7, sp, #0
 801d4c4:	60f8      	str	r0, [r7, #12]
 801d4c6:	1d38      	adds	r0, r7, #4
 801d4c8:	e880 0006 	stmia.w	r0, {r1, r2}
 801d4cc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	613b      	str	r3, [r7, #16]
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d4d6:	687a      	ldr	r2, [r7, #4]
 801d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4da:	4413      	add	r3, r2
 801d4dc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d4de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d4e2:	b29a      	uxth	r2, r3
 801d4e4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d4e8:	b29b      	uxth	r3, r3
 801d4ea:	4413      	add	r3, r2
 801d4ec:	b29b      	uxth	r3, r3
 801d4ee:	b21b      	sxth	r3, r3
 801d4f0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d4f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d4f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d4fa:	db0a      	blt.n	801d512 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d4fc:	693b      	ldr	r3, [r7, #16]
 801d4fe:	3301      	adds	r3, #1
 801d500:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d502:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d506:	b29b      	uxth	r3, r3
 801d508:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d50c:	b29b      	uxth	r3, r3
 801d50e:	b21b      	sxth	r3, r3
 801d510:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	461a      	mov	r2, r3
 801d516:	f107 0310 	add.w	r3, r7, #16
 801d51a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d51e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d522:	68f8      	ldr	r0, [r7, #12]
 801d524:	371c      	adds	r7, #28
 801d526:	46bd      	mov	sp, r7
 801d528:	bc80      	pop	{r7}
 801d52a:	b002      	add	sp, #8
 801d52c:	4770      	bx	lr

0801d52e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d52e:	b082      	sub	sp, #8
 801d530:	b480      	push	{r7}
 801d532:	b087      	sub	sp, #28
 801d534:	af00      	add	r7, sp, #0
 801d536:	60f8      	str	r0, [r7, #12]
 801d538:	1d38      	adds	r0, r7, #4
 801d53a:	e880 0006 	stmia.w	r0, {r1, r2}
 801d53e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d540:	2300      	movs	r3, #0
 801d542:	613b      	str	r3, [r7, #16]
 801d544:	2300      	movs	r3, #0
 801d546:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d548:	687a      	ldr	r2, [r7, #4]
 801d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d54c:	1ad3      	subs	r3, r2, r3
 801d54e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d550:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d554:	b29a      	uxth	r2, r3
 801d556:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d55a:	b29b      	uxth	r3, r3
 801d55c:	1ad3      	subs	r3, r2, r3
 801d55e:	b29b      	uxth	r3, r3
 801d560:	b21b      	sxth	r3, r3
 801d562:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d564:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	da0a      	bge.n	801d582 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d56c:	693b      	ldr	r3, [r7, #16]
 801d56e:	3b01      	subs	r3, #1
 801d570:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d572:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d576:	b29b      	uxth	r3, r3
 801d578:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d57c:	b29b      	uxth	r3, r3
 801d57e:	b21b      	sxth	r3, r3
 801d580:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	461a      	mov	r2, r3
 801d586:	f107 0310 	add.w	r3, r7, #16
 801d58a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d58e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d592:	68f8      	ldr	r0, [r7, #12]
 801d594:	371c      	adds	r7, #28
 801d596:	46bd      	mov	sp, r7
 801d598:	bc80      	pop	{r7}
 801d59a:	b002      	add	sp, #8
 801d59c:	4770      	bx	lr
	...

0801d5a0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b088      	sub	sp, #32
 801d5a4:	af02      	add	r7, sp, #8
 801d5a6:	463b      	mov	r3, r7
 801d5a8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	60bb      	str	r3, [r7, #8]
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d5b4:	4b10      	ldr	r3, [pc, #64]	; (801d5f8 <SysTimeSet+0x58>)
 801d5b6:	691b      	ldr	r3, [r3, #16]
 801d5b8:	f107 0208 	add.w	r2, r7, #8
 801d5bc:	3204      	adds	r2, #4
 801d5be:	4610      	mov	r0, r2
 801d5c0:	4798      	blx	r3
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d5c6:	f107 0010 	add.w	r0, r7, #16
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	9300      	str	r3, [sp, #0]
 801d5ce:	68bb      	ldr	r3, [r7, #8]
 801d5d0:	463a      	mov	r2, r7
 801d5d2:	ca06      	ldmia	r2, {r1, r2}
 801d5d4:	f7ff ffab 	bl	801d52e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d5d8:	4b07      	ldr	r3, [pc, #28]	; (801d5f8 <SysTimeSet+0x58>)
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	693a      	ldr	r2, [r7, #16]
 801d5de:	4610      	mov	r0, r2
 801d5e0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d5e2:	4b05      	ldr	r3, [pc, #20]	; (801d5f8 <SysTimeSet+0x58>)
 801d5e4:	689b      	ldr	r3, [r3, #8]
 801d5e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d5ea:	4610      	mov	r0, r2
 801d5ec:	4798      	blx	r3
}
 801d5ee:	bf00      	nop
 801d5f0:	3718      	adds	r7, #24
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	bd80      	pop	{r7, pc}
 801d5f6:	bf00      	nop
 801d5f8:	0801f574 	.word	0x0801f574

0801d5fc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b08a      	sub	sp, #40	; 0x28
 801d600:	af02      	add	r7, sp, #8
 801d602:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d604:	2300      	movs	r3, #0
 801d606:	61bb      	str	r3, [r7, #24]
 801d608:	2300      	movs	r3, #0
 801d60a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d60c:	2300      	movs	r3, #0
 801d60e:	613b      	str	r3, [r7, #16]
 801d610:	2300      	movs	r3, #0
 801d612:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d614:	4b14      	ldr	r3, [pc, #80]	; (801d668 <SysTimeGet+0x6c>)
 801d616:	691b      	ldr	r3, [r3, #16]
 801d618:	f107 0218 	add.w	r2, r7, #24
 801d61c:	3204      	adds	r2, #4
 801d61e:	4610      	mov	r0, r2
 801d620:	4798      	blx	r3
 801d622:	4603      	mov	r3, r0
 801d624:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d626:	4b10      	ldr	r3, [pc, #64]	; (801d668 <SysTimeGet+0x6c>)
 801d628:	68db      	ldr	r3, [r3, #12]
 801d62a:	4798      	blx	r3
 801d62c:	4603      	mov	r3, r0
 801d62e:	b21b      	sxth	r3, r3
 801d630:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d632:	4b0d      	ldr	r3, [pc, #52]	; (801d668 <SysTimeGet+0x6c>)
 801d634:	685b      	ldr	r3, [r3, #4]
 801d636:	4798      	blx	r3
 801d638:	4603      	mov	r3, r0
 801d63a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d63c:	f107 0010 	add.w	r0, r7, #16
 801d640:	69fb      	ldr	r3, [r7, #28]
 801d642:	9300      	str	r3, [sp, #0]
 801d644:	69bb      	ldr	r3, [r7, #24]
 801d646:	f107 0208 	add.w	r2, r7, #8
 801d64a:	ca06      	ldmia	r2, {r1, r2}
 801d64c:	f7ff ff36 	bl	801d4bc <SysTimeAdd>

  return sysTime;
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	461a      	mov	r2, r3
 801d654:	f107 0310 	add.w	r3, r7, #16
 801d658:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d65c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d660:	6878      	ldr	r0, [r7, #4]
 801d662:	3720      	adds	r7, #32
 801d664:	46bd      	mov	sp, r7
 801d666:	bd80      	pop	{r7, pc}
 801d668:	0801f574 	.word	0x0801f574

0801d66c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d66c:	b580      	push	{r7, lr}
 801d66e:	b084      	sub	sp, #16
 801d670:	af00      	add	r7, sp, #0
 801d672:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d674:	2300      	movs	r3, #0
 801d676:	60bb      	str	r3, [r7, #8]
 801d678:	2300      	movs	r3, #0
 801d67a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d67c:	4b0a      	ldr	r3, [pc, #40]	; (801d6a8 <SysTimeGetMcuTime+0x3c>)
 801d67e:	691b      	ldr	r3, [r3, #16]
 801d680:	f107 0208 	add.w	r2, r7, #8
 801d684:	3204      	adds	r2, #4
 801d686:	4610      	mov	r0, r2
 801d688:	4798      	blx	r3
 801d68a:	4603      	mov	r3, r0
 801d68c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	461a      	mov	r2, r3
 801d692:	f107 0308 	add.w	r3, r7, #8
 801d696:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d69a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d69e:	6878      	ldr	r0, [r7, #4]
 801d6a0:	3710      	adds	r7, #16
 801d6a2:	46bd      	mov	sp, r7
 801d6a4:	bd80      	pop	{r7, pc}
 801d6a6:	bf00      	nop
 801d6a8:	0801f574 	.word	0x0801f574

0801d6ac <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b088      	sub	sp, #32
 801d6b0:	af02      	add	r7, sp, #8
 801d6b2:	463b      	mov	r3, r7
 801d6b4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d6b8:	4b0f      	ldr	r3, [pc, #60]	; (801d6f8 <SysTimeToMs+0x4c>)
 801d6ba:	68db      	ldr	r3, [r3, #12]
 801d6bc:	4798      	blx	r3
 801d6be:	4603      	mov	r3, r0
 801d6c0:	b21b      	sxth	r3, r3
 801d6c2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d6c4:	4b0c      	ldr	r3, [pc, #48]	; (801d6f8 <SysTimeToMs+0x4c>)
 801d6c6:	685b      	ldr	r3, [r3, #4]
 801d6c8:	4798      	blx	r3
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d6ce:	f107 0008 	add.w	r0, r7, #8
 801d6d2:	697b      	ldr	r3, [r7, #20]
 801d6d4:	9300      	str	r3, [sp, #0]
 801d6d6:	693b      	ldr	r3, [r7, #16]
 801d6d8:	463a      	mov	r2, r7
 801d6da:	ca06      	ldmia	r2, {r1, r2}
 801d6dc:	f7ff ff27 	bl	801d52e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d6e0:	68bb      	ldr	r3, [r7, #8]
 801d6e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d6e6:	fb02 f303 	mul.w	r3, r2, r3
 801d6ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d6ee:	4413      	add	r3, r2
}
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	3718      	adds	r7, #24
 801d6f4:	46bd      	mov	sp, r7
 801d6f6:	bd80      	pop	{r7, pc}
 801d6f8:	0801f574 	.word	0x0801f574

0801d6fc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d6fc:	b580      	push	{r7, lr}
 801d6fe:	b08a      	sub	sp, #40	; 0x28
 801d700:	af02      	add	r7, sp, #8
 801d702:	6078      	str	r0, [r7, #4]
 801d704:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	4a19      	ldr	r2, [pc, #100]	; (801d770 <SysTimeFromMs+0x74>)
 801d70a:	fba2 2303 	umull	r2, r3, r2, r3
 801d70e:	099b      	lsrs	r3, r3, #6
 801d710:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d712:	69fb      	ldr	r3, [r7, #28]
 801d714:	617b      	str	r3, [r7, #20]
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	b29a      	uxth	r2, r3
 801d71a:	69fb      	ldr	r3, [r7, #28]
 801d71c:	b29b      	uxth	r3, r3
 801d71e:	4619      	mov	r1, r3
 801d720:	0149      	lsls	r1, r1, #5
 801d722:	1ac9      	subs	r1, r1, r3
 801d724:	0089      	lsls	r1, r1, #2
 801d726:	440b      	add	r3, r1
 801d728:	00db      	lsls	r3, r3, #3
 801d72a:	b29b      	uxth	r3, r3
 801d72c:	1ad3      	subs	r3, r2, r3
 801d72e:	b29b      	uxth	r3, r3
 801d730:	b21b      	sxth	r3, r3
 801d732:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d734:	f107 030c 	add.w	r3, r7, #12
 801d738:	2200      	movs	r2, #0
 801d73a:	601a      	str	r2, [r3, #0]
 801d73c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d73e:	4b0d      	ldr	r3, [pc, #52]	; (801d774 <SysTimeFromMs+0x78>)
 801d740:	68db      	ldr	r3, [r3, #12]
 801d742:	4798      	blx	r3
 801d744:	4603      	mov	r3, r0
 801d746:	b21b      	sxth	r3, r3
 801d748:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d74a:	4b0a      	ldr	r3, [pc, #40]	; (801d774 <SysTimeFromMs+0x78>)
 801d74c:	685b      	ldr	r3, [r3, #4]
 801d74e:	4798      	blx	r3
 801d750:	4603      	mov	r3, r0
 801d752:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d754:	6878      	ldr	r0, [r7, #4]
 801d756:	693b      	ldr	r3, [r7, #16]
 801d758:	9300      	str	r3, [sp, #0]
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	f107 0214 	add.w	r2, r7, #20
 801d760:	ca06      	ldmia	r2, {r1, r2}
 801d762:	f7ff feab 	bl	801d4bc <SysTimeAdd>
}
 801d766:	6878      	ldr	r0, [r7, #4]
 801d768:	3720      	adds	r7, #32
 801d76a:	46bd      	mov	sp, r7
 801d76c:	bd80      	pop	{r7, pc}
 801d76e:	bf00      	nop
 801d770:	10624dd3 	.word	0x10624dd3
 801d774:	0801f574 	.word	0x0801f574

0801d778 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d778:	b480      	push	{r7}
 801d77a:	b085      	sub	sp, #20
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d780:	2300      	movs	r3, #0
 801d782:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d784:	e00e      	b.n	801d7a4 <ee_skip_atoi+0x2c>
 801d786:	68fa      	ldr	r2, [r7, #12]
 801d788:	4613      	mov	r3, r2
 801d78a:	009b      	lsls	r3, r3, #2
 801d78c:	4413      	add	r3, r2
 801d78e:	005b      	lsls	r3, r3, #1
 801d790:	4618      	mov	r0, r3
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	1c59      	adds	r1, r3, #1
 801d798:	687a      	ldr	r2, [r7, #4]
 801d79a:	6011      	str	r1, [r2, #0]
 801d79c:	781b      	ldrb	r3, [r3, #0]
 801d79e:	4403      	add	r3, r0
 801d7a0:	3b30      	subs	r3, #48	; 0x30
 801d7a2:	60fb      	str	r3, [r7, #12]
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	781b      	ldrb	r3, [r3, #0]
 801d7aa:	2b2f      	cmp	r3, #47	; 0x2f
 801d7ac:	d904      	bls.n	801d7b8 <ee_skip_atoi+0x40>
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	781b      	ldrb	r3, [r3, #0]
 801d7b4:	2b39      	cmp	r3, #57	; 0x39
 801d7b6:	d9e6      	bls.n	801d786 <ee_skip_atoi+0xe>
  return i;
 801d7b8:	68fb      	ldr	r3, [r7, #12]
}
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	3714      	adds	r7, #20
 801d7be:	46bd      	mov	sp, r7
 801d7c0:	bc80      	pop	{r7}
 801d7c2:	4770      	bx	lr

0801d7c4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d7c4:	b480      	push	{r7}
 801d7c6:	b099      	sub	sp, #100	; 0x64
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	60f8      	str	r0, [r7, #12]
 801d7cc:	60b9      	str	r1, [r7, #8]
 801d7ce:	607a      	str	r2, [r7, #4]
 801d7d0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d7d2:	4b71      	ldr	r3, [pc, #452]	; (801d998 <ee_number+0x1d4>)
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d7d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d002      	beq.n	801d7e8 <ee_number+0x24>
 801d7e2:	4b6e      	ldr	r3, [pc, #440]	; (801d99c <ee_number+0x1d8>)
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d7e8:	683b      	ldr	r3, [r7, #0]
 801d7ea:	2b01      	cmp	r3, #1
 801d7ec:	dd02      	ble.n	801d7f4 <ee_number+0x30>
 801d7ee:	683b      	ldr	r3, [r7, #0]
 801d7f0:	2b24      	cmp	r3, #36	; 0x24
 801d7f2:	dd01      	ble.n	801d7f8 <ee_number+0x34>
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	e0ca      	b.n	801d98e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d7f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d7fa:	f003 0301 	and.w	r3, r3, #1
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d001      	beq.n	801d806 <ee_number+0x42>
 801d802:	2330      	movs	r3, #48	; 0x30
 801d804:	e000      	b.n	801d808 <ee_number+0x44>
 801d806:	2320      	movs	r3, #32
 801d808:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d80c:	2300      	movs	r3, #0
 801d80e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d814:	f003 0302 	and.w	r3, r3, #2
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d00b      	beq.n	801d834 <ee_number+0x70>
  {
    if (num < 0)
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	2b00      	cmp	r3, #0
 801d820:	da08      	bge.n	801d834 <ee_number+0x70>
    {
      sign = '-';
 801d822:	232d      	movs	r3, #45	; 0x2d
 801d824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	425b      	negs	r3, r3
 801d82c:	607b      	str	r3, [r7, #4]
      size--;
 801d82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d830:	3b01      	subs	r3, #1
 801d832:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d834:	2300      	movs	r3, #0
 801d836:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d11e      	bne.n	801d87c <ee_number+0xb8>
    tmp[i++] = '0';
 801d83e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d840:	1c5a      	adds	r2, r3, #1
 801d842:	657a      	str	r2, [r7, #84]	; 0x54
 801d844:	3360      	adds	r3, #96	; 0x60
 801d846:	443b      	add	r3, r7
 801d848:	2230      	movs	r2, #48	; 0x30
 801d84a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d84e:	e018      	b.n	801d882 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	683a      	ldr	r2, [r7, #0]
 801d854:	fbb3 f1f2 	udiv	r1, r3, r2
 801d858:	fb01 f202 	mul.w	r2, r1, r2
 801d85c:	1a9b      	subs	r3, r3, r2
 801d85e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d860:	441a      	add	r2, r3
 801d862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d864:	1c59      	adds	r1, r3, #1
 801d866:	6579      	str	r1, [r7, #84]	; 0x54
 801d868:	7812      	ldrb	r2, [r2, #0]
 801d86a:	3360      	adds	r3, #96	; 0x60
 801d86c:	443b      	add	r3, r7
 801d86e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d872:	687a      	ldr	r2, [r7, #4]
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	fbb2 f3f3 	udiv	r3, r2, r3
 801d87a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d1e6      	bne.n	801d850 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d886:	429a      	cmp	r2, r3
 801d888:	dd01      	ble.n	801d88e <ee_number+0xca>
 801d88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d88c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d88e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d892:	1ad3      	subs	r3, r2, r3
 801d894:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d898:	f003 0301 	and.w	r3, r3, #1
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d112      	bne.n	801d8c6 <ee_number+0x102>
 801d8a0:	e00c      	b.n	801d8bc <ee_number+0xf8>
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	1c5a      	adds	r2, r3, #1
 801d8a6:	60fa      	str	r2, [r7, #12]
 801d8a8:	2220      	movs	r2, #32
 801d8aa:	701a      	strb	r2, [r3, #0]
 801d8ac:	68bb      	ldr	r3, [r7, #8]
 801d8ae:	3b01      	subs	r3, #1
 801d8b0:	60bb      	str	r3, [r7, #8]
 801d8b2:	68bb      	ldr	r3, [r7, #8]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d101      	bne.n	801d8bc <ee_number+0xf8>
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	e068      	b.n	801d98e <ee_number+0x1ca>
 801d8bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8be:	1e5a      	subs	r2, r3, #1
 801d8c0:	66ba      	str	r2, [r7, #104]	; 0x68
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	dced      	bgt.n	801d8a2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d01b      	beq.n	801d906 <ee_number+0x142>
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	1c5a      	adds	r2, r3, #1
 801d8d2:	60fa      	str	r2, [r7, #12]
 801d8d4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d8d8:	701a      	strb	r2, [r3, #0]
 801d8da:	68bb      	ldr	r3, [r7, #8]
 801d8dc:	3b01      	subs	r3, #1
 801d8de:	60bb      	str	r3, [r7, #8]
 801d8e0:	68bb      	ldr	r3, [r7, #8]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d10f      	bne.n	801d906 <ee_number+0x142>
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	e051      	b.n	801d98e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	1c5a      	adds	r2, r3, #1
 801d8ee:	60fa      	str	r2, [r7, #12]
 801d8f0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d8f4:	701a      	strb	r2, [r3, #0]
 801d8f6:	68bb      	ldr	r3, [r7, #8]
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	60bb      	str	r3, [r7, #8]
 801d8fc:	68bb      	ldr	r3, [r7, #8]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d101      	bne.n	801d906 <ee_number+0x142>
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	e043      	b.n	801d98e <ee_number+0x1ca>
 801d906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d908:	1e5a      	subs	r2, r3, #1
 801d90a:	66ba      	str	r2, [r7, #104]	; 0x68
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	dcec      	bgt.n	801d8ea <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d910:	e00c      	b.n	801d92c <ee_number+0x168>
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	1c5a      	adds	r2, r3, #1
 801d916:	60fa      	str	r2, [r7, #12]
 801d918:	2230      	movs	r2, #48	; 0x30
 801d91a:	701a      	strb	r2, [r3, #0]
 801d91c:	68bb      	ldr	r3, [r7, #8]
 801d91e:	3b01      	subs	r3, #1
 801d920:	60bb      	str	r3, [r7, #8]
 801d922:	68bb      	ldr	r3, [r7, #8]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d101      	bne.n	801d92c <ee_number+0x168>
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	e030      	b.n	801d98e <ee_number+0x1ca>
 801d92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d92e:	1e5a      	subs	r2, r3, #1
 801d930:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d934:	429a      	cmp	r2, r3
 801d936:	dbec      	blt.n	801d912 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d938:	e010      	b.n	801d95c <ee_number+0x198>
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	1c5a      	adds	r2, r3, #1
 801d93e:	60fa      	str	r2, [r7, #12]
 801d940:	f107 0110 	add.w	r1, r7, #16
 801d944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d946:	440a      	add	r2, r1
 801d948:	7812      	ldrb	r2, [r2, #0]
 801d94a:	701a      	strb	r2, [r3, #0]
 801d94c:	68bb      	ldr	r3, [r7, #8]
 801d94e:	3b01      	subs	r3, #1
 801d950:	60bb      	str	r3, [r7, #8]
 801d952:	68bb      	ldr	r3, [r7, #8]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d101      	bne.n	801d95c <ee_number+0x198>
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	e018      	b.n	801d98e <ee_number+0x1ca>
 801d95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d95e:	1e5a      	subs	r2, r3, #1
 801d960:	657a      	str	r2, [r7, #84]	; 0x54
 801d962:	2b00      	cmp	r3, #0
 801d964:	dce9      	bgt.n	801d93a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d966:	e00c      	b.n	801d982 <ee_number+0x1be>
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	1c5a      	adds	r2, r3, #1
 801d96c:	60fa      	str	r2, [r7, #12]
 801d96e:	2220      	movs	r2, #32
 801d970:	701a      	strb	r2, [r3, #0]
 801d972:	68bb      	ldr	r3, [r7, #8]
 801d974:	3b01      	subs	r3, #1
 801d976:	60bb      	str	r3, [r7, #8]
 801d978:	68bb      	ldr	r3, [r7, #8]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d101      	bne.n	801d982 <ee_number+0x1be>
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	e005      	b.n	801d98e <ee_number+0x1ca>
 801d982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d984:	1e5a      	subs	r2, r3, #1
 801d986:	66ba      	str	r2, [r7, #104]	; 0x68
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dced      	bgt.n	801d968 <ee_number+0x1a4>

  return str;
 801d98c:	68fb      	ldr	r3, [r7, #12]
}
 801d98e:	4618      	mov	r0, r3
 801d990:	3764      	adds	r7, #100	; 0x64
 801d992:	46bd      	mov	sp, r7
 801d994:	bc80      	pop	{r7}
 801d996:	4770      	bx	lr
 801d998:	20000158 	.word	0x20000158
 801d99c:	2000015c 	.word	0x2000015c

0801d9a0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d9a0:	b580      	push	{r7, lr}
 801d9a2:	b092      	sub	sp, #72	; 0x48
 801d9a4:	af04      	add	r7, sp, #16
 801d9a6:	60f8      	str	r0, [r7, #12]
 801d9a8:	60b9      	str	r1, [r7, #8]
 801d9aa:	607a      	str	r2, [r7, #4]
 801d9ac:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d9ae:	68bb      	ldr	r3, [r7, #8]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	dc01      	bgt.n	801d9b8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	e13e      	b.n	801dc36 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d9bc:	e128      	b.n	801dc10 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	1ad2      	subs	r2, r2, r3
 801d9c4:	68bb      	ldr	r3, [r7, #8]
 801d9c6:	3b01      	subs	r3, #1
 801d9c8:	429a      	cmp	r2, r3
 801d9ca:	f280 812e 	bge.w	801dc2a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	781b      	ldrb	r3, [r3, #0]
 801d9d2:	2b25      	cmp	r3, #37	; 0x25
 801d9d4:	d006      	beq.n	801d9e4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d9d6:	687a      	ldr	r2, [r7, #4]
 801d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9da:	1c59      	adds	r1, r3, #1
 801d9dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d9de:	7812      	ldrb	r2, [r2, #0]
 801d9e0:	701a      	strb	r2, [r3, #0]
      continue;
 801d9e2:	e112      	b.n	801dc0a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	3301      	adds	r3, #1
 801d9ec:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	781b      	ldrb	r3, [r3, #0]
 801d9f2:	2b30      	cmp	r3, #48	; 0x30
 801d9f4:	d103      	bne.n	801d9fe <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d9f6:	6a3b      	ldr	r3, [r7, #32]
 801d9f8:	f043 0301 	orr.w	r3, r3, #1
 801d9fc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d9fe:	f04f 33ff 	mov.w	r3, #4294967295
 801da02:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	781b      	ldrb	r3, [r3, #0]
 801da08:	2b2f      	cmp	r3, #47	; 0x2f
 801da0a:	d908      	bls.n	801da1e <tiny_vsnprintf_like+0x7e>
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	781b      	ldrb	r3, [r3, #0]
 801da10:	2b39      	cmp	r3, #57	; 0x39
 801da12:	d804      	bhi.n	801da1e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801da14:	1d3b      	adds	r3, r7, #4
 801da16:	4618      	mov	r0, r3
 801da18:	f7ff feae 	bl	801d778 <ee_skip_atoi>
 801da1c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801da1e:	f04f 33ff 	mov.w	r3, #4294967295
 801da22:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801da24:	f04f 33ff 	mov.w	r3, #4294967295
 801da28:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801da2a:	230a      	movs	r3, #10
 801da2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	781b      	ldrb	r3, [r3, #0]
 801da32:	3b58      	subs	r3, #88	; 0x58
 801da34:	2b20      	cmp	r3, #32
 801da36:	f200 8094 	bhi.w	801db62 <tiny_vsnprintf_like+0x1c2>
 801da3a:	a201      	add	r2, pc, #4	; (adr r2, 801da40 <tiny_vsnprintf_like+0xa0>)
 801da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da40:	0801db4b 	.word	0x0801db4b
 801da44:	0801db63 	.word	0x0801db63
 801da48:	0801db63 	.word	0x0801db63
 801da4c:	0801db63 	.word	0x0801db63
 801da50:	0801db63 	.word	0x0801db63
 801da54:	0801db63 	.word	0x0801db63
 801da58:	0801db63 	.word	0x0801db63
 801da5c:	0801db63 	.word	0x0801db63
 801da60:	0801db63 	.word	0x0801db63
 801da64:	0801db63 	.word	0x0801db63
 801da68:	0801db63 	.word	0x0801db63
 801da6c:	0801dacf 	.word	0x0801dacf
 801da70:	0801db59 	.word	0x0801db59
 801da74:	0801db63 	.word	0x0801db63
 801da78:	0801db63 	.word	0x0801db63
 801da7c:	0801db63 	.word	0x0801db63
 801da80:	0801db63 	.word	0x0801db63
 801da84:	0801db59 	.word	0x0801db59
 801da88:	0801db63 	.word	0x0801db63
 801da8c:	0801db63 	.word	0x0801db63
 801da90:	0801db63 	.word	0x0801db63
 801da94:	0801db63 	.word	0x0801db63
 801da98:	0801db63 	.word	0x0801db63
 801da9c:	0801db63 	.word	0x0801db63
 801daa0:	0801db63 	.word	0x0801db63
 801daa4:	0801db63 	.word	0x0801db63
 801daa8:	0801db63 	.word	0x0801db63
 801daac:	0801daef 	.word	0x0801daef
 801dab0:	0801db63 	.word	0x0801db63
 801dab4:	0801dbaf 	.word	0x0801dbaf
 801dab8:	0801db63 	.word	0x0801db63
 801dabc:	0801db63 	.word	0x0801db63
 801dac0:	0801db53 	.word	0x0801db53
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dac6:	1c5a      	adds	r2, r3, #1
 801dac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801daca:	2220      	movs	r2, #32
 801dacc:	701a      	strb	r2, [r3, #0]
 801dace:	69fb      	ldr	r3, [r7, #28]
 801dad0:	3b01      	subs	r3, #1
 801dad2:	61fb      	str	r3, [r7, #28]
 801dad4:	69fb      	ldr	r3, [r7, #28]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	dcf4      	bgt.n	801dac4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801dada:	683b      	ldr	r3, [r7, #0]
 801dadc:	1d1a      	adds	r2, r3, #4
 801dade:	603a      	str	r2, [r7, #0]
 801dae0:	6819      	ldr	r1, [r3, #0]
 801dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dae4:	1c5a      	adds	r2, r3, #1
 801dae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dae8:	b2ca      	uxtb	r2, r1
 801daea:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801daec:	e08d      	b.n	801dc0a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801daee:	683b      	ldr	r3, [r7, #0]
 801daf0:	1d1a      	adds	r2, r3, #4
 801daf2:	603a      	str	r2, [r7, #0]
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d101      	bne.n	801db02 <tiny_vsnprintf_like+0x162>
 801dafe:	4b50      	ldr	r3, [pc, #320]	; (801dc40 <tiny_vsnprintf_like+0x2a0>)
 801db00:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801db02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db04:	f7e2 fb38 	bl	8000178 <strlen>
 801db08:	4603      	mov	r3, r0
 801db0a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801db0c:	e004      	b.n	801db18 <tiny_vsnprintf_like+0x178>
 801db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db10:	1c5a      	adds	r2, r3, #1
 801db12:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db14:	2220      	movs	r2, #32
 801db16:	701a      	strb	r2, [r3, #0]
 801db18:	69fb      	ldr	r3, [r7, #28]
 801db1a:	1e5a      	subs	r2, r3, #1
 801db1c:	61fa      	str	r2, [r7, #28]
 801db1e:	693a      	ldr	r2, [r7, #16]
 801db20:	429a      	cmp	r2, r3
 801db22:	dbf4      	blt.n	801db0e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801db24:	2300      	movs	r3, #0
 801db26:	62bb      	str	r3, [r7, #40]	; 0x28
 801db28:	e00a      	b.n	801db40 <tiny_vsnprintf_like+0x1a0>
 801db2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801db2c:	1c53      	adds	r3, r2, #1
 801db2e:	627b      	str	r3, [r7, #36]	; 0x24
 801db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db32:	1c59      	adds	r1, r3, #1
 801db34:	62f9      	str	r1, [r7, #44]	; 0x2c
 801db36:	7812      	ldrb	r2, [r2, #0]
 801db38:	701a      	strb	r2, [r3, #0]
 801db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db3c:	3301      	adds	r3, #1
 801db3e:	62bb      	str	r3, [r7, #40]	; 0x28
 801db40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801db42:	693b      	ldr	r3, [r7, #16]
 801db44:	429a      	cmp	r2, r3
 801db46:	dbf0      	blt.n	801db2a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801db48:	e05f      	b.n	801dc0a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801db4a:	6a3b      	ldr	r3, [r7, #32]
 801db4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db50:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801db52:	2310      	movs	r3, #16
 801db54:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801db56:	e02b      	b.n	801dbb0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801db58:	6a3b      	ldr	r3, [r7, #32]
 801db5a:	f043 0302 	orr.w	r3, r3, #2
 801db5e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801db60:	e025      	b.n	801dbae <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	781b      	ldrb	r3, [r3, #0]
 801db66:	2b25      	cmp	r3, #37	; 0x25
 801db68:	d004      	beq.n	801db74 <tiny_vsnprintf_like+0x1d4>
 801db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db6c:	1c5a      	adds	r2, r3, #1
 801db6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db70:	2225      	movs	r2, #37	; 0x25
 801db72:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801db74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	1ad2      	subs	r2, r2, r3
 801db7a:	68bb      	ldr	r3, [r7, #8]
 801db7c:	3b01      	subs	r3, #1
 801db7e:	429a      	cmp	r2, r3
 801db80:	da16      	bge.n	801dbb0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	781b      	ldrb	r3, [r3, #0]
 801db86:	2b00      	cmp	r3, #0
 801db88:	d006      	beq.n	801db98 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801db8a:	687a      	ldr	r2, [r7, #4]
 801db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db8e:	1c59      	adds	r1, r3, #1
 801db90:	62f9      	str	r1, [r7, #44]	; 0x2c
 801db92:	7812      	ldrb	r2, [r2, #0]
 801db94:	701a      	strb	r2, [r3, #0]
 801db96:	e002      	b.n	801db9e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	3b01      	subs	r3, #1
 801db9c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801db9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	1ad2      	subs	r2, r2, r3
 801dba4:	68bb      	ldr	r3, [r7, #8]
 801dba6:	3b01      	subs	r3, #1
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	db2d      	blt.n	801dc08 <tiny_vsnprintf_like+0x268>
 801dbac:	e000      	b.n	801dbb0 <tiny_vsnprintf_like+0x210>
        break;
 801dbae:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dbb0:	697b      	ldr	r3, [r7, #20]
 801dbb2:	2b6c      	cmp	r3, #108	; 0x6c
 801dbb4:	d105      	bne.n	801dbc2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dbb6:	683b      	ldr	r3, [r7, #0]
 801dbb8:	1d1a      	adds	r2, r3, #4
 801dbba:	603a      	str	r2, [r7, #0]
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	637b      	str	r3, [r7, #52]	; 0x34
 801dbc0:	e00f      	b.n	801dbe2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801dbc2:	6a3b      	ldr	r3, [r7, #32]
 801dbc4:	f003 0302 	and.w	r3, r3, #2
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d005      	beq.n	801dbd8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dbcc:	683b      	ldr	r3, [r7, #0]
 801dbce:	1d1a      	adds	r2, r3, #4
 801dbd0:	603a      	str	r2, [r7, #0]
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	637b      	str	r3, [r7, #52]	; 0x34
 801dbd6:	e004      	b.n	801dbe2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801dbd8:	683b      	ldr	r3, [r7, #0]
 801dbda:	1d1a      	adds	r2, r3, #4
 801dbdc:	603a      	str	r2, [r7, #0]
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dbe2:	68bb      	ldr	r3, [r7, #8]
 801dbe4:	1e5a      	subs	r2, r3, #1
 801dbe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	1acb      	subs	r3, r1, r3
 801dbec:	1ad1      	subs	r1, r2, r3
 801dbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dbf0:	6a3b      	ldr	r3, [r7, #32]
 801dbf2:	9302      	str	r3, [sp, #8]
 801dbf4:	69bb      	ldr	r3, [r7, #24]
 801dbf6:	9301      	str	r3, [sp, #4]
 801dbf8:	69fb      	ldr	r3, [r7, #28]
 801dbfa:	9300      	str	r3, [sp, #0]
 801dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dc00:	f7ff fde0 	bl	801d7c4 <ee_number>
 801dc04:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dc06:	e000      	b.n	801dc0a <tiny_vsnprintf_like+0x26a>
        continue;
 801dc08:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	3301      	adds	r3, #1
 801dc0e:	607b      	str	r3, [r7, #4]
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	781b      	ldrb	r3, [r3, #0]
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	f47f aed2 	bne.w	801d9be <tiny_vsnprintf_like+0x1e>
 801dc1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	1ad2      	subs	r2, r2, r3
 801dc20:	68bb      	ldr	r3, [r7, #8]
 801dc22:	3b01      	subs	r3, #1
 801dc24:	429a      	cmp	r2, r3
 801dc26:	f6bf aeca 	bge.w	801d9be <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dc30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	1ad3      	subs	r3, r2, r3
}
 801dc36:	4618      	mov	r0, r3
 801dc38:	3738      	adds	r7, #56	; 0x38
 801dc3a:	46bd      	mov	sp, r7
 801dc3c:	bd80      	pop	{r7, pc}
 801dc3e:	bf00      	nop
 801dc40:	0801f488 	.word	0x0801f488

0801dc44 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dc44:	b580      	push	{r7, lr}
 801dc46:	b090      	sub	sp, #64	; 0x40
 801dc48:	af00      	add	r7, sp, #0
 801dc4a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dc4c:	4b73      	ldr	r3, [pc, #460]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dc52:	4b72      	ldr	r3, [pc, #456]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dc54:	681a      	ldr	r2, [r3, #0]
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	4013      	ands	r3, r2
 801dc5a:	4a70      	ldr	r2, [pc, #448]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dc5c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dc5e:	4b70      	ldr	r3, [pc, #448]	; (801de20 <UTIL_SEQ_Run+0x1dc>)
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dc64:	4b6f      	ldr	r3, [pc, #444]	; (801de24 <UTIL_SEQ_Run+0x1e0>)
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dc6a:	4b6f      	ldr	r3, [pc, #444]	; (801de28 <UTIL_SEQ_Run+0x1e4>)
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dc70:	4b6e      	ldr	r3, [pc, #440]	; (801de2c <UTIL_SEQ_Run+0x1e8>)
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dc76:	e08d      	b.n	801dd94 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dc78:	2300      	movs	r3, #0
 801dc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dc7c:	e002      	b.n	801dc84 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc80:	3301      	adds	r3, #1
 801dc82:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dc84:	4a6a      	ldr	r2, [pc, #424]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc8e:	401a      	ands	r2, r3
 801dc90:	4b62      	ldr	r3, [pc, #392]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	4013      	ands	r3, r2
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d0f1      	beq.n	801dc7e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dc9a:	4a65      	ldr	r2, [pc, #404]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dca4:	401a      	ands	r2, r3
 801dca6:	4b5d      	ldr	r3, [pc, #372]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	4013      	ands	r3, r2
 801dcac:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dcae:	4a60      	ldr	r2, [pc, #384]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcb2:	00db      	lsls	r3, r3, #3
 801dcb4:	4413      	add	r3, r2
 801dcb6:	685a      	ldr	r2, [r3, #4]
 801dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcba:	4013      	ands	r3, r2
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d106      	bne.n	801dcce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dcc0:	4a5b      	ldr	r2, [pc, #364]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dcc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcc4:	00db      	lsls	r3, r3, #3
 801dcc6:	4413      	add	r3, r2
 801dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 801dccc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dcce:	4a58      	ldr	r2, [pc, #352]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcd2:	00db      	lsls	r3, r3, #3
 801dcd4:	4413      	add	r3, r2
 801dcd6:	685a      	ldr	r2, [r3, #4]
 801dcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcda:	4013      	ands	r3, r2
 801dcdc:	4618      	mov	r0, r3
 801dcde:	f000 f907 	bl	801def0 <SEQ_BitPosition>
 801dce2:	4603      	mov	r3, r0
 801dce4:	461a      	mov	r2, r3
 801dce6:	4b53      	ldr	r3, [pc, #332]	; (801de34 <UTIL_SEQ_Run+0x1f0>)
 801dce8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dcea:	4a51      	ldr	r2, [pc, #324]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcee:	00db      	lsls	r3, r3, #3
 801dcf0:	4413      	add	r3, r2
 801dcf2:	685a      	ldr	r2, [r3, #4]
 801dcf4:	4b4f      	ldr	r3, [pc, #316]	; (801de34 <UTIL_SEQ_Run+0x1f0>)
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	2101      	movs	r1, #1
 801dcfa:	fa01 f303 	lsl.w	r3, r1, r3
 801dcfe:	43db      	mvns	r3, r3
 801dd00:	401a      	ands	r2, r3
 801dd02:	494b      	ldr	r1, [pc, #300]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd06:	00db      	lsls	r3, r3, #3
 801dd08:	440b      	add	r3, r1
 801dd0a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd0c:	f3ef 8310 	mrs	r3, PRIMASK
 801dd10:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd12:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801dd14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd16:	b672      	cpsid	i
}
 801dd18:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801dd1a:	4b46      	ldr	r3, [pc, #280]	; (801de34 <UTIL_SEQ_Run+0x1f0>)
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	2201      	movs	r2, #1
 801dd20:	fa02 f303 	lsl.w	r3, r2, r3
 801dd24:	43da      	mvns	r2, r3
 801dd26:	4b3e      	ldr	r3, [pc, #248]	; (801de20 <UTIL_SEQ_Run+0x1dc>)
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	4013      	ands	r3, r2
 801dd2c:	4a3c      	ldr	r2, [pc, #240]	; (801de20 <UTIL_SEQ_Run+0x1dc>)
 801dd2e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801dd30:	2301      	movs	r3, #1
 801dd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd34:	e013      	b.n	801dd5e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801dd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd38:	3b01      	subs	r3, #1
 801dd3a:	4a3d      	ldr	r2, [pc, #244]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dd3c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801dd40:	4b3c      	ldr	r3, [pc, #240]	; (801de34 <UTIL_SEQ_Run+0x1f0>)
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	2201      	movs	r2, #1
 801dd46:	fa02 f303 	lsl.w	r3, r2, r3
 801dd4a:	43da      	mvns	r2, r3
 801dd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd4e:	3b01      	subs	r3, #1
 801dd50:	400a      	ands	r2, r1
 801dd52:	4937      	ldr	r1, [pc, #220]	; (801de30 <UTIL_SEQ_Run+0x1ec>)
 801dd54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801dd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd5a:	3b01      	subs	r3, #1
 801dd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d1e8      	bne.n	801dd36 <UTIL_SEQ_Run+0xf2>
 801dd64:	6a3b      	ldr	r3, [r7, #32]
 801dd66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd68:	697b      	ldr	r3, [r7, #20]
 801dd6a:	f383 8810 	msr	PRIMASK, r3
}
 801dd6e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801dd70:	4b30      	ldr	r3, [pc, #192]	; (801de34 <UTIL_SEQ_Run+0x1f0>)
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	4a30      	ldr	r2, [pc, #192]	; (801de38 <UTIL_SEQ_Run+0x1f4>)
 801dd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dd7a:	4798      	blx	r3

    local_taskset = TaskSet;
 801dd7c:	4b28      	ldr	r3, [pc, #160]	; (801de20 <UTIL_SEQ_Run+0x1dc>)
 801dd7e:	681b      	ldr	r3, [r3, #0]
 801dd80:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801dd82:	4b28      	ldr	r3, [pc, #160]	; (801de24 <UTIL_SEQ_Run+0x1e0>)
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801dd88:	4b27      	ldr	r3, [pc, #156]	; (801de28 <UTIL_SEQ_Run+0x1e4>)
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801dd8e:	4b27      	ldr	r3, [pc, #156]	; (801de2c <UTIL_SEQ_Run+0x1e8>)
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dd94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd98:	401a      	ands	r2, r3
 801dd9a:	4b20      	ldr	r3, [pc, #128]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	4013      	ands	r3, r2
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d005      	beq.n	801ddb0 <UTIL_SEQ_Run+0x16c>
 801dda4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dda8:	4013      	ands	r3, r2
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	f43f af64 	beq.w	801dc78 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ddb0:	4b20      	ldr	r3, [pc, #128]	; (801de34 <UTIL_SEQ_Run+0x1f0>)
 801ddb2:	f04f 32ff 	mov.w	r2, #4294967295
 801ddb6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ddb8:	f000 f88e 	bl	801ded8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddbc:	f3ef 8310 	mrs	r3, PRIMASK
 801ddc0:	613b      	str	r3, [r7, #16]
  return(result);
 801ddc2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ddc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ddc6:	b672      	cpsid	i
}
 801ddc8:	bf00      	nop
  local_taskset = TaskSet;
 801ddca:	4b15      	ldr	r3, [pc, #84]	; (801de20 <UTIL_SEQ_Run+0x1dc>)
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ddd0:	4b14      	ldr	r3, [pc, #80]	; (801de24 <UTIL_SEQ_Run+0x1e0>)
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ddd6:	4b14      	ldr	r3, [pc, #80]	; (801de28 <UTIL_SEQ_Run+0x1e4>)
 801ddd8:	681b      	ldr	r3, [r3, #0]
 801ddda:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801dddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ddde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dde0:	401a      	ands	r2, r3
 801dde2:	4b0e      	ldr	r3, [pc, #56]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	4013      	ands	r3, r2
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d107      	bne.n	801ddfc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ddec:	4b0f      	ldr	r3, [pc, #60]	; (801de2c <UTIL_SEQ_Run+0x1e8>)
 801ddee:	681a      	ldr	r2, [r3, #0]
 801ddf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddf2:	4013      	ands	r3, r2
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d101      	bne.n	801ddfc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801ddf8:	f7e4 fe0c 	bl	8002a14 <UTIL_SEQ_Idle>
 801ddfc:	69fb      	ldr	r3, [r7, #28]
 801ddfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	f383 8810 	msr	PRIMASK, r3
}
 801de06:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801de08:	f000 f86c 	bl	801dee4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801de0c:	4a03      	ldr	r2, [pc, #12]	; (801de1c <UTIL_SEQ_Run+0x1d8>)
 801de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de10:	6013      	str	r3, [r2, #0]

  return;
 801de12:	bf00      	nop
}
 801de14:	3740      	adds	r7, #64	; 0x40
 801de16:	46bd      	mov	sp, r7
 801de18:	bd80      	pop	{r7, pc}
 801de1a:	bf00      	nop
 801de1c:	20000164 	.word	0x20000164
 801de20:	200018dc 	.word	0x200018dc
 801de24:	200018e0 	.word	0x200018e0
 801de28:	20000160 	.word	0x20000160
 801de2c:	200018e4 	.word	0x200018e4
 801de30:	200018fc 	.word	0x200018fc
 801de34:	200018e8 	.word	0x200018e8
 801de38:	200018ec 	.word	0x200018ec

0801de3c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801de3c:	b580      	push	{r7, lr}
 801de3e:	b088      	sub	sp, #32
 801de40:	af00      	add	r7, sp, #0
 801de42:	60f8      	str	r0, [r7, #12]
 801de44:	60b9      	str	r1, [r7, #8]
 801de46:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de48:	f3ef 8310 	mrs	r3, PRIMASK
 801de4c:	617b      	str	r3, [r7, #20]
  return(result);
 801de4e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801de50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de52:	b672      	cpsid	i
}
 801de54:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801de56:	68f8      	ldr	r0, [r7, #12]
 801de58:	f000 f84a 	bl	801def0 <SEQ_BitPosition>
 801de5c:	4603      	mov	r3, r0
 801de5e:	4619      	mov	r1, r3
 801de60:	4a06      	ldr	r2, [pc, #24]	; (801de7c <UTIL_SEQ_RegTask+0x40>)
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801de68:	69fb      	ldr	r3, [r7, #28]
 801de6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de6c:	69bb      	ldr	r3, [r7, #24]
 801de6e:	f383 8810 	msr	PRIMASK, r3
}
 801de72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801de74:	bf00      	nop
}
 801de76:	3720      	adds	r7, #32
 801de78:	46bd      	mov	sp, r7
 801de7a:	bd80      	pop	{r7, pc}
 801de7c:	200018ec 	.word	0x200018ec

0801de80 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801de80:	b480      	push	{r7}
 801de82:	b087      	sub	sp, #28
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
 801de88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de8a:	f3ef 8310 	mrs	r3, PRIMASK
 801de8e:	60fb      	str	r3, [r7, #12]
  return(result);
 801de90:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801de92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801de94:	b672      	cpsid	i
}
 801de96:	bf00      	nop

  TaskSet |= TaskId_bm;
 801de98:	4b0d      	ldr	r3, [pc, #52]	; (801ded0 <UTIL_SEQ_SetTask+0x50>)
 801de9a:	681a      	ldr	r2, [r3, #0]
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	4313      	orrs	r3, r2
 801dea0:	4a0b      	ldr	r2, [pc, #44]	; (801ded0 <UTIL_SEQ_SetTask+0x50>)
 801dea2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801dea4:	4a0b      	ldr	r2, [pc, #44]	; (801ded4 <UTIL_SEQ_SetTask+0x54>)
 801dea6:	683b      	ldr	r3, [r7, #0]
 801dea8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	431a      	orrs	r2, r3
 801deb0:	4908      	ldr	r1, [pc, #32]	; (801ded4 <UTIL_SEQ_SetTask+0x54>)
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801deb8:	697b      	ldr	r3, [r7, #20]
 801deba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801debc:	693b      	ldr	r3, [r7, #16]
 801debe:	f383 8810 	msr	PRIMASK, r3
}
 801dec2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801dec4:	bf00      	nop
}
 801dec6:	371c      	adds	r7, #28
 801dec8:	46bd      	mov	sp, r7
 801deca:	bc80      	pop	{r7}
 801decc:	4770      	bx	lr
 801dece:	bf00      	nop
 801ded0:	200018dc 	.word	0x200018dc
 801ded4:	200018fc 	.word	0x200018fc

0801ded8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ded8:	b480      	push	{r7}
 801deda:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801dedc:	bf00      	nop
}
 801dede:	46bd      	mov	sp, r7
 801dee0:	bc80      	pop	{r7}
 801dee2:	4770      	bx	lr

0801dee4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801dee4:	b480      	push	{r7}
 801dee6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801dee8:	bf00      	nop
}
 801deea:	46bd      	mov	sp, r7
 801deec:	bc80      	pop	{r7}
 801deee:	4770      	bx	lr

0801def0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801def0:	b480      	push	{r7}
 801def2:	b085      	sub	sp, #20
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801def8:	2300      	movs	r3, #0
 801defa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801df00:	68bb      	ldr	r3, [r7, #8]
 801df02:	0c1b      	lsrs	r3, r3, #16
 801df04:	041b      	lsls	r3, r3, #16
 801df06:	2b00      	cmp	r3, #0
 801df08:	d104      	bne.n	801df14 <SEQ_BitPosition+0x24>
 801df0a:	2310      	movs	r3, #16
 801df0c:	73fb      	strb	r3, [r7, #15]
 801df0e:	68bb      	ldr	r3, [r7, #8]
 801df10:	041b      	lsls	r3, r3, #16
 801df12:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801df14:	68bb      	ldr	r3, [r7, #8]
 801df16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d105      	bne.n	801df2a <SEQ_BitPosition+0x3a>
 801df1e:	7bfb      	ldrb	r3, [r7, #15]
 801df20:	3308      	adds	r3, #8
 801df22:	73fb      	strb	r3, [r7, #15]
 801df24:	68bb      	ldr	r3, [r7, #8]
 801df26:	021b      	lsls	r3, r3, #8
 801df28:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801df2a:	68bb      	ldr	r3, [r7, #8]
 801df2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801df30:	2b00      	cmp	r3, #0
 801df32:	d105      	bne.n	801df40 <SEQ_BitPosition+0x50>
 801df34:	7bfb      	ldrb	r3, [r7, #15]
 801df36:	3304      	adds	r3, #4
 801df38:	73fb      	strb	r3, [r7, #15]
 801df3a:	68bb      	ldr	r3, [r7, #8]
 801df3c:	011b      	lsls	r3, r3, #4
 801df3e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801df40:	68bb      	ldr	r3, [r7, #8]
 801df42:	0f1b      	lsrs	r3, r3, #28
 801df44:	4a06      	ldr	r2, [pc, #24]	; (801df60 <SEQ_BitPosition+0x70>)
 801df46:	5cd2      	ldrb	r2, [r2, r3]
 801df48:	7bfb      	ldrb	r3, [r7, #15]
 801df4a:	4413      	add	r3, r2
 801df4c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801df4e:	7bfb      	ldrb	r3, [r7, #15]
 801df50:	f1c3 031f 	rsb	r3, r3, #31
 801df54:	b2db      	uxtb	r3, r3
}
 801df56:	4618      	mov	r0, r3
 801df58:	3714      	adds	r7, #20
 801df5a:	46bd      	mov	sp, r7
 801df5c:	bc80      	pop	{r7}
 801df5e:	4770      	bx	lr
 801df60:	0801facc 	.word	0x0801facc

0801df64 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801df64:	b580      	push	{r7, lr}
 801df66:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801df68:	4b04      	ldr	r3, [pc, #16]	; (801df7c <UTIL_TIMER_Init+0x18>)
 801df6a:	2200      	movs	r2, #0
 801df6c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801df6e:	4b04      	ldr	r3, [pc, #16]	; (801df80 <UTIL_TIMER_Init+0x1c>)
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	4798      	blx	r3
 801df74:	4603      	mov	r3, r0
}
 801df76:	4618      	mov	r0, r3
 801df78:	bd80      	pop	{r7, pc}
 801df7a:	bf00      	nop
 801df7c:	20001904 	.word	0x20001904
 801df80:	0801f548 	.word	0x0801f548

0801df84 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801df84:	b580      	push	{r7, lr}
 801df86:	b084      	sub	sp, #16
 801df88:	af00      	add	r7, sp, #0
 801df8a:	60f8      	str	r0, [r7, #12]
 801df8c:	60b9      	str	r1, [r7, #8]
 801df8e:	603b      	str	r3, [r7, #0]
 801df90:	4613      	mov	r3, r2
 801df92:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	2b00      	cmp	r3, #0
 801df98:	d023      	beq.n	801dfe2 <UTIL_TIMER_Create+0x5e>
 801df9a:	683b      	ldr	r3, [r7, #0]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d020      	beq.n	801dfe2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801dfa6:	4b11      	ldr	r3, [pc, #68]	; (801dfec <UTIL_TIMER_Create+0x68>)
 801dfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfaa:	68b8      	ldr	r0, [r7, #8]
 801dfac:	4798      	blx	r3
 801dfae:	4602      	mov	r2, r0
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	2200      	movs	r2, #0
 801dfbe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801dfc6:	68fb      	ldr	r3, [r7, #12]
 801dfc8:	683a      	ldr	r2, [r7, #0]
 801dfca:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	69ba      	ldr	r2, [r7, #24]
 801dfd0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	79fa      	ldrb	r2, [r7, #7]
 801dfd6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801dfd8:	68fb      	ldr	r3, [r7, #12]
 801dfda:	2200      	movs	r2, #0
 801dfdc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	e000      	b.n	801dfe4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801dfe2:	2301      	movs	r3, #1
  }
}
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	3710      	adds	r7, #16
 801dfe8:	46bd      	mov	sp, r7
 801dfea:	bd80      	pop	{r7, pc}
 801dfec:	0801f548 	.word	0x0801f548

0801dff0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801dff0:	b580      	push	{r7, lr}
 801dff2:	b08a      	sub	sp, #40	; 0x28
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dff8:	2300      	movs	r3, #0
 801dffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	2b00      	cmp	r3, #0
 801e002:	d056      	beq.n	801e0b2 <UTIL_TIMER_Start+0xc2>
 801e004:	6878      	ldr	r0, [r7, #4]
 801e006:	f000 f9a9 	bl	801e35c <TimerExists>
 801e00a:	4603      	mov	r3, r0
 801e00c:	f083 0301 	eor.w	r3, r3, #1
 801e010:	b2db      	uxtb	r3, r3
 801e012:	2b00      	cmp	r3, #0
 801e014:	d04d      	beq.n	801e0b2 <UTIL_TIMER_Start+0xc2>
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	7a5b      	ldrb	r3, [r3, #9]
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	d149      	bne.n	801e0b2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e01e:	f3ef 8310 	mrs	r3, PRIMASK
 801e022:	613b      	str	r3, [r7, #16]
  return(result);
 801e024:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e026:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e028:	b672      	cpsid	i
}
 801e02a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	685b      	ldr	r3, [r3, #4]
 801e030:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e032:	4b24      	ldr	r3, [pc, #144]	; (801e0c4 <UTIL_TIMER_Start+0xd4>)
 801e034:	6a1b      	ldr	r3, [r3, #32]
 801e036:	4798      	blx	r3
 801e038:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e03a:	6a3a      	ldr	r2, [r7, #32]
 801e03c:	69bb      	ldr	r3, [r7, #24]
 801e03e:	429a      	cmp	r2, r3
 801e040:	d201      	bcs.n	801e046 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e042:	69bb      	ldr	r3, [r7, #24]
 801e044:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	6a3a      	ldr	r2, [r7, #32]
 801e04a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	2200      	movs	r2, #0
 801e050:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	2201      	movs	r2, #1
 801e056:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2200      	movs	r2, #0
 801e05c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e05e:	4b1a      	ldr	r3, [pc, #104]	; (801e0c8 <UTIL_TIMER_Start+0xd8>)
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d106      	bne.n	801e074 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e066:	4b17      	ldr	r3, [pc, #92]	; (801e0c4 <UTIL_TIMER_Start+0xd4>)
 801e068:	691b      	ldr	r3, [r3, #16]
 801e06a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e06c:	6878      	ldr	r0, [r7, #4]
 801e06e:	f000 f9eb 	bl	801e448 <TimerInsertNewHeadTimer>
 801e072:	e017      	b.n	801e0a4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e074:	4b13      	ldr	r3, [pc, #76]	; (801e0c4 <UTIL_TIMER_Start+0xd4>)
 801e076:	699b      	ldr	r3, [r3, #24]
 801e078:	4798      	blx	r3
 801e07a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	681a      	ldr	r2, [r3, #0]
 801e080:	697b      	ldr	r3, [r7, #20]
 801e082:	441a      	add	r2, r3
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	681a      	ldr	r2, [r3, #0]
 801e08c:	4b0e      	ldr	r3, [pc, #56]	; (801e0c8 <UTIL_TIMER_Start+0xd8>)
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	429a      	cmp	r2, r3
 801e094:	d203      	bcs.n	801e09e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e096:	6878      	ldr	r0, [r7, #4]
 801e098:	f000 f9d6 	bl	801e448 <TimerInsertNewHeadTimer>
 801e09c:	e002      	b.n	801e0a4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e09e:	6878      	ldr	r0, [r7, #4]
 801e0a0:	f000 f9a2 	bl	801e3e8 <TimerInsertTimer>
 801e0a4:	69fb      	ldr	r3, [r7, #28]
 801e0a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	f383 8810 	msr	PRIMASK, r3
}
 801e0ae:	bf00      	nop
  {
 801e0b0:	e002      	b.n	801e0b8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e0b2:	2301      	movs	r3, #1
 801e0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e0bc:	4618      	mov	r0, r3
 801e0be:	3728      	adds	r7, #40	; 0x28
 801e0c0:	46bd      	mov	sp, r7
 801e0c2:	bd80      	pop	{r7, pc}
 801e0c4:	0801f548 	.word	0x0801f548
 801e0c8:	20001904 	.word	0x20001904

0801e0cc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b088      	sub	sp, #32
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e0d4:	2300      	movs	r3, #0
 801e0d6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d05b      	beq.n	801e196 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0de:	f3ef 8310 	mrs	r3, PRIMASK
 801e0e2:	60fb      	str	r3, [r7, #12]
  return(result);
 801e0e4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e0e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0e8:	b672      	cpsid	i
}
 801e0ea:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e0ec:	4b2d      	ldr	r3, [pc, #180]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e0f2:	4b2c      	ldr	r3, [pc, #176]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	2201      	movs	r2, #1
 801e0fc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e0fe:	4b29      	ldr	r3, [pc, #164]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d041      	beq.n	801e18a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	2200      	movs	r2, #0
 801e10a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e10c:	4b25      	ldr	r3, [pc, #148]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	687a      	ldr	r2, [r7, #4]
 801e112:	429a      	cmp	r2, r3
 801e114:	d134      	bne.n	801e180 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e116:	4b23      	ldr	r3, [pc, #140]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	2200      	movs	r2, #0
 801e11c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e11e:	4b21      	ldr	r3, [pc, #132]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	695b      	ldr	r3, [r3, #20]
 801e124:	2b00      	cmp	r3, #0
 801e126:	d00a      	beq.n	801e13e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e128:	4b1e      	ldr	r3, [pc, #120]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	695b      	ldr	r3, [r3, #20]
 801e12e:	4a1d      	ldr	r2, [pc, #116]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e130:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e132:	4b1c      	ldr	r3, [pc, #112]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	4618      	mov	r0, r3
 801e138:	f000 f92c 	bl	801e394 <TimerSetTimeout>
 801e13c:	e023      	b.n	801e186 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e13e:	4b1a      	ldr	r3, [pc, #104]	; (801e1a8 <UTIL_TIMER_Stop+0xdc>)
 801e140:	68db      	ldr	r3, [r3, #12]
 801e142:	4798      	blx	r3
            TimerListHead = NULL;
 801e144:	4b17      	ldr	r3, [pc, #92]	; (801e1a4 <UTIL_TIMER_Stop+0xd8>)
 801e146:	2200      	movs	r2, #0
 801e148:	601a      	str	r2, [r3, #0]
 801e14a:	e01c      	b.n	801e186 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e14c:	697a      	ldr	r2, [r7, #20]
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	429a      	cmp	r2, r3
 801e152:	d110      	bne.n	801e176 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e154:	697b      	ldr	r3, [r7, #20]
 801e156:	695b      	ldr	r3, [r3, #20]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d006      	beq.n	801e16a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e15c:	697b      	ldr	r3, [r7, #20]
 801e15e:	695b      	ldr	r3, [r3, #20]
 801e160:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e162:	69bb      	ldr	r3, [r7, #24]
 801e164:	697a      	ldr	r2, [r7, #20]
 801e166:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e168:	e00d      	b.n	801e186 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e16a:	2300      	movs	r3, #0
 801e16c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e16e:	69bb      	ldr	r3, [r7, #24]
 801e170:	697a      	ldr	r2, [r7, #20]
 801e172:	615a      	str	r2, [r3, #20]
            break;
 801e174:	e007      	b.n	801e186 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e176:	697b      	ldr	r3, [r7, #20]
 801e178:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	695b      	ldr	r3, [r3, #20]
 801e17e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e180:	697b      	ldr	r3, [r7, #20]
 801e182:	2b00      	cmp	r3, #0
 801e184:	d1e2      	bne.n	801e14c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e186:	2300      	movs	r3, #0
 801e188:	77fb      	strb	r3, [r7, #31]
 801e18a:	693b      	ldr	r3, [r7, #16]
 801e18c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e18e:	68bb      	ldr	r3, [r7, #8]
 801e190:	f383 8810 	msr	PRIMASK, r3
}
 801e194:	e001      	b.n	801e19a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e196:	2301      	movs	r3, #1
 801e198:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e19a:	7ffb      	ldrb	r3, [r7, #31]
}
 801e19c:	4618      	mov	r0, r3
 801e19e:	3720      	adds	r7, #32
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}
 801e1a4:	20001904 	.word	0x20001904
 801e1a8:	0801f548 	.word	0x0801f548

0801e1ac <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e1ac:	b580      	push	{r7, lr}
 801e1ae:	b084      	sub	sp, #16
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	6078      	str	r0, [r7, #4]
 801e1b4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d102      	bne.n	801e1c6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e1c0:	2301      	movs	r3, #1
 801e1c2:	73fb      	strb	r3, [r7, #15]
 801e1c4:	e014      	b.n	801e1f0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e1c6:	4b0d      	ldr	r3, [pc, #52]	; (801e1fc <UTIL_TIMER_SetPeriod+0x50>)
 801e1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ca:	6838      	ldr	r0, [r7, #0]
 801e1cc:	4798      	blx	r3
 801e1ce:	4602      	mov	r2, r0
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e1d4:	6878      	ldr	r0, [r7, #4]
 801e1d6:	f000 f8c1 	bl	801e35c <TimerExists>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d007      	beq.n	801e1f0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e1e0:	6878      	ldr	r0, [r7, #4]
 801e1e2:	f7ff ff73 	bl	801e0cc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e1e6:	6878      	ldr	r0, [r7, #4]
 801e1e8:	f7ff ff02 	bl	801dff0 <UTIL_TIMER_Start>
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	3710      	adds	r7, #16
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bd80      	pop	{r7, pc}
 801e1fa:	bf00      	nop
 801e1fc:	0801f548 	.word	0x0801f548

0801e200 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e200:	b590      	push	{r4, r7, lr}
 801e202:	b089      	sub	sp, #36	; 0x24
 801e204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e206:	f3ef 8310 	mrs	r3, PRIMASK
 801e20a:	60bb      	str	r3, [r7, #8]
  return(result);
 801e20c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e20e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e210:	b672      	cpsid	i
}
 801e212:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e214:	4b38      	ldr	r3, [pc, #224]	; (801e2f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e216:	695b      	ldr	r3, [r3, #20]
 801e218:	4798      	blx	r3
 801e21a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e21c:	4b36      	ldr	r3, [pc, #216]	; (801e2f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e21e:	691b      	ldr	r3, [r3, #16]
 801e220:	4798      	blx	r3
 801e222:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e224:	693a      	ldr	r2, [r7, #16]
 801e226:	697b      	ldr	r3, [r7, #20]
 801e228:	1ad3      	subs	r3, r2, r3
 801e22a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e22c:	4b33      	ldr	r3, [pc, #204]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d037      	beq.n	801e2a4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e234:	4b31      	ldr	r3, [pc, #196]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e23a:	69fb      	ldr	r3, [r7, #28]
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	68fa      	ldr	r2, [r7, #12]
 801e240:	429a      	cmp	r2, r3
 801e242:	d206      	bcs.n	801e252 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e244:	69fb      	ldr	r3, [r7, #28]
 801e246:	681a      	ldr	r2, [r3, #0]
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	1ad2      	subs	r2, r2, r3
 801e24c:	69fb      	ldr	r3, [r7, #28]
 801e24e:	601a      	str	r2, [r3, #0]
 801e250:	e002      	b.n	801e258 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e252:	69fb      	ldr	r3, [r7, #28]
 801e254:	2200      	movs	r2, #0
 801e256:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e258:	69fb      	ldr	r3, [r7, #28]
 801e25a:	695b      	ldr	r3, [r3, #20]
 801e25c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e25e:	69fb      	ldr	r3, [r7, #28]
 801e260:	2b00      	cmp	r3, #0
 801e262:	d1ea      	bne.n	801e23a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e264:	e01e      	b.n	801e2a4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e266:	4b25      	ldr	r3, [pc, #148]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e26c:	4b23      	ldr	r3, [pc, #140]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	695b      	ldr	r3, [r3, #20]
 801e272:	4a22      	ldr	r2, [pc, #136]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e274:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e276:	69fb      	ldr	r3, [r7, #28]
 801e278:	2200      	movs	r2, #0
 801e27a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e27c:	69fb      	ldr	r3, [r7, #28]
 801e27e:	2200      	movs	r2, #0
 801e280:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e282:	69fb      	ldr	r3, [r7, #28]
 801e284:	68db      	ldr	r3, [r3, #12]
 801e286:	69fa      	ldr	r2, [r7, #28]
 801e288:	6912      	ldr	r2, [r2, #16]
 801e28a:	4610      	mov	r0, r2
 801e28c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e28e:	69fb      	ldr	r3, [r7, #28]
 801e290:	7adb      	ldrb	r3, [r3, #11]
 801e292:	2b01      	cmp	r3, #1
 801e294:	d106      	bne.n	801e2a4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e296:	69fb      	ldr	r3, [r7, #28]
 801e298:	7a9b      	ldrb	r3, [r3, #10]
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d102      	bne.n	801e2a4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e29e:	69f8      	ldr	r0, [r7, #28]
 801e2a0:	f7ff fea6 	bl	801dff0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e2a4:	4b15      	ldr	r3, [pc, #84]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d00d      	beq.n	801e2c8 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e2ac:	4b13      	ldr	r3, [pc, #76]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d0d7      	beq.n	801e266 <UTIL_TIMER_IRQ_Handler+0x66>
 801e2b6:	4b11      	ldr	r3, [pc, #68]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	681c      	ldr	r4, [r3, #0]
 801e2bc:	4b0e      	ldr	r3, [pc, #56]	; (801e2f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2be:	699b      	ldr	r3, [r3, #24]
 801e2c0:	4798      	blx	r3
 801e2c2:	4603      	mov	r3, r0
 801e2c4:	429c      	cmp	r4, r3
 801e2c6:	d3ce      	bcc.n	801e266 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e2c8:	4b0c      	ldr	r3, [pc, #48]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d009      	beq.n	801e2e4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e2d0:	4b0a      	ldr	r3, [pc, #40]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	7a1b      	ldrb	r3, [r3, #8]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d104      	bne.n	801e2e4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e2da:	4b08      	ldr	r3, [pc, #32]	; (801e2fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	4618      	mov	r0, r3
 801e2e0:	f000 f858 	bl	801e394 <TimerSetTimeout>
 801e2e4:	69bb      	ldr	r3, [r7, #24]
 801e2e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	f383 8810 	msr	PRIMASK, r3
}
 801e2ee:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e2f0:	bf00      	nop
 801e2f2:	3724      	adds	r7, #36	; 0x24
 801e2f4:	46bd      	mov	sp, r7
 801e2f6:	bd90      	pop	{r4, r7, pc}
 801e2f8:	0801f548 	.word	0x0801f548
 801e2fc:	20001904 	.word	0x20001904

0801e300 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e300:	b580      	push	{r7, lr}
 801e302:	b082      	sub	sp, #8
 801e304:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e306:	4b06      	ldr	r3, [pc, #24]	; (801e320 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e308:	69db      	ldr	r3, [r3, #28]
 801e30a:	4798      	blx	r3
 801e30c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e30e:	4b04      	ldr	r3, [pc, #16]	; (801e320 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e312:	6878      	ldr	r0, [r7, #4]
 801e314:	4798      	blx	r3
 801e316:	4603      	mov	r3, r0
}
 801e318:	4618      	mov	r0, r3
 801e31a:	3708      	adds	r7, #8
 801e31c:	46bd      	mov	sp, r7
 801e31e:	bd80      	pop	{r7, pc}
 801e320:	0801f548 	.word	0x0801f548

0801e324 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e324:	b580      	push	{r7, lr}
 801e326:	b084      	sub	sp, #16
 801e328:	af00      	add	r7, sp, #0
 801e32a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e32c:	4b0a      	ldr	r3, [pc, #40]	; (801e358 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e32e:	69db      	ldr	r3, [r3, #28]
 801e330:	4798      	blx	r3
 801e332:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e334:	4b08      	ldr	r3, [pc, #32]	; (801e358 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	4798      	blx	r3
 801e33c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e33e:	4b06      	ldr	r3, [pc, #24]	; (801e358 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e342:	68f9      	ldr	r1, [r7, #12]
 801e344:	68ba      	ldr	r2, [r7, #8]
 801e346:	1a8a      	subs	r2, r1, r2
 801e348:	4610      	mov	r0, r2
 801e34a:	4798      	blx	r3
 801e34c:	4603      	mov	r3, r0
}
 801e34e:	4618      	mov	r0, r3
 801e350:	3710      	adds	r7, #16
 801e352:	46bd      	mov	sp, r7
 801e354:	bd80      	pop	{r7, pc}
 801e356:	bf00      	nop
 801e358:	0801f548 	.word	0x0801f548

0801e35c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e35c:	b480      	push	{r7}
 801e35e:	b085      	sub	sp, #20
 801e360:	af00      	add	r7, sp, #0
 801e362:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e364:	4b0a      	ldr	r3, [pc, #40]	; (801e390 <TimerExists+0x34>)
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e36a:	e008      	b.n	801e37e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e36c:	68fa      	ldr	r2, [r7, #12]
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	429a      	cmp	r2, r3
 801e372:	d101      	bne.n	801e378 <TimerExists+0x1c>
    {
      return true;
 801e374:	2301      	movs	r3, #1
 801e376:	e006      	b.n	801e386 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	695b      	ldr	r3, [r3, #20]
 801e37c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e37e:	68fb      	ldr	r3, [r7, #12]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d1f3      	bne.n	801e36c <TimerExists+0x10>
  }
  return false;
 801e384:	2300      	movs	r3, #0
}
 801e386:	4618      	mov	r0, r3
 801e388:	3714      	adds	r7, #20
 801e38a:	46bd      	mov	sp, r7
 801e38c:	bc80      	pop	{r7}
 801e38e:	4770      	bx	lr
 801e390:	20001904 	.word	0x20001904

0801e394 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e394:	b590      	push	{r4, r7, lr}
 801e396:	b085      	sub	sp, #20
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e39c:	4b11      	ldr	r3, [pc, #68]	; (801e3e4 <TimerSetTimeout+0x50>)
 801e39e:	6a1b      	ldr	r3, [r3, #32]
 801e3a0:	4798      	blx	r3
 801e3a2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	2201      	movs	r2, #1
 801e3a8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	681c      	ldr	r4, [r3, #0]
 801e3ae:	4b0d      	ldr	r3, [pc, #52]	; (801e3e4 <TimerSetTimeout+0x50>)
 801e3b0:	699b      	ldr	r3, [r3, #24]
 801e3b2:	4798      	blx	r3
 801e3b4:	4602      	mov	r2, r0
 801e3b6:	68fb      	ldr	r3, [r7, #12]
 801e3b8:	4413      	add	r3, r2
 801e3ba:	429c      	cmp	r4, r3
 801e3bc:	d207      	bcs.n	801e3ce <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e3be:	4b09      	ldr	r3, [pc, #36]	; (801e3e4 <TimerSetTimeout+0x50>)
 801e3c0:	699b      	ldr	r3, [r3, #24]
 801e3c2:	4798      	blx	r3
 801e3c4:	4602      	mov	r2, r0
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	441a      	add	r2, r3
 801e3ca:	687b      	ldr	r3, [r7, #4]
 801e3cc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e3ce:	4b05      	ldr	r3, [pc, #20]	; (801e3e4 <TimerSetTimeout+0x50>)
 801e3d0:	689b      	ldr	r3, [r3, #8]
 801e3d2:	687a      	ldr	r2, [r7, #4]
 801e3d4:	6812      	ldr	r2, [r2, #0]
 801e3d6:	4610      	mov	r0, r2
 801e3d8:	4798      	blx	r3
}
 801e3da:	bf00      	nop
 801e3dc:	3714      	adds	r7, #20
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	bd90      	pop	{r4, r7, pc}
 801e3e2:	bf00      	nop
 801e3e4:	0801f548 	.word	0x0801f548

0801e3e8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e3e8:	b480      	push	{r7}
 801e3ea:	b085      	sub	sp, #20
 801e3ec:	af00      	add	r7, sp, #0
 801e3ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e3f0:	4b14      	ldr	r3, [pc, #80]	; (801e444 <TimerInsertTimer+0x5c>)
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e3f6:	4b13      	ldr	r3, [pc, #76]	; (801e444 <TimerInsertTimer+0x5c>)
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	695b      	ldr	r3, [r3, #20]
 801e3fc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e3fe:	e012      	b.n	801e426 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	681a      	ldr	r2, [r3, #0]
 801e404:	68bb      	ldr	r3, [r7, #8]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	429a      	cmp	r2, r3
 801e40a:	d905      	bls.n	801e418 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e40c:	68bb      	ldr	r3, [r7, #8]
 801e40e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e410:	68bb      	ldr	r3, [r7, #8]
 801e412:	695b      	ldr	r3, [r3, #20]
 801e414:	60bb      	str	r3, [r7, #8]
 801e416:	e006      	b.n	801e426 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	687a      	ldr	r2, [r7, #4]
 801e41c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	68ba      	ldr	r2, [r7, #8]
 801e422:	615a      	str	r2, [r3, #20]
        return;
 801e424:	e009      	b.n	801e43a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	695b      	ldr	r3, [r3, #20]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d1e8      	bne.n	801e400 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	687a      	ldr	r2, [r7, #4]
 801e432:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	2200      	movs	r2, #0
 801e438:	615a      	str	r2, [r3, #20]
}
 801e43a:	3714      	adds	r7, #20
 801e43c:	46bd      	mov	sp, r7
 801e43e:	bc80      	pop	{r7}
 801e440:	4770      	bx	lr
 801e442:	bf00      	nop
 801e444:	20001904 	.word	0x20001904

0801e448 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e448:	b580      	push	{r7, lr}
 801e44a:	b084      	sub	sp, #16
 801e44c:	af00      	add	r7, sp, #0
 801e44e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e450:	4b0b      	ldr	r3, [pc, #44]	; (801e480 <TimerInsertNewHeadTimer+0x38>)
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d002      	beq.n	801e462 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	2200      	movs	r2, #0
 801e460:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	68fa      	ldr	r2, [r7, #12]
 801e466:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e468:	4a05      	ldr	r2, [pc, #20]	; (801e480 <TimerInsertNewHeadTimer+0x38>)
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e46e:	4b04      	ldr	r3, [pc, #16]	; (801e480 <TimerInsertNewHeadTimer+0x38>)
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	4618      	mov	r0, r3
 801e474:	f7ff ff8e 	bl	801e394 <TimerSetTimeout>
}
 801e478:	bf00      	nop
 801e47a:	3710      	adds	r7, #16
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}
 801e480:	20001904 	.word	0x20001904

0801e484 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e484:	b580      	push	{r7, lr}
 801e486:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e488:	2218      	movs	r2, #24
 801e48a:	2100      	movs	r1, #0
 801e48c:	4807      	ldr	r0, [pc, #28]	; (801e4ac <UTIL_ADV_TRACE_Init+0x28>)
 801e48e:	f7fe fffa 	bl	801d486 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e496:	2100      	movs	r1, #0
 801e498:	4805      	ldr	r0, [pc, #20]	; (801e4b0 <UTIL_ADV_TRACE_Init+0x2c>)
 801e49a:	f7fe fff4 	bl	801d486 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e49e:	4b05      	ldr	r3, [pc, #20]	; (801e4b4 <UTIL_ADV_TRACE_Init+0x30>)
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	4805      	ldr	r0, [pc, #20]	; (801e4b8 <UTIL_ADV_TRACE_Init+0x34>)
 801e4a4:	4798      	blx	r3
 801e4a6:	4603      	mov	r3, r0
}
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	bd80      	pop	{r7, pc}
 801e4ac:	20001908 	.word	0x20001908
 801e4b0:	20001920 	.word	0x20001920
 801e4b4:	0801f588 	.word	0x0801f588
 801e4b8:	0801e725 	.word	0x0801e725

0801e4bc <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e4bc:	b480      	push	{r7}
 801e4be:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e4c0:	4b06      	ldr	r3, [pc, #24]	; (801e4dc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e4c2:	8a5a      	ldrh	r2, [r3, #18]
 801e4c4:	4b05      	ldr	r3, [pc, #20]	; (801e4dc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e4c6:	8a1b      	ldrh	r3, [r3, #16]
 801e4c8:	429a      	cmp	r2, r3
 801e4ca:	d101      	bne.n	801e4d0 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e4cc:	2301      	movs	r3, #1
 801e4ce:	e000      	b.n	801e4d2 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e4d0:	2300      	movs	r3, #0
}
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	46bd      	mov	sp, r7
 801e4d6:	bc80      	pop	{r7}
 801e4d8:	4770      	bx	lr
 801e4da:	bf00      	nop
 801e4dc:	20001908 	.word	0x20001908

0801e4e0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e4e0:	b408      	push	{r3}
 801e4e2:	b580      	push	{r7, lr}
 801e4e4:	b08d      	sub	sp, #52	; 0x34
 801e4e6:	af00      	add	r7, sp, #0
 801e4e8:	60f8      	str	r0, [r7, #12]
 801e4ea:	60b9      	str	r1, [r7, #8]
 801e4ec:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e4ee:	2300      	movs	r3, #0
 801e4f0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e4f6:	4b37      	ldr	r3, [pc, #220]	; (801e5d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e4f8:	7a1b      	ldrb	r3, [r3, #8]
 801e4fa:	461a      	mov	r2, r3
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	4293      	cmp	r3, r2
 801e500:	d902      	bls.n	801e508 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e502:	f06f 0304 	mvn.w	r3, #4
 801e506:	e05e      	b.n	801e5c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e508:	4b32      	ldr	r3, [pc, #200]	; (801e5d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e50a:	68da      	ldr	r2, [r3, #12]
 801e50c:	68bb      	ldr	r3, [r7, #8]
 801e50e:	4013      	ands	r3, r2
 801e510:	68ba      	ldr	r2, [r7, #8]
 801e512:	429a      	cmp	r2, r3
 801e514:	d002      	beq.n	801e51c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e516:	f06f 0305 	mvn.w	r3, #5
 801e51a:	e054      	b.n	801e5c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e51c:	4b2d      	ldr	r3, [pc, #180]	; (801e5d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e51e:	685b      	ldr	r3, [r3, #4]
 801e520:	2b00      	cmp	r3, #0
 801e522:	d00a      	beq.n	801e53a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	2b00      	cmp	r3, #0
 801e528:	d007      	beq.n	801e53a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e52a:	4b2a      	ldr	r3, [pc, #168]	; (801e5d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e52c:	685b      	ldr	r3, [r3, #4]
 801e52e:	f107 0116 	add.w	r1, r7, #22
 801e532:	f107 0218 	add.w	r2, r7, #24
 801e536:	4610      	mov	r0, r2
 801e538:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e53a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e53e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e544:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e548:	4823      	ldr	r0, [pc, #140]	; (801e5d8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e54a:	f7ff fa29 	bl	801d9a0 <tiny_vsnprintf_like>
 801e54e:	4603      	mov	r3, r0
 801e550:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e552:	f000 f9f1 	bl	801e938 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e556:	8afa      	ldrh	r2, [r7, #22]
 801e558:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e55a:	4413      	add	r3, r2
 801e55c:	b29b      	uxth	r3, r3
 801e55e:	f107 0214 	add.w	r2, r7, #20
 801e562:	4611      	mov	r1, r2
 801e564:	4618      	mov	r0, r3
 801e566:	f000 f969 	bl	801e83c <TRACE_AllocateBufer>
 801e56a:	4603      	mov	r3, r0
 801e56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e570:	d025      	beq.n	801e5be <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e572:	2300      	movs	r3, #0
 801e574:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e576:	e00e      	b.n	801e596 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e578:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e57a:	8aba      	ldrh	r2, [r7, #20]
 801e57c:	3330      	adds	r3, #48	; 0x30
 801e57e:	443b      	add	r3, r7
 801e580:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e584:	4b15      	ldr	r3, [pc, #84]	; (801e5dc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e586:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e588:	8abb      	ldrh	r3, [r7, #20]
 801e58a:	3301      	adds	r3, #1
 801e58c:	b29b      	uxth	r3, r3
 801e58e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e592:	3301      	adds	r3, #1
 801e594:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e596:	8afb      	ldrh	r3, [r7, #22]
 801e598:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e59a:	429a      	cmp	r2, r3
 801e59c:	d3ec      	bcc.n	801e578 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e59e:	8abb      	ldrh	r3, [r7, #20]
 801e5a0:	461a      	mov	r2, r3
 801e5a2:	4b0e      	ldr	r3, [pc, #56]	; (801e5dc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e5a4:	18d0      	adds	r0, r2, r3
 801e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5ae:	f7ff f9f7 	bl	801d9a0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e5b2:	f000 f9df 	bl	801e974 <TRACE_UnLock>

    return TRACE_Send();
 801e5b6:	f000 f831 	bl	801e61c <TRACE_Send>
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	e003      	b.n	801e5c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e5be:	f000 f9d9 	bl	801e974 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e5c2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	3734      	adds	r7, #52	; 0x34
 801e5ca:	46bd      	mov	sp, r7
 801e5cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e5d0:	b001      	add	sp, #4
 801e5d2:	4770      	bx	lr
 801e5d4:	20001908 	.word	0x20001908
 801e5d8:	20001d20 	.word	0x20001d20
 801e5dc:	20001920 	.word	0x20001920

0801e5e0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e5e0:	b480      	push	{r7}
 801e5e2:	b083      	sub	sp, #12
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e5e8:	4a03      	ldr	r2, [pc, #12]	; (801e5f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	6053      	str	r3, [r2, #4]
}
 801e5ee:	bf00      	nop
 801e5f0:	370c      	adds	r7, #12
 801e5f2:	46bd      	mov	sp, r7
 801e5f4:	bc80      	pop	{r7}
 801e5f6:	4770      	bx	lr
 801e5f8:	20001908 	.word	0x20001908

0801e5fc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e5fc:	b480      	push	{r7}
 801e5fe:	b083      	sub	sp, #12
 801e600:	af00      	add	r7, sp, #0
 801e602:	4603      	mov	r3, r0
 801e604:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e606:	4a04      	ldr	r2, [pc, #16]	; (801e618 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e608:	79fb      	ldrb	r3, [r7, #7]
 801e60a:	7213      	strb	r3, [r2, #8]
}
 801e60c:	bf00      	nop
 801e60e:	370c      	adds	r7, #12
 801e610:	46bd      	mov	sp, r7
 801e612:	bc80      	pop	{r7}
 801e614:	4770      	bx	lr
 801e616:	bf00      	nop
 801e618:	20001908 	.word	0x20001908

0801e61c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b088      	sub	sp, #32
 801e620:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e622:	2300      	movs	r3, #0
 801e624:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e626:	2300      	movs	r3, #0
 801e628:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e62a:	f3ef 8310 	mrs	r3, PRIMASK
 801e62e:	613b      	str	r3, [r7, #16]
  return(result);
 801e630:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e634:	b672      	cpsid	i
}
 801e636:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e638:	f000 f9ba 	bl	801e9b0 <TRACE_IsLocked>
 801e63c:	4603      	mov	r3, r0
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d15d      	bne.n	801e6fe <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e642:	f000 f979 	bl	801e938 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e646:	4b34      	ldr	r3, [pc, #208]	; (801e718 <TRACE_Send+0xfc>)
 801e648:	8a1a      	ldrh	r2, [r3, #16]
 801e64a:	4b33      	ldr	r3, [pc, #204]	; (801e718 <TRACE_Send+0xfc>)
 801e64c:	8a5b      	ldrh	r3, [r3, #18]
 801e64e:	429a      	cmp	r2, r3
 801e650:	d04d      	beq.n	801e6ee <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e652:	4b31      	ldr	r3, [pc, #196]	; (801e718 <TRACE_Send+0xfc>)
 801e654:	789b      	ldrb	r3, [r3, #2]
 801e656:	2b01      	cmp	r3, #1
 801e658:	d117      	bne.n	801e68a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e65a:	4b2f      	ldr	r3, [pc, #188]	; (801e718 <TRACE_Send+0xfc>)
 801e65c:	881a      	ldrh	r2, [r3, #0]
 801e65e:	4b2e      	ldr	r3, [pc, #184]	; (801e718 <TRACE_Send+0xfc>)
 801e660:	8a1b      	ldrh	r3, [r3, #16]
 801e662:	1ad3      	subs	r3, r2, r3
 801e664:	b29a      	uxth	r2, r3
 801e666:	4b2c      	ldr	r3, [pc, #176]	; (801e718 <TRACE_Send+0xfc>)
 801e668:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e66a:	4b2b      	ldr	r3, [pc, #172]	; (801e718 <TRACE_Send+0xfc>)
 801e66c:	2202      	movs	r2, #2
 801e66e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e670:	4b29      	ldr	r3, [pc, #164]	; (801e718 <TRACE_Send+0xfc>)
 801e672:	2200      	movs	r2, #0
 801e674:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e676:	4b28      	ldr	r3, [pc, #160]	; (801e718 <TRACE_Send+0xfc>)
 801e678:	8a9b      	ldrh	r3, [r3, #20]
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d105      	bne.n	801e68a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e67e:	4b26      	ldr	r3, [pc, #152]	; (801e718 <TRACE_Send+0xfc>)
 801e680:	2200      	movs	r2, #0
 801e682:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e684:	4b24      	ldr	r3, [pc, #144]	; (801e718 <TRACE_Send+0xfc>)
 801e686:	2200      	movs	r2, #0
 801e688:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e68a:	4b23      	ldr	r3, [pc, #140]	; (801e718 <TRACE_Send+0xfc>)
 801e68c:	789b      	ldrb	r3, [r3, #2]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d115      	bne.n	801e6be <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e692:	4b21      	ldr	r3, [pc, #132]	; (801e718 <TRACE_Send+0xfc>)
 801e694:	8a5a      	ldrh	r2, [r3, #18]
 801e696:	4b20      	ldr	r3, [pc, #128]	; (801e718 <TRACE_Send+0xfc>)
 801e698:	8a1b      	ldrh	r3, [r3, #16]
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d908      	bls.n	801e6b0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e69e:	4b1e      	ldr	r3, [pc, #120]	; (801e718 <TRACE_Send+0xfc>)
 801e6a0:	8a5a      	ldrh	r2, [r3, #18]
 801e6a2:	4b1d      	ldr	r3, [pc, #116]	; (801e718 <TRACE_Send+0xfc>)
 801e6a4:	8a1b      	ldrh	r3, [r3, #16]
 801e6a6:	1ad3      	subs	r3, r2, r3
 801e6a8:	b29a      	uxth	r2, r3
 801e6aa:	4b1b      	ldr	r3, [pc, #108]	; (801e718 <TRACE_Send+0xfc>)
 801e6ac:	829a      	strh	r2, [r3, #20]
 801e6ae:	e006      	b.n	801e6be <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e6b0:	4b19      	ldr	r3, [pc, #100]	; (801e718 <TRACE_Send+0xfc>)
 801e6b2:	8a1b      	ldrh	r3, [r3, #16]
 801e6b4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e6b8:	b29a      	uxth	r2, r3
 801e6ba:	4b17      	ldr	r3, [pc, #92]	; (801e718 <TRACE_Send+0xfc>)
 801e6bc:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e6be:	4b16      	ldr	r3, [pc, #88]	; (801e718 <TRACE_Send+0xfc>)
 801e6c0:	8a1b      	ldrh	r3, [r3, #16]
 801e6c2:	461a      	mov	r2, r3
 801e6c4:	4b15      	ldr	r3, [pc, #84]	; (801e71c <TRACE_Send+0x100>)
 801e6c6:	4413      	add	r3, r2
 801e6c8:	61bb      	str	r3, [r7, #24]
 801e6ca:	697b      	ldr	r3, [r7, #20]
 801e6cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	f383 8810 	msr	PRIMASK, r3
}
 801e6d4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e6d6:	f7e4 faa3 	bl	8002c20 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e6da:	4b11      	ldr	r3, [pc, #68]	; (801e720 <TRACE_Send+0x104>)
 801e6dc:	68db      	ldr	r3, [r3, #12]
 801e6de:	4a0e      	ldr	r2, [pc, #56]	; (801e718 <TRACE_Send+0xfc>)
 801e6e0:	8a92      	ldrh	r2, [r2, #20]
 801e6e2:	4611      	mov	r1, r2
 801e6e4:	69b8      	ldr	r0, [r7, #24]
 801e6e6:	4798      	blx	r3
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	77fb      	strb	r3, [r7, #31]
 801e6ec:	e00d      	b.n	801e70a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e6ee:	f000 f941 	bl	801e974 <TRACE_UnLock>
 801e6f2:	697b      	ldr	r3, [r7, #20]
 801e6f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6f6:	68bb      	ldr	r3, [r7, #8]
 801e6f8:	f383 8810 	msr	PRIMASK, r3
}
 801e6fc:	e005      	b.n	801e70a <TRACE_Send+0xee>
 801e6fe:	697b      	ldr	r3, [r7, #20]
 801e700:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	f383 8810 	msr	PRIMASK, r3
}
 801e708:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e70a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e70e:	4618      	mov	r0, r3
 801e710:	3720      	adds	r7, #32
 801e712:	46bd      	mov	sp, r7
 801e714:	bd80      	pop	{r7, pc}
 801e716:	bf00      	nop
 801e718:	20001908 	.word	0x20001908
 801e71c:	20001920 	.word	0x20001920
 801e720:	0801f588 	.word	0x0801f588

0801e724 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e724:	b580      	push	{r7, lr}
 801e726:	b088      	sub	sp, #32
 801e728:	af00      	add	r7, sp, #0
 801e72a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e72c:	2300      	movs	r3, #0
 801e72e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e730:	f3ef 8310 	mrs	r3, PRIMASK
 801e734:	617b      	str	r3, [r7, #20]
  return(result);
 801e736:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e73a:	b672      	cpsid	i
}
 801e73c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e73e:	4b3c      	ldr	r3, [pc, #240]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e740:	789b      	ldrb	r3, [r3, #2]
 801e742:	2b02      	cmp	r3, #2
 801e744:	d106      	bne.n	801e754 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e746:	4b3a      	ldr	r3, [pc, #232]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e748:	2200      	movs	r2, #0
 801e74a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e74c:	4b38      	ldr	r3, [pc, #224]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e74e:	2200      	movs	r2, #0
 801e750:	821a      	strh	r2, [r3, #16]
 801e752:	e00a      	b.n	801e76a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e754:	4b36      	ldr	r3, [pc, #216]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e756:	8a1a      	ldrh	r2, [r3, #16]
 801e758:	4b35      	ldr	r3, [pc, #212]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e75a:	8a9b      	ldrh	r3, [r3, #20]
 801e75c:	4413      	add	r3, r2
 801e75e:	b29b      	uxth	r3, r3
 801e760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e764:	b29a      	uxth	r2, r3
 801e766:	4b32      	ldr	r3, [pc, #200]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e768:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e76a:	4b31      	ldr	r3, [pc, #196]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e76c:	8a1a      	ldrh	r2, [r3, #16]
 801e76e:	4b30      	ldr	r3, [pc, #192]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e770:	8a5b      	ldrh	r3, [r3, #18]
 801e772:	429a      	cmp	r2, r3
 801e774:	d04d      	beq.n	801e812 <TRACE_TxCpltCallback+0xee>
 801e776:	4b2e      	ldr	r3, [pc, #184]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e778:	8adb      	ldrh	r3, [r3, #22]
 801e77a:	2b01      	cmp	r3, #1
 801e77c:	d149      	bne.n	801e812 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e77e:	4b2c      	ldr	r3, [pc, #176]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e780:	789b      	ldrb	r3, [r3, #2]
 801e782:	2b01      	cmp	r3, #1
 801e784:	d117      	bne.n	801e7b6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e786:	4b2a      	ldr	r3, [pc, #168]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e788:	881a      	ldrh	r2, [r3, #0]
 801e78a:	4b29      	ldr	r3, [pc, #164]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e78c:	8a1b      	ldrh	r3, [r3, #16]
 801e78e:	1ad3      	subs	r3, r2, r3
 801e790:	b29a      	uxth	r2, r3
 801e792:	4b27      	ldr	r3, [pc, #156]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e794:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e796:	4b26      	ldr	r3, [pc, #152]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e798:	2202      	movs	r2, #2
 801e79a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e79c:	4b24      	ldr	r3, [pc, #144]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e79e:	2200      	movs	r2, #0
 801e7a0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e7a2:	4b23      	ldr	r3, [pc, #140]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7a4:	8a9b      	ldrh	r3, [r3, #20]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d105      	bne.n	801e7b6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7aa:	4b21      	ldr	r3, [pc, #132]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7ac:	2200      	movs	r2, #0
 801e7ae:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7b0:	4b1f      	ldr	r3, [pc, #124]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e7b6:	4b1e      	ldr	r3, [pc, #120]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7b8:	789b      	ldrb	r3, [r3, #2]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d115      	bne.n	801e7ea <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e7be:	4b1c      	ldr	r3, [pc, #112]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7c0:	8a5a      	ldrh	r2, [r3, #18]
 801e7c2:	4b1b      	ldr	r3, [pc, #108]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7c4:	8a1b      	ldrh	r3, [r3, #16]
 801e7c6:	429a      	cmp	r2, r3
 801e7c8:	d908      	bls.n	801e7dc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e7ca:	4b19      	ldr	r3, [pc, #100]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7cc:	8a5a      	ldrh	r2, [r3, #18]
 801e7ce:	4b18      	ldr	r3, [pc, #96]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7d0:	8a1b      	ldrh	r3, [r3, #16]
 801e7d2:	1ad3      	subs	r3, r2, r3
 801e7d4:	b29a      	uxth	r2, r3
 801e7d6:	4b16      	ldr	r3, [pc, #88]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7d8:	829a      	strh	r2, [r3, #20]
 801e7da:	e006      	b.n	801e7ea <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e7dc:	4b14      	ldr	r3, [pc, #80]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7de:	8a1b      	ldrh	r3, [r3, #16]
 801e7e0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e7e4:	b29a      	uxth	r2, r3
 801e7e6:	4b12      	ldr	r3, [pc, #72]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7e8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e7ea:	4b11      	ldr	r3, [pc, #68]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e7ec:	8a1b      	ldrh	r3, [r3, #16]
 801e7ee:	461a      	mov	r2, r3
 801e7f0:	4b10      	ldr	r3, [pc, #64]	; (801e834 <TRACE_TxCpltCallback+0x110>)
 801e7f2:	4413      	add	r3, r2
 801e7f4:	61fb      	str	r3, [r7, #28]
 801e7f6:	69bb      	ldr	r3, [r7, #24]
 801e7f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7fa:	693b      	ldr	r3, [r7, #16]
 801e7fc:	f383 8810 	msr	PRIMASK, r3
}
 801e800:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e802:	4b0d      	ldr	r3, [pc, #52]	; (801e838 <TRACE_TxCpltCallback+0x114>)
 801e804:	68db      	ldr	r3, [r3, #12]
 801e806:	4a0a      	ldr	r2, [pc, #40]	; (801e830 <TRACE_TxCpltCallback+0x10c>)
 801e808:	8a92      	ldrh	r2, [r2, #20]
 801e80a:	4611      	mov	r1, r2
 801e80c:	69f8      	ldr	r0, [r7, #28]
 801e80e:	4798      	blx	r3
 801e810:	e00a      	b.n	801e828 <TRACE_TxCpltCallback+0x104>
 801e812:	69bb      	ldr	r3, [r7, #24]
 801e814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	f383 8810 	msr	PRIMASK, r3
}
 801e81c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e81e:	f7e4 fa07 	bl	8002c30 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e822:	f000 f8a7 	bl	801e974 <TRACE_UnLock>
  }
}
 801e826:	bf00      	nop
 801e828:	bf00      	nop
 801e82a:	3720      	adds	r7, #32
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}
 801e830:	20001908 	.word	0x20001908
 801e834:	20001920 	.word	0x20001920
 801e838:	0801f588 	.word	0x0801f588

0801e83c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e83c:	b480      	push	{r7}
 801e83e:	b087      	sub	sp, #28
 801e840:	af00      	add	r7, sp, #0
 801e842:	4603      	mov	r3, r0
 801e844:	6039      	str	r1, [r7, #0]
 801e846:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e84c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e84e:	f3ef 8310 	mrs	r3, PRIMASK
 801e852:	60fb      	str	r3, [r7, #12]
  return(result);
 801e854:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e858:	b672      	cpsid	i
}
 801e85a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e85c:	4b35      	ldr	r3, [pc, #212]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e85e:	8a5a      	ldrh	r2, [r3, #18]
 801e860:	4b34      	ldr	r3, [pc, #208]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e862:	8a1b      	ldrh	r3, [r3, #16]
 801e864:	429a      	cmp	r2, r3
 801e866:	d11b      	bne.n	801e8a0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e868:	4b32      	ldr	r3, [pc, #200]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e86a:	8a5b      	ldrh	r3, [r3, #18]
 801e86c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e870:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e872:	88fa      	ldrh	r2, [r7, #6]
 801e874:	8afb      	ldrh	r3, [r7, #22]
 801e876:	429a      	cmp	r2, r3
 801e878:	d33a      	bcc.n	801e8f0 <TRACE_AllocateBufer+0xb4>
 801e87a:	4b2e      	ldr	r3, [pc, #184]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e87c:	8a1b      	ldrh	r3, [r3, #16]
 801e87e:	88fa      	ldrh	r2, [r7, #6]
 801e880:	429a      	cmp	r2, r3
 801e882:	d235      	bcs.n	801e8f0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e884:	4b2b      	ldr	r3, [pc, #172]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e886:	2201      	movs	r2, #1
 801e888:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e88a:	4b2a      	ldr	r3, [pc, #168]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e88c:	8a5a      	ldrh	r2, [r3, #18]
 801e88e:	4b29      	ldr	r3, [pc, #164]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e890:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e892:	4b28      	ldr	r3, [pc, #160]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e894:	8a1b      	ldrh	r3, [r3, #16]
 801e896:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e898:	4b26      	ldr	r3, [pc, #152]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e89a:	2200      	movs	r2, #0
 801e89c:	825a      	strh	r2, [r3, #18]
 801e89e:	e027      	b.n	801e8f0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e8a0:	4b24      	ldr	r3, [pc, #144]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8a2:	8a5a      	ldrh	r2, [r3, #18]
 801e8a4:	4b23      	ldr	r3, [pc, #140]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8a6:	8a1b      	ldrh	r3, [r3, #16]
 801e8a8:	429a      	cmp	r2, r3
 801e8aa:	d91b      	bls.n	801e8e4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e8ac:	4b21      	ldr	r3, [pc, #132]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8ae:	8a5b      	ldrh	r3, [r3, #18]
 801e8b0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e8b4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e8b6:	88fa      	ldrh	r2, [r7, #6]
 801e8b8:	8afb      	ldrh	r3, [r7, #22]
 801e8ba:	429a      	cmp	r2, r3
 801e8bc:	d318      	bcc.n	801e8f0 <TRACE_AllocateBufer+0xb4>
 801e8be:	4b1d      	ldr	r3, [pc, #116]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8c0:	8a1b      	ldrh	r3, [r3, #16]
 801e8c2:	88fa      	ldrh	r2, [r7, #6]
 801e8c4:	429a      	cmp	r2, r3
 801e8c6:	d213      	bcs.n	801e8f0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e8c8:	4b1a      	ldr	r3, [pc, #104]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8ca:	2201      	movs	r2, #1
 801e8cc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e8ce:	4b19      	ldr	r3, [pc, #100]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8d0:	8a5a      	ldrh	r2, [r3, #18]
 801e8d2:	4b18      	ldr	r3, [pc, #96]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8d4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e8d6:	4b17      	ldr	r3, [pc, #92]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8d8:	8a1b      	ldrh	r3, [r3, #16]
 801e8da:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e8dc:	4b15      	ldr	r3, [pc, #84]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8de:	2200      	movs	r2, #0
 801e8e0:	825a      	strh	r2, [r3, #18]
 801e8e2:	e005      	b.n	801e8f0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e8e4:	4b13      	ldr	r3, [pc, #76]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8e6:	8a1a      	ldrh	r2, [r3, #16]
 801e8e8:	4b12      	ldr	r3, [pc, #72]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8ea:	8a5b      	ldrh	r3, [r3, #18]
 801e8ec:	1ad3      	subs	r3, r2, r3
 801e8ee:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e8f0:	8afa      	ldrh	r2, [r7, #22]
 801e8f2:	88fb      	ldrh	r3, [r7, #6]
 801e8f4:	429a      	cmp	r2, r3
 801e8f6:	d90f      	bls.n	801e918 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e8f8:	4b0e      	ldr	r3, [pc, #56]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e8fa:	8a5a      	ldrh	r2, [r3, #18]
 801e8fc:	683b      	ldr	r3, [r7, #0]
 801e8fe:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e900:	4b0c      	ldr	r3, [pc, #48]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e902:	8a5a      	ldrh	r2, [r3, #18]
 801e904:	88fb      	ldrh	r3, [r7, #6]
 801e906:	4413      	add	r3, r2
 801e908:	b29b      	uxth	r3, r3
 801e90a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e90e:	b29a      	uxth	r2, r3
 801e910:	4b08      	ldr	r3, [pc, #32]	; (801e934 <TRACE_AllocateBufer+0xf8>)
 801e912:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e914:	2300      	movs	r3, #0
 801e916:	82bb      	strh	r3, [r7, #20]
 801e918:	693b      	ldr	r3, [r7, #16]
 801e91a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e91c:	68bb      	ldr	r3, [r7, #8]
 801e91e:	f383 8810 	msr	PRIMASK, r3
}
 801e922:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e924:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e928:	4618      	mov	r0, r3
 801e92a:	371c      	adds	r7, #28
 801e92c:	46bd      	mov	sp, r7
 801e92e:	bc80      	pop	{r7}
 801e930:	4770      	bx	lr
 801e932:	bf00      	nop
 801e934:	20001908 	.word	0x20001908

0801e938 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e938:	b480      	push	{r7}
 801e93a:	b085      	sub	sp, #20
 801e93c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e93e:	f3ef 8310 	mrs	r3, PRIMASK
 801e942:	607b      	str	r3, [r7, #4]
  return(result);
 801e944:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e946:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e948:	b672      	cpsid	i
}
 801e94a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e94c:	4b08      	ldr	r3, [pc, #32]	; (801e970 <TRACE_Lock+0x38>)
 801e94e:	8adb      	ldrh	r3, [r3, #22]
 801e950:	3301      	adds	r3, #1
 801e952:	b29a      	uxth	r2, r3
 801e954:	4b06      	ldr	r3, [pc, #24]	; (801e970 <TRACE_Lock+0x38>)
 801e956:	82da      	strh	r2, [r3, #22]
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e95c:	68bb      	ldr	r3, [r7, #8]
 801e95e:	f383 8810 	msr	PRIMASK, r3
}
 801e962:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e964:	bf00      	nop
 801e966:	3714      	adds	r7, #20
 801e968:	46bd      	mov	sp, r7
 801e96a:	bc80      	pop	{r7}
 801e96c:	4770      	bx	lr
 801e96e:	bf00      	nop
 801e970:	20001908 	.word	0x20001908

0801e974 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e974:	b480      	push	{r7}
 801e976:	b085      	sub	sp, #20
 801e978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e97a:	f3ef 8310 	mrs	r3, PRIMASK
 801e97e:	607b      	str	r3, [r7, #4]
  return(result);
 801e980:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e984:	b672      	cpsid	i
}
 801e986:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e988:	4b08      	ldr	r3, [pc, #32]	; (801e9ac <TRACE_UnLock+0x38>)
 801e98a:	8adb      	ldrh	r3, [r3, #22]
 801e98c:	3b01      	subs	r3, #1
 801e98e:	b29a      	uxth	r2, r3
 801e990:	4b06      	ldr	r3, [pc, #24]	; (801e9ac <TRACE_UnLock+0x38>)
 801e992:	82da      	strh	r2, [r3, #22]
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e998:	68bb      	ldr	r3, [r7, #8]
 801e99a:	f383 8810 	msr	PRIMASK, r3
}
 801e99e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e9a0:	bf00      	nop
 801e9a2:	3714      	adds	r7, #20
 801e9a4:	46bd      	mov	sp, r7
 801e9a6:	bc80      	pop	{r7}
 801e9a8:	4770      	bx	lr
 801e9aa:	bf00      	nop
 801e9ac:	20001908 	.word	0x20001908

0801e9b0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801e9b0:	b480      	push	{r7}
 801e9b2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801e9b4:	4b05      	ldr	r3, [pc, #20]	; (801e9cc <TRACE_IsLocked+0x1c>)
 801e9b6:	8adb      	ldrh	r3, [r3, #22]
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	bf14      	ite	ne
 801e9bc:	2301      	movne	r3, #1
 801e9be:	2300      	moveq	r3, #0
 801e9c0:	b2db      	uxtb	r3, r3
}
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	46bd      	mov	sp, r7
 801e9c6:	bc80      	pop	{r7}
 801e9c8:	4770      	bx	lr
 801e9ca:	bf00      	nop
 801e9cc:	20001908 	.word	0x20001908

0801e9d0 <memset>:
 801e9d0:	4402      	add	r2, r0
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	4293      	cmp	r3, r2
 801e9d6:	d100      	bne.n	801e9da <memset+0xa>
 801e9d8:	4770      	bx	lr
 801e9da:	f803 1b01 	strb.w	r1, [r3], #1
 801e9de:	e7f9      	b.n	801e9d4 <memset+0x4>

0801e9e0 <__libc_init_array>:
 801e9e0:	b570      	push	{r4, r5, r6, lr}
 801e9e2:	4d0d      	ldr	r5, [pc, #52]	; (801ea18 <__libc_init_array+0x38>)
 801e9e4:	4c0d      	ldr	r4, [pc, #52]	; (801ea1c <__libc_init_array+0x3c>)
 801e9e6:	1b64      	subs	r4, r4, r5
 801e9e8:	10a4      	asrs	r4, r4, #2
 801e9ea:	2600      	movs	r6, #0
 801e9ec:	42a6      	cmp	r6, r4
 801e9ee:	d109      	bne.n	801ea04 <__libc_init_array+0x24>
 801e9f0:	4d0b      	ldr	r5, [pc, #44]	; (801ea20 <__libc_init_array+0x40>)
 801e9f2:	4c0c      	ldr	r4, [pc, #48]	; (801ea24 <__libc_init_array+0x44>)
 801e9f4:	f000 f900 	bl	801ebf8 <_init>
 801e9f8:	1b64      	subs	r4, r4, r5
 801e9fa:	10a4      	asrs	r4, r4, #2
 801e9fc:	2600      	movs	r6, #0
 801e9fe:	42a6      	cmp	r6, r4
 801ea00:	d105      	bne.n	801ea0e <__libc_init_array+0x2e>
 801ea02:	bd70      	pop	{r4, r5, r6, pc}
 801ea04:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea08:	4798      	blx	r3
 801ea0a:	3601      	adds	r6, #1
 801ea0c:	e7ee      	b.n	801e9ec <__libc_init_array+0xc>
 801ea0e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea12:	4798      	blx	r3
 801ea14:	3601      	adds	r6, #1
 801ea16:	e7f2      	b.n	801e9fe <__libc_init_array+0x1e>
 801ea18:	0801fbbc 	.word	0x0801fbbc
 801ea1c:	0801fbbc 	.word	0x0801fbbc
 801ea20:	0801fbbc 	.word	0x0801fbbc
 801ea24:	0801fbc4 	.word	0x0801fbc4

0801ea28 <__retarget_lock_acquire_recursive>:
 801ea28:	4770      	bx	lr

0801ea2a <__retarget_lock_release_recursive>:
 801ea2a:	4770      	bx	lr

0801ea2c <register_fini>:
 801ea2c:	4b02      	ldr	r3, [pc, #8]	; (801ea38 <register_fini+0xc>)
 801ea2e:	b113      	cbz	r3, 801ea36 <register_fini+0xa>
 801ea30:	4802      	ldr	r0, [pc, #8]	; (801ea3c <register_fini+0x10>)
 801ea32:	f000 b805 	b.w	801ea40 <atexit>
 801ea36:	4770      	bx	lr
 801ea38:	00000000 	.word	0x00000000
 801ea3c:	0801ea4d 	.word	0x0801ea4d

0801ea40 <atexit>:
 801ea40:	2300      	movs	r3, #0
 801ea42:	4601      	mov	r1, r0
 801ea44:	461a      	mov	r2, r3
 801ea46:	4618      	mov	r0, r3
 801ea48:	f000 b814 	b.w	801ea74 <__register_exitproc>

0801ea4c <__libc_fini_array>:
 801ea4c:	b538      	push	{r3, r4, r5, lr}
 801ea4e:	4d07      	ldr	r5, [pc, #28]	; (801ea6c <__libc_fini_array+0x20>)
 801ea50:	4c07      	ldr	r4, [pc, #28]	; (801ea70 <__libc_fini_array+0x24>)
 801ea52:	1b64      	subs	r4, r4, r5
 801ea54:	10a4      	asrs	r4, r4, #2
 801ea56:	b91c      	cbnz	r4, 801ea60 <__libc_fini_array+0x14>
 801ea58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea5c:	f000 b8d2 	b.w	801ec04 <_fini>
 801ea60:	3c01      	subs	r4, #1
 801ea62:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801ea66:	4798      	blx	r3
 801ea68:	e7f5      	b.n	801ea56 <__libc_fini_array+0xa>
 801ea6a:	bf00      	nop
 801ea6c:	0801fbc4 	.word	0x0801fbc4
 801ea70:	0801fbc8 	.word	0x0801fbc8

0801ea74 <__register_exitproc>:
 801ea74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea78:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801eae8 <__register_exitproc+0x74>
 801ea7c:	4606      	mov	r6, r0
 801ea7e:	f8da 0000 	ldr.w	r0, [sl]
 801ea82:	4698      	mov	r8, r3
 801ea84:	460f      	mov	r7, r1
 801ea86:	4691      	mov	r9, r2
 801ea88:	f7ff ffce 	bl	801ea28 <__retarget_lock_acquire_recursive>
 801ea8c:	4b17      	ldr	r3, [pc, #92]	; (801eaec <__register_exitproc+0x78>)
 801ea8e:	681c      	ldr	r4, [r3, #0]
 801ea90:	b90c      	cbnz	r4, 801ea96 <__register_exitproc+0x22>
 801ea92:	4c17      	ldr	r4, [pc, #92]	; (801eaf0 <__register_exitproc+0x7c>)
 801ea94:	601c      	str	r4, [r3, #0]
 801ea96:	6865      	ldr	r5, [r4, #4]
 801ea98:	f8da 0000 	ldr.w	r0, [sl]
 801ea9c:	2d1f      	cmp	r5, #31
 801ea9e:	dd05      	ble.n	801eaac <__register_exitproc+0x38>
 801eaa0:	f7ff ffc3 	bl	801ea2a <__retarget_lock_release_recursive>
 801eaa4:	f04f 30ff 	mov.w	r0, #4294967295
 801eaa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eaac:	b19e      	cbz	r6, 801ead6 <__register_exitproc+0x62>
 801eaae:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eab2:	2201      	movs	r2, #1
 801eab4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eab8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eabc:	40aa      	lsls	r2, r5
 801eabe:	4313      	orrs	r3, r2
 801eac0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eac4:	2e02      	cmp	r6, #2
 801eac6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eaca:	bf02      	ittt	eq
 801eacc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801ead0:	4313      	orreq	r3, r2
 801ead2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801ead6:	1c6b      	adds	r3, r5, #1
 801ead8:	3502      	adds	r5, #2
 801eada:	6063      	str	r3, [r4, #4]
 801eadc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eae0:	f7ff ffa3 	bl	801ea2a <__retarget_lock_release_recursive>
 801eae4:	2000      	movs	r0, #0
 801eae6:	e7df      	b.n	801eaa8 <__register_exitproc+0x34>
 801eae8:	20000168 	.word	0x20000168
 801eaec:	20001f24 	.word	0x20001f24
 801eaf0:	20001f28 	.word	0x20001f28
 801eaf4:	00000000 	.word	0x00000000

0801eaf8 <floor>:
 801eaf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb00:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801eb04:	2e13      	cmp	r6, #19
 801eb06:	460b      	mov	r3, r1
 801eb08:	4607      	mov	r7, r0
 801eb0a:	460c      	mov	r4, r1
 801eb0c:	4605      	mov	r5, r0
 801eb0e:	dc32      	bgt.n	801eb76 <floor+0x7e>
 801eb10:	2e00      	cmp	r6, #0
 801eb12:	da14      	bge.n	801eb3e <floor+0x46>
 801eb14:	a334      	add	r3, pc, #208	; (adr r3, 801ebe8 <floor+0xf0>)
 801eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb1a:	f7e1 fb3b 	bl	8000194 <__adddf3>
 801eb1e:	2200      	movs	r2, #0
 801eb20:	2300      	movs	r3, #0
 801eb22:	f7e1 ff7d 	bl	8000a20 <__aeabi_dcmpgt>
 801eb26:	b138      	cbz	r0, 801eb38 <floor+0x40>
 801eb28:	2c00      	cmp	r4, #0
 801eb2a:	da56      	bge.n	801ebda <floor+0xe2>
 801eb2c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801eb30:	4325      	orrs	r5, r4
 801eb32:	d055      	beq.n	801ebe0 <floor+0xe8>
 801eb34:	4c2e      	ldr	r4, [pc, #184]	; (801ebf0 <floor+0xf8>)
 801eb36:	2500      	movs	r5, #0
 801eb38:	4623      	mov	r3, r4
 801eb3a:	462f      	mov	r7, r5
 801eb3c:	e025      	b.n	801eb8a <floor+0x92>
 801eb3e:	4a2d      	ldr	r2, [pc, #180]	; (801ebf4 <floor+0xfc>)
 801eb40:	fa42 f806 	asr.w	r8, r2, r6
 801eb44:	ea01 0208 	and.w	r2, r1, r8
 801eb48:	4302      	orrs	r2, r0
 801eb4a:	d01e      	beq.n	801eb8a <floor+0x92>
 801eb4c:	a326      	add	r3, pc, #152	; (adr r3, 801ebe8 <floor+0xf0>)
 801eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb52:	f7e1 fb1f 	bl	8000194 <__adddf3>
 801eb56:	2200      	movs	r2, #0
 801eb58:	2300      	movs	r3, #0
 801eb5a:	f7e1 ff61 	bl	8000a20 <__aeabi_dcmpgt>
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	d0ea      	beq.n	801eb38 <floor+0x40>
 801eb62:	2c00      	cmp	r4, #0
 801eb64:	bfbe      	ittt	lt
 801eb66:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801eb6a:	4133      	asrlt	r3, r6
 801eb6c:	18e4      	addlt	r4, r4, r3
 801eb6e:	ea24 0408 	bic.w	r4, r4, r8
 801eb72:	2500      	movs	r5, #0
 801eb74:	e7e0      	b.n	801eb38 <floor+0x40>
 801eb76:	2e33      	cmp	r6, #51	; 0x33
 801eb78:	dd0b      	ble.n	801eb92 <floor+0x9a>
 801eb7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801eb7e:	d104      	bne.n	801eb8a <floor+0x92>
 801eb80:	4602      	mov	r2, r0
 801eb82:	f7e1 fb07 	bl	8000194 <__adddf3>
 801eb86:	4607      	mov	r7, r0
 801eb88:	460b      	mov	r3, r1
 801eb8a:	4638      	mov	r0, r7
 801eb8c:	4619      	mov	r1, r3
 801eb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801eb96:	f04f 38ff 	mov.w	r8, #4294967295
 801eb9a:	fa28 f802 	lsr.w	r8, r8, r2
 801eb9e:	ea10 0f08 	tst.w	r0, r8
 801eba2:	d0f2      	beq.n	801eb8a <floor+0x92>
 801eba4:	a310      	add	r3, pc, #64	; (adr r3, 801ebe8 <floor+0xf0>)
 801eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebaa:	f7e1 faf3 	bl	8000194 <__adddf3>
 801ebae:	2200      	movs	r2, #0
 801ebb0:	2300      	movs	r3, #0
 801ebb2:	f7e1 ff35 	bl	8000a20 <__aeabi_dcmpgt>
 801ebb6:	2800      	cmp	r0, #0
 801ebb8:	d0be      	beq.n	801eb38 <floor+0x40>
 801ebba:	2c00      	cmp	r4, #0
 801ebbc:	da0a      	bge.n	801ebd4 <floor+0xdc>
 801ebbe:	2e14      	cmp	r6, #20
 801ebc0:	d101      	bne.n	801ebc6 <floor+0xce>
 801ebc2:	3401      	adds	r4, #1
 801ebc4:	e006      	b.n	801ebd4 <floor+0xdc>
 801ebc6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ebca:	2301      	movs	r3, #1
 801ebcc:	40b3      	lsls	r3, r6
 801ebce:	441d      	add	r5, r3
 801ebd0:	42af      	cmp	r7, r5
 801ebd2:	d8f6      	bhi.n	801ebc2 <floor+0xca>
 801ebd4:	ea25 0508 	bic.w	r5, r5, r8
 801ebd8:	e7ae      	b.n	801eb38 <floor+0x40>
 801ebda:	2500      	movs	r5, #0
 801ebdc:	462c      	mov	r4, r5
 801ebde:	e7ab      	b.n	801eb38 <floor+0x40>
 801ebe0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ebe4:	e7a8      	b.n	801eb38 <floor+0x40>
 801ebe6:	bf00      	nop
 801ebe8:	8800759c 	.word	0x8800759c
 801ebec:	7e37e43c 	.word	0x7e37e43c
 801ebf0:	bff00000 	.word	0xbff00000
 801ebf4:	000fffff 	.word	0x000fffff

0801ebf8 <_init>:
 801ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebfa:	bf00      	nop
 801ebfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ebfe:	bc08      	pop	{r3}
 801ec00:	469e      	mov	lr, r3
 801ec02:	4770      	bx	lr

0801ec04 <_fini>:
 801ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec06:	bf00      	nop
 801ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec0a:	bc08      	pop	{r3}
 801ec0c:	469e      	mov	lr, r3
 801ec0e:	4770      	bx	lr
