
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb60  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ecc  0801ec98  0801ec98  0002ec98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fb64  0801fb64  0002fb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc3c  0801fc3c  0003016c  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc3c  0801fc3c  0002fc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc44  0801fc44  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fc44  0801fc44  0002fc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc4c  0801fc4c  0002fc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000016c  20000000  0801fc50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f44  2000016c  0801fdbc  0003016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020b0  0801fdbc  000320b0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004d311  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ba7a  00000000  00000000  0007d4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003ee8  00000000  00000000  00088f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002fef  00000000  00000000  0008ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bec1  00000000  00000000  0008fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004dc81  00000000  00000000  000bbd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db2f0  00000000  00000000  00109981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00010780  00000000  00000000  001e4c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001f53f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000016c 	.word	0x2000016c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ec80 	.word	0x0801ec80

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000170 	.word	0x20000170
 8000174:	0801ec80 	.word	0x0801ec80

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <CS_Select+0x14>)
 8001094:	f005 f864 	bl	8006160 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000400 	.word	0x48000400

080010a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CS_UnSelect+0x14>)
 80010ac:	f005 f858 	bl	8006160 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <CE_Enable>:


void CE_Enable (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <CE_Enable+0x14>)
 80010c4:	f005 f84c 	bl	8006160 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <CE_Disable>:

void CE_Disable (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CE_Disable+0x14>)
 80010dc:	f005 f840 	bl	8006160 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000400 	.word	0x48000400

080010e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001106:	f7ff ffbf 	bl	8001088 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110a:	f7ff ffc9 	bl	80010a0 <CS_UnSelect>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	b2db      	uxtb	r3, r3
 800112e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001130:	f7ff ffaa 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800113e:	f007 fda3 	bl	8008c88 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800114e:	f007 fd9b 	bl	8008c88 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001152:	f7ff ffa5 	bl	80010a0 <CS_UnSelect>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000334 	.word	0x20000334

08001164 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001172:	f7ff ff89 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800117e:	f007 fd83 	bl	8008c88 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800118c:	f007 ff0c 	bl	8008fa8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001190:	f7ff ff86 	bl	80010a0 <CS_UnSelect>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000334 	.word	0x20000334

080011a4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011b2:	f7ff ff69 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011c0:	f007 fd62 	bl	8008c88 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011d0:	f007 feea 	bl	8008fa8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011d4:	f7ff ff64 	bl	80010a0 <CS_UnSelect>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000334 	.word	0x20000334

080011e4 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d104      	bne.n	80011fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff ff76 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011fc:	e090      	b.n	8001320 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b17      	cmp	r3, #23
 8001202:	d104      	bne.n	800120e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff ff6e 	bl	80010e8 <nrf24_WriteReg>
}
 800120c:	e088      	b.n	8001320 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff69 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001216:	213f      	movs	r1, #63	; 0x3f
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff65 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800121e:	2103      	movs	r1, #3
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff61 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff ff5d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800122e:	2103      	movs	r1, #3
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff ff59 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001236:	2102      	movs	r1, #2
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ff55 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800123e:	210e      	movs	r1, #14
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff51 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001246:	2100      	movs	r1, #0
 8001248:	2007      	movs	r0, #7
 800124a:	f7ff ff4d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800124e:	2100      	movs	r1, #0
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001256:	2100      	movs	r1, #0
 8001258:	2009      	movs	r0, #9
 800125a:	f7ff ff45 	bl	80010e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <nrf24_reset+0x144>)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2205      	movs	r2, #5
 8001274:	4619      	mov	r1, r3
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff ff4e 	bl	8001118 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <nrf24_reset+0x148>)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff ff3f 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800129a:	21c3      	movs	r1, #195	; 0xc3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff23 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012a2:	21c4      	movs	r1, #196	; 0xc4
 80012a4:	200d      	movs	r0, #13
 80012a6:	f7ff ff1f 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012aa:	21c5      	movs	r1, #197	; 0xc5
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff ff1b 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012b2:	21c6      	movs	r1, #198	; 0xc6
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff17 	bl	80010e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <nrf24_reset+0x144>)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2205      	movs	r2, #5
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff20 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff ff04 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2012      	movs	r0, #18
 80012e4:	f7ff ff00 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2013      	movs	r0, #19
 80012ec:	f7ff fefc 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fef8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fef4 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2016      	movs	r0, #22
 8001304:	f7ff fef0 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff feec 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f7ff fee8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f7ff fee4 	bl	80010e8 <nrf24_WriteReg>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801ec98 	.word	0x0801ec98
 800132c:	0801eca0 	.word	0x0801eca0

08001330 <NRF24_Init>:




void NRF24_Init (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001334:	f7ff fecc 	bl	80010d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff53 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fed1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fecd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fec9 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001356:	2103      	movs	r1, #3
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec5 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fec1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff febd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800136e:	210e      	movs	r1, #14
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff feb9 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe9f 	bl	80010b8 <CE_Enable>

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800138a:	f7ff fea1 	bl	80010d0 <CE_Disable>

	nrf24_reset (STATUS);
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff ff28 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	2005      	movs	r0, #5
 800139a:	f7ff fea5 	bl	80010e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fee0 	bl	8001164 <nrf24_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ba:	2205      	movs	r2, #5
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff feaa 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff fe8e 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80013cc:	2120      	movs	r1, #32
 80013ce:	2013      	movs	r0, #19
 80013d0:	f7ff fe8a 	bl	80010e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fec5 	bl	8001164 <nrf24_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe7c 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe62 	bl	80010b8 <CE_Enable>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fead 	bl	8001164 <nrf24_ReadReg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <isDataAvailable+0x34>
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff fe5e 	bl	80010e8 <nrf24_WriteReg>

		return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <isDataAvailable+0x36>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00c      	b.n	8001462 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff fe86 	bl	8001164 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddef      	ble.n	8001448 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330a      	adds	r3, #10
 800146c:	2205      	movs	r2, #5
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fe97 	bl	80011a4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330f      	adds	r3, #15
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200b      	movs	r0, #11
 8001480:	f7ff fe90 	bl	80011a4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0414 	add.w	r4, r3, #20
 800148a:	200c      	movs	r0, #12
 800148c:	f7ff fe6a 	bl	8001164 <nrf24_ReadReg>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0415 	add.w	r4, r3, #21
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fe62 	bl	8001164 <nrf24_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0416 	add.w	r4, r3, #22
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fe5a 	bl	8001164 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0417 	add.w	r4, r3, #23
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fe52 	bl	8001164 <nrf24_ReadReg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3318      	adds	r3, #24
 80014c8:	2205      	movs	r2, #5
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fe69 	bl	80011a4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80014d2:	231d      	movs	r3, #29
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e00e      	b.n	80014f6 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b0c      	subs	r3, #12
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fe3c 	bl	8001164 <nrf24_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	dded      	ble.n	80014d8 <NRF24_ReadAll+0x9e>
	}

}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	43db      	mvns	r3, r3
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4013      	ands	r3, r2
 800154e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC_Init+0x94>)
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <MX_ADC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_ADC_Init+0x94>)
 8001568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800156c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_ADC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC_Init+0x94>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC_Init+0x94>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC_Init+0x94>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_ADC_Init+0x94>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_ADC_Init+0x94>)
 80015de:	f002 fcff 	bl	8003fe0 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fe7e 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000188 	.word	0x20000188
 80015f4:	40012400 	.word	0x40012400

080015f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x24>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160e:	f7ff ff7a 	bl	8001506 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspDeInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ff7e 	bl	8001536 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SYS_InitMeasurement+0x14>)
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <SYS_InitMeasurement+0x18>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000188 	.word	0x20000188
 8001660:	40012400 	.word	0x40012400

08001664 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <SYS_GetBatteryLevel+0x5c>)
 8001674:	f000 f82a 	bl	80016cc <ADC_ReadChannels>
 8001678:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e016      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f640 43e4 	movw	r3, #3300	; 0xce4
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	e004      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SYS_GetBatteryLevel+0x64>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016b4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	b4002000 	.word	0xb4002000
 80016c4:	1fff75aa 	.word	0x1fff75aa
 80016c8:	004c08d8 	.word	0x004c08d8

080016cc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016e4:	f7ff ff3a 	bl	800155c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <ADC_ReadChannels+0x88>)
 80016ea:	f003 fa98 	bl	8004c1e <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016f4:	f000 fdf8 	bl	80022e8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <ADC_ReadChannels+0x88>)
 800170c:	f002 ffa4 	bl	8004658 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001716:	f000 fde7 	bl	80022e8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <ADC_ReadChannels+0x88>)
 800171c:	f002 fe80 	bl	8004420 <HAL_ADC_Start>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001726:	f000 fddf 	bl	80022e8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <ADC_ReadChannels+0x88>)
 8001730:	f002 feee 	bl	8004510 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <ADC_ReadChannels+0x88>)
 8001736:	f002 feb9 	bl	80044ac <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ADC_ReadChannels+0x88>)
 800173c:	f002 ff7f 	bl	800463e <HAL_ADC_GetValue>
 8001740:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <ADC_ReadChannels+0x88>)
 8001744:	f002 fde0 	bl	8004308 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000188 	.word	0x20000188

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffe3 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ffe0 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	200b      	movs	r0, #11
 800179e:	f003 fbe4 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a2:	200b      	movs	r0, #11
 80017a4:	f003 fbfb 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f003 fbdc 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f003 fbf3 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	203d      	movs	r0, #61	; 0x3d
 80017be:	f003 fbd4 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80017c2:	203d      	movs	r0, #61	; 0x3d
 80017c4:	f003 fbeb 	bl	8004f9e <HAL_NVIC_EnableIRQ>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017d8:	23ff      	movs	r3, #255	; 0xff
 80017da:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e2:	d311      	bcc.n	8001808 <FLASH_IF_Write+0x3c>
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <FLASH_IF_Write+0x48>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	029a      	lsls	r2, r3, #10
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <FLASH_IF_Write+0x4c>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017f2:	3b01      	subs	r3, #1
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d306      	bcc.n	8001808 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f85a 	bl	80018b8 <FLASH_IF_INT_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	1fff75e0 	.word	0x1fff75e0
 8001818:	03fffc00 	.word	0x03fffc00

0800181c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001828:	23ff      	movs	r3, #255	; 0xff
 800182a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001832:	d311      	bcc.n	8001858 <FLASH_IF_Read+0x3c>
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <FLASH_IF_Read+0x48>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	029a      	lsls	r2, r3, #10
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <FLASH_IF_Read+0x4c>)
 800183c:	4013      	ands	r3, r2
 800183e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001842:	3b01      	subs	r3, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4293      	cmp	r3, r2
 8001848:	d306      	bcc.n	8001858 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f93a 	bl	8001ac8 <FLASH_IF_INT_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	1fff75e0 	.word	0x1fff75e0
 8001868:	03fffc00 	.word	0x03fffc00

0800186c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001876:	23ff      	movs	r3, #255	; 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001880:	d310      	bcc.n	80018a4 <FLASH_IF_Erase+0x38>
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <FLASH_IF_Erase+0x44>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	029a      	lsls	r2, r3, #10
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <FLASH_IF_Erase+0x48>)
 800188a:	4013      	ands	r3, r2
 800188c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001890:	3b01      	subs	r3, #1
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4293      	cmp	r3, r2
 8001896:	d305      	bcc.n	80018a4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f932 	bl	8001b04 <FLASH_IF_INT_Erase>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	1fff75e0 	.word	0x1fff75e0
 80018b4:	03fffc00 	.word	0x03fffc00

080018b8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <FLASH_IF_INT_Write+0x3e>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <FLASH_IF_INT_Write+0x3e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80018f6:	f06f 0305 	mvn.w	r3, #5
 80018fa:	e0da      	b.n	8001ab2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018fc:	f000 f992 	bl	8001c24 <FLASH_IF_INT_Clear_Error>
 8001900:	4603      	mov	r3, r0
 8001902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 80cf 	bne.w	8001aae <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001910:	f004 f822 	bl	8005958 <HAL_FLASH_Unlock>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c6 	bne.w	8001aa8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <FLASH_IF_INT_Write+0x204>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0299      	lsls	r1, r3, #10
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <FLASH_IF_INT_Write+0x208>)
 800192a:	400b      	ands	r3, r1
 800192c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	0adb      	lsrs	r3, r3, #11
 8001938:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800193a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001944:	3b01      	subs	r3, #1
 8001946:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <FLASH_IF_INT_Write+0x204>)
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	0291      	lsls	r1, r2, #10
 800194c:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <FLASH_IF_INT_Write+0x208>)
 800194e:	400a      	ands	r2, r1
 8001950:	fbb3 f1f2 	udiv	r1, r3, r2
 8001954:	fb01 f202 	mul.w	r2, r1, r2
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	0ada      	lsrs	r2, r3, #11
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d905      	bls.n	8001976 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001970:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	e089      	b.n	8001a90 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f925 	bl	8001bd8 <FLASH_IF_INT_IsEmpty>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d031      	beq.n	80019f8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800199c:	23fa      	movs	r3, #250	; 0xfa
 800199e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80019a2:	e07e      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f88a 	bl	8001ac8 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019be:	4413      	add	r3, r2
 80019c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c4:	b292      	uxth	r2, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f01b fd84 	bl	801d4d4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f896 	bl	8001b04 <FLASH_IF_INT_Erase>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80019de:	23fe      	movs	r3, #254	; 0xfe
 80019e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80019e4:	e05d      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80019f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e005      	b.n	8001a04 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80019f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a08:	e026      	b.n	8001a58 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a16:	2001      	movs	r0, #1
 8001a18:	f003 ff5a 	bl	80058d0 <HAL_FLASH_Program>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	4413      	add	r3, r2
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4299      	cmp	r1, r3
 8001a34:	bf08      	it	eq
 8001a36:	4290      	cmpeq	r0, r2
 8001a38:	d003      	beq.n	8001a42 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001a3a:	23fc      	movs	r3, #252	; 0xfc
 8001a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001a40:	e00e      	b.n	8001a60 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3308      	adds	r3, #8
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e003      	b.n	8001a52 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001a4a:	23fc      	movs	r3, #252	; 0xfc
 8001a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001a50:	e006      	b.n	8001a60 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	3308      	adds	r3, #8
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3d4      	bcc.n	8001a0a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001a60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11b      	bne.n	8001aa0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	4413      	add	r3, r2
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	4413      	add	r3, r2
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a82:	bf28      	it	cs
 8001a84:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f4ff af6f 	bcc.w	800197c <FLASH_IF_INT_Write+0xc4>
 8001a9e:	e000      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001aa0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001aa2:	f003 ff7b 	bl	800599c <HAL_FLASH_Lock>
 8001aa6:	e002      	b.n	8001aae <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001aa8:	23fb      	movs	r3, #251	; 0xfb
 8001aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001aae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3740      	adds	r7, #64	; 0x40
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	1fff75e0 	.word	0x1fff75e0
 8001ac0:	03fffc00 	.word	0x03fffc00
 8001ac4:	200001ec 	.word	0x200001ec

08001ac8 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <FLASH_IF_INT_Read+0x1c>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001ae4:	f06f 0305 	mvn.w	r3, #5
 8001ae8:	e008      	b.n	8001afc <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f01b fcee 	bl	801d4d4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b24:	f06f 0305 	mvn.w	r3, #5
 8001b28:	e04e      	b.n	8001bc8 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001b2a:	f000 f87b 	bl	8001c24 <FLASH_IF_INT_Clear_Error>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d144      	bne.n	8001bc4 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b3a:	f003 ff0d 	bl	8005958 <HAL_FLASH_Unlock>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d13d      	bne.n	8001bc0 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b44:	2302      	movs	r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <FLASH_IF_INT_Erase+0xcc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0299      	lsls	r1, r3, #10
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <FLASH_IF_INT_Erase+0xd0>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b70:	3b01      	subs	r3, #1
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <FLASH_IF_INT_Erase+0xcc>)
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	0291      	lsls	r1, r2, #10
 8001b78:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <FLASH_IF_INT_Erase+0xd0>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	0ada      	lsrs	r2, r3, #11
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001b90:	f107 0214 	add.w	r2, r7, #20
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 ffde 	bl	8005b5c <HAL_FLASHEx_Erase>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001ba4:	7fbb      	ldrb	r3, [r7, #30]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001baa:	7fbb      	ldrb	r3, [r7, #30]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d101      	bne.n	8001bb4 <FLASH_IF_INT_Erase+0xb0>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e001      	b.n	8001bb8 <FLASH_IF_INT_Erase+0xb4>
 8001bb4:	f06f 0301 	mvn.w	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001bba:	f003 feef 	bl	800599c <HAL_FLASH_Lock>
 8001bbe:	e001      	b.n	8001bc4 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001bc0:	23fb      	movs	r3, #251	; 0xfb
 8001bc2:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001bc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	1fff75e0 	.word	0x1fff75e0
 8001bd4:	03fffc00 	.word	0x03fffc00

08001bd8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	e011      	b.n	8001c10 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	bf08      	it	eq
 8001bf8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001bfc:	d002      	beq.n	8001c04 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      break;
 8001c02:	e009      	b.n	8001c18 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3308      	adds	r3, #8
 8001c08:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d3e9      	bcc.n	8001bec <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001c2a:	23fb      	movs	r3, #251	; 0xfb
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001c2e:	f003 fe93 	bl	8005958 <HAL_FLASH_Unlock>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d110      	bne.n	8001c5a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c46:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001c4a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001c4c:	f003 fea6 	bl	800599c <HAL_FLASH_Lock>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	58004000 	.word	0x58004000

08001c6c <LL_AHB2_GRP1_EnableClock>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff ffdb 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff ffd8 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f7ff ffd5 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001cc8:	4825      	ldr	r0, [pc, #148]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cca:	f004 fa49 	bl	8006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cd4:	f004 fa44 	bl	8006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f240 2131 	movw	r1, #561	; 0x231
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f004 fa3d 	bl	8006160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001ce6:	2338      	movs	r3, #56	; 0x38
 8001ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4819      	ldr	r0, [pc, #100]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cfc:	f004 f802 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001d00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001d18:	f003 fff4 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001d1c:	2331      	movs	r3, #49	; 0x31
 8001d1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f003 ffe6 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d3e:	2311      	movs	r3, #17
 8001d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f003 ffd7 	bl	8005d04 <HAL_GPIO_Init>

}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	48000400 	.word	0x48000400

08001d64 <LL_AHB2_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <LL_APB1_GRP1_EnableClock>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_I2C2_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <MX_I2C2_Init+0x7c>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e00:	f004 f9de 	bl	80061c0 <HAL_I2C_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e0a:	f000 fa6d 	bl	80022e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e12:	f004 feb9 	bl	8006b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e1c:	f000 fa64 	bl	80022e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e20:	2100      	movs	r1, #0
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e24:	f004 fefa 	bl	8006c1c <HAL_I2CEx_ConfigDigitalFilter>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f000 fa5b 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001f0 	.word	0x200001f0
 8001e3c:	40005800 	.word	0x40005800
 8001e40:	00707cbb 	.word	0x00707cbb

08001e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	; 0x58
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2238      	movs	r2, #56	; 0x38
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f01c fdf9 	bl	801ea5c <memset>
  if(i2cHandle->Instance==I2C2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_I2C_MspInit+0xb0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d13b      	bne.n	8001eec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e78:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 f986 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e8e:	f000 fa2b 	bl	80022e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff ff66 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff ff63 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001eac:	2301      	movs	r3, #1
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f003 ff21 	bl	8005d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_I2C_MspInit+0xb4>)
 8001ee0:	f003 ff10 	bl	8005d04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ee8:	f7ff ff54 	bl	8001d94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3758      	adds	r7, #88	; 0x58
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005800 	.word	0x40005800
 8001ef8:	48000400 	.word	0x48000400

08001efc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f023 0218 	bic.w	r2, r3, #24
 8001f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2c:	f001 fe6a 	bl	8003c04 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f30:	f000 f84e 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f34:	f7ff feb2 	bl	8001c9c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001f38:	f00b f950 	bl	800d1dc <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001f3c:	f001 fabc 	bl	80034b8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001f40:	f7ff ff40 	bl	8001dc4 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001f44:	f000 ff12 	bl	8002d6c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001f48:	f000 ff44 	bl	8002dd4 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001f4c:	f000 fb30 	bl	80025b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <main+0x8c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8001f56:	f7ff f9eb 	bl	8001330 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001f5a:	210a      	movs	r1, #10
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <main+0x90>)
 8001f5e:	f7ff fa0e 	bl	800137e <NRF24_RxMode>


   NRF24_ReadAll(data);
 8001f62:	4816      	ldr	r0, [pc, #88]	; (8001fbc <main+0x94>)
 8001f64:	f7ff fa69 	bl	800143a <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8001f68:	f000 f9ca 	bl	8002300 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)aRXBufferUser, RX_BUFFER_SIZE);
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <main+0x98>)
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <main+0x9c>)
 8001f72:	f008 fe33 	bl	800abdc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f004 f8ee 	bl	8006160 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001f84:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <main+0xa0>)
 8001f86:	f008 fbab 	bl	800a6e0 <HAL_TIM_Base_Start_IT>
  {



    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001f8a:	f00b f92f 	bl	800d1ec <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001f8e:	f000 f9fb 	bl	8002388 <F1_pull>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4798      	blx	r3



    if(UART2_SET)MeasurePM_sens();
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <main+0x8c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <main+0x7a>
 8001f9e:	f000 f881 	bl	80020a4 <MeasurePM_sens>
    if (isDataAvailable(2) == 1)
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f7ff fa2a 	bl	80013fc <isDataAvailable>
   	  {
 //  		  NRF24_Receive(RxData);
//   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4808      	ldr	r0, [pc, #32]	; (8001fcc <main+0xa4>)
 8001fac:	f004 f8ef 	bl	800618e <HAL_GPIO_TogglePin>
    MX_LoRaWAN_Process();
 8001fb0:	e7eb      	b.n	8001f8a <main+0x62>
 8001fb2:	bf00      	nop
 8001fb4:	20000010 	.word	0x20000010
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	20000274 	.word	0x20000274
 8001fc0:	20000244 	.word	0x20000244
 8001fc4:	200004e4 	.word	0x200004e4
 8001fc8:	200003b0 	.word	0x200003b0
 8001fcc:	48000400 	.word	0x48000400

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09a      	sub	sp, #104	; 0x68
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0320 	add.w	r3, r7, #32
 8001fda:	2248      	movs	r2, #72	; 0x48
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f01c fd3c 	bl	801ea5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ff6:	f004 fe5d 	bl	8006cb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff ff7e 	bl	8001efc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <SystemClock_Config+0xb8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <SystemClock_Config+0xb8>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <SystemClock_Config+0xb8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800201c:	2307      	movs	r3, #7
 800201e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8002020:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002026:	2381      	movs	r3, #129	; 0x81
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	4618      	mov	r0, r3
 8002042:	f005 f983 	bl	800734c <HAL_RCC_OscConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800204c:	f000 f94c 	bl	80022e8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002050:	234f      	movs	r3, #79	; 0x4f
 8002052:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002054:	2302      	movs	r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f005 fcee 	bl	8007a50 <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800207a:	f000 f935 	bl	80022e8 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3768      	adds	r7, #104	; 0x68
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	58000400 	.word	0x58000400

0800208c <EnablePM_sens>:

/* USER CODE BEGIN 4 */



void EnablePM_sens(void){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f004 f861 	bl	8006160 <HAL_GPIO_WritePin>

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af02      	add	r7, sp, #8
	uint16_t RxLen;

	if(aRXBufferUser[0]==0x02 && aRXBufferUser[31]== 0x03){
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MeasurePM_sens+0x6c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d11e      	bne.n	80020f2 <MeasurePM_sens+0x4e>
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MeasurePM_sens+0x6c>)
 80020b6:	7fdb      	ldrb	r3, [r3, #31]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d119      	bne.n	80020f2 <MeasurePM_sens+0x4e>

	PM2_5 = aRXBufferUser[5] + aRXBufferUser[6]*256 + aRXBufferUser[7]*65536;
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MeasurePM_sens+0x6c>)
 80020c0:	795b      	ldrb	r3, [r3, #5]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <MeasurePM_sens+0x6c>)
 80020c8:	799b      	ldrb	r3, [r3, #6]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	441a      	add	r2, r3
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <MeasurePM_sens+0x6c>)
 80020d2:	79db      	ldrb	r3, [r3, #7]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	4413      	add	r3, r2
 80020da:	461a      	mov	r2, r3
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <MeasurePM_sens+0x70>)
 80020de:	601a      	str	r2, [r3, #0]
	UART2_SET  = 0;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <MeasurePM_sens+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE);
 80020e6:	2220      	movs	r2, #32
 80020e8:	4909      	ldr	r1, [pc, #36]	; (8002110 <MeasurePM_sens+0x6c>)
 80020ea:	480c      	ldr	r0, [pc, #48]	; (800211c <MeasurePM_sens+0x78>)
 80020ec:	f008 fd76 	bl	800abdc <HAL_UART_Receive_IT>
 80020f0:	e009      	b.n	8002106 <MeasurePM_sens+0x62>

}
		   else
			   HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE, &RxLen, 1000);
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	2220      	movs	r2, #32
 80020fc:	4904      	ldr	r1, [pc, #16]	; (8002110 <MeasurePM_sens+0x6c>)
 80020fe:	4807      	ldr	r0, [pc, #28]	; (800211c <MeasurePM_sens+0x78>)
 8002100:	f00a fefb 	bl	800cefa <HAL_UARTEx_ReceiveToIdle>




}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000244 	.word	0x20000244
 8002114:	20000264 	.word	0x20000264
 8002118:	20000010 	.word	0x20000010
 800211c:	200004e4 	.word	0x200004e4

08002120 <MeasureTempHum>:

void MeasureTempHum(void){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2306      	movs	r3, #6
 800212c:	4a40      	ldr	r2, [pc, #256]	; (8002230 <MeasureTempHum+0x110>)
 800212e:	2188      	movs	r1, #136	; 0x88
 8002130:	4840      	ldr	r0, [pc, #256]	; (8002234 <MeasureTempHum+0x114>)
 8002132:	f004 f9c9 	bl	80064c8 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <MeasureTempHum+0x110>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <MeasureTempHum+0x110>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4413      	add	r3, r2
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <MeasureTempHum+0x118>)
 800214c:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <MeasureTempHum+0x110>)
 8002150:	78db      	ldrb	r3, [r3, #3]
 8002152:	b29b      	uxth	r3, r3
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <MeasureTempHum+0x110>)
 800215a:	791b      	ldrb	r3, [r3, #4]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <MeasureTempHum+0x11c>)
 8002164:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <MeasureTempHum+0x118>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fd90 	bl	8000c90 <__aeabi_ui2f>
 8002170:	4603      	mov	r3, r0
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f96c 	bl	8000450 <__aeabi_f2d>
 8002178:	a329      	add	r3, pc, #164	; (adr r3, 8002220 <MeasureTempHum+0x100>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe f9bf 	bl	8000500 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	a327      	add	r3, pc, #156	; (adr r3, 8002228 <MeasureTempHum+0x108>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fae0 	bl	8000754 <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <MeasureTempHum+0x120>)
 80021a2:	f7fd fff5 	bl	8000190 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fc69 	bl	8000a84 <__aeabi_d2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <MeasureTempHum+0x124>)
 80021b6:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <MeasureTempHum+0x11c>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fd67 	bl	8000c90 <__aeabi_ui2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f943 	bl	8000450 <__aeabi_f2d>
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MeasureTempHum+0x128>)
 80021d0:	f7fe f996 	bl	8000500 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	a312      	add	r3, pc, #72	; (adr r3, 8002228 <MeasureTempHum+0x108>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	f7fe fab7 	bl	8000754 <__aeabi_ddiv>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <MeasureTempHum+0x12c>)
 80021f4:	f7fd ffcc 	bl	8000190 <__aeabi_dsub>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fc40 	bl	8000a84 <__aeabi_d2f>
 8002204:	4603      	mov	r3, r0
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MeasureTempHum+0x130>)
 8002208:	6013      	str	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 800220a:	2364      	movs	r3, #100	; 0x64
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <MeasureTempHum+0x134>)
 8002212:	2188      	movs	r1, #136	; 0x88
 8002214:	4807      	ldr	r0, [pc, #28]	; (8002234 <MeasureTempHum+0x114>)
 8002216:	f004 f863 	bl	80062e0 <HAL_I2C_Master_Transmit>
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	00000000 	.word	0x00000000
 8002224:	4065e000 	.word	0x4065e000
 8002228:	00000000 	.word	0x00000000
 800222c:	40efffe0 	.word	0x40efffe0
 8002230:	200002a8 	.word	0x200002a8
 8002234:	200001f0 	.word	0x200001f0
 8002238:	200002ae 	.word	0x200002ae
 800223c:	200002b0 	.word	0x200002b0
 8002240:	40468000 	.word	0x40468000
 8002244:	20000268 	.word	0x20000268
 8002248:	405f4000 	.word	0x405f4000
 800224c:	40180000 	.word	0x40180000
 8002250:	2000026c 	.word	0x2000026c
 8002254:	20000009 	.word	0x20000009

08002258 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d12e      	bne.n	80022c6 <HAL_TIM_PeriodElapsedCallback+0x6e>
   {
	  counter++;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002270:	6013      	str	r3, [r2, #0]
      switch(counter){
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800227a:	d007      	beq.n	800228c <HAL_TIM_PeriodElapsedCallback+0x34>
 800227c:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002280:	dc0f      	bgt.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002282:	2b05      	cmp	r3, #5
 8002284:	d006      	beq.n	8002294 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8002286:	2b0a      	cmp	r3, #10
 8002288:	d008      	beq.n	800229c <HAL_TIM_PeriodElapsedCallback+0x44>
 800228a:	e00a      	b.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 820:
    	  F1_push(EnablePM_sens);
 800228c:	4812      	ldr	r0, [pc, #72]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800228e:	f000 f847 	bl	8002320 <F1_push>

    	  break;
 8002292:	e006      	b.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 5:
     	  PM_measure_flag = 1;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]

    	  break;
 800229a:	e002      	b.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 10:
    	//  F1_push(DisablePM_sens);

    	  PM_measure_flag = 0;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
      }
      F1_push(MeasureTempHum);
 80022a2:	480f      	ldr	r0, [pc, #60]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022a4:	f000 f83c 	bl	8002320 <F1_push>

      counter %= 20;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ae:	fb83 2301 	smull	r2, r3, r3, r1
 80022b2:	10da      	asrs	r2, r3, #3
 80022b4:	17cb      	asrs	r3, r1, #31
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	1aca      	subs	r2, r1, r3
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022c4:	601a      	str	r2, [r3, #0]
   }
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200003b0 	.word	0x200003b0
 80022d4:	20000270 	.word	0x20000270
 80022d8:	0800208d 	.word	0x0800208d
 80022dc:	20000000 	.word	0x20000000
 80022e0:	08002121 	.word	0x08002121
 80022e4:	66666667 	.word	0x66666667

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <Error_Handler+0x8>

080022f2 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
	...

08002300 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  F1_last = 0;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <F1_QueueIni+0x18>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <F1_QueueIni+0x1c>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	200002b4 	.word	0x200002b4
 800231c:	200002b8 	.word	0x200002b8

08002320 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <F1_push+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	425a      	negs	r2, r3
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	f002 020f 	and.w	r2, r2, #15
 8002338:	bf58      	it	pl
 800233a:	4253      	negpl	r3, r2
 800233c:	4a10      	ldr	r2, [pc, #64]	; (8002380 <F1_push+0x60>)
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <F1_push+0x28>
 8002344:	2301      	movs	r3, #1
 8002346:	e014      	b.n	8002372 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <F1_push+0x5c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	490b      	ldr	r1, [pc, #44]	; (800237c <F1_push+0x5c>)
 8002350:	600a      	str	r2, [r1, #0]
 8002352:	490c      	ldr	r1, [pc, #48]	; (8002384 <F1_push+0x64>)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <F1_push+0x5c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	425a      	negs	r2, r3
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	f002 020f 	and.w	r2, r2, #15
 8002368:	bf58      	it	pl
 800236a:	4253      	negpl	r3, r2
 800236c:	4a03      	ldr	r2, [pc, #12]	; (800237c <F1_push+0x5c>)
 800236e:	6013      	str	r3, [r2, #0]
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	200002b4 	.word	0x200002b4
 8002380:	200002b8 	.word	0x200002b8
 8002384:	200002bc 	.word	0x200002bc

08002388 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <F1_pull+0x4c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <F1_pull+0x50>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d101      	bne.n	800239e <F1_pull+0x16>
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <F1_pull+0x54>)
 800239c:	e014      	b.n	80023c8 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <F1_pull+0x50>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <F1_pull+0x50>)
 80023a6:	600a      	str	r2, [r1, #0]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <F1_pull+0x58>)
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <F1_pull+0x50>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	425a      	negs	r2, r3
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	f002 020f 	and.w	r2, r2, #15
 80023be:	bf58      	it	pl
 80023c0:	4253      	negpl	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <F1_pull+0x50>)
 80023c4:	6013      	str	r3, [r2, #0]
  return pullVar;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	200002b4 	.word	0x200002b4
 80023d8:	200002b8 	.word	0x200002b8
 80023dc:	080022f3 	.word	0x080022f3
 80023e0:	200002bc 	.word	0x200002bc

080023e4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <LL_APB1_GRP1_EnableClock>:
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4313      	orrs	r3, r2
 800241a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002428:	68fb      	ldr	r3, [r7, #12]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	222c      	movs	r2, #44	; 0x2c
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f01c fb0b 	bl	801ea5c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <MX_RTC_Init+0x9c>)
 8002448:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <MX_RTC_Init+0xa0>)
 800244a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_RTC_Init+0x9c>)
 800244e:	221f      	movs	r2, #31
 8002450:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_RTC_Init+0x9c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_RTC_Init+0x9c>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_RTC_Init+0x9c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_RTC_Init+0x9c>)
 8002466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_RTC_Init+0x9c>)
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <MX_RTC_Init+0x9c>)
 8002474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800247a:	4815      	ldr	r0, [pc, #84]	; (80024d0 <MX_RTC_Init+0x9c>)
 800247c:	f005 ffa4 	bl	80083c8 <HAL_RTC_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002486:	f7ff ff2f 	bl	80022e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800248a:	4811      	ldr	r0, [pc, #68]	; (80024d0 <MX_RTC_Init+0x9c>)
 800248c:	f006 fa9a 	bl	80089c4 <HAL_RTCEx_SetSSRU_IT>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002496:	f7ff ff27 	bl	80022e8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80024a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024aa:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80024ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_RTC_Init+0x9c>)
 80024ba:	f006 f807 	bl	80084cc <HAL_RTC_SetAlarm_IT>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80024c4:	f7ff ff10 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	3730      	adds	r7, #48	; 0x30
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200002fc 	.word	0x200002fc
 80024d4:	40002800 	.word	0x40002800

080024d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b090      	sub	sp, #64	; 0x40
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	2238      	movs	r2, #56	; 0x38
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f01c fab7 	bl	801ea5c <memset>
  if(rtcHandle->Instance==RTC)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_RTC_MspInit+0x74>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d125      	bne.n	8002544 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f005 fe43 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002514:	f7ff fee8 	bl	80022e8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002518:	f7ff ff64 	bl	80023e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800251c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002520:	f7ff ff70 	bl	8002404 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2002      	movs	r0, #2
 800252a:	f002 fd1e 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800252e:	2002      	movs	r0, #2
 8002530:	f002 fd35 	bl	8004f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	202a      	movs	r0, #42	; 0x2a
 800253a:	f002 fd16 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800253e:	202a      	movs	r0, #42	; 0x2a
 8002540:	f002 fd2d 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002544:	bf00      	nop
 8002546:	3740      	adds	r7, #64	; 0x40
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40002800 	.word	0x40002800

08002550 <LL_AHB2_GRP1_EnableClock>:
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800255e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4313      	orrs	r3, r2
 8002566:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <LL_APB1_GRP1_EnableClock>:
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800258e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4313      	orrs	r3, r2
 8002596:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025a4:	68fb      	ldr	r3, [r7, #12]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <MX_SPI2_Init+0x74>)
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <MX_SPI2_Init+0x78>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_SPI2_Init+0x74>)
 80025bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_SPI2_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_SPI2_Init+0x74>)
 80025ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_SPI2_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <MX_SPI2_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_SPI2_Init+0x74>)
 80025de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_SPI2_Init+0x74>)
 80025e6:	2218      	movs	r2, #24
 80025e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_SPI2_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_SPI2_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_SPI2_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_SPI2_Init+0x74>)
 80025fe:	2207      	movs	r2, #7
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_SPI2_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_SPI2_Init+0x74>)
 800260a:	2208      	movs	r2, #8
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_SPI2_Init+0x74>)
 8002610:	f006 fa66 	bl	8008ae0 <HAL_SPI_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800261a:	f7ff fe65 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000334 	.word	0x20000334
 8002628:	40003800 	.word	0x40003800

0800262c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b096      	sub	sp, #88	; 0x58
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	2238      	movs	r2, #56	; 0x38
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f01c fa05 	bl	801ea5c <memset>
  if(spiHandle->Instance==SPI2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <HAL_SPI_MspInit+0xb0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d13b      	bne.n	80026d4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800265c:	2310      	movs	r3, #16
 800265e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002664:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	4618      	mov	r0, r3
 800266c:	f005 fd92 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002676:	f7ff fe37 	bl	80022e8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800267a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800267e:	f7ff ff7f 	bl	8002580 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	2002      	movs	r0, #2
 8002684:	f7ff ff64 	bl	8002550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff ff61 	bl	8002550 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800268e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a0:	2305      	movs	r3, #5
 80026a2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026a8:	4619      	mov	r1, r3
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <HAL_SPI_MspInit+0xb4>)
 80026ac:	f003 fb2a 	bl	8005d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026c2:	2305      	movs	r3, #5
 80026c4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ca:	4619      	mov	r1, r3
 80026cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d0:	f003 fb18 	bl	8005d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80026d4:	bf00      	nop
 80026d6:	3758      	adds	r7, #88	; 0x58
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40003800 	.word	0x40003800
 80026e0:	48000400 	.word	0x48000400

080026e4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	58000400 	.word	0x58000400

080026fc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002718:	f001 fa94 	bl	8003c44 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800271c:	f7ff ffe2 	bl	80026e4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002720:	2001      	movs	r0, #1
 8002722:	f004 fb59 	bl	8006dd8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800272e:	f001 fa97 	bl	8003c60 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002732:	f001 f90b 	bl	800394c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800273e:	f001 fa81 	bl	8003c44 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002742:	2101      	movs	r1, #1
 8002744:	2000      	movs	r0, #0
 8002746:	f004 fac3 	bl	8006cd0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}

0800274e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002752:	f001 fa85 	bl	8003c60 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800276a:	e7fe      	b.n	800276a <NMI_Handler+0x4>

0800276c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <HardFault_Handler+0x4>

08002772 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <MemManage_Handler+0x4>

08002778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <BusFault_Handler+0x4>

0800277e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <UsageFault_Handler+0x4>

08002784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80027ba:	f006 f93f 	bl	8008a3c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200002fc 	.word	0x200002fc

080027c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <DMA1_Channel1_IRQHandler+0x10>)
 80027ce:	f002 fe7d 	bl	80054cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000578 	.word	0x20000578

080027dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <DMA1_Channel2_IRQHandler+0x10>)
 80027e2:	f002 fe73 	bl	80054cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200005d8 	.word	0x200005d8

080027f0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <TIM16_IRQHandler+0x18>)
 80027f6:	f007 ffbf 	bl	800a778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <TIM16_IRQHandler+0x1c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	4a02      	ldr	r2, [pc, #8]	; (800280c <TIM16_IRQHandler+0x1c>)
 8002802:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200003b0 	.word	0x200003b0
 800280c:	20000398 	.word	0x20000398

08002810 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <TIM17_IRQHandler+0x18>)
 8002816:	f007 ffaf 	bl	800a778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <TIM17_IRQHandler+0x1c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	4a02      	ldr	r2, [pc, #8]	; (800282c <TIM17_IRQHandler+0x1c>)
 8002822:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200003fc 	.word	0x200003fc
 800282c:	2000039c 	.word	0x2000039c

08002830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <USART1_IRQHandler+0x10>)
 8002836:	f008 fa9d 	bl	800ad74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000450 	.word	0x20000450

08002844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <USART2_IRQHandler+0x10>)
 800284a:	f008 fa93 	bl	800ad74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200004e4 	.word	0x200004e4

08002858 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <RTC_Alarm_IRQHandler+0x10>)
 800285e:	f005 ff9d 	bl	800879c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200002fc 	.word	0x200002fc

0800286c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002872:	f007 fd3f 	bl	800a2f4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200003a0 	.word	0x200003a0

08002880 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <DMAMUX1_OVR_IRQHandler+0x10>)
 8002886:	f002 ffd1 	bl	800582c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200005d8 	.word	0x200005d8

08002894 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028b8:	68fb      	ldr	r3, [r7, #12]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_SUBGHZ_Init+0x20>)
 80028ca:	2208      	movs	r2, #8
 80028cc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_SUBGHZ_Init+0x20>)
 80028d0:	f007 fa8e 	bl	8009df0 <HAL_SUBGHZ_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80028da:	f7ff fd05 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200003a0 	.word	0x200003a0

080028e8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff ffcf 	bl	8002894 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2032      	movs	r0, #50	; 0x32
 80028fc:	f002 fb35 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002900:	2032      	movs	r0, #50	; 0x32
 8002902:	f002 fb4c 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <LL_RCC_SetClkAfterWakeFromStop>:
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002938:	4b02      	ldr	r3, [pc, #8]	; (8002944 <LL_FLASH_GetUDN+0x10>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	1fff7580 	.word	0x1fff7580

08002948 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <LL_FLASH_GetDeviceID+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	1fff7584 	.word	0x1fff7584

08002960 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <LL_FLASH_GetSTCompanyID+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0a1b      	lsrs	r3, r3, #8
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	1fff7584 	.word	0x1fff7584

08002978 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff ffc6 	bl	800290e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002982:	f01b fb35 	bl	801dff0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <SystemApp_Init+0x50>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800298c:	f000 f98c 	bl	8002ca8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002990:	f01b fdbe 	bl	801e510 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002994:	480d      	ldr	r0, [pc, #52]	; (80029cc <SystemApp_Init+0x54>)
 8002996:	f01b fe69 	bl	801e66c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <SystemApp_Init+0x58>)
 800299c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029a0:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80029a2:	2002      	movs	r0, #2
 80029a4:	f01b fe70 	bl	801e688 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80029a8:	f7fe fe4e 	bl	8001648 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80029ac:	f000 f9b4 	bl	8002d18 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80029b0:	f01a fcea 	bl	801d388 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029b4:	2101      	movs	r1, #1
 80029b6:	2001      	movs	r0, #1
 80029b8:	f01a fd26 	bl	801d408 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029bc:	2101      	movs	r1, #1
 80029be:	2001      	movs	r0, #1
 80029c0:	f01a fcf2 	bl	801d3a8 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200003ac 	.word	0x200003ac
 80029cc:	08002ba1 	.word	0x08002ba1
 80029d0:	58004000 	.word	0x58004000

080029d4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80029d8:	f01a fd46 	bl	801d468 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80029ea:	f7fe fe3b 	bl	8001664 <SYS_GetBatteryLevel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d902      	bls.n	8002a02 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80029fc:	23fe      	movs	r3, #254	; 0xfe
 80029fe:	71fb      	strb	r3, [r7, #7]
 8002a00:	e014      	b.n	8002a2c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002a08:	d202      	bcs.n	8002a10 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	e00d      	b.n	8002a2c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002a10:	88bb      	ldrh	r3, [r7, #4]
 8002a12:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002a16:	461a      	mov	r2, r3
 8002a18:	4613      	mov	r3, r2
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <GetBatteryLevel+0x58>)
 8002a24:	fba3 2302 	umull	r2, r3, r3, r2
 8002a28:	09db      	lsrs	r3, r3, #7
 8002a2a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	1b4e81b5 	.word	0x1b4e81b5

08002a3c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f93b 	bl	8002cc4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe f975 	bl	8000d40 <__aeabi_f2iz>
 8002a56:	4603      	mov	r3, r0
 8002a58:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002a5a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002a66:	b590      	push	{r4, r7, lr}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002a72:	f7ff ff5f 	bl	8002934 <LL_FLASH_GetUDN>
 8002a76:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d138      	bne.n	8002af2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002a80:	f001 f8fc 	bl	8003c7c <HAL_GetUIDw0>
 8002a84:	4604      	mov	r4, r0
 8002a86:	f001 f90d 	bl	8003ca4 <HAL_GetUIDw2>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4423      	add	r3, r4
 8002a8e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002a90:	f001 f8fe 	bl	8003c90 <HAL_GetUIDw1>
 8002a94:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	0e1a      	lsrs	r2, r3, #24
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3307      	adds	r3, #7
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	0c1a      	lsrs	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3306      	adds	r3, #6
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	0a1a      	lsrs	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3305      	adds	r3, #5
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	0e1a      	lsrs	r2, r3, #24
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3303      	adds	r3, #3
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0c1a      	lsrs	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	0a1a      	lsrs	r2, r3, #8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002af0:	e031      	b.n	8002b56 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3307      	adds	r3, #7
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	0a1a      	lsrs	r2, r3, #8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3306      	adds	r3, #6
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0c1a      	lsrs	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3305      	adds	r3, #5
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	0e1a      	lsrs	r2, r3, #24
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002b20:	f7ff ff12 	bl	8002948 <LL_FLASH_GetDeviceID>
 8002b24:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3303      	adds	r3, #3
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002b30:	f7ff ff16 	bl	8002960 <LL_FLASH_GetSTCompanyID>
 8002b34:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3302      	adds	r3, #2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	0a1a      	lsrs	r2, r3, #8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	701a      	strb	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}

08002b5e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002b5e:	b590      	push	{r4, r7, lr}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002b66:	f7ff fee5 	bl	8002934 <LL_FLASH_GetUDN>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d10d      	bne.n	8002b96 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002b7a:	f001 f87f 	bl	8003c7c <HAL_GetUIDw0>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	f001 f886 	bl	8003c90 <HAL_GetUIDw1>
 8002b84:	4603      	mov	r3, r0
 8002b86:	405c      	eors	r4, r3
 8002b88:	f001 f88c 	bl	8003ca4 <HAL_GetUIDw2>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	ea84 0203 	eor.w	r2, r4, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
	...

08002ba0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f01a fd6a 	bl	801d688 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bba:	9200      	str	r2, [sp, #0]
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <TimestampNow+0x3c>)
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f81d 	bl	8002c00 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fad6 	bl	8000178 <strlen>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	0801eca8 	.word	0x0801eca8

08002be0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002be4:	2101      	movs	r1, #1
 8002be6:	2002      	movs	r0, #2
 8002be8:	f01a fbde 	bl	801d3a8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f01a fbd6 	bl	801d3a8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002c00:	b40c      	push	{r2, r3}
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f01a ff07 	bl	801da2c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c28:	b002      	add	sp, #8
 8002c2a:	4770      	bx	lr

08002c2c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_GetTick+0x24>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002c52:	f000 f9dd 	bl	8003010 <TIMER_IF_GetTimerValue>
 8002c56:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200003ac 	.word	0x200003ac

08002c68 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fa53 	bl	800311e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c8e:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	58000800 	.word	0x58000800

08002ca8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002cac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cb0:	f7ff ffe6 	bl	8002c80 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002cb4:	f001 f800 	bl	8003cb8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002cb8:	f001 f804 	bl	8003cc4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002cbc:	f001 f808 	bl	8003cd0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <EnvSensors_Read+0x40>)
 8002cce:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <EnvSensors_Read+0x44>)
 8002cd2:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <EnvSensors_Read+0x48>)
 8002cd6:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <EnvSensors_Read+0x4c>)
 8002cee:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <EnvSensors_Read+0x50>)
 8002cf4:	611a      	str	r2, [r3, #16]

  return 0;
 8002cf6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	42480000 	.word	0x42480000
 8002d08:	41900000 	.word	0x41900000
 8002d0c:	447a0000 	.word	0x447a0000
 8002d10:	003e090d 	.word	0x003e090d
 8002d14:	000503ab 	.word	0x000503ab

08002d18 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002d22:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_APB2_GRP1_EnableClock>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
	...

08002d6c <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <MX_TIM16_Init+0x64>)
 8002d74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d86:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002d8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d9e:	480b      	ldr	r0, [pc, #44]	; (8002dcc <MX_TIM16_Init+0x60>)
 8002da0:	f007 fc46 	bl	800a630 <HAL_TIM_Base_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002daa:	f7ff fa9d 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002dae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002db2:	f7ff ffc2 	bl	8002d3a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	201c      	movs	r0, #28
 8002dbc:	f002 f8d5 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002dc0:	201c      	movs	r0, #28
 8002dc2:	f002 f8ec 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200003b0 	.word	0x200003b0
 8002dd0:	40014400 	.word	0x40014400

08002dd4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002dda:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <MX_TIM17_Init+0x60>)
 8002ddc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002e04:	480a      	ldr	r0, [pc, #40]	; (8002e30 <MX_TIM17_Init+0x5c>)
 8002e06:	f007 fc13 	bl	800a630 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002e10:	f7ff fa6a 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002e14:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e18:	f7ff ff8f 	bl	8002d3a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	201d      	movs	r0, #29
 8002e22:	f002 f8a2 	bl	8004f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e26:	201d      	movs	r0, #29
 8002e28:	f002 f8b9 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200003fc 	.word	0x200003fc
 8002e34:	40014800 	.word	0x40014800

08002e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_TIM_Base_MspInit+0x58>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10c      	bne.n	8002e64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e4e:	f7ff ff74 	bl	8002d3a <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	201c      	movs	r0, #28
 8002e58:	f002 f887 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002e5c:	201c      	movs	r0, #28
 8002e5e:	f002 f89e 	bl	8004f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002e62:	e010      	b.n	8002e86 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_TIM_Base_MspInit+0x5c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10b      	bne.n	8002e86 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e6e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e72:	f7ff ff62 	bl	8002d3a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	201d      	movs	r0, #29
 8002e7c:	f002 f875 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e80:	201d      	movs	r0, #29
 8002e82:	f002 f88c 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800

08002e98 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002eba:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <TIMER_IF_Init+0x5c>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	f083 0301 	eor.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01b      	beq.n	8002f00 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <TIMER_IF_Init+0x60>)
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ed0:	f7ff fab0 	bl	8002434 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002ed4:	f000 f856 	bl	8002f84 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <TIMER_IF_Init+0x60>)
 8002ede:	f005 fc01 	bl	80086e4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <TIMER_IF_Init+0x60>)
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002eea:	4809      	ldr	r0, [pc, #36]	; (8002f10 <TIMER_IF_Init+0x60>)
 8002eec:	f005 fd38 	bl	8008960 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f000 f9d3 	bl	800329c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002ef6:	f000 f85f 	bl	8002fb8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002efa:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <TIMER_IF_Init+0x5c>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002f00:	79fb      	ldrb	r3, [r7, #7]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000448 	.word	0x20000448
 8002f10:	200002fc 	.word	0x200002fc

08002f14 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08e      	sub	sp, #56	; 0x38
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	222c      	movs	r2, #44	; 0x2c
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f01b fd96 	bl	801ea5c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002f30:	f000 f828 	bl	8002f84 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <TIMER_IF_StartTimer+0x68>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002f4c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f50:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4807      	ldr	r0, [pc, #28]	; (8002f80 <TIMER_IF_StartTimer+0x6c>)
 8002f62:	f005 fab3 	bl	80084cc <HAL_RTC_SetAlarm_IT>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002f6c:	f7ff f9bc 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002f70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3738      	adds	r7, #56	; 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000044c 	.word	0x2000044c
 8002f80:	200002fc 	.word	0x200002fc

08002f84 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <TIMER_IF_StopTimer+0x2c>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f98:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <TIMER_IF_StopTimer+0x30>)
 8002f9a:	f005 fba3 	bl	80086e4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <TIMER_IF_StopTimer+0x30>)
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40002800 	.word	0x40002800
 8002fb4:	200002fc 	.word	0x200002fc

08002fb8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002fbc:	f000 f98e 	bl	80032dc <GetTimerTicks>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <TIMER_IF_SetTimerContext+0x18>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002fc6:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <TIMER_IF_SetTimerContext+0x18>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000044c 	.word	0x2000044c

08002fd4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002fd8:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <TIMER_IF_GetTimerContext+0x10>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	2000044c 	.word	0x2000044c

08002fe8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002ff2:	f000 f973 	bl	80032dc <GetTimerTicks>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8003000:	687b      	ldr	r3, [r7, #4]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000044c 	.word	0x2000044c

08003010 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <TIMER_IF_GetTimerValue+0x24>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8003022:	f000 f95b 	bl	80032dc <GetTimerTicks>
 8003026:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8003028:	687b      	ldr	r3, [r7, #4]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000448 	.word	0x20000448

08003038 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8003042:	2303      	movs	r3, #3
 8003044:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8003046:	687b      	ldr	r3, [r7, #4]
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003052:	b5b0      	push	{r4, r5, r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800305a:	2100      	movs	r1, #0
 800305c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	2000      	movs	r0, #0
 8003062:	460a      	mov	r2, r1
 8003064:	4603      	mov	r3, r0
 8003066:	0d95      	lsrs	r5, r2, #22
 8003068:	0294      	lsls	r4, r2, #10
 800306a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd fe89 	bl	8000d8c <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4613      	mov	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bdb0      	pop	{r4, r5, r7, pc}

0800308c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800308c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003096:	2100      	movs	r1, #0
 8003098:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	2000      	movs	r0, #0
 800309e:	460c      	mov	r4, r1
 80030a0:	4605      	mov	r5, r0
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f04f 0a00 	mov.w	sl, #0
 80030aa:	f04f 0b00 	mov.w	fp, #0
 80030ae:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80030b2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80030b6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80030ba:	4650      	mov	r0, sl
 80030bc:	4659      	mov	r1, fp
 80030be:	1b02      	subs	r2, r0, r4
 80030c0:	eb61 0305 	sbc.w	r3, r1, r5
 80030c4:	f04f 0000 	mov.w	r0, #0
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	0099      	lsls	r1, r3, #2
 80030ce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80030d2:	0090      	lsls	r0, r2, #2
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	eb12 0804 	adds.w	r8, r2, r4
 80030dc:	eb43 0905 	adc.w	r9, r3, r5
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f4:	4690      	mov	r8, r2
 80030f6:	4699      	mov	r9, r3
 80030f8:	4640      	mov	r0, r8
 80030fa:	4649      	mov	r1, r9
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	0a82      	lsrs	r2, r0, #10
 8003106:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800310a:	0a8b      	lsrs	r3, r1, #10
 800310c:	4613      	mov	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8003110:	68fb      	ldr	r3, [r7, #12]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800311c:	4770      	bx	lr

0800311e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ff93 	bl	8003052 <TIMER_IF_Convert_ms2Tick>
 800312c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800312e:	f000 f8d5 	bl	80032dc <GetTimerTicks>
 8003132:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003134:	e000      	b.n	8003138 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8003136:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003138:	f000 f8d0 	bl	80032dc <GetTimerTicks>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	d8f6      	bhi.n	8003136 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800315a:	f01b f897 	bl	801e28c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800316e:	f000 f8a5 	bl	80032bc <TIMER_IF_BkUp_Read_MSBticks>
 8003172:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3301      	adds	r3, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f88f 	bl	800329c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8003186:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003194:	f000 f8a2 	bl	80032dc <GetTimerTicks>
 8003198:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800319a:	f000 f88f 	bl	80032bc <TIMER_IF_BkUp_Read_MSBticks>
 800319e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	2200      	movs	r2, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	60fa      	str	r2, [r7, #12]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	000b      	movs	r3, r1
 80031b4:	2200      	movs	r2, #0
 80031b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b8:	2000      	movs	r0, #0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4605      	mov	r5, r0
 80031be:	eb12 0804 	adds.w	r8, r2, r4
 80031c2:	eb43 0905 	adc.w	r9, r3, r5
 80031c6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80031ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	0a82      	lsrs	r2, r0, #10
 80031d8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80031dc:	0a8b      	lsrs	r3, r1, #10
 80031de:	4613      	mov	r3, r2
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2200      	movs	r2, #0
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80031f0:	f04f 0b00 	mov.w	fp, #0
 80031f4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff46 	bl	800308c <TIMER_IF_Convert_Tick2ms>
 8003200:	4603      	mov	r3, r0
 8003202:	b29a      	uxth	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800320a:	4618      	mov	r0, r3
 800320c:	3730      	adds	r7, #48	; 0x30
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003214 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2100      	movs	r1, #0
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003222:	f005 fc2f 	bl	8008a84 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200002fc 	.word	0x200002fc

08003234 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	2101      	movs	r1, #1
 8003240:	4803      	ldr	r0, [pc, #12]	; (8003250 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8003242:	f005 fc1f 	bl	8008a84 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200002fc 	.word	0x200002fc

08003254 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800325e:	2100      	movs	r1, #0
 8003260:	4804      	ldr	r0, [pc, #16]	; (8003274 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8003262:	f005 fc27 	bl	8008ab4 <HAL_RTCEx_BKUPRead>
 8003266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200002fc 	.word	0x200002fc

08003278 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003282:	2101      	movs	r1, #1
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8003286:	f005 fc15 	bl	8008ab4 <HAL_RTCEx_BKUPRead>
 800328a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800328c:	687b      	ldr	r3, [r7, #4]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002fc 	.word	0x200002fc

0800329c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	2102      	movs	r1, #2
 80032a8:	4803      	ldr	r0, [pc, #12]	; (80032b8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80032aa:	f005 fbeb 	bl	8008a84 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200002fc 	.word	0x200002fc

080032bc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80032c2:	2102      	movs	r1, #2
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80032c6:	f005 fbf5 	bl	8008ab4 <HAL_RTCEx_BKUPRead>
 80032ca:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80032cc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200002fc 	.word	0x200002fc

080032dc <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80032e2:	480b      	ldr	r0, [pc, #44]	; (8003310 <GetTimerTicks+0x34>)
 80032e4:	f7ff fdd8 	bl	8002e98 <LL_RTC_TIME_GetSubSecond>
 80032e8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80032ea:	e003      	b.n	80032f4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80032ec:	4808      	ldr	r0, [pc, #32]	; (8003310 <GetTimerTicks+0x34>)
 80032ee:	f7ff fdd3 	bl	8002e98 <LL_RTC_TIME_GetSubSecond>
 80032f2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80032f4:	4806      	ldr	r0, [pc, #24]	; (8003310 <GetTimerTicks+0x34>)
 80032f6:	f7ff fdcf 	bl	8002e98 <LL_RTC_TIME_GetSubSecond>
 80032fa:	4602      	mov	r2, r0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d1f4      	bne.n	80032ec <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40002800 	.word	0x40002800

08003314 <LL_AHB2_GRP1_EnableClock>:
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003338:	68fb      	ldr	r3, [r7, #12]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <LL_APB1_GRP1_EnableClock>:
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4313      	orrs	r3, r2
 800335a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <LL_APB1_GRP1_DisableClock>:
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	43db      	mvns	r3, r3
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338a:	4013      	ands	r3, r2
 800338c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <LL_APB2_GRP1_EnableClock>:
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033bc:	68fb      	ldr	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <LL_APB2_GRP1_DisableClock>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	43db      	mvns	r3, r3
 80033da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033de:	4013      	ands	r3, r2
 80033e0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <LL_SYSCFG_EnableFastModePlus>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4904      	ldr	r1, [pc, #16]	; (800340c <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000

08003410 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003416:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <MX_USART1_UART_Init+0xa4>)
 8003418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800341c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003436:	220c      	movs	r2, #12
 8003438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800344e:	2200      	movs	r2, #0
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800345a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003460:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003462:	2200      	movs	r2, #0
 8003464:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003466:	4812      	ldr	r0, [pc, #72]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 8003468:	f007 fb68 	bl	800ab3c <HAL_UART_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8003472:	f7fe ff39 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003476:	2100      	movs	r1, #0
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800347a:	f009 fcc2 	bl	800ce02 <HAL_UARTEx_SetTxFifoThreshold>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003484:	f7fe ff30 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003488:	2100      	movs	r1, #0
 800348a:	4809      	ldr	r0, [pc, #36]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800348c:	f009 fcf7 	bl	800ce7e <HAL_UARTEx_SetRxFifoThreshold>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003496:	f7fe ff27 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800349a:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_USART1_UART_Init+0xa0>)
 800349c:	f009 fc3e 	bl	800cd1c <HAL_UARTEx_EnableFifoMode>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80034a6:	f7fe ff1f 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000450 	.word	0x20000450
 80034b4:	40013800 	.word	0x40013800

080034b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034bc:	4b23      	ldr	r3, [pc, #140]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034be:	4a24      	ldr	r2, [pc, #144]	; (8003550 <MX_USART2_UART_Init+0x98>)
 80034c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034de:	220c      	movs	r2, #12
 80034e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034ee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <MX_USART2_UART_Init+0x94>)
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003502:	4812      	ldr	r0, [pc, #72]	; (800354c <MX_USART2_UART_Init+0x94>)
 8003504:	f007 fb1a 	bl	800ab3c <HAL_UART_Init>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800350e:	f7fe feeb 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003512:	2100      	movs	r1, #0
 8003514:	480d      	ldr	r0, [pc, #52]	; (800354c <MX_USART2_UART_Init+0x94>)
 8003516:	f009 fc74 	bl	800ce02 <HAL_UARTEx_SetTxFifoThreshold>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003520:	f7fe fee2 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003524:	2100      	movs	r1, #0
 8003526:	4809      	ldr	r0, [pc, #36]	; (800354c <MX_USART2_UART_Init+0x94>)
 8003528:	f009 fca9 	bl	800ce7e <HAL_UARTEx_SetRxFifoThreshold>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003532:	f7fe fed9 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003536:	4805      	ldr	r0, [pc, #20]	; (800354c <MX_USART2_UART_Init+0x94>)
 8003538:	f009 fc2b 	bl	800cd92 <HAL_UARTEx_DisableFifoMode>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003542:	f7fe fed1 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200004e4 	.word	0x200004e4
 8003550:	40004400 	.word	0x40004400

08003554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b09a      	sub	sp, #104	; 0x68
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800356c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	2238      	movs	r2, #56	; 0x38
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f01b fa6a 	bl	801ea5c <memset>
  if(uartHandle->Instance==USART1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6f      	ldr	r2, [pc, #444]	; (800374c <HAL_UART_MspInit+0x1f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f040 80a4 	bne.w	80036dc <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003594:	2301      	movs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003598:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800359c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4618      	mov	r0, r3
 80035a4:	f004 fdf6 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 80035ae:	f7fe fe9b 	bl	80022e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035b6:	f7ff feef 	bl	8003398 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	2002      	movs	r0, #2
 80035bc:	f7ff feaa 	bl	8003314 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80035c0:	23c0      	movs	r3, #192	; 0xc0
 80035c2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c4:	2302      	movs	r3, #2
 80035c6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c8:	2301      	movs	r3, #1
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80035cc:	2301      	movs	r3, #1
 80035ce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035d0:	2307      	movs	r3, #7
 80035d2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035d8:	4619      	mov	r1, r3
 80035da:	485d      	ldr	r0, [pc, #372]	; (8003750 <HAL_UART_MspInit+0x1fc>)
 80035dc:	f002 fb92 	bl	8005d04 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80035e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035e4:	f7ff ff02 	bl	80033ec <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80035e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035ec:	f7ff fefe 	bl	80033ec <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80035f0:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_UART_MspInit+0x200>)
 80035f2:	4a59      	ldr	r2, [pc, #356]	; (8003758 <HAL_UART_MspInit+0x204>)
 80035f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_UART_MspInit+0x200>)
 80035f8:	2212      	movs	r2, #18
 80035fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035fc:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_UART_MspInit+0x200>)
 80035fe:	2210      	movs	r2, #16
 8003600:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003602:	4b54      	ldr	r3, [pc, #336]	; (8003754 <HAL_UART_MspInit+0x200>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003608:	4b52      	ldr	r3, [pc, #328]	; (8003754 <HAL_UART_MspInit+0x200>)
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_UART_MspInit+0x200>)
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_UART_MspInit+0x200>)
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <HAL_UART_MspInit+0x200>)
 800361c:	2200      	movs	r2, #0
 800361e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003620:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_UART_MspInit+0x200>)
 8003622:	2200      	movs	r2, #0
 8003624:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003626:	484b      	ldr	r0, [pc, #300]	; (8003754 <HAL_UART_MspInit+0x200>)
 8003628:	f001 fcd6 	bl	8004fd8 <HAL_DMA_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003632:	f7fe fe59 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a46      	ldr	r2, [pc, #280]	; (8003754 <HAL_UART_MspInit+0x200>)
 800363a:	67da      	str	r2, [r3, #124]	; 0x7c
 800363c:	4a45      	ldr	r2, [pc, #276]	; (8003754 <HAL_UART_MspInit+0x200>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003642:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_UART_MspInit+0x208>)
 8003644:	4a46      	ldr	r2, [pc, #280]	; (8003760 <HAL_UART_MspInit+0x20c>)
 8003646:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003648:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_UART_MspInit+0x208>)
 800364a:	2211      	movs	r2, #17
 800364c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_UART_MspInit+0x208>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_UART_MspInit+0x208>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800365a:	4b40      	ldr	r3, [pc, #256]	; (800375c <HAL_UART_MspInit+0x208>)
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003660:	4b3e      	ldr	r3, [pc, #248]	; (800375c <HAL_UART_MspInit+0x208>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_UART_MspInit+0x208>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_UART_MspInit+0x208>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_UART_MspInit+0x208>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003678:	4838      	ldr	r0, [pc, #224]	; (800375c <HAL_UART_MspInit+0x208>)
 800367a:	f001 fcad 	bl	8004fd8 <HAL_DMA_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003684:	f7fe fe30 	bl	80022e8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003688:	2300      	movs	r3, #0
 800368a:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800368c:	2300      	movs	r3, #0
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 800369c:	2301      	movs	r3, #1
 800369e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 80036a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036a4:	4619      	mov	r1, r3
 80036a6:	482d      	ldr	r0, [pc, #180]	; (800375c <HAL_UART_MspInit+0x208>)
 80036a8:	f002 f880 	bl	80057ac <HAL_DMAEx_ConfigMuxSync>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80036b2:	f7fe fe19 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <HAL_UART_MspInit+0x208>)
 80036ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80036be:	4a27      	ldr	r2, [pc, #156]	; (800375c <HAL_UART_MspInit+0x208>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2102      	movs	r1, #2
 80036c8:	2024      	movs	r0, #36	; 0x24
 80036ca:	f001 fc4e 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036ce:	2024      	movs	r0, #36	; 0x24
 80036d0:	f001 fc65 	bl	8004f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036d4:	200c      	movs	r0, #12
 80036d6:	f001 fc62 	bl	8004f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036da:	e033      	b.n	8003744 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <HAL_UART_MspInit+0x210>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d12e      	bne.n	8003744 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036e6:	2302      	movs	r3, #2
 80036e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036ea:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80036ee:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 fd4d 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8003700:	f7fe fdf2 	bl	80022e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003704:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003708:	f7ff fe1c 	bl	8003344 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	2001      	movs	r0, #1
 800370e:	f7ff fe01 	bl	8003314 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003712:	230c      	movs	r3, #12
 8003714:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	2302      	movs	r3, #2
 8003718:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371a:	2301      	movs	r3, #1
 800371c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800371e:	2301      	movs	r3, #1
 8003720:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003722:	2307      	movs	r3, #7
 8003724:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003730:	f002 fae8 	bl	8005d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2100      	movs	r1, #0
 8003738:	2025      	movs	r0, #37	; 0x25
 800373a:	f001 fc16 	bl	8004f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800373e:	2025      	movs	r0, #37	; 0x25
 8003740:	f001 fc2d 	bl	8004f9e <HAL_NVIC_EnableIRQ>
}
 8003744:	bf00      	nop
 8003746:	3768      	adds	r7, #104	; 0x68
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40013800 	.word	0x40013800
 8003750:	48000400 	.word	0x48000400
 8003754:	20000578 	.word	0x20000578
 8003758:	40020008 	.word	0x40020008
 800375c:	200005d8 	.word	0x200005d8
 8003760:	4002001c 	.word	0x4002001c
 8003764:	40004400 	.word	0x40004400

08003768 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_UART_MspDeInit+0x6c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d116      	bne.n	80037a8 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800377a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800377e:	f7ff fe23 	bl	80033c8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003782:	21c0      	movs	r1, #192	; 0xc0
 8003784:	4814      	ldr	r0, [pc, #80]	; (80037d8 <HAL_UART_MspDeInit+0x70>)
 8003786:	f002 fc1d 	bl	8005fc4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fcca 	bl	8005128 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fcc4 	bl	8005128 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80037a0:	2024      	movs	r0, #36	; 0x24
 80037a2:	f001 fc0a 	bl	8004fba <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80037a6:	e010      	b.n	80037ca <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <HAL_UART_MspDeInit+0x74>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10b      	bne.n	80037ca <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 80037b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80037b6:	f7ff fddd 	bl	8003374 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80037ba:	210c      	movs	r1, #12
 80037bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037c0:	f002 fc00 	bl	8005fc4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80037c4:	2025      	movs	r0, #37	; 0x25
 80037c6:	f001 fbf8 	bl	8004fba <HAL_NVIC_DisableIRQ>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40013800 	.word	0x40013800
 80037d8:	48000400 	.word	0x48000400
 80037dc:	40004400 	.word	0x40004400

080037e0 <LL_APB2_GRP1_ForceReset>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <LL_APB2_GRP1_ReleaseReset>:
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	43db      	mvns	r3, r3
 8003814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003818:	4013      	ands	r3, r2
 800381a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
	...

08003828 <LL_EXTI_EnableIT_0_31>:
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <LL_EXTI_EnableIT_0_31+0x24>)
 8003832:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003836:	4905      	ldr	r1, [pc, #20]	; (800384c <LL_EXTI_EnableIT_0_31+0x24>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	58000800 	.word	0x58000800

08003850 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003858:	4a07      	ldr	r2, [pc, #28]	; (8003878 <vcom_Init+0x28>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800385e:	f7fd ff93 	bl	8001788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003862:	f7ff fdd5 	bl	8003410 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003866:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800386a:	f7ff ffdd 	bl	8003828 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800386e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	2000063c 	.word	0x2000063c

0800387c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003880:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003884:	f7ff ffac 	bl	80037e0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003888:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800388c:	f7ff ffb9 	bl	8003802 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003890:	4804      	ldr	r0, [pc, #16]	; (80038a4 <vcom_DeInit+0x28>)
 8003892:	f7ff ff69 	bl	8003768 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003896:	200f      	movs	r0, #15
 8003898:	f001 fb8f 	bl	8004fba <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800389c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800389e:	4618      	mov	r0, r3
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000450 	.word	0x20000450

080038a8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4804      	ldr	r0, [pc, #16]	; (80038cc <vcom_Trace_DMA+0x24>)
 80038bc:	f007 f9da 	bl	800ac74 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80038c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000450 	.word	0x20000450

080038d0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <vcom_ReceiveInit+0x70>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80038de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038e2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80038ec:	4815      	ldr	r0, [pc, #84]	; (8003944 <vcom_ReceiveInit+0x74>)
 80038ee:	f009 f988 	bl	800cc02 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80038f2:	bf00      	nop
 80038f4:	4b13      	ldr	r3, [pc, #76]	; (8003944 <vcom_ReceiveInit+0x74>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d0f7      	beq.n	80038f4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003904:	bf00      	nop
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <vcom_ReceiveInit+0x74>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003914:	d1f7      	bne.n	8003906 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <vcom_ReceiveInit+0x74>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <vcom_ReceiveInit+0x74>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003924:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003926:	4807      	ldr	r0, [pc, #28]	; (8003944 <vcom_ReceiveInit+0x74>)
 8003928:	f009 f9c6 	bl	800ccb8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800392c:	2201      	movs	r2, #1
 800392e:	4906      	ldr	r1, [pc, #24]	; (8003948 <vcom_ReceiveInit+0x78>)
 8003930:	4804      	ldr	r0, [pc, #16]	; (8003944 <vcom_ReceiveInit+0x74>)
 8003932:	f007 f953 	bl	800abdc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003936:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000640 	.word	0x20000640
 8003944:	20000450 	.word	0x20000450
 8003948:	20000638 	.word	0x20000638

0800394c <vcom_Resume>:

void vcom_Resume(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003950:	4808      	ldr	r0, [pc, #32]	; (8003974 <vcom_Resume+0x28>)
 8003952:	f007 f8f3 	bl	800ab3c <HAL_UART_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <vcom_Resume+0x14>
  {
    Error_Handler();
 800395c:	f7fe fcc4 	bl	80022e8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003960:	4805      	ldr	r0, [pc, #20]	; (8003978 <vcom_Resume+0x2c>)
 8003962:	f001 fb39 	bl	8004fd8 <HAL_DMA_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <vcom_Resume+0x24>
  {
    Error_Handler();
 800396c:	f7fe fcbc 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000450 	.word	0x20000450
 8003978:	20000578 	.word	0x20000578

0800397c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a05      	ldr	r2, [pc, #20]	; (80039a0 <HAL_UART_TxCpltCallback+0x24>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d103      	bne.n	8003996 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_UART_TxCpltCallback+0x28>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40013800 	.word	0x40013800
 80039a4:	2000063c 	.word	0x2000063c

080039a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_UART_RxCpltCallback+0x54>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d113      	bne.n	80039e2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_UART_RxCpltCallback+0x58>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_UART_RxCpltCallback+0x30>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_UART_RxCpltCallback+0x58>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2101      	movs	r1, #1
 80039d4:	480b      	ldr	r0, [pc, #44]	; (8003a04 <HAL_UART_RxCpltCallback+0x5c>)
 80039d6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80039d8:	2201      	movs	r2, #1
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <HAL_UART_RxCpltCallback+0x5c>)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f007 f8fd 	bl	800abdc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_UART_RxCpltCallback+0x60>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d102      	bne.n	80039f2 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_UART_RxCpltCallback+0x64>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40013800 	.word	0x40013800
 8003a00:	20000640 	.word	0x20000640
 8003a04:	20000638 	.word	0x20000638
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	20000010 	.word	0x20000010

08003a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a14:	f7ff f98b 	bl	8002d2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a1a:	490d      	ldr	r1, [pc, #52]	; (8003a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <LoopForever+0xe>)
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a20:	e002      	b.n	8003a28 <LoopCopyDataInit>

08003a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a26:	3304      	adds	r3, #4

08003a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a2c:	d3f9      	bcc.n	8003a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a30:	4c0a      	ldr	r4, [pc, #40]	; (8003a5c <LoopForever+0x16>)
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a34:	e001      	b.n	8003a3a <LoopFillZerobss>

08003a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a38:	3204      	adds	r2, #4

08003a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a3c:	d3fb      	bcc.n	8003a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a3e:	f01b f815 	bl	801ea6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a42:	f7fe fa71 	bl	8001f28 <main>

08003a46 <LoopForever>:

LoopForever:
    b LoopForever
 8003a46:	e7fe      	b.n	8003a46 <LoopForever>
  ldr   r0, =_estack
 8003a48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a50:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8003a54:	0801fc50 	.word	0x0801fc50
  ldr r2, =_sbss
 8003a58:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003a5c:	200020b0 	.word	0x200020b0

08003a60 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a60:	e7fe      	b.n	8003a60 <ADC_IRQHandler>

08003a62 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003a76:	2310      	movs	r3, #16
 8003a78:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f002 f939 	bl	8005d04 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003a92:	2320      	movs	r3, #32
 8003a94:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a9e:	f002 f931 	bl	8005d04 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aaa:	f002 fb59 	bl	8006160 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2110      	movs	r1, #16
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab6:	f002 fb53 	bl	8006160 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d83f      	bhi.n	8003b54 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003b07 	.word	0x08003b07
 8003ae4:	08003b21 	.word	0x08003b21
 8003ae8:	08003b3b 	.word	0x08003b3b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2110      	movs	r1, #16
 8003af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af4:	f002 fb34 	bl	8006160 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2120      	movs	r1, #32
 8003afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b00:	f002 fb2e 	bl	8006160 <HAL_GPIO_WritePin>
      break;      
 8003b04:	e027      	b.n	8003b56 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b06:	2201      	movs	r2, #1
 8003b08:	2110      	movs	r1, #16
 8003b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0e:	f002 fb27 	bl	8006160 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b12:	2200      	movs	r2, #0
 8003b14:	2120      	movs	r1, #32
 8003b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1a:	f002 fb21 	bl	8006160 <HAL_GPIO_WritePin>
      break;
 8003b1e:	e01a      	b.n	8003b56 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b20:	2201      	movs	r2, #1
 8003b22:	2110      	movs	r1, #16
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b28:	f002 fb1a 	bl	8006160 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2120      	movs	r1, #32
 8003b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b34:	f002 fb14 	bl	8006160 <HAL_GPIO_WritePin>
      break;
 8003b38:	e00d      	b.n	8003b56 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b42:	f002 fb0d 	bl	8006160 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b46:	2201      	movs	r2, #1
 8003b48:	2120      	movs	r1, #32
 8003b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4e:	f002 fb07 	bl	8006160 <HAL_GPIO_WritePin>
      break;
 8003b52:	e000      	b.n	8003b56 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003b54:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003b64:	2302      	movs	r3, #2
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003b80:	2301      	movs	r3, #1
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003b9a:	230f      	movs	r3, #15
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e001      	b.n	8003ba4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003ba0:	2316      	movs	r3, #22
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a03      	ldr	r2, [pc, #12]	; (8003bc8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6053      	str	r3, [r2, #4]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	e0042000 	.word	0xe0042000

08003bcc <LL_DBGMCU_EnableDBGStopMode>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a03      	ldr	r2, [pc, #12]	; (8003be4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	6053      	str	r3, [r2, #4]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	e0042000 	.word	0xe0042000

08003be8 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6053      	str	r3, [r2, #4]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	e0042000 	.word	0xe0042000

08003c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f001 f9a0 	bl	8004f54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c14:	f004 f8e0 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_Init+0x3c>)
 8003c1c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c1e:	200f      	movs	r0, #15
 8003c20:	f7ff f804 	bl	8002c2c <HAL_InitTick>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	71fb      	strb	r3, [r7, #7]
 8003c2e:	e001      	b.n	8003c34 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c30:	f7fe fd93 	bl	800275a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c34:	79fb      	ldrb	r3, [r7, #7]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <HAL_SuspendTick+0x18>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <HAL_SuspendTick+0x18>)
 8003c4e:	f023 0302 	bic.w	r3, r3, #2
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e010 	.word	0xe000e010

08003c60 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <HAL_ResumeTick+0x18>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <HAL_ResumeTick+0x18>)
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	e000e010 	.word	0xe000e010

08003c7c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <HAL_GetUIDw0+0x10>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	1fff7590 	.word	0x1fff7590

08003c90 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <HAL_GetUIDw1+0x10>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	1fff7594 	.word	0x1fff7594

08003ca4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <HAL_GetUIDw2+0x10>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	1fff7598 	.word	0x1fff7598

08003cb8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003cbc:	f7ff ff78 	bl	8003bb0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003cc8:	f7ff ff80 	bl	8003bcc <LL_DBGMCU_EnableDBGStopMode>
}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003cd4:	f7ff ff88 	bl	8003be8 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2107      	movs	r1, #7
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2107      	movs	r1, #7
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	210f      	movs	r1, #15
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	401a      	ands	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	f003 010f 	and.w	r1, r3, #15
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	0219      	lsls	r1, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	400b      	ands	r3, r1
 8003e56:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e7e:	f023 0317 	bic.w	r3, r3, #23
 8003e82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ea4:	f023 0317 	bic.w	r3, r3, #23
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6093      	str	r3, [r2, #8]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eca:	d101      	bne.n	8003ed0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eec:	f023 0317 	bic.w	r3, r3, #23
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f12:	f023 0317 	bic.w	r3, r3, #23
 8003f16:	f043 0202 	orr.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_IsEnabled+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_IsEnabled+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d101      	bne.n	8003f64 <LL_ADC_IsDisableOngoing+0x18>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <LL_ADC_IsDisableOngoing+0x1a>
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f80:	f023 0317 	bic.w	r3, r3, #23
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fa6:	f023 0317 	bic.w	r3, r3, #23
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d101      	bne.n	8003fd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e17e      	b.n	8004300 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fd faf1 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff44 	bl	8003eb6 <LL_ADC_IsInternalRegulatorEnabled>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d115      	bne.n	8004060 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff18 	bl	8003e6e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800403e:	4b9e      	ldr	r3, [pc, #632]	; (80042b8 <HAL_ADC_Init+0x2d8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	4a9d      	ldr	r2, [pc, #628]	; (80042bc <HAL_ADC_Init+0x2dc>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	3301      	adds	r3, #1
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004052:	e002      	b.n	800405a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b01      	subs	r3, #1
 8004058:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f9      	bne.n	8004054 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff26 	bl	8003eb6 <LL_ADC_IsInternalRegulatorEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f043 0210 	orr.w	r2, r3, #16
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff93 	bl	8003fbc <LL_ADC_REG_IsConversionOngoing>
 8004096:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 8124 	bne.w	80042ee <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 8120 	bne.w	80042ee <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff30 	bl	8003f28 <LL_ADC_IsEnabled>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 80a7 	bne.w	800421e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7e1b      	ldrb	r3, [r3, #24]
 80040d8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80040da:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7e5b      	ldrb	r3, [r3, #25]
 80040e0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80040e2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7e9b      	ldrb	r3, [r3, #26]
 80040e8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80040ea:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040f0:	2a00      	cmp	r2, #0
 80040f2:	d002      	beq.n	80040fa <HAL_ADC_Init+0x11a>
 80040f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040f8:	e000      	b.n	80040fc <HAL_ADC_Init+0x11c>
 80040fa:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80040fc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004102:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da04      	bge.n	8004116 <HAL_ADC_Init+0x136>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004114:	e001      	b.n	800411a <HAL_ADC_Init+0x13a>
 8004116:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800411a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004122:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004124:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d114      	bne.n	8004160 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7e9b      	ldrb	r3, [r3, #26]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e00b      	b.n	8004160 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004174:	4313      	orrs	r3, r2
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8004186:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	69b9      	ldr	r1, [r7, #24]
 8004190:	430b      	orrs	r3, r1
 8004192:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041a0:	4313      	orrs	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d111      	bne.n	80041d6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041be:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80041c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80041ca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_ADC_Init+0x2e0>)
 80041de:	4013      	ands	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041f2:	d014      	beq.n	800421e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d00f      	beq.n	800421e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004206:	d00a      	beq.n	800421e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_ADC_Init+0x2e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004218:	492a      	ldr	r1, [pc, #168]	; (80042c4 <HAL_ADC_Init+0x2e4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	461a      	mov	r2, r3
 8004228:	2100      	movs	r1, #0
 800422a:	f7ff fd76 	bl	8003d1a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	461a      	mov	r2, r3
 8004238:	4923      	ldr	r1, [pc, #140]	; (80042c8 <HAL_ADC_Init+0x2e8>)
 800423a:	f7ff fd6e 	bl	8003d1a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d108      	bne.n	8004258 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f062 020f 	orn	r2, r2, #15
 8004254:	629a      	str	r2, [r3, #40]	; 0x28
 8004256:	e017      	b.n	8004288 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004260:	d112      	bne.n	8004288 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	3b01      	subs	r3, #1
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	f003 031c 	and.w	r3, r3, #28
 8004274:	f06f 020f 	mvn.w	r2, #15
 8004278:	fa02 f103 	lsl.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd61 	bl	8003d56 <LL_ADC_GetSamplingTimeCommonChannels>
 8004294:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800429a:	429a      	cmp	r2, r3
 800429c:	d116      	bne.n	80042cc <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f023 0303 	bic.w	r3, r3, #3
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042b4:	e023      	b.n	80042fe <HAL_ADC_Init+0x31e>
 80042b6:	bf00      	nop
 80042b8:	2000000c 	.word	0x2000000c
 80042bc:	053e2d63 	.word	0x053e2d63
 80042c0:	1ffffc02 	.word	0x1ffffc02
 80042c4:	40012708 	.word	0x40012708
 80042c8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f023 0312 	bic.w	r3, r3, #18
 80042d4:	f043 0210 	orr.w	r2, r3, #16
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042ec:	e007      	b.n	80042fe <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	f043 0210 	orr.w	r2, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80042fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07a      	b.n	8004410 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f043 0202 	orr.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 face 	bl	80048c8 <ADC_ConversionStop>
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fb92 	bl	8004a60 <ADC_Disable>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fd9f 	bl	8003e94 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f240 329f 	movw	r2, #927	; 0x39f
 8004372:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68d9      	ldr	r1, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <HAL_ADC_DeInit+0x110>)
 8004380:	400b      	ands	r3, r1
 8004382:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004392:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0207 	bic.w	r2, r2, #7
 80043a2:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043b2:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_ADC_DeInit+0x114>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a0d      	ldr	r2, [pc, #52]	; (800441c <HAL_ADC_DeInit+0x114>)
 80043e8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80043ec:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd f916 	bl	8001620 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	833e0200 	.word	0x833e0200
 800441c:	40012708 	.word	0x40012708

08004420 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fdc5 	bl	8003fbc <LL_ADC_REG_IsConversionOngoing>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d132      	bne.n	800449e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_ADC_Start+0x26>
 8004442:	2302      	movs	r3, #2
 8004444:	e02e      	b.n	80044a4 <HAL_ADC_Start+0x84>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa80 	bl	8004954 <ADC_Enable>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11a      	bne.n	8004494 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	221c      	movs	r2, #28
 800447e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fd6f 	bl	8003f70 <LL_ADC_REG_StartConversion>
 8004492:	e006      	b.n	80044a2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800449c:	e001      	b.n	80044a2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_Stop+0x16>
 80044be:	2302      	movs	r3, #2
 80044c0:	e022      	b.n	8004508 <HAL_ADC_Stop+0x5c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9fc 	bl	80048c8 <ADC_ConversionStop>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d111      	bne.n	80044fe <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fac0 	bl	8004a60 <ADC_Disable>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d102      	bne.n	8004528 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004522:	2308      	movs	r3, #8
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e010      	b.n	800454a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e077      	b.n	8004636 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004546:	2304      	movs	r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800454a:	f7fe fb79 	bl	8002c40 <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004550:	e021      	b.n	8004596 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d01d      	beq.n	8004596 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800455a:	f7fe fb71 	bl	8002c40 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <HAL_ADC_PollForConversion+0x60>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d112      	bne.n	8004596 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e04f      	b.n	8004636 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0d6      	beq.n	8004552 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fbe6 	bl	8003d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d031      	beq.n	8004624 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7e9b      	ldrb	r3, [r3, #26]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d12d      	bne.n	8004624 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d126      	bne.n	8004624 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fcee 	bl	8003fbc <LL_ADC_REG_IsConversionOngoing>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d112      	bne.n	800460c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 020c 	bic.w	r2, r2, #12
 80045f4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f043 0201 	orr.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	659a      	str	r2, [r3, #88]	; 0x58
 800460a:	e00b      	b.n	8004624 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7e1b      	ldrb	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	220c      	movs	r2, #12
 8004632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
	...

08004658 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x28>
 800467c:	2302      	movs	r3, #2
 800467e:	e110      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x24a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fc95 	bl	8003fbc <LL_ADC_REG_IsConversionOngoing>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 80f7 	bne.w	8004888 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	f000 80b1 	beq.w	8004806 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046b2:	4a7e      	ldr	r2, [pc, #504]	; (80048ac <HAL_ADC_ConfigChannel+0x254>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7ff fb92 	bl	8003dec <LL_ADC_REG_SetSequencerChAdd>
 80046c8:	e041      	b.n	800474e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	210f      	movs	r1, #15
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	401a      	ands	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0xa0>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	e011      	b.n	800471c <HAL_ADC_ConfigChannel+0xc4>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	fa93 f3a3 	rbit	r3, r3
 8004704:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004710:	2320      	movs	r3, #32
 8004712:	e003      	b.n	800471c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	b2db      	uxtb	r3, r3
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	6849      	ldr	r1, [r1, #4]
 8004720:	f001 011f 	and.w	r1, r1, #31
 8004724:	408b      	lsls	r3, r1
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	429a      	cmp	r2, r3
 800473a:	d808      	bhi.n	800474e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	f7ff fb2e 	bl	8003daa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6819      	ldr	r1, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	461a      	mov	r2, r3
 800475c:	f7ff fb6b 	bl	8003e36 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f280 8097 	bge.w	8004898 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800476a:	4851      	ldr	r0, [pc, #324]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 800476c:	f7ff fac8 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 8004770:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4f      	ldr	r2, [pc, #316]	; (80048b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d120      	bne.n	80047be <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11b      	bne.n	80047be <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800478c:	4619      	mov	r1, r3
 800478e:	4848      	ldr	r0, [pc, #288]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 8004790:	f7ff faa4 	bl	8003cdc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004794:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <HAL_ADC_ConfigChannel+0x260>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	4a48      	ldr	r2, [pc, #288]	; (80048bc <HAL_ADC_ConfigChannel+0x264>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	099b      	lsrs	r3, r3, #6
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	4613      	mov	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047ae:	e002      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f9      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047bc:	e06c      	b.n	8004898 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3f      	ldr	r2, [pc, #252]	; (80048c0 <HAL_ADC_ConfigChannel+0x268>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10c      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d8:	4619      	mov	r1, r3
 80047da:	4835      	ldr	r0, [pc, #212]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 80047dc:	f7ff fa7e 	bl	8003cdc <LL_ADC_SetCommonPathInternalCh>
 80047e0:	e05a      	b.n	8004898 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <HAL_ADC_ConfigChannel+0x26c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d155      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d150      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047fc:	4619      	mov	r1, r3
 80047fe:	482c      	ldr	r0, [pc, #176]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 8004800:	f7ff fa6c 	bl	8003cdc <LL_ADC_SetCommonPathInternalCh>
 8004804:	e048      	b.n	8004898 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480e:	d004      	beq.n	800481a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <HAL_ADC_ConfigChannel+0x254>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d107      	bne.n	800482a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7ff faf3 	bl	8003e10 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	da32      	bge.n	8004898 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004832:	481f      	ldr	r0, [pc, #124]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 8004834:	f7ff fa64 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 8004838:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d107      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800484a:	4619      	mov	r1, r3
 800484c:	4818      	ldr	r0, [pc, #96]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 800484e:	f7ff fa45 	bl	8003cdc <LL_ADC_SetCommonPathInternalCh>
 8004852:	e021      	b.n	8004898 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <HAL_ADC_ConfigChannel+0x268>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d107      	bne.n	800486e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004864:	4619      	mov	r1, r3
 8004866:	4812      	ldr	r0, [pc, #72]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 8004868:	f7ff fa38 	bl	8003cdc <LL_ADC_SetCommonPathInternalCh>
 800486c:	e014      	b.n	8004898 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <HAL_ADC_ConfigChannel+0x26c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10f      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800487e:	4619      	mov	r1, r3
 8004880:	480b      	ldr	r0, [pc, #44]	; (80048b0 <HAL_ADC_ConfigChannel+0x258>)
 8004882:	f7ff fa2b 	bl	8003cdc <LL_ADC_SetCommonPathInternalCh>
 8004886:	e007      	b.n	8004898 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80048a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	80000004 	.word	0x80000004
 80048b0:	40012708 	.word	0x40012708
 80048b4:	b0001000 	.word	0xb0001000
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	053e2d63 	.word	0x053e2d63
 80048c0:	b8004000 	.word	0xb8004000
 80048c4:	b4002000 	.word	0xb4002000

080048c8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fb71 	bl	8003fbc <LL_ADC_REG_IsConversionOngoing>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d033      	beq.n	8004948 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fb31 	bl	8003f4c <LL_ADC_IsDisableOngoing>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fb4e 	bl	8003f96 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048fa:	f7fe f9a1 	bl	8002c40 <HAL_GetTick>
 80048fe:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004900:	e01b      	b.n	800493a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004902:	f7fe f99d 	bl	8002c40 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d914      	bls.n	800493a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	f043 0201 	orr.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e007      	b.n	800494a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1dc      	bne.n	8004902 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800495c:	2300      	movs	r3, #0
 800495e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fadf 	bl	8003f28 <LL_ADC_IsEnabled>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d169      	bne.n	8004a44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <ADC_Enable+0xfc>)
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f043 0210 	orr.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e055      	b.n	8004a46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fa9c 	bl	8003edc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80049a4:	482b      	ldr	r0, [pc, #172]	; (8004a54 <ADC_Enable+0x100>)
 80049a6:	f7ff f9ab 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00f      	beq.n	80049d4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049b4:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <ADC_Enable+0x104>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <ADC_Enable+0x108>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	099b      	lsrs	r3, r3, #6
 80049c2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80049c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049c6:	e002      	b.n	80049ce <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f9      	bne.n	80049c8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7e5b      	ldrb	r3, [r3, #25]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d033      	beq.n	8004a44 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80049dc:	f7fe f930 	bl	8002c40 <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e2:	e028      	b.n	8004a36 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fa9d 	bl	8003f28 <LL_ADC_IsEnabled>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fa6f 	bl	8003edc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049fe:	f7fe f91f 	bl	8002c40 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d914      	bls.n	8004a36 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d00d      	beq.n	8004a36 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	f043 0210 	orr.w	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e007      	b.n	8004a46 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d1cf      	bne.n	80049e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	80000017 	.word	0x80000017
 8004a54:	40012708 	.word	0x40012708
 8004a58:	2000000c 	.word	0x2000000c
 8004a5c:	053e2d63 	.word	0x053e2d63

08004a60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fa6d 	bl	8003f4c <LL_ADC_IsDisableOngoing>
 8004a72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fa55 	bl	8003f28 <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d047      	beq.n	8004b14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d144      	bne.n	8004b14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0305 	and.w	r3, r3, #5
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10c      	bne.n	8004ab2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fa30 	bl	8003f02 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aaa:	f7fe f8c9 	bl	8002c40 <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ab0:	e029      	b.n	8004b06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f043 0210 	orr.w	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e023      	b.n	8004b16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ace:	f7fe f8b7 	bl	8002c40 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d914      	bls.n	8004b06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	f043 0210 	orr.w	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e007      	b.n	8004b16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1dc      	bne.n	8004ace <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <LL_ADC_SetCalibrationFactor>:
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b2e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <LL_ADC_GetCalibrationFactor>:
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <LL_ADC_Enable>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b72:	f023 0317 	bic.w	r3, r3, #23
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_Disable>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b98:	f023 0317 	bic.w	r3, r3, #23
 8004b9c:	f043 0202 	orr.w	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <LL_ADC_IsEnabled>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <LL_ADC_IsEnabled+0x18>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <LL_ADC_IsEnabled+0x1a>
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <LL_ADC_StartCalibration>:
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004be2:	f023 0317 	bic.w	r3, r3, #23
 8004be6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <LL_ADC_IsCalibrationOnGoing>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0c:	d101      	bne.n	8004c12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_ADCEx_Calibration_Start+0x1e>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e0b9      	b.n	8004db0 <HAL_ADCEx_Calibration_Start+0x192>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff0b 	bl	8004a60 <ADC_Disable>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff ffab 	bl	8004bae <LL_ADC_IsEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 809d 	bne.w	8004d9a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c68:	f043 0202 	orr.w	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	f248 0303 	movw	r3, #32771	; 0x8003
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c8c:	f023 0303 	bic.w	r3, r3, #3
 8004c90:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e02e      	b.n	8004cf6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff98 	bl	8004bd2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ca2:	e014      	b.n	8004cce <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004cb0:	d30d      	bcc.n	8004cce <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f023 0312 	bic.w	r3, r3, #18
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e070      	b.n	8004db0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff90 	bl	8004bf8 <LL_ADC_IsCalibrationOnGoing>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e2      	bne.n	8004ca4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ff2f 	bl	8004b46 <LL_ADC_GetCalibrationFactor>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4413      	add	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b07      	cmp	r3, #7
 8004cfa:	d9cd      	bls.n	8004c98 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff29 	bl	8004b62 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff01 	bl	8004b1e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff31 	bl	8004b88 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d26:	f7fd ff8b 	bl	8002c40 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d2c:	e01c      	b.n	8004d68 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d2e:	f7fd ff87 	bl	8002c40 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d915      	bls.n	8004d68 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff34 	bl	8004bae <LL_ADC_IsEnabled>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	f043 0210 	orr.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e023      	b.n	8004db0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff ff1e 	bl	8004bae <LL_ADC_IsEnabled>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1da      	bne.n	8004d2e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f023 0303 	bic.w	r3, r3, #3
 8004d90:	f043 0201 	orr.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58
 8004d98:	e005      	b.n	8004da6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	f043 0210 	orr.w	r2, r3, #16
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <__NVIC_SetPriorityGrouping+0x44>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dea:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <__NVIC_SetPriorityGrouping+0x44>)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	60d3      	str	r3, [r2, #12]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	e000ed00 	.word	0xe000ed00

08004e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <__NVIC_GetPriorityGrouping+0x18>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f003 0307 	and.w	r3, r3, #7
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	db0b      	blt.n	8004e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4906      	ldr	r1, [pc, #24]	; (8004e50 <__NVIC_EnableIRQ+0x34>)
 8004e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100

08004e54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	db12      	blt.n	8004e8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	f003 021f 	and.w	r2, r3, #31
 8004e6c:	490a      	ldr	r1, [pc, #40]	; (8004e98 <__NVIC_DisableIRQ+0x44>)
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	2001      	movs	r0, #1
 8004e76:	fa00 f202 	lsl.w	r2, r0, r2
 8004e7a:	3320      	adds	r3, #32
 8004e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e80:	f3bf 8f4f 	dsb	sy
}
 8004e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e86:	f3bf 8f6f 	isb	sy
}
 8004e8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000e100 	.word	0xe000e100

08004e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db0a      	blt.n	8004ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	490c      	ldr	r1, [pc, #48]	; (8004ee8 <__NVIC_SetPriority+0x4c>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	0112      	lsls	r2, r2, #4
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec4:	e00a      	b.n	8004edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <__NVIC_SetPriority+0x50>)
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	440b      	add	r3, r1
 8004eda:	761a      	strb	r2, [r3, #24]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	e000e100 	.word	0xe000e100
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f1c3 0307 	rsb	r3, r3, #7
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	bf28      	it	cs
 8004f0e:	2304      	movcs	r3, #4
 8004f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d902      	bls.n	8004f20 <NVIC_EncodePriority+0x30>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3b03      	subs	r3, #3
 8004f1e:	e000      	b.n	8004f22 <NVIC_EncodePriority+0x32>
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	401a      	ands	r2, r3
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	43d9      	mvns	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	4313      	orrs	r3, r2
         );
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff2b 	bl	8004db8 <__NVIC_SetPriorityGrouping>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	4603      	mov	r3, r0
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f78:	f7ff ff42 	bl	8004e00 <__NVIC_GetPriorityGrouping>
 8004f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff ffb4 	bl	8004ef0 <NVIC_EncodePriority>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff83 	bl	8004e9c <__NVIC_SetPriority>
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff ff35 	bl	8004e1c <__NVIC_EnableIRQ>
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff43 	bl	8004e54 <__NVIC_DisableIRQ>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e08e      	b.n	8005108 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b47      	ldr	r3, [pc, #284]	; (8005110 <HAL_DMA_Init+0x138>)
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d80f      	bhi.n	8005016 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b45      	ldr	r3, [pc, #276]	; (8005114 <HAL_DMA_Init+0x13c>)
 8004ffe:	4413      	add	r3, r2
 8005000:	4a45      	ldr	r2, [pc, #276]	; (8005118 <HAL_DMA_Init+0x140>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	009a      	lsls	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_DMA_Init+0x144>)
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
 8005014:	e00e      	b.n	8005034 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	4b40      	ldr	r3, [pc, #256]	; (8005120 <HAL_DMA_Init+0x148>)
 800501e:	4413      	add	r3, r2
 8005020:	4a3d      	ldr	r2, [pc, #244]	; (8005118 <HAL_DMA_Init+0x140>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	009a      	lsls	r2, r3, #2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_DMA_Init+0x14c>)
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fb24 	bl	80056d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005094:	d102      	bne.n	800509c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050b2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <HAL_DMA_Init+0x106>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d80c      	bhi.n	80050de <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb4d 	bl	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	e008      	b.n	80050f0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40020407 	.word	0x40020407
 8005114:	bffdfff8 	.word	0xbffdfff8
 8005118:	cccccccd 	.word	0xcccccccd
 800511c:	40020000 	.word	0x40020000
 8005120:	bffdfbf8 	.word	0xbffdfbf8
 8005124:	40020400 	.word	0x40020400

08005128 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07b      	b.n	8005232 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	4b3a      	ldr	r3, [pc, #232]	; (800523c <HAL_DMA_DeInit+0x114>)
 8005152:	429a      	cmp	r2, r3
 8005154:	d80f      	bhi.n	8005176 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	4b38      	ldr	r3, [pc, #224]	; (8005240 <HAL_DMA_DeInit+0x118>)
 800515e:	4413      	add	r3, r2
 8005160:	4a38      	ldr	r2, [pc, #224]	; (8005244 <HAL_DMA_DeInit+0x11c>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	009a      	lsls	r2, r3, #2
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a35      	ldr	r2, [pc, #212]	; (8005248 <HAL_DMA_DeInit+0x120>)
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
 8005174:	e00e      	b.n	8005194 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	4b33      	ldr	r3, [pc, #204]	; (800524c <HAL_DMA_DeInit+0x124>)
 800517e:	4413      	add	r3, r2
 8005180:	4a30      	ldr	r2, [pc, #192]	; (8005244 <HAL_DMA_DeInit+0x11c>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	009a      	lsls	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <HAL_DMA_DeInit+0x128>)
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f003 021c 	and.w	r2, r3, #28
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f202 	lsl.w	r2, r1, r2
 80051ae:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fa8f 	bl	80056d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051c6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <HAL_DMA_DeInit+0xc8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d80b      	bhi.n	80051f0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fac3 	bl	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051ee:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40020407 	.word	0x40020407
 8005240:	bffdfff8 	.word	0xbffdfff8
 8005244:	cccccccd 	.word	0xcccccccd
 8005248:	40020000 	.word	0x40020000
 800524c:	bffdfbf8 	.word	0xbffdfbf8
 8005250:	40020400 	.word	0x40020400

08005254 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_DMA_Start_IT+0x20>
 8005270:	2302      	movs	r3, #2
 8005272:	e069      	b.n	8005348 <HAL_DMA_Start_IT+0xf4>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d155      	bne.n	8005334 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f9d3 	bl	8005658 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 020e 	orr.w	r2, r2, #14
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e00f      	b.n	80052ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 020a 	orr.w	r2, r2, #10
 80052ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005308:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005320:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e008      	b.n	8005346 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e04f      	b.n	8005402 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d008      	beq.n	8005380 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2204      	movs	r2, #4
 8005372:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e040      	b.n	8005402 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 020e 	bic.w	r2, r2, #14
 800538e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800539e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	f003 021c 	and.w	r2, r3, #28
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f202 	lsl.w	r2, r1, r2
 80053c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d005      	beq.n	8005430 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
 800542e:	e047      	b.n	80054c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020e 	bic.w	r2, r2, #14
 800543e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800545e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005464:	f003 021c 	and.w	r2, r3, #28
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2101      	movs	r1, #1
 800546e:	fa01 f202 	lsl.w	r2, r1, r2
 8005472:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800547c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00c      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005494:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800549e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4798      	blx	r3
    }
  }
  return status;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	f003 031c 	and.w	r3, r3, #28
 80054ec:	2204      	movs	r2, #4
 80054ee:	409a      	lsls	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d027      	beq.n	8005548 <HAL_DMA_IRQHandler+0x7c>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d022      	beq.n	8005548 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0204 	bic.w	r2, r2, #4
 800551e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f003 021c 	and.w	r2, r3, #28
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2104      	movs	r1, #4
 800552e:	fa01 f202 	lsl.w	r2, r1, r2
 8005532:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8081 	beq.w	8005640 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005546:	e07b      	b.n	8005640 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554c:	f003 031c 	and.w	r3, r3, #28
 8005550:	2202      	movs	r2, #2
 8005552:	409a      	lsls	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d03d      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x10c>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d038      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 020a 	bic.w	r2, r2, #10
 8005582:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_DMA_IRQHandler+0x180>)
 8005594:	429a      	cmp	r2, r3
 8005596:	d909      	bls.n	80055ac <HAL_DMA_IRQHandler+0xe0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559c:	f003 031c 	and.w	r3, r3, #28
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <HAL_DMA_IRQHandler+0x184>)
 80055a2:	2102      	movs	r1, #2
 80055a4:	fa01 f303 	lsl.w	r3, r1, r3
 80055a8:	6053      	str	r3, [r2, #4]
 80055aa:	e008      	b.n	80055be <HAL_DMA_IRQHandler+0xf2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b0:	f003 031c 	and.w	r3, r3, #28
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_DMA_IRQHandler+0x188>)
 80055b6:	2102      	movs	r1, #2
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d038      	beq.n	8005640 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80055d6:	e033      	b.n	8005640 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	f003 031c 	and.w	r3, r3, #28
 80055e0:	2208      	movs	r2, #8
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02a      	beq.n	8005642 <HAL_DMA_IRQHandler+0x176>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d025      	beq.n	8005642 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 020e 	bic.w	r2, r2, #14
 8005604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f003 021c 	and.w	r2, r3, #28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2101      	movs	r1, #1
 8005614:	fa01 f202 	lsl.w	r2, r1, r2
 8005618:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005640:	bf00      	nop
 8005642:	bf00      	nop
}
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40020080 	.word	0x40020080
 8005650:	40020400 	.word	0x40020400
 8005654:	40020000 	.word	0x40020000

08005658 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800566e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f003 021c 	and.w	r2, r3, #28
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f202 	lsl.w	r2, r1, r2
 8005694:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d108      	bne.n	80056b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056b6:	e007      	b.n	80056c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	60da      	str	r2, [r3, #12]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
	...

080056d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d813      	bhi.n	8005710 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	089b      	lsrs	r3, r3, #2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	3b08      	subs	r3, #8
 8005704:	4a14      	ldr	r2, [pc, #80]	; (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e011      	b.n	8005734 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	009a      	lsls	r2, r3, #2
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800571a:	4413      	add	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	3b08      	subs	r3, #8
 8005728:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	3307      	adds	r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005738:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2201      	movs	r2, #1
 8005742:	409a      	lsls	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40020407 	.word	0x40020407
 8005758:	cccccccd 	.word	0xcccccccd
 800575c:	4002081c 	.word	0x4002081c
 8005760:	40020880 	.word	0x40020880

08005764 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005774:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005788:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b01      	subs	r3, #1
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2201      	movs	r2, #1
 8005794:	409a      	lsls	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	1000823f 	.word	0x1000823f
 80057a8:	40020940 	.word	0x40020940

080057ac <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d12b      	bne.n	800581a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_DMAEx_ConfigMuxSync+0x24>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e028      	b.n	8005822 <HAL_DMAEx_ConfigMuxSync+0x76>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	04db      	lsls	r3, r3, #19
 80057ee:	431a      	orrs	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	7a1b      	ldrb	r3, [r3, #8]
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	7a5b      	ldrb	r3, [r3, #9]
 8005802:	025b      	lsls	r3, r3, #9
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	430a      	orrs	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e003      	b.n	8005822 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005852:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800585c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	2b00      	cmp	r3, #0
 8005880:	d022      	beq.n	80058c8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01a      	beq.n	80058c8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
      }
    }
  }
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058de:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <HAL_FLASH_Program+0x80>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_FLASH_Program+0x1a>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e02d      	b.n	8005946 <HAL_FLASH_Program+0x76>
 80058ea:	4b19      	ldr	r3, [pc, #100]	; (8005950 <HAL_FLASH_Program+0x80>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058f0:	4b17      	ldr	r3, [pc, #92]	; (8005950 <HAL_FLASH_Program+0x80>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80058f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058fa:	f000 f869 	bl	80059d0 <FLASH_WaitForLastOperation>
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11a      	bne.n	800593e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800590e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f000 f8be 	bl	8005a94 <FLASH_Program_DoubleWord>
 8005918:	e004      	b.n	8005924 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	68b8      	ldr	r0, [r7, #8]
 8005920:	f000 f8de 	bl	8005ae0 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005928:	f000 f852 	bl	80059d0 <FLASH_WaitForLastOperation>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <HAL_FLASH_Program+0x84>)
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	43db      	mvns	r3, r3
 8005938:	4906      	ldr	r1, [pc, #24]	; (8005954 <HAL_FLASH_Program+0x84>)
 800593a:	4013      	ands	r3, r2
 800593c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <HAL_FLASH_Program+0x80>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000644 	.word	0x20000644
 8005954:	58004000 	.word	0x58004000

08005958 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_FLASH_Unlock+0x38>)
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da0b      	bge.n	8005982 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_FLASH_Unlock+0x38>)
 800596c:	4a09      	ldr	r2, [pc, #36]	; (8005994 <HAL_FLASH_Unlock+0x3c>)
 800596e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <HAL_FLASH_Unlock+0x38>)
 8005972:	4a09      	ldr	r2, [pc, #36]	; (8005998 <HAL_FLASH_Unlock+0x40>)
 8005974:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_FLASH_Unlock+0x38>)
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da01      	bge.n	8005982 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005982:	79fb      	ldrb	r3, [r7, #7]
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	58004000 	.word	0x58004000
 8005994:	45670123 	.word	0x45670123
 8005998:	cdef89ab 	.word	0xcdef89ab

0800599c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_FLASH_Lock+0x30>)
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <HAL_FLASH_Lock+0x30>)
 80059ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_FLASH_Lock+0x30>)
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	db01      	blt.n	80059be <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80059be:	79fb      	ldrb	r3, [r7, #7]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	58004000 	.word	0x58004000

080059d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7fd f932 	bl	8002c40 <HAL_GetTick>
 80059dc:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059de:	e009      	b.n	80059f4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80059e0:	f7fd f92e 	bl	8002c40 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d801      	bhi.n	80059f4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e047      	b.n	8005a84 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059f4:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d0ee      	beq.n	80059e0 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a12:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <FLASH_WaitForLastOperation+0x6c>
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a36:	4915      	ldr	r1, [pc, #84]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	618b      	str	r3, [r1, #24]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <FLASH_WaitForLastOperation+0x80>
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a4e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005a56:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <FLASH_WaitForLastOperation+0xc0>)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e011      	b.n	8005a84 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005a60:	f7fd f8ee 	bl	8002c40 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d801      	bhi.n	8005a74 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e007      	b.n	8005a84 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <FLASH_WaitForLastOperation+0xbc>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a80:	d0ee      	beq.n	8005a60 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58004000 	.word	0x58004000
 8005a90:	20000644 	.word	0x20000644

08005a94 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <FLASH_Program_DoubleWord+0x48>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <FLASH_Program_DoubleWord+0x48>)
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005ab2:	f3bf 8f6f 	isb	sy
}
 8005ab6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	000a      	movs	r2, r1
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	3104      	adds	r1, #4
 8005acc:	4613      	mov	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	58004000 	.word	0x58004000

08005ae0 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005af6:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <FLASH_Program_Fast+0x78>)
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <FLASH_Program_Fast+0x78>)
 8005afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b02:	f3ef 8310 	mrs	r3, PRIMASK
 8005b06:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b08:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005b0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b0c:	b672      	cpsid	i
}
 8005b0e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	3304      	adds	r3, #4
 8005b22:	617b      	str	r3, [r7, #20]
    row_index--;
 8005b24:	7ffb      	ldrb	r3, [r7, #31]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1ef      	bne.n	8005b10 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005b30:	bf00      	nop
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <FLASH_Program_Fast+0x78>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3e:	d0f8      	beq.n	8005b32 <FLASH_Program_Fast+0x52>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f383 8810 	msr	PRIMASK, r3
}
 8005b4a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005b4c:	bf00      	nop
 8005b4e:	3724      	adds	r7, #36	; 0x24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	58004000 	.word	0x58004000

08005b5c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b66:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <HAL_FLASHEx_Erase+0xac>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_FLASHEx_Erase+0x16>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e046      	b.n	8005c00 <HAL_FLASHEx_Erase+0xa4>
 8005b72:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <HAL_FLASHEx_Erase+0xac>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <HAL_FLASHEx_Erase+0xac>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b82:	f7ff ff25 	bl	80059d0 <FLASH_WaitForLastOperation>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d133      	bne.n	8005bf8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d108      	bne.n	8005baa <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005b98:	f000 f838 	bl	8005c0c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ba0:	f7ff ff16 	bl	80059d0 <FLASH_WaitForLastOperation>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e024      	b.n	8005bf4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	e012      	b.n	8005be0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005bba:	68b8      	ldr	r0, [r7, #8]
 8005bbc:	f000 f836 	bl	8005c2c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bc4:	f7ff ff04 	bl	80059d0 <FLASH_WaitForLastOperation>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	601a      	str	r2, [r3, #0]
          break;
 8005bd8:	e00a      	b.n	8005bf0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d3e4      	bcc.n	8005bba <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005bf0:	f000 f878 	bl	8005ce4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005bf4:	f000 f832 	bl	8005c5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_FLASHEx_Erase+0xac>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]

  return status;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000644 	.word	0x20000644

08005c0c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <FLASH_MassErase+0x1c>)
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <FLASH_MassErase+0x1c>)
 8005c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	6153      	str	r3, [r2, #20]
#endif
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	58004000 	.word	0x58004000

08005c2c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005c34:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <FLASH_PageErase+0x2c>)
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <FLASH_PageErase+0x2c>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	6153      	str	r3, [r2, #20]
#endif
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	58004000 	.word	0x58004000

08005c5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005c60:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d117      	bne.n	8005c9c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c76:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a12      	ldr	r2, [pc, #72]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c9a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005c9c:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d117      	bne.n	8005cd8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a06      	ldr	r2, [pc, #24]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a03      	ldr	r2, [pc, #12]	; (8005ce0 <FLASH_FlushCaches+0x84>)
 8005cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cd6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr
 8005ce0:	58004000 	.word	0x58004000

08005ce4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <FLASH_AcknowledgePageErase+0x1c>)
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <FLASH_AcknowledgePageErase+0x1c>)
 8005cee:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005cf2:	f023 0302 	bic.w	r3, r3, #2
 8005cf6:	6153      	str	r3, [r2, #20]
#endif
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr
 8005d00:	58004000 	.word	0x58004000

08005d04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d12:	e140      	b.n	8005f96 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	2101      	movs	r1, #1
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	4013      	ands	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 8132 	beq.w	8005f90 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d005      	beq.n	8005d44 <HAL_GPIO_Init+0x40>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d130      	bne.n	8005da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	2203      	movs	r2, #3
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4013      	ands	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 0201 	and.w	r2, r3, #1
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d017      	beq.n	8005de2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d123      	bne.n	8005e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	08da      	lsrs	r2, r3, #3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3208      	adds	r2, #8
 8005df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	220f      	movs	r2, #15
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	08da      	lsrs	r2, r3, #3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3208      	adds	r2, #8
 8005e30:	6939      	ldr	r1, [r7, #16]
 8005e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	2203      	movs	r2, #3
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 0203 	and.w	r2, r3, #3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 808c 	beq.w	8005f90 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005e78:	4a4e      	ldr	r2, [pc, #312]	; (8005fb4 <HAL_GPIO_Init+0x2b0>)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	3302      	adds	r3, #2
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	2207      	movs	r2, #7
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ea2:	d00d      	beq.n	8005ec0 <HAL_GPIO_Init+0x1bc>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a44      	ldr	r2, [pc, #272]	; (8005fb8 <HAL_GPIO_Init+0x2b4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d007      	beq.n	8005ebc <HAL_GPIO_Init+0x1b8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a43      	ldr	r2, [pc, #268]	; (8005fbc <HAL_GPIO_Init+0x2b8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d101      	bne.n	8005eb8 <HAL_GPIO_Init+0x1b4>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e004      	b.n	8005ec2 <HAL_GPIO_Init+0x1be>
 8005eb8:	2307      	movs	r3, #7
 8005eba:	e002      	b.n	8005ec2 <HAL_GPIO_Init+0x1be>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <HAL_GPIO_Init+0x1be>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	f002 0203 	and.w	r2, r2, #3
 8005ec8:	0092      	lsls	r2, r2, #2
 8005eca:	4093      	lsls	r3, r2
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ed2:	4938      	ldr	r1, [pc, #224]	; (8005fb4 <HAL_GPIO_Init+0x2b0>)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	3302      	adds	r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ee0:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f04:	4a2e      	ldr	r2, [pc, #184]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f0a:	4b2d      	ldr	r3, [pc, #180]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	43db      	mvns	r3, r3
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f2e:	4a24      	ldr	r2, [pc, #144]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005f34:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f3a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005f5a:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005f62:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f68:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4013      	ands	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005f88:	4a0d      	ldr	r2, [pc, #52]	; (8005fc0 <HAL_GPIO_Init+0x2bc>)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3301      	adds	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f47f aeb7 	bne.w	8005d14 <HAL_GPIO_Init+0x10>
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	48000400 	.word	0x48000400
 8005fbc:	48000800 	.word	0x48000800
 8005fc0:	58000800 	.word	0x58000800

08005fc4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005fd2:	e0af      	b.n	8006134 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a2 	beq.w	800612e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005fea:	4a59      	ldr	r2, [pc, #356]	; (8006150 <HAL_GPIO_DeInit+0x18c>)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	2207      	movs	r2, #7
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006012:	d00d      	beq.n	8006030 <HAL_GPIO_DeInit+0x6c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a4f      	ldr	r2, [pc, #316]	; (8006154 <HAL_GPIO_DeInit+0x190>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <HAL_GPIO_DeInit+0x68>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a4e      	ldr	r2, [pc, #312]	; (8006158 <HAL_GPIO_DeInit+0x194>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d101      	bne.n	8006028 <HAL_GPIO_DeInit+0x64>
 8006024:	2302      	movs	r3, #2
 8006026:	e004      	b.n	8006032 <HAL_GPIO_DeInit+0x6e>
 8006028:	2307      	movs	r3, #7
 800602a:	e002      	b.n	8006032 <HAL_GPIO_DeInit+0x6e>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <HAL_GPIO_DeInit+0x6e>
 8006030:	2300      	movs	r3, #0
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	f002 0203 	and.w	r2, r2, #3
 8006038:	0092      	lsls	r2, r2, #2
 800603a:	4093      	lsls	r3, r2
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d136      	bne.n	80060b0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006042:	4b46      	ldr	r3, [pc, #280]	; (800615c <HAL_GPIO_DeInit+0x198>)
 8006044:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	43db      	mvns	r3, r3
 800604c:	4943      	ldr	r1, [pc, #268]	; (800615c <HAL_GPIO_DeInit+0x198>)
 800604e:	4013      	ands	r3, r2
 8006050:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <HAL_GPIO_DeInit+0x198>)
 8006056:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	43db      	mvns	r3, r3
 800605e:	493f      	ldr	r1, [pc, #252]	; (800615c <HAL_GPIO_DeInit+0x198>)
 8006060:	4013      	ands	r3, r2
 8006062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006066:	4b3d      	ldr	r3, [pc, #244]	; (800615c <HAL_GPIO_DeInit+0x198>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	43db      	mvns	r3, r3
 800606e:	493b      	ldr	r1, [pc, #236]	; (800615c <HAL_GPIO_DeInit+0x198>)
 8006070:	4013      	ands	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006074:	4b39      	ldr	r3, [pc, #228]	; (800615c <HAL_GPIO_DeInit+0x198>)
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	43db      	mvns	r3, r3
 800607c:	4937      	ldr	r1, [pc, #220]	; (800615c <HAL_GPIO_DeInit+0x198>)
 800607e:	4013      	ands	r3, r2
 8006080:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	2207      	movs	r2, #7
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006092:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <HAL_GPIO_DeInit+0x18c>)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	3302      	adds	r3, #2
 800609a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	43da      	mvns	r2, r3
 80060a2:	482b      	ldr	r0, [pc, #172]	; (8006150 <HAL_GPIO_DeInit+0x18c>)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	400a      	ands	r2, r1
 80060aa:	3302      	adds	r3, #2
 80060ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	2103      	movs	r1, #3
 80060ba:	fa01 f303 	lsl.w	r3, r1, r3
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	08da      	lsrs	r2, r3, #3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3208      	adds	r2, #8
 80060cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	220f      	movs	r2, #15
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	08d2      	lsrs	r2, r2, #3
 80060e4:	4019      	ands	r1, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3208      	adds	r2, #8
 80060ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	2103      	movs	r1, #3
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	2101      	movs	r1, #1
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	2103      	movs	r1, #3
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	401a      	ands	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3301      	adds	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	f47f af49 	bne.w	8005fd4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006142:	bf00      	nop
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	48000400 	.word	0x48000400
 8006158:	48000800 	.word	0x48000800
 800615c:	58000800 	.word	0x58000800

08006160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	807b      	strh	r3, [r7, #2]
 800616c:	4613      	mov	r3, r2
 800616e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006170:	787b      	ldrb	r3, [r7, #1]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006176:	887a      	ldrh	r2, [r7, #2]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800617c:	e002      	b.n	8006184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061a0:	887a      	ldrh	r2, [r7, #2]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4013      	ands	r3, r2
 80061a6:	041a      	lsls	r2, r3, #16
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	43d9      	mvns	r1, r3
 80061ac:	887b      	ldrh	r3, [r7, #2]
 80061ae:	400b      	ands	r3, r1
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	619a      	str	r2, [r3, #24]
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e081      	b.n	80062d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fb fe2c 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	; 0x24
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006210:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006220:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d107      	bne.n	800623a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006236:	609a      	str	r2, [r3, #8]
 8006238:	e006      	b.n	8006248 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006246:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d104      	bne.n	800625a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800627c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69d9      	ldr	r1, [r3, #28]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	461a      	mov	r2, r3
 80062ec:	460b      	mov	r3, r1
 80062ee:	817b      	strh	r3, [r7, #10]
 80062f0:	4613      	mov	r3, r2
 80062f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	f040 80da 	bne.w	80064b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_I2C_Master_Transmit+0x30>
 800630c:	2302      	movs	r3, #2
 800630e:	e0d3      	b.n	80064b8 <HAL_I2C_Master_Transmit+0x1d8>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006318:	f7fc fc92 	bl	8002c40 <HAL_GetTick>
 800631c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	2319      	movs	r3, #25
 8006324:	2201      	movs	r2, #1
 8006326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f9e5 	bl	80066fa <I2C_WaitOnFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e0be      	b.n	80064b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2221      	movs	r2, #33	; 0x21
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2210      	movs	r2, #16
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	893a      	ldrh	r2, [r7, #8]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d90e      	bls.n	800638a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	22ff      	movs	r2, #255	; 0xff
 8006370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006376:	b2da      	uxtb	r2, r3
 8006378:	8979      	ldrh	r1, [r7, #10]
 800637a:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fbd0 	bl	8006b28 <I2C_TransferConfig>
 8006388:	e06c      	b.n	8006464 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006398:	b2da      	uxtb	r2, r3
 800639a:	8979      	ldrh	r1, [r7, #10]
 800639c:	4b48      	ldr	r3, [pc, #288]	; (80064c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fbbf 	bl	8006b28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063aa:	e05b      	b.n	8006464 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	6a39      	ldr	r1, [r7, #32]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f9e2 	bl	800677a <I2C_WaitOnTXISFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e07b      	b.n	80064b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d034      	beq.n	8006464 <HAL_I2C_Master_Transmit+0x184>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d130      	bne.n	8006464 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2200      	movs	r2, #0
 800640a:	2180      	movs	r1, #128	; 0x80
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f974 	bl	80066fa <I2C_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e04d      	b.n	80064b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2bff      	cmp	r3, #255	; 0xff
 8006424:	d90e      	bls.n	8006444 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	22ff      	movs	r2, #255	; 0xff
 800642a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	b2da      	uxtb	r2, r3
 8006432:	8979      	ldrh	r1, [r7, #10]
 8006434:	2300      	movs	r3, #0
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fb73 	bl	8006b28 <I2C_TransferConfig>
 8006442:	e00f      	b.n	8006464 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	b2da      	uxtb	r2, r3
 8006454:	8979      	ldrh	r1, [r7, #10]
 8006456:	2300      	movs	r3, #0
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fb62 	bl	8006b28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d19e      	bne.n	80063ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	6a39      	ldr	r1, [r7, #32]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f9c1 	bl	80067fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e01a      	b.n	80064b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2220      	movs	r2, #32
 8006488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6859      	ldr	r1, [r3, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006496:	400b      	ands	r3, r1
 8006498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	80002000 	.word	0x80002000
 80064c4:	fe00e800 	.word	0xfe00e800

080064c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	461a      	mov	r2, r3
 80064d4:	460b      	mov	r3, r1
 80064d6:	817b      	strh	r3, [r7, #10]
 80064d8:	4613      	mov	r3, r2
 80064da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	f040 80db 	bne.w	80066a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_I2C_Master_Receive+0x30>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e0d4      	b.n	80066a2 <HAL_I2C_Master_Receive+0x1da>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006500:	f7fc fb9e 	bl	8002c40 <HAL_GetTick>
 8006504:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2319      	movs	r3, #25
 800650c:	2201      	movs	r2, #1
 800650e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f8f1 	bl	80066fa <I2C_WaitOnFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e0bf      	b.n	80066a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2222      	movs	r2, #34	; 0x22
 8006526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2210      	movs	r2, #16
 800652e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	893a      	ldrh	r2, [r7, #8]
 8006542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	2bff      	cmp	r3, #255	; 0xff
 8006552:	d90e      	bls.n	8006572 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	22ff      	movs	r2, #255	; 0xff
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	b2da      	uxtb	r2, r3
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	4b52      	ldr	r3, [pc, #328]	; (80066ac <HAL_I2C_Master_Receive+0x1e4>)
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fadc 	bl	8006b28 <I2C_TransferConfig>
 8006570:	e06d      	b.n	800664e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	b2da      	uxtb	r2, r3
 8006582:	8979      	ldrh	r1, [r7, #10]
 8006584:	4b49      	ldr	r3, [pc, #292]	; (80066ac <HAL_I2C_Master_Receive+0x1e4>)
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 facb 	bl	8006b28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006592:	e05c      	b.n	800664e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	6a39      	ldr	r1, [r7, #32]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f96b 	bl	8006874 <I2C_WaitOnRXNEFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e07c      	b.n	80066a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d034      	beq.n	800664e <HAL_I2C_Master_Receive+0x186>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d130      	bne.n	800664e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2200      	movs	r2, #0
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f87f 	bl	80066fa <I2C_WaitOnFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e04d      	b.n	80066a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	2bff      	cmp	r3, #255	; 0xff
 800660e:	d90e      	bls.n	800662e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	22ff      	movs	r2, #255	; 0xff
 8006614:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661a:	b2da      	uxtb	r2, r3
 800661c:	8979      	ldrh	r1, [r7, #10]
 800661e:	2300      	movs	r3, #0
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fa7e 	bl	8006b28 <I2C_TransferConfig>
 800662c:	e00f      	b.n	800664e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663c:	b2da      	uxtb	r2, r3
 800663e:	8979      	ldrh	r1, [r7, #10]
 8006640:	2300      	movs	r3, #0
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fa6d 	bl	8006b28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d19d      	bne.n	8006594 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	6a39      	ldr	r1, [r7, #32]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f8cc 	bl	80067fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e01a      	b.n	80066a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2220      	movs	r2, #32
 8006672:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_I2C_Master_Receive+0x1e8>)
 8006680:	400b      	ands	r3, r1
 8006682:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	80002400 	.word	0x80002400
 80066b0:	fe00e800 	.word	0xfe00e800

080066b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d103      	bne.n	80066d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d007      	beq.n	80066f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	619a      	str	r2, [r3, #24]
  }
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800670a:	e022      	b.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d01e      	beq.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006714:	f7fc fa94 	bl	8002c40 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d302      	bcc.n	800672a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d113      	bne.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e00f      	b.n	8006772 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699a      	ldr	r2, [r3, #24]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	429a      	cmp	r2, r3
 800676e:	d0cd      	beq.n	800670c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006786:	e02c      	b.n	80067e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f8eb 	bl	8006968 <I2C_IsErrorOccurred>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e02a      	b.n	80067f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d01e      	beq.n	80067e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a4:	f7fc fa4c 	bl	8002c40 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e007      	b.n	80067f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d1cb      	bne.n	8006788 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006806:	e028      	b.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f8ab 	bl	8006968 <I2C_IsErrorOccurred>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e026      	b.n	800686a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681c:	f7fc fa10 	bl	8002c40 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d302      	bcc.n	8006832 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d113      	bne.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e007      	b.n	800686a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d1cf      	bne.n	8006808 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006880:	e064      	b.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f86e 	bl	8006968 <I2C_IsErrorOccurred>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e062      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d138      	bne.n	8006916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d105      	bne.n	80068be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e04e      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d107      	bne.n	80068dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2210      	movs	r2, #16
 80068d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2204      	movs	r2, #4
 80068d8:	645a      	str	r2, [r3, #68]	; 0x44
 80068da:	e002      	b.n	80068e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2220      	movs	r2, #32
 80068e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80068f6:	400b      	ands	r3, r1
 80068f8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e022      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006916:	f7fc f993 	bl	8002c40 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10f      	bne.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	f043 0220 	orr.w	r2, r3, #32
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e007      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b04      	cmp	r3, #4
 8006958:	d193      	bne.n	8006882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	fe00e800 	.word	0xfe00e800

08006968 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d068      	beq.n	8006a66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2210      	movs	r2, #16
 800699a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800699c:	e049      	b.n	8006a32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d045      	beq.n	8006a32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069a6:	f7fc f94b 	bl	8002c40 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <I2C_IsErrorOccurred+0x54>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d13a      	bne.n	8006a32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069de:	d121      	bne.n	8006a24 <I2C_IsErrorOccurred+0xbc>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e6:	d01d      	beq.n	8006a24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069e8:	7cfb      	ldrb	r3, [r7, #19]
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d01a      	beq.n	8006a24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069fe:	f7fc f91f 	bl	8002c40 <HAL_GetTick>
 8006a02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a04:	e00e      	b.n	8006a24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a06:	f7fc f91b 	bl	8002c40 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b19      	cmp	r3, #25
 8006a12:	d907      	bls.n	8006a24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f043 0320 	orr.w	r3, r3, #32
 8006a1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006a22:	e006      	b.n	8006a32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d1e9      	bne.n	8006a06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d003      	beq.n	8006a48 <I2C_IsErrorOccurred+0xe0>
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0aa      	beq.n	800699e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d103      	bne.n	8006a58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2220      	movs	r2, #32
 8006a56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	f043 0304 	orr.w	r3, r3, #4
 8006a5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f043 0308 	orr.w	r3, r3, #8
 8006aa0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006aaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f043 0302 	orr.w	r3, r3, #2
 8006ac2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006acc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01c      	beq.n	8006b16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fde9 	bl	80066b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <I2C_IsErrorOccurred+0x1bc>)
 8006aee:	400b      	ands	r3, r1
 8006af0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	fe00e800 	.word	0xfe00e800

08006b28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	607b      	str	r3, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	817b      	strh	r3, [r7, #10]
 8006b36:	4613      	mov	r3, r2
 8006b38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3a:	897b      	ldrh	r3, [r7, #10]
 8006b3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b40:	7a7b      	ldrb	r3, [r7, #9]
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	0d5b      	lsrs	r3, r3, #21
 8006b62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <I2C_TransferConfig+0x5c>)
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	43db      	mvns	r3, r3
 8006b6c:	ea02 0103 	and.w	r1, r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	03ff63ff 	.word	0x03ff63ff

08006b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d138      	bne.n	8006c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e032      	b.n	8006c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	; 0x24
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr

08006c1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d139      	bne.n	8006ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e033      	b.n	8006ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2224      	movs	r2, #36	; 0x24
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e000      	b.n	8006ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <HAL_PWR_EnableBkUpAccess+0x18>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a03      	ldr	r2, [pc, #12]	; (8006ccc <HAL_PWR_EnableBkUpAccess+0x18>)
 8006cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc2:	6013      	str	r3, [r2, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	58000400 	.word	0x58000400

08006cd0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cee:	d10d      	bne.n	8006d0c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006cf0:	f000 f83c 	bl	8006d6c <HAL_PWREx_DisableLowPowerRunMode>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006cfa:	e015      	b.n	8006d28 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006d08:	f000 f822 	bl	8006d50 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006d12:	f023 0304 	bic.w	r3, r3, #4
 8006d16:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006d1e:	bf30      	wfi
 8006d20:	e002      	b.n	8006d28 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006d22:	bf40      	sev
    __WFE();
 8006d24:	bf20      	wfe
    __WFE();
 8006d26:	bf20      	wfe
  }
}
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	58000400 	.word	0x58000400
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006d3c:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <HAL_PWREx_GetVoltageRange+0x14>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr
 8006d4c:	58000400 	.word	0x58000400

08006d50 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a03      	ldr	r2, [pc, #12]	; (8006d68 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d5e:	6013      	str	r3, [r2, #0]
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr
 8006d68:	58000400 	.word	0x58000400

08006d6c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d72:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d7c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2232      	movs	r2, #50	; 0x32
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	4a12      	ldr	r2, [pc, #72]	; (8006dd4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8e:	0c9b      	lsrs	r3, r3, #18
 8006d90:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006d92:	e002      	b.n	8006d9a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da6:	d102      	bne.n	8006dae <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f2      	bne.n	8006d94 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dba:	d101      	bne.n	8006dc0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e000      	b.n	8006dc2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr
 8006dcc:	58000400 	.word	0x58000400
 8006dd0:	2000000c 	.word	0x2000000c
 8006dd4:	431bde83 	.word	0x431bde83

08006dd8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 0307 	bic.w	r3, r3, #7
 8006dea:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006dec:	f043 0302 	orr.w	r3, r3, #2
 8006df0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006e04:	bf30      	wfi
 8006e06:	e002      	b.n	8006e0e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006e08:	bf40      	sev
    __WFE();
 8006e0a:	bf20      	wfe
    __WFE();
 8006e0c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e14:	f023 0304 	bic.w	r3, r3, #4
 8006e18:	6113      	str	r3, [r2, #16]
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr
 8006e24:	58000400 	.word	0x58000400
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006e30:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3c:	d101      	bne.n	8006e42 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	58000400 	.word	0x58000400

08006e50 <LL_RCC_HSE_EnableTcxo>:
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e62:	6013      	str	r3, [r2, #0]
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <LL_RCC_HSE_DisableTcxo>:
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9a:	d101      	bne.n	8006ea0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <LL_RCC_HSE_Enable>:
{
 8006eaa:	b480      	push	{r7}
 8006eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ebc:	6013      	str	r3, [r2, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bc80      	pop	{r7}
 8006ec4:	4770      	bx	lr

08006ec6 <LL_RCC_HSE_Disable>:
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed8:	6013      	str	r3, [r2, #0]
}
 8006eda:	bf00      	nop
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <LL_RCC_HSE_IsReady>:
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d101      	bne.n	8006efa <LL_RCC_HSE_IsReady+0x18>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <LL_RCC_HSE_IsReady+0x1a>
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <LL_RCC_HSI_Enable>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f16:	6013      	str	r3, [r2, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <LL_RCC_HSI_Disable>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f32:	6013      	str	r3, [r2, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <LL_RCC_HSI_IsReady>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4e:	d101      	bne.n	8006f54 <LL_RCC_HSI_IsReady+0x18>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <LL_RCC_HSI_IsReady+0x1a>
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <LL_RCC_LSE_IsReady>:
{
 8006f86:	b480      	push	{r7}
 8006f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d101      	bne.n	8006f9e <LL_RCC_LSE_IsReady+0x18>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <LL_RCC_LSE_IsReady+0x1a>
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <LL_RCC_LSI_Enable>:
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006fc0:	bf00      	nop
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <LL_RCC_LSI_Disable>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <LL_RCC_LSI_IsReady>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d101      	bne.n	8007000 <LL_RCC_LSI_IsReady+0x18>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <LL_RCC_LSI_IsReady+0x1a>
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <LL_RCC_MSI_Enable>:
{
 800700a:	b480      	push	{r7}
 800700c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800700e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	6013      	str	r3, [r2, #0]
}
 800701e:	bf00      	nop
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <LL_RCC_MSI_Disable>:
{
 8007026:	b480      	push	{r7}
 8007028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800702a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	6013      	str	r3, [r2, #0]
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <LL_RCC_MSI_IsReady>:
{
 8007042:	b480      	push	{r7}
 8007044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b02      	cmp	r3, #2
 8007052:	d101      	bne.n	8007058 <LL_RCC_MSI_IsReady+0x16>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <LL_RCC_MSI_IsReady+0x18>
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007062:	b480      	push	{r7}
 8007064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d101      	bne.n	8007078 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr

08007082 <LL_RCC_MSI_GetRange>:
{
 8007082:	b480      	push	{r7}
 8007084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr

08007098 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr

080070b0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80070b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <LL_RCC_SetSysClkSource>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80070e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f023 0203 	bic.w	r2, r3, #3
 80070ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	608b      	str	r3, [r1, #8]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <LL_RCC_GetSysClkSource>:
{
 80070fe:	b480      	push	{r7}
 8007100:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 030c 	and.w	r3, r3, #12
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr

08007114 <LL_RCC_SetAHBPrescaler>:
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800711c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr

0800713a <LL_RCC_SetAHB3Prescaler>:
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007146:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800714a:	f023 020f 	bic.w	r2, r3, #15
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <LL_RCC_SetAPB1Prescaler>:
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4313      	orrs	r3, r2
 8007180:	608b      	str	r3, [r1, #8]
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <LL_RCC_SetAPB2Prescaler>:
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800719e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	608b      	str	r3, [r1, #8]
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <LL_RCC_GetAHBPrescaler>:
{
 80071b2:	b480      	push	{r7}
 80071b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80071b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr

080071c8 <LL_RCC_GetAHB3Prescaler>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80071cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <LL_RCC_GetAPB1Prescaler>:
{
 80071e2:	b480      	push	{r7}
 80071e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80071e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr

080071f8 <LL_RCC_GetAPB2Prescaler>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007206:	4618      	mov	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800720e:	b480      	push	{r7}
 8007210:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800721c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007220:	6013      	str	r3, [r2, #0]
}
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800722a:	b480      	push	{r7}
 800722c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800722e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800723c:	6013      	str	r3, [r2, #0]
}
 800723e:	bf00      	nop
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007246:	b480      	push	{r7}
 8007248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800724a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007258:	d101      	bne.n	800725e <LL_RCC_PLL_IsReady+0x18>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <LL_RCC_PLL_IsReady+0x1a>
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800726c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007278:	4618      	mov	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800728e:	4618      	mov	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr

08007296 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007296:	b480      	push	{r7}
 8007298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800729a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80072b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0303 	and.w	r3, r3, #3
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d4:	d101      	bne.n	80072da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80072e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80072f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f8:	d101      	bne.n	80072fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731a:	d101      	bne.n	8007320 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr

0800732a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800732a:	b480      	push	{r7}
 800732c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800732e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800733c:	d101      	bne.n	8007342 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr

0800734c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e36f      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800735e:	f7ff fece 	bl	80070fe <LL_RCC_GetSysClkSource>
 8007362:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007364:	f7ff ffa2 	bl	80072ac <LL_RCC_PLL_GetMainSource>
 8007368:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 80c4 	beq.w	8007500 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_RCC_OscConfig+0x3e>
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2b0c      	cmp	r3, #12
 8007382:	d176      	bne.n	8007472 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d173      	bne.n	8007472 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e353      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800739a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_OscConfig+0x68>
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073b2:	e006      	b.n	80073c2 <HAL_RCC_OscConfig+0x76>
 80073b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073bc:	091b      	lsrs	r3, r3, #4
 80073be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d222      	bcs.n	800740c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fd3c 	bl	8007e48 <RCC_SetFlashLatencyFromMSIRange>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e331      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073e4:	f043 0308 	orr.w	r3, r3, #8
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073fc:	4313      	orrs	r3, r2
 80073fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fe53 	bl	80070b0 <LL_RCC_MSI_SetCalibTrimming>
 800740a:	e021      	b.n	8007450 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800740c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007416:	f043 0308 	orr.w	r3, r3, #8
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800742e:	4313      	orrs	r3, r2
 8007430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fe3a 	bl	80070b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fd01 	bl	8007e48 <RCC_SetFlashLatencyFromMSIRange>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e2f6      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007450:	f000 fcc2 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007454:	4603      	mov	r3, r0
 8007456:	4aa7      	ldr	r2, [pc, #668]	; (80076f4 <HAL_RCC_OscConfig+0x3a8>)
 8007458:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800745a:	4ba7      	ldr	r3, [pc, #668]	; (80076f8 <HAL_RCC_OscConfig+0x3ac>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f7fb fbe4 	bl	8002c2c <HAL_InitTick>
 8007464:	4603      	mov	r3, r0
 8007466:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007468:	7cfb      	ldrb	r3, [r7, #19]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d047      	beq.n	80074fe <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800746e:	7cfb      	ldrb	r3, [r7, #19]
 8007470:	e2e5      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02c      	beq.n	80074d4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800747a:	f7ff fdc6 	bl	800700a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800747e:	f7fb fbdf 	bl	8002c40 <HAL_GetTick>
 8007482:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007486:	f7fb fbdb 	bl	8002c40 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e2d2      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007498:	f7ff fdd3 	bl	8007042 <LL_RCC_MSI_IsReady>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f1      	beq.n	8007486 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ac:	f043 0308 	orr.w	r3, r3, #8
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074c4:	4313      	orrs	r3, r2
 80074c6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fdef 	bl	80070b0 <LL_RCC_MSI_SetCalibTrimming>
 80074d2:	e015      	b.n	8007500 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074d4:	f7ff fda7 	bl	8007026 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074d8:	f7fb fbb2 	bl	8002c40 <HAL_GetTick>
 80074dc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074e0:	f7fb fbae 	bl	8002c40 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e2a5      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80074f2:	f7ff fda6 	bl	8007042 <LL_RCC_MSI_IsReady>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f1      	bne.n	80074e0 <HAL_RCC_OscConfig+0x194>
 80074fc:	e000      	b.n	8007500 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80074fe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d058      	beq.n	80075be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2b08      	cmp	r3, #8
 8007510:	d005      	beq.n	800751e <HAL_RCC_OscConfig+0x1d2>
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b0c      	cmp	r3, #12
 8007516:	d108      	bne.n	800752a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d105      	bne.n	800752a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d14b      	bne.n	80075be <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e289      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800753c:	4313      	orrs	r3, r2
 800753e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007548:	d102      	bne.n	8007550 <HAL_RCC_OscConfig+0x204>
 800754a:	f7ff fcae 	bl	8006eaa <LL_RCC_HSE_Enable>
 800754e:	e00d      	b.n	800756c <HAL_RCC_OscConfig+0x220>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007558:	d104      	bne.n	8007564 <HAL_RCC_OscConfig+0x218>
 800755a:	f7ff fc79 	bl	8006e50 <LL_RCC_HSE_EnableTcxo>
 800755e:	f7ff fca4 	bl	8006eaa <LL_RCC_HSE_Enable>
 8007562:	e003      	b.n	800756c <HAL_RCC_OscConfig+0x220>
 8007564:	f7ff fcaf 	bl	8006ec6 <LL_RCC_HSE_Disable>
 8007568:	f7ff fc80 	bl	8006e6c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d012      	beq.n	800759a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007574:	f7fb fb64 	bl	8002c40 <HAL_GetTick>
 8007578:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800757c:	f7fb fb60 	bl	8002c40 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b64      	cmp	r3, #100	; 0x64
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e257      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800758e:	f7ff fca8 	bl	8006ee2 <LL_RCC_HSE_IsReady>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f1      	beq.n	800757c <HAL_RCC_OscConfig+0x230>
 8007598:	e011      	b.n	80075be <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800759a:	f7fb fb51 	bl	8002c40 <HAL_GetTick>
 800759e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a2:	f7fb fb4d 	bl	8002c40 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b64      	cmp	r3, #100	; 0x64
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e244      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80075b4:	f7ff fc95 	bl	8006ee2 <LL_RCC_HSE_IsReady>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f1      	bne.n	80075a2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d046      	beq.n	8007658 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d005      	beq.n	80075dc <HAL_RCC_OscConfig+0x290>
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d10e      	bne.n	80075f4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d10b      	bne.n	80075f4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e22a      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fcb6 	bl	8006f5e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80075f2:	e031      	b.n	8007658 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d019      	beq.n	8007630 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075fc:	f7ff fc82 	bl	8006f04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fb fb1e 	bl	8002c40 <HAL_GetTick>
 8007604:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007608:	f7fb fb1a 	bl	8002c40 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e211      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800761a:	f7ff fc8f 	bl	8006f3c <LL_RCC_HSI_IsReady>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0f1      	beq.n	8007608 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fc98 	bl	8006f5e <LL_RCC_HSI_SetCalibTrimming>
 800762e:	e013      	b.n	8007658 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007630:	f7ff fc76 	bl	8006f20 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fb fb04 	bl	8002c40 <HAL_GetTick>
 8007638:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800763c:	f7fb fb00 	bl	8002c40 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e1f7      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800764e:	f7ff fc75 	bl	8006f3c <LL_RCC_HSI_IsReady>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f1      	bne.n	800763c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d06e      	beq.n	8007742 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d056      	beq.n	800771a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800766c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007674:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69da      	ldr	r2, [r3, #28]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	429a      	cmp	r2, r3
 8007682:	d031      	beq.n	80076e8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e1d0      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80076a6:	f7ff fc8f 	bl	8006fc8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076aa:	f7fb fac9 	bl	8002c40 <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076b2:	f7fb fac5 	bl	8002c40 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b11      	cmp	r3, #17
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e1bc      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80076c4:	f7ff fc90 	bl	8006fe8 <LL_RCC_LSI_IsReady>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f1      	bne.n	80076b2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80076ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076d6:	f023 0210 	bic.w	r2, r3, #16
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076e8:	f7ff fc5e 	bl	8006fa8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ec:	f7fb faa8 	bl	8002c40 <HAL_GetTick>
 80076f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80076f2:	e00c      	b.n	800770e <HAL_RCC_OscConfig+0x3c2>
 80076f4:	2000000c 	.word	0x2000000c
 80076f8:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076fc:	f7fb faa0 	bl	8002c40 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b11      	cmp	r3, #17
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e197      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800770e:	f7ff fc6b 	bl	8006fe8 <LL_RCC_LSI_IsReady>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0f1      	beq.n	80076fc <HAL_RCC_OscConfig+0x3b0>
 8007718:	e013      	b.n	8007742 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800771a:	f7ff fc55 	bl	8006fc8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800771e:	f7fb fa8f 	bl	8002c40 <HAL_GetTick>
 8007722:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007726:	f7fb fa8b 	bl	8002c40 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b11      	cmp	r3, #17
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e182      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007738:	f7ff fc56 	bl	8006fe8 <LL_RCC_LSI_IsReady>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f1      	bne.n	8007726 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80d8 	beq.w	8007900 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007750:	f7ff fb6c 	bl	8006e2c <LL_PWR_IsEnabledBkUpAccess>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d113      	bne.n	8007782 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800775a:	f7ff faab 	bl	8006cb4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800775e:	f7fb fa6f 	bl	8002c40 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007766:	f7fb fa6b 	bl	8002c40 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e162      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007778:	f7ff fb58 	bl	8006e2c <LL_PWR_IsEnabledBkUpAccess>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f1      	beq.n	8007766 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d07b      	beq.n	8007882 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b85      	cmp	r3, #133	; 0x85
 8007790:	d003      	beq.n	800779a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b05      	cmp	r3, #5
 8007798:	d109      	bne.n	80077ae <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800779a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800779e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a6:	f043 0304 	orr.w	r3, r3, #4
 80077aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ae:	f7fb fa47 	bl	8002c40 <HAL_GetTick>
 80077b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80077b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80077c8:	e00a      	b.n	80077e0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ca:	f7fb fa39 	bl	8002c40 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d8:	4293      	cmp	r3, r2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e12e      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80077e0:	f7ff fbd1 	bl	8006f86 <LL_RCC_LSE_IsReady>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ef      	beq.n	80077ca <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	2b81      	cmp	r3, #129	; 0x81
 80077f0:	d003      	beq.n	80077fa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b85      	cmp	r3, #133	; 0x85
 80077f8:	d121      	bne.n	800783e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fa:	f7fb fa21 	bl	8002c40 <HAL_GetTick>
 80077fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007814:	e00a      	b.n	800782c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007816:	f7fb fa13 	bl	8002c40 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f241 3288 	movw	r2, #5000	; 0x1388
 8007824:	4293      	cmp	r3, r2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e108      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800782c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0ec      	beq.n	8007816 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800783c:	e060      	b.n	8007900 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783e:	f7fb f9ff 	bl	8002c40 <HAL_GetTick>
 8007842:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007858:	e00a      	b.n	8007870 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fb f9f1 	bl	8002c40 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e0e6      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1ec      	bne.n	800785a <HAL_RCC_OscConfig+0x50e>
 8007880:	e03e      	b.n	8007900 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007882:	f7fb f9dd 	bl	8002c40 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800788c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fb f9cf 	bl	8002c40 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0c4      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1ec      	bne.n	800789e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c4:	f7fb f9bc 	bl	8002c40 <HAL_GetTick>
 80078c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078d6:	f023 0301 	bic.w	r3, r3, #1
 80078da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80078de:	e00a      	b.n	80078f6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e0:	f7fb f9ae 	bl	8002c40 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e0a3      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80078f6:	f7ff fb46 	bl	8006f86 <LL_RCC_LSE_IsReady>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1ef      	bne.n	80078e0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8099 	beq.w	8007a3c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b0c      	cmp	r3, #12
 800790e:	d06c      	beq.n	80079ea <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	2b02      	cmp	r3, #2
 8007916:	d14b      	bne.n	80079b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007918:	f7ff fc87 	bl	800722a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800791c:	f7fb f990 	bl	8002c40 <HAL_GetTick>
 8007920:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007924:	f7fb f98c 	bl	8002c40 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b0a      	cmp	r3, #10
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e083      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007936:	f7ff fc86 	bl	8007246 <LL_RCC_PLL_IsReady>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f1      	bne.n	8007924 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	4b40      	ldr	r3, [pc, #256]	; (8007a48 <HAL_RCC_OscConfig+0x6fc>)
 8007948:	4013      	ands	r3, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007952:	4311      	orrs	r1, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007958:	0212      	lsls	r2, r2, #8
 800795a:	4311      	orrs	r1, r2
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007960:	4311      	orrs	r1, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007966:	4311      	orrs	r1, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800796c:	430a      	orrs	r2, r1
 800796e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007972:	4313      	orrs	r3, r2
 8007974:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007976:	f7ff fc4a 	bl	800720e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007988:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798a:	f7fb f959 	bl	8002c40 <HAL_GetTick>
 800798e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007992:	f7fb f955 	bl	8002c40 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b0a      	cmp	r3, #10
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e04c      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80079a4:	f7ff fc4f 	bl	8007246 <LL_RCC_PLL_IsReady>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f1      	beq.n	8007992 <HAL_RCC_OscConfig+0x646>
 80079ae:	e045      	b.n	8007a3c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b0:	f7ff fc3b 	bl	800722a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b4:	f7fb f944 	bl	8002c40 <HAL_GetTick>
 80079b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fb f940 	bl	8002c40 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b0a      	cmp	r3, #10
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e037      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80079ce:	f7ff fc3a 	bl	8007246 <LL_RCC_PLL_IsReady>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f1      	bne.n	80079bc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80079d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079e2:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <HAL_RCC_OscConfig+0x700>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	60cb      	str	r3, [r1, #12]
 80079e8:	e028      	b.n	8007a3c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e023      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	f003 0203 	and.w	r2, r3, #3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d115      	bne.n	8007a38 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d10e      	bne.n	8007a38 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d106      	bne.n	8007a38 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d001      	beq.n	8007a3c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3720      	adds	r7, #32
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	11c1808c 	.word	0x11c1808c
 8007a4c:	eefefffc 	.word	0xeefefffc

08007a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e10f      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a64:	4b89      	ldr	r3, [pc, #548]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d91b      	bls.n	8007aaa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a72:	4b86      	ldr	r3, [pc, #536]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f023 0207 	bic.w	r2, r3, #7
 8007a7a:	4984      	ldr	r1, [pc, #528]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a82:	f7fb f8dd 	bl	8002c40 <HAL_GetTick>
 8007a86:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a8a:	f7fb f8d9 	bl	8002c40 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e0f3      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a9c:	4b7b      	ldr	r3, [pc, #492]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d1ef      	bne.n	8007a8a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d016      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fb2a 	bl	8007114 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ac0:	f7fb f8be 	bl	8002c40 <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007ac6:	e008      	b.n	8007ada <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ac8:	f7fb f8ba 	bl	8002c40 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e0d4      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007ada:	f7ff fbf2 	bl	80072c2 <LL_RCC_IsActiveFlag_HPRE>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f1      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d016      	beq.n	8007b1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fb20 	bl	800713a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007afa:	f7fb f8a1 	bl	8002c40 <HAL_GetTick>
 8007afe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b02:	f7fb f89d 	bl	8002c40 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0b7      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b14:	f7ff fbe6 	bl	80072e4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f1      	beq.n	8007b02 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d016      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fb19 	bl	8007166 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b34:	f7fb f884 	bl	8002c40 <HAL_GetTick>
 8007b38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b3c:	f7fb f880 	bl	8002c40 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e09a      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007b4e:	f7ff fbdb 	bl	8007308 <LL_RCC_IsActiveFlag_PPRE1>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0f1      	beq.n	8007b3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff fb0e 	bl	800718c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b70:	f7fb f866 	bl	8002c40 <HAL_GetTick>
 8007b74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b78:	f7fb f862 	bl	8002c40 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e07c      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b8a:	f7ff fbce 	bl	800732a <LL_RCC_IsActiveFlag_PPRE2>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0f1      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d043      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d106      	bne.n	8007bb6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007ba8:	f7ff f99b 	bl	8006ee2 <LL_RCC_HSE_IsReady>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d11e      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e066      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d106      	bne.n	8007bcc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007bbe:	f7ff fb42 	bl	8007246 <LL_RCC_PLL_IsReady>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d113      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e05b      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007bd4:	f7ff fa35 	bl	8007042 <LL_RCC_MSI_IsReady>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d108      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e050      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007be2:	f7ff f9ab 	bl	8006f3c <LL_RCC_HSI_IsReady>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e049      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fa6f 	bl	80070d8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bfa:	f7fb f821 	bl	8002c40 <HAL_GetTick>
 8007bfe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c00:	e00a      	b.n	8007c18 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c02:	f7fb f81d 	bl	8002c40 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e035      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c18:	f7ff fa71 	bl	80070fe <LL_RCC_GetSysClkSource>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d1ec      	bne.n	8007c02 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c28:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d21b      	bcs.n	8007c6e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c36:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f023 0207 	bic.w	r2, r3, #7
 8007c3e:	4913      	ldr	r1, [pc, #76]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c46:	f7fa fffb 	bl	8002c40 <HAL_GetTick>
 8007c4a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007c4e:	f7fa fff7 	bl	8002c40 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e011      	b.n	8007c84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <HAL_RCC_ClockConfig+0x23c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d1ef      	bne.n	8007c4e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007c6e:	f000 f8b3 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007c72:	4603      	mov	r3, r0
 8007c74:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <HAL_RCC_ClockConfig+0x240>)
 8007c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <HAL_RCC_ClockConfig+0x244>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fa ffd5 	bl	8002c2c <HAL_InitTick>
 8007c82:	4603      	mov	r3, r0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	58004000 	.word	0x58004000
 8007c90:	2000000c 	.word	0x2000000c
 8007c94:	20000014 	.word	0x20000014

08007c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ca6:	f7ff fa2a 	bl	80070fe <LL_RCC_GetSysClkSource>
 8007caa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cac:	f7ff fafe 	bl	80072ac <LL_RCC_PLL_GetMainSource>
 8007cb0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b0c      	cmp	r3, #12
 8007cbc:	d139      	bne.n	8007d32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d136      	bne.n	8007d32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007cc4:	f7ff f9cd 	bl	8007062 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d115      	bne.n	8007cfa <HAL_RCC_GetSysClockFreq+0x62>
 8007cce:	f7ff f9c8 	bl	8007062 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCC_GetSysClockFreq+0x4e>
 8007cd8:	f7ff f9d3 	bl	8007082 <LL_RCC_MSI_GetRange>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	f003 030f 	and.w	r3, r3, #15
 8007ce4:	e005      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x5a>
 8007ce6:	f7ff f9d7 	bl	8007098 <LL_RCC_MSI_GetRangeAfterStandby>
 8007cea:	4603      	mov	r3, r0
 8007cec:	0a1b      	lsrs	r3, r3, #8
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	4a36      	ldr	r2, [pc, #216]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x134>)
 8007cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf8:	e014      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x8c>
 8007cfa:	f7ff f9b2 	bl	8007062 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d106      	bne.n	8007d12 <HAL_RCC_GetSysClockFreq+0x7a>
 8007d04:	f7ff f9bd 	bl	8007082 <LL_RCC_MSI_GetRange>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	091b      	lsrs	r3, r3, #4
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	e005      	b.n	8007d1e <HAL_RCC_GetSysClockFreq+0x86>
 8007d12:	f7ff f9c1 	bl	8007098 <LL_RCC_MSI_GetRangeAfterStandby>
 8007d16:	4603      	mov	r3, r0
 8007d18:	091b      	lsrs	r3, r3, #4
 8007d1a:	f003 030f 	and.w	r3, r3, #15
 8007d1e:	4a2b      	ldr	r2, [pc, #172]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x134>)
 8007d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d115      	bne.n	8007d58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d30:	e012      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d102      	bne.n	8007d3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e00c      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d109      	bne.n	8007d58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d44:	f7ff f8a0 	bl	8006e88 <LL_RCC_HSE_IsEnabledDiv2>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d102      	bne.n	8007d54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007d4e:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e001      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007d54:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007d56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d58:	f7ff f9d1 	bl	80070fe <LL_RCC_GetSysClkSource>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b0c      	cmp	r3, #12
 8007d60:	d12f      	bne.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007d62:	f7ff faa3 	bl	80072ac <LL_RCC_PLL_GetMainSource>
 8007d66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d003      	beq.n	8007d76 <HAL_RCC_GetSysClockFreq+0xde>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d003      	beq.n	8007d7c <HAL_RCC_GetSysClockFreq+0xe4>
 8007d74:	e00d      	b.n	8007d92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007d76:	4b16      	ldr	r3, [pc, #88]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d78:	60fb      	str	r3, [r7, #12]
        break;
 8007d7a:	e00d      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d7c:	f7ff f884 	bl	8006e88 <LL_RCC_HSE_IsEnabledDiv2>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d102      	bne.n	8007d8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007d8a:	e005      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007d8c:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007d8e:	60fb      	str	r3, [r7, #12]
        break;
 8007d90:	e002      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	60fb      	str	r3, [r7, #12]
        break;
 8007d96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007d98:	f7ff fa66 	bl	8007268 <LL_RCC_PLL_GetN>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	fb03 f402 	mul.w	r4, r3, r2
 8007da4:	f7ff fa77 	bl	8007296 <LL_RCC_PLL_GetDivider>
 8007da8:	4603      	mov	r3, r0
 8007daa:	091b      	lsrs	r3, r3, #4
 8007dac:	3301      	adds	r3, #1
 8007dae:	fbb4 f4f3 	udiv	r4, r4, r3
 8007db2:	f7ff fa65 	bl	8007280 <LL_RCC_PLL_GetR>
 8007db6:	4603      	mov	r3, r0
 8007db8:	0f5b      	lsrs	r3, r3, #29
 8007dba:	3301      	adds	r3, #1
 8007dbc:	fbb4 f3f3 	udiv	r3, r4, r3
 8007dc0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007dc2:	697b      	ldr	r3, [r7, #20]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd90      	pop	{r4, r7, pc}
 8007dcc:	0801f590 	.word	0x0801f590
 8007dd0:	00f42400 	.word	0x00f42400
 8007dd4:	01e84800 	.word	0x01e84800

08007dd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd8:	b598      	push	{r3, r4, r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007ddc:	f7ff ff5c 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 8007de0:	4604      	mov	r4, r0
 8007de2:	f7ff f9e6 	bl	80071b2 <LL_RCC_GetAHBPrescaler>
 8007de6:	4603      	mov	r3, r0
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	4a03      	ldr	r2, [pc, #12]	; (8007dfc <HAL_RCC_GetHCLKFreq+0x24>)
 8007df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd98      	pop	{r3, r4, r7, pc}
 8007dfc:	0801f530 	.word	0x0801f530

08007e00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e00:	b598      	push	{r3, r4, r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007e04:	f7ff ffe8 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	f7ff f9ea 	bl	80071e2 <LL_RCC_GetAPB1Prescaler>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	4a03      	ldr	r2, [pc, #12]	; (8007e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	bd98      	pop	{r3, r4, r7, pc}
 8007e20:	0801f570 	.word	0x0801f570

08007e24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e24:	b598      	push	{r3, r4, r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007e28:	f7ff ffd6 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	f7ff f9e3 	bl	80071f8 <LL_RCC_GetAPB2Prescaler>
 8007e32:	4603      	mov	r3, r0
 8007e34:	0adb      	lsrs	r3, r3, #11
 8007e36:	4a03      	ldr	r2, [pc, #12]	; (8007e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd98      	pop	{r3, r4, r7, pc}
 8007e44:	0801f570 	.word	0x0801f570

08007e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	091b      	lsrs	r3, r3, #4
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007e60:	f7ff f9b2 	bl	80071c8 <LL_RCC_GetAHB3Prescaler>
 8007e64:	4603      	mov	r3, r0
 8007e66:	091b      	lsrs	r3, r3, #4
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	0c9c      	lsrs	r4, r3, #18
 8007e84:	f7fe ff58 	bl	8006d38 <HAL_PWREx_GetVoltageRange>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 f80b 	bl	8007ea8 <RCC_SetFlashLatency>
 8007e92:	4603      	mov	r3, r0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd90      	pop	{r4, r7, pc}
 8007e9c:	0801f590 	.word	0x0801f590
 8007ea0:	0801f530 	.word	0x0801f530
 8007ea4:	431bde83 	.word	0x431bde83

08007ea8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08e      	sub	sp, #56	; 0x38
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007eb2:	4a3a      	ldr	r2, [pc, #232]	; (8007f9c <RCC_SetFlashLatency+0xf4>)
 8007eb4:	f107 0320 	add.w	r3, r7, #32
 8007eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ebc:	6018      	str	r0, [r3, #0]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007ec2:	4a37      	ldr	r2, [pc, #220]	; (8007fa0 <RCC_SetFlashLatency+0xf8>)
 8007ec4:	f107 0318 	add.w	r3, r7, #24
 8007ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ecc:	6018      	str	r0, [r3, #0]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007ed2:	4a34      	ldr	r2, [pc, #208]	; (8007fa4 <RCC_SetFlashLatency+0xfc>)
 8007ed4:	f107 030c 	add.w	r3, r7, #12
 8007ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007ede:	2300      	movs	r3, #0
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee8:	d11b      	bne.n	8007f22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	633b      	str	r3, [r7, #48]	; 0x30
 8007eee:	e014      	b.n	8007f1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	3338      	adds	r3, #56	; 0x38
 8007ef6:	443b      	add	r3, r7
 8007ef8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d807      	bhi.n	8007f14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	3338      	adds	r3, #56	; 0x38
 8007f0a:	443b      	add	r3, r7
 8007f0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f12:	e021      	b.n	8007f58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	3301      	adds	r3, #1
 8007f18:	633b      	str	r3, [r7, #48]	; 0x30
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d9e7      	bls.n	8007ef0 <RCC_SetFlashLatency+0x48>
 8007f20:	e01a      	b.n	8007f58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007f22:	2300      	movs	r3, #0
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f26:	e014      	b.n	8007f52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	3338      	adds	r3, #56	; 0x38
 8007f2e:	443b      	add	r3, r7
 8007f30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007f34:	461a      	mov	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d807      	bhi.n	8007f4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	3338      	adds	r3, #56	; 0x38
 8007f42:	443b      	add	r3, r7
 8007f44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f4a:	e005      	b.n	8007f58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	3301      	adds	r3, #1
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d9e7      	bls.n	8007f28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f58:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <RCC_SetFlashLatency+0x100>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f023 0207 	bic.w	r2, r3, #7
 8007f60:	4911      	ldr	r1, [pc, #68]	; (8007fa8 <RCC_SetFlashLatency+0x100>)
 8007f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f64:	4313      	orrs	r3, r2
 8007f66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f68:	f7fa fe6a 	bl	8002c40 <HAL_GetTick>
 8007f6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007f6e:	e008      	b.n	8007f82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007f70:	f7fa fe66 	bl	8002c40 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e007      	b.n	8007f92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <RCC_SetFlashLatency+0x100>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d1ef      	bne.n	8007f70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3738      	adds	r7, #56	; 0x38
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	0801ecb4 	.word	0x0801ecb4
 8007fa0:	0801ecbc 	.word	0x0801ecbc
 8007fa4:	0801ecc4 	.word	0x0801ecc4
 8007fa8:	58004000 	.word	0x58004000

08007fac <LL_RCC_LSE_IsReady>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d101      	bne.n	8007fc4 <LL_RCC_LSE_IsReady+0x18>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <LL_RCC_LSE_IsReady+0x1a>
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <LL_RCC_SetUSARTClockSource>:
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	401a      	ands	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <LL_RCC_SetI2SClockSource>:
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <LL_RCC_SetLPUARTClockSource>:
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008038:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800803c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr

08008052 <LL_RCC_SetI2CClockSource>:
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	091b      	lsrs	r3, r3, #4
 8008066:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800806a:	43db      	mvns	r3, r3
 800806c:	401a      	ands	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr

0800808a <LL_RCC_SetLPTIMClockSource>:
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008096:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	0c1b      	lsrs	r3, r3, #16
 800809e:	041b      	lsls	r3, r3, #16
 80080a0:	43db      	mvns	r3, r3
 80080a2:	401a      	ands	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	041b      	lsls	r3, r3, #16
 80080a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ac:	4313      	orrs	r3, r2
 80080ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <LL_RCC_SetRNGClockSource>:
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80080c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080cc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80080d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr

080080e6 <LL_RCC_SetADCClockSource>:
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80080ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <LL_RCC_SetRTCClockSource>:
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <LL_RCC_GetRTCClockSource>:
{
 800813a:	b480      	push	{r7}
 800813c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800813e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008146:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800814a:	4618      	mov	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <LL_RCC_ForceBackupDomainReset>:
{
 8008152:	b480      	push	{r7}
 8008154:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800816a:	bf00      	nop
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr

08008172 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800818a:	bf00      	nop
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
	...

08008194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80081a0:	2300      	movs	r3, #0
 80081a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80081a4:	2300      	movs	r3, #0
 80081a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d058      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80081b4:	f7fe fd7e 	bl	8006cb4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081b8:	f7fa fd42 	bl	8002c40 <HAL_GetTick>
 80081bc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80081be:	e009      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c0:	f7fa fd3e 	bl	8002c40 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d902      	bls.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	74fb      	strb	r3, [r7, #19]
        break;
 80081d2:	e006      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80081d4:	4b7b      	ldr	r3, [pc, #492]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e0:	d1ee      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80081e2:	7cfb      	ldrb	r3, [r7, #19]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d13c      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80081e8:	f7ff ffa7 	bl	800813a <LL_RCC_GetRTCClockSource>
 80081ec:	4602      	mov	r2, r0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d00f      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008202:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008204:	f7ff ffa5 	bl	8008152 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008208:	f7ff ffb3 	bl	8008172 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800820c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d014      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fa fd0e 	bl	8002c40 <HAL_GetTick>
 8008224:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008226:	e00b      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008228:	f7fa fd0a 	bl	8002c40 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	f241 3288 	movw	r2, #5000	; 0x1388
 8008236:	4293      	cmp	r3, r2
 8008238:	d902      	bls.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	74fb      	strb	r3, [r7, #19]
            break;
 800823e:	e004      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008240:	f7ff feb4 	bl	8007fac <LL_RCC_LSE_IsReady>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d1ee      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800824a:	7cfb      	ldrb	r3, [r7, #19]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d105      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff ff5b 	bl	8008110 <LL_RCC_SetRTCClockSource>
 800825a:	e004      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800825c:	7cfb      	ldrb	r3, [r7, #19]
 800825e:	74bb      	strb	r3, [r7, #18]
 8008260:	e001      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008262:	7cfb      	ldrb	r3, [r7, #19]
 8008264:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff fea9 	bl	8007fce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff fe9e 	bl	8007fce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fec0 	bl	8008028 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff fee6 	bl	800808a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fedb 	bl	800808a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff fed0 	bl	800808a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff fea9 	bl	8008052 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fe9e 	bl	8008052 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff fe93 	bl	8008052 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	d011      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fe5e 	bl	8007ffe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834a:	d107      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800834c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800835a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff fea5 	bl	80080bc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	2b00      	cmp	r3, #0
 8008378:	d107      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800837a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008388:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff fea3 	bl	80080e6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a8:	d107      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80083ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	58000400 	.word	0x58000400

080083c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d071      	beq.n	80084be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fa f872 	bl	80024d8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80083fc:	4b32      	ldr	r3, [pc, #200]	; (80084c8 <HAL_RTC_Init+0x100>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f003 0310 	and.w	r3, r3, #16
 8008404:	2b10      	cmp	r3, #16
 8008406:	d051      	beq.n	80084ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008408:	4b2f      	ldr	r3, [pc, #188]	; (80084c8 <HAL_RTC_Init+0x100>)
 800840a:	22ca      	movs	r2, #202	; 0xca
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <HAL_RTC_Init+0x100>)
 8008410:	2253      	movs	r2, #83	; 0x53
 8008412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa11 	bl	800883c <RTC_EnterInitMode>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d13f      	bne.n	80084a4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008424:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <HAL_RTC_Init+0x100>)
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	4a27      	ldr	r2, [pc, #156]	; (80084c8 <HAL_RTC_Init+0x100>)
 800842a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800842e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008432:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <HAL_RTC_Init+0x100>)
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6859      	ldr	r1, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	4319      	orrs	r1, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	430b      	orrs	r3, r1
 8008448:	491f      	ldr	r1, [pc, #124]	; (80084c8 <HAL_RTC_Init+0x100>)
 800844a:	4313      	orrs	r3, r2
 800844c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	491b      	ldr	r1, [pc, #108]	; (80084c8 <HAL_RTC_Init+0x100>)
 800845a:	4313      	orrs	r3, r2
 800845c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <HAL_RTC_Init+0x100>)
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	430b      	orrs	r3, r1
 8008470:	4915      	ldr	r1, [pc, #84]	; (80084c8 <HAL_RTC_Init+0x100>)
 8008472:	4313      	orrs	r3, r2
 8008474:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa14 	bl	80088a4 <RTC_ExitInitMode>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10e      	bne.n	80084a4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008486:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <HAL_RTC_Init+0x100>)
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a19      	ldr	r1, [r3, #32]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	4319      	orrs	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	430b      	orrs	r3, r1
 800849e:	490a      	ldr	r1, [pc, #40]	; (80084c8 <HAL_RTC_Init+0x100>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084a4:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <HAL_RTC_Init+0x100>)
 80084a6:	22ff      	movs	r2, #255	; 0xff
 80084a8:	625a      	str	r2, [r3, #36]	; 0x24
 80084aa:	e001      	b.n	80084b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40002800 	.word	0x40002800

080084cc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <HAL_RTC_SetAlarm_IT+0x1e>
 80084e6:	2302      	movs	r3, #2
 80084e8:	e0f3      	b.n	80086d2 <HAL_RTC_SetAlarm_IT+0x206>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80084fa:	4b78      	ldr	r3, [pc, #480]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008502:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850a:	d06a      	beq.n	80085e2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d13a      	bne.n	8008588 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008512:	4b72      	ldr	r3, [pc, #456]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	d102      	bne.n	8008524 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f9f5 	bl	8008920 <RTC_ByteToBcd2>
 8008536:	4603      	mov	r3, r0
 8008538:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f9ee 	bl	8008920 <RTC_ByteToBcd2>
 8008544:	4603      	mov	r3, r0
 8008546:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008548:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	789b      	ldrb	r3, [r3, #2]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f9e6 	bl	8008920 <RTC_ByteToBcd2>
 8008554:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008556:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	78db      	ldrb	r3, [r3, #3]
 800855e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008560:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f9d8 	bl	8008920 <RTC_ByteToBcd2>
 8008570:	4603      	mov	r3, r0
 8008572:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008574:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800857c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e02c      	b.n	80085e2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008590:	d00d      	beq.n	80085ae <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800859a:	d008      	beq.n	80085ae <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800859c:	4b4f      	ldr	r3, [pc, #316]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2200      	movs	r2, #0
 80085ac:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085ba:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085c0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	78db      	ldrb	r3, [r3, #3]
 80085c6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80085c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085d0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80085d2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80085d8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085e2:	4b3e      	ldr	r3, [pc, #248]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80085e4:	22ca      	movs	r2, #202	; 0xca
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24
 80085e8:	4b3c      	ldr	r3, [pc, #240]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80085ea:	2253      	movs	r2, #83	; 0x53
 80085ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f6:	d12c      	bne.n	8008652 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80085f8:	4b38      	ldr	r3, [pc, #224]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	4a37      	ldr	r2, [pc, #220]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80085fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008602:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008604:	4b35      	ldr	r3, [pc, #212]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008606:	2201      	movs	r2, #1
 8008608:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008610:	d107      	bne.n	8008622 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	4930      	ldr	r1, [pc, #192]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 800861c:	4313      	orrs	r3, r2
 800861e:	644b      	str	r3, [r1, #68]	; 0x44
 8008620:	e006      	b.n	8008630 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008622:	4a2e      	ldr	r2, [pc, #184]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008628:	4a2c      	ldr	r2, [pc, #176]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008630:	4a2a      	ldr	r2, [pc, #168]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	f043 0201 	orr.w	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008644:	4b25      	ldr	r3, [pc, #148]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4a24      	ldr	r2, [pc, #144]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 800864a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800864e:	6193      	str	r3, [r2, #24]
 8008650:	e02b      	b.n	80086aa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008652:	4b22      	ldr	r3, [pc, #136]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	4a21      	ldr	r2, [pc, #132]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008658:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800865c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800865e:	4b1f      	ldr	r3, [pc, #124]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008660:	2202      	movs	r2, #2
 8008662:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866a:	d107      	bne.n	800867c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4919      	ldr	r1, [pc, #100]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008676:	4313      	orrs	r3, r2
 8008678:	64cb      	str	r3, [r1, #76]	; 0x4c
 800867a:	e006      	b.n	800868a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800867c:	4a17      	ldr	r2, [pc, #92]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008682:	4a16      	ldr	r2, [pc, #88]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800868a:	4a14      	ldr	r2, [pc, #80]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	f043 0202 	orr.w	r2, r3, #2
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	4a0e      	ldr	r2, [pc, #56]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80086a4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80086a8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80086ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b0:	4a0b      	ldr	r2, [pc, #44]	; (80086e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80086b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ba:	4b08      	ldr	r3, [pc, #32]	; (80086dc <HAL_RTC_SetAlarm_IT+0x210>)
 80086bc:	22ff      	movs	r2, #255	; 0xff
 80086be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd90      	pop	{r4, r7, pc}
 80086da:	bf00      	nop
 80086dc:	40002800 	.word	0x40002800
 80086e0:	58000800 	.word	0x58000800

080086e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_RTC_DeactivateAlarm+0x18>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e048      	b.n	800878e <HAL_RTC_DeactivateAlarm+0xaa>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800870c:	4b22      	ldr	r3, [pc, #136]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 800870e:	22ca      	movs	r2, #202	; 0xca
 8008710:	625a      	str	r2, [r3, #36]	; 0x24
 8008712:	4b21      	ldr	r3, [pc, #132]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008714:	2253      	movs	r2, #83	; 0x53
 8008716:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871e:	d115      	bne.n	800874c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008720:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	4a1c      	ldr	r2, [pc, #112]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800872a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 800872e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008730:	4a19      	ldr	r2, [pc, #100]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008736:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	f023 0201 	bic.w	r2, r3, #1
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008744:	4b14      	ldr	r3, [pc, #80]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008746:	2201      	movs	r2, #1
 8008748:	65da      	str	r2, [r3, #92]	; 0x5c
 800874a:	e014      	b.n	8008776 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	4a11      	ldr	r2, [pc, #68]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008752:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008756:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008758:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 800875a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875c:	4a0e      	ldr	r2, [pc, #56]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 800875e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008762:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	f023 0202 	bic.w	r2, r3, #2
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008770:	4b09      	ldr	r3, [pc, #36]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008772:	2202      	movs	r2, #2
 8008774:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008776:	4b08      	ldr	r3, [pc, #32]	; (8008798 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008778:	22ff      	movs	r2, #255	; 0xff
 800877a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr
 8008798:	40002800 	.word	0x40002800

0800879c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80087a4:	4b11      	ldr	r3, [pc, #68]	; (80087ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80087a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	4013      	ands	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80087ba:	4b0c      	ldr	r3, [pc, #48]	; (80087ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80087bc:	2201      	movs	r2, #1
 80087be:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7fa fcc6 	bl	8003152 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80087d2:	2202      	movs	r2, #2
 80087d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f94a 	bl	8008a70 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40002800 	.word	0x40002800

080087f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <HAL_RTC_WaitForSynchro+0x48>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4a0e      	ldr	r2, [pc, #56]	; (8008838 <HAL_RTC_WaitForSynchro+0x48>)
 80087fe:	f023 0320 	bic.w	r3, r3, #32
 8008802:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008804:	f7fa fa1c 	bl	8002c40 <HAL_GetTick>
 8008808:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800880a:	e009      	b.n	8008820 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800880c:	f7fa fa18 	bl	8002c40 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800881a:	d901      	bls.n	8008820 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e006      	b.n	800882e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008820:	4b05      	ldr	r3, [pc, #20]	; (8008838 <HAL_RTC_WaitForSynchro+0x48>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0ef      	beq.n	800880c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	40002800 	.word	0x40002800

0800883c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008848:	4b15      	ldr	r3, [pc, #84]	; (80088a0 <RTC_EnterInitMode+0x64>)
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d120      	bne.n	8008896 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008854:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <RTC_EnterInitMode+0x64>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4a11      	ldr	r2, [pc, #68]	; (80088a0 <RTC_EnterInitMode+0x64>)
 800885a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008860:	f7fa f9ee 	bl	8002c40 <HAL_GetTick>
 8008864:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008866:	e00d      	b.n	8008884 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008868:	f7fa f9ea 	bl	8002c40 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008876:	d905      	bls.n	8008884 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2203      	movs	r2, #3
 8008880:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <RTC_EnterInitMode+0x64>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <RTC_EnterInitMode+0x5a>
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d1e8      	bne.n	8008868 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	40002800 	.word	0x40002800

080088a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80088b0:	4b1a      	ldr	r3, [pc, #104]	; (800891c <RTC_ExitInitMode+0x78>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4a19      	ldr	r2, [pc, #100]	; (800891c <RTC_ExitInitMode+0x78>)
 80088b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80088bc:	4b17      	ldr	r3, [pc, #92]	; (800891c <RTC_ExitInitMode+0x78>)
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10c      	bne.n	80088e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ff91 	bl	80087f0 <HAL_RTC_WaitForSynchro>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01e      	beq.n	8008912 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2203      	movs	r2, #3
 80088d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	73fb      	strb	r3, [r7, #15]
 80088e0:	e017      	b.n	8008912 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80088e2:	4b0e      	ldr	r3, [pc, #56]	; (800891c <RTC_ExitInitMode+0x78>)
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	4a0d      	ldr	r2, [pc, #52]	; (800891c <RTC_ExitInitMode+0x78>)
 80088e8:	f023 0320 	bic.w	r3, r3, #32
 80088ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff ff7e 	bl	80087f0 <HAL_RTC_WaitForSynchro>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2203      	movs	r2, #3
 80088fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <RTC_ExitInitMode+0x78>)
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	4a04      	ldr	r2, [pc, #16]	; (800891c <RTC_ExitInitMode+0x78>)
 800890c:	f043 0320 	orr.w	r3, r3, #32
 8008910:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40002800 	.word	0x40002800

08008920 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008932:	e005      	b.n	8008940 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	3b0a      	subs	r3, #10
 800893e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	2b09      	cmp	r3, #9
 8008944:	d8f6      	bhi.n	8008934 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	b2da      	uxtb	r2, r3
 800894e:	7afb      	ldrb	r3, [r7, #11]
 8008950:	4313      	orrs	r3, r2
 8008952:	b2db      	uxtb	r3, r3
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr
	...

08008960 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008972:	2302      	movs	r3, #2
 8008974:	e01f      	b.n	80089b6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008986:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008988:	22ca      	movs	r2, #202	; 0xca
 800898a:	625a      	str	r2, [r3, #36]	; 0x24
 800898c:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800898e:	2253      	movs	r2, #83	; 0x53
 8008990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	4a0a      	ldr	r2, [pc, #40]	; (80089c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008998:	f043 0320 	orr.w	r3, r3, #32
 800899c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800899e:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80089a0:	22ff      	movs	r2, #255	; 0xff
 80089a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr
 80089c0:	40002800 	.word	0x40002800

080089c4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_RTCEx_SetSSRU_IT+0x16>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e027      	b.n	8008a2a <HAL_RTCEx_SetSSRU_IT+0x66>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ea:	4b12      	ldr	r3, [pc, #72]	; (8008a34 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089ec:	22ca      	movs	r2, #202	; 0xca
 80089ee:	625a      	str	r2, [r3, #36]	; 0x24
 80089f0:	4b10      	ldr	r3, [pc, #64]	; (8008a34 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089f2:	2253      	movs	r2, #83	; 0x53
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	4a0e      	ldr	r2, [pc, #56]	; (8008a34 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a00:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008a02:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a08:	4a0b      	ldr	r2, [pc, #44]	; (8008a38 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a12:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr
 8008a34:	40002800 	.word	0x40002800
 8008a38:	58000800 	.word	0x58000800

08008a3c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008a52:	2240      	movs	r2, #64	; 0x40
 8008a54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fa fb85 	bl	8003166 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40002800 	.word	0x40002800

08008a70 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
	...

08008a84 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008a92:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	4000b100 	.word	0x4000b100

08008ab4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008abe:	4b07      	ldr	r3, [pc, #28]	; (8008adc <HAL_RTCEx_BKUPRead+0x28>)
 8008ac0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	4000b100 	.word	0x4000b100

08008ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e0c6      	b.n	8008c80 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d108      	bne.n	8008b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b02:	d009      	beq.n	8008b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	61da      	str	r2, [r3, #28]
 8008b0a:	e005      	b.n	8008b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7f9 fd7d 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b52:	d902      	bls.n	8008b5a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	e002      	b.n	8008b60 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008b68:	d007      	beq.n	8008b7a <HAL_SPI_Init+0x9a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b72:	d002      	beq.n	8008b7a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbc:	ea42 0103 	orr.w	r1, r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bd8:	d11b      	bne.n	8008c12 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bea:	d903      	bls.n	8008bf4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8008bf2:	e002      	b.n	8008bfa <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d107      	bne.n	8008c12 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	0c1b      	lsrs	r3, r3, #16
 8008c18:	f003 0204 	and.w	r2, r3, #4
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	431a      	orrs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c38:	ea42 0103 	orr.w	r1, r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c52:	d105      	bne.n	8008c60 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69da      	ldr	r2, [r3, #28]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d101      	bne.n	8008caa <HAL_SPI_Transmit+0x22>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e17a      	b.n	8008fa0 <HAL_SPI_Transmit+0x318>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cb2:	f7f9 ffc5 	bl	8002c40 <HAL_GetTick>
 8008cb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d002      	beq.n	8008cce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ccc:	e15f      	b.n	8008f8e <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <HAL_SPI_Transmit+0x52>
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cde:	e156      	b.n	8008f8e <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2203      	movs	r2, #3
 8008ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	88fa      	ldrh	r2, [r7, #6]
 8008cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2a:	d10f      	bne.n	8008d4c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d4a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d54:	d10f      	bne.n	8008d76 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d74:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d80:	2b40      	cmp	r3, #64	; 0x40
 8008d82:	d007      	beq.n	8008d94 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d9c:	d94b      	bls.n	8008e36 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SPI_Transmit+0x124>
 8008da6:	8afb      	ldrh	r3, [r7, #22]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d13e      	bne.n	8008e2a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	881a      	ldrh	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	1c9a      	adds	r2, r3, #2
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008dd0:	e02b      	b.n	8008e2a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d112      	bne.n	8008e06 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	881a      	ldrh	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	1c9a      	adds	r2, r3, #2
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e04:	e011      	b.n	8008e2a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e06:	f7f9 ff1b 	bl	8002c40 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d803      	bhi.n	8008e1e <HAL_SPI_Transmit+0x196>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d102      	bne.n	8008e24 <HAL_SPI_Transmit+0x19c>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e28:	e0b1      	b.n	8008f8e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1ce      	bne.n	8008dd2 <HAL_SPI_Transmit+0x14a>
 8008e34:	e07c      	b.n	8008f30 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <HAL_SPI_Transmit+0x1bc>
 8008e3e:	8afb      	ldrh	r3, [r7, #22]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d170      	bne.n	8008f26 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d912      	bls.n	8008e74 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	881a      	ldrh	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	1c9a      	adds	r2, r3, #2
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b02      	subs	r3, #2
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e72:	e058      	b.n	8008f26 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e9a:	e044      	b.n	8008f26 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d12b      	bne.n	8008f02 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d912      	bls.n	8008eda <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	881a      	ldrh	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	1c9a      	adds	r2, r3, #2
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b02      	subs	r3, #2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ed8:	e025      	b.n	8008f26 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f00:	e011      	b.n	8008f26 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f02:	f7f9 fe9d 	bl	8002c40 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d803      	bhi.n	8008f1a <HAL_SPI_Transmit+0x292>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d102      	bne.n	8008f20 <HAL_SPI_Transmit+0x298>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d102      	bne.n	8008f26 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f24:	e033      	b.n	8008f8e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1b5      	bne.n	8008e9c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f38:	d107      	bne.n	8008f4a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f48:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fe6e 	bl	8009c30 <SPI_EndRxTxTransaction>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	613b      	str	r3, [r7, #16]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	77fb      	strb	r3, [r7, #31]
 8008f8a:	e000      	b.n	8008f8e <HAL_SPI_Transmit+0x306>
  }

error:
 8008f8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08c      	sub	sp, #48	; 0x30
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fce:	d112      	bne.n	8008ff6 <HAL_SPI_Receive+0x4e>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10e      	bne.n	8008ff6 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f9c4 	bl	800937a <HAL_SPI_TransmitReceive>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	e1bd      	b.n	8009372 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_SPI_Receive+0x5c>
 8009000:	2302      	movs	r3, #2
 8009002:	e1b6      	b.n	8009372 <HAL_SPI_Receive+0x3ca>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800900c:	f7f9 fe18 	bl	8002c40 <HAL_GetTick>
 8009010:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b01      	cmp	r3, #1
 800901c:	d003      	beq.n	8009026 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800901e:	2302      	movs	r3, #2
 8009020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009024:	e19b      	b.n	800935e <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <HAL_SPI_Receive+0x8a>
 800902c:	88fb      	ldrh	r3, [r7, #6]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d103      	bne.n	800903a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009038:	e191      	b.n	800935e <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2204      	movs	r2, #4
 800903e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	88fa      	ldrh	r2, [r7, #6]
 8009052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009084:	d118      	bne.n	80090b8 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090a4:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090c0:	d908      	bls.n	80090d4 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090d0:	605a      	str	r2, [r3, #4]
 80090d2:	e007      	b.n	80090e4 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090e2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ec:	d10f      	bne.n	800910e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800910c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009118:	2b40      	cmp	r3, #64	; 0x40
 800911a:	d007      	beq.n	800912c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800912a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009134:	d869      	bhi.n	800920a <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009136:	e031      	b.n	800919c <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b01      	cmp	r3, #1
 8009144:	d117      	bne.n	8009176 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f103 020c 	add.w	r2, r3, #12
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	b2d2      	uxtb	r2, r2
 8009156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009174:	e012      	b.n	800919c <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009176:	f7f9 fd63 	bl	8002c40 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d803      	bhi.n	800918e <HAL_SPI_Receive+0x1e6>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d102      	bne.n	8009194 <HAL_SPI_Receive+0x1ec>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800919a:	e0e0      	b.n	800935e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1c7      	bne.n	8009138 <HAL_SPI_Receive+0x190>
 80091a8:	e035      	b.n	8009216 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d115      	bne.n	80091e4 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	b292      	uxth	r2, r2
 80091c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	1c9a      	adds	r2, r3, #2
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80091e2:	e012      	b.n	800920a <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091e4:	f7f9 fd2c 	bl	8002c40 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d803      	bhi.n	80091fc <HAL_SPI_Receive+0x254>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fa:	d102      	bne.n	8009202 <HAL_SPI_Receive+0x25a>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009208:	e0a9      	b.n	800935e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009210:	b29b      	uxth	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1c9      	bne.n	80091aa <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921e:	d178      	bne.n	8009312 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800922e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	2101      	movs	r1, #1
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 fb82 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800924c:	e087      	b.n	800935e <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009256:	d907      	bls.n	8009268 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	b292      	uxth	r2, r2
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	e008      	b.n	800927a <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f103 020c 	add.w	r2, r3, #12
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2201      	movs	r2, #1
 8009282:	2101      	movs	r1, #1
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 fb5d 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d009      	beq.n	80092a4 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009294:	f043 0202 	orr.w	r2, r3, #2
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80092a2:	e05c      	b.n	800935e <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80092ac:	d105      	bne.n	80092ba <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	e02b      	b.n	8009312 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	330c      	adds	r3, #12
 80092c0:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092ca:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092d4:	d11d      	bne.n	8009312 <HAL_SPI_Receive+0x36a>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d119      	bne.n	8009312 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2201      	movs	r2, #1
 80092e6:	2101      	movs	r1, #1
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fb2b 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d009      	beq.n	8009308 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f8:	f043 0202 	orr.w	r2, r3, #2
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009306:	e02a      	b.n	800935e <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009310:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009312:	6a3a      	ldr	r2, [r7, #32]
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fc32 	bl	8009b80 <SPI_EndRxTransaction>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	2b10      	cmp	r3, #16
 8009334:	d10a      	bne.n	800934c <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800933a:	f043 0202 	orr.w	r2, r3, #2
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800934a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800935a:	e000      	b.n	800935e <HAL_SPI_Receive+0x3b6>
  }

error :
 800935c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800936e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009372:	4618      	mov	r0, r3
 8009374:	3728      	adds	r7, #40	; 0x28
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b092      	sub	sp, #72	; 0x48
 800937e:	af02      	add	r7, sp, #8
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009390:	2301      	movs	r3, #1
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_SPI_TransmitReceive+0x2e>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e2c8      	b.n	800993a <HAL_SPI_TransmitReceive+0x5c0>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093b0:	f7f9 fc46 	bl	8002c40 <HAL_GetTick>
 80093b4:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80093c6:	887b      	ldrh	r3, [r7, #2]
 80093c8:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80093ca:	887b      	ldrh	r3, [r7, #2]
 80093cc:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00f      	beq.n	8009406 <HAL_SPI_TransmitReceive+0x8c>
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093ec:	d107      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x84>
 80093f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d003      	beq.n	8009406 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
 8009400:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009404:	e28f      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d005      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x9e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x9e>
 8009412:	887b      	ldrh	r3, [r7, #2]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800941e:	e282      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b04      	cmp	r3, #4
 800942a:	d003      	beq.n	8009434 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2205      	movs	r2, #5
 8009430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	887a      	ldrh	r2, [r7, #2]
 8009444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	887a      	ldrh	r2, [r7, #2]
 800944c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	887a      	ldrh	r2, [r7, #2]
 800945a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	887a      	ldrh	r2, [r7, #2]
 8009460:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009476:	d10f      	bne.n	8009498 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009496:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094a0:	d802      	bhi.n	80094a8 <HAL_SPI_TransmitReceive+0x12e>
 80094a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d908      	bls.n	80094ba <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	e007      	b.n	80094ca <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d4:	2b40      	cmp	r3, #64	; 0x40
 80094d6:	d007      	beq.n	80094e8 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094f0:	f240 80a4 	bls.w	800963c <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <HAL_SPI_TransmitReceive+0x18a>
 80094fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094fe:	2b01      	cmp	r3, #1
 8009500:	f040 808e 	bne.w	8009620 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	881a      	ldrh	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	1c9a      	adds	r2, r3, #2
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009528:	e07a      	b.n	8009620 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b02      	cmp	r3, #2
 8009536:	d13f      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x23e>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d03a      	beq.n	80095b8 <HAL_SPI_TransmitReceive+0x23e>
 8009542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009544:	2b01      	cmp	r3, #1
 8009546:	d137      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	881a      	ldrh	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009558:	1c9a      	adds	r2, r3, #2
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009562:	b29b      	uxth	r3, r3
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009574:	b29b      	uxth	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d11e      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x23e>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009582:	d119      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10c      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x22e>
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b00      	cmp	r3, #0
 8009596:	d007      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095a6:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095b6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d11c      	bne.n	8009600 <HAL_SPI_TransmitReceive+0x286>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d016      	beq.n	8009600 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	b292      	uxth	r2, r2
 80095de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	1c9a      	adds	r2, r3, #2
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095fc:	2301      	movs	r3, #1
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009600:	f7f9 fb1e 	bl	8002c40 <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800960c:	429a      	cmp	r2, r3
 800960e:	d807      	bhi.n	8009620 <HAL_SPI_TransmitReceive+0x2a6>
 8009610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d003      	beq.n	8009620 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800961e:	e182      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009624:	b29b      	uxth	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	f47f af7f 	bne.w	800952a <HAL_SPI_TransmitReceive+0x1b0>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	f47f af78 	bne.w	800952a <HAL_SPI_TransmitReceive+0x1b0>
 800963a:	e103      	b.n	8009844 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <HAL_SPI_TransmitReceive+0x2d2>
 8009644:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009646:	2b01      	cmp	r3, #1
 8009648:	f040 80ef 	bne.w	800982a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009650:	b29b      	uxth	r3, r3
 8009652:	2b01      	cmp	r3, #1
 8009654:	d912      	bls.n	800967c <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	881a      	ldrh	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	1c9a      	adds	r2, r3, #2
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009670:	b29b      	uxth	r3, r3
 8009672:	3b02      	subs	r3, #2
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	87da      	strh	r2, [r3, #62]	; 0x3e
 800967a:	e0d6      	b.n	800982a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	330c      	adds	r3, #12
 8009686:	7812      	ldrb	r2, [r2, #0]
 8009688:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009698:	b29b      	uxth	r3, r3
 800969a:	3b01      	subs	r3, #1
 800969c:	b29a      	uxth	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a2:	e0c2      	b.n	800982a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d158      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x3ea>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d053      	beq.n	8009764 <HAL_SPI_TransmitReceive+0x3ea>
 80096bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d150      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d912      	bls.n	80096f2 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	881a      	ldrh	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	1c9a      	adds	r2, r3, #2
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b02      	subs	r3, #2
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096f0:	e012      	b.n	8009718 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	330c      	adds	r3, #12
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800970e:	b29b      	uxth	r3, r3
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d11e      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x3ea>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800972e:	d119      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10c      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x3da>
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b00      	cmp	r3, #0
 8009742:	d007      	beq.n	8009754 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009752:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009762:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b01      	cmp	r3, #1
 8009770:	d148      	bne.n	8009804 <HAL_SPI_TransmitReceive+0x48a>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d042      	beq.n	8009804 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009784:	b29b      	uxth	r3, r3
 8009786:	2b01      	cmp	r3, #1
 8009788:	d923      	bls.n	80097d2 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009794:	b292      	uxth	r2, r2
 8009796:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	1c9a      	adds	r2, r3, #2
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b02      	subs	r3, #2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d81f      	bhi.n	8009800 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	e016      	b.n	8009800 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f103 020c 	add.w	r2, r3, #12
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	7812      	ldrb	r2, [r2, #0]
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009800:	2301      	movs	r3, #1
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009804:	f7f9 fa1c 	bl	8002c40 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009810:	429a      	cmp	r2, r3
 8009812:	d803      	bhi.n	800981c <HAL_SPI_TransmitReceive+0x4a2>
 8009814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d102      	bne.n	8009822 <HAL_SPI_TransmitReceive+0x4a8>
 800981c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009828:	e07d      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	f47f af37 	bne.w	80096a4 <HAL_SPI_TransmitReceive+0x32a>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	f47f af30 	bne.w	80096a4 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800984c:	d146      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009854:	2201      	movs	r2, #1
 8009856:	2101      	movs	r1, #1
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f873 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d009      	beq.n	8009878 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009868:	f043 0202 	orr.w	r2, r3, #2
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8009876:	e056      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009880:	d105      	bne.n	800988e <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	e026      	b.n	80098dc <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	330c      	adds	r3, #12
 8009894:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800989e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d119      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ae:	2201      	movs	r2, #1
 80098b0:	2101      	movs	r1, #1
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f846 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d009      	beq.n	80098d2 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098c2:	f043 0202 	orr.w	r2, r3, #2
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 80098d0:	e029      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80098da:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0310 	and.w	r3, r3, #16
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d10d      	bne.n	8009906 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ee:	f043 0202 	orr.w	r2, r3, #2
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80098fe:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009908:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f990 	bl	8009c30 <SPI_EndRxTxTransaction>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d006      	beq.n	8009924 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2220      	movs	r2, #32
 8009920:	661a      	str	r2, [r3, #96]	; 0x60
 8009922:	e000      	b.n	8009926 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009924:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009936:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800993a:	4618      	mov	r0, r3
 800993c:	3740      	adds	r7, #64	; 0x40
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	603b      	str	r3, [r7, #0]
 8009950:	4613      	mov	r3, r2
 8009952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009954:	f7f9 f974 	bl	8002c40 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	4413      	add	r3, r2
 8009962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009964:	f7f9 f96c 	bl	8002c40 <HAL_GetTick>
 8009968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800996a:	4b39      	ldr	r3, [pc, #228]	; (8009a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	015b      	lsls	r3, r3, #5
 8009970:	0d1b      	lsrs	r3, r3, #20
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	fb02 f303 	mul.w	r3, r2, r3
 8009978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800997a:	e054      	b.n	8009a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009982:	d050      	beq.n	8009a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009984:	f7f9 f95c 	bl	8002c40 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	429a      	cmp	r2, r3
 8009992:	d902      	bls.n	800999a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d13d      	bne.n	8009a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099b2:	d111      	bne.n	80099d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099bc:	d004      	beq.n	80099c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c6:	d107      	bne.n	80099d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099e0:	d10f      	bne.n	8009a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e017      	b.n	8009a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4013      	ands	r3, r2
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	bf0c      	ite	eq
 8009a36:	2301      	moveq	r3, #1
 8009a38:	2300      	movne	r3, #0
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d19b      	bne.n	800997c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	2000000c 	.word	0x2000000c

08009a54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08a      	sub	sp, #40	; 0x28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a66:	f7f9 f8eb 	bl	8002c40 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6e:	1a9b      	subs	r3, r3, r2
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	4413      	add	r3, r2
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009a76:	f7f9 f8e3 	bl	8002c40 <HAL_GetTick>
 8009a7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a84:	4b3d      	ldr	r3, [pc, #244]	; (8009b7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	00da      	lsls	r2, r3, #3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	0d1b      	lsrs	r3, r3, #20
 8009a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a96:	fb02 f303 	mul.w	r3, r2, r3
 8009a9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a9c:	e060      	b.n	8009b60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009aa4:	d107      	bne.n	8009ab6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d104      	bne.n	8009ab6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d050      	beq.n	8009b60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009abe:	f7f9 f8bf 	bl	8002c40 <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d902      	bls.n	8009ad4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d13d      	bne.n	8009b50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ae2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aec:	d111      	bne.n	8009b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af6:	d004      	beq.n	8009b02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b00:	d107      	bne.n	8009b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b1a:	d10f      	bne.n	8009b3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e010      	b.n	8009b72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d196      	bne.n	8009a9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3728      	adds	r7, #40	; 0x28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	2000000c 	.word	0x2000000c

08009b80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b94:	d111      	bne.n	8009bba <SPI_EndRxTransaction+0x3a>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9e:	d004      	beq.n	8009baa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba8:	d107      	bne.n	8009bba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2180      	movs	r1, #128	; 0x80
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff febd 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd4:	f043 0220 	orr.w	r2, r3, #32
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e023      	b.n	8009c28 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009be8:	d11d      	bne.n	8009c26 <SPI_EndRxTransaction+0xa6>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bf2:	d004      	beq.n	8009bfe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bfc:	d113      	bne.n	8009c26 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff ff22 	bl	8009a54 <SPI_WaitFifoStateUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d007      	beq.n	8009c26 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c1a:	f043 0220 	orr.w	r2, r3, #32
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e000      	b.n	8009c28 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff ff03 	bl	8009a54 <SPI_WaitFifoStateUntilTimeout>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d007      	beq.n	8009c64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c58:	f043 0220 	orr.w	r2, r3, #32
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e027      	b.n	8009cb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2180      	movs	r1, #128	; 0x80
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff fe68 	bl	8009944 <SPI_WaitFlagStateUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d007      	beq.n	8009c8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c7e:	f043 0220 	orr.w	r2, r3, #32
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e014      	b.n	8009cb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff fedc 	bl	8009a54 <SPI_WaitFifoStateUntilTimeout>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d007      	beq.n	8009cb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ca6:	f043 0220 	orr.w	r2, r3, #32
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e000      	b.n	8009cb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <LL_PWR_SetRadioBusyTrigger>:
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ccc:	4904      	ldr	r1, [pc, #16]	; (8009ce0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	608b      	str	r3, [r1, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bc80      	pop	{r7}
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	58000400 	.word	0x58000400

08009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009ce8:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cee:	4a04      	ldr	r2, [pc, #16]	; (8009d00 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009cf8:	bf00      	nop
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr
 8009d00:	58000400 	.word	0x58000400

08009d04 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d0e:	4a04      	ldr	r2, [pc, #16]	; (8009d20 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d18:	bf00      	nop
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bc80      	pop	{r7}
 8009d1e:	4770      	bx	lr
 8009d20:	58000400 	.word	0x58000400

08009d24 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d2e:	619a      	str	r2, [r3, #24]
}
 8009d30:	bf00      	nop
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bc80      	pop	{r7}
 8009d36:	4770      	bx	lr
 8009d38:	58000400 	.word	0x58000400

08009d3c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009d40:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d101      	bne.n	8009d50 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e000      	b.n	8009d52 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	58000400 	.word	0x58000400

08009d60 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009d64:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d101      	bne.n	8009d74 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bc80      	pop	{r7}
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	58000400 	.word	0x58000400

08009d84 <LL_RCC_RF_DisableReset>:
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009d9c:	bf00      	nop
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr

08009da4 <LL_RCC_IsRFUnderReset>:
{
 8009da4:	b480      	push	{r7}
 8009da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db8:	d101      	bne.n	8009dbe <LL_RCC_IsRFUnderReset+0x1a>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <LL_RCC_IsRFUnderReset+0x1c>
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr

08009dc8 <LL_EXTI_EnableIT_32_63>:
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <LL_EXTI_EnableIT_32_63+0x24>)
 8009dd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009dd6:	4905      	ldr	r1, [pc, #20]	; (8009dec <LL_EXTI_EnableIT_32_63+0x24>)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bc80      	pop	{r7}
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	58000800 	.word	0x58000800

08009df0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]
    return status;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	e052      	b.n	8009eac <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	799b      	ldrb	r3, [r3, #6]
 8009e0e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <HAL_SUBGHZ_Init+0x2c>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d109      	bne.n	8009e30 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7f8 fd60 	bl	80028e8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009e28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e2c:	f7ff ffcc 	bl	8009dc8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d126      	bne.n	8009e84 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2202      	movs	r2, #2
 8009e3a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009e3c:	f7ff ffa2 	bl	8009d84 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e40:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <HAL_SUBGHZ_Init+0xc4>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	1a9b      	subs	r3, r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	0cdb      	lsrs	r3, r3, #19
 8009e4e:	2264      	movs	r2, #100	; 0x64
 8009e50:	fb02 f303 	mul.w	r3, r2, r3
 8009e54:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	609a      	str	r2, [r3, #8]
        break;
 8009e66:	e007      	b.n	8009e78 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009e6e:	f7ff ff99 	bl	8009da4 <LL_RCC_IsRFUnderReset>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1ee      	bne.n	8009e56 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009e78:	f7ff ff34 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009e7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e80:	f7ff ff1c 	bl	8009cbc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009e84:	f7ff ff4e 	bl	8009d24 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 faac 	bl	800a3f0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	719a      	strb	r2, [r3, #6]

  return status;
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	2000000c 	.word	0x2000000c

08009eb8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	817b      	strh	r3, [r7, #10]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	799b      	ldrb	r3, [r3, #6]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d14a      	bne.n	8009f6c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	795b      	ldrb	r3, [r3, #5]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e045      	b.n	8009f6e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2202      	movs	r2, #2
 8009eec:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 fb4c 	bl	800a58c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ef4:	f7ff ff06 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009ef8:	210d      	movs	r1, #13
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fa98 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009f00:	897b      	ldrh	r3, [r7, #10]
 8009f02:	0a1b      	lsrs	r3, r3, #8
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fa90 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f10:	897b      	ldrh	r3, [r7, #10]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 fa8a 	bl	800a430 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	82bb      	strh	r3, [r7, #20]
 8009f20:	e00a      	b.n	8009f38 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f22:	8abb      	ldrh	r3, [r7, #20]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	4413      	add	r3, r2
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 fa7f 	bl	800a430 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f32:	8abb      	ldrh	r3, [r7, #20]
 8009f34:	3301      	adds	r3, #1
 8009f36:	82bb      	strh	r3, [r7, #20]
 8009f38:	8aba      	ldrh	r2, [r7, #20]
 8009f3a:	893b      	ldrh	r3, [r7, #8]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d3f0      	bcc.n	8009f22 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f40:	f7ff fed0 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 fb45 	bl	800a5d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e001      	b.n	8009f5c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	715a      	strb	r2, [r3, #5]

    return status;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	e000      	b.n	8009f6e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009f6c:	2302      	movs	r3, #2
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3718      	adds	r7, #24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b088      	sub	sp, #32
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	461a      	mov	r2, r3
 8009f82:	460b      	mov	r3, r1
 8009f84:	817b      	strh	r3, [r7, #10]
 8009f86:	4613      	mov	r3, r2
 8009f88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	799b      	ldrb	r3, [r3, #6]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d14a      	bne.n	800a02e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	795b      	ldrb	r3, [r3, #5]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e045      	b.n	800a030 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 faee 	bl	800a58c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fb0:	f7ff fea8 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009fb4:	211d      	movs	r1, #29
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f000 fa3a 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009fbc:	897b      	ldrh	r3, [r7, #10]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 fa32 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009fcc:	897b      	ldrh	r3, [r7, #10]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fa2c 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fa28 	bl	800a430 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	82fb      	strh	r3, [r7, #22]
 8009fe4:	e009      	b.n	8009ffa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009fe6:	69b9      	ldr	r1, [r7, #24]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 fa77 	bl	800a4dc <SUBGHZSPI_Receive>
      pData++;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009ff4:	8afb      	ldrh	r3, [r7, #22]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	82fb      	strh	r3, [r7, #22]
 8009ffa:	8afa      	ldrh	r2, [r7, #22]
 8009ffc:	893b      	ldrh	r3, [r7, #8]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d3f1      	bcc.n	8009fe6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a002:	f7ff fe6f 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fae4 	bl	800a5d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	77fb      	strb	r3, [r7, #31]
 800a018:	e001      	b.n	800a01e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2201      	movs	r2, #1
 800a022:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	715a      	strb	r2, [r3, #5]

    return status;
 800a02a:	7ffb      	ldrb	r3, [r7, #31]
 800a02c:	e000      	b.n	800a030 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a02e:	2302      	movs	r3, #2
  }
}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	461a      	mov	r2, r3
 800a044:	460b      	mov	r3, r1
 800a046:	72fb      	strb	r3, [r7, #11]
 800a048:	4613      	mov	r3, r2
 800a04a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	799b      	ldrb	r3, [r3, #6]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	d14a      	bne.n	800a0ec <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	795b      	ldrb	r3, [r3, #5]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a05e:	2302      	movs	r3, #2
 800a060:	e045      	b.n	800a0ee <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2201      	movs	r2, #1
 800a066:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fa8f 	bl	800a58c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	2b84      	cmp	r3, #132	; 0x84
 800a072:	d002      	beq.n	800a07a <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	2b94      	cmp	r3, #148	; 0x94
 800a078:	d103      	bne.n	800a082 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	711a      	strb	r2, [r3, #4]
 800a080:	e002      	b.n	800a088 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a088:	f7ff fe3c 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a08c:	7afb      	ldrb	r3, [r7, #11]
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f9cd 	bl	800a430 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a096:	2300      	movs	r3, #0
 800a098:	82bb      	strh	r3, [r7, #20]
 800a09a:	e00a      	b.n	800a0b2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a09c:	8abb      	ldrh	r3, [r7, #20]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f9c2 	bl	800a430 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a0ac:	8abb      	ldrh	r3, [r7, #20]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	82bb      	strh	r3, [r7, #20]
 800a0b2:	8aba      	ldrh	r2, [r7, #20]
 800a0b4:	893b      	ldrh	r3, [r7, #8]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d3f0      	bcc.n	800a09c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a0ba:	f7ff fe13 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	2b84      	cmp	r3, #132	; 0x84
 800a0c2:	d002      	beq.n	800a0ca <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 fa85 	bl	800a5d4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	75fb      	strb	r3, [r7, #23]
 800a0d6:	e001      	b.n	800a0dc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	715a      	strb	r2, [r3, #5]

    return status;
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	e000      	b.n	800a0ee <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a0ec:	2302      	movs	r3, #2
  }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b088      	sub	sp, #32
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	461a      	mov	r2, r3
 800a102:	460b      	mov	r3, r1
 800a104:	72fb      	strb	r3, [r7, #11]
 800a106:	4613      	mov	r3, r2
 800a108:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	799b      	ldrb	r3, [r3, #6]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d13d      	bne.n	800a194 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	795b      	ldrb	r3, [r3, #5]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a120:	2302      	movs	r3, #2
 800a122:	e038      	b.n	800a196 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2201      	movs	r2, #1
 800a128:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 fa2e 	bl	800a58c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a130:	f7ff fde8 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	4619      	mov	r1, r3
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f979 	bl	800a430 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a13e:	2100      	movs	r1, #0
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f975 	bl	800a430 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a146:	2300      	movs	r3, #0
 800a148:	82fb      	strh	r3, [r7, #22]
 800a14a:	e009      	b.n	800a160 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a14c:	69b9      	ldr	r1, [r7, #24]
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 f9c4 	bl	800a4dc <SUBGHZSPI_Receive>
      pData++;
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	3301      	adds	r3, #1
 800a158:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a15a:	8afb      	ldrh	r3, [r7, #22]
 800a15c:	3301      	adds	r3, #1
 800a15e:	82fb      	strh	r3, [r7, #22]
 800a160:	8afa      	ldrh	r2, [r7, #22]
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	429a      	cmp	r2, r3
 800a166:	d3f1      	bcc.n	800a14c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a168:	f7ff fdbc 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 fa31 	bl	800a5d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	77fb      	strb	r3, [r7, #31]
 800a17e:	e001      	b.n	800a184 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2201      	movs	r2, #1
 800a188:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	715a      	strb	r2, [r3, #5]

    return status;
 800a190:	7ffb      	ldrb	r3, [r7, #31]
 800a192:	e000      	b.n	800a196 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a194:	2302      	movs	r3, #2
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3720      	adds	r7, #32
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b086      	sub	sp, #24
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	72fb      	strb	r3, [r7, #11]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	799b      	ldrb	r3, [r3, #6]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d13e      	bne.n	800a23a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	795b      	ldrb	r3, [r3, #5]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e039      	b.n	800a23c <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 f9dc 	bl	800a58c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a1d4:	f7ff fd96 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a1d8:	210e      	movs	r1, #14
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 f928 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a1e0:	7afb      	ldrb	r3, [r7, #11]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f923 	bl	800a430 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	82bb      	strh	r3, [r7, #20]
 800a1ee:	e00a      	b.n	800a206 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a1f0:	8abb      	ldrh	r3, [r7, #20]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 f918 	bl	800a430 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a200:	8abb      	ldrh	r3, [r7, #20]
 800a202:	3301      	adds	r3, #1
 800a204:	82bb      	strh	r3, [r7, #20]
 800a206:	8aba      	ldrh	r2, [r7, #20]
 800a208:	893b      	ldrh	r3, [r7, #8]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d3f0      	bcc.n	800a1f0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a20e:	f7ff fd69 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f9de 	bl	800a5d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	75fb      	strb	r3, [r7, #23]
 800a224:	e001      	b.n	800a22a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2201      	movs	r2, #1
 800a22e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	715a      	strb	r2, [r3, #5]

    return status;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	e000      	b.n	800a23c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a23a:	2302      	movs	r3, #2
  }
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	461a      	mov	r2, r3
 800a250:	460b      	mov	r3, r1
 800a252:	72fb      	strb	r3, [r7, #11]
 800a254:	4613      	mov	r3, r2
 800a256:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	799b      	ldrb	r3, [r3, #6]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b01      	cmp	r3, #1
 800a264:	d141      	bne.n	800a2ea <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	795b      	ldrb	r3, [r3, #5]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a26e:	2302      	movs	r3, #2
 800a270:	e03c      	b.n	800a2ec <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f987 	bl	800a58c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a27e:	f7ff fd41 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a282:	211e      	movs	r1, #30
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 f8d3 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	4619      	mov	r1, r3
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 f8ce 	bl	800a430 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a294:	2100      	movs	r1, #0
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 f8ca 	bl	800a430 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a29c:	2300      	movs	r3, #0
 800a29e:	82fb      	strh	r3, [r7, #22]
 800a2a0:	e009      	b.n	800a2b6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a2a2:	69b9      	ldr	r1, [r7, #24]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 f919 	bl	800a4dc <SUBGHZSPI_Receive>
      pData++;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a2b0:	8afb      	ldrh	r3, [r7, #22]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	82fb      	strh	r3, [r7, #22]
 800a2b6:	8afa      	ldrh	r2, [r7, #22]
 800a2b8:	893b      	ldrh	r3, [r7, #8]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d3f1      	bcc.n	800a2a2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2be:	f7ff fd11 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f986 	bl	800a5d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	e001      	b.n	800a2da <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	715a      	strb	r2, [r3, #5]

    return status;
 800a2e6:	7ffb      	ldrb	r3, [r7, #31]
 800a2e8:	e000      	b.n	800a2ec <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a2ea:	2302      	movs	r3, #2
  }
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a300:	f107 020c 	add.w	r2, r7, #12
 800a304:	2302      	movs	r3, #2
 800a306:	2112      	movs	r1, #18
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff fef4 	bl	800a0f6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a30e:	7b3b      	ldrb	r3, [r7, #12]
 800a310:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a312:	89fb      	ldrh	r3, [r7, #14]
 800a314:	021b      	lsls	r3, r3, #8
 800a316:	b21a      	sxth	r2, r3
 800a318:	7b7b      	ldrb	r3, [r7, #13]
 800a31a:	b21b      	sxth	r3, r3
 800a31c:	4313      	orrs	r3, r2
 800a31e:	b21b      	sxth	r3, r3
 800a320:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a322:	f107 020c 	add.w	r2, r7, #12
 800a326:	2302      	movs	r3, #2
 800a328:	2102      	movs	r1, #2
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff fe84 	bl	800a038 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a330:	89fb      	ldrh	r3, [r7, #14]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f012 fe48 	bl	801cfd0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a340:	89fb      	ldrh	r3, [r7, #14]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f012 fe4e 	bl	801cfec <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a350:	89fb      	ldrh	r3, [r7, #14]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f012 fe9e 	bl	801d09c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a360:	89fb      	ldrh	r3, [r7, #14]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f012 fea4 	bl	801d0b8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	f003 0310 	and.w	r3, r3, #16
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f012 feaa 	bl	801d0d4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a380:	89fb      	ldrh	r3, [r7, #14]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f012 fe78 	bl	801d080 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a390:	89fb      	ldrh	r3, [r7, #14]
 800a392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f012 fe34 	bl	801d008 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a3a0:	89fb      	ldrh	r3, [r7, #14]
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00d      	beq.n	800a3c6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a3aa:	89fb      	ldrh	r3, [r7, #14]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f012 fe34 	bl	801d024 <HAL_SUBGHZ_CADStatusCallback>
 800a3bc:	e003      	b.n	800a3c6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a3be:	2100      	movs	r1, #0
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f012 fe2f 	bl	801d024 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a3c6:	89fb      	ldrh	r3, [r7, #14]
 800a3c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f012 fe45 	bl	801d060 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a3d6:	89fb      	ldrh	r3, [r7, #14]
 800a3d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f012 fe85 	bl	801d0f0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a3f8:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <SUBGHZSPI_Init+0x3c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a0b      	ldr	r2, [pc, #44]	; (800a42c <SUBGHZSPI_Init+0x3c>)
 800a3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a402:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a404:	4a09      	ldr	r2, [pc, #36]	; (800a42c <SUBGHZSPI_Init+0x3c>)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a40c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a40e:	4b07      	ldr	r3, [pc, #28]	; (800a42c <SUBGHZSPI_Init+0x3c>)
 800a410:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a414:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a416:	4b05      	ldr	r3, [pc, #20]	; (800a42c <SUBGHZSPI_Init+0x3c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a04      	ldr	r2, [pc, #16]	; (800a42c <SUBGHZSPI_Init+0x3c>)
 800a41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a420:	6013      	str	r3, [r2, #0]
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	bc80      	pop	{r7}
 800a42a:	4770      	bx	lr
 800a42c:	58010000 	.word	0x58010000

0800a430 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a440:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <SUBGHZSPI_Transmit+0xa0>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	1a9b      	subs	r3, r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	0cdb      	lsrs	r3, r3, #19
 800a44e:	2264      	movs	r2, #100	; 0x64
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	609a      	str	r2, [r3, #8]
      break;
 800a466:	e008      	b.n	800a47a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a46e:	4b19      	ldr	r3, [pc, #100]	; (800a4d4 <SUBGHZSPI_Transmit+0xa4>)
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b02      	cmp	r3, #2
 800a478:	d1ed      	bne.n	800a456 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a47a:	4b17      	ldr	r3, [pc, #92]	; (800a4d8 <SUBGHZSPI_Transmit+0xa8>)
 800a47c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	78fa      	ldrb	r2, [r7, #3]
 800a482:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a484:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <SUBGHZSPI_Transmit+0xa0>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	4613      	mov	r3, r2
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	0cdb      	lsrs	r3, r3, #19
 800a492:	2264      	movs	r2, #100	; 0x64
 800a494:	fb02 f303 	mul.w	r3, r2, r3
 800a498:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d105      	bne.n	800a4ac <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	609a      	str	r2, [r3, #8]
      break;
 800a4aa:	e008      	b.n	800a4be <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a4b2:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <SUBGHZSPI_Transmit+0xa4>)
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d1ed      	bne.n	800a49a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <SUBGHZSPI_Transmit+0xa4>)
 800a4c0:	68db      	ldr	r3, [r3, #12]

  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2000000c 	.word	0x2000000c
 800a4d4:	58010000 	.word	0x58010000
 800a4d8:	5801000c 	.word	0x5801000c

0800a4dc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a4ea:	4b25      	ldr	r3, [pc, #148]	; (800a580 <SUBGHZSPI_Receive+0xa4>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	00db      	lsls	r3, r3, #3
 800a4f2:	1a9b      	subs	r3, r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	0cdb      	lsrs	r3, r3, #19
 800a4f8:	2264      	movs	r2, #100	; 0x64
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	609a      	str	r2, [r3, #8]
      break;
 800a510:	e008      	b.n	800a524 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3b01      	subs	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <SUBGHZSPI_Receive+0xa8>)
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b02      	cmp	r3, #2
 800a522:	d1ed      	bne.n	800a500 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a524:	4b18      	ldr	r3, [pc, #96]	; (800a588 <SUBGHZSPI_Receive+0xac>)
 800a526:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	22ff      	movs	r2, #255	; 0xff
 800a52c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <SUBGHZSPI_Receive+0xa4>)
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	4613      	mov	r3, r2
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	0cdb      	lsrs	r3, r3, #19
 800a53c:	2264      	movs	r2, #100	; 0x64
 800a53e:	fb02 f303 	mul.w	r3, r2, r3
 800a542:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	609a      	str	r2, [r3, #8]
      break;
 800a554:	e008      	b.n	800a568 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3b01      	subs	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <SUBGHZSPI_Receive+0xa8>)
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b01      	cmp	r3, #1
 800a566:	d1ed      	bne.n	800a544 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <SUBGHZSPI_Receive+0xa8>)
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	701a      	strb	r2, [r3, #0]

  return status;
 800a572:	7dfb      	ldrb	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	371c      	adds	r7, #28
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc80      	pop	{r7}
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	2000000c 	.word	0x2000000c
 800a584:	58010000 	.word	0x58010000
 800a588:	5801000c 	.word	0x5801000c

0800a58c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	791b      	ldrb	r3, [r3, #4]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d111      	bne.n	800a5c0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a59c:	4b0c      	ldr	r3, [pc, #48]	; (800a5d0 <SUBGHZ_CheckDeviceReady+0x44>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	4413      	add	r3, r2
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	0c1b      	lsrs	r3, r3, #16
 800a5aa:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a5ac:	f7ff fbaa 	bl	8009d04 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1f9      	bne.n	800a5b0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a5bc:	f7ff fb92 	bl	8009ce4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f807 	bl	800a5d4 <SUBGHZ_WaitOnBusy>
 800a5c6:	4603      	mov	r3, r0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	2000000c 	.word	0x2000000c

0800a5d4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a5e0:	4b12      	ldr	r3, [pc, #72]	; (800a62c <SUBGHZ_WaitOnBusy+0x58>)
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	4413      	add	r3, r2
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	0d1b      	lsrs	r3, r3, #20
 800a5ee:	2264      	movs	r2, #100	; 0x64
 800a5f0:	fb02 f303 	mul.w	r3, r2, r3
 800a5f4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a5f6:	f7ff fbb3 	bl	8009d60 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a5fa:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d105      	bne.n	800a60e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2202      	movs	r2, #2
 800a60a:	609a      	str	r2, [r3, #8]
      break;
 800a60c:	e009      	b.n	800a622 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3b01      	subs	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a614:	f7ff fb92 	bl	8009d3c <LL_PWR_IsActiveFlag_RFBUSYS>
 800a618:	4602      	mov	r2, r0
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	4013      	ands	r3, r2
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d0e9      	beq.n	800a5f6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2000000c 	.word	0x2000000c

0800a630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e049      	b.n	800a6d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7f8 fbee 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4619      	mov	r1, r3
 800a66e:	4610      	mov	r0, r2
 800a670:	f000 f9c6 	bl	800aa00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d001      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e036      	b.n	800a766 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a16      	ldr	r2, [pc, #88]	; (800a770 <HAL_TIM_Base_Start_IT+0x90>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d004      	beq.n	800a724 <HAL_TIM_Base_Start_IT+0x44>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a722:	d115      	bne.n	800a750 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689a      	ldr	r2, [r3, #8]
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <HAL_TIM_Base_Start_IT+0x94>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b06      	cmp	r3, #6
 800a734:	d015      	beq.n	800a762 <HAL_TIM_Base_Start_IT+0x82>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a73c:	d011      	beq.n	800a762 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f042 0201 	orr.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74e:	e008      	b.n	800a762 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 0201 	orr.w	r2, r2, #1
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	e000      	b.n	800a764 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bc80      	pop	{r7}
 800a76e:	4770      	bx	lr
 800a770:	40012c00 	.word	0x40012c00
 800a774:	00010007 	.word	0x00010007

0800a778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d122      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d11b      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f06f 0202 	mvn.w	r2, #2
 800a7a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	f003 0303 	and.w	r3, r3, #3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f904 	bl	800a9c8 <HAL_TIM_IC_CaptureCallback>
 800a7c0:	e005      	b.n	800a7ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f8f7 	bl	800a9b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f906 	bl	800a9da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f003 0304 	and.w	r3, r3, #4
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d122      	bne.n	800a828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d11b      	bne.n	800a828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f06f 0204 	mvn.w	r2, #4
 800a7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8da 	bl	800a9c8 <HAL_TIM_IC_CaptureCallback>
 800a814:	e005      	b.n	800a822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f8cd 	bl	800a9b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f8dc 	bl	800a9da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	f003 0308 	and.w	r3, r3, #8
 800a832:	2b08      	cmp	r3, #8
 800a834:	d122      	bne.n	800a87c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b08      	cmp	r3, #8
 800a842:	d11b      	bne.n	800a87c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f06f 0208 	mvn.w	r2, #8
 800a84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2204      	movs	r2, #4
 800a852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f003 0303 	and.w	r3, r3, #3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f8b0 	bl	800a9c8 <HAL_TIM_IC_CaptureCallback>
 800a868:	e005      	b.n	800a876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f8a3 	bl	800a9b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f8b2 	bl	800a9da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f003 0310 	and.w	r3, r3, #16
 800a886:	2b10      	cmp	r3, #16
 800a888:	d122      	bne.n	800a8d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	2b10      	cmp	r3, #16
 800a896:	d11b      	bne.n	800a8d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0210 	mvn.w	r2, #16
 800a8a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f886 	bl	800a9c8 <HAL_TIM_IC_CaptureCallback>
 800a8bc:	e005      	b.n	800a8ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f879 	bl	800a9b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f888 	bl	800a9da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d10e      	bne.n	800a8fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d107      	bne.n	800a8fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f06f 0201 	mvn.w	r2, #1
 800a8f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7f7 fcae 	bl	8002258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a906:	2b80      	cmp	r3, #128	; 0x80
 800a908:	d10e      	bne.n	800a928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a914:	2b80      	cmp	r3, #128	; 0x80
 800a916:	d107      	bne.n	800a928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f8d7 	bl	800aad6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a936:	d10e      	bne.n	800a956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b80      	cmp	r3, #128	; 0x80
 800a944:	d107      	bne.n	800a956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a94e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f8c9 	bl	800aae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d10e      	bne.n	800a982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96e:	2b40      	cmp	r3, #64	; 0x40
 800a970:	d107      	bne.n	800a982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f835 	bl	800a9ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0320 	and.w	r3, r3, #32
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d10e      	bne.n	800a9ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d107      	bne.n	800a9ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f06f 0220 	mvn.w	r2, #32
 800a9a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f88b 	bl	800aac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bc80      	pop	{r7}
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bc80      	pop	{r7}
 800a9d8:	4770      	bx	lr

0800a9da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9e2:	bf00      	nop
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bc80      	pop	{r7}
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr
	...

0800aa00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a29      	ldr	r2, [pc, #164]	; (800aab8 <TIM_Base_SetConfig+0xb8>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d003      	beq.n	800aa20 <TIM_Base_SetConfig+0x20>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa1e:	d108      	bne.n	800aa32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a20      	ldr	r2, [pc, #128]	; (800aab8 <TIM_Base_SetConfig+0xb8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00b      	beq.n	800aa52 <TIM_Base_SetConfig+0x52>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa40:	d007      	beq.n	800aa52 <TIM_Base_SetConfig+0x52>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a1d      	ldr	r2, [pc, #116]	; (800aabc <TIM_Base_SetConfig+0xbc>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d003      	beq.n	800aa52 <TIM_Base_SetConfig+0x52>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a1c      	ldr	r2, [pc, #112]	; (800aac0 <TIM_Base_SetConfig+0xc0>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d108      	bne.n	800aa64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a0b      	ldr	r2, [pc, #44]	; (800aab8 <TIM_Base_SetConfig+0xb8>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d007      	beq.n	800aaa0 <TIM_Base_SetConfig+0xa0>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a0a      	ldr	r2, [pc, #40]	; (800aabc <TIM_Base_SetConfig+0xbc>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d003      	beq.n	800aaa0 <TIM_Base_SetConfig+0xa0>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <TIM_Base_SetConfig+0xc0>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d103      	bne.n	800aaa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	691a      	ldr	r2, [r3, #16]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	615a      	str	r2, [r3, #20]
}
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bc80      	pop	{r7}
 800aab6:	4770      	bx	lr
 800aab8:	40012c00 	.word	0x40012c00
 800aabc:	40014400 	.word	0x40014400
 800aac0:	40014800 	.word	0x40014800

0800aac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bc80      	pop	{r7}
 800aad4:	4770      	bx	lr

0800aad6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aade:	bf00      	nop
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bc80      	pop	{r7}
 800aae6:	4770      	bx	lr

0800aae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bc80      	pop	{r7}
 800aaf8:	4770      	bx	lr

0800aafa <LL_RCC_GetUSARTClockSource>:
{
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ab02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	401a      	ands	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	041b      	lsls	r3, r3, #16
 800ab12:	4313      	orrs	r3, r2
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bc80      	pop	{r7}
 800ab1c:	4770      	bx	lr

0800ab1e <LL_RCC_GetLPUARTClockSource>:
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ab26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4013      	ands	r3, r2
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bc80      	pop	{r7}
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e042      	b.n	800abd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7f8 fcf7 	bl	8003554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2224      	movs	r2, #36	; 0x24
 800ab6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0201 	bic.w	r2, r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fc3a 	bl	800b3f8 <UART_SetConfig>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d101      	bne.n	800ab8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e022      	b.n	800abd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fea2 	bl	800b8e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 ff28 	bl	800ba22 <UART_CheckIdleState>
 800abd2:	4603      	mov	r3, r0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	; 0x28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	d137      	bne.n	800ac64 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <HAL_UART_Receive_IT+0x24>
 800abfa:	88fb      	ldrh	r3, [r7, #6]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e030      	b.n	800ac66 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a18      	ldr	r2, [pc, #96]	; (800ac70 <HAL_UART_Receive_IT+0x94>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d01f      	beq.n	800ac54 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d018      	beq.n	800ac54 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	e853 3f00 	ldrex	r3, [r3]
 800ac2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	623b      	str	r3, [r7, #32]
 800ac42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac44:	69f9      	ldr	r1, [r7, #28]
 800ac46:	6a3a      	ldr	r2, [r7, #32]
 800ac48:	e841 2300 	strex	r3, r2, [r1]
 800ac4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e6      	bne.n	800ac22 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac54:	88fb      	ldrh	r3, [r7, #6]
 800ac56:	461a      	mov	r2, r3
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fff8 	bl	800bc50 <UART_Start_Receive_IT>
 800ac60:	4603      	mov	r3, r0
 800ac62:	e000      	b.n	800ac66 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac64:	2302      	movs	r3, #2
  }
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3728      	adds	r7, #40	; 0x28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	40008000 	.word	0x40008000

0800ac74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08a      	sub	sp, #40	; 0x28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac88:	2b20      	cmp	r3, #32
 800ac8a:	d167      	bne.n	800ad5c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <HAL_UART_Transmit_DMA+0x24>
 800ac92:	88fb      	ldrh	r3, [r7, #6]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e060      	b.n	800ad5e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	88fa      	ldrh	r2, [r7, #6]
 800aca6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	88fa      	ldrh	r2, [r7, #6]
 800acae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2221      	movs	r2, #33	; 0x21
 800acbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d028      	beq.n	800ad1c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acce:	4a26      	ldr	r2, [pc, #152]	; (800ad68 <HAL_UART_Transmit_DMA+0xf4>)
 800acd0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acd6:	4a25      	ldr	r2, [pc, #148]	; (800ad6c <HAL_UART_Transmit_DMA+0xf8>)
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acde:	4a24      	ldr	r2, [pc, #144]	; (800ad70 <HAL_UART_Transmit_DMA+0xfc>)
 800ace0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace6:	2200      	movs	r2, #0
 800ace8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf2:	4619      	mov	r1, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3328      	adds	r3, #40	; 0x28
 800acfa:	461a      	mov	r2, r3
 800acfc:	88fb      	ldrh	r3, [r7, #6]
 800acfe:	f7fa faa9 	bl	8005254 <HAL_DMA_Start_IT>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2210      	movs	r2, #16
 800ad0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2220      	movs	r2, #32
 800ad14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e020      	b.n	800ad5e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2240      	movs	r2, #64	; 0x40
 800ad22:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	613b      	str	r3, [r7, #16]
   return(result);
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3308      	adds	r3, #8
 800ad42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad44:	623a      	str	r2, [r7, #32]
 800ad46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	69f9      	ldr	r1, [r7, #28]
 800ad4a:	6a3a      	ldr	r2, [r7, #32]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e000      	b.n	800ad5e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ad5c:	2302      	movs	r3, #2
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3728      	adds	r7, #40	; 0x28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	0800bfdb 	.word	0x0800bfdb
 800ad6c:	0800c075 	.word	0x0800c075
 800ad70:	0800c091 	.word	0x0800c091

0800ad74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b0ba      	sub	sp, #232	; 0xe8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad9e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ada2:	4013      	ands	r3, r2
 800ada4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ada8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adac:	2b00      	cmp	r3, #0
 800adae:	d11b      	bne.n	800ade8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800adb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d015      	beq.n	800ade8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adc0:	f003 0320 	and.w	r3, r3, #32
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d105      	bne.n	800add4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d009      	beq.n	800ade8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 82e3 	beq.w	800b3a4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	4798      	blx	r3
      }
      return;
 800ade6:	e2dd      	b.n	800b3a4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ade8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8123 	beq.w	800b038 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800adf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800adf6:	4b8d      	ldr	r3, [pc, #564]	; (800b02c <HAL_UART_IRQHandler+0x2b8>)
 800adf8:	4013      	ands	r3, r2
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae02:	4b8b      	ldr	r3, [pc, #556]	; (800b030 <HAL_UART_IRQHandler+0x2bc>)
 800ae04:	4013      	ands	r3, r2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8116 	beq.w	800b038 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d011      	beq.n	800ae3c <HAL_UART_IRQHandler+0xc8>
 800ae18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae32:	f043 0201 	orr.w	r2, r3, #1
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d011      	beq.n	800ae6c <HAL_UART_IRQHandler+0xf8>
 800ae48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2202      	movs	r2, #2
 800ae5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae62:	f043 0204 	orr.w	r2, r3, #4
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d011      	beq.n	800ae9c <HAL_UART_IRQHandler+0x128>
 800ae78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2204      	movs	r2, #4
 800ae8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae92:	f043 0202 	orr.w	r2, r3, #2
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea0:	f003 0308 	and.w	r3, r3, #8
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d017      	beq.n	800aed8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d105      	bne.n	800aec0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aeb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aeb8:	4b5c      	ldr	r3, [pc, #368]	; (800b02c <HAL_UART_IRQHandler+0x2b8>)
 800aeba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00b      	beq.n	800aed8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2208      	movs	r2, #8
 800aec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aece:	f043 0208 	orr.w	r2, r3, #8
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aedc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d012      	beq.n	800af0a <HAL_UART_IRQHandler+0x196>
 800aee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00c      	beq.n	800af0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af00:	f043 0220 	orr.w	r2, r3, #32
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 8249 	beq.w	800b3a8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d013      	beq.n	800af4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d105      	bne.n	800af3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d007      	beq.n	800af4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5e:	2b40      	cmp	r3, #64	; 0x40
 800af60:	d005      	beq.n	800af6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d054      	beq.n	800b018 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 ffce 	bl	800bf10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af7e:	2b40      	cmp	r3, #64	; 0x40
 800af80:	d146      	bne.n	800b010 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3308      	adds	r3, #8
 800afaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1d9      	bne.n	800af82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d017      	beq.n	800b008 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afde:	4a15      	ldr	r2, [pc, #84]	; (800b034 <HAL_UART_IRQHandler+0x2c0>)
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fa fa0f 	bl	800540c <HAL_DMA_Abort_IT>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d019      	beq.n	800b028 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b002:	4610      	mov	r0, r2
 800b004:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b006:	e00f      	b.n	800b028 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f9e0 	bl	800b3ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00e:	e00b      	b.n	800b028 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f9dc 	bl	800b3ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b016:	e007      	b.n	800b028 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f9d8 	bl	800b3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b026:	e1bf      	b.n	800b3a8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b028:	bf00      	nop
    return;
 800b02a:	e1bd      	b.n	800b3a8 <HAL_UART_IRQHandler+0x634>
 800b02c:	10000001 	.word	0x10000001
 800b030:	04000120 	.word	0x04000120
 800b034:	0800c111 	.word	0x0800c111

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	f040 8153 	bne.w	800b2e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b046:	f003 0310 	and.w	r3, r3, #16
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 814c 	beq.w	800b2e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b054:	f003 0310 	and.w	r3, r3, #16
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8145 	beq.w	800b2e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2210      	movs	r2, #16
 800b064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b070:	2b40      	cmp	r3, #64	; 0x40
 800b072:	f040 80bb 	bne.w	800b1ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 818f 	beq.w	800b3ac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b094:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b098:	429a      	cmp	r2, r3
 800b09a:	f080 8187 	bcs.w	800b3ac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f040 8087 	bne.w	800b1ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1da      	bne.n	800b0bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b118:	f023 0301 	bic.w	r3, r3, #1
 800b11c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	3308      	adds	r3, #8
 800b126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b12a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b12e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b13c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e1      	bne.n	800b106 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b166:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b16c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1e3      	bne.n	800b142 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b190:	e853 3f00 	ldrex	r3, [r3]
 800b194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b198:	f023 0310 	bic.w	r3, r3, #16
 800b19c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1b2:	e841 2300 	strex	r3, r2, [r1]
 800b1b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e4      	bne.n	800b188 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fa f8c3 	bl	8005350 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f8fb 	bl	800b3e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1ea:	e0df      	b.n	800b3ac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b206:	b29b      	uxth	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 80d1 	beq.w	800b3b0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b20e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 80cc 	beq.w	800b3b0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b22c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b23a:	647b      	str	r3, [r7, #68]	; 0x44
 800b23c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e4      	bne.n	800b218 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	623b      	str	r3, [r7, #32]
   return(result);
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b276:	633a      	str	r2, [r7, #48]	; 0x30
 800b278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e1      	bne.n	800b24e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0310 	bic.w	r3, r3, #16
 800b2b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2c0:	61fb      	str	r3, [r7, #28]
 800b2c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	69b9      	ldr	r1, [r7, #24]
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e4      	bne.n	800b29e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f87d 	bl	800b3e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2e6:	e063      	b.n	800b3b0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <HAL_UART_IRQHandler+0x59e>
 800b2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d008      	beq.n	800b312 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f001 fc5e 	bl	800cbcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b310:	e051      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d014      	beq.n	800b348 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b326:	2b00      	cmp	r3, #0
 800b328:	d105      	bne.n	800b336 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b32a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b32e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d008      	beq.n	800b348 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d03a      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
    }
    return;
 800b346:	e035      	b.n	800b3b4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	d009      	beq.n	800b368 <HAL_UART_IRQHandler+0x5f4>
 800b354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 feeb 	bl	800c13c <UART_EndTransmit_IT>
    return;
 800b366:	e026      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b36c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <HAL_UART_IRQHandler+0x614>
 800b374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b378:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 fc35 	bl	800cbf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b386:	e016      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b38c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d010      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x642>
 800b394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da0c      	bge.n	800b3b6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f001 fc1e 	bl	800cbde <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3a2:	e008      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3a4:	bf00      	nop
 800b3a6:	e006      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
    return;
 800b3a8:	bf00      	nop
 800b3aa:	e004      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3ac:	bf00      	nop
 800b3ae:	e002      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3b0:	bf00      	nop
 800b3b2:	e000      	b.n	800b3b6 <HAL_UART_IRQHandler+0x642>
    return;
 800b3b4:	bf00      	nop
  }
}
 800b3b6:	37e8      	adds	r7, #232	; 0xe8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bc80      	pop	{r7}
 800b3cc:	4770      	bx	lr

0800b3ce <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc80      	pop	{r7}
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3fc:	b08c      	sub	sp, #48	; 0x30
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	689a      	ldr	r2, [r3, #8]
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	431a      	orrs	r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	431a      	orrs	r2, r3
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b94      	ldr	r3, [pc, #592]	; (800b678 <UART_SetConfig+0x280>)
 800b428:	4013      	ands	r3, r2
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	6812      	ldr	r2, [r2, #0]
 800b42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b430:	430b      	orrs	r3, r1
 800b432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	68da      	ldr	r2, [r3, #12]
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	430a      	orrs	r2, r1
 800b448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a89      	ldr	r2, [pc, #548]	; (800b67c <UART_SetConfig+0x284>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d004      	beq.n	800b464 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b460:	4313      	orrs	r3, r2
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b46e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	6812      	ldr	r2, [r2, #0]
 800b476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b478:	430b      	orrs	r3, r1
 800b47a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b482:	f023 010f 	bic.w	r1, r3, #15
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a7a      	ldr	r2, [pc, #488]	; (800b680 <UART_SetConfig+0x288>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d127      	bne.n	800b4ec <UART_SetConfig+0xf4>
 800b49c:	2003      	movs	r0, #3
 800b49e:	f7ff fb2c 	bl	800aafa <LL_RCC_GetUSARTClockSource>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d81b      	bhi.n	800b4e4 <UART_SetConfig+0xec>
 800b4ac:	a201      	add	r2, pc, #4	; (adr r2, 800b4b4 <UART_SetConfig+0xbc>)
 800b4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b2:	bf00      	nop
 800b4b4:	0800b4c5 	.word	0x0800b4c5
 800b4b8:	0800b4d5 	.word	0x0800b4d5
 800b4bc:	0800b4cd 	.word	0x0800b4cd
 800b4c0:	0800b4dd 	.word	0x0800b4dd
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e080      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e07c      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e078      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b4dc:	2308      	movs	r3, #8
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e2:	e074      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ea:	e070      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a64      	ldr	r2, [pc, #400]	; (800b684 <UART_SetConfig+0x28c>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d138      	bne.n	800b568 <UART_SetConfig+0x170>
 800b4f6:	200c      	movs	r0, #12
 800b4f8:	f7ff faff 	bl	800aafa <LL_RCC_GetUSARTClockSource>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b502:	2b0c      	cmp	r3, #12
 800b504:	d82c      	bhi.n	800b560 <UART_SetConfig+0x168>
 800b506:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <UART_SetConfig+0x114>)
 800b508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50c:	0800b541 	.word	0x0800b541
 800b510:	0800b561 	.word	0x0800b561
 800b514:	0800b561 	.word	0x0800b561
 800b518:	0800b561 	.word	0x0800b561
 800b51c:	0800b551 	.word	0x0800b551
 800b520:	0800b561 	.word	0x0800b561
 800b524:	0800b561 	.word	0x0800b561
 800b528:	0800b561 	.word	0x0800b561
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b561 	.word	0x0800b561
 800b534:	0800b561 	.word	0x0800b561
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b559 	.word	0x0800b559
 800b540:	2300      	movs	r3, #0
 800b542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b546:	e042      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b548:	2302      	movs	r3, #2
 800b54a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b54e:	e03e      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b550:	2304      	movs	r3, #4
 800b552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b556:	e03a      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b558:	2308      	movs	r3, #8
 800b55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b55e:	e036      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b560:	2310      	movs	r3, #16
 800b562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b566:	e032      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a43      	ldr	r2, [pc, #268]	; (800b67c <UART_SetConfig+0x284>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d12a      	bne.n	800b5c8 <UART_SetConfig+0x1d0>
 800b572:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b576:	f7ff fad2 	bl	800ab1e <LL_RCC_GetLPUARTClockSource>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b580:	d01a      	beq.n	800b5b8 <UART_SetConfig+0x1c0>
 800b582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b586:	d81b      	bhi.n	800b5c0 <UART_SetConfig+0x1c8>
 800b588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b58c:	d00c      	beq.n	800b5a8 <UART_SetConfig+0x1b0>
 800b58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b592:	d815      	bhi.n	800b5c0 <UART_SetConfig+0x1c8>
 800b594:	2b00      	cmp	r3, #0
 800b596:	d003      	beq.n	800b5a0 <UART_SetConfig+0x1a8>
 800b598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b59c:	d008      	beq.n	800b5b0 <UART_SetConfig+0x1b8>
 800b59e:	e00f      	b.n	800b5c0 <UART_SetConfig+0x1c8>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a6:	e012      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ae:	e00e      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b5b0:	2304      	movs	r3, #4
 800b5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5b6:	e00a      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b5b8:	2308      	movs	r3, #8
 800b5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5be:	e006      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b5c0:	2310      	movs	r3, #16
 800b5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5c6:	e002      	b.n	800b5ce <UART_SetConfig+0x1d6>
 800b5c8:	2310      	movs	r3, #16
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a2a      	ldr	r2, [pc, #168]	; (800b67c <UART_SetConfig+0x284>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	f040 80a4 	bne.w	800b722 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5de:	2b08      	cmp	r3, #8
 800b5e0:	d823      	bhi.n	800b62a <UART_SetConfig+0x232>
 800b5e2:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <UART_SetConfig+0x1f0>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b60d 	.word	0x0800b60d
 800b5ec:	0800b62b 	.word	0x0800b62b
 800b5f0:	0800b615 	.word	0x0800b615
 800b5f4:	0800b62b 	.word	0x0800b62b
 800b5f8:	0800b61b 	.word	0x0800b61b
 800b5fc:	0800b62b 	.word	0x0800b62b
 800b600:	0800b62b 	.word	0x0800b62b
 800b604:	0800b62b 	.word	0x0800b62b
 800b608:	0800b623 	.word	0x0800b623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b60c:	f7fc fbf8 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 800b610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b612:	e010      	b.n	800b636 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b614:	4b1c      	ldr	r3, [pc, #112]	; (800b688 <UART_SetConfig+0x290>)
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b618:	e00d      	b.n	800b636 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b61a:	f7fc fb3d 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 800b61e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b620:	e009      	b.n	800b636 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b628:	e005      	b.n	800b636 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 8137 	beq.w	800b8ac <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	4a12      	ldr	r2, [pc, #72]	; (800b68c <UART_SetConfig+0x294>)
 800b644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b648:	461a      	mov	r2, r3
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b650:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	4613      	mov	r3, r2
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	4413      	add	r3, r2
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d305      	bcc.n	800b66e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d910      	bls.n	800b690 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b674:	e11a      	b.n	800b8ac <UART_SetConfig+0x4b4>
 800b676:	bf00      	nop
 800b678:	cfff69f3 	.word	0xcfff69f3
 800b67c:	40008000 	.word	0x40008000
 800b680:	40013800 	.word	0x40013800
 800b684:	40004400 	.word	0x40004400
 800b688:	00f42400 	.word	0x00f42400
 800b68c:	0801f620 	.word	0x0801f620
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	2200      	movs	r2, #0
 800b694:	60bb      	str	r3, [r7, #8]
 800b696:	60fa      	str	r2, [r7, #12]
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	4a8e      	ldr	r2, [pc, #568]	; (800b8d8 <UART_SetConfig+0x4e0>)
 800b69e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	607a      	str	r2, [r7, #4]
 800b6aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6b2:	f7f5 fb6b 	bl	8000d8c <__aeabi_uldivmod>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f04f 0200 	mov.w	r2, #0
 800b6c2:	f04f 0300 	mov.w	r3, #0
 800b6c6:	020b      	lsls	r3, r1, #8
 800b6c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6cc:	0202      	lsls	r2, r0, #8
 800b6ce:	6979      	ldr	r1, [r7, #20]
 800b6d0:	6849      	ldr	r1, [r1, #4]
 800b6d2:	0849      	lsrs	r1, r1, #1
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	4605      	mov	r5, r0
 800b6da:	eb12 0804 	adds.w	r8, r2, r4
 800b6de:	eb43 0905 	adc.w	r9, r3, r5
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	4693      	mov	fp, r2
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	465b      	mov	r3, fp
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f5 fb4a 	bl	8000d8c <__aeabi_uldivmod>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b706:	d308      	bcc.n	800b71a <UART_SetConfig+0x322>
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b70e:	d204      	bcs.n	800b71a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6a3a      	ldr	r2, [r7, #32]
 800b716:	60da      	str	r2, [r3, #12]
 800b718:	e0c8      	b.n	800b8ac <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b720:	e0c4      	b.n	800b8ac <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b72a:	d167      	bne.n	800b7fc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b72c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b730:	2b08      	cmp	r3, #8
 800b732:	d828      	bhi.n	800b786 <UART_SetConfig+0x38e>
 800b734:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <UART_SetConfig+0x344>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b769 	.word	0x0800b769
 800b744:	0800b771 	.word	0x0800b771
 800b748:	0800b787 	.word	0x0800b787
 800b74c:	0800b777 	.word	0x0800b777
 800b750:	0800b787 	.word	0x0800b787
 800b754:	0800b787 	.word	0x0800b787
 800b758:	0800b787 	.word	0x0800b787
 800b75c:	0800b77f 	.word	0x0800b77f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b760:	f7fc fb4e 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 800b764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b766:	e014      	b.n	800b792 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b768:	f7fc fb5c 	bl	8007e24 <HAL_RCC_GetPCLK2Freq>
 800b76c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b76e:	e010      	b.n	800b792 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b770:	4b5a      	ldr	r3, [pc, #360]	; (800b8dc <UART_SetConfig+0x4e4>)
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b774:	e00d      	b.n	800b792 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b776:	f7fc fa8f 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b77c:	e009      	b.n	800b792 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b77e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b784:	e005      	b.n	800b792 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8089 	beq.w	800b8ac <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	4a4e      	ldr	r2, [pc, #312]	; (800b8d8 <UART_SetConfig+0x4e0>)
 800b7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ac:	005a      	lsls	r2, r3, #1
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	441a      	add	r2, r3
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	2b0f      	cmp	r3, #15
 800b7c4:	d916      	bls.n	800b7f4 <UART_SetConfig+0x3fc>
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7cc:	d212      	bcs.n	800b7f4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	f023 030f 	bic.w	r3, r3, #15
 800b7d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	085b      	lsrs	r3, r3, #1
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	8bfb      	ldrh	r3, [r7, #30]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	8bfa      	ldrh	r2, [r7, #30]
 800b7f0:	60da      	str	r2, [r3, #12]
 800b7f2:	e05b      	b.n	800b8ac <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7fa:	e057      	b.n	800b8ac <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b800:	2b08      	cmp	r3, #8
 800b802:	d828      	bhi.n	800b856 <UART_SetConfig+0x45e>
 800b804:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <UART_SetConfig+0x414>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b831 	.word	0x0800b831
 800b810:	0800b839 	.word	0x0800b839
 800b814:	0800b841 	.word	0x0800b841
 800b818:	0800b857 	.word	0x0800b857
 800b81c:	0800b847 	.word	0x0800b847
 800b820:	0800b857 	.word	0x0800b857
 800b824:	0800b857 	.word	0x0800b857
 800b828:	0800b857 	.word	0x0800b857
 800b82c:	0800b84f 	.word	0x0800b84f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b830:	f7fc fae6 	bl	8007e00 <HAL_RCC_GetPCLK1Freq>
 800b834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b836:	e014      	b.n	800b862 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fc faf4 	bl	8007e24 <HAL_RCC_GetPCLK2Freq>
 800b83c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b83e:	e010      	b.n	800b862 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b840:	4b26      	ldr	r3, [pc, #152]	; (800b8dc <UART_SetConfig+0x4e4>)
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b844:	e00d      	b.n	800b862 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b846:	f7fc fa27 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 800b84a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b84c:	e009      	b.n	800b862 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b854:	e005      	b.n	800b862 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b860:	bf00      	nop
    }

    if (pclk != 0U)
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	2b00      	cmp	r3, #0
 800b866:	d021      	beq.n	800b8ac <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	4a1a      	ldr	r2, [pc, #104]	; (800b8d8 <UART_SetConfig+0x4e0>)
 800b86e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b872:	461a      	mov	r2, r3
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	fbb3 f2f2 	udiv	r2, r3, r2
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	085b      	lsrs	r3, r3, #1
 800b880:	441a      	add	r2, r3
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	2b0f      	cmp	r3, #15
 800b890:	d909      	bls.n	800b8a6 <UART_SetConfig+0x4ae>
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b898:	d205      	bcs.n	800b8a6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	60da      	str	r2, [r3, #12]
 800b8a4:	e002      	b.n	800b8ac <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b8c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3730      	adds	r7, #48	; 0x30
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0801f620 	.word	0x0801f620
 800b8dc:	00f42400 	.word	0x00f42400

0800b8e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00a      	beq.n	800b90a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	430a      	orrs	r2, r1
 800b908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	f003 0302 	and.w	r3, r3, #2
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00a      	beq.n	800b92c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	430a      	orrs	r2, r1
 800b92a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b930:	f003 0304 	and.w	r3, r3, #4
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00a      	beq.n	800b94e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	430a      	orrs	r2, r1
 800b96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b996:	f003 0320 	and.w	r3, r3, #32
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01a      	beq.n	800b9f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9de:	d10a      	bne.n	800b9f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00a      	beq.n	800ba18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	430a      	orrs	r2, r1
 800ba16:	605a      	str	r2, [r3, #4]
  }
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bc80      	pop	{r7}
 800ba20:	4770      	bx	lr

0800ba22 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b086      	sub	sp, #24
 800ba26:	af02      	add	r7, sp, #8
 800ba28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba32:	f7f7 f905 	bl	8002c40 <HAL_GetTick>
 800ba36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b08      	cmp	r3, #8
 800ba44:	d10e      	bne.n	800ba64 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f832 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e028      	b.n	800bab6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d10e      	bne.n	800ba90 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f81c 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e012      	b.n	800bab6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2220      	movs	r2, #32
 800ba94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b09c      	sub	sp, #112	; 0x70
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	603b      	str	r3, [r7, #0]
 800baca:	4613      	mov	r3, r2
 800bacc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bace:	e0a9      	b.n	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad6:	f000 80a5 	beq.w	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bada:	f7f7 f8b1 	bl	8002c40 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d302      	bcc.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x32>
 800baea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baec:	2b00      	cmp	r3, #0
 800baee:	d140      	bne.n	800bb72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb04:	667b      	str	r3, [r7, #100]	; 0x64
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e6      	bne.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f023 0301 	bic.w	r3, r3, #1
 800bb38:	663b      	str	r3, [r7, #96]	; 0x60
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3308      	adds	r3, #8
 800bb40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb42:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb4a:	e841 2300 	strex	r3, r2, [r1]
 800bb4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1e5      	bne.n	800bb22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2220      	movs	r2, #32
 800bb62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e069      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d051      	beq.n	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb8e:	d149      	bne.n	800bc24 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	e853 3f00 	ldrex	r3, [r3]
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e6      	bne.n	800bb9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	e853 3f00 	ldrex	r3, [r3]
 800bbda:	613b      	str	r3, [r7, #16]
   return(result);
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f023 0301 	bic.w	r3, r3, #1
 800bbe2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbec:	623a      	str	r2, [r7, #32]
 800bbee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf0:	69f9      	ldr	r1, [r7, #28]
 800bbf2:	6a3a      	ldr	r2, [r7, #32]
 800bbf4:	e841 2300 	strex	r3, r2, [r1]
 800bbf8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e5      	bne.n	800bbcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e010      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	69da      	ldr	r2, [r3, #28]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	bf0c      	ite	eq
 800bc34:	2301      	moveq	r3, #1
 800bc36:	2300      	movne	r3, #0
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	f43f af46 	beq.w	800bad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3770      	adds	r7, #112	; 0x70
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b0a3      	sub	sp, #140	; 0x8c
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	88fa      	ldrh	r2, [r7, #6]
 800bc68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	88fa      	ldrh	r2, [r7, #6]
 800bc70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc82:	d10e      	bne.n	800bca2 <UART_Start_Receive_IT+0x52>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d105      	bne.n	800bc98 <UART_Start_Receive_IT+0x48>
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc96:	e02d      	b.n	800bcf4 <UART_Start_Receive_IT+0xa4>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	22ff      	movs	r2, #255	; 0xff
 800bc9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bca0:	e028      	b.n	800bcf4 <UART_Start_Receive_IT+0xa4>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10d      	bne.n	800bcc6 <UART_Start_Receive_IT+0x76>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d104      	bne.n	800bcbc <UART_Start_Receive_IT+0x6c>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcba:	e01b      	b.n	800bcf4 <UART_Start_Receive_IT+0xa4>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	227f      	movs	r2, #127	; 0x7f
 800bcc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcc4:	e016      	b.n	800bcf4 <UART_Start_Receive_IT+0xa4>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcce:	d10d      	bne.n	800bcec <UART_Start_Receive_IT+0x9c>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d104      	bne.n	800bce2 <UART_Start_Receive_IT+0x92>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	227f      	movs	r2, #127	; 0x7f
 800bcdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bce0:	e008      	b.n	800bcf4 <UART_Start_Receive_IT+0xa4>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	223f      	movs	r2, #63	; 0x3f
 800bce6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcea:	e003      	b.n	800bcf4 <UART_Start_Receive_IT+0xa4>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2222      	movs	r2, #34	; 0x22
 800bd00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3308      	adds	r3, #8
 800bd0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd0e:	e853 3f00 	ldrex	r3, [r3]
 800bd12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bd14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd16:	f043 0301 	orr.w	r3, r3, #1
 800bd1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3308      	adds	r3, #8
 800bd24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bd28:	673a      	str	r2, [r7, #112]	; 0x70
 800bd2a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bd2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bd36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e3      	bne.n	800bd04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd44:	d14f      	bne.n	800bde6 <UART_Start_Receive_IT+0x196>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd4c:	88fa      	ldrh	r2, [r7, #6]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d349      	bcc.n	800bde6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd5a:	d107      	bne.n	800bd6c <UART_Start_Receive_IT+0x11c>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d103      	bne.n	800bd6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	4a46      	ldr	r2, [pc, #280]	; (800be80 <UART_Start_Receive_IT+0x230>)
 800bd68:	675a      	str	r2, [r3, #116]	; 0x74
 800bd6a:	e002      	b.n	800bd72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4a45      	ldr	r2, [pc, #276]	; (800be84 <UART_Start_Receive_IT+0x234>)
 800bd70:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d01a      	beq.n	800bdb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd82:	e853 3f00 	ldrex	r3, [r3]
 800bd86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd9e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bda2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bda4:	e841 2300 	strex	r3, r2, [r1]
 800bda8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bdaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e4      	bne.n	800bd7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3308      	adds	r3, #8
 800bdce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bdd0:	64ba      	str	r2, [r7, #72]	; 0x48
 800bdd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e5      	bne.n	800bdb0 <UART_Start_Receive_IT+0x160>
 800bde4:	e046      	b.n	800be74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdee:	d107      	bne.n	800be00 <UART_Start_Receive_IT+0x1b0>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d103      	bne.n	800be00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4a23      	ldr	r2, [pc, #140]	; (800be88 <UART_Start_Receive_IT+0x238>)
 800bdfc:	675a      	str	r2, [r3, #116]	; 0x74
 800bdfe:	e002      	b.n	800be06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4a22      	ldr	r2, [pc, #136]	; (800be8c <UART_Start_Receive_IT+0x23c>)
 800be04:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d019      	beq.n	800be42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800be22:	677b      	str	r3, [r7, #116]	; 0x74
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
 800be2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be34:	e841 2300 	strex	r3, r2, [r1]
 800be38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e6      	bne.n	800be0e <UART_Start_Receive_IT+0x1be>
 800be40:	e018      	b.n	800be74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	e853 3f00 	ldrex	r3, [r3]
 800be4e:	613b      	str	r3, [r7, #16]
   return(result);
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	f043 0320 	orr.w	r3, r3, #32
 800be56:	67bb      	str	r3, [r7, #120]	; 0x78
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	461a      	mov	r2, r3
 800be5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be60:	623b      	str	r3, [r7, #32]
 800be62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	69f9      	ldr	r1, [r7, #28]
 800be66:	6a3a      	ldr	r2, [r7, #32]
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e6      	bne.n	800be42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	378c      	adds	r7, #140	; 0x8c
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bc80      	pop	{r7}
 800be7e:	4770      	bx	lr
 800be80:	0800c865 	.word	0x0800c865
 800be84:	0800c505 	.word	0x0800c505
 800be88:	0800c34d 	.word	0x0800c34d
 800be8c:	0800c195 	.word	0x0800c195

0800be90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b08f      	sub	sp, #60	; 0x3c
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	6a3b      	ldr	r3, [r7, #32]
 800bea0:	e853 3f00 	ldrex	r3, [r3]
 800bea4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800beac:	637b      	str	r3, [r7, #52]	; 0x34
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e6      	bne.n	800be98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3308      	adds	r3, #8
 800bed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	e853 3f00 	ldrex	r3, [r3]
 800bed8:	60bb      	str	r3, [r7, #8]
   return(result);
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bee0:	633b      	str	r3, [r7, #48]	; 0x30
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3308      	adds	r3, #8
 800bee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beea:	61ba      	str	r2, [r7, #24]
 800beec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beee:	6979      	ldr	r1, [r7, #20]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	e841 2300 	strex	r3, r2, [r1]
 800bef6:	613b      	str	r3, [r7, #16]
   return(result);
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1e5      	bne.n	800beca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bf06:	bf00      	nop
 800bf08:	373c      	adds	r7, #60	; 0x3c
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bc80      	pop	{r7}
 800bf0e:	4770      	bx	lr

0800bf10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b095      	sub	sp, #84	; 0x54
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	e853 3f00 	ldrex	r3, [r3]
 800bf24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	461a      	mov	r2, r3
 800bf34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf36:	643b      	str	r3, [r7, #64]	; 0x40
 800bf38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf3e:	e841 2300 	strex	r3, r2, [r1]
 800bf42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1e6      	bne.n	800bf18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3308      	adds	r3, #8
 800bf50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf52:	6a3b      	ldr	r3, [r7, #32]
 800bf54:	e853 3f00 	ldrex	r3, [r3]
 800bf58:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf60:	f023 0301 	bic.w	r3, r3, #1
 800bf64:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf76:	e841 2300 	strex	r3, r2, [r1]
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1e3      	bne.n	800bf4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d118      	bne.n	800bfbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	e853 3f00 	ldrex	r3, [r3]
 800bf96:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f023 0310 	bic.w	r3, r3, #16
 800bf9e:	647b      	str	r3, [r7, #68]	; 0x44
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	6979      	ldr	r1, [r7, #20]
 800bfae:	69ba      	ldr	r2, [r7, #24]
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e6      	bne.n	800bf8a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bfd0:	bf00      	nop
 800bfd2:	3754      	adds	r7, #84	; 0x54
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr

0800bfda <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b090      	sub	sp, #64	; 0x40
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0320 	and.w	r3, r3, #32
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d137      	bne.n	800c066 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3308      	adds	r3, #8
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	623b      	str	r3, [r7, #32]
   return(result);
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c014:	63bb      	str	r3, [r7, #56]	; 0x38
 800c016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3308      	adds	r3, #8
 800c01c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c01e:	633a      	str	r2, [r7, #48]	; 0x30
 800c020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e5      	bne.n	800bffe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c046:	637b      	str	r3, [r7, #52]	; 0x34
 800c048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c050:	61fb      	str	r3, [r7, #28]
 800c052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c054:	69b9      	ldr	r1, [r7, #24]
 800c056:	69fa      	ldr	r2, [r7, #28]
 800c058:	e841 2300 	strex	r3, r2, [r1]
 800c05c:	617b      	str	r3, [r7, #20]
   return(result);
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e6      	bne.n	800c032 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c064:	e002      	b.n	800c06c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c066:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c068:	f7f7 fc88 	bl	800397c <HAL_UART_TxCpltCallback>
}
 800c06c:	bf00      	nop
 800c06e:	3740      	adds	r7, #64	; 0x40
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c080:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff f99a 	bl	800b3bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c088:	bf00      	nop
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b8:	2b80      	cmp	r3, #128	; 0x80
 800c0ba:	d109      	bne.n	800c0d0 <UART_DMAError+0x40>
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	2b21      	cmp	r3, #33	; 0x21
 800c0c0:	d106      	bne.n	800c0d0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c0ca:	6978      	ldr	r0, [r7, #20]
 800c0cc:	f7ff fee0 	bl	800be90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0da:	2b40      	cmp	r3, #64	; 0x40
 800c0dc:	d109      	bne.n	800c0f2 <UART_DMAError+0x62>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b22      	cmp	r3, #34	; 0x22
 800c0e2:	d106      	bne.n	800c0f2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c0ec:	6978      	ldr	r0, [r7, #20]
 800c0ee:	f7ff ff0f 	bl	800bf10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f8:	f043 0210 	orr.w	r2, r3, #16
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c102:	6978      	ldr	r0, [r7, #20]
 800c104:	f7ff f963 	bl	800b3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c108:	bf00      	nop
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7ff f94d 	bl	800b3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c134:	bf00      	nop
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	60bb      	str	r3, [r7, #8]
   return(result);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c158:	61fb      	str	r3, [r7, #28]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	61bb      	str	r3, [r7, #24]
 800c164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	613b      	str	r3, [r7, #16]
   return(result);
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e6      	bne.n	800c144 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7f7 fbf9 	bl	800397c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c18a:	bf00      	nop
 800c18c:	3720      	adds	r7, #32
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b09c      	sub	sp, #112	; 0x70
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ac:	2b22      	cmp	r3, #34	; 0x22
 800c1ae:	f040 80be 	bne.w	800c32e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c1c0:	b2d9      	uxtb	r1, r3
 800c1c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1cc:	400a      	ands	r2, r1
 800c1ce:	b2d2      	uxtb	r2, r2
 800c1d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f040 80a1 	bne.w	800c33e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c204:	e853 3f00 	ldrex	r3, [r3]
 800c208:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c20c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c210:	66bb      	str	r3, [r7, #104]	; 0x68
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c21a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c21c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c222:	e841 2300 	strex	r3, r2, [r1]
 800c226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1e6      	bne.n	800c1fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3308      	adds	r3, #8
 800c234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	e853 3f00 	ldrex	r3, [r3]
 800c23c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c240:	f023 0301 	bic.w	r3, r3, #1
 800c244:	667b      	str	r3, [r7, #100]	; 0x64
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3308      	adds	r3, #8
 800c24c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c24e:	647a      	str	r2, [r7, #68]	; 0x44
 800c250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e5      	bne.n	800c22e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2220      	movs	r2, #32
 800c266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a33      	ldr	r2, [pc, #204]	; (800c348 <UART_RxISR_8BIT+0x1b4>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d01f      	beq.n	800c2c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d018      	beq.n	800c2c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	e853 3f00 	ldrex	r3, [r3]
 800c29a:	623b      	str	r3, [r7, #32]
   return(result);
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2a2:	663b      	str	r3, [r7, #96]	; 0x60
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ac:	633b      	str	r3, [r7, #48]	; 0x30
 800c2ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e6      	bne.n	800c28e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d12e      	bne.n	800c326 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f023 0310 	bic.w	r3, r3, #16
 800c2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2ec:	61fb      	str	r3, [r7, #28]
 800c2ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	69b9      	ldr	r1, [r7, #24]
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e6      	bne.n	800c2ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	f003 0310 	and.w	r3, r3, #16
 800c30a:	2b10      	cmp	r3, #16
 800c30c:	d103      	bne.n	800c316 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2210      	movs	r2, #16
 800c314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff f85e 	bl	800b3e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c324:	e00b      	b.n	800c33e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7f7 fb3e 	bl	80039a8 <HAL_UART_RxCpltCallback>
}
 800c32c:	e007      	b.n	800c33e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	699a      	ldr	r2, [r3, #24]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f042 0208 	orr.w	r2, r2, #8
 800c33c:	619a      	str	r2, [r3, #24]
}
 800c33e:	bf00      	nop
 800c340:	3770      	adds	r7, #112	; 0x70
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	40008000 	.word	0x40008000

0800c34c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b09c      	sub	sp, #112	; 0x70
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c35a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c364:	2b22      	cmp	r3, #34	; 0x22
 800c366:	f040 80be 	bne.w	800c4e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c378:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c37a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c37e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c382:	4013      	ands	r3, r2
 800c384:	b29a      	uxth	r2, r3
 800c386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c388:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38e:	1c9a      	adds	r2, r3, #2
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	3b01      	subs	r3, #1
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f040 80a1 	bne.w	800c4f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c3d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e6      	bne.n	800c3b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f0:	e853 3f00 	ldrex	r3, [r3]
 800c3f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	f023 0301 	bic.w	r3, r3, #1
 800c3fc:	663b      	str	r3, [r7, #96]	; 0x60
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3308      	adds	r3, #8
 800c404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c406:	643a      	str	r2, [r7, #64]	; 0x40
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c40c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c40e:	e841 2300 	strex	r3, r2, [r1]
 800c412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1e5      	bne.n	800c3e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2220      	movs	r2, #32
 800c41e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a33      	ldr	r2, [pc, #204]	; (800c500 <UART_RxISR_16BIT+0x1b4>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d01f      	beq.n	800c478 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c442:	2b00      	cmp	r3, #0
 800c444:	d018      	beq.n	800c478 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	e853 3f00 	ldrex	r3, [r3]
 800c452:	61fb      	str	r3, [r7, #28]
   return(result);
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c45a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c464:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c466:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c46c:	e841 2300 	strex	r3, r2, [r1]
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1e6      	bne.n	800c446 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d12e      	bne.n	800c4de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	60bb      	str	r3, [r7, #8]
   return(result);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f023 0310 	bic.w	r3, r3, #16
 800c49a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4a4:	61bb      	str	r3, [r7, #24]
 800c4a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	6979      	ldr	r1, [r7, #20]
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e6      	bne.n	800c486 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	f003 0310 	and.w	r3, r3, #16
 800c4c2:	2b10      	cmp	r3, #16
 800c4c4:	d103      	bne.n	800c4ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2210      	movs	r2, #16
 800c4cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7fe ff82 	bl	800b3e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4dc:	e00b      	b.n	800c4f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7f7 fa62 	bl	80039a8 <HAL_UART_RxCpltCallback>
}
 800c4e4:	e007      	b.n	800c4f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	699a      	ldr	r2, [r3, #24]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0208 	orr.w	r2, r2, #8
 800c4f4:	619a      	str	r2, [r3, #24]
}
 800c4f6:	bf00      	nop
 800c4f8:	3770      	adds	r7, #112	; 0x70
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	40008000 	.word	0x40008000

0800c504 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b0ac      	sub	sp, #176	; 0xb0
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c512:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c53a:	2b22      	cmp	r3, #34	; 0x22
 800c53c:	f040 8182 	bne.w	800c844 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c546:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c54a:	e125      	b.n	800c798 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c552:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c556:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c55a:	b2d9      	uxtb	r1, r3
 800c55c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c560:	b2da      	uxtb	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c566:	400a      	ands	r2, r1
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c570:	1c5a      	adds	r2, r3, #1
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	3b01      	subs	r3, #1
 800c580:	b29a      	uxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d053      	beq.n	800c646 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c59e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d011      	beq.n	800c5ce <UART_RxISR_8BIT_FIFOEN+0xca>
 800c5aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00b      	beq.n	800c5ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c4:	f043 0201 	orr.w	r2, r3, #1
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d011      	beq.n	800c5fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c5da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00b      	beq.n	800c5fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f4:	f043 0204 	orr.w	r2, r3, #4
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c602:	f003 0304 	and.w	r3, r3, #4
 800c606:	2b00      	cmp	r3, #0
 800c608:	d011      	beq.n	800c62e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c60a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c60e:	f003 0301 	and.w	r3, r3, #1
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00b      	beq.n	800c62e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2204      	movs	r2, #4
 800c61c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c624:	f043 0202 	orr.w	r2, r3, #2
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c634:	2b00      	cmp	r3, #0
 800c636:	d006      	beq.n	800c646 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7fe fec8 	bl	800b3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f040 80a2 	bne.w	800c798 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c65c:	e853 3f00 	ldrex	r3, [r3]
 800c660:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	461a      	mov	r2, r3
 800c672:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c676:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c678:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c67c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c67e:	e841 2300 	strex	r3, r2, [r1]
 800c682:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1e4      	bne.n	800c654 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3308      	adds	r3, #8
 800c690:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c694:	e853 3f00 	ldrex	r3, [r3]
 800c698:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c69a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c69c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6a0:	f023 0301 	bic.w	r3, r3, #1
 800c6a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6b2:	66ba      	str	r2, [r7, #104]	; 0x68
 800c6b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c6b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c6c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e1      	bne.n	800c68a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a5f      	ldr	r2, [pc, #380]	; (800c85c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d021      	beq.n	800c728 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d01a      	beq.n	800c728 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6fa:	e853 3f00 	ldrex	r3, [r3]
 800c6fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c714:	657b      	str	r3, [r7, #84]	; 0x54
 800c716:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c71a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c71c:	e841 2300 	strex	r3, r2, [r1]
 800c720:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e4      	bne.n	800c6f2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d130      	bne.n	800c792 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73e:	e853 3f00 	ldrex	r3, [r3]
 800c742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	f023 0310 	bic.w	r3, r3, #16
 800c74a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c758:	643b      	str	r3, [r7, #64]	; 0x40
 800c75a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c75e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c760:	e841 2300 	strex	r3, r2, [r1]
 800c764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1e4      	bne.n	800c736 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	f003 0310 	and.w	r3, r3, #16
 800c776:	2b10      	cmp	r3, #16
 800c778:	d103      	bne.n	800c782 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2210      	movs	r2, #16
 800c780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7fe fe28 	bl	800b3e0 <HAL_UARTEx_RxEventCallback>
 800c790:	e002      	b.n	800c798 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7f7 f908 	bl	80039a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c798:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d006      	beq.n	800c7ae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c7a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f47f aecf 	bne.w	800c54c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d049      	beq.n	800c854 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d242      	bcs.n	800c854 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	e853 3f00 	ldrex	r3, [r3]
 800c7dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c7f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7fa:	e841 2300 	strex	r3, r2, [r1]
 800c7fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e3      	bne.n	800c7ce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a15      	ldr	r2, [pc, #84]	; (800c860 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c80a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	60bb      	str	r3, [r7, #8]
   return(result);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f043 0320 	orr.w	r3, r3, #32
 800c820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	461a      	mov	r2, r3
 800c82a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c82e:	61bb      	str	r3, [r7, #24]
 800c830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	6979      	ldr	r1, [r7, #20]
 800c834:	69ba      	ldr	r2, [r7, #24]
 800c836:	e841 2300 	strex	r3, r2, [r1]
 800c83a:	613b      	str	r3, [r7, #16]
   return(result);
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1e4      	bne.n	800c80c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c842:	e007      	b.n	800c854 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	699a      	ldr	r2, [r3, #24]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f042 0208 	orr.w	r2, r2, #8
 800c852:	619a      	str	r2, [r3, #24]
}
 800c854:	bf00      	nop
 800c856:	37b0      	adds	r7, #176	; 0xb0
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	40008000 	.word	0x40008000
 800c860:	0800c195 	.word	0x0800c195

0800c864 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b0ae      	sub	sp, #184	; 0xb8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c872:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	69db      	ldr	r3, [r3, #28]
 800c87c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c89a:	2b22      	cmp	r3, #34	; 0x22
 800c89c:	f040 8186 	bne.w	800cbac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8aa:	e129      	b.n	800cb00 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c8be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c8c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d4:	1c9a      	adds	r2, r3, #2
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d053      	beq.n	800c9aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d011      	beq.n	800c932 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c90e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00b      	beq.n	800c932 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2201      	movs	r2, #1
 800c920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c928:	f043 0201 	orr.w	r2, r3, #1
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c936:	f003 0302 	and.w	r3, r3, #2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d011      	beq.n	800c962 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c93e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00b      	beq.n	800c962 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2202      	movs	r2, #2
 800c950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c958:	f043 0204 	orr.w	r2, r3, #4
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c966:	f003 0304 	and.w	r3, r3, #4
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d011      	beq.n	800c992 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c96e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00b      	beq.n	800c992 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2204      	movs	r2, #4
 800c980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c988:	f043 0202 	orr.w	r2, r3, #2
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d006      	beq.n	800c9aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7fe fd16 	bl	800b3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f040 80a4 	bne.w	800cb00 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9e6:	e841 2300 	strex	r3, r2, [r1]
 800c9ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1e2      	bne.n	800c9b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9fc:	e853 3f00 	ldrex	r3, [r3]
 800ca00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca08:	f023 0301 	bic.w	r3, r3, #1
 800ca0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3308      	adds	r3, #8
 800ca16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca22:	e841 2300 	strex	r3, r2, [r1]
 800ca26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1e1      	bne.n	800c9f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a5f      	ldr	r2, [pc, #380]	; (800cbc4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d021      	beq.n	800ca90 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01a      	beq.n	800ca90 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca84:	e841 2300 	strex	r3, r2, [r1]
 800ca88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e4      	bne.n	800ca5a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d130      	bne.n	800cafa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	e853 3f00 	ldrex	r3, [r3]
 800caaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caae:	f023 0310 	bic.w	r3, r3, #16
 800cab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cac0:	647b      	str	r3, [r7, #68]	; 0x44
 800cac2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cac8:	e841 2300 	strex	r3, r2, [r1]
 800cacc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e4      	bne.n	800ca9e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	f003 0310 	and.w	r3, r3, #16
 800cade:	2b10      	cmp	r3, #16
 800cae0:	d103      	bne.n	800caea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2210      	movs	r2, #16
 800cae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7fe fc74 	bl	800b3e0 <HAL_UARTEx_RxEventCallback>
 800caf8:	e002      	b.n	800cb00 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7f6 ff54 	bl	80039a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb00:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800cb08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb0c:	f003 0320 	and.w	r3, r3, #32
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f47f aecb 	bne.w	800c8ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb1c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d049      	beq.n	800cbbc <UART_RxISR_16BIT_FIFOEN+0x358>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb2e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d242      	bcs.n	800cbbc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	e853 3f00 	ldrex	r3, [r3]
 800cb44:	623b      	str	r3, [r7, #32]
   return(result);
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3308      	adds	r3, #8
 800cb56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb5a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e3      	bne.n	800cb36 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cb72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	e853 3f00 	ldrex	r3, [r3]
 800cb80:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f043 0320 	orr.w	r3, r3, #32
 800cb88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	461a      	mov	r2, r3
 800cb92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9a:	69b9      	ldr	r1, [r7, #24]
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	e841 2300 	strex	r3, r2, [r1]
 800cba2:	617b      	str	r3, [r7, #20]
   return(result);
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e4      	bne.n	800cb74 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbaa:	e007      	b.n	800cbbc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f042 0208 	orr.w	r2, r2, #8
 800cbba:	619a      	str	r2, [r3, #24]
}
 800cbbc:	bf00      	nop
 800cbbe:	37b8      	adds	r7, #184	; 0xb8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	40008000 	.word	0x40008000
 800cbc8:	0800c34d 	.word	0x0800c34d

0800cbcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bc80      	pop	{r7}
 800cbdc:	4770      	bx	lr

0800cbde <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b083      	sub	sp, #12
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbe6:	bf00      	nop
 800cbe8:	370c      	adds	r7, #12
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bc80      	pop	{r7}
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bc80      	pop	{r7}
 800cc00:	4770      	bx	lr

0800cc02 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b088      	sub	sp, #32
 800cc06:	af02      	add	r7, sp, #8
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	1d3b      	adds	r3, r7, #4
 800cc0c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d101      	bne.n	800cc22 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cc1e:	2302      	movs	r3, #2
 800cc20:	e046      	b.n	800ccb0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2224      	movs	r2, #36	; 0x24
 800cc2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0201 	bic.w	r2, r2, #1
 800cc40:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d105      	bne.n	800cc68 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cc5c:	1d3b      	adds	r3, r7, #4
 800cc5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f000 fa4b 	bl	800d0fe <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f042 0201 	orr.w	r2, r2, #1
 800cc76:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc78:	f7f5 ffe2 	bl	8002c40 <HAL_GetTick>
 800cc7c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7fe ff16 	bl	800babe <UART_WaitOnFlagUntilTimeout>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	75fb      	strb	r3, [r7, #23]
 800cc9c:	e003      	b.n	800cca6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2220      	movs	r2, #32
 800cca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b089      	sub	sp, #36	; 0x24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d101      	bne.n	800ccce <HAL_UARTEx_EnableStopMode+0x16>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e021      	b.n	800cd12 <HAL_UARTEx_EnableStopMode+0x5a>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f043 0302 	orr.w	r3, r3, #2
 800ccea:	61fb      	str	r3, [r7, #28]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6979      	ldr	r1, [r7, #20]
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	613b      	str	r3, [r7, #16]
   return(result);
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e6      	bne.n	800ccd6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3724      	adds	r7, #36	; 0x24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bc80      	pop	{r7}
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d101      	bne.n	800cd32 <HAL_UARTEx_EnableFifoMode+0x16>
 800cd2e:	2302      	movs	r3, #2
 800cd30:	e02b      	b.n	800cd8a <HAL_UARTEx_EnableFifoMode+0x6e>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2201      	movs	r2, #1
 800cd36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2224      	movs	r2, #36	; 0x24
 800cd3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f022 0201 	bic.w	r2, r2, #1
 800cd58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cd68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f9e6 	bl	800d144 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2220      	movs	r2, #32
 800cd7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd92:	b480      	push	{r7}
 800cd94:	b085      	sub	sp, #20
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d101      	bne.n	800cda8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cda4:	2302      	movs	r3, #2
 800cda6:	e027      	b.n	800cdf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2224      	movs	r2, #36	; 0x24
 800cdb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f022 0201 	bic.w	r2, r2, #1
 800cdce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cdd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2220      	movs	r2, #32
 800cdea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bc80      	pop	{r7}
 800ce00:	4770      	bx	lr

0800ce02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d101      	bne.n	800ce1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce16:	2302      	movs	r3, #2
 800ce18:	e02d      	b.n	800ce76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2224      	movs	r2, #36	; 0x24
 800ce26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 0201 	bic.w	r2, r2, #1
 800ce40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	430a      	orrs	r2, r1
 800ce54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f974 	bl	800d144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2220      	movs	r2, #32
 800ce68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce92:	2302      	movs	r3, #2
 800ce94:	e02d      	b.n	800cef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2224      	movs	r2, #36	; 0x24
 800cea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 0201 	bic.w	r2, r2, #1
 800cebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	430a      	orrs	r2, r1
 800ced0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f936 	bl	800d144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2220      	movs	r2, #32
 800cee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b088      	sub	sp, #32
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	60f8      	str	r0, [r7, #12]
 800cf02:	60b9      	str	r1, [r7, #8]
 800cf04:	603b      	str	r3, [r7, #0]
 800cf06:	4613      	mov	r3, r2
 800cf08:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	f040 80ef 	bne.w	800d0f4 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <HAL_UARTEx_ReceiveToIdle+0x28>
 800cf1c:	88fb      	ldrh	r3, [r7, #6]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d101      	bne.n	800cf26 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e0e7      	b.n	800d0f6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2222      	movs	r2, #34	; 0x22
 800cf32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf42:	f7f5 fe7d 	bl	8002c40 <HAL_GetTick>
 800cf46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	88fa      	ldrh	r2, [r7, #6]
 800cf4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	88fa      	ldrh	r2, [r7, #6]
 800cf54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf60:	d10e      	bne.n	800cf80 <HAL_UARTEx_ReceiveToIdle+0x86>
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d105      	bne.n	800cf76 <HAL_UARTEx_ReceiveToIdle+0x7c>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cf70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf74:	e02d      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	22ff      	movs	r2, #255	; 0xff
 800cf7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf7e:	e028      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10d      	bne.n	800cfa4 <HAL_UARTEx_ReceiveToIdle+0xaa>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d104      	bne.n	800cf9a <HAL_UARTEx_ReceiveToIdle+0xa0>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	22ff      	movs	r2, #255	; 0xff
 800cf94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf98:	e01b      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	227f      	movs	r2, #127	; 0x7f
 800cf9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfa2:	e016      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfac:	d10d      	bne.n	800cfca <HAL_UARTEx_ReceiveToIdle+0xd0>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d104      	bne.n	800cfc0 <HAL_UARTEx_ReceiveToIdle+0xc6>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	227f      	movs	r2, #127	; 0x7f
 800cfba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfbe:	e008      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	223f      	movs	r2, #63	; 0x3f
 800cfc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfc8:	e003      	b.n	800cfd2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfd8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfe2:	d108      	bne.n	800cff6 <HAL_UARTEx_ReceiveToIdle+0xfc>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d104      	bne.n	800cff6 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800cfec:	2300      	movs	r3, #0
 800cfee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	61bb      	str	r3, [r7, #24]
 800cff4:	e003      	b.n	800cffe <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2200      	movs	r2, #0
 800d002:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d004:	e05f      	b.n	800d0c6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	69db      	ldr	r3, [r3, #28]
 800d00c:	f003 0310 	and.w	r3, r3, #16
 800d010:	2b10      	cmp	r3, #16
 800d012:	d110      	bne.n	800d036 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2210      	movs	r2, #16
 800d01a:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d008      	beq.n	800d036 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2202      	movs	r2, #2
 800d028:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2220      	movs	r2, #32
 800d02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	e05f      	b.n	800d0f6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	f003 0320 	and.w	r3, r3, #32
 800d040:	2b20      	cmp	r3, #32
 800d042:	d12b      	bne.n	800d09c <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10c      	bne.n	800d064 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d050:	b29a      	uxth	r2, r3
 800d052:	8a7b      	ldrh	r3, [r7, #18]
 800d054:	4013      	ands	r3, r2
 800d056:	b29a      	uxth	r2, r3
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	3302      	adds	r3, #2
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	e00c      	b.n	800d07e <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	8a7b      	ldrh	r3, [r7, #18]
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	4013      	ands	r3, r2
 800d072:	b2da      	uxtb	r2, r3
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	3301      	adds	r3, #1
 800d07c:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	b29a      	uxth	r2, r3
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a2:	d010      	beq.n	800d0c6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d0a4:	f7f5 fdcc 	bl	8002c40 <HAL_GetTick>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d302      	bcc.n	800d0ba <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800d0c2:	2303      	movs	r3, #3
 800d0c4:	e017      	b.n	800d0f6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d199      	bne.n	800d006 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2220      	movs	r2, #32
 800d0ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e000      	b.n	800d0f6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800d0f4:	2302      	movs	r3, #2
  }
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3720      	adds	r7, #32
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d0fe:	b480      	push	{r7}
 800d100:	b085      	sub	sp, #20
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	1d3b      	adds	r3, r7, #4
 800d108:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	f023 0210 	bic.w	r2, r3, #16
 800d116:	893b      	ldrh	r3, [r7, #8]
 800d118:	4619      	mov	r1, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d12c:	7abb      	ldrb	r3, [r7, #10]
 800d12e:	061a      	lsls	r2, r3, #24
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	430a      	orrs	r2, r1
 800d136:	605a      	str	r2, [r3, #4]
}
 800d138:	bf00      	nop
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bc80      	pop	{r7}
 800d140:	4770      	bx	lr
	...

0800d144 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d150:	2b00      	cmp	r3, #0
 800d152:	d108      	bne.n	800d166 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d164:	e031      	b.n	800d1ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d166:	2308      	movs	r3, #8
 800d168:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d16a:	2308      	movs	r3, #8
 800d16c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	0e5b      	lsrs	r3, r3, #25
 800d176:	b2db      	uxtb	r3, r3
 800d178:	f003 0307 	and.w	r3, r3, #7
 800d17c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	0f5b      	lsrs	r3, r3, #29
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 0307 	and.w	r3, r3, #7
 800d18c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	7b3a      	ldrb	r2, [r7, #12]
 800d192:	4910      	ldr	r1, [pc, #64]	; (800d1d4 <UARTEx_SetNbDataToProcess+0x90>)
 800d194:	5c8a      	ldrb	r2, [r1, r2]
 800d196:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d19a:	7b3a      	ldrb	r2, [r7, #12]
 800d19c:	490e      	ldr	r1, [pc, #56]	; (800d1d8 <UARTEx_SetNbDataToProcess+0x94>)
 800d19e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	7b7a      	ldrb	r2, [r7, #13]
 800d1b0:	4908      	ldr	r1, [pc, #32]	; (800d1d4 <UARTEx_SetNbDataToProcess+0x90>)
 800d1b2:	5c8a      	ldrb	r2, [r1, r2]
 800d1b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1b8:	7b7a      	ldrb	r2, [r7, #13]
 800d1ba:	4907      	ldr	r1, [pc, #28]	; (800d1d8 <UARTEx_SetNbDataToProcess+0x94>)
 800d1bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1be:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1ca:	bf00      	nop
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bc80      	pop	{r7}
 800d1d2:	4770      	bx	lr
 800d1d4:	0801f638 	.word	0x0801f638
 800d1d8:	0801f640 	.word	0x0801f640

0800d1dc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d1e0:	f7f5 fbca 	bl	8002978 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d1e4:	f000 f820 	bl	800d228 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d1e8:	bf00      	nop
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f4:	f010 fd6c 	bl	801dcd0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d1f8:	bf00      	nop
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d200:	f3bf 8f4f 	dsb	sy
}
 800d204:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d206:	4b06      	ldr	r3, [pc, #24]	; (800d220 <__NVIC_SystemReset+0x24>)
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d20e:	4904      	ldr	r1, [pc, #16]	; (800d220 <__NVIC_SystemReset+0x24>)
 800d210:	4b04      	ldr	r3, [pc, #16]	; (800d224 <__NVIC_SystemReset+0x28>)
 800d212:	4313      	orrs	r3, r2
 800d214:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d216:	f3bf 8f4f 	dsb	sy
}
 800d21a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d21c:	bf00      	nop
 800d21e:	e7fd      	b.n	800d21c <__NVIC_SystemReset+0x20>
 800d220:	e000ed00 	.word	0xe000ed00
 800d224:	05fa0004 	.word	0x05fa0004

0800d228 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d22e:	2300      	movs	r3, #0
 800d230:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d232:	2300      	movs	r3, #0
 800d234:	9302      	str	r3, [sp, #8]
 800d236:	2303      	movs	r3, #3
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	2301      	movs	r3, #1
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	4b59      	ldr	r3, [pc, #356]	; (800d3a4 <LoRaWAN_Init+0x17c>)
 800d240:	2200      	movs	r2, #0
 800d242:	2100      	movs	r1, #0
 800d244:	2002      	movs	r0, #2
 800d246:	f011 f991 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d24a:	2300      	movs	r3, #0
 800d24c:	9302      	str	r3, [sp, #8]
 800d24e:	2305      	movs	r3, #5
 800d250:	9301      	str	r3, [sp, #4]
 800d252:	2302      	movs	r3, #2
 800d254:	9300      	str	r3, [sp, #0]
 800d256:	4b54      	ldr	r3, [pc, #336]	; (800d3a8 <LoRaWAN_Init+0x180>)
 800d258:	2200      	movs	r2, #0
 800d25a:	2100      	movs	r1, #0
 800d25c:	2002      	movs	r0, #2
 800d25e:	f011 f985 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d262:	2300      	movs	r3, #0
 800d264:	9302      	str	r3, [sp, #8]
 800d266:	2303      	movs	r3, #3
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	2301      	movs	r3, #1
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	4b4f      	ldr	r3, [pc, #316]	; (800d3ac <LoRaWAN_Init+0x184>)
 800d270:	2200      	movs	r2, #0
 800d272:	2100      	movs	r1, #0
 800d274:	2002      	movs	r0, #2
 800d276:	f011 f979 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d27a:	1d3b      	adds	r3, r7, #4
 800d27c:	4619      	mov	r1, r3
 800d27e:	2000      	movs	r0, #0
 800d280:	f003 f92a 	bl	80104d8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	0e1b      	lsrs	r3, r3, #24
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	461a      	mov	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	0c1b      	lsrs	r3, r3, #16
 800d290:	b2db      	uxtb	r3, r3
 800d292:	4619      	mov	r1, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	0a1b      	lsrs	r3, r3, #8
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	9101      	str	r1, [sp, #4]
 800d29e:	9200      	str	r2, [sp, #0]
 800d2a0:	4b43      	ldr	r3, [pc, #268]	; (800d3b0 <LoRaWAN_Init+0x188>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	2002      	movs	r0, #2
 800d2a8:	f011 f960 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d2ac:	1d3b      	adds	r3, r7, #4
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	f003 f911 	bl	80104d8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	0e1b      	lsrs	r3, r3, #24
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	461a      	mov	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	0c1b      	lsrs	r3, r3, #16
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	0a1b      	lsrs	r3, r3, #8
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	b2c0      	uxtb	r0, r0
 800d2d0:	9003      	str	r0, [sp, #12]
 800d2d2:	9302      	str	r3, [sp, #8]
 800d2d4:	9101      	str	r1, [sp, #4]
 800d2d6:	9200      	str	r2, [sp, #0]
 800d2d8:	4b36      	ldr	r3, [pc, #216]	; (800d3b4 <LoRaWAN_Init+0x18c>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2100      	movs	r1, #0
 800d2de:	2002      	movs	r0, #2
 800d2e0:	f011 f944 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	4b33      	ldr	r3, [pc, #204]	; (800d3b8 <LoRaWAN_Init+0x190>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d2f0:	4832      	ldr	r0, [pc, #200]	; (800d3bc <LoRaWAN_Init+0x194>)
 800d2f2:	f010 fe8d 	bl	801e010 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	4b31      	ldr	r3, [pc, #196]	; (800d3c0 <LoRaWAN_Init+0x198>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d302:	4830      	ldr	r0, [pc, #192]	; (800d3c4 <LoRaWAN_Init+0x19c>)
 800d304:	f010 fe84 	bl	801e010 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d308:	2300      	movs	r3, #0
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	4b2e      	ldr	r3, [pc, #184]	; (800d3c8 <LoRaWAN_Init+0x1a0>)
 800d30e:	2201      	movs	r2, #1
 800d310:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d314:	482d      	ldr	r0, [pc, #180]	; (800d3cc <LoRaWAN_Init+0x1a4>)
 800d316:	f010 fe7b 	bl	801e010 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d31a:	2300      	movs	r3, #0
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4b2c      	ldr	r3, [pc, #176]	; (800d3d0 <LoRaWAN_Init+0x1a8>)
 800d320:	2200      	movs	r2, #0
 800d322:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d326:	482b      	ldr	r0, [pc, #172]	; (800d3d4 <LoRaWAN_Init+0x1ac>)
 800d328:	f010 fe72 	bl	801e010 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d32c:	4a2a      	ldr	r2, [pc, #168]	; (800d3d8 <LoRaWAN_Init+0x1b0>)
 800d32e:	2100      	movs	r1, #0
 800d330:	2001      	movs	r0, #1
 800d332:	f010 fdc9 	bl	801dec8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d336:	4a29      	ldr	r2, [pc, #164]	; (800d3dc <LoRaWAN_Init+0x1b4>)
 800d338:	2100      	movs	r1, #0
 800d33a:	2002      	movs	r0, #2
 800d33c:	f010 fdc4 	bl	801dec8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d340:	4a27      	ldr	r2, [pc, #156]	; (800d3e0 <LoRaWAN_Init+0x1b8>)
 800d342:	2100      	movs	r1, #0
 800d344:	2004      	movs	r0, #4
 800d346:	f010 fdbf 	bl	801dec8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d34a:	4a26      	ldr	r2, [pc, #152]	; (800d3e4 <LoRaWAN_Init+0x1bc>)
 800d34c:	2100      	movs	r1, #0
 800d34e:	2008      	movs	r0, #8
 800d350:	f010 fdba 	bl	801dec8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d354:	f000 fcac 	bl	800dcb0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d358:	4923      	ldr	r1, [pc, #140]	; (800d3e8 <LoRaWAN_Init+0x1c0>)
 800d35a:	4824      	ldr	r0, [pc, #144]	; (800d3ec <LoRaWAN_Init+0x1c4>)
 800d35c:	f002 f9d2 	bl	800f704 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d360:	4823      	ldr	r0, [pc, #140]	; (800d3f0 <LoRaWAN_Init+0x1c8>)
 800d362:	f002 fa2b 	bl	800f7bc <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d366:	4819      	ldr	r0, [pc, #100]	; (800d3cc <LoRaWAN_Init+0x1a4>)
 800d368:	f010 fe88 	bl	801e07c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d36c:	4b21      	ldr	r3, [pc, #132]	; (800d3f4 <LoRaWAN_Init+0x1cc>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	4a21      	ldr	r2, [pc, #132]	; (800d3f8 <LoRaWAN_Init+0x1d0>)
 800d372:	7812      	ldrb	r2, [r2, #0]
 800d374:	4611      	mov	r1, r2
 800d376:	4618      	mov	r0, r3
 800d378:	f002 faee 	bl	800f958 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d37c:	4b1f      	ldr	r3, [pc, #124]	; (800d3fc <LoRaWAN_Init+0x1d4>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10b      	bne.n	800d39c <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d384:	4b1e      	ldr	r3, [pc, #120]	; (800d400 <LoRaWAN_Init+0x1d8>)
 800d386:	6819      	ldr	r1, [r3, #0]
 800d388:	2300      	movs	r3, #0
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <LoRaWAN_Init+0x1dc>)
 800d38e:	2200      	movs	r2, #0
 800d390:	481d      	ldr	r0, [pc, #116]	; (800d408 <LoRaWAN_Init+0x1e0>)
 800d392:	f010 fe3d 	bl	801e010 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d396:	481c      	ldr	r0, [pc, #112]	; (800d408 <LoRaWAN_Init+0x1e0>)
 800d398:	f010 fe70 	bl	801e07c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	0801ecf0 	.word	0x0801ecf0
 800d3a8:	0801ed14 	.word	0x0801ed14
 800d3ac:	0801ed34 	.word	0x0801ed34
 800d3b0:	0801ed54 	.word	0x0801ed54
 800d3b4:	0801ed78 	.word	0x0801ed78
 800d3b8:	0800d7d9 	.word	0x0800d7d9
 800d3bc:	20000784 	.word	0x20000784
 800d3c0:	0800d7eb 	.word	0x0800d7eb
 800d3c4:	2000079c 	.word	0x2000079c
 800d3c8:	0800d7fd 	.word	0x0800d7fd
 800d3cc:	200007b4 	.word	0x200007b4
 800d3d0:	0800dbb1 	.word	0x0800dbb1
 800d3d4:	20000678 	.word	0x20000678
 800d3d8:	0800f92d 	.word	0x0800f92d
 800d3dc:	0800d555 	.word	0x0800d555
 800d3e0:	0800dbd5 	.word	0x0800dbd5
 800d3e4:	0800db31 	.word	0x0800db31
 800d3e8:	01030000 	.word	0x01030000
 800d3ec:	20000034 	.word	0x20000034
 800d3f0:	20000080 	.word	0x20000080
 800d3f4:	20000030 	.word	0x20000030
 800d3f8:	20000031 	.word	0x20000031
 800d3fc:	2000065c 	.word	0x2000065c
 800d400:	20000098 	.word	0x20000098
 800d404:	0800d7b5 	.word	0x0800d7b5
 800d408:	20000660 	.word	0x20000660

0800d40c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d40c:	b5b0      	push	{r4, r5, r7, lr}
 800d40e:	b08a      	sub	sp, #40	; 0x28
 800d410:	af06      	add	r7, sp, #24
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 8086 	beq.w	800d52e <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d422:	4845      	ldr	r0, [pc, #276]	; (800d538 <OnRxData+0x12c>)
 800d424:	f010 fe2a 	bl	801e07c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d05a      	beq.n	800d4e6 <OnRxData+0xda>
    {
      if (appData != NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d057      	beq.n	800d4e6 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d050      	beq.n	800d4e6 <OnRxData+0xda>
        {
    switch (appData->Port)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d01f      	beq.n	800d48c <OnRxData+0x80>
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d145      	bne.n	800d4dc <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	785b      	ldrb	r3, [r3, #1]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d143      	bne.n	800d4e0 <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	d00e      	beq.n	800d480 <OnRxData+0x74>
 800d462:	2b02      	cmp	r3, #2
 800d464:	dc10      	bgt.n	800d488 <OnRxData+0x7c>
 800d466:	2b00      	cmp	r3, #0
 800d468:	d002      	beq.n	800d470 <OnRxData+0x64>
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d004      	beq.n	800d478 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d46e:	e00b      	b.n	800d488 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d470:	2000      	movs	r0, #0
 800d472:	f002 fc39 	bl	800fce8 <LmHandlerRequestClass>
              break;
 800d476:	e008      	b.n	800d48a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d478:	2001      	movs	r0, #1
 800d47a:	f002 fc35 	bl	800fce8 <LmHandlerRequestClass>
              break;
 800d47e:	e004      	b.n	800d48a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d480:	2002      	movs	r0, #2
 800d482:	f002 fc31 	bl	800fce8 <LmHandlerRequestClass>
              break;
 800d486:	e000      	b.n	800d48a <OnRxData+0x7e>
              break;
 800d488:	bf00      	nop
          }
        }
        break;
 800d48a:	e029      	b.n	800d4e0 <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	785b      	ldrb	r3, [r3, #1]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d127      	bne.n	800d4e4 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	4b26      	ldr	r3, [pc, #152]	; (800d53c <OnRxData+0x130>)
 800d4a2:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d4a4:	4b25      	ldr	r3, [pc, #148]	; (800d53c <OnRxData+0x130>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10b      	bne.n	800d4c4 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d4ac:	4b24      	ldr	r3, [pc, #144]	; (800d540 <OnRxData+0x134>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	2003      	movs	r0, #3
 800d4b4:	f011 f85a 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	2120      	movs	r1, #32
 800d4bc:	4821      	ldr	r0, [pc, #132]	; (800d544 <OnRxData+0x138>)
 800d4be:	f7f8 fe4f 	bl	8006160 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d4c2:	e00f      	b.n	800d4e4 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d4c4:	4b20      	ldr	r3, [pc, #128]	; (800d548 <OnRxData+0x13c>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	2003      	movs	r0, #3
 800d4cc:	f011 f84e 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	2120      	movs	r1, #32
 800d4d4:	481b      	ldr	r0, [pc, #108]	; (800d544 <OnRxData+0x138>)
 800d4d6:	f7f8 fe43 	bl	8006160 <HAL_GPIO_WritePin>
        break;
 800d4da:	e003      	b.n	800d4e4 <OnRxData+0xd8>

      default:

        break;
 800d4dc:	bf00      	nop
 800d4de:	e002      	b.n	800d4e6 <OnRxData+0xda>
        break;
 800d4e0:	bf00      	nop
 800d4e2:	e000      	b.n	800d4e6 <OnRxData+0xda>
        break;
 800d4e4:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	7c1b      	ldrb	r3, [r3, #16]
 800d4ea:	2b05      	cmp	r3, #5
 800d4ec:	d81f      	bhi.n	800d52e <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	7bfa      	ldrb	r2, [r7, #15]
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	7c09      	ldrb	r1, [r1, #16]
 800d500:	4608      	mov	r0, r1
 800d502:	4912      	ldr	r1, [pc, #72]	; (800d54c <OnRxData+0x140>)
 800d504:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d508:	6838      	ldr	r0, [r7, #0]
 800d50a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d50e:	4605      	mov	r5, r0
 800d510:	6838      	ldr	r0, [r7, #0]
 800d512:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d516:	9005      	str	r0, [sp, #20]
 800d518:	9504      	str	r5, [sp, #16]
 800d51a:	9103      	str	r1, [sp, #12]
 800d51c:	9402      	str	r4, [sp, #8]
 800d51e:	9201      	str	r2, [sp, #4]
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	4b0b      	ldr	r3, [pc, #44]	; (800d550 <OnRxData+0x144>)
 800d524:	2200      	movs	r2, #0
 800d526:	2100      	movs	r1, #0
 800d528:	2003      	movs	r0, #3
 800d52a:	f011 f81f 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d52e:	bf00      	nop
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bdb0      	pop	{r4, r5, r7, pc}
 800d536:	bf00      	nop
 800d538:	2000079c 	.word	0x2000079c
 800d53c:	20000782 	.word	0x20000782
 800d540:	0801ed9c 	.word	0x0801ed9c
 800d544:	48000400 	.word	0x48000400
 800d548:	0801eda8 	.word	0x0801eda8
 800d54c:	20000018 	.word	0x20000018
 800d550:	0801edb4 	.word	0x0801edb4

0800d554 <SendTxData>:

static void SendTxData(void)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08c      	sub	sp, #48	; 0x30
 800d558:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d55a:	23ff      	movs	r3, #255	; 0xff
 800d55c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d560:	f7f5 fa3e 	bl	80029e0 <GetBatteryLevel>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d576:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	4b7d      	ldr	r3, [pc, #500]	; (800d774 <SendTxData+0x220>)
 800d57e:	2201      	movs	r2, #1
 800d580:	2100      	movs	r1, #0
 800d582:	2002      	movs	r0, #2
 800d584:	f010 fff2 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7f3 fbd8 	bl	8000d40 <__aeabi_f2iz>
 800d590:	4603      	mov	r3, r0
 800d592:	b21b      	sxth	r3, r3
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	4b78      	ldr	r3, [pc, #480]	; (800d778 <SendTxData+0x224>)
 800d598:	2201      	movs	r2, #1
 800d59a:	2100      	movs	r1, #0
 800d59c:	2002      	movs	r0, #2
 800d59e:	f010 ffe5 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d5a2:	4b76      	ldr	r3, [pc, #472]	; (800d77c <SendTxData+0x228>)
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800d5a8:	4b75      	ldr	r3, [pc, #468]	; (800d780 <SendTxData+0x22c>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	4a75      	ldr	r2, [pc, #468]	; (800d784 <SendTxData+0x230>)
 800d5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b2:	095b      	lsrs	r3, r3, #5
 800d5b4:	b298      	uxth	r0, r3
 800d5b6:	4b71      	ldr	r3, [pc, #452]	; (800d77c <SendTxData+0x228>)
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	1c59      	adds	r1, r3, #1
 800d5be:	61f9      	str	r1, [r7, #28]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	b2c2      	uxtb	r2, r0
 800d5c4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800d5c6:	4b6e      	ldr	r3, [pc, #440]	; (800d780 <SendTxData+0x22c>)
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	4a6e      	ldr	r2, [pc, #440]	; (800d784 <SendTxData+0x230>)
 800d5cc:	fba2 1203 	umull	r1, r2, r2, r3
 800d5d0:	0952      	lsrs	r2, r2, #5
 800d5d2:	2164      	movs	r1, #100	; 0x64
 800d5d4:	fb01 f202 	mul.w	r2, r1, r2
 800d5d8:	1a9b      	subs	r3, r3, r2
 800d5da:	b298      	uxth	r0, r3
 800d5dc:	4b67      	ldr	r3, [pc, #412]	; (800d77c <SendTxData+0x228>)
 800d5de:	685a      	ldr	r2, [r3, #4]
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	1c59      	adds	r1, r3, #1
 800d5e4:	61f9      	str	r1, [r7, #28]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	b2c2      	uxtb	r2, r0
 800d5ea:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d5ec:	4b66      	ldr	r3, [pc, #408]	; (800d788 <SendTxData+0x234>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7f2 ff2d 	bl	8000450 <__aeabi_f2d>
 800d5f6:	f04f 0200 	mov.w	r2, #0
 800d5fa:	4b64      	ldr	r3, [pc, #400]	; (800d78c <SendTxData+0x238>)
 800d5fc:	f7f2 ff80 	bl	8000500 <__aeabi_dmul>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4610      	mov	r0, r2
 800d606:	4619      	mov	r1, r3
 800d608:	f7f3 fa14 	bl	8000a34 <__aeabi_d2iz>
 800d60c:	4603      	mov	r3, r0
 800d60e:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d610:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d614:	4a5b      	ldr	r2, [pc, #364]	; (800d784 <SendTxData+0x230>)
 800d616:	fb82 1203 	smull	r1, r2, r2, r3
 800d61a:	1152      	asrs	r2, r2, #5
 800d61c:	17db      	asrs	r3, r3, #31
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	b218      	sxth	r0, r3
 800d622:	4b56      	ldr	r3, [pc, #344]	; (800d77c <SendTxData+0x228>)
 800d624:	685a      	ldr	r2, [r3, #4]
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	1c59      	adds	r1, r3, #1
 800d62a:	61f9      	str	r1, [r7, #28]
 800d62c:	4413      	add	r3, r2
 800d62e:	b2c2      	uxtb	r2, r0
 800d630:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d632:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d636:	4a53      	ldr	r2, [pc, #332]	; (800d784 <SendTxData+0x230>)
 800d638:	fb82 1203 	smull	r1, r2, r2, r3
 800d63c:	1151      	asrs	r1, r2, #5
 800d63e:	17da      	asrs	r2, r3, #31
 800d640:	1a8a      	subs	r2, r1, r2
 800d642:	2164      	movs	r1, #100	; 0x64
 800d644:	fb01 f202 	mul.w	r2, r1, r2
 800d648:	1a9b      	subs	r3, r3, r2
 800d64a:	b218      	sxth	r0, r3
 800d64c:	4b4b      	ldr	r3, [pc, #300]	; (800d77c <SendTxData+0x228>)
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	1c59      	adds	r1, r3, #1
 800d654:	61f9      	str	r1, [r7, #28]
 800d656:	4413      	add	r3, r2
 800d658:	b2c2      	uxtb	r2, r0
 800d65a:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d65c:	4b4c      	ldr	r3, [pc, #304]	; (800d790 <SendTxData+0x23c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4618      	mov	r0, r3
 800d662:	f7f2 fef5 	bl	8000450 <__aeabi_f2d>
 800d666:	f04f 0200 	mov.w	r2, #0
 800d66a:	4b48      	ldr	r3, [pc, #288]	; (800d78c <SendTxData+0x238>)
 800d66c:	f7f2 ff48 	bl	8000500 <__aeabi_dmul>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4610      	mov	r0, r2
 800d676:	4619      	mov	r1, r3
 800d678:	f7f3 f9dc 	bl	8000a34 <__aeabi_d2iz>
 800d67c:	4603      	mov	r3, r0
 800d67e:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d680:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d684:	4a3f      	ldr	r2, [pc, #252]	; (800d784 <SendTxData+0x230>)
 800d686:	fb82 1203 	smull	r1, r2, r2, r3
 800d68a:	1152      	asrs	r2, r2, #5
 800d68c:	17db      	asrs	r3, r3, #31
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	b218      	sxth	r0, r3
 800d692:	4b3a      	ldr	r3, [pc, #232]	; (800d77c <SendTxData+0x228>)
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	1c59      	adds	r1, r3, #1
 800d69a:	61f9      	str	r1, [r7, #28]
 800d69c:	4413      	add	r3, r2
 800d69e:	b2c2      	uxtb	r2, r0
 800d6a0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d6a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d6a6:	4a37      	ldr	r2, [pc, #220]	; (800d784 <SendTxData+0x230>)
 800d6a8:	fb82 1203 	smull	r1, r2, r2, r3
 800d6ac:	1151      	asrs	r1, r2, #5
 800d6ae:	17da      	asrs	r2, r3, #31
 800d6b0:	1a8a      	subs	r2, r1, r2
 800d6b2:	2164      	movs	r1, #100	; 0x64
 800d6b4:	fb01 f202 	mul.w	r2, r1, r2
 800d6b8:	1a9b      	subs	r3, r3, r2
 800d6ba:	b218      	sxth	r0, r3
 800d6bc:	4b2f      	ldr	r3, [pc, #188]	; (800d77c <SendTxData+0x228>)
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	1c59      	adds	r1, r3, #1
 800d6c4:	61f9      	str	r1, [r7, #28]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	b2c2      	uxtb	r2, r0
 800d6ca:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	4b2a      	ldr	r3, [pc, #168]	; (800d77c <SendTxData+0x228>)
 800d6d2:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6d4:	4b2f      	ldr	r3, [pc, #188]	; (800d794 <SendTxData+0x240>)
 800d6d6:	7a5b      	ldrb	r3, [r3, #9]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d007      	beq.n	800d6ec <SendTxData+0x198>
 800d6dc:	f002 f9e0 	bl	800faa0 <LmHandlerJoinStatus>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d102      	bne.n	800d6ec <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d6e6:	482b      	ldr	r0, [pc, #172]	; (800d794 <SendTxData+0x240>)
 800d6e8:	f010 fd36 	bl	801e158 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d6ec:	4b2a      	ldr	r3, [pc, #168]	; (800d798 <SendTxData+0x244>)
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4821      	ldr	r0, [pc, #132]	; (800d77c <SendTxData+0x228>)
 800d6f6:	f002 f9ef 	bl	800fad8 <LmHandlerSend>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d700:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d704:	2b00      	cmp	r3, #0
 800d706:	d106      	bne.n	800d716 <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d708:	4b24      	ldr	r3, [pc, #144]	; (800d79c <SendTxData+0x248>)
 800d70a:	2201      	movs	r2, #1
 800d70c:	2100      	movs	r1, #0
 800d70e:	2001      	movs	r0, #1
 800d710:	f010 ff2c 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
 800d714:	e016      	b.n	800d744 <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d716:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d71a:	f113 0f06 	cmn.w	r3, #6
 800d71e:	d111      	bne.n	800d744 <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d720:	f002 f910 	bl	800f944 <LmHandlerGetDutyCycleWaitTime>
 800d724:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00b      	beq.n	800d744 <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	4a1c      	ldr	r2, [pc, #112]	; (800d7a0 <SendTxData+0x24c>)
 800d730:	fba2 2303 	umull	r2, r3, r2, r3
 800d734:	099b      	lsrs	r3, r3, #6
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	4b1a      	ldr	r3, [pc, #104]	; (800d7a4 <SendTxData+0x250>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	2100      	movs	r1, #0
 800d73e:	2001      	movs	r0, #1
 800d740:	f010 ff14 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d744:	4b18      	ldr	r3, [pc, #96]	; (800d7a8 <SendTxData+0x254>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10f      	bne.n	800d76c <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d74c:	4817      	ldr	r0, [pc, #92]	; (800d7ac <SendTxData+0x258>)
 800d74e:	f010 fd03 	bl	801e158 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d752:	4b17      	ldr	r3, [pc, #92]	; (800d7b0 <SendTxData+0x25c>)
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	4293      	cmp	r3, r2
 800d75a:	bf38      	it	cc
 800d75c:	4613      	movcc	r3, r2
 800d75e:	4619      	mov	r1, r3
 800d760:	4812      	ldr	r0, [pc, #72]	; (800d7ac <SendTxData+0x258>)
 800d762:	f010 fd69 	bl	801e238 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d766:	4811      	ldr	r0, [pc, #68]	; (800d7ac <SendTxData+0x258>)
 800d768:	f010 fc88 	bl	801e07c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d76c:	bf00      	nop
 800d76e:	3728      	adds	r7, #40	; 0x28
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	0801edfc 	.word	0x0801edfc
 800d778:	0801ee08 	.word	0x0801ee08
 800d77c:	2000009c 	.word	0x2000009c
 800d780:	20000264 	.word	0x20000264
 800d784:	51eb851f 	.word	0x51eb851f
 800d788:	20000268 	.word	0x20000268
 800d78c:	40590000 	.word	0x40590000
 800d790:	2000026c 	.word	0x2000026c
 800d794:	200007b4 	.word	0x200007b4
 800d798:	20000080 	.word	0x20000080
 800d79c:	0801ee14 	.word	0x0801ee14
 800d7a0:	10624dd3 	.word	0x10624dd3
 800d7a4:	0801ee24 	.word	0x0801ee24
 800d7a8:	2000065c 	.word	0x2000065c
 800d7ac:	20000660 	.word	0x20000660
 800d7b0:	20000098 	.word	0x20000098

0800d7b4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d7bc:	2100      	movs	r1, #0
 800d7be:	2002      	movs	r0, #2
 800d7c0:	f010 fba4 	bl	801df0c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d7c4:	4803      	ldr	r0, [pc, #12]	; (800d7d4 <OnTxTimerEvent+0x20>)
 800d7c6:	f010 fc59 	bl	801e07c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20000660 	.word	0x20000660

0800d7d8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bc80      	pop	{r7}
 800d7e8:	4770      	bx	lr

0800d7ea <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b083      	sub	sp, #12
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d7f2:	bf00      	nop
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bc80      	pop	{r7}
 800d7fa:	4770      	bx	lr

0800d7fc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	bc80      	pop	{r7}
 800d80c:	4770      	bx	lr
	...

0800d810 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af04      	add	r7, sp, #16
 800d816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d041      	beq.n	800d8a2 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d03d      	beq.n	800d8a2 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d826:	4821      	ldr	r0, [pc, #132]	; (800d8ac <OnTxData+0x9c>)
 800d828:	f010 fc28 	bl	801e07c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d82c:	4b20      	ldr	r3, [pc, #128]	; (800d8b0 <OnTxData+0xa0>)
 800d82e:	2200      	movs	r2, #0
 800d830:	2100      	movs	r1, #0
 800d832:	2002      	movs	r0, #2
 800d834:	f010 fe9a 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	7c12      	ldrb	r2, [r2, #16]
 800d840:	4611      	mov	r1, r2
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d848:	4610      	mov	r0, r2
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d850:	9203      	str	r2, [sp, #12]
 800d852:	9002      	str	r0, [sp, #8]
 800d854:	9101      	str	r1, [sp, #4]
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	4b16      	ldr	r3, [pc, #88]	; (800d8b4 <OnTxData+0xa4>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	2100      	movs	r1, #0
 800d85e:	2003      	movs	r0, #3
 800d860:	f010 fe84 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d864:	4b14      	ldr	r3, [pc, #80]	; (800d8b8 <OnTxData+0xa8>)
 800d866:	2200      	movs	r2, #0
 800d868:	2100      	movs	r1, #0
 800d86a:	2003      	movs	r0, #3
 800d86c:	f010 fe7e 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7a1b      	ldrb	r3, [r3, #8]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d10e      	bne.n	800d896 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	7a5b      	ldrb	r3, [r3, #9]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <OnTxData+0x74>
 800d880:	4b0e      	ldr	r3, [pc, #56]	; (800d8bc <OnTxData+0xac>)
 800d882:	e000      	b.n	800d886 <OnTxData+0x76>
 800d884:	4b0e      	ldr	r3, [pc, #56]	; (800d8c0 <OnTxData+0xb0>)
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	4b0e      	ldr	r3, [pc, #56]	; (800d8c4 <OnTxData+0xb4>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	2100      	movs	r1, #0
 800d88e:	2003      	movs	r0, #3
 800d890:	f010 fe6c 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d894:	e005      	b.n	800d8a2 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d896:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <OnTxData+0xb8>)
 800d898:	2200      	movs	r2, #0
 800d89a:	2100      	movs	r1, #0
 800d89c:	2003      	movs	r0, #3
 800d89e:	f010 fe65 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20000784 	.word	0x20000784
 800d8b0:	0801ee44 	.word	0x0801ee44
 800d8b4:	0801ee78 	.word	0x0801ee78
 800d8b8:	0801eeac 	.word	0x0801eeac
 800d8bc:	0801eebc 	.word	0x0801eebc
 800d8c0:	0801eec0 	.word	0x0801eec0
 800d8c4:	0801eec8 	.word	0x0801eec8
 800d8c8:	0801eedc 	.word	0x0801eedc

0800d8cc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d035      	beq.n	800d946 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d11a      	bne.n	800d91a <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d8e4:	481a      	ldr	r0, [pc, #104]	; (800d950 <OnJoinRequest+0x84>)
 800d8e6:	f010 fc37 	bl	801e158 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d8ea:	4b1a      	ldr	r3, [pc, #104]	; (800d954 <OnJoinRequest+0x88>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	2002      	movs	r0, #2
 800d8f2:	f010 fe3b 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	79db      	ldrb	r3, [r3, #7]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d106      	bne.n	800d90c <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d8fe:	4b16      	ldr	r3, [pc, #88]	; (800d958 <OnJoinRequest+0x8c>)
 800d900:	2200      	movs	r2, #0
 800d902:	2100      	movs	r1, #0
 800d904:	2002      	movs	r0, #2
 800d906:	f010 fe31 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d90a:	e01c      	b.n	800d946 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d90c:	4b13      	ldr	r3, [pc, #76]	; (800d95c <OnJoinRequest+0x90>)
 800d90e:	2200      	movs	r2, #0
 800d910:	2100      	movs	r1, #0
 800d912:	2002      	movs	r0, #2
 800d914:	f010 fe2a 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 800d918:	e015      	b.n	800d946 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d91a:	4b11      	ldr	r3, [pc, #68]	; (800d960 <OnJoinRequest+0x94>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	2100      	movs	r1, #0
 800d920:	2002      	movs	r0, #2
 800d922:	f010 fe23 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	79db      	ldrb	r3, [r3, #7]
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d10b      	bne.n	800d946 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d92e:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <OnJoinRequest+0x98>)
 800d930:	2200      	movs	r2, #0
 800d932:	2100      	movs	r1, #0
 800d934:	2002      	movs	r0, #2
 800d936:	f010 fe19 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d93a:	4b0b      	ldr	r3, [pc, #44]	; (800d968 <OnJoinRequest+0x9c>)
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	2101      	movs	r1, #1
 800d940:	4618      	mov	r0, r3
 800d942:	f002 f809 	bl	800f958 <LmHandlerJoin>
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	200007b4 	.word	0x200007b4
 800d954:	0801eeec 	.word	0x0801eeec
 800d958:	0801ef04 	.word	0x0801ef04
 800d95c:	0801ef24 	.word	0x0801ef24
 800d960:	0801ef44 	.word	0x0801ef44
 800d964:	0801ef60 	.word	0x0801ef60
 800d968:	20000030 	.word	0x20000030

0800d96c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d96e:	b093      	sub	sp, #76	; 0x4c
 800d970:	af0c      	add	r7, sp, #48	; 0x30
 800d972:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d056      	beq.n	800da28 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	785b      	ldrb	r3, [r3, #1]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d008      	beq.n	800d994 <OnBeaconStatusChange+0x28>
 800d982:	2b03      	cmp	r3, #3
 800d984:	d049      	beq.n	800da1a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d986:	4b2a      	ldr	r3, [pc, #168]	; (800da30 <OnBeaconStatusChange+0xc4>)
 800d988:	2200      	movs	r2, #0
 800d98a:	2100      	movs	r1, #0
 800d98c:	2002      	movs	r0, #2
 800d98e:	f010 fded 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d992:	e049      	b.n	800da28 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	7c1b      	ldrb	r3, [r3, #16]
 800d998:	4618      	mov	r0, r3
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d9a0:	461c      	mov	r4, r3
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d9a8:	461d      	mov	r5, r3
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	6852      	ldr	r2, [r2, #4]
 800d9b2:	6979      	ldr	r1, [r7, #20]
 800d9b4:	7d49      	ldrb	r1, [r1, #21]
 800d9b6:	460e      	mov	r6, r1
 800d9b8:	6979      	ldr	r1, [r7, #20]
 800d9ba:	7d89      	ldrb	r1, [r1, #22]
 800d9bc:	6139      	str	r1, [r7, #16]
 800d9be:	6979      	ldr	r1, [r7, #20]
 800d9c0:	7dc9      	ldrb	r1, [r1, #23]
 800d9c2:	60f9      	str	r1, [r7, #12]
 800d9c4:	6979      	ldr	r1, [r7, #20]
 800d9c6:	7e09      	ldrb	r1, [r1, #24]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	6979      	ldr	r1, [r7, #20]
 800d9cc:	7e49      	ldrb	r1, [r1, #25]
 800d9ce:	6079      	str	r1, [r7, #4]
 800d9d0:	6979      	ldr	r1, [r7, #20]
 800d9d2:	7e89      	ldrb	r1, [r1, #26]
 800d9d4:	6039      	str	r1, [r7, #0]
 800d9d6:	6979      	ldr	r1, [r7, #20]
 800d9d8:	7ec9      	ldrb	r1, [r1, #27]
 800d9da:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9dc:	f8d7 c000 	ldr.w	ip, [r7]
 800d9e0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d9e4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d9e8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d9ec:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d9f0:	f8cd c020 	str.w	ip, [sp, #32]
 800d9f4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d9f8:	f8cd c01c 	str.w	ip, [sp, #28]
 800d9fc:	6939      	ldr	r1, [r7, #16]
 800d9fe:	9106      	str	r1, [sp, #24]
 800da00:	9605      	str	r6, [sp, #20]
 800da02:	9204      	str	r2, [sp, #16]
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	9502      	str	r5, [sp, #8]
 800da08:	9401      	str	r4, [sp, #4]
 800da0a:	9000      	str	r0, [sp, #0]
 800da0c:	4b09      	ldr	r3, [pc, #36]	; (800da34 <OnBeaconStatusChange+0xc8>)
 800da0e:	2200      	movs	r2, #0
 800da10:	2100      	movs	r1, #0
 800da12:	2002      	movs	r0, #2
 800da14:	f010 fdaa 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800da18:	e006      	b.n	800da28 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800da1a:	4b07      	ldr	r3, [pc, #28]	; (800da38 <OnBeaconStatusChange+0xcc>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	2100      	movs	r1, #0
 800da20:	2002      	movs	r0, #2
 800da22:	f010 fda3 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800da26:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800da28:	bf00      	nop
 800da2a:	371c      	adds	r7, #28
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da30:	0801ef84 	.word	0x0801ef84
 800da34:	0801ef9c 	.word	0x0801ef9c
 800da38:	0801f010 	.word	0x0801f010

0800da3c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800da40:	bf00      	nop
 800da42:	46bd      	mov	sp, r7
 800da44:	bc80      	pop	{r7}
 800da46:	4770      	bx	lr

0800da48 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	4603      	mov	r3, r0
 800da50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	4a06      	ldr	r2, [pc, #24]	; (800da70 <OnClassChange+0x28>)
 800da56:	5cd3      	ldrb	r3, [r2, r3]
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	4b06      	ldr	r3, [pc, #24]	; (800da74 <OnClassChange+0x2c>)
 800da5c:	2200      	movs	r2, #0
 800da5e:	2100      	movs	r1, #0
 800da60:	2002      	movs	r0, #2
 800da62:	f010 fd83 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800da66:	bf00      	nop
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	0801f04c 	.word	0x0801f04c
 800da74:	0801f030 	.word	0x0801f030

0800da78 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800da7c:	2100      	movs	r1, #0
 800da7e:	2001      	movs	r0, #1
 800da80:	f010 fa44 	bl	801df0c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800da84:	bf00      	nop
 800da86:	bd80      	pop	{r7, pc}

0800da88 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800da90:	4a0d      	ldr	r2, [pc, #52]	; (800dac8 <OnTxPeriodicityChanged+0x40>)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800da96:	4b0c      	ldr	r3, [pc, #48]	; (800dac8 <OnTxPeriodicityChanged+0x40>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d103      	bne.n	800daa6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800da9e:	4b0a      	ldr	r3, [pc, #40]	; (800dac8 <OnTxPeriodicityChanged+0x40>)
 800daa0:	f242 7210 	movw	r2, #10000	; 0x2710
 800daa4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800daa6:	4809      	ldr	r0, [pc, #36]	; (800dacc <OnTxPeriodicityChanged+0x44>)
 800daa8:	f010 fb56 	bl	801e158 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800daac:	4b06      	ldr	r3, [pc, #24]	; (800dac8 <OnTxPeriodicityChanged+0x40>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4619      	mov	r1, r3
 800dab2:	4806      	ldr	r0, [pc, #24]	; (800dacc <OnTxPeriodicityChanged+0x44>)
 800dab4:	f010 fbc0 	bl	801e238 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800dab8:	4804      	ldr	r0, [pc, #16]	; (800dacc <OnTxPeriodicityChanged+0x44>)
 800daba:	f010 fadf 	bl	801e07c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20000098 	.word	0x20000098
 800dacc:	20000660 	.word	0x20000660

0800dad0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800dada:	4a04      	ldr	r2, [pc, #16]	; (800daec <OnTxFrameCtrlChanged+0x1c>)
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800dae0:	bf00      	nop
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bc80      	pop	{r7}
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	20000080 	.word	0x20000080

0800daf0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800dafa:	4a04      	ldr	r2, [pc, #16]	; (800db0c <OnPingSlotPeriodicityChanged+0x1c>)
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	bc80      	pop	{r7}
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	20000080 	.word	0x20000080

0800db10 <OnSystemReset>:

static void OnSystemReset(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800db14:	f002 fd11 	bl	801053a <LmHandlerHalt>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <OnSystemReset+0x1c>
 800db1e:	f001 ffbf 	bl	800faa0 <LmHandlerJoinStatus>
 800db22:	4603      	mov	r3, r0
 800db24:	2b01      	cmp	r3, #1
 800db26:	d101      	bne.n	800db2c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800db28:	f7ff fb68 	bl	800d1fc <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800db2c:	bf00      	nop
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <StopJoin>:

static void StopJoin(void)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800db34:	4817      	ldr	r0, [pc, #92]	; (800db94 <StopJoin+0x64>)
 800db36:	f010 fb0f 	bl	801e158 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800db3a:	f002 fcf1 	bl	8010520 <LmHandlerStop>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d006      	beq.n	800db52 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800db44:	4b14      	ldr	r3, [pc, #80]	; (800db98 <StopJoin+0x68>)
 800db46:	2200      	movs	r2, #0
 800db48:	2100      	movs	r1, #0
 800db4a:	2002      	movs	r0, #2
 800db4c:	f010 fd0e 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
 800db50:	e01a      	b.n	800db88 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800db52:	4b12      	ldr	r3, [pc, #72]	; (800db9c <StopJoin+0x6c>)
 800db54:	2200      	movs	r2, #0
 800db56:	2100      	movs	r1, #0
 800db58:	2002      	movs	r0, #2
 800db5a:	f010 fd07 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800db5e:	4b10      	ldr	r3, [pc, #64]	; (800dba0 <StopJoin+0x70>)
 800db60:	2201      	movs	r2, #1
 800db62:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800db64:	4b0f      	ldr	r3, [pc, #60]	; (800dba4 <StopJoin+0x74>)
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	2002      	movs	r0, #2
 800db6c:	f010 fcfe 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800db70:	480d      	ldr	r0, [pc, #52]	; (800dba8 <StopJoin+0x78>)
 800db72:	f001 fe23 	bl	800f7bc <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800db76:	4b0a      	ldr	r3, [pc, #40]	; (800dba0 <StopJoin+0x70>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2101      	movs	r1, #1
 800db7c:	4618      	mov	r0, r3
 800db7e:	f001 feeb 	bl	800f958 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800db82:	4804      	ldr	r0, [pc, #16]	; (800db94 <StopJoin+0x64>)
 800db84:	f010 fa7a 	bl	801e07c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800db88:	4808      	ldr	r0, [pc, #32]	; (800dbac <StopJoin+0x7c>)
 800db8a:	f010 fa77 	bl	801e07c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800db8e:	bf00      	nop
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	20000660 	.word	0x20000660
 800db98:	0801f050 	.word	0x0801f050
 800db9c:	0801f070 	.word	0x0801f070
 800dba0:	20000030 	.word	0x20000030
 800dba4:	0801f084 	.word	0x0801f084
 800dba8:	20000080 	.word	0x20000080
 800dbac:	20000678 	.word	0x20000678

0800dbb0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800dbb8:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <OnStopJoinTimerEvent+0x20>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d103      	bne.n	800dbc8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	2008      	movs	r0, #8
 800dbc4:	f010 f9a2 	bl	801df0c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800dbc8:	bf00      	nop
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20000030 	.word	0x20000030

0800dbd4 <StoreContext>:

static void StoreContext(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800dbda:	23ff      	movs	r3, #255	; 0xff
 800dbdc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800dbde:	f002 fce1 	bl	80105a4 <LmHandlerNvmDataStore>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800dbe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbea:	f113 0f08 	cmn.w	r3, #8
 800dbee:	d106      	bne.n	800dbfe <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800dbf0:	4b0a      	ldr	r3, [pc, #40]	; (800dc1c <StoreContext+0x48>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	2002      	movs	r0, #2
 800dbf8:	f010 fcb8 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800dbfc:	e00a      	b.n	800dc14 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800dbfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc06:	d105      	bne.n	800dc14 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <StoreContext+0x4c>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	2002      	movs	r0, #2
 800dc10:	f010 fcac 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	0801f0a4 	.word	0x0801f0a4
 800dc20:	0801f0bc 	.word	0x0801f0bc

0800dc24 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d106      	bne.n	800dc42 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dc34:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <OnNvmDataChange+0x34>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	2100      	movs	r1, #0
 800dc3a:	2002      	movs	r0, #2
 800dc3c:	f010 fc96 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dc40:	e005      	b.n	800dc4e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dc42:	4b06      	ldr	r3, [pc, #24]	; (800dc5c <OnNvmDataChange+0x38>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	2100      	movs	r1, #0
 800dc48:	2002      	movs	r0, #2
 800dc4a:	f010 fc8f 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc4e:	bf00      	nop
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	0801f0d4 	.word	0x0801f0d4
 800dc5c:	0801f0e8 	.word	0x0801f0e8

0800dc60 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800dc6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc6e:	4807      	ldr	r0, [pc, #28]	; (800dc8c <OnStoreContextRequest+0x2c>)
 800dc70:	f7f3 fdfc 	bl	800186c <FLASH_IF_Erase>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d104      	bne.n	800dc84 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	6879      	ldr	r1, [r7, #4]
 800dc7e:	4803      	ldr	r0, [pc, #12]	; (800dc8c <OnStoreContextRequest+0x2c>)
 800dc80:	f7f3 fda4 	bl	80017cc <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800dc84:	bf00      	nop
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	0803f000 	.word	0x0803f000

0800dc90 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	4903      	ldr	r1, [pc, #12]	; (800dcac <OnRestoreContextRequest+0x1c>)
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7f3 fdbc 	bl	800181c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	0803f000 	.word	0x0803f000

0800dcb0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800dcb4:	4b15      	ldr	r3, [pc, #84]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800dcba:	4b14      	ldr	r3, [pc, #80]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800dcc0:	4b12      	ldr	r3, [pc, #72]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800dcc6:	4b11      	ldr	r3, [pc, #68]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800dccc:	4b0f      	ldr	r3, [pc, #60]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	f043 0320 	orr.w	r3, r3, #32
 800dcd4:	4a0d      	ldr	r2, [pc, #52]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcd6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800dcd8:	4b0c      	ldr	r3, [pc, #48]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10c      	bne.n	800dcfa <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800dce0:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <LoraInfo_Init+0x60>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	2100      	movs	r1, #0
 800dce6:	2000      	movs	r0, #0
 800dce8:	f010 fc40 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800dcec:	bf00      	nop
 800dcee:	f010 fc2b 	bl	801e548 <UTIL_ADV_TRACE_IsBufferEmpty>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d1fa      	bne.n	800dcee <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800dcf8:	e7fe      	b.n	800dcf8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800dcfa:	4b04      	ldr	r3, [pc, #16]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800dd00:	4b02      	ldr	r3, [pc, #8]	; (800dd0c <LoraInfo_Init+0x5c>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dd06:	bf00      	nop
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	200007cc 	.word	0x200007cc
 800dd10:	0801f0fc 	.word	0x0801f0fc

0800dd14 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dd14:	b480      	push	{r7}
 800dd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dd18:	4b02      	ldr	r3, [pc, #8]	; (800dd24 <LoraInfo_GetPtr+0x10>)
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bc80      	pop	{r7}
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	200007cc 	.word	0x200007cc

0800dd28 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dd2c:	f7f5 fe99 	bl	8003a62 <BSP_RADIO_Init>
 800dd30:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7f5 febe 	bl	8003ac4 <BSP_RADIO_ConfigRFSwitch>
 800dd48:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dd56:	f7f5 ff03 	bl	8003b60 <BSP_RADIO_GetTxConfig>
 800dd5a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dd64:	f7f5 ff03 	bl	8003b6e <BSP_RADIO_IsTCXO>
 800dd68:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dd72:	f7f5 ff03 	bl	8003b7c <BSP_RADIO_IsDCDC>
 800dd76:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7f5 fefe 	bl	8003b8a <BSP_RADIO_GetRFOMaxPowerConfig>
 800dd8e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	33f1      	adds	r3, #241	; 0xf1
 800dda4:	2210      	movs	r2, #16
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f00c f875 	bl	8019e98 <memset1>
    ctx->M_n = 0;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	22f0      	movs	r2, #240	; 0xf0
 800ddba:	2100      	movs	r1, #0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f00c f86b 	bl	8019e98 <memset1>
}
 800ddc2:	bf00      	nop
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b082      	sub	sp, #8
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	2110      	movs	r1, #16
 800ddda:	6838      	ldr	r0, [r7, #0]
 800dddc:	f000 fe5c 	bl	800ea98 <lorawan_aes_set_key>
}
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08c      	sub	sp, #48	; 0x30
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f000 80a1 	beq.w	800df42 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de06:	f1c3 0310 	rsb	r3, r3, #16
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	4293      	cmp	r3, r2
 800de0e:	bf28      	it	cs
 800de10:	4613      	movcs	r3, r2
 800de12:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f203 1201 	addw	r2, r3, #257	; 0x101
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de20:	4413      	add	r3, r2
 800de22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de24:	b292      	uxth	r2, r2
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	4618      	mov	r0, r3
 800de2a:	f00b fffa 	bl	8019e22 <memcpy1>
        ctx->M_n += mlen;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	441a      	add	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de44:	2b0f      	cmp	r3, #15
 800de46:	f240 808d 	bls.w	800df64 <AES_CMAC_Update+0x17c>
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	429a      	cmp	r2, r3
 800de50:	f000 8088 	beq.w	800df64 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800de54:	2300      	movs	r3, #0
 800de56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de58:	e015      	b.n	800de86 <AES_CMAC_Update+0x9e>
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	4413      	add	r3, r2
 800de60:	33f1      	adds	r3, #241	; 0xf1
 800de62:	781a      	ldrb	r2, [r3, #0]
 800de64:	68f9      	ldr	r1, [r7, #12]
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	440b      	add	r3, r1
 800de6a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	4053      	eors	r3, r2
 800de72:	b2d9      	uxtb	r1, r3
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	4413      	add	r3, r2
 800de7a:	33f1      	adds	r3, #241	; 0xf1
 800de7c:	460a      	mov	r2, r1
 800de7e:	701a      	strb	r2, [r3, #0]
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	3301      	adds	r3, #1
 800de84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	2b0f      	cmp	r3, #15
 800de8a:	dde6      	ble.n	800de5a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de92:	f107 0314 	add.w	r3, r7, #20
 800de96:	2210      	movs	r2, #16
 800de98:	4618      	mov	r0, r3
 800de9a:	f00b ffc2 	bl	8019e22 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	f107 0114 	add.w	r1, r7, #20
 800dea4:	f107 0314 	add.w	r3, r7, #20
 800dea8:	4618      	mov	r0, r3
 800deaa:	f000 fed3 	bl	800ec54 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	33f1      	adds	r3, #241	; 0xf1
 800deb2:	f107 0114 	add.w	r1, r7, #20
 800deb6:	2210      	movs	r2, #16
 800deb8:	4618      	mov	r0, r3
 800deba:	f00b ffb2 	bl	8019e22 <memcpy1>

        data += mlen;
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	4413      	add	r3, r2
 800dec4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dece:	e038      	b.n	800df42 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ded0:	2300      	movs	r3, #0
 800ded2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ded4:	e013      	b.n	800defe <AES_CMAC_Update+0x116>
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deda:	4413      	add	r3, r2
 800dedc:	33f1      	adds	r3, #241	; 0xf1
 800dede:	781a      	ldrb	r2, [r3, #0]
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	440b      	add	r3, r1
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	4053      	eors	r3, r2
 800deea:	b2d9      	uxtb	r1, r3
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	4413      	add	r3, r2
 800def2:	33f1      	adds	r3, #241	; 0xf1
 800def4:	460a      	mov	r2, r1
 800def6:	701a      	strb	r2, [r3, #0]
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	3301      	adds	r3, #1
 800defc:	62bb      	str	r3, [r7, #40]	; 0x28
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	2b0f      	cmp	r3, #15
 800df02:	dde8      	ble.n	800ded6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800df0a:	f107 0314 	add.w	r3, r7, #20
 800df0e:	2210      	movs	r2, #16
 800df10:	4618      	mov	r0, r3
 800df12:	f00b ff86 	bl	8019e22 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	f107 0114 	add.w	r1, r7, #20
 800df1c:	f107 0314 	add.w	r3, r7, #20
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fe97 	bl	800ec54 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	33f1      	adds	r3, #241	; 0xf1
 800df2a:	f107 0114 	add.w	r1, r7, #20
 800df2e:	2210      	movs	r2, #16
 800df30:	4618      	mov	r0, r3
 800df32:	f00b ff76 	bl	8019e22 <memcpy1>

        data += 16;
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	3310      	adds	r3, #16
 800df3a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3b10      	subs	r3, #16
 800df40:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b10      	cmp	r3, #16
 800df46:	d8c3      	bhi.n	800ded0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	b292      	uxth	r2, r2
 800df52:	68b9      	ldr	r1, [r7, #8]
 800df54:	4618      	mov	r0, r3
 800df56:	f00b ff64 	bl	8019e22 <memcpy1>
    ctx->M_n = len;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800df62:	e000      	b.n	800df66 <AES_CMAC_Update+0x17e>
            return;
 800df64:	bf00      	nop
}
 800df66:	3730      	adds	r7, #48	; 0x30
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b092      	sub	sp, #72	; 0x48
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800df76:	f107 031c 	add.w	r3, r7, #28
 800df7a:	2210      	movs	r2, #16
 800df7c:	2100      	movs	r1, #0
 800df7e:	4618      	mov	r0, r3
 800df80:	f00b ff8a 	bl	8019e98 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	f107 011c 	add.w	r1, r7, #28
 800df8a:	f107 031c 	add.w	r3, r7, #28
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 fe60 	bl	800ec54 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800df94:	7f3b      	ldrb	r3, [r7, #28]
 800df96:	b25b      	sxtb	r3, r3
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da30      	bge.n	800dffe <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800df9c:	2300      	movs	r3, #0
 800df9e:	647b      	str	r3, [r7, #68]	; 0x44
 800dfa0:	e01b      	b.n	800dfda <AES_CMAC_Final+0x6e>
 800dfa2:	f107 021c 	add.w	r2, r7, #28
 800dfa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa8:	4413      	add	r3, r2
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	005b      	lsls	r3, r3, #1
 800dfae:	b25a      	sxtb	r2, r3
 800dfb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	3348      	adds	r3, #72	; 0x48
 800dfb6:	443b      	add	r3, r7
 800dfb8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dfbc:	09db      	lsrs	r3, r3, #7
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	b25b      	sxtb	r3, r3
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	b25b      	sxtb	r3, r3
 800dfc6:	b2d9      	uxtb	r1, r3
 800dfc8:	f107 021c 	add.w	r2, r7, #28
 800dfcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfce:	4413      	add	r3, r2
 800dfd0:	460a      	mov	r2, r1
 800dfd2:	701a      	strb	r2, [r3, #0]
 800dfd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	647b      	str	r3, [r7, #68]	; 0x44
 800dfda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfdc:	2b0e      	cmp	r3, #14
 800dfde:	dde0      	ble.n	800dfa2 <AES_CMAC_Final+0x36>
 800dfe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfe4:	005b      	lsls	r3, r3, #1
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dfec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dff0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dff4:	43db      	mvns	r3, r3
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dffc:	e027      	b.n	800e04e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dffe:	2300      	movs	r3, #0
 800e000:	643b      	str	r3, [r7, #64]	; 0x40
 800e002:	e01b      	b.n	800e03c <AES_CMAC_Final+0xd0>
 800e004:	f107 021c 	add.w	r2, r7, #28
 800e008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e00a:	4413      	add	r3, r2
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	b25a      	sxtb	r2, r3
 800e012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e014:	3301      	adds	r3, #1
 800e016:	3348      	adds	r3, #72	; 0x48
 800e018:	443b      	add	r3, r7
 800e01a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e01e:	09db      	lsrs	r3, r3, #7
 800e020:	b2db      	uxtb	r3, r3
 800e022:	b25b      	sxtb	r3, r3
 800e024:	4313      	orrs	r3, r2
 800e026:	b25b      	sxtb	r3, r3
 800e028:	b2d9      	uxtb	r1, r3
 800e02a:	f107 021c 	add.w	r2, r7, #28
 800e02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e030:	4413      	add	r3, r2
 800e032:	460a      	mov	r2, r1
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e038:	3301      	adds	r3, #1
 800e03a:	643b      	str	r3, [r7, #64]	; 0x40
 800e03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e03e:	2b0e      	cmp	r3, #14
 800e040:	dde0      	ble.n	800e004 <AES_CMAC_Final+0x98>
 800e042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e054:	2b10      	cmp	r3, #16
 800e056:	d11d      	bne.n	800e094 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e058:	2300      	movs	r3, #0
 800e05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e05c:	e016      	b.n	800e08c <AES_CMAC_Final+0x120>
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e062:	4413      	add	r3, r2
 800e064:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e068:	781a      	ldrb	r2, [r3, #0]
 800e06a:	f107 011c 	add.w	r1, r7, #28
 800e06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e070:	440b      	add	r3, r1
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	4053      	eors	r3, r2
 800e076:	b2d9      	uxtb	r1, r3
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07c:	4413      	add	r3, r2
 800e07e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e082:	460a      	mov	r2, r1
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e088:	3301      	adds	r3, #1
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08e:	2b0f      	cmp	r3, #15
 800e090:	dde5      	ble.n	800e05e <AES_CMAC_Final+0xf2>
 800e092:	e096      	b.n	800e1c2 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e094:	7f3b      	ldrb	r3, [r7, #28]
 800e096:	b25b      	sxtb	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da30      	bge.n	800e0fe <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e09c:	2300      	movs	r3, #0
 800e09e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0a0:	e01b      	b.n	800e0da <AES_CMAC_Final+0x16e>
 800e0a2:	f107 021c 	add.w	r2, r7, #28
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	4413      	add	r3, r2
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	b25a      	sxtb	r2, r3
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	3348      	adds	r3, #72	; 0x48
 800e0b6:	443b      	add	r3, r7
 800e0b8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e0bc:	09db      	lsrs	r3, r3, #7
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	b25b      	sxtb	r3, r3
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	b25b      	sxtb	r3, r3
 800e0c6:	b2d9      	uxtb	r1, r3
 800e0c8:	f107 021c 	add.w	r2, r7, #28
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ce:	4413      	add	r3, r2
 800e0d0:	460a      	mov	r2, r1
 800e0d2:	701a      	strb	r2, [r3, #0]
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0dc:	2b0e      	cmp	r3, #14
 800e0de:	dde0      	ble.n	800e0a2 <AES_CMAC_Final+0x136>
 800e0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e0ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0f0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e0f4:	43db      	mvns	r3, r3
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e0fc:	e027      	b.n	800e14e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e0fe:	2300      	movs	r3, #0
 800e100:	637b      	str	r3, [r7, #52]	; 0x34
 800e102:	e01b      	b.n	800e13c <AES_CMAC_Final+0x1d0>
 800e104:	f107 021c 	add.w	r2, r7, #28
 800e108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10a:	4413      	add	r3, r2
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	005b      	lsls	r3, r3, #1
 800e110:	b25a      	sxtb	r2, r3
 800e112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e114:	3301      	adds	r3, #1
 800e116:	3348      	adds	r3, #72	; 0x48
 800e118:	443b      	add	r3, r7
 800e11a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e11e:	09db      	lsrs	r3, r3, #7
 800e120:	b2db      	uxtb	r3, r3
 800e122:	b25b      	sxtb	r3, r3
 800e124:	4313      	orrs	r3, r2
 800e126:	b25b      	sxtb	r3, r3
 800e128:	b2d9      	uxtb	r1, r3
 800e12a:	f107 021c 	add.w	r2, r7, #28
 800e12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e130:	4413      	add	r3, r2
 800e132:	460a      	mov	r2, r1
 800e134:	701a      	strb	r2, [r3, #0]
 800e136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e138:	3301      	adds	r3, #1
 800e13a:	637b      	str	r3, [r7, #52]	; 0x34
 800e13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13e:	2b0e      	cmp	r3, #14
 800e140:	dde0      	ble.n	800e104 <AES_CMAC_Final+0x198>
 800e142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	4413      	add	r3, r2
 800e158:	2280      	movs	r2, #128	; 0x80
 800e15a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e15e:	e007      	b.n	800e170 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	4413      	add	r3, r2
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e176:	1c5a      	adds	r2, r3, #1
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e184:	2b0f      	cmp	r3, #15
 800e186:	d9eb      	bls.n	800e160 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e188:	2300      	movs	r3, #0
 800e18a:	633b      	str	r3, [r7, #48]	; 0x30
 800e18c:	e016      	b.n	800e1bc <AES_CMAC_Final+0x250>
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	4413      	add	r3, r2
 800e194:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e198:	781a      	ldrb	r2, [r3, #0]
 800e19a:	f107 011c 	add.w	r1, r7, #28
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	440b      	add	r3, r1
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	4053      	eors	r3, r2
 800e1a6:	b2d9      	uxtb	r1, r3
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1b2:	460a      	mov	r2, r1
 800e1b4:	701a      	strb	r2, [r3, #0]
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	633b      	str	r3, [r7, #48]	; 0x30
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1be:	2b0f      	cmp	r3, #15
 800e1c0:	dde5      	ble.n	800e18e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1c6:	e015      	b.n	800e1f4 <AES_CMAC_Final+0x288>
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	4413      	add	r3, r2
 800e1ce:	33f1      	adds	r3, #241	; 0xf1
 800e1d0:	781a      	ldrb	r2, [r3, #0]
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	440b      	add	r3, r1
 800e1d8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	4053      	eors	r3, r2
 800e1e0:	b2d9      	uxtb	r1, r3
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e6:	4413      	add	r3, r2
 800e1e8:	33f1      	adds	r3, #241	; 0xf1
 800e1ea:	460a      	mov	r2, r1
 800e1ec:	701a      	strb	r2, [r3, #0]
 800e1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	2b0f      	cmp	r3, #15
 800e1f8:	dde6      	ble.n	800e1c8 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e200:	f107 030c 	add.w	r3, r7, #12
 800e204:	2210      	movs	r2, #16
 800e206:	4618      	mov	r0, r3
 800e208:	f00b fe0b 	bl	8019e22 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	f107 030c 	add.w	r3, r7, #12
 800e212:	6879      	ldr	r1, [r7, #4]
 800e214:	4618      	mov	r0, r3
 800e216:	f000 fd1d 	bl	800ec54 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e21a:	f107 031c 	add.w	r3, r7, #28
 800e21e:	2210      	movs	r2, #16
 800e220:	2100      	movs	r1, #0
 800e222:	4618      	mov	r0, r3
 800e224:	f00b fe38 	bl	8019e98 <memset1>
}
 800e228:	bf00      	nop
 800e22a:	3748      	adds	r7, #72	; 0x48
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781a      	ldrb	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3301      	adds	r3, #1
 800e246:	683a      	ldr	r2, [r7, #0]
 800e248:	7852      	ldrb	r2, [r2, #1]
 800e24a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3302      	adds	r3, #2
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	7892      	ldrb	r2, [r2, #2]
 800e254:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	3303      	adds	r3, #3
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	78d2      	ldrb	r2, [r2, #3]
 800e25e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3304      	adds	r3, #4
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	7912      	ldrb	r2, [r2, #4]
 800e268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3305      	adds	r3, #5
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	7952      	ldrb	r2, [r2, #5]
 800e272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	3306      	adds	r3, #6
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	7992      	ldrb	r2, [r2, #6]
 800e27c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	3307      	adds	r3, #7
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	79d2      	ldrb	r2, [r2, #7]
 800e286:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3308      	adds	r3, #8
 800e28c:	683a      	ldr	r2, [r7, #0]
 800e28e:	7a12      	ldrb	r2, [r2, #8]
 800e290:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3309      	adds	r3, #9
 800e296:	683a      	ldr	r2, [r7, #0]
 800e298:	7a52      	ldrb	r2, [r2, #9]
 800e29a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	330a      	adds	r3, #10
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	7a92      	ldrb	r2, [r2, #10]
 800e2a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	330b      	adds	r3, #11
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	7ad2      	ldrb	r2, [r2, #11]
 800e2ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	330c      	adds	r3, #12
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	7b12      	ldrb	r2, [r2, #12]
 800e2b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	330d      	adds	r3, #13
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	7b52      	ldrb	r2, [r2, #13]
 800e2c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	330e      	adds	r3, #14
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	7b92      	ldrb	r2, [r2, #14]
 800e2cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	330f      	adds	r3, #15
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	7bd2      	ldrb	r2, [r2, #15]
 800e2d6:	701a      	strb	r2, [r3, #0]
#endif
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bc80      	pop	{r7}
 800e2e0:	4770      	bx	lr

0800e2e2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e2f0:	e007      	b.n	800e302 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	1c53      	adds	r3, r2, #1
 800e2f6:	60bb      	str	r3, [r7, #8]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	1c59      	adds	r1, r3, #1
 800e2fc:	60f9      	str	r1, [r7, #12]
 800e2fe:	7812      	ldrb	r2, [r2, #0]
 800e300:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	1e5a      	subs	r2, r3, #1
 800e306:	71fa      	strb	r2, [r7, #7]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1f2      	bne.n	800e2f2 <copy_block_nn+0x10>
}
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
 800e310:	3714      	adds	r7, #20
 800e312:	46bd      	mov	sp, r7
 800e314:	bc80      	pop	{r7}
 800e316:	4770      	bx	lr

0800e318 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	781a      	ldrb	r2, [r3, #0]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	4053      	eors	r3, r2
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3301      	adds	r3, #1
 800e336:	7819      	ldrb	r1, [r3, #0]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	3301      	adds	r3, #1
 800e33c:	781a      	ldrb	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3301      	adds	r3, #1
 800e342:	404a      	eors	r2, r1
 800e344:	b2d2      	uxtb	r2, r2
 800e346:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	3302      	adds	r3, #2
 800e34c:	7819      	ldrb	r1, [r3, #0]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	3302      	adds	r3, #2
 800e352:	781a      	ldrb	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3302      	adds	r3, #2
 800e358:	404a      	eors	r2, r1
 800e35a:	b2d2      	uxtb	r2, r2
 800e35c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3303      	adds	r3, #3
 800e362:	7819      	ldrb	r1, [r3, #0]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	3303      	adds	r3, #3
 800e368:	781a      	ldrb	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3303      	adds	r3, #3
 800e36e:	404a      	eors	r2, r1
 800e370:	b2d2      	uxtb	r2, r2
 800e372:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3304      	adds	r3, #4
 800e378:	7819      	ldrb	r1, [r3, #0]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	3304      	adds	r3, #4
 800e37e:	781a      	ldrb	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3304      	adds	r3, #4
 800e384:	404a      	eors	r2, r1
 800e386:	b2d2      	uxtb	r2, r2
 800e388:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3305      	adds	r3, #5
 800e38e:	7819      	ldrb	r1, [r3, #0]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	3305      	adds	r3, #5
 800e394:	781a      	ldrb	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3305      	adds	r3, #5
 800e39a:	404a      	eors	r2, r1
 800e39c:	b2d2      	uxtb	r2, r2
 800e39e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3306      	adds	r3, #6
 800e3a4:	7819      	ldrb	r1, [r3, #0]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	3306      	adds	r3, #6
 800e3aa:	781a      	ldrb	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3306      	adds	r3, #6
 800e3b0:	404a      	eors	r2, r1
 800e3b2:	b2d2      	uxtb	r2, r2
 800e3b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	3307      	adds	r3, #7
 800e3ba:	7819      	ldrb	r1, [r3, #0]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	3307      	adds	r3, #7
 800e3c0:	781a      	ldrb	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3307      	adds	r3, #7
 800e3c6:	404a      	eors	r2, r1
 800e3c8:	b2d2      	uxtb	r2, r2
 800e3ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3308      	adds	r3, #8
 800e3d0:	7819      	ldrb	r1, [r3, #0]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	781a      	ldrb	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3308      	adds	r3, #8
 800e3dc:	404a      	eors	r2, r1
 800e3de:	b2d2      	uxtb	r2, r2
 800e3e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	3309      	adds	r3, #9
 800e3e6:	7819      	ldrb	r1, [r3, #0]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	3309      	adds	r3, #9
 800e3ec:	781a      	ldrb	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	3309      	adds	r3, #9
 800e3f2:	404a      	eors	r2, r1
 800e3f4:	b2d2      	uxtb	r2, r2
 800e3f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	330a      	adds	r3, #10
 800e3fc:	7819      	ldrb	r1, [r3, #0]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	330a      	adds	r3, #10
 800e402:	781a      	ldrb	r2, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	330a      	adds	r3, #10
 800e408:	404a      	eors	r2, r1
 800e40a:	b2d2      	uxtb	r2, r2
 800e40c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	330b      	adds	r3, #11
 800e412:	7819      	ldrb	r1, [r3, #0]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	330b      	adds	r3, #11
 800e418:	781a      	ldrb	r2, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	330b      	adds	r3, #11
 800e41e:	404a      	eors	r2, r1
 800e420:	b2d2      	uxtb	r2, r2
 800e422:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	330c      	adds	r3, #12
 800e428:	7819      	ldrb	r1, [r3, #0]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	330c      	adds	r3, #12
 800e42e:	781a      	ldrb	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	330c      	adds	r3, #12
 800e434:	404a      	eors	r2, r1
 800e436:	b2d2      	uxtb	r2, r2
 800e438:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	330d      	adds	r3, #13
 800e43e:	7819      	ldrb	r1, [r3, #0]
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	330d      	adds	r3, #13
 800e444:	781a      	ldrb	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	330d      	adds	r3, #13
 800e44a:	404a      	eors	r2, r1
 800e44c:	b2d2      	uxtb	r2, r2
 800e44e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	330e      	adds	r3, #14
 800e454:	7819      	ldrb	r1, [r3, #0]
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	330e      	adds	r3, #14
 800e45a:	781a      	ldrb	r2, [r3, #0]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	330e      	adds	r3, #14
 800e460:	404a      	eors	r2, r1
 800e462:	b2d2      	uxtb	r2, r2
 800e464:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	330f      	adds	r3, #15
 800e46a:	7819      	ldrb	r1, [r3, #0]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	330f      	adds	r3, #15
 800e470:	781a      	ldrb	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	330f      	adds	r3, #15
 800e476:	404a      	eors	r2, r1
 800e478:	b2d2      	uxtb	r2, r2
 800e47a:	701a      	strb	r2, [r3, #0]
#endif
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	bc80      	pop	{r7}
 800e484:	4770      	bx	lr

0800e486 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e486:	b480      	push	{r7}
 800e488:	b085      	sub	sp, #20
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	60f8      	str	r0, [r7, #12]
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	781a      	ldrb	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	4053      	eors	r3, r2
 800e49c:	b2da      	uxtb	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	7819      	ldrb	r1, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	781a      	ldrb	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	404a      	eors	r2, r1
 800e4b4:	b2d2      	uxtb	r2, r2
 800e4b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	3302      	adds	r3, #2
 800e4bc:	7819      	ldrb	r1, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	3302      	adds	r3, #2
 800e4c2:	781a      	ldrb	r2, [r3, #0]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	3302      	adds	r3, #2
 800e4c8:	404a      	eors	r2, r1
 800e4ca:	b2d2      	uxtb	r2, r2
 800e4cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	3303      	adds	r3, #3
 800e4d2:	7819      	ldrb	r1, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3303      	adds	r3, #3
 800e4d8:	781a      	ldrb	r2, [r3, #0]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3303      	adds	r3, #3
 800e4de:	404a      	eors	r2, r1
 800e4e0:	b2d2      	uxtb	r2, r2
 800e4e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	7819      	ldrb	r1, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	781a      	ldrb	r2, [r3, #0]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	404a      	eors	r2, r1
 800e4f6:	b2d2      	uxtb	r2, r2
 800e4f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	3305      	adds	r3, #5
 800e4fe:	7819      	ldrb	r1, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3305      	adds	r3, #5
 800e504:	781a      	ldrb	r2, [r3, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3305      	adds	r3, #5
 800e50a:	404a      	eors	r2, r1
 800e50c:	b2d2      	uxtb	r2, r2
 800e50e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	3306      	adds	r3, #6
 800e514:	7819      	ldrb	r1, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	3306      	adds	r3, #6
 800e51a:	781a      	ldrb	r2, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3306      	adds	r3, #6
 800e520:	404a      	eors	r2, r1
 800e522:	b2d2      	uxtb	r2, r2
 800e524:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	3307      	adds	r3, #7
 800e52a:	7819      	ldrb	r1, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	3307      	adds	r3, #7
 800e530:	781a      	ldrb	r2, [r3, #0]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	3307      	adds	r3, #7
 800e536:	404a      	eors	r2, r1
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	3308      	adds	r3, #8
 800e540:	7819      	ldrb	r1, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3308      	adds	r3, #8
 800e546:	781a      	ldrb	r2, [r3, #0]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	3308      	adds	r3, #8
 800e54c:	404a      	eors	r2, r1
 800e54e:	b2d2      	uxtb	r2, r2
 800e550:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	3309      	adds	r3, #9
 800e556:	7819      	ldrb	r1, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3309      	adds	r3, #9
 800e55c:	781a      	ldrb	r2, [r3, #0]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	3309      	adds	r3, #9
 800e562:	404a      	eors	r2, r1
 800e564:	b2d2      	uxtb	r2, r2
 800e566:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	330a      	adds	r3, #10
 800e56c:	7819      	ldrb	r1, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	330a      	adds	r3, #10
 800e572:	781a      	ldrb	r2, [r3, #0]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	330a      	adds	r3, #10
 800e578:	404a      	eors	r2, r1
 800e57a:	b2d2      	uxtb	r2, r2
 800e57c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	330b      	adds	r3, #11
 800e582:	7819      	ldrb	r1, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	330b      	adds	r3, #11
 800e588:	781a      	ldrb	r2, [r3, #0]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	330b      	adds	r3, #11
 800e58e:	404a      	eors	r2, r1
 800e590:	b2d2      	uxtb	r2, r2
 800e592:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	330c      	adds	r3, #12
 800e598:	7819      	ldrb	r1, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	330c      	adds	r3, #12
 800e59e:	781a      	ldrb	r2, [r3, #0]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	330c      	adds	r3, #12
 800e5a4:	404a      	eors	r2, r1
 800e5a6:	b2d2      	uxtb	r2, r2
 800e5a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	330d      	adds	r3, #13
 800e5ae:	7819      	ldrb	r1, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	330d      	adds	r3, #13
 800e5b4:	781a      	ldrb	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	330d      	adds	r3, #13
 800e5ba:	404a      	eors	r2, r1
 800e5bc:	b2d2      	uxtb	r2, r2
 800e5be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	330e      	adds	r3, #14
 800e5c4:	7819      	ldrb	r1, [r3, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	330e      	adds	r3, #14
 800e5ca:	781a      	ldrb	r2, [r3, #0]
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	330e      	adds	r3, #14
 800e5d0:	404a      	eors	r2, r1
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	330f      	adds	r3, #15
 800e5da:	7819      	ldrb	r1, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	330f      	adds	r3, #15
 800e5e0:	781a      	ldrb	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	330f      	adds	r3, #15
 800e5e6:	404a      	eors	r2, r1
 800e5e8:	b2d2      	uxtb	r2, r2
 800e5ea:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e5ec:	bf00      	nop
 800e5ee:	3714      	adds	r7, #20
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bc80      	pop	{r7}
 800e5f4:	4770      	bx	lr

0800e5f6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7ff fe88 	bl	800e318 <xor_block>
}
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	461a      	mov	r2, r3
 800e61e:	4b48      	ldr	r3, [pc, #288]	; (800e740 <shift_sub_rows+0x130>)
 800e620:	5c9a      	ldrb	r2, [r3, r2]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3304      	adds	r3, #4
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	4619      	mov	r1, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	3304      	adds	r3, #4
 800e632:	4a43      	ldr	r2, [pc, #268]	; (800e740 <shift_sub_rows+0x130>)
 800e634:	5c52      	ldrb	r2, [r2, r1]
 800e636:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3308      	adds	r3, #8
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	4619      	mov	r1, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3308      	adds	r3, #8
 800e644:	4a3e      	ldr	r2, [pc, #248]	; (800e740 <shift_sub_rows+0x130>)
 800e646:	5c52      	ldrb	r2, [r2, r1]
 800e648:	701a      	strb	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	330c      	adds	r3, #12
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	4619      	mov	r1, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	330c      	adds	r3, #12
 800e656:	4a3a      	ldr	r2, [pc, #232]	; (800e740 <shift_sub_rows+0x130>)
 800e658:	5c52      	ldrb	r2, [r2, r1]
 800e65a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	785b      	ldrb	r3, [r3, #1]
 800e660:	73fb      	strb	r3, [r7, #15]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	3305      	adds	r3, #5
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	4619      	mov	r1, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3301      	adds	r3, #1
 800e66e:	4a34      	ldr	r2, [pc, #208]	; (800e740 <shift_sub_rows+0x130>)
 800e670:	5c52      	ldrb	r2, [r2, r1]
 800e672:	701a      	strb	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3309      	adds	r3, #9
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	4619      	mov	r1, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	3305      	adds	r3, #5
 800e680:	4a2f      	ldr	r2, [pc, #188]	; (800e740 <shift_sub_rows+0x130>)
 800e682:	5c52      	ldrb	r2, [r2, r1]
 800e684:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	330d      	adds	r3, #13
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	4619      	mov	r1, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	3309      	adds	r3, #9
 800e692:	4a2b      	ldr	r2, [pc, #172]	; (800e740 <shift_sub_rows+0x130>)
 800e694:	5c52      	ldrb	r2, [r2, r1]
 800e696:	701a      	strb	r2, [r3, #0]
 800e698:	7bfa      	ldrb	r2, [r7, #15]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	330d      	adds	r3, #13
 800e69e:	4928      	ldr	r1, [pc, #160]	; (800e740 <shift_sub_rows+0x130>)
 800e6a0:	5c8a      	ldrb	r2, [r1, r2]
 800e6a2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	789b      	ldrb	r3, [r3, #2]
 800e6a8:	73fb      	strb	r3, [r7, #15]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	330a      	adds	r3, #10
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3302      	adds	r3, #2
 800e6b6:	4a22      	ldr	r2, [pc, #136]	; (800e740 <shift_sub_rows+0x130>)
 800e6b8:	5c52      	ldrb	r2, [r2, r1]
 800e6ba:	701a      	strb	r2, [r3, #0]
 800e6bc:	7bfa      	ldrb	r2, [r7, #15]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	330a      	adds	r3, #10
 800e6c2:	491f      	ldr	r1, [pc, #124]	; (800e740 <shift_sub_rows+0x130>)
 800e6c4:	5c8a      	ldrb	r2, [r1, r2]
 800e6c6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	799b      	ldrb	r3, [r3, #6]
 800e6cc:	73fb      	strb	r3, [r7, #15]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	330e      	adds	r3, #14
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	3306      	adds	r3, #6
 800e6da:	4a19      	ldr	r2, [pc, #100]	; (800e740 <shift_sub_rows+0x130>)
 800e6dc:	5c52      	ldrb	r2, [r2, r1]
 800e6de:	701a      	strb	r2, [r3, #0]
 800e6e0:	7bfa      	ldrb	r2, [r7, #15]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	330e      	adds	r3, #14
 800e6e6:	4916      	ldr	r1, [pc, #88]	; (800e740 <shift_sub_rows+0x130>)
 800e6e8:	5c8a      	ldrb	r2, [r1, r2]
 800e6ea:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	7bdb      	ldrb	r3, [r3, #15]
 800e6f0:	73fb      	strb	r3, [r7, #15]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	330b      	adds	r3, #11
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	330f      	adds	r3, #15
 800e6fe:	4a10      	ldr	r2, [pc, #64]	; (800e740 <shift_sub_rows+0x130>)
 800e700:	5c52      	ldrb	r2, [r2, r1]
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	3307      	adds	r3, #7
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	4619      	mov	r1, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	330b      	adds	r3, #11
 800e710:	4a0b      	ldr	r2, [pc, #44]	; (800e740 <shift_sub_rows+0x130>)
 800e712:	5c52      	ldrb	r2, [r2, r1]
 800e714:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	3303      	adds	r3, #3
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	4619      	mov	r1, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3307      	adds	r3, #7
 800e722:	4a07      	ldr	r2, [pc, #28]	; (800e740 <shift_sub_rows+0x130>)
 800e724:	5c52      	ldrb	r2, [r2, r1]
 800e726:	701a      	strb	r2, [r3, #0]
 800e728:	7bfa      	ldrb	r2, [r7, #15]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3303      	adds	r3, #3
 800e72e:	4904      	ldr	r1, [pc, #16]	; (800e740 <shift_sub_rows+0x130>)
 800e730:	5c8a      	ldrb	r2, [r1, r2]
 800e732:	701a      	strb	r2, [r3, #0]
}
 800e734:	bf00      	nop
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	bc80      	pop	{r7}
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	0801f648 	.word	0x0801f648

0800e744 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e74c:	f107 0308 	add.w	r3, r7, #8
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff fd6c 	bl	800e230 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e758:	7a3b      	ldrb	r3, [r7, #8]
 800e75a:	461a      	mov	r2, r3
 800e75c:	4b9a      	ldr	r3, [pc, #616]	; (800e9c8 <mix_sub_columns+0x284>)
 800e75e:	5c9a      	ldrb	r2, [r3, r2]
 800e760:	7b7b      	ldrb	r3, [r7, #13]
 800e762:	4619      	mov	r1, r3
 800e764:	4b99      	ldr	r3, [pc, #612]	; (800e9cc <mix_sub_columns+0x288>)
 800e766:	5c5b      	ldrb	r3, [r3, r1]
 800e768:	4053      	eors	r3, r2
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	7cbb      	ldrb	r3, [r7, #18]
 800e76e:	4619      	mov	r1, r3
 800e770:	4b97      	ldr	r3, [pc, #604]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e772:	5c5b      	ldrb	r3, [r3, r1]
 800e774:	4053      	eors	r3, r2
 800e776:	b2da      	uxtb	r2, r3
 800e778:	7dfb      	ldrb	r3, [r7, #23]
 800e77a:	4619      	mov	r1, r3
 800e77c:	4b94      	ldr	r3, [pc, #592]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e77e:	5c5b      	ldrb	r3, [r3, r1]
 800e780:	4053      	eors	r3, r2
 800e782:	b2da      	uxtb	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e788:	7a3b      	ldrb	r3, [r7, #8]
 800e78a:	461a      	mov	r2, r3
 800e78c:	4b90      	ldr	r3, [pc, #576]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e78e:	5c9a      	ldrb	r2, [r3, r2]
 800e790:	7b7b      	ldrb	r3, [r7, #13]
 800e792:	4619      	mov	r1, r3
 800e794:	4b8c      	ldr	r3, [pc, #560]	; (800e9c8 <mix_sub_columns+0x284>)
 800e796:	5c5b      	ldrb	r3, [r3, r1]
 800e798:	4053      	eors	r3, r2
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	7cbb      	ldrb	r3, [r7, #18]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	4b8a      	ldr	r3, [pc, #552]	; (800e9cc <mix_sub_columns+0x288>)
 800e7a2:	5c5b      	ldrb	r3, [r3, r1]
 800e7a4:	4053      	eors	r3, r2
 800e7a6:	b2d9      	uxtb	r1, r3
 800e7a8:	7dfb      	ldrb	r3, [r7, #23]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4b88      	ldr	r3, [pc, #544]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e7ae:	5c9a      	ldrb	r2, [r3, r2]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	404a      	eors	r2, r1
 800e7b6:	b2d2      	uxtb	r2, r2
 800e7b8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e7ba:	7a3b      	ldrb	r3, [r7, #8]
 800e7bc:	461a      	mov	r2, r3
 800e7be:	4b84      	ldr	r3, [pc, #528]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e7c0:	5c9a      	ldrb	r2, [r3, r2]
 800e7c2:	7b7b      	ldrb	r3, [r7, #13]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4b82      	ldr	r3, [pc, #520]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e7c8:	5c5b      	ldrb	r3, [r3, r1]
 800e7ca:	4053      	eors	r3, r2
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	7cbb      	ldrb	r3, [r7, #18]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4b7d      	ldr	r3, [pc, #500]	; (800e9c8 <mix_sub_columns+0x284>)
 800e7d4:	5c5b      	ldrb	r3, [r3, r1]
 800e7d6:	4053      	eors	r3, r2
 800e7d8:	b2d9      	uxtb	r1, r3
 800e7da:	7dfb      	ldrb	r3, [r7, #23]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	4b7b      	ldr	r3, [pc, #492]	; (800e9cc <mix_sub_columns+0x288>)
 800e7e0:	5c9a      	ldrb	r2, [r3, r2]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	3302      	adds	r3, #2
 800e7e6:	404a      	eors	r2, r1
 800e7e8:	b2d2      	uxtb	r2, r2
 800e7ea:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e7ec:	7a3b      	ldrb	r3, [r7, #8]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	4b76      	ldr	r3, [pc, #472]	; (800e9cc <mix_sub_columns+0x288>)
 800e7f2:	5c9a      	ldrb	r2, [r3, r2]
 800e7f4:	7b7b      	ldrb	r3, [r7, #13]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4b75      	ldr	r3, [pc, #468]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e7fa:	5c5b      	ldrb	r3, [r3, r1]
 800e7fc:	4053      	eors	r3, r2
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	7cbb      	ldrb	r3, [r7, #18]
 800e802:	4619      	mov	r1, r3
 800e804:	4b72      	ldr	r3, [pc, #456]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e806:	5c5b      	ldrb	r3, [r3, r1]
 800e808:	4053      	eors	r3, r2
 800e80a:	b2d9      	uxtb	r1, r3
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	461a      	mov	r2, r3
 800e810:	4b6d      	ldr	r3, [pc, #436]	; (800e9c8 <mix_sub_columns+0x284>)
 800e812:	5c9a      	ldrb	r2, [r3, r2]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3303      	adds	r3, #3
 800e818:	404a      	eors	r2, r1
 800e81a:	b2d2      	uxtb	r2, r2
 800e81c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e81e:	7b3b      	ldrb	r3, [r7, #12]
 800e820:	461a      	mov	r2, r3
 800e822:	4b69      	ldr	r3, [pc, #420]	; (800e9c8 <mix_sub_columns+0x284>)
 800e824:	5c9a      	ldrb	r2, [r3, r2]
 800e826:	7c7b      	ldrb	r3, [r7, #17]
 800e828:	4619      	mov	r1, r3
 800e82a:	4b68      	ldr	r3, [pc, #416]	; (800e9cc <mix_sub_columns+0x288>)
 800e82c:	5c5b      	ldrb	r3, [r3, r1]
 800e82e:	4053      	eors	r3, r2
 800e830:	b2da      	uxtb	r2, r3
 800e832:	7dbb      	ldrb	r3, [r7, #22]
 800e834:	4619      	mov	r1, r3
 800e836:	4b66      	ldr	r3, [pc, #408]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e838:	5c5b      	ldrb	r3, [r3, r1]
 800e83a:	4053      	eors	r3, r2
 800e83c:	b2d9      	uxtb	r1, r3
 800e83e:	7afb      	ldrb	r3, [r7, #11]
 800e840:	461a      	mov	r2, r3
 800e842:	4b63      	ldr	r3, [pc, #396]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e844:	5c9a      	ldrb	r2, [r3, r2]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	3304      	adds	r3, #4
 800e84a:	404a      	eors	r2, r1
 800e84c:	b2d2      	uxtb	r2, r2
 800e84e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e850:	7b3b      	ldrb	r3, [r7, #12]
 800e852:	461a      	mov	r2, r3
 800e854:	4b5e      	ldr	r3, [pc, #376]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e856:	5c9a      	ldrb	r2, [r3, r2]
 800e858:	7c7b      	ldrb	r3, [r7, #17]
 800e85a:	4619      	mov	r1, r3
 800e85c:	4b5a      	ldr	r3, [pc, #360]	; (800e9c8 <mix_sub_columns+0x284>)
 800e85e:	5c5b      	ldrb	r3, [r3, r1]
 800e860:	4053      	eors	r3, r2
 800e862:	b2da      	uxtb	r2, r3
 800e864:	7dbb      	ldrb	r3, [r7, #22]
 800e866:	4619      	mov	r1, r3
 800e868:	4b58      	ldr	r3, [pc, #352]	; (800e9cc <mix_sub_columns+0x288>)
 800e86a:	5c5b      	ldrb	r3, [r3, r1]
 800e86c:	4053      	eors	r3, r2
 800e86e:	b2d9      	uxtb	r1, r3
 800e870:	7afb      	ldrb	r3, [r7, #11]
 800e872:	461a      	mov	r2, r3
 800e874:	4b56      	ldr	r3, [pc, #344]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e876:	5c9a      	ldrb	r2, [r3, r2]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3305      	adds	r3, #5
 800e87c:	404a      	eors	r2, r1
 800e87e:	b2d2      	uxtb	r2, r2
 800e880:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e882:	7b3b      	ldrb	r3, [r7, #12]
 800e884:	461a      	mov	r2, r3
 800e886:	4b52      	ldr	r3, [pc, #328]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e888:	5c9a      	ldrb	r2, [r3, r2]
 800e88a:	7c7b      	ldrb	r3, [r7, #17]
 800e88c:	4619      	mov	r1, r3
 800e88e:	4b50      	ldr	r3, [pc, #320]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e890:	5c5b      	ldrb	r3, [r3, r1]
 800e892:	4053      	eors	r3, r2
 800e894:	b2da      	uxtb	r2, r3
 800e896:	7dbb      	ldrb	r3, [r7, #22]
 800e898:	4619      	mov	r1, r3
 800e89a:	4b4b      	ldr	r3, [pc, #300]	; (800e9c8 <mix_sub_columns+0x284>)
 800e89c:	5c5b      	ldrb	r3, [r3, r1]
 800e89e:	4053      	eors	r3, r2
 800e8a0:	b2d9      	uxtb	r1, r3
 800e8a2:	7afb      	ldrb	r3, [r7, #11]
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	4b49      	ldr	r3, [pc, #292]	; (800e9cc <mix_sub_columns+0x288>)
 800e8a8:	5c9a      	ldrb	r2, [r3, r2]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	3306      	adds	r3, #6
 800e8ae:	404a      	eors	r2, r1
 800e8b0:	b2d2      	uxtb	r2, r2
 800e8b2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e8b4:	7b3b      	ldrb	r3, [r7, #12]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	4b44      	ldr	r3, [pc, #272]	; (800e9cc <mix_sub_columns+0x288>)
 800e8ba:	5c9a      	ldrb	r2, [r3, r2]
 800e8bc:	7c7b      	ldrb	r3, [r7, #17]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4b43      	ldr	r3, [pc, #268]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e8c2:	5c5b      	ldrb	r3, [r3, r1]
 800e8c4:	4053      	eors	r3, r2
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4b40      	ldr	r3, [pc, #256]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e8ce:	5c5b      	ldrb	r3, [r3, r1]
 800e8d0:	4053      	eors	r3, r2
 800e8d2:	b2d9      	uxtb	r1, r3
 800e8d4:	7afb      	ldrb	r3, [r7, #11]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	4b3b      	ldr	r3, [pc, #236]	; (800e9c8 <mix_sub_columns+0x284>)
 800e8da:	5c9a      	ldrb	r2, [r3, r2]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3307      	adds	r3, #7
 800e8e0:	404a      	eors	r2, r1
 800e8e2:	b2d2      	uxtb	r2, r2
 800e8e4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e8e6:	7c3b      	ldrb	r3, [r7, #16]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	4b37      	ldr	r3, [pc, #220]	; (800e9c8 <mix_sub_columns+0x284>)
 800e8ec:	5c9a      	ldrb	r2, [r3, r2]
 800e8ee:	7d7b      	ldrb	r3, [r7, #21]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4b36      	ldr	r3, [pc, #216]	; (800e9cc <mix_sub_columns+0x288>)
 800e8f4:	5c5b      	ldrb	r3, [r3, r1]
 800e8f6:	4053      	eors	r3, r2
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	7abb      	ldrb	r3, [r7, #10]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4b34      	ldr	r3, [pc, #208]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e900:	5c5b      	ldrb	r3, [r3, r1]
 800e902:	4053      	eors	r3, r2
 800e904:	b2d9      	uxtb	r1, r3
 800e906:	7bfb      	ldrb	r3, [r7, #15]
 800e908:	461a      	mov	r2, r3
 800e90a:	4b31      	ldr	r3, [pc, #196]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e90c:	5c9a      	ldrb	r2, [r3, r2]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3308      	adds	r3, #8
 800e912:	404a      	eors	r2, r1
 800e914:	b2d2      	uxtb	r2, r2
 800e916:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e918:	7c3b      	ldrb	r3, [r7, #16]
 800e91a:	461a      	mov	r2, r3
 800e91c:	4b2c      	ldr	r3, [pc, #176]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e91e:	5c9a      	ldrb	r2, [r3, r2]
 800e920:	7d7b      	ldrb	r3, [r7, #21]
 800e922:	4619      	mov	r1, r3
 800e924:	4b28      	ldr	r3, [pc, #160]	; (800e9c8 <mix_sub_columns+0x284>)
 800e926:	5c5b      	ldrb	r3, [r3, r1]
 800e928:	4053      	eors	r3, r2
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	7abb      	ldrb	r3, [r7, #10]
 800e92e:	4619      	mov	r1, r3
 800e930:	4b26      	ldr	r3, [pc, #152]	; (800e9cc <mix_sub_columns+0x288>)
 800e932:	5c5b      	ldrb	r3, [r3, r1]
 800e934:	4053      	eors	r3, r2
 800e936:	b2d9      	uxtb	r1, r3
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	461a      	mov	r2, r3
 800e93c:	4b24      	ldr	r3, [pc, #144]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e93e:	5c9a      	ldrb	r2, [r3, r2]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	3309      	adds	r3, #9
 800e944:	404a      	eors	r2, r1
 800e946:	b2d2      	uxtb	r2, r2
 800e948:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e94a:	7c3b      	ldrb	r3, [r7, #16]
 800e94c:	461a      	mov	r2, r3
 800e94e:	4b20      	ldr	r3, [pc, #128]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e950:	5c9a      	ldrb	r2, [r3, r2]
 800e952:	7d7b      	ldrb	r3, [r7, #21]
 800e954:	4619      	mov	r1, r3
 800e956:	4b1e      	ldr	r3, [pc, #120]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e958:	5c5b      	ldrb	r3, [r3, r1]
 800e95a:	4053      	eors	r3, r2
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	7abb      	ldrb	r3, [r7, #10]
 800e960:	4619      	mov	r1, r3
 800e962:	4b19      	ldr	r3, [pc, #100]	; (800e9c8 <mix_sub_columns+0x284>)
 800e964:	5c5b      	ldrb	r3, [r3, r1]
 800e966:	4053      	eors	r3, r2
 800e968:	b2d9      	uxtb	r1, r3
 800e96a:	7bfb      	ldrb	r3, [r7, #15]
 800e96c:	461a      	mov	r2, r3
 800e96e:	4b17      	ldr	r3, [pc, #92]	; (800e9cc <mix_sub_columns+0x288>)
 800e970:	5c9a      	ldrb	r2, [r3, r2]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	330a      	adds	r3, #10
 800e976:	404a      	eors	r2, r1
 800e978:	b2d2      	uxtb	r2, r2
 800e97a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e97c:	7c3b      	ldrb	r3, [r7, #16]
 800e97e:	461a      	mov	r2, r3
 800e980:	4b12      	ldr	r3, [pc, #72]	; (800e9cc <mix_sub_columns+0x288>)
 800e982:	5c9a      	ldrb	r2, [r3, r2]
 800e984:	7d7b      	ldrb	r3, [r7, #21]
 800e986:	4619      	mov	r1, r3
 800e988:	4b11      	ldr	r3, [pc, #68]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e98a:	5c5b      	ldrb	r3, [r3, r1]
 800e98c:	4053      	eors	r3, r2
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	7abb      	ldrb	r3, [r7, #10]
 800e992:	4619      	mov	r1, r3
 800e994:	4b0e      	ldr	r3, [pc, #56]	; (800e9d0 <mix_sub_columns+0x28c>)
 800e996:	5c5b      	ldrb	r3, [r3, r1]
 800e998:	4053      	eors	r3, r2
 800e99a:	b2d9      	uxtb	r1, r3
 800e99c:	7bfb      	ldrb	r3, [r7, #15]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <mix_sub_columns+0x284>)
 800e9a2:	5c9a      	ldrb	r2, [r3, r2]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	330b      	adds	r3, #11
 800e9a8:	404a      	eors	r2, r1
 800e9aa:	b2d2      	uxtb	r2, r2
 800e9ac:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e9ae:	7d3b      	ldrb	r3, [r7, #20]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	4b05      	ldr	r3, [pc, #20]	; (800e9c8 <mix_sub_columns+0x284>)
 800e9b4:	5c9a      	ldrb	r2, [r3, r2]
 800e9b6:	7a7b      	ldrb	r3, [r7, #9]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4b04      	ldr	r3, [pc, #16]	; (800e9cc <mix_sub_columns+0x288>)
 800e9bc:	5c5b      	ldrb	r3, [r3, r1]
 800e9be:	4053      	eors	r3, r2
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	e005      	b.n	800e9d4 <mix_sub_columns+0x290>
 800e9c8:	0801f748 	.word	0x0801f748
 800e9cc:	0801f848 	.word	0x0801f848
 800e9d0:	0801f648 	.word	0x0801f648
 800e9d4:	4b2d      	ldr	r3, [pc, #180]	; (800ea8c <mix_sub_columns+0x348>)
 800e9d6:	5c5b      	ldrb	r3, [r3, r1]
 800e9d8:	4053      	eors	r3, r2
 800e9da:	b2d9      	uxtb	r1, r3
 800e9dc:	7cfb      	ldrb	r3, [r7, #19]
 800e9de:	461a      	mov	r2, r3
 800e9e0:	4b2a      	ldr	r3, [pc, #168]	; (800ea8c <mix_sub_columns+0x348>)
 800e9e2:	5c9a      	ldrb	r2, [r3, r2]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	330c      	adds	r3, #12
 800e9e8:	404a      	eors	r2, r1
 800e9ea:	b2d2      	uxtb	r2, r2
 800e9ec:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e9ee:	7d3b      	ldrb	r3, [r7, #20]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4b26      	ldr	r3, [pc, #152]	; (800ea8c <mix_sub_columns+0x348>)
 800e9f4:	5c9a      	ldrb	r2, [r3, r2]
 800e9f6:	7a7b      	ldrb	r3, [r7, #9]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4b25      	ldr	r3, [pc, #148]	; (800ea90 <mix_sub_columns+0x34c>)
 800e9fc:	5c5b      	ldrb	r3, [r3, r1]
 800e9fe:	4053      	eors	r3, r2
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	7bbb      	ldrb	r3, [r7, #14]
 800ea04:	4619      	mov	r1, r3
 800ea06:	4b23      	ldr	r3, [pc, #140]	; (800ea94 <mix_sub_columns+0x350>)
 800ea08:	5c5b      	ldrb	r3, [r3, r1]
 800ea0a:	4053      	eors	r3, r2
 800ea0c:	b2d9      	uxtb	r1, r3
 800ea0e:	7cfb      	ldrb	r3, [r7, #19]
 800ea10:	461a      	mov	r2, r3
 800ea12:	4b1e      	ldr	r3, [pc, #120]	; (800ea8c <mix_sub_columns+0x348>)
 800ea14:	5c9a      	ldrb	r2, [r3, r2]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	330d      	adds	r3, #13
 800ea1a:	404a      	eors	r2, r1
 800ea1c:	b2d2      	uxtb	r2, r2
 800ea1e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ea20:	7d3b      	ldrb	r3, [r7, #20]
 800ea22:	461a      	mov	r2, r3
 800ea24:	4b19      	ldr	r3, [pc, #100]	; (800ea8c <mix_sub_columns+0x348>)
 800ea26:	5c9a      	ldrb	r2, [r3, r2]
 800ea28:	7a7b      	ldrb	r3, [r7, #9]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4b17      	ldr	r3, [pc, #92]	; (800ea8c <mix_sub_columns+0x348>)
 800ea2e:	5c5b      	ldrb	r3, [r3, r1]
 800ea30:	4053      	eors	r3, r2
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	7bbb      	ldrb	r3, [r7, #14]
 800ea36:	4619      	mov	r1, r3
 800ea38:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <mix_sub_columns+0x34c>)
 800ea3a:	5c5b      	ldrb	r3, [r3, r1]
 800ea3c:	4053      	eors	r3, r2
 800ea3e:	b2d9      	uxtb	r1, r3
 800ea40:	7cfb      	ldrb	r3, [r7, #19]
 800ea42:	461a      	mov	r2, r3
 800ea44:	4b13      	ldr	r3, [pc, #76]	; (800ea94 <mix_sub_columns+0x350>)
 800ea46:	5c9a      	ldrb	r2, [r3, r2]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	330e      	adds	r3, #14
 800ea4c:	404a      	eors	r2, r1
 800ea4e:	b2d2      	uxtb	r2, r2
 800ea50:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ea52:	7d3b      	ldrb	r3, [r7, #20]
 800ea54:	461a      	mov	r2, r3
 800ea56:	4b0f      	ldr	r3, [pc, #60]	; (800ea94 <mix_sub_columns+0x350>)
 800ea58:	5c9a      	ldrb	r2, [r3, r2]
 800ea5a:	7a7b      	ldrb	r3, [r7, #9]
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4b0b      	ldr	r3, [pc, #44]	; (800ea8c <mix_sub_columns+0x348>)
 800ea60:	5c5b      	ldrb	r3, [r3, r1]
 800ea62:	4053      	eors	r3, r2
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	7bbb      	ldrb	r3, [r7, #14]
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4b08      	ldr	r3, [pc, #32]	; (800ea8c <mix_sub_columns+0x348>)
 800ea6c:	5c5b      	ldrb	r3, [r3, r1]
 800ea6e:	4053      	eors	r3, r2
 800ea70:	b2d9      	uxtb	r1, r3
 800ea72:	7cfb      	ldrb	r3, [r7, #19]
 800ea74:	461a      	mov	r2, r3
 800ea76:	4b06      	ldr	r3, [pc, #24]	; (800ea90 <mix_sub_columns+0x34c>)
 800ea78:	5c9a      	ldrb	r2, [r3, r2]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	330f      	adds	r3, #15
 800ea7e:	404a      	eors	r2, r1
 800ea80:	b2d2      	uxtb	r2, r2
 800ea82:	701a      	strb	r2, [r3, #0]
  }
 800ea84:	bf00      	nop
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	0801f648 	.word	0x0801f648
 800ea90:	0801f748 	.word	0x0801f748
 800ea94:	0801f848 	.word	0x0801f848

0800ea98 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	607a      	str	r2, [r7, #4]
 800eaa4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800eaa6:	7afb      	ldrb	r3, [r7, #11]
 800eaa8:	3b10      	subs	r3, #16
 800eaaa:	2b10      	cmp	r3, #16
 800eaac:	bf8c      	ite	hi
 800eaae:	2201      	movhi	r2, #1
 800eab0:	2200      	movls	r2, #0
 800eab2:	b2d2      	uxtb	r2, r2
 800eab4:	2a00      	cmp	r2, #0
 800eab6:	d10b      	bne.n	800ead0 <lorawan_aes_set_key+0x38>
 800eab8:	4a64      	ldr	r2, [pc, #400]	; (800ec4c <lorawan_aes_set_key+0x1b4>)
 800eaba:	fa22 f303 	lsr.w	r3, r2, r3
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	bf14      	ite	ne
 800eac6:	2301      	movne	r3, #1
 800eac8:	2300      	moveq	r3, #0
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d105      	bne.n	800eadc <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ead8:	23ff      	movs	r3, #255	; 0xff
 800eada:	e0b2      	b.n	800ec42 <lorawan_aes_set_key+0x1aa>
        break;
 800eadc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	7afa      	ldrb	r2, [r7, #11]
 800eae2:	68f9      	ldr	r1, [r7, #12]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7ff fbfc 	bl	800e2e2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800eaea:	7afb      	ldrb	r3, [r7, #11]
 800eaec:	331c      	adds	r3, #28
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800eaf4:	7c7b      	ldrb	r3, [r7, #17]
 800eaf6:	091b      	lsrs	r3, r3, #4
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	3b01      	subs	r3, #1
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eb04:	7afb      	ldrb	r3, [r7, #11]
 800eb06:	75fb      	strb	r3, [r7, #23]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	75bb      	strb	r3, [r7, #22]
 800eb0c:	e093      	b.n	800ec36 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	3b04      	subs	r3, #4
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	5cd3      	ldrb	r3, [r2, r3]
 800eb16:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800eb18:	7dfb      	ldrb	r3, [r7, #23]
 800eb1a:	3b03      	subs	r3, #3
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	5cd3      	ldrb	r3, [r2, r3]
 800eb20:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	3b02      	subs	r3, #2
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	5cd3      	ldrb	r3, [r2, r3]
 800eb2a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	5cd3      	ldrb	r3, [r2, r3]
 800eb34:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	7afa      	ldrb	r2, [r7, #11]
 800eb3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb3e:	fb01 f202 	mul.w	r2, r1, r2
 800eb42:	1a9b      	subs	r3, r3, r2
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d127      	bne.n	800eb9a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800eb4a:	7d7b      	ldrb	r3, [r7, #21]
 800eb4c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800eb4e:	7d3b      	ldrb	r3, [r7, #20]
 800eb50:	4a3f      	ldr	r2, [pc, #252]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800eb52:	5cd2      	ldrb	r2, [r2, r3]
 800eb54:	7dbb      	ldrb	r3, [r7, #22]
 800eb56:	4053      	eors	r3, r2
 800eb58:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800eb5a:	7cfb      	ldrb	r3, [r7, #19]
 800eb5c:	4a3c      	ldr	r2, [pc, #240]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800eb5e:	5cd3      	ldrb	r3, [r2, r3]
 800eb60:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800eb62:	7cbb      	ldrb	r3, [r7, #18]
 800eb64:	4a3a      	ldr	r2, [pc, #232]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800eb66:	5cd3      	ldrb	r3, [r2, r3]
 800eb68:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800eb6a:	7c3b      	ldrb	r3, [r7, #16]
 800eb6c:	4a38      	ldr	r2, [pc, #224]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800eb6e:	5cd3      	ldrb	r3, [r2, r3]
 800eb70:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800eb72:	7dbb      	ldrb	r3, [r7, #22]
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	b25a      	sxtb	r2, r3
 800eb78:	7dbb      	ldrb	r3, [r7, #22]
 800eb7a:	09db      	lsrs	r3, r3, #7
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	4619      	mov	r1, r3
 800eb80:	0049      	lsls	r1, r1, #1
 800eb82:	440b      	add	r3, r1
 800eb84:	4619      	mov	r1, r3
 800eb86:	00c8      	lsls	r0, r1, #3
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	440b      	add	r3, r1
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	b25b      	sxtb	r3, r3
 800eb92:	4053      	eors	r3, r2
 800eb94:	b25b      	sxtb	r3, r3
 800eb96:	75bb      	strb	r3, [r7, #22]
 800eb98:	e01c      	b.n	800ebd4 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800eb9a:	7afb      	ldrb	r3, [r7, #11]
 800eb9c:	2b18      	cmp	r3, #24
 800eb9e:	d919      	bls.n	800ebd4 <lorawan_aes_set_key+0x13c>
 800eba0:	7dfb      	ldrb	r3, [r7, #23]
 800eba2:	7afa      	ldrb	r2, [r7, #11]
 800eba4:	fbb3 f1f2 	udiv	r1, r3, r2
 800eba8:	fb01 f202 	mul.w	r2, r1, r2
 800ebac:	1a9b      	subs	r3, r3, r2
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b10      	cmp	r3, #16
 800ebb2:	d10f      	bne.n	800ebd4 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800ebb4:	7d7b      	ldrb	r3, [r7, #21]
 800ebb6:	4a26      	ldr	r2, [pc, #152]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800ebb8:	5cd3      	ldrb	r3, [r2, r3]
 800ebba:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ebbc:	7d3b      	ldrb	r3, [r7, #20]
 800ebbe:	4a24      	ldr	r2, [pc, #144]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800ebc0:	5cd3      	ldrb	r3, [r2, r3]
 800ebc2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ebc4:	7cfb      	ldrb	r3, [r7, #19]
 800ebc6:	4a22      	ldr	r2, [pc, #136]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800ebc8:	5cd3      	ldrb	r3, [r2, r3]
 800ebca:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ebcc:	7cbb      	ldrb	r3, [r7, #18]
 800ebce:	4a20      	ldr	r2, [pc, #128]	; (800ec50 <lorawan_aes_set_key+0x1b8>)
 800ebd0:	5cd3      	ldrb	r3, [r2, r3]
 800ebd2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ebd4:	7dfa      	ldrb	r2, [r7, #23]
 800ebd6:	7afb      	ldrb	r3, [r7, #11]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ebdc:	7c3b      	ldrb	r3, [r7, #16]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	5cd1      	ldrb	r1, [r2, r3]
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
 800ebe4:	7d7a      	ldrb	r2, [r7, #21]
 800ebe6:	404a      	eors	r2, r1
 800ebe8:	b2d1      	uxtb	r1, r2
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ebee:	7c3b      	ldrb	r3, [r7, #16]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	5cd1      	ldrb	r1, [r2, r3]
 800ebf6:	7dfb      	ldrb	r3, [r7, #23]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	7d3a      	ldrb	r2, [r7, #20]
 800ebfc:	404a      	eors	r2, r1
 800ebfe:	b2d1      	uxtb	r1, r2
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ec04:	7c3b      	ldrb	r3, [r7, #16]
 800ec06:	3302      	adds	r3, #2
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	5cd1      	ldrb	r1, [r2, r3]
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	3302      	adds	r3, #2
 800ec10:	7cfa      	ldrb	r2, [r7, #19]
 800ec12:	404a      	eors	r2, r1
 800ec14:	b2d1      	uxtb	r1, r2
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ec1a:	7c3b      	ldrb	r3, [r7, #16]
 800ec1c:	3303      	adds	r3, #3
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	5cd1      	ldrb	r1, [r2, r3]
 800ec22:	7dfb      	ldrb	r3, [r7, #23]
 800ec24:	3303      	adds	r3, #3
 800ec26:	7cba      	ldrb	r2, [r7, #18]
 800ec28:	404a      	eors	r2, r1
 800ec2a:	b2d1      	uxtb	r1, r2
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ec30:	7dfb      	ldrb	r3, [r7, #23]
 800ec32:	3304      	adds	r3, #4
 800ec34:	75fb      	strb	r3, [r7, #23]
 800ec36:	7dfa      	ldrb	r2, [r7, #23]
 800ec38:	7c7b      	ldrb	r3, [r7, #17]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	f4ff af67 	bcc.w	800eb0e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	00010101 	.word	0x00010101
 800ec50:	0801f648 	.word	0x0801f648

0800ec54 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08a      	sub	sp, #40	; 0x28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d038      	beq.n	800ecdc <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	f107 0314 	add.w	r3, r7, #20
 800ec70:	68f9      	ldr	r1, [r7, #12]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fc07 	bl	800e486 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec78:	2301      	movs	r3, #1
 800ec7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec7e:	e014      	b.n	800ecaa <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ec80:	f107 0314 	add.w	r3, r7, #20
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7ff fd5d 	bl	800e744 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec90:	0112      	lsls	r2, r2, #4
 800ec92:	441a      	add	r2, r3
 800ec94:	f107 0314 	add.w	r3, r7, #20
 800ec98:	4611      	mov	r1, r2
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7ff fcab 	bl	800e5f6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800eca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eca4:	3301      	adds	r3, #1
 800eca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ecb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d3e3      	bcc.n	800ec80 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ecb8:	f107 0314 	add.w	r3, r7, #20
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff fca7 	bl	800e610 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecc8:	0112      	lsls	r2, r2, #4
 800ecca:	441a      	add	r2, r3
 800eccc:	f107 0314 	add.w	r3, r7, #20
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	68b8      	ldr	r0, [r7, #8]
 800ecd4:	f7ff fbd7 	bl	800e486 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	e000      	b.n	800ecde <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ecdc:	23ff      	movs	r3, #255	; 0xff
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3728      	adds	r7, #40	; 0x28
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
	...

0800ece8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ece8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecea:	b0a1      	sub	sp, #132	; 0x84
 800ecec:	af12      	add	r7, sp, #72	; 0x48
 800ecee:	4603      	mov	r3, r0
 800ecf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ecf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ecf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 fa12 	bl	800f128 <SecureElementGetKeyByID>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d174      	bne.n	800edf4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed10:	e06c      	b.n	800edec <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ed12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed16:	4939      	ldr	r1, [pc, #228]	; (800edfc <PrintKey+0x114>)
 800ed18:	4613      	mov	r3, r2
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	4413      	add	r3, r2
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	440b      	add	r3, r1
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d15a      	bne.n	800ede2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ed2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed30:	4932      	ldr	r1, [pc, #200]	; (800edfc <PrintKey+0x114>)
 800ed32:	4613      	mov	r3, r2
 800ed34:	005b      	lsls	r3, r3, #1
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	440b      	add	r3, r1
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	6819      	ldr	r1, [r3, #0]
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	785b      	ldrb	r3, [r3, #1]
 800ed44:	461d      	mov	r5, r3
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	789b      	ldrb	r3, [r3, #2]
 800ed4a:	461e      	mov	r6, r3
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	78db      	ldrb	r3, [r3, #3]
 800ed50:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	791b      	ldrb	r3, [r3, #4]
 800ed56:	627b      	str	r3, [r7, #36]	; 0x24
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	795b      	ldrb	r3, [r3, #5]
 800ed5c:	623b      	str	r3, [r7, #32]
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	799b      	ldrb	r3, [r3, #6]
 800ed62:	61fb      	str	r3, [r7, #28]
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	79db      	ldrb	r3, [r3, #7]
 800ed68:	61bb      	str	r3, [r7, #24]
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	7a1b      	ldrb	r3, [r3, #8]
 800ed6e:	617b      	str	r3, [r7, #20]
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	7a5b      	ldrb	r3, [r3, #9]
 800ed74:	613b      	str	r3, [r7, #16]
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	7a9b      	ldrb	r3, [r3, #10]
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	7adb      	ldrb	r3, [r3, #11]
 800ed80:	60bb      	str	r3, [r7, #8]
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	7b1b      	ldrb	r3, [r3, #12]
 800ed86:	607b      	str	r3, [r7, #4]
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	7b5b      	ldrb	r3, [r3, #13]
 800ed8c:	461c      	mov	r4, r3
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	7b9b      	ldrb	r3, [r3, #14]
 800ed92:	4618      	mov	r0, r3
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	7bdb      	ldrb	r3, [r3, #15]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	7c1b      	ldrb	r3, [r3, #16]
 800ed9e:	9310      	str	r3, [sp, #64]	; 0x40
 800eda0:	920f      	str	r2, [sp, #60]	; 0x3c
 800eda2:	900e      	str	r0, [sp, #56]	; 0x38
 800eda4:	940d      	str	r4, [sp, #52]	; 0x34
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	920c      	str	r2, [sp, #48]	; 0x30
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	920b      	str	r2, [sp, #44]	; 0x2c
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	920a      	str	r2, [sp, #40]	; 0x28
 800edb2:	693a      	ldr	r2, [r7, #16]
 800edb4:	9209      	str	r2, [sp, #36]	; 0x24
 800edb6:	697a      	ldr	r2, [r7, #20]
 800edb8:	9208      	str	r2, [sp, #32]
 800edba:	69ba      	ldr	r2, [r7, #24]
 800edbc:	9207      	str	r2, [sp, #28]
 800edbe:	69fa      	ldr	r2, [r7, #28]
 800edc0:	9206      	str	r2, [sp, #24]
 800edc2:	6a3a      	ldr	r2, [r7, #32]
 800edc4:	9205      	str	r2, [sp, #20]
 800edc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edc8:	9204      	str	r2, [sp, #16]
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	9303      	str	r3, [sp, #12]
 800edce:	9602      	str	r6, [sp, #8]
 800edd0:	9501      	str	r5, [sp, #4]
 800edd2:	9100      	str	r1, [sp, #0]
 800edd4:	4b0a      	ldr	r3, [pc, #40]	; (800ee00 <PrintKey+0x118>)
 800edd6:	2200      	movs	r2, #0
 800edd8:	2100      	movs	r1, #0
 800edda:	2002      	movs	r0, #2
 800eddc:	f00f fbc6 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
 800ede0:	e008      	b.n	800edf4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ede2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ede6:	3301      	adds	r3, #1
 800ede8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800edec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edf0:	2b0a      	cmp	r3, #10
 800edf2:	d98e      	bls.n	800ed12 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800edf4:	373c      	adds	r7, #60	; 0x3c
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edfa:	bf00      	nop
 800edfc:	0801f948 	.word	0x0801f948
 800ee00:	0801f1e0 	.word	0x0801f1e0

0800ee04 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee06:	b091      	sub	sp, #68	; 0x44
 800ee08:	af08      	add	r7, sp, #32
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ee12:	f107 0310 	add.w	r3, r7, #16
 800ee16:	4618      	mov	r0, r3
 800ee18:	f000 fbf0 	bl	800f5fc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ee1c:	7c3b      	ldrb	r3, [r7, #16]
 800ee1e:	7c7a      	ldrb	r2, [r7, #17]
 800ee20:	7cb9      	ldrb	r1, [r7, #18]
 800ee22:	7cf8      	ldrb	r0, [r7, #19]
 800ee24:	7d3c      	ldrb	r4, [r7, #20]
 800ee26:	7d7d      	ldrb	r5, [r7, #21]
 800ee28:	7dbe      	ldrb	r6, [r7, #22]
 800ee2a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ee2e:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee32:	9606      	str	r6, [sp, #24]
 800ee34:	9505      	str	r5, [sp, #20]
 800ee36:	9404      	str	r4, [sp, #16]
 800ee38:	9003      	str	r0, [sp, #12]
 800ee3a:	9102      	str	r1, [sp, #8]
 800ee3c:	9201      	str	r2, [sp, #4]
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	4b24      	ldr	r3, [pc, #144]	; (800eed4 <PrintIds+0xd0>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	2100      	movs	r1, #0
 800ee46:	2002      	movs	r0, #2
 800ee48:	f00f fb90 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800ee4c:	f107 0318 	add.w	r3, r7, #24
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 fc03 	bl	800f65c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ee56:	7e3b      	ldrb	r3, [r7, #24]
 800ee58:	7e7a      	ldrb	r2, [r7, #25]
 800ee5a:	7eb9      	ldrb	r1, [r7, #26]
 800ee5c:	7ef8      	ldrb	r0, [r7, #27]
 800ee5e:	7f3c      	ldrb	r4, [r7, #28]
 800ee60:	7f7d      	ldrb	r5, [r7, #29]
 800ee62:	7fbe      	ldrb	r6, [r7, #30]
 800ee64:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ee68:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee6c:	9606      	str	r6, [sp, #24]
 800ee6e:	9505      	str	r5, [sp, #20]
 800ee70:	9404      	str	r4, [sp, #16]
 800ee72:	9003      	str	r0, [sp, #12]
 800ee74:	9102      	str	r1, [sp, #8]
 800ee76:	9201      	str	r2, [sp, #4]
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	4b17      	ldr	r3, [pc, #92]	; (800eed8 <PrintIds+0xd4>)
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	2100      	movs	r1, #0
 800ee80:	2002      	movs	r0, #2
 800ee82:	f00f fb73 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ee86:	f107 020c 	add.w	r2, r7, #12
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 fc16 	bl	800f6c0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ee94:	f107 030c 	add.w	r3, r7, #12
 800ee98:	3303      	adds	r3, #3
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	f107 030c 	add.w	r3, r7, #12
 800eea2:	3302      	adds	r3, #2
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	4619      	mov	r1, r3
 800eea8:	f107 030c 	add.w	r3, r7, #12
 800eeac:	3301      	adds	r3, #1
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f107 030c 	add.w	r3, r7, #12
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	9303      	str	r3, [sp, #12]
 800eeba:	9002      	str	r0, [sp, #8]
 800eebc:	9101      	str	r1, [sp, #4]
 800eebe:	9200      	str	r2, [sp, #0]
 800eec0:	4b06      	ldr	r3, [pc, #24]	; (800eedc <PrintIds+0xd8>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	2100      	movs	r1, #0
 800eec6:	2002      	movs	r0, #2
 800eec8:	f00f fb50 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800eecc:	bf00      	nop
 800eece:	3724      	adds	r7, #36	; 0x24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed4:	0801f23c 	.word	0x0801f23c
 800eed8:	0801f27c 	.word	0x0801f27c
 800eedc:	0801f2bc 	.word	0x0801f2bc

0800eee0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	4603      	mov	r3, r0
 800eee8:	6039      	str	r1, [r7, #0]
 800eeea:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]
 800eef0:	e01a      	b.n	800ef28 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eef2:	4b12      	ldr	r3, [pc, #72]	; (800ef3c <GetKeyByID+0x5c>)
 800eef4:	6819      	ldr	r1, [r3, #0]
 800eef6:	7bfa      	ldrb	r2, [r7, #15]
 800eef8:	4613      	mov	r3, r2
 800eefa:	011b      	lsls	r3, r3, #4
 800eefc:	4413      	add	r3, r2
 800eefe:	440b      	add	r3, r1
 800ef00:	3318      	adds	r3, #24
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	79fa      	ldrb	r2, [r7, #7]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d10b      	bne.n	800ef22 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ef0a:	4b0c      	ldr	r3, [pc, #48]	; (800ef3c <GetKeyByID+0x5c>)
 800ef0c:	6819      	ldr	r1, [r3, #0]
 800ef0e:	7bfa      	ldrb	r2, [r7, #15]
 800ef10:	4613      	mov	r3, r2
 800ef12:	011b      	lsls	r3, r3, #4
 800ef14:	4413      	add	r3, r2
 800ef16:	3318      	adds	r3, #24
 800ef18:	18ca      	adds	r2, r1, r3
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e006      	b.n	800ef30 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	3301      	adds	r3, #1
 800ef26:	73fb      	strb	r3, [r7, #15]
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	2b0a      	cmp	r3, #10
 800ef2c:	d9e1      	bls.n	800eef2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef2e:	2303      	movs	r3, #3
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3714      	adds	r7, #20
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bc80      	pop	{r7}
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	200007dc 	.word	0x200007dc

0800ef40 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ef40:	b590      	push	{r4, r7, lr}
 800ef42:	b0d1      	sub	sp, #324	; 0x144
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ef4a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ef4e:	6020      	str	r0, [r4, #0]
 800ef50:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ef54:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ef58:	6001      	str	r1, [r0, #0]
 800ef5a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ef5e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ef62:	600a      	str	r2, [r1, #0]
 800ef64:	461a      	mov	r2, r3
 800ef66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef6a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef6e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ef70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef74:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d003      	beq.n	800ef86 <ComputeCmac+0x46>
 800ef7e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d101      	bne.n	800ef8a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef86:	2302      	movs	r3, #2
 800ef88:	e05d      	b.n	800f046 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ef8a:	f107 0314 	add.w	r3, r7, #20
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fe ff02 	bl	800dd98 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ef94:	f107 0210 	add.w	r2, r7, #16
 800ef98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef9c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	4611      	mov	r1, r2
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff ff9b 	bl	800eee0 <GetKeyByID>
 800efaa:	4603      	mov	r3, r0
 800efac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800efb0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d144      	bne.n	800f042 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800efb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	f107 0314 	add.w	r3, r7, #20
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fefd 	bl	800ddca <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800efd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d009      	beq.n	800eff2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800efde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efe2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efe6:	f107 0014 	add.w	r0, r7, #20
 800efea:	2210      	movs	r2, #16
 800efec:	6819      	ldr	r1, [r3, #0]
 800efee:	f7fe fefb 	bl	800dde8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800eff2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eff6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800effa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800effe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f002:	f107 0014 	add.w	r0, r7, #20
 800f006:	6812      	ldr	r2, [r2, #0]
 800f008:	6819      	ldr	r1, [r3, #0]
 800f00a:	f7fe feed 	bl	800dde8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f00e:	f107 0214 	add.w	r2, r7, #20
 800f012:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f016:	4611      	mov	r1, r2
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fe ffa7 	bl	800df6c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800f01e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800f022:	461a      	mov	r2, r3
 800f024:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f028:	021b      	lsls	r3, r3, #8
 800f02a:	431a      	orrs	r2, r3
 800f02c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f030:	041b      	lsls	r3, r3, #16
 800f032:	431a      	orrs	r2, r3
 800f034:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f038:	061b      	lsls	r3, r3, #24
 800f03a:	431a      	orrs	r2, r3
 800f03c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f040:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f042:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f046:	4618      	mov	r0, r3
 800f048:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd90      	pop	{r4, r7, pc}

0800f050 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d101      	bne.n	800f062 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f05e:	2302      	movs	r3, #2
 800f060:	e00a      	b.n	800f078 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f062:	4a07      	ldr	r2, [pc, #28]	; (800f080 <SecureElementInit+0x30>)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f068:	4b05      	ldr	r3, [pc, #20]	; (800f080 <SecureElementInit+0x30>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	22d8      	movs	r2, #216	; 0xd8
 800f06e:	4905      	ldr	r1, [pc, #20]	; (800f084 <SecureElementInit+0x34>)
 800f070:	4618      	mov	r0, r3
 800f072:	f00a fed6 	bl	8019e22 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	200007dc 	.word	0x200007dc
 800f084:	0801fb64 	.word	0x0801fb64

0800f088 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800f092:	2300      	movs	r3, #0
 800f094:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800f096:	f107 030c 	add.w	r3, r7, #12
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 faae 	bl	800f5fc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f0a0:	f107 0308 	add.w	r3, r7, #8
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	2001      	movs	r0, #1
 800f0a8:	f000 fb0a 	bl	800f6c0 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d024      	beq.n	800f0fc <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	75bb      	strb	r3, [r7, #22]
 800f0ba:	e00c      	b.n	800f0d6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800f0bc:	7dbb      	ldrb	r3, [r7, #22]
 800f0be:	3318      	adds	r3, #24
 800f0c0:	443b      	add	r3, r7
 800f0c2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d002      	beq.n	800f0d0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	75fb      	strb	r3, [r7, #23]
                break;
 800f0ce:	e005      	b.n	800f0dc <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0d0:	7dbb      	ldrb	r3, [r7, #22]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	75bb      	strb	r3, [r7, #22]
 800f0d6:	7dbb      	ldrb	r3, [r7, #22]
 800f0d8:	2b07      	cmp	r3, #7
 800f0da:	d9ef      	bls.n	800f0bc <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800f0dc:	7dfb      	ldrb	r3, [r7, #23]
 800f0de:	f083 0301 	eor.w	r3, r3, #1
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d009      	beq.n	800f0fc <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800f0e8:	f107 020c 	add.w	r2, r7, #12
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800f0f2:	f107 030c 	add.w	r3, r7, #12
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f000 fa68 	bl	800f5cc <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00c      	beq.n	800f11c <SecureElementInitMcuID+0x94>
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d109      	bne.n	800f11c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800f108:	f107 0208 	add.w	r2, r7, #8
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	4610      	mov	r0, r2
 800f110:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	4619      	mov	r1, r3
 800f116:	2001      	movs	r0, #1
 800f118:	f000 fab8 	bl	800f68c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3718      	adds	r7, #24
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
	...

0800f128 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	6039      	str	r1, [r7, #0]
 800f132:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f134:	2300      	movs	r3, #0
 800f136:	73fb      	strb	r3, [r7, #15]
 800f138:	e01a      	b.n	800f170 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f13a:	4b12      	ldr	r3, [pc, #72]	; (800f184 <SecureElementGetKeyByID+0x5c>)
 800f13c:	6819      	ldr	r1, [r3, #0]
 800f13e:	7bfa      	ldrb	r2, [r7, #15]
 800f140:	4613      	mov	r3, r2
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	4413      	add	r3, r2
 800f146:	440b      	add	r3, r1
 800f148:	3318      	adds	r3, #24
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	79fa      	ldrb	r2, [r7, #7]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d10b      	bne.n	800f16a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f152:	4b0c      	ldr	r3, [pc, #48]	; (800f184 <SecureElementGetKeyByID+0x5c>)
 800f154:	6819      	ldr	r1, [r3, #0]
 800f156:	7bfa      	ldrb	r2, [r7, #15]
 800f158:	4613      	mov	r3, r2
 800f15a:	011b      	lsls	r3, r3, #4
 800f15c:	4413      	add	r3, r2
 800f15e:	3318      	adds	r3, #24
 800f160:	18ca      	adds	r2, r1, r3
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f166:	2300      	movs	r3, #0
 800f168:	e006      	b.n	800f178 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	3301      	adds	r3, #1
 800f16e:	73fb      	strb	r3, [r7, #15]
 800f170:	7bfb      	ldrb	r3, [r7, #15]
 800f172:	2b0a      	cmp	r3, #10
 800f174:	d9e1      	bls.n	800f13a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f176:	2303      	movs	r3, #3
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3714      	adds	r7, #20
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bc80      	pop	{r7}
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	200007dc 	.word	0x200007dc

0800f188 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f18c:	2000      	movs	r0, #0
 800f18e:	f7ff fdab 	bl	800ece8 <PrintKey>
    PrintKey( NWK_KEY );
 800f192:	2001      	movs	r0, #1
 800f194:	f7ff fda8 	bl	800ece8 <PrintKey>
    PrintKey( APP_S_KEY );
 800f198:	2009      	movs	r0, #9
 800f19a:	f7ff fda5 	bl	800ece8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f19e:	2008      	movs	r0, #8
 800f1a0:	f7ff fda2 	bl	800ece8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f7ff fe2d 	bl	800ee04 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f1ba:	200b      	movs	r0, #11
 800f1bc:	f7ff fd94 	bl	800ece8 <PrintKey>
    PrintKey( MC_KE_KEY );
 800f1c0:	200c      	movs	r0, #12
 800f1c2:	f7ff fd91 	bl	800ece8 <PrintKey>
    PrintKey( APP_S_KEY );
 800f1c6:	2009      	movs	r0, #9
 800f1c8:	f7ff fd8e 	bl	800ece8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f1cc:	2008      	movs	r0, #8
 800f1ce:	f7ff fd8b 	bl	800ece8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f1d2:	200a      	movs	r0, #10
 800f1d4:	f7ff fd88 	bl	800ece8 <PrintKey>
    PrintIds( mode );
 800f1d8:	79fb      	ldrb	r3, [r7, #7]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff fe12 	bl	800ee04 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b088      	sub	sp, #32
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d101      	bne.n	800f202 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1fe:	2302      	movs	r3, #2
 800f200:	e04c      	b.n	800f29c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f202:	2300      	movs	r3, #0
 800f204:	77fb      	strb	r3, [r7, #31]
 800f206:	e045      	b.n	800f294 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f208:	4b26      	ldr	r3, [pc, #152]	; (800f2a4 <SecureElementSetKey+0xb8>)
 800f20a:	6819      	ldr	r1, [r3, #0]
 800f20c:	7ffa      	ldrb	r2, [r7, #31]
 800f20e:	4613      	mov	r3, r2
 800f210:	011b      	lsls	r3, r3, #4
 800f212:	4413      	add	r3, r2
 800f214:	440b      	add	r3, r1
 800f216:	3318      	adds	r3, #24
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	79fa      	ldrb	r2, [r7, #7]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d136      	bne.n	800f28e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	2b0d      	cmp	r3, #13
 800f224:	d123      	bne.n	800f26e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f226:	2306      	movs	r3, #6
 800f228:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f22a:	2300      	movs	r3, #0
 800f22c:	60fb      	str	r3, [r7, #12]
 800f22e:	f107 0310 	add.w	r3, r7, #16
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	605a      	str	r2, [r3, #4]
 800f238:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f23a:	f107 030c 	add.w	r3, r7, #12
 800f23e:	220c      	movs	r2, #12
 800f240:	2110      	movs	r1, #16
 800f242:	6838      	ldr	r0, [r7, #0]
 800f244:	f000 f876 	bl	800f334 <SecureElementAesEncrypt>
 800f248:	4603      	mov	r3, r0
 800f24a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f24c:	4b15      	ldr	r3, [pc, #84]	; (800f2a4 <SecureElementSetKey+0xb8>)
 800f24e:	6819      	ldr	r1, [r3, #0]
 800f250:	7ffa      	ldrb	r2, [r7, #31]
 800f252:	4613      	mov	r3, r2
 800f254:	011b      	lsls	r3, r3, #4
 800f256:	4413      	add	r3, r2
 800f258:	3318      	adds	r3, #24
 800f25a:	440b      	add	r3, r1
 800f25c:	3301      	adds	r3, #1
 800f25e:	f107 010c 	add.w	r1, r7, #12
 800f262:	2210      	movs	r2, #16
 800f264:	4618      	mov	r0, r3
 800f266:	f00a fddc 	bl	8019e22 <memcpy1>
                return retval;
 800f26a:	7fbb      	ldrb	r3, [r7, #30]
 800f26c:	e016      	b.n	800f29c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f26e:	4b0d      	ldr	r3, [pc, #52]	; (800f2a4 <SecureElementSetKey+0xb8>)
 800f270:	6819      	ldr	r1, [r3, #0]
 800f272:	7ffa      	ldrb	r2, [r7, #31]
 800f274:	4613      	mov	r3, r2
 800f276:	011b      	lsls	r3, r3, #4
 800f278:	4413      	add	r3, r2
 800f27a:	3318      	adds	r3, #24
 800f27c:	440b      	add	r3, r1
 800f27e:	3301      	adds	r3, #1
 800f280:	2210      	movs	r2, #16
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	4618      	mov	r0, r3
 800f286:	f00a fdcc 	bl	8019e22 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f28a:	2300      	movs	r3, #0
 800f28c:	e006      	b.n	800f29c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f28e:	7ffb      	ldrb	r3, [r7, #31]
 800f290:	3301      	adds	r3, #1
 800f292:	77fb      	strb	r3, [r7, #31]
 800f294:	7ffb      	ldrb	r3, [r7, #31]
 800f296:	2b0a      	cmp	r3, #10
 800f298:	d9b6      	bls.n	800f208 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f29a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3720      	adds	r7, #32
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	200007dc 	.word	0x200007dc

0800f2a8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b086      	sub	sp, #24
 800f2ac:	af02      	add	r7, sp, #8
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f2b6:	78fb      	ldrb	r3, [r7, #3]
 800f2b8:	2b0b      	cmp	r3, #11
 800f2ba:	d901      	bls.n	800f2c0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	e009      	b.n	800f2d4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f2c0:	78fa      	ldrb	r2, [r7, #3]
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	68b9      	ldr	r1, [r7, #8]
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f7ff fe37 	bl	800ef40 <ComputeCmac>
 800f2d2:	4603      	mov	r3, r0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b088      	sub	sp, #32
 800f2e0:	af02      	add	r7, sp, #8
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d101      	bne.n	800f2f4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2f0:	2302      	movs	r3, #2
 800f2f2:	e01b      	b.n	800f32c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f2f4:	2306      	movs	r3, #6
 800f2f6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f2fc:	78fa      	ldrb	r2, [r7, #3]
 800f2fe:	f107 0310 	add.w	r3, r7, #16
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	4613      	mov	r3, r2
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	68f9      	ldr	r1, [r7, #12]
 800f30a:	2000      	movs	r0, #0
 800f30c:	f7ff fe18 	bl	800ef40 <ComputeCmac>
 800f310:	4603      	mov	r3, r0
 800f312:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f314:	7dfb      	ldrb	r3, [r7, #23]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d001      	beq.n	800f31e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
 800f31c:	e006      	b.n	800f32c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	429a      	cmp	r2, r3
 800f324:	d001      	beq.n	800f32a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f326:	2301      	movs	r3, #1
 800f328:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3718      	adds	r7, #24
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b0c2      	sub	sp, #264	; 0x108
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f340:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f344:	6001      	str	r1, [r0, #0]
 800f346:	4611      	mov	r1, r2
 800f348:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f34c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f356:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f35a:	460a      	mov	r2, r1
 800f35c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d006      	beq.n	800f372 <SecureElementAesEncrypt+0x3e>
 800f364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f372:	2302      	movs	r3, #2
 800f374:	e059      	b.n	800f42a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f37a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f003 030f 	and.w	r3, r3, #15
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f388:	2305      	movs	r3, #5
 800f38a:	e04e      	b.n	800f42a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f38c:	f107 0314 	add.w	r3, r7, #20
 800f390:	22f0      	movs	r2, #240	; 0xf0
 800f392:	2100      	movs	r1, #0
 800f394:	4618      	mov	r0, r3
 800f396:	f00a fd7f 	bl	8019e98 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f39a:	f107 0210 	add.w	r2, r7, #16
 800f39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff fd98 	bl	800eee0 <GetKeyByID>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f3b6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d133      	bne.n	800f426 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	f107 0214 	add.w	r2, r7, #20
 800f3c6:	2110      	movs	r1, #16
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff fb65 	bl	800ea98 <lorawan_aes_set_key>

        uint8_t block = 0;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f3d4:	e020      	b.n	800f418 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f3d6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	18d0      	adds	r0, r2, r3
 800f3de:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3e2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f3e6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f3ea:	6812      	ldr	r2, [r2, #0]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	f107 0214 	add.w	r2, r7, #20
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	f7ff fc2e 	bl	800ec54 <lorawan_aes_encrypt>
            block = block + 16;
 800f3f8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3fc:	3310      	adds	r3, #16
 800f3fe:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f406:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f40a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f40e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f412:	6812      	ldr	r2, [r2, #0]
 800f414:	3a10      	subs	r2, #16
 800f416:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f41c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1d7      	bne.n	800f3d6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f426:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b088      	sub	sp, #32
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	460b      	mov	r3, r1
 800f43e:	70fb      	strb	r3, [r7, #3]
 800f440:	4613      	mov	r3, r2
 800f442:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d101      	bne.n	800f44e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f44a:	2302      	movs	r3, #2
 800f44c:	e02e      	b.n	800f4ac <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f44e:	2306      	movs	r3, #6
 800f450:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f452:	78bb      	ldrb	r3, [r7, #2]
 800f454:	2b0c      	cmp	r3, #12
 800f456:	d104      	bne.n	800f462 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f458:	78fb      	ldrb	r3, [r7, #3]
 800f45a:	2b0b      	cmp	r3, #11
 800f45c:	d001      	beq.n	800f462 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f45e:	2303      	movs	r3, #3
 800f460:	e024      	b.n	800f4ac <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f462:	2300      	movs	r3, #0
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	f107 0310 	add.w	r3, r7, #16
 800f46a:	2200      	movs	r2, #0
 800f46c:	601a      	str	r2, [r3, #0]
 800f46e:	605a      	str	r2, [r3, #4]
 800f470:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f472:	f107 030c 	add.w	r3, r7, #12
 800f476:	78fa      	ldrb	r2, [r7, #3]
 800f478:	2110      	movs	r1, #16
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff ff5a 	bl	800f334 <SecureElementAesEncrypt>
 800f480:	4603      	mov	r3, r0
 800f482:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f484:	7ffb      	ldrb	r3, [r7, #31]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f48a:	7ffb      	ldrb	r3, [r7, #31]
 800f48c:	e00e      	b.n	800f4ac <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f48e:	f107 020c 	add.w	r2, r7, #12
 800f492:	78bb      	ldrb	r3, [r7, #2]
 800f494:	4611      	mov	r1, r2
 800f496:	4618      	mov	r0, r3
 800f498:	f7ff fea8 	bl	800f1ec <SecureElementSetKey>
 800f49c:	4603      	mov	r3, r0
 800f49e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f4a0:	7ffb      	ldrb	r3, [r7, #31]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f4a6:	7ffb      	ldrb	r3, [r7, #31]
 800f4a8:	e000      	b.n	800f4ac <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f4aa:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3720      	adds	r7, #32
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b086      	sub	sp, #24
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60b9      	str	r1, [r7, #8]
 800f4bc:	607b      	str	r3, [r7, #4]
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d005      	beq.n	800f4d8 <SecureElementProcessJoinAccept+0x24>
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d002      	beq.n	800f4d8 <SecureElementProcessJoinAccept+0x24>
 800f4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d101      	bne.n	800f4dc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4d8:	2302      	movs	r3, #2
 800f4da:	e05c      	b.n	800f596 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f4dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4e0:	2b21      	cmp	r3, #33	; 0x21
 800f4e2:	d901      	bls.n	800f4e8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f4e4:	2305      	movs	r3, #5
 800f4e6:	e056      	b.n	800f596 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f4ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	6879      	ldr	r1, [r7, #4]
 800f4f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4f8:	f00a fc93 	bl	8019e22 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	1c58      	adds	r0, r3, #1
 800f500:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f504:	3b01      	subs	r3, #1
 800f506:	4619      	mov	r1, r3
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	3301      	adds	r3, #1
 800f50c:	7dfa      	ldrb	r2, [r7, #23]
 800f50e:	f7ff ff11 	bl	800f334 <SecureElementAesEncrypt>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f518:	2307      	movs	r3, #7
 800f51a:	e03c      	b.n	800f596 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51e:	330b      	adds	r3, #11
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	09db      	lsrs	r3, r3, #7
 800f524:	b2da      	uxtb	r2, r3
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f52a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f52e:	3b04      	subs	r3, #4
 800f530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f532:	4413      	add	r3, r2
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	4619      	mov	r1, r3
 800f538:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f53c:	3b03      	subs	r3, #3
 800f53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f540:	4413      	add	r3, r2
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	021b      	lsls	r3, r3, #8
 800f546:	ea41 0203 	orr.w	r2, r1, r3
 800f54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f54e:	3b02      	subs	r3, #2
 800f550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f552:	440b      	add	r3, r1
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	041b      	lsls	r3, r3, #16
 800f558:	431a      	orrs	r2, r3
 800f55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f55e:	3b01      	subs	r3, #1
 800f560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f562:	440b      	add	r3, r1
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	061b      	lsls	r3, r3, #24
 800f568:	4313      	orrs	r3, r2
 800f56a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10d      	bne.n	800f590 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f574:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f578:	3b04      	subs	r3, #4
 800f57a:	4619      	mov	r1, r3
 800f57c:	2301      	movs	r3, #1
 800f57e:	693a      	ldr	r2, [r7, #16]
 800f580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f582:	f7ff feab 	bl	800f2dc <SecureElementVerifyAesCmac>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d003      	beq.n	800f594 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f58c:	2301      	movs	r3, #1
 800f58e:	e002      	b.n	800f596 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f590:	2304      	movs	r3, #4
 800f592:	e000      	b.n	800f596 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3718      	adds	r7, #24
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
	...

0800f5a0 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e006      	b.n	800f5c0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f5b2:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <SecureElementRandomNumber+0x28>)
 800f5b4:	695b      	ldr	r3, [r3, #20]
 800f5b6:	4798      	blx	r3
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	0801fa14 	.word	0x0801fa14

0800f5cc <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5da:	2302      	movs	r3, #2
 800f5dc:	e007      	b.n	800f5ee <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <SecureElementSetDevEui+0x2c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2208      	movs	r2, #8
 800f5e4:	6879      	ldr	r1, [r7, #4]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f00a fc1b 	bl	8019e22 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5ec:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	200007dc 	.word	0x200007dc

0800f5fc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f60a:	2302      	movs	r3, #2
 800f60c:	e007      	b.n	800f61e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f60e:	4b06      	ldr	r3, [pc, #24]	; (800f628 <SecureElementGetDevEui+0x2c>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2208      	movs	r2, #8
 800f614:	4619      	mov	r1, r3
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f00a fc03 	bl	8019e22 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f61c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	200007dc 	.word	0x200007dc

0800f62c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f63a:	2302      	movs	r3, #2
 800f63c:	e008      	b.n	800f650 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f63e:	4b06      	ldr	r3, [pc, #24]	; (800f658 <SecureElementSetJoinEui+0x2c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	3308      	adds	r3, #8
 800f644:	2208      	movs	r2, #8
 800f646:	6879      	ldr	r1, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	f00a fbea 	bl	8019e22 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f64e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	200007dc 	.word	0x200007dc

0800f65c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f66a:	2302      	movs	r3, #2
 800f66c:	e008      	b.n	800f680 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f66e:	4b06      	ldr	r3, [pc, #24]	; (800f688 <SecureElementGetJoinEui+0x2c>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3308      	adds	r3, #8
 800f674:	2208      	movs	r2, #8
 800f676:	4619      	mov	r1, r3
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f00a fbd2 	bl	8019e22 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f67e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	200007dc 	.word	0x200007dc

0800f68c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	4603      	mov	r3, r0
 800f694:	6039      	str	r1, [r7, #0]
 800f696:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f698:	79fb      	ldrb	r3, [r7, #7]
 800f69a:	2b02      	cmp	r3, #2
 800f69c:	d104      	bne.n	800f6a8 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f69e:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <SecureElementSetDevAddr+0x30>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	611a      	str	r2, [r3, #16]
 800f6a6:	e003      	b.n	800f6b0 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f6a8:	4b04      	ldr	r3, [pc, #16]	; (800f6bc <SecureElementSetDevAddr+0x30>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f6b0:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bc80      	pop	{r7}
 800f6ba:	4770      	bx	lr
 800f6bc:	200007dc 	.word	0x200007dc

0800f6c0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	6039      	str	r1, [r7, #0]
 800f6ca:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d101      	bne.n	800f6d6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	e00e      	b.n	800f6f4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d105      	bne.n	800f6e8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f6dc:	4b08      	ldr	r3, [pc, #32]	; (800f700 <SecureElementGetDevAddr+0x40>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	691a      	ldr	r2, [r3, #16]
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	e004      	b.n	800f6f2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <SecureElementGetDevAddr+0x40>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	695a      	ldr	r2, [r3, #20]
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f6f2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bc80      	pop	{r7}
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	200007dc 	.word	0x200007dc

0800f704 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f70e:	4a22      	ldr	r2, [pc, #136]	; (800f798 <LmHandlerInit+0x94>)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f714:	4b21      	ldr	r3, [pc, #132]	; (800f79c <LmHandlerInit+0x98>)
 800f716:	4a22      	ldr	r2, [pc, #136]	; (800f7a0 <LmHandlerInit+0x9c>)
 800f718:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f71a:	4b20      	ldr	r3, [pc, #128]	; (800f79c <LmHandlerInit+0x98>)
 800f71c:	4a21      	ldr	r2, [pc, #132]	; (800f7a4 <LmHandlerInit+0xa0>)
 800f71e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f720:	4b1e      	ldr	r3, [pc, #120]	; (800f79c <LmHandlerInit+0x98>)
 800f722:	4a21      	ldr	r2, [pc, #132]	; (800f7a8 <LmHandlerInit+0xa4>)
 800f724:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f726:	4b1d      	ldr	r3, [pc, #116]	; (800f79c <LmHandlerInit+0x98>)
 800f728:	4a20      	ldr	r2, [pc, #128]	; (800f7ac <LmHandlerInit+0xa8>)
 800f72a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f72c:	4b1a      	ldr	r3, [pc, #104]	; (800f798 <LmHandlerInit+0x94>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	4a1f      	ldr	r2, [pc, #124]	; (800f7b0 <LmHandlerInit+0xac>)
 800f734:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f736:	4b18      	ldr	r3, [pc, #96]	; (800f798 <LmHandlerInit+0x94>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	4a1c      	ldr	r2, [pc, #112]	; (800f7b0 <LmHandlerInit+0xac>)
 800f73e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f740:	4b15      	ldr	r3, [pc, #84]	; (800f798 <LmHandlerInit+0x94>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	4a1a      	ldr	r2, [pc, #104]	; (800f7b0 <LmHandlerInit+0xac>)
 800f748:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f74a:	4b13      	ldr	r3, [pc, #76]	; (800f798 <LmHandlerInit+0x94>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	4a17      	ldr	r2, [pc, #92]	; (800f7b0 <LmHandlerInit+0xac>)
 800f752:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f754:	4b16      	ldr	r3, [pc, #88]	; (800f7b0 <LmHandlerInit+0xac>)
 800f756:	4a17      	ldr	r2, [pc, #92]	; (800f7b4 <LmHandlerInit+0xb0>)
 800f758:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f75a:	4b0f      	ldr	r3, [pc, #60]	; (800f798 <LmHandlerInit+0x94>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	4a13      	ldr	r2, [pc, #76]	; (800f7b0 <LmHandlerInit+0xac>)
 800f762:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f764:	4914      	ldr	r1, [pc, #80]	; (800f7b8 <LmHandlerInit+0xb4>)
 800f766:	2000      	movs	r0, #0
 800f768:	f000 fd44 	bl	80101f4 <LmHandlerPackageRegister>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f772:	f04f 33ff 	mov.w	r3, #4294967295
 800f776:	e00a      	b.n	800f78e <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f778:	463b      	mov	r3, r7
 800f77a:	4618      	mov	r0, r3
 800f77c:	f001 fa30 	bl	8010be0 <LmhpPackagesRegistrationInit>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f786:	f04f 33ff 	mov.w	r3, #4294967295
 800f78a:	e000      	b.n	800f78e <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f78c:	2300      	movs	r3, #0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3708      	adds	r7, #8
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	20000824 	.word	0x20000824
 800f79c:	20000828 	.word	0x20000828
 800f7a0:	0800feb9 	.word	0x0800feb9
 800f7a4:	0800ff2d 	.word	0x0800ff2d
 800f7a8:	0801000d 	.word	0x0801000d
 800f7ac:	08010161 	.word	0x08010161
 800f7b0:	20000838 	.word	0x20000838
 800f7b4:	080105b5 	.word	0x080105b5
 800f7b8:	200000a4 	.word	0x200000a4

0800f7bc <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b090      	sub	sp, #64	; 0x40
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f7c4:	2218      	movs	r2, #24
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	4852      	ldr	r0, [pc, #328]	; (800f914 <LmHandlerConfigure+0x158>)
 800f7ca:	f00a fb2a 	bl	8019e22 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f7ce:	f7fe faa1 	bl	800dd14 <LoraInfo_GetPtr>
 800f7d2:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f7d4:	4b4f      	ldr	r3, [pc, #316]	; (800f914 <LmHandlerConfigure+0x158>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	2301      	movs	r3, #1
 800f7dc:	4093      	lsls	r3, r2
 800f7de:	461a      	mov	r2, r3
 800f7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d106      	bne.n	800f7f8 <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f7ea:	4b4b      	ldr	r3, [pc, #300]	; (800f918 <LmHandlerConfigure+0x15c>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	f00e febb 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f7f6:	e7fe      	b.n	800f7f6 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f7f8:	4b46      	ldr	r3, [pc, #280]	; (800f914 <LmHandlerConfigure+0x158>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4947      	ldr	r1, [pc, #284]	; (800f91c <LmHandlerConfigure+0x160>)
 800f800:	4847      	ldr	r0, [pc, #284]	; (800f920 <LmHandlerConfigure+0x164>)
 800f802:	f004 fbc3 	bl	8013f8c <LoRaMacInitialization>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f80c:	f04f 33ff 	mov.w	r3, #4294967295
 800f810:	e07c      	b.n	800f90c <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f812:	2305      	movs	r3, #5
 800f814:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f816:	2300      	movs	r3, #0
 800f818:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f81a:	f107 0314 	add.w	r3, r7, #20
 800f81e:	4618      	mov	r0, r3
 800f820:	f005 f902 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f824:	4b3d      	ldr	r3, [pc, #244]	; (800f91c <LmHandlerConfigure+0x160>)
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	4a3c      	ldr	r2, [pc, #240]	; (800f91c <LmHandlerConfigure+0x160>)
 800f82a:	68d2      	ldr	r2, [r2, #12]
 800f82c:	4611      	mov	r1, r2
 800f82e:	4618      	mov	r0, r3
 800f830:	f7ff fc2a 	bl	800f088 <SecureElementInitMcuID>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f83a:	f04f 33ff 	mov.w	r3, #4294967295
 800f83e:	e065      	b.n	800f90c <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f840:	2306      	movs	r3, #6
 800f842:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4618      	mov	r0, r3
 800f84a:	f004 ff37 	bl	80146bc <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	4a34      	ldr	r2, [pc, #208]	; (800f924 <LmHandlerConfigure+0x168>)
 800f852:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f854:	f107 0314 	add.w	r3, r7, #20
 800f858:	4618      	mov	r0, r3
 800f85a:	f005 f8e5 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f85e:	2302      	movs	r3, #2
 800f860:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f862:	4b30      	ldr	r3, [pc, #192]	; (800f924 <LmHandlerConfigure+0x168>)
 800f864:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f866:	f107 0314 	add.w	r3, r7, #20
 800f86a:	4618      	mov	r0, r3
 800f86c:	f004 ff26 	bl	80146bc <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f870:	2303      	movs	r3, #3
 800f872:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f874:	4b2c      	ldr	r3, [pc, #176]	; (800f928 <LmHandlerConfigure+0x16c>)
 800f876:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f878:	f107 0314 	add.w	r3, r7, #20
 800f87c:	4618      	mov	r0, r3
 800f87e:	f004 ff1d 	bl	80146bc <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f882:	f7ff fc81 	bl	800f188 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f886:	230f      	movs	r3, #15
 800f888:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f88a:	2301      	movs	r3, #1
 800f88c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f88e:	f107 0314 	add.w	r3, r7, #20
 800f892:	4618      	mov	r0, r3
 800f894:	f005 f8c8 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f898:	2310      	movs	r3, #16
 800f89a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f89c:	2300      	movs	r3, #0
 800f89e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8a0:	f107 0314 	add.w	r3, r7, #20
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f005 f8bf 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f8aa:	2304      	movs	r3, #4
 800f8ac:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f8ae:	4b19      	ldr	r3, [pc, #100]	; (800f914 <LmHandlerConfigure+0x158>)
 800f8b0:	789b      	ldrb	r3, [r3, #2]
 800f8b2:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8b4:	f107 0314 	add.w	r3, r7, #20
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f005 f8b5 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f8be:	2339      	movs	r3, #57	; 0x39
 800f8c0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f8c2:	4b14      	ldr	r3, [pc, #80]	; (800f914 <LmHandlerConfigure+0x158>)
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8c8:	f107 0314 	add.w	r3, r7, #20
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f005 f8ab 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f8d2:	230f      	movs	r3, #15
 800f8d4:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f8d6:	4b0f      	ldr	r3, [pc, #60]	; (800f914 <LmHandlerConfigure+0x158>)
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	f107 020c 	add.w	r2, r7, #12
 800f8de:	4611      	mov	r1, r2
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f007 ff84 	bl	80177ee <RegionGetPhyParam>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	bf14      	ite	ne
 800f8f0:	2301      	movne	r3, #1
 800f8f2:	2300      	moveq	r3, #0
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	4b07      	ldr	r3, [pc, #28]	; (800f914 <LmHandlerConfigure+0x158>)
 800f8f8:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f8fa:	2014      	movs	r0, #20
 800f8fc:	f000 fac4 	bl	800fe88 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f900:	4b04      	ldr	r3, [pc, #16]	; (800f914 <LmHandlerConfigure+0x158>)
 800f902:	79db      	ldrb	r3, [r3, #7]
 800f904:	4618      	mov	r0, r3
 800f906:	f005 fe6b 	bl	80155e0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3740      	adds	r7, #64	; 0x40
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	2000080c 	.word	0x2000080c
 800f918:	0801f2e8 	.word	0x0801f2e8
 800f91c:	20000838 	.word	0x20000838
 800f920:	20000828 	.word	0x20000828
 800f924:	200007e0 	.word	0x200007e0
 800f928:	200007e8 	.word	0x200007e8

0800f92c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f930:	f002 fb36 	bl	8011fa0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f934:	f000 fd9c 	bl	8010470 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f938:	f000 fd6c 	bl	8010414 <LmHandlerPackageIsTxPending>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f940:	bd80      	pop	{r7, pc}
	...

0800f944 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f944:	b480      	push	{r7}
 800f946:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f948:	4b02      	ldr	r3, [pc, #8]	; (800f954 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f94a:	681b      	ldr	r3, [r3, #0]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	46bd      	mov	sp, r7
 800f950:	bc80      	pop	{r7}
 800f952:	4770      	bx	lr
 800f954:	20000850 	.word	0x20000850

0800f958 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b092      	sub	sp, #72	; 0x48
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	4603      	mov	r3, r0
 800f960:	460a      	mov	r2, r1
 800f962:	71fb      	strb	r3, [r7, #7]
 800f964:	4613      	mov	r3, r2
 800f966:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f968:	2301      	movs	r3, #1
 800f96a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f96e:	4b47      	ldr	r3, [pc, #284]	; (800fa8c <LmHandlerJoin+0x134>)
 800f970:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f974:	b2db      	uxtb	r3, r3
 800f976:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f97a:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <LmHandlerJoin+0x134>)
 800f97c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f980:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f984:	79fb      	ldrb	r3, [r7, #7]
 800f986:	2b02      	cmp	r3, #2
 800f988:	d110      	bne.n	800f9ac <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f98a:	2302      	movs	r3, #2
 800f98c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f990:	4b3f      	ldr	r3, [pc, #252]	; (800fa90 <LmHandlerJoin+0x138>)
 800f992:	2202      	movs	r2, #2
 800f994:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f996:	4a3e      	ldr	r2, [pc, #248]	; (800fa90 <LmHandlerJoin+0x138>)
 800f998:	79bb      	ldrb	r3, [r7, #6]
 800f99a:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f99c:	f004 fda8 	bl	80144f0 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f9a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f005 fbd3 	bl	8015150 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f9aa:	e06b      	b.n	800fa84 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f9b2:	4b37      	ldr	r3, [pc, #220]	; (800fa90 <LmHandlerJoin+0x138>)
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f9b8:	4b34      	ldr	r3, [pc, #208]	; (800fa8c <LmHandlerJoin+0x134>)
 800f9ba:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f9be:	4b34      	ldr	r3, [pc, #208]	; (800fa90 <LmHandlerJoin+0x138>)
 800f9c0:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f9c2:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <LmHandlerJoin+0x134>)
 800f9c4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f9c8:	4b31      	ldr	r3, [pc, #196]	; (800fa90 <LmHandlerJoin+0x138>)
 800f9ca:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f9cc:	4b30      	ldr	r3, [pc, #192]	; (800fa90 <LmHandlerJoin+0x138>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f9d2:	4a2f      	ldr	r2, [pc, #188]	; (800fa90 <LmHandlerJoin+0x138>)
 800f9d4:	79bb      	ldrb	r3, [r7, #6]
 800f9d6:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f9d8:	4b2e      	ldr	r3, [pc, #184]	; (800fa94 <LmHandlerJoin+0x13c>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	f083 0301 	eor.w	r3, r3, #1
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d034      	beq.n	800fa50 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f9e6:	231e      	movs	r3, #30
 800f9e8:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f9ea:	4b28      	ldr	r3, [pc, #160]	; (800fa8c <LmHandlerJoin+0x134>)
 800f9ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9f0:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9f2:	f107 030c 	add.w	r3, r7, #12
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f005 f816 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f9fc:	231f      	movs	r3, #31
 800f9fe:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800fa00:	4b22      	ldr	r3, [pc, #136]	; (800fa8c <LmHandlerJoin+0x134>)
 800fa02:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa06:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa08:	f107 030c 	add.w	r3, r7, #12
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f005 f80b 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800fa12:	2321      	movs	r3, #33	; 0x21
 800fa14:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800fa16:	4b1d      	ldr	r3, [pc, #116]	; (800fa8c <LmHandlerJoin+0x134>)
 800fa18:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa1c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa1e:	f107 030c 	add.w	r3, r7, #12
 800fa22:	4618      	mov	r0, r3
 800fa24:	f005 f800 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fa28:	2320      	movs	r3, #32
 800fa2a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800fa2c:	4b17      	ldr	r3, [pc, #92]	; (800fa8c <LmHandlerJoin+0x134>)
 800fa2e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa32:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa34:	f107 030c 	add.w	r3, r7, #12
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f004 fff5 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800fa3e:	2328      	movs	r3, #40	; 0x28
 800fa40:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800fa42:	4b15      	ldr	r3, [pc, #84]	; (800fa98 <LmHandlerJoin+0x140>)
 800fa44:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa46:	f107 030c 	add.w	r3, r7, #12
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f004 ffec 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800fa50:	f004 fd4e 	bl	80144f0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa54:	2301      	movs	r3, #1
 800fa56:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800fa5c:	f107 030c 	add.w	r3, r7, #12
 800fa60:	4618      	mov	r0, r3
 800fa62:	f004 ffe1 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fa66:	4b0d      	ldr	r3, [pc, #52]	; (800fa9c <LmHandlerJoin+0x144>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d004      	beq.n	800fa7a <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fa70:	4b0a      	ldr	r3, [pc, #40]	; (800fa9c <LmHandlerJoin+0x144>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa76:	4806      	ldr	r0, [pc, #24]	; (800fa90 <LmHandlerJoin+0x138>)
 800fa78:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fa7a:	4b04      	ldr	r3, [pc, #16]	; (800fa8c <LmHandlerJoin+0x134>)
 800fa7c:	785b      	ldrb	r3, [r3, #1]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 f932 	bl	800fce8 <LmHandlerRequestClass>
}
 800fa84:	bf00      	nop
 800fa86:	3748      	adds	r7, #72	; 0x48
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	2000080c 	.word	0x2000080c
 800fa90:	200000b0 	.word	0x200000b0
 800fa94:	20000946 	.word	0x20000946
 800fa98:	01000300 	.word	0x01000300
 800fa9c:	20000824 	.word	0x20000824

0800faa0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b08c      	sub	sp, #48	; 0x30
 800faa4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800faa6:	2301      	movs	r3, #1
 800faa8:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800faaa:	1d3b      	adds	r3, r7, #4
 800faac:	4618      	mov	r0, r3
 800faae:	f004 fe05 	bl	80146bc <LoRaMacMibGetRequestConfirm>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800fab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d106      	bne.n	800face <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fac0:	7a3b      	ldrb	r3, [r7, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800fac6:	2300      	movs	r3, #0
 800fac8:	e002      	b.n	800fad0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800faca:	2301      	movs	r3, #1
 800facc:	e000      	b.n	800fad0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800face:	2300      	movs	r3, #0
    }
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3730      	adds	r7, #48	; 0x30
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b08a      	sub	sp, #40	; 0x28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	460b      	mov	r3, r1
 800fae2:	70fb      	strb	r3, [r7, #3]
 800fae4:	4613      	mov	r3, r2
 800fae6:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fae8:	23ff      	movs	r3, #255	; 0xff
 800faea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800faee:	f001 ffe3 	bl	8011ab8 <LoRaMacIsBusy>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800faf8:	f06f 0301 	mvn.w	r3, #1
 800fafc:	e0be      	b.n	800fc7c <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800fafe:	f001 fff7 	bl	8011af0 <LoRaMacIsStopped>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d002      	beq.n	800fb0e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb08:	f06f 0302 	mvn.w	r3, #2
 800fb0c:	e0b6      	b.n	800fc7c <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fb0e:	f7ff ffc7 	bl	800faa0 <LmHandlerJoinStatus>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d00a      	beq.n	800fb2e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800fb18:	4b5a      	ldr	r3, [pc, #360]	; (800fc84 <LmHandlerSend+0x1ac>)
 800fb1a:	79db      	ldrb	r3, [r3, #7]
 800fb1c:	4a59      	ldr	r2, [pc, #356]	; (800fc84 <LmHandlerSend+0x1ac>)
 800fb1e:	7a12      	ldrb	r2, [r2, #8]
 800fb20:	4611      	mov	r1, r2
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff ff18 	bl	800f958 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb28:	f06f 0302 	mvn.w	r3, #2
 800fb2c:	e0a6      	b.n	800fc7c <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800fb2e:	4b56      	ldr	r3, [pc, #344]	; (800fc88 <LmHandlerSend+0x1b0>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	4798      	blx	r3
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00d      	beq.n	800fb58 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	781a      	ldrb	r2, [r3, #0]
 800fb40:	4b51      	ldr	r3, [pc, #324]	; (800fc88 <LmHandlerSend+0x1b0>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d006      	beq.n	800fb58 <LmHandlerSend+0x80>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d002      	beq.n	800fb58 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fb52:	f06f 0303 	mvn.w	r3, #3
 800fb56:	e091      	b.n	800fc7c <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fb58:	4a4c      	ldr	r2, [pc, #304]	; (800fc8c <LmHandlerSend+0x1b4>)
 800fb5a:	78fb      	ldrb	r3, [r7, #3]
 800fb5c:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fb5e:	78fb      	ldrb	r3, [r7, #3]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	bf14      	ite	ne
 800fb64:	2301      	movne	r3, #1
 800fb66:	2300      	moveq	r3, #0
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fb6c:	4b48      	ldr	r3, [pc, #288]	; (800fc90 <LmHandlerSend+0x1b8>)
 800fb6e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb72:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	785b      	ldrb	r3, [r3, #1]
 800fb78:	f107 020c 	add.w	r2, r7, #12
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f004 fd16 	bl	80145b0 <LoRaMacQueryTxPossible>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d009      	beq.n	800fb9e <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fb96:	23f9      	movs	r3, #249	; 0xf9
 800fb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb9c:	e009      	b.n	800fbb2 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	785b      	ldrb	r3, [r3, #1]
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fbb2:	4b36      	ldr	r3, [pc, #216]	; (800fc8c <LmHandlerSend+0x1b4>)
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	3310      	adds	r3, #16
 800fbb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbbc:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fbc0:	4b33      	ldr	r3, [pc, #204]	; (800fc90 <LmHandlerSend+0x1b8>)
 800fbc2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fbc6:	4b31      	ldr	r3, [pc, #196]	; (800fc8c <LmHandlerSend+0x1b4>)
 800fbc8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fbca:	78ba      	ldrb	r2, [r7, #2]
 800fbcc:	f107 0310 	add.w	r3, r7, #16
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f005 fc0e 	bl	80153f4 <LoRaMacMcpsRequest>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fbde:	6a3b      	ldr	r3, [r7, #32]
 800fbe0:	4a2c      	ldr	r2, [pc, #176]	; (800fc94 <LmHandlerSend+0x1bc>)
 800fbe2:	6013      	str	r3, [r2, #0]

    switch( status )
 800fbe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbe8:	2b11      	cmp	r3, #17
 800fbea:	d840      	bhi.n	800fc6e <LmHandlerSend+0x196>
 800fbec:	a201      	add	r2, pc, #4	; (adr r2, 800fbf4 <LmHandlerSend+0x11c>)
 800fbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf2:	bf00      	nop
 800fbf4:	0800fc3d 	.word	0x0800fc3d
 800fbf8:	0800fc4f 	.word	0x0800fc4f
 800fbfc:	0800fc6f 	.word	0x0800fc6f
 800fc00:	0800fc6f 	.word	0x0800fc6f
 800fc04:	0800fc6f 	.word	0x0800fc6f
 800fc08:	0800fc6f 	.word	0x0800fc6f
 800fc0c:	0800fc6f 	.word	0x0800fc6f
 800fc10:	0800fc57 	.word	0x0800fc57
 800fc14:	0800fc6f 	.word	0x0800fc6f
 800fc18:	0800fc6f 	.word	0x0800fc6f
 800fc1c:	0800fc6f 	.word	0x0800fc6f
 800fc20:	0800fc67 	.word	0x0800fc67
 800fc24:	0800fc6f 	.word	0x0800fc6f
 800fc28:	0800fc6f 	.word	0x0800fc6f
 800fc2c:	0800fc4f 	.word	0x0800fc4f
 800fc30:	0800fc4f 	.word	0x0800fc4f
 800fc34:	0800fc4f 	.word	0x0800fc4f
 800fc38:	0800fc5f 	.word	0x0800fc5f
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fc3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc40:	f113 0f07 	cmn.w	r3, #7
 800fc44:	d017      	beq.n	800fc76 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fc46:	2300      	movs	r3, #0
 800fc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fc4c:	e013      	b.n	800fc76 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fc4e:	23fe      	movs	r3, #254	; 0xfe
 800fc50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc54:	e010      	b.n	800fc78 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc56:	23fd      	movs	r3, #253	; 0xfd
 800fc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc5c:	e00c      	b.n	800fc78 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fc5e:	23fb      	movs	r3, #251	; 0xfb
 800fc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc64:	e008      	b.n	800fc78 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fc66:	23fa      	movs	r3, #250	; 0xfa
 800fc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc6c:	e004      	b.n	800fc78 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fc6e:	23ff      	movs	r3, #255	; 0xff
 800fc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc74:	e000      	b.n	800fc78 <LmHandlerSend+0x1a0>
            break;
 800fc76:	bf00      	nop
    }

    return lmhStatus;
 800fc78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3728      	adds	r7, #40	; 0x28
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	200000b0 	.word	0x200000b0
 800fc88:	200007f8 	.word	0x200007f8
 800fc8c:	200000bc 	.word	0x200000bc
 800fc90:	2000080c 	.word	0x2000080c
 800fc94:	20000850 	.word	0x20000850

0800fc98 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fc9e:	230a      	movs	r3, #10
 800fca0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fca2:	463b      	mov	r3, r7
 800fca4:	4618      	mov	r0, r3
 800fca6:	f005 fa53 	bl	8015150 <LoRaMacMlmeRequest>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	4a06      	ldr	r2, [pc, #24]	; (800fccc <LmHandlerDeviceTimeReq+0x34>)
 800fcb2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d101      	bne.n	800fcbe <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e001      	b.n	800fcc2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fcbe:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3718      	adds	r7, #24
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	20000850 	.word	0x20000850

0800fcd0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fcda:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	370c      	adds	r7, #12
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bc80      	pop	{r7}
 800fce6:	4770      	bx	lr

0800fce8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08e      	sub	sp, #56	; 0x38
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fcf8:	f001 fede 	bl	8011ab8 <LoRaMacIsBusy>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d002      	beq.n	800fd08 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd02:	f06f 0301 	mvn.w	r3, #1
 800fd06:	e071      	b.n	800fdec <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fd08:	f7ff feca 	bl	800faa0 <LmHandlerJoinStatus>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d002      	beq.n	800fd18 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fd12:	f06f 0302 	mvn.w	r3, #2
 800fd16:	e069      	b.n	800fdec <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd1c:	f107 030c 	add.w	r3, r7, #12
 800fd20:	4618      	mov	r0, r3
 800fd22:	f004 fccb 	bl	80146bc <LoRaMacMibGetRequestConfirm>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d002      	beq.n	800fd32 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd30:	e05c      	b.n	800fdec <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fd32:	7c3b      	ldrb	r3, [r7, #16]
 800fd34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fd38:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd3c:	79fb      	ldrb	r3, [r7, #7]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d052      	beq.n	800fde8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d028      	beq.n	800fd9a <LmHandlerRequestClass+0xb2>
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	dc48      	bgt.n	800fdde <LmHandlerRequestClass+0xf6>
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <LmHandlerRequestClass+0x6e>
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d01e      	beq.n	800fd92 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fd54:	e043      	b.n	800fdde <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fd56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d041      	beq.n	800fde2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd62:	f107 030c 	add.w	r3, r7, #12
 800fd66:	4618      	mov	r0, r3
 800fd68:	f004 fe5e 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d10b      	bne.n	800fd8a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd72:	4b20      	ldr	r3, [pc, #128]	; (800fdf4 <LmHandlerRequestClass+0x10c>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d032      	beq.n	800fde2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd7c:	4b1d      	ldr	r3, [pc, #116]	; (800fdf4 <LmHandlerRequestClass+0x10c>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd82:	79fa      	ldrb	r2, [r7, #7]
 800fd84:	4610      	mov	r0, r2
 800fd86:	4798      	blx	r3
                break;
 800fd88:	e02b      	b.n	800fde2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fd8a:	23ff      	movs	r3, #255	; 0xff
 800fd8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd90:	e027      	b.n	800fde2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fd92:	23ff      	movs	r3, #255	; 0xff
 800fd94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd98:	e026      	b.n	800fde8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fd9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d003      	beq.n	800fdaa <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fda2:	23ff      	movs	r3, #255	; 0xff
 800fda4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fda8:	e01d      	b.n	800fde6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fdae:	f107 030c 	add.w	r3, r7, #12
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f004 fe38 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10b      	bne.n	800fdd6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fdbe:	4b0d      	ldr	r3, [pc, #52]	; (800fdf4 <LmHandlerRequestClass+0x10c>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00e      	beq.n	800fde6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fdc8:	4b0a      	ldr	r3, [pc, #40]	; (800fdf4 <LmHandlerRequestClass+0x10c>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdce:	79fa      	ldrb	r2, [r7, #7]
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
                break;
 800fdd4:	e007      	b.n	800fde6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fdd6:	23ff      	movs	r3, #255	; 0xff
 800fdd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fddc:	e003      	b.n	800fde6 <LmHandlerRequestClass+0xfe>
                break;
 800fdde:	bf00      	nop
 800fde0:	e002      	b.n	800fde8 <LmHandlerRequestClass+0x100>
                break;
 800fde2:	bf00      	nop
 800fde4:	e000      	b.n	800fde8 <LmHandlerRequestClass+0x100>
                break;
 800fde6:	bf00      	nop
        }
    }
    return errorStatus;
 800fde8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3738      	adds	r7, #56	; 0x38
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	20000824 	.word	0x20000824

0800fdf8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08c      	sub	sp, #48	; 0x30
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d102      	bne.n	800fe0c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe06:	f04f 33ff 	mov.w	r3, #4294967295
 800fe0a:	e010      	b.n	800fe2e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe10:	f107 0308 	add.w	r3, r7, #8
 800fe14:	4618      	mov	r0, r3
 800fe16:	f004 fc51 	bl	80146bc <LoRaMacMibGetRequestConfirm>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe20:	f04f 33ff 	mov.w	r3, #4294967295
 800fe24:	e003      	b.n	800fe2e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fe26:	7b3a      	ldrb	r2, [r7, #12]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3730      	adds	r7, #48	; 0x30
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
	...

0800fe38 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08c      	sub	sp, #48	; 0x30
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d102      	bne.n	800fe4c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe46:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4a:	e016      	b.n	800fe7a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fe4c:	231f      	movs	r3, #31
 800fe4e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fe50:	f107 0308 	add.w	r3, r7, #8
 800fe54:	4618      	mov	r0, r3
 800fe56:	f004 fc31 	bl	80146bc <LoRaMacMibGetRequestConfirm>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe60:	f04f 33ff 	mov.w	r3, #4294967295
 800fe64:	e009      	b.n	800fe7a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fe66:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f993 2000 	ldrsb.w	r2, [r3]
 800fe74:	4b03      	ldr	r3, [pc, #12]	; (800fe84 <LmHandlerGetTxDatarate+0x4c>)
 800fe76:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fe78:	2300      	movs	r3, #0
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3730      	adds	r7, #48	; 0x30
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	2000080c 	.word	0x2000080c

0800fe88 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b08c      	sub	sp, #48	; 0x30
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fe90:	2322      	movs	r3, #34	; 0x22
 800fe92:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe98:	f107 0308 	add.w	r3, r7, #8
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f004 fdc3 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d002      	beq.n	800feae <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fea8:	f04f 33ff 	mov.w	r3, #4294967295
 800feac:	e000      	b.n	800feb0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800feae:	2300      	movs	r3, #0
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3730      	adds	r7, #48	; 0x30
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fec0:	4b18      	ldr	r3, [pc, #96]	; (800ff24 <McpsConfirm+0x6c>)
 800fec2:	2201      	movs	r2, #1
 800fec4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	785a      	ldrb	r2, [r3, #1]
 800feca:	4b16      	ldr	r3, [pc, #88]	; (800ff24 <McpsConfirm+0x6c>)
 800fecc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	789b      	ldrb	r3, [r3, #2]
 800fed2:	b25a      	sxtb	r2, r3
 800fed4:	4b13      	ldr	r3, [pc, #76]	; (800ff24 <McpsConfirm+0x6c>)
 800fed6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	4a11      	ldr	r2, [pc, #68]	; (800ff24 <McpsConfirm+0x6c>)
 800fede:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fee6:	4b0f      	ldr	r3, [pc, #60]	; (800ff24 <McpsConfirm+0x6c>)
 800fee8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	4b0c      	ldr	r3, [pc, #48]	; (800ff24 <McpsConfirm+0x6c>)
 800fef2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	791b      	ldrb	r3, [r3, #4]
 800fef8:	461a      	mov	r2, r3
 800fefa:	4b0a      	ldr	r3, [pc, #40]	; (800ff24 <McpsConfirm+0x6c>)
 800fefc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800fefe:	4b0a      	ldr	r3, [pc, #40]	; (800ff28 <McpsConfirm+0x70>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d004      	beq.n	800ff12 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ff08:	4b07      	ldr	r3, [pc, #28]	; (800ff28 <McpsConfirm+0x70>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff0e:	4805      	ldr	r0, [pc, #20]	; (800ff24 <McpsConfirm+0x6c>)
 800ff10:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ff12:	6879      	ldr	r1, [r7, #4]
 800ff14:	2000      	movs	r0, #0
 800ff16:	f000 f9eb 	bl	80102f0 <LmHandlerPackagesNotify>
}
 800ff1a:	bf00      	nop
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	200000bc 	.word	0x200000bc
 800ff28:	20000824 	.word	0x20000824

0800ff2c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ff36:	2300      	movs	r3, #0
 800ff38:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ff3a:	4b32      	ldr	r3, [pc, #200]	; (8010004 <McpsIndication+0xd8>)
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	785a      	ldrb	r2, [r3, #1]
 800ff44:	4b2f      	ldr	r3, [pc, #188]	; (8010004 <McpsIndication+0xd8>)
 800ff46:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ff48:	4b2e      	ldr	r3, [pc, #184]	; (8010004 <McpsIndication+0xd8>)
 800ff4a:	785b      	ldrb	r3, [r3, #1]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d155      	bne.n	800fffc <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	791b      	ldrb	r3, [r3, #4]
 800ff54:	b25a      	sxtb	r2, r3
 800ff56:	4b2b      	ldr	r3, [pc, #172]	; (8010004 <McpsIndication+0xd8>)
 800ff58:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff60:	b25a      	sxtb	r2, r3
 800ff62:	4b28      	ldr	r3, [pc, #160]	; (8010004 <McpsIndication+0xd8>)
 800ff64:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ff6c:	4b25      	ldr	r3, [pc, #148]	; (8010004 <McpsIndication+0xd8>)
 800ff6e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	78da      	ldrb	r2, [r3, #3]
 800ff74:	4b23      	ldr	r3, [pc, #140]	; (8010004 <McpsIndication+0xd8>)
 800ff76:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	691b      	ldr	r3, [r3, #16]
 800ff7c:	4a21      	ldr	r2, [pc, #132]	; (8010004 <McpsIndication+0xd8>)
 800ff7e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	78db      	ldrb	r3, [r3, #3]
 800ff84:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7b1b      	ldrb	r3, [r3, #12]
 800ff8a:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ff92:	4b1d      	ldr	r3, [pc, #116]	; (8010008 <McpsIndication+0xdc>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d007      	beq.n	800ffac <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ff9c:	4b1a      	ldr	r3, [pc, #104]	; (8010008 <McpsIndication+0xdc>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa2:	f107 0218 	add.w	r2, r7, #24
 800ffa6:	4917      	ldr	r1, [pc, #92]	; (8010004 <McpsIndication+0xd8>)
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ffac:	4b16      	ldr	r3, [pc, #88]	; (8010008 <McpsIndication+0xdc>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d007      	beq.n	800ffc6 <McpsIndication+0x9a>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	7e1b      	ldrb	r3, [r3, #24]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ffbe:	4b12      	ldr	r3, [pc, #72]	; (8010008 <McpsIndication+0xdc>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ffc6:	6879      	ldr	r1, [r7, #4]
 800ffc8:	2001      	movs	r0, #1
 800ffca:	f000 f991 	bl	80102f0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ffce:	f107 0317 	add.w	r3, r7, #23
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7ff ff10 	bl	800fdf8 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	795b      	ldrb	r3, [r3, #5]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00e      	beq.n	800fffe <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	733b      	strb	r3, [r7, #12]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	737b      	strb	r3, [r7, #13]
 800ffe8:	2300      	movs	r3, #0
 800ffea:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ffec:	f107 030c 	add.w	r3, r7, #12
 800fff0:	2201      	movs	r2, #1
 800fff2:	2100      	movs	r1, #0
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7ff fd6f 	bl	800fad8 <LmHandlerSend>
 800fffa:	e000      	b.n	800fffe <McpsIndication+0xd2>
        return;
 800fffc:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800fffe:	3720      	adds	r7, #32
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	200000d8 	.word	0x200000d8
 8010008:	20000824 	.word	0x20000824

0801000c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08c      	sub	sp, #48	; 0x30
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8010014:	4b4a      	ldr	r3, [pc, #296]	; (8010140 <MlmeConfirm+0x134>)
 8010016:	2200      	movs	r2, #0
 8010018:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	785a      	ldrb	r2, [r3, #1]
 801001e:	4b48      	ldr	r3, [pc, #288]	; (8010140 <MlmeConfirm+0x134>)
 8010020:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8010022:	4b48      	ldr	r3, [pc, #288]	; (8010144 <MlmeConfirm+0x138>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010028:	2b00      	cmp	r3, #0
 801002a:	d004      	beq.n	8010036 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 801002c:	4b45      	ldr	r3, [pc, #276]	; (8010144 <MlmeConfirm+0x138>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010032:	4843      	ldr	r0, [pc, #268]	; (8010140 <MlmeConfirm+0x134>)
 8010034:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010036:	6879      	ldr	r1, [r7, #4]
 8010038:	2002      	movs	r0, #2
 801003a:	f000 f959 	bl	80102f0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	3b01      	subs	r3, #1
 8010044:	2b0c      	cmp	r3, #12
 8010046:	d874      	bhi.n	8010132 <MlmeConfirm+0x126>
 8010048:	a201      	add	r2, pc, #4	; (adr r2, 8010050 <MlmeConfirm+0x44>)
 801004a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004e:	bf00      	nop
 8010050:	08010085 	.word	0x08010085
 8010054:	08010133 	.word	0x08010133
 8010058:	08010133 	.word	0x08010133
 801005c:	08010133 	.word	0x08010133
 8010060:	08010101 	.word	0x08010101
 8010064:	08010133 	.word	0x08010133
 8010068:	08010133 	.word	0x08010133
 801006c:	08010133 	.word	0x08010133
 8010070:	08010133 	.word	0x08010133
 8010074:	08010133 	.word	0x08010133
 8010078:	08010133 	.word	0x08010133
 801007c:	08010119 	.word	0x08010119
 8010080:	08010133 	.word	0x08010133
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8010084:	2306      	movs	r3, #6
 8010086:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8010088:	f107 0308 	add.w	r3, r7, #8
 801008c:	4618      	mov	r0, r3
 801008e:	f004 fb15 	bl	80146bc <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8010092:	4b2d      	ldr	r3, [pc, #180]	; (8010148 <MlmeConfirm+0x13c>)
 8010094:	79db      	ldrb	r3, [r3, #7]
 8010096:	68fa      	ldr	r2, [r7, #12]
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff faf6 	bl	800f68c <SecureElementSetDevAddr>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d102      	bne.n	80100ac <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4a28      	ldr	r2, [pc, #160]	; (801014c <MlmeConfirm+0x140>)
 80100aa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80100ac:	4828      	ldr	r0, [pc, #160]	; (8010150 <MlmeConfirm+0x144>)
 80100ae:	f7ff fec3 	bl	800fe38 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80100b2:	4828      	ldr	r0, [pc, #160]	; (8010154 <MlmeConfirm+0x148>)
 80100b4:	f000 fa4e 	bl	8010554 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100b8:	4b21      	ldr	r3, [pc, #132]	; (8010140 <MlmeConfirm+0x134>)
 80100ba:	785b      	ldrb	r3, [r3, #1]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d108      	bne.n	80100d2 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80100c0:	4b21      	ldr	r3, [pc, #132]	; (8010148 <MlmeConfirm+0x13c>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80100c6:	4b24      	ldr	r3, [pc, #144]	; (8010158 <MlmeConfirm+0x14c>)
 80100c8:	785b      	ldrb	r3, [r3, #1]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff fe0c 	bl	800fce8 <LmHandlerRequestClass>
 80100d0:	e002      	b.n	80100d8 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80100d2:	4b1d      	ldr	r3, [pc, #116]	; (8010148 <MlmeConfirm+0x13c>)
 80100d4:	22ff      	movs	r2, #255	; 0xff
 80100d6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80100d8:	4b1a      	ldr	r3, [pc, #104]	; (8010144 <MlmeConfirm+0x138>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d004      	beq.n	80100ec <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80100e2:	4b18      	ldr	r3, [pc, #96]	; (8010144 <MlmeConfirm+0x138>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e8:	4817      	ldr	r0, [pc, #92]	; (8010148 <MlmeConfirm+0x13c>)
 80100ea:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100ec:	4b14      	ldr	r3, [pc, #80]	; (8010140 <MlmeConfirm+0x134>)
 80100ee:	785b      	ldrb	r3, [r3, #1]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d120      	bne.n	8010136 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80100f4:	4b14      	ldr	r3, [pc, #80]	; (8010148 <MlmeConfirm+0x13c>)
 80100f6:	79db      	ldrb	r3, [r3, #7]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7ff f859 	bl	800f1b0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 80100fe:	e01a      	b.n	8010136 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8010100:	4b16      	ldr	r3, [pc, #88]	; (801015c <MlmeConfirm+0x150>)
 8010102:	2201      	movs	r2, #1
 8010104:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	7a1a      	ldrb	r2, [r3, #8]
 801010a:	4b14      	ldr	r3, [pc, #80]	; (801015c <MlmeConfirm+0x150>)
 801010c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7a5a      	ldrb	r2, [r3, #9]
 8010112:	4b12      	ldr	r3, [pc, #72]	; (801015c <MlmeConfirm+0x150>)
 8010114:	74da      	strb	r2, [r3, #19]
            }
            break;
 8010116:	e00f      	b.n	8010138 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	785b      	ldrb	r3, [r3, #1]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d105      	bne.n	801012c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010120:	4b0d      	ldr	r3, [pc, #52]	; (8010158 <MlmeConfirm+0x14c>)
 8010122:	7c1b      	ldrb	r3, [r3, #16]
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff fdd3 	bl	800fcd0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801012a:	e005      	b.n	8010138 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 801012c:	f7ff fdb4 	bl	800fc98 <LmHandlerDeviceTimeReq>
            break;
 8010130:	e002      	b.n	8010138 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010132:	bf00      	nop
 8010134:	e000      	b.n	8010138 <MlmeConfirm+0x12c>
            break;
 8010136:	bf00      	nop
    }
}
 8010138:	bf00      	nop
 801013a:	3730      	adds	r7, #48	; 0x30
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	200000bc 	.word	0x200000bc
 8010144:	20000824 	.word	0x20000824
 8010148:	200000b0 	.word	0x200000b0
 801014c:	200007e0 	.word	0x200007e0
 8010150:	200000b4 	.word	0x200000b4
 8010154:	200000b5 	.word	0x200000b5
 8010158:	2000080c 	.word	0x2000080c
 801015c:	200000d8 	.word	0x200000d8

08010160 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801016a:	4b20      	ldr	r3, [pc, #128]	; (80101ec <MlmeIndication+0x8c>)
 801016c:	2200      	movs	r2, #0
 801016e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	785a      	ldrb	r2, [r3, #1]
 8010174:	4b1d      	ldr	r3, [pc, #116]	; (80101ec <MlmeIndication+0x8c>)
 8010176:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	789b      	ldrb	r3, [r3, #2]
 801017c:	b25a      	sxtb	r2, r3
 801017e:	4b1b      	ldr	r3, [pc, #108]	; (80101ec <MlmeIndication+0x8c>)
 8010180:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010188:	b25a      	sxtb	r2, r3
 801018a:	4b18      	ldr	r3, [pc, #96]	; (80101ec <MlmeIndication+0x8c>)
 801018c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010194:	4b15      	ldr	r3, [pc, #84]	; (80101ec <MlmeIndication+0x8c>)
 8010196:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	78da      	ldrb	r2, [r3, #3]
 801019c:	4b13      	ldr	r3, [pc, #76]	; (80101ec <MlmeIndication+0x8c>)
 801019e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	4a11      	ldr	r2, [pc, #68]	; (80101ec <MlmeIndication+0x8c>)
 80101a6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80101a8:	4b11      	ldr	r3, [pc, #68]	; (80101f0 <MlmeIndication+0x90>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00d      	beq.n	80101ce <MlmeIndication+0x6e>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	2b0b      	cmp	r3, #11
 80101b8:	d009      	beq.n	80101ce <MlmeIndication+0x6e>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	2b0f      	cmp	r3, #15
 80101c0:	d005      	beq.n	80101ce <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80101c2:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <MlmeIndication+0x90>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c8:	4908      	ldr	r1, [pc, #32]	; (80101ec <MlmeIndication+0x8c>)
 80101ca:	2000      	movs	r0, #0
 80101cc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80101ce:	6879      	ldr	r1, [r7, #4]
 80101d0:	2003      	movs	r0, #3
 80101d2:	f000 f88d 	bl	80102f0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	2b0b      	cmp	r3, #11
 80101dc:	d001      	beq.n	80101e2 <MlmeIndication+0x82>
 80101de:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80101e0:	e000      	b.n	80101e4 <MlmeIndication+0x84>
            break;
 80101e2:	bf00      	nop
    }
}
 80101e4:	bf00      	nop
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	200000d8 	.word	0x200000d8
 80101f0:	20000824 	.word	0x20000824

080101f4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	6039      	str	r1, [r7, #0]
 80101fe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010200:	2300      	movs	r3, #0
 8010202:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d104      	bne.n	8010214 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 801020a:	f000 f9dd 	bl	80105c8 <LmhpCompliancePackageFactory>
 801020e:	4603      	mov	r3, r0
 8010210:	60fb      	str	r3, [r7, #12]
                break;
 8010212:	e00d      	b.n	8010230 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8010214:	f107 020c 	add.w	r2, r7, #12
 8010218:	79fb      	ldrb	r3, [r7, #7]
 801021a:	4611      	mov	r1, r2
 801021c:	4618      	mov	r0, r3
 801021e:	f000 fce9 	bl	8010bf4 <LmhpPackagesRegister>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d002      	beq.n	801022e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8010228:	f04f 33ff 	mov.w	r3, #4294967295
 801022c:	e031      	b.n	8010292 <LmHandlerPackageRegister+0x9e>
                }
                break;
 801022e:	bf00      	nop
            }
    }
    if( package != NULL )
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d02b      	beq.n	801028e <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	4918      	ldr	r1, [pc, #96]	; (801029c <LmHandlerPackageRegister+0xa8>)
 801023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010240:	79fb      	ldrb	r3, [r7, #7]
 8010242:	4a16      	ldr	r2, [pc, #88]	; (801029c <LmHandlerPackageRegister+0xa8>)
 8010244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010248:	4a15      	ldr	r2, [pc, #84]	; (80102a0 <LmHandlerPackageRegister+0xac>)
 801024a:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 801024c:	79fb      	ldrb	r3, [r7, #7]
 801024e:	4a13      	ldr	r2, [pc, #76]	; (801029c <LmHandlerPackageRegister+0xa8>)
 8010250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010254:	4a13      	ldr	r2, [pc, #76]	; (80102a4 <LmHandlerPackageRegister+0xb0>)
 8010256:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8010258:	79fb      	ldrb	r3, [r7, #7]
 801025a:	4a10      	ldr	r2, [pc, #64]	; (801029c <LmHandlerPackageRegister+0xa8>)
 801025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010260:	4a11      	ldr	r2, [pc, #68]	; (80102a8 <LmHandlerPackageRegister+0xb4>)
 8010262:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010264:	4b11      	ldr	r3, [pc, #68]	; (80102ac <LmHandlerPackageRegister+0xb8>)
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	490c      	ldr	r1, [pc, #48]	; (801029c <LmHandlerPackageRegister+0xa8>)
 801026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010270:	6992      	ldr	r2, [r2, #24]
 8010272:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	4a09      	ldr	r2, [pc, #36]	; (801029c <LmHandlerPackageRegister+0xa8>)
 8010278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	4a0c      	ldr	r2, [pc, #48]	; (80102b0 <LmHandlerPackageRegister+0xbc>)
 8010280:	6851      	ldr	r1, [r2, #4]
 8010282:	4a0b      	ldr	r2, [pc, #44]	; (80102b0 <LmHandlerPackageRegister+0xbc>)
 8010284:	7852      	ldrb	r2, [r2, #1]
 8010286:	6838      	ldr	r0, [r7, #0]
 8010288:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 801028a:	2300      	movs	r3, #0
 801028c:	e001      	b.n	8010292 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 801028e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	200007f8 	.word	0x200007f8
 80102a0:	0800f959 	.word	0x0800f959
 80102a4:	0800fad9 	.word	0x0800fad9
 80102a8:	0800fc99 	.word	0x0800fc99
 80102ac:	20000824 	.word	0x20000824
 80102b0:	200000ec 	.word	0x200000ec

080102b4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	4603      	mov	r3, r0
 80102bc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80102be:	79fb      	ldrb	r3, [r7, #7]
 80102c0:	2b04      	cmp	r3, #4
 80102c2:	d80e      	bhi.n	80102e2 <LmHandlerPackageIsInitialized+0x2e>
 80102c4:	79fb      	ldrb	r3, [r7, #7]
 80102c6:	4a09      	ldr	r2, [pc, #36]	; (80102ec <LmHandlerPackageIsInitialized+0x38>)
 80102c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d007      	beq.n	80102e2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	4a05      	ldr	r2, [pc, #20]	; (80102ec <LmHandlerPackageIsInitialized+0x38>)
 80102d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	4798      	blx	r3
 80102de:	4603      	mov	r3, r0
 80102e0:	e000      	b.n	80102e4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80102e2:	2300      	movs	r3, #0
    }
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	200007f8 	.word	0x200007f8

080102f0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	4603      	mov	r3, r0
 80102f8:	6039      	str	r1, [r7, #0]
 80102fa:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80102fc:	2300      	movs	r3, #0
 80102fe:	73fb      	strb	r3, [r7, #15]
 8010300:	e07c      	b.n	80103fc <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 8010302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010306:	4a42      	ldr	r2, [pc, #264]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 8010308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d06f      	beq.n	80103f0 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	2b03      	cmp	r3, #3
 8010314:	d863      	bhi.n	80103de <LmHandlerPackagesNotify+0xee>
 8010316:	a201      	add	r2, pc, #4	; (adr r2, 801031c <LmHandlerPackagesNotify+0x2c>)
 8010318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031c:	0801032d 	.word	0x0801032d
 8010320:	0801034f 	.word	0x0801034f
 8010324:	0801039b 	.word	0x0801039b
 8010328:	080103bd 	.word	0x080103bd
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 801032c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010330:	4a37      	ldr	r2, [pc, #220]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 8010332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d052      	beq.n	80103e2 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 801033c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010340:	4a33      	ldr	r2, [pc, #204]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 8010342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010346:	69db      	ldr	r3, [r3, #28]
 8010348:	6838      	ldr	r0, [r7, #0]
 801034a:	4798      	blx	r3
                        }
                        break;
 801034c:	e049      	b.n	80103e2 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801034e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010352:	4a2f      	ldr	r2, [pc, #188]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 8010354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010358:	6a1b      	ldr	r3, [r3, #32]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d043      	beq.n	80103e6 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 801035e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010362:	4a2b      	ldr	r2, [pc, #172]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 8010364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010368:	781a      	ldrb	r2, [r3, #0]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801036e:	429a      	cmp	r2, r3
 8010370:	d00a      	beq.n	8010388 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8010372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d135      	bne.n	80103e6 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 801037a:	4b25      	ldr	r3, [pc, #148]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	4798      	blx	r3
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d02e      	beq.n	80103e6 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8010388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801038c:	4a20      	ldr	r2, [pc, #128]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 801038e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010392:	6a1b      	ldr	r3, [r3, #32]
 8010394:	6838      	ldr	r0, [r7, #0]
 8010396:	4798      	blx	r3
                        }
                        break;
 8010398:	e025      	b.n	80103e6 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 801039a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801039e:	4a1c      	ldr	r2, [pc, #112]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 80103a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d01f      	beq.n	80103ea <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80103aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ae:	4a18      	ldr	r2, [pc, #96]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 80103b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b6:	6838      	ldr	r0, [r7, #0]
 80103b8:	4798      	blx	r3
                        }
                        break;
 80103ba:	e016      	b.n	80103ea <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80103bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c0:	4a13      	ldr	r2, [pc, #76]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 80103c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d010      	beq.n	80103ee <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80103cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103d0:	4a0f      	ldr	r2, [pc, #60]	; (8010410 <LmHandlerPackagesNotify+0x120>)
 80103d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	6838      	ldr	r0, [r7, #0]
 80103da:	4798      	blx	r3
                        }
                        break;
 80103dc:	e007      	b.n	80103ee <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 80103de:	bf00      	nop
 80103e0:	e006      	b.n	80103f0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103e2:	bf00      	nop
 80103e4:	e004      	b.n	80103f0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103e6:	bf00      	nop
 80103e8:	e002      	b.n	80103f0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103ea:	bf00      	nop
 80103ec:	e000      	b.n	80103f0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103ee:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	3301      	adds	r3, #1
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	73fb      	strb	r3, [r7, #15]
 80103fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010400:	2b04      	cmp	r3, #4
 8010402:	f77f af7e 	ble.w	8010302 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 8010406:	bf00      	nop
 8010408:	bf00      	nop
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	200007f8 	.word	0x200007f8

08010414 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801041a:	2300      	movs	r3, #0
 801041c:	71fb      	strb	r3, [r7, #7]
 801041e:	e01c      	b.n	801045a <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8010420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010424:	4a11      	ldr	r2, [pc, #68]	; (801046c <LmHandlerPackageIsTxPending+0x58>)
 8010426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d00f      	beq.n	801044e <LmHandlerPackageIsTxPending+0x3a>
 801042e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00b      	beq.n	801044e <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8010436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801043a:	4a0c      	ldr	r2, [pc, #48]	; (801046c <LmHandlerPackageIsTxPending+0x58>)
 801043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010440:	691b      	ldr	r3, [r3, #16]
 8010442:	4798      	blx	r3
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 801044a:	2301      	movs	r3, #1
 801044c:	e00a      	b.n	8010464 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010452:	b2db      	uxtb	r3, r3
 8010454:	3301      	adds	r3, #1
 8010456:	b2db      	uxtb	r3, r3
 8010458:	71fb      	strb	r3, [r7, #7]
 801045a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801045e:	2b04      	cmp	r3, #4
 8010460:	ddde      	ble.n	8010420 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	200007f8 	.word	0x200007f8

08010470 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010476:	2300      	movs	r3, #0
 8010478:	71fb      	strb	r3, [r7, #7]
 801047a:	e022      	b.n	80104c2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 801047c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010480:	4a14      	ldr	r2, [pc, #80]	; (80104d4 <LmHandlerPackagesProcess+0x64>)
 8010482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d015      	beq.n	80104b6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 801048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801048e:	4a11      	ldr	r2, [pc, #68]	; (80104d4 <LmHandlerPackagesProcess+0x64>)
 8010490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010494:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00d      	beq.n	80104b6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	4618      	mov	r0, r3
 801049e:	f7ff ff09 	bl	80102b4 <LmHandlerPackageIsInitialized>
 80104a2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d006      	beq.n	80104b6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 80104a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ac:	4a09      	ldr	r2, [pc, #36]	; (80104d4 <LmHandlerPackagesProcess+0x64>)
 80104ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80104b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	3301      	adds	r3, #1
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	71fb      	strb	r3, [r7, #7]
 80104c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104c6:	2b04      	cmp	r3, #4
 80104c8:	ddd8      	ble.n	801047c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80104ca:	bf00      	nop
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	200007f8 	.word	0x200007f8

080104d8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	6039      	str	r1, [r7, #0]
 80104e2:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d102      	bne.n	80104f0 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 80104ea:	f04f 33ff 	mov.w	r3, #4294967295
 80104ee:	e00e      	b.n	801050e <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <LmHandlerGetVersion+0x24>
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d004      	beq.n	8010504 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 80104fa:	e007      	b.n	801050c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	4a06      	ldr	r2, [pc, #24]	; (8010518 <LmHandlerGetVersion+0x40>)
 8010500:	601a      	str	r2, [r3, #0]
            break;
 8010502:	e003      	b.n	801050c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	4a05      	ldr	r2, [pc, #20]	; (801051c <LmHandlerGetVersion+0x44>)
 8010508:	601a      	str	r2, [r3, #0]
            break;
 801050a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	bc80      	pop	{r7}
 8010516:	4770      	bx	lr
 8010518:	01000300 	.word	0x01000300
 801051c:	01010003 	.word	0x01010003

08010520 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010524:	f005 f882 	bl	801562c <LoRaMacDeInitialization>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801052e:	2300      	movs	r3, #0
 8010530:	e001      	b.n	8010536 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010532:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010536:	4618      	mov	r0, r3
 8010538:	bd80      	pop	{r7, pc}

0801053a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 801053a:	b580      	push	{r7, lr}
 801053c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801053e:	f004 f80d 	bl	801455c <LoRaMacHalt>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010548:	2300      	movs	r3, #0
 801054a:	e001      	b.n	8010550 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801054c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010550:	4618      	mov	r0, r3
 8010552:	bd80      	pop	{r7, pc}

08010554 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08c      	sub	sp, #48	; 0x30
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d102      	bne.n	8010568 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010562:	f04f 33ff 	mov.w	r3, #4294967295
 8010566:	e016      	b.n	8010596 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010568:	2320      	movs	r3, #32
 801056a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 801056c:	f107 0308 	add.w	r3, r7, #8
 8010570:	4618      	mov	r0, r3
 8010572:	f004 f8a3 	bl	80146bc <LoRaMacMibGetRequestConfirm>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801057c:	f04f 33ff 	mov.w	r3, #4294967295
 8010580:	e009      	b.n	8010596 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8010582:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f993 2000 	ldrsb.w	r2, [r3]
 8010590:	4b03      	ldr	r3, [pc, #12]	; (80105a0 <LmHandlerGetTxPower+0x4c>)
 8010592:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010594:	2300      	movs	r3, #0
}
 8010596:	4618      	mov	r0, r3
 8010598:	3730      	adds	r7, #48	; 0x30
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	2000080c 	.word	0x2000080c

080105a4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 80105a8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bc80      	pop	{r7}
 80105b2:	4770      	bx	lr

080105b4 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	4603      	mov	r3, r0
 80105bc:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80105be:	bf00      	nop
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bc80      	pop	{r7}
 80105c6:	4770      	bx	lr

080105c8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80105c8:	b480      	push	{r7}
 80105ca:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80105cc:	4b02      	ldr	r3, [pc, #8]	; (80105d8 <LmhpCompliancePackageFactory+0x10>)
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bc80      	pop	{r7}
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	200000f4 	.word	0x200000f4

080105dc <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80105dc:	b480      	push	{r7}
 80105de:	b085      	sub	sp, #20
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	4613      	mov	r3, r2
 80105e8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00f      	beq.n	8010610 <LmhpComplianceInit+0x34>
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d00c      	beq.n	8010610 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 80105f6:	4a0c      	ldr	r2, [pc, #48]	; (8010628 <LmhpComplianceInit+0x4c>)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80105fc:	4a0b      	ldr	r2, [pc, #44]	; (801062c <LmhpComplianceInit+0x50>)
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010602:	4a0a      	ldr	r2, [pc, #40]	; (801062c <LmhpComplianceInit+0x50>)
 8010604:	79fb      	ldrb	r3, [r7, #7]
 8010606:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010608:	4b08      	ldr	r3, [pc, #32]	; (801062c <LmhpComplianceInit+0x50>)
 801060a:	2201      	movs	r2, #1
 801060c:	701a      	strb	r2, [r3, #0]
 801060e:	e006      	b.n	801061e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010610:	4b05      	ldr	r3, [pc, #20]	; (8010628 <LmhpComplianceInit+0x4c>)
 8010612:	2200      	movs	r2, #0
 8010614:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010616:	4b05      	ldr	r3, [pc, #20]	; (801062c <LmhpComplianceInit+0x50>)
 8010618:	2200      	movs	r2, #0
 801061a:	701a      	strb	r2, [r3, #0]
    }
}
 801061c:	bf00      	nop
 801061e:	bf00      	nop
 8010620:	3714      	adds	r7, #20
 8010622:	46bd      	mov	sp, r7
 8010624:	bc80      	pop	{r7}
 8010626:	4770      	bx	lr
 8010628:	20000974 	.word	0x20000974
 801062c:	20000960 	.word	0x20000960

08010630 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010630:	b480      	push	{r7}
 8010632:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010634:	4b02      	ldr	r3, [pc, #8]	; (8010640 <LmhpComplianceIsInitialized+0x10>)
 8010636:	781b      	ldrb	r3, [r3, #0]
}
 8010638:	4618      	mov	r0, r3
 801063a:	46bd      	mov	sp, r7
 801063c:	bc80      	pop	{r7}
 801063e:	4770      	bx	lr
 8010640:	20000960 	.word	0x20000960

08010644 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010644:	b480      	push	{r7}
 8010646:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010648:	4b07      	ldr	r3, [pc, #28]	; (8010668 <LmhpComplianceIsRunning+0x24>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f083 0301 	eor.w	r3, r3, #1
 8010650:	b2db      	uxtb	r3, r3
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8010656:	2300      	movs	r3, #0
 8010658:	e001      	b.n	801065e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 801065a:	4b03      	ldr	r3, [pc, #12]	; (8010668 <LmhpComplianceIsRunning+0x24>)
 801065c:	785b      	ldrb	r3, [r3, #1]
}
 801065e:	4618      	mov	r0, r3
 8010660:	46bd      	mov	sp, r7
 8010662:	bc80      	pop	{r7}
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop
 8010668:	20000960 	.word	0x20000960

0801066c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010674:	4b0f      	ldr	r3, [pc, #60]	; (80106b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	f083 0301 	eor.w	r3, r3, #1
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b00      	cmp	r3, #0
 8010680:	d112      	bne.n	80106a8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010682:	4b0c      	ldr	r3, [pc, #48]	; (80106b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010684:	785b      	ldrb	r3, [r3, #1]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00f      	beq.n	80106aa <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 801068e:	2b01      	cmp	r3, #1
 8010690:	d10b      	bne.n	80106aa <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8010696:	2b00      	cmp	r3, #0
 8010698:	d007      	beq.n	80106aa <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801069a:	4b06      	ldr	r3, [pc, #24]	; (80106b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 801069c:	899b      	ldrh	r3, [r3, #12]
 801069e:	3301      	adds	r3, #1
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	4b04      	ldr	r3, [pc, #16]	; (80106b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 80106a4:	819a      	strh	r2, [r3, #12]
 80106a6:	e000      	b.n	80106aa <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 80106a8:	bf00      	nop
    }
}
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bc80      	pop	{r7}
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20000960 	.word	0x20000960

080106b8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80106c0:	4b12      	ldr	r3, [pc, #72]	; (801070c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f083 0301 	eor.w	r3, r3, #1
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d116      	bne.n	80106fc <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80106ce:	4b0f      	ldr	r3, [pc, #60]	; (801070c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106d0:	785b      	ldrb	r3, [r3, #1]
 80106d2:	f083 0301 	eor.w	r3, r3, #1
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d111      	bne.n	8010700 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	2b05      	cmp	r3, #5
 80106e2:	d10e      	bne.n	8010702 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 80106e4:	4b09      	ldr	r3, [pc, #36]	; (801070c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106e6:	2201      	movs	r2, #1
 80106e8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	7a1a      	ldrb	r2, [r3, #8]
 80106ee:	4b07      	ldr	r3, [pc, #28]	; (801070c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106f0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	7a5a      	ldrb	r2, [r3, #9]
 80106f6:	4b05      	ldr	r3, [pc, #20]	; (801070c <LmhpComplianceOnMlmeConfirm+0x54>)
 80106f8:	741a      	strb	r2, [r3, #16]
 80106fa:	e002      	b.n	8010702 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106fc:	bf00      	nop
 80106fe:	e000      	b.n	8010702 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010700:	bf00      	nop
    }
}
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	bc80      	pop	{r7}
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	20000960 	.word	0x20000960

08010710 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010716:	4b36      	ldr	r3, [pc, #216]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	f083 0301 	eor.w	r3, r3, #1
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010724:	f04f 33ff 	mov.w	r3, #4294967295
 8010728:	e05e      	b.n	80107e8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 801072a:	4b31      	ldr	r3, [pc, #196]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801072c:	785b      	ldrb	r3, [r3, #1]
 801072e:	f083 0301 	eor.w	r3, r3, #1
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010738:	2300      	movs	r3, #0
 801073a:	e055      	b.n	80107e8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 801073c:	4b2c      	ldr	r3, [pc, #176]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801073e:	7b9b      	ldrb	r3, [r3, #14]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d019      	beq.n	8010778 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010744:	4b2a      	ldr	r3, [pc, #168]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010746:	2200      	movs	r2, #0
 8010748:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 801074a:	4b29      	ldr	r3, [pc, #164]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801074c:	2203      	movs	r2, #3
 801074e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010750:	4b27      	ldr	r3, [pc, #156]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	2205      	movs	r2, #5
 8010756:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8010758:	4b25      	ldr	r3, [pc, #148]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	3301      	adds	r3, #1
 801075e:	4a24      	ldr	r2, [pc, #144]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010760:	7bd2      	ldrb	r2, [r2, #15]
 8010762:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010764:	4b22      	ldr	r3, [pc, #136]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	3302      	adds	r3, #2
 801076a:	4a21      	ldr	r2, [pc, #132]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801076c:	7c12      	ldrb	r2, [r2, #16]
 801076e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010770:	4b1f      	ldr	r3, [pc, #124]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010772:	2201      	movs	r2, #1
 8010774:	709a      	strb	r2, [r3, #2]
 8010776:	e01c      	b.n	80107b2 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8010778:	4b1d      	ldr	r3, [pc, #116]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801077a:	789b      	ldrb	r3, [r3, #2]
 801077c:	2b01      	cmp	r3, #1
 801077e:	d005      	beq.n	801078c <LmhpComplianceTxProcess+0x7c>
 8010780:	2b04      	cmp	r3, #4
 8010782:	d116      	bne.n	80107b2 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8010784:	4b1a      	ldr	r3, [pc, #104]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010786:	2201      	movs	r2, #1
 8010788:	709a      	strb	r2, [r3, #2]
                break;
 801078a:	e012      	b.n	80107b2 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 801078c:	4b18      	ldr	r3, [pc, #96]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801078e:	2202      	movs	r2, #2
 8010790:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010792:	4b17      	ldr	r3, [pc, #92]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 8010794:	899b      	ldrh	r3, [r3, #12]
 8010796:	0a1b      	lsrs	r3, r3, #8
 8010798:	b29a      	uxth	r2, r3
 801079a:	4b15      	ldr	r3, [pc, #84]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	b2d2      	uxtb	r2, r2
 80107a0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80107a2:	4b13      	ldr	r3, [pc, #76]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 80107a4:	899a      	ldrh	r2, [r3, #12]
 80107a6:	4b12      	ldr	r3, [pc, #72]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	3301      	adds	r3, #1
 80107ac:	b2d2      	uxtb	r2, r2
 80107ae:	701a      	strb	r2, [r3, #0]
                break;
 80107b0:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 80107b2:	23e0      	movs	r3, #224	; 0xe0
 80107b4:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 80107b6:	4b0e      	ldr	r3, [pc, #56]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 80107b8:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 80107ba:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80107bc:	4b0c      	ldr	r3, [pc, #48]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 80107be:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80107c0:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 80107c2:	480c      	ldr	r0, [pc, #48]	; (80107f4 <LmhpComplianceTxProcess+0xe4>)
 80107c4:	f00d fc5a 	bl	801e07c <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80107c8:	4b0b      	ldr	r3, [pc, #44]	; (80107f8 <LmhpComplianceTxProcess+0xe8>)
 80107ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d102      	bne.n	80107d6 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 80107d0:	f04f 33ff 	mov.w	r3, #4294967295
 80107d4:	e008      	b.n	80107e8 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80107d6:	4b08      	ldr	r3, [pc, #32]	; (80107f8 <LmhpComplianceTxProcess+0xe8>)
 80107d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107da:	4a05      	ldr	r2, [pc, #20]	; (80107f0 <LmhpComplianceTxProcess+0xe0>)
 80107dc:	78d2      	ldrb	r2, [r2, #3]
 80107de:	4611      	mov	r1, r2
 80107e0:	4638      	mov	r0, r7
 80107e2:	2201      	movs	r2, #1
 80107e4:	4798      	blx	r3
 80107e6:	4603      	mov	r3, r0
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	20000960 	.word	0x20000960
 80107f4:	20000948 	.word	0x20000948
 80107f8:	200000f4 	.word	0x200000f4

080107fc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b0a4      	sub	sp, #144	; 0x90
 8010800:	af02      	add	r7, sp, #8
 8010802:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010804:	4ba5      	ldr	r3, [pc, #660]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	f083 0301 	eor.w	r3, r3, #1
 801080c:	b2db      	uxtb	r3, r3
 801080e:	2b00      	cmp	r3, #0
 8010810:	f040 81c6 	bne.w	8010ba0 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	7b5b      	ldrb	r3, [r3, #13]
 8010818:	f083 0301 	eor.w	r3, r3, #1
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b00      	cmp	r3, #0
 8010820:	f040 81c0 	bne.w	8010ba4 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010824:	4b9d      	ldr	r3, [pc, #628]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010826:	785b      	ldrb	r3, [r3, #1]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00c      	beq.n	8010846 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	7b9b      	ldrb	r3, [r3, #14]
 8010830:	f083 0301 	eor.w	r3, r3, #1
 8010834:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8010836:	2b00      	cmp	r3, #0
 8010838:	d005      	beq.n	8010846 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801083a:	4b98      	ldr	r3, [pc, #608]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 801083c:	899b      	ldrh	r3, [r3, #12]
 801083e:	3301      	adds	r3, #1
 8010840:	b29a      	uxth	r2, r3
 8010842:	4b96      	ldr	r3, [pc, #600]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010844:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	78db      	ldrb	r3, [r3, #3]
 801084a:	2be0      	cmp	r3, #224	; 0xe0
 801084c:	f040 81ac 	bne.w	8010ba8 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010850:	4b92      	ldr	r3, [pc, #584]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010852:	785b      	ldrb	r3, [r3, #1]
 8010854:	f083 0301 	eor.w	r3, r3, #1
 8010858:	b2db      	uxtb	r3, r3
 801085a:	2b00      	cmp	r3, #0
 801085c:	d060      	beq.n	8010920 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	7b1b      	ldrb	r3, [r3, #12]
 8010862:	2b04      	cmp	r3, #4
 8010864:	f040 81a7 	bne.w	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801086e:	2b01      	cmp	r3, #1
 8010870:	f040 81a1 	bne.w	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	3301      	adds	r3, #1
 801087a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 801087c:	2b01      	cmp	r3, #1
 801087e:	f040 819a 	bne.w	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	3302      	adds	r3, #2
 8010888:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 801088a:	2b01      	cmp	r3, #1
 801088c:	f040 8193 	bne.w	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	689b      	ldr	r3, [r3, #8]
 8010894:	3303      	adds	r3, #3
 8010896:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010898:	2b01      	cmp	r3, #1
 801089a:	f040 818c 	bne.w	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 801089e:	4b7f      	ldr	r3, [pc, #508]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 80108a4:	4b7d      	ldr	r3, [pc, #500]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a6:	22e0      	movs	r2, #224	; 0xe0
 80108a8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80108aa:	4b7c      	ldr	r3, [pc, #496]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ac:	2202      	movs	r2, #2
 80108ae:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80108b0:	4b7a      	ldr	r3, [pc, #488]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80108b6:	4b79      	ldr	r3, [pc, #484]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80108bc:	4b77      	ldr	r3, [pc, #476]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108be:	2200      	movs	r2, #0
 80108c0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80108c2:	4b76      	ldr	r3, [pc, #472]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80108c8:	4b74      	ldr	r3, [pc, #464]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ca:	2201      	movs	r2, #1
 80108cc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80108ce:	4b73      	ldr	r3, [pc, #460]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108d0:	2201      	movs	r2, #1
 80108d2:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 80108d4:	2304      	movs	r3, #4
 80108d6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 80108d8:	2301      	movs	r3, #1
 80108da:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80108dc:	f107 030c 	add.w	r3, r7, #12
 80108e0:	4618      	mov	r0, r3
 80108e2:	f004 f8a1 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 80108e6:	2000      	movs	r0, #0
 80108e8:	f004 fe7a 	bl	80155e0 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80108ec:	4b6c      	ldr	r3, [pc, #432]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 80108f6:	4b6a      	ldr	r3, [pc, #424]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80108fe:	2300      	movs	r3, #0
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	4b68      	ldr	r3, [pc, #416]	; (8010aa4 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010904:	2200      	movs	r2, #0
 8010906:	f04f 31ff 	mov.w	r1, #4294967295
 801090a:	4867      	ldr	r0, [pc, #412]	; (8010aa8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 801090c:	f00d fb80 	bl	801e010 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010910:	f241 3188 	movw	r1, #5000	; 0x1388
 8010914:	4864      	ldr	r0, [pc, #400]	; (8010aa8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010916:	f00d fc8f 	bl	801e238 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 801091a:	f7ff fef9 	bl	8010710 <LmhpComplianceTxProcess>
 801091e:	e14a      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	781a      	ldrb	r2, [r3, #0]
 8010926:	4b5d      	ldr	r3, [pc, #372]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010928:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801092a:	4b5c      	ldr	r3, [pc, #368]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 801092c:	789b      	ldrb	r3, [r3, #2]
 801092e:	2b0a      	cmp	r3, #10
 8010930:	f200 813c 	bhi.w	8010bac <LmhpComplianceOnMcpsIndication+0x3b0>
 8010934:	a201      	add	r2, pc, #4	; (adr r2, 801093c <LmhpComplianceOnMcpsIndication+0x140>)
 8010936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093a:	bf00      	nop
 801093c:	08010969 	.word	0x08010969
 8010940:	080109b3 	.word	0x080109b3
 8010944:	080109bb 	.word	0x080109bb
 8010948:	080109c9 	.word	0x080109c9
 801094c:	080109d7 	.word	0x080109d7
 8010950:	08010a2f 	.word	0x08010a2f
 8010954:	08010a41 	.word	0x08010a41
 8010958:	08010ab1 	.word	0x08010ab1
 801095c:	08010b59 	.word	0x08010b59
 8010960:	08010b6b 	.word	0x08010b6b
 8010964:	08010b85 	.word	0x08010b85
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010968:	484f      	ldr	r0, [pc, #316]	; (8010aa8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 801096a:	f00d fbf5 	bl	801e158 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 801096e:	4b4b      	ldr	r3, [pc, #300]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010970:	2200      	movs	r2, #0
 8010972:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010974:	4b49      	ldr	r3, [pc, #292]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010976:	2200      	movs	r2, #0
 8010978:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 801097a:	2304      	movs	r3, #4
 801097c:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801097e:	4b48      	ldr	r3, [pc, #288]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010986:	f107 030c 	add.w	r3, r7, #12
 801098a:	4618      	mov	r0, r3
 801098c:	f004 f84c 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010990:	4b43      	ldr	r3, [pc, #268]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	785b      	ldrb	r3, [r3, #1]
 8010996:	4618      	mov	r0, r3
 8010998:	f004 fe22 	bl	80155e0 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 801099c:	4b40      	ldr	r3, [pc, #256]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 8104 	beq.w	8010bb0 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 80109a8:	4b3d      	ldr	r3, [pc, #244]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	4798      	blx	r3
                    }
                }
                break;
 80109b0:	e0fe      	b.n	8010bb0 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 80109b2:	4b3a      	ldr	r3, [pc, #232]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109b4:	2202      	movs	r2, #2
 80109b6:	719a      	strb	r2, [r3, #6]
                break;
 80109b8:	e0fd      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 80109ba:	4b38      	ldr	r3, [pc, #224]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109bc:	2201      	movs	r2, #1
 80109be:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109c0:	4b36      	ldr	r3, [pc, #216]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109c2:	2201      	movs	r2, #1
 80109c4:	709a      	strb	r2, [r3, #2]
                break;
 80109c6:	e0f6      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 80109c8:	4b34      	ldr	r3, [pc, #208]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109ca:	2200      	movs	r2, #0
 80109cc:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109ce:	4b33      	ldr	r3, [pc, #204]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109d0:	2201      	movs	r2, #1
 80109d2:	709a      	strb	r2, [r3, #2]
                break;
 80109d4:	e0ef      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	7b1a      	ldrb	r2, [r3, #12]
 80109da:	4b30      	ldr	r3, [pc, #192]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109dc:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 80109de:	4b2f      	ldr	r3, [pc, #188]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109e0:	689b      	ldr	r3, [r3, #8]
 80109e2:	2204      	movs	r2, #4
 80109e4:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109e6:	2301      	movs	r3, #1
 80109e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80109ec:	e012      	b.n	8010a14 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	689a      	ldr	r2, [r3, #8]
 80109f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109f6:	4413      	add	r3, r2
 80109f8:	781a      	ldrb	r2, [r3, #0]
 80109fa:	4b28      	ldr	r3, [pc, #160]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109fc:	6899      	ldr	r1, [r3, #8]
 80109fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a02:	440b      	add	r3, r1
 8010a04:	3201      	adds	r2, #1
 8010a06:	b2d2      	uxtb	r2, r2
 8010a08:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010a0a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a0e:	3301      	adds	r3, #1
 8010a10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010a14:	4b21      	ldr	r3, [pc, #132]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a16:	795a      	ldrb	r2, [r3, #5]
 8010a18:	4b20      	ldr	r3, [pc, #128]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a1a:	799b      	ldrb	r3, [r3, #6]
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	bf28      	it	cs
 8010a20:	4613      	movcs	r3, r2
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d3e0      	bcc.n	80109ee <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8010a2c:	e0c3      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8010a2e:	2305      	movs	r3, #5
 8010a30:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8010a34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f004 fb89 	bl	8015150 <LoRaMacMlmeRequest>
                }
                break;
 8010a3e:	e0ba      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010a40:	4819      	ldr	r0, [pc, #100]	; (8010aa8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010a42:	f00d fb89 	bl	801e158 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8010a46:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010a4c:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a4e:	2200      	movs	r2, #0
 8010a50:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8010a52:	2304      	movs	r3, #4
 8010a54:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010a56:	4b12      	ldr	r3, [pc, #72]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010a5e:	f107 030c 	add.w	r3, r7, #12
 8010a62:	4618      	mov	r0, r3
 8010a64:	f003 ffe0 	bl	8014a28 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010a68:	4b0d      	ldr	r3, [pc, #52]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	785b      	ldrb	r3, [r3, #1]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f004 fdb6 	bl	80155e0 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010a74:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d003      	beq.n	8010a86 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010a7e:	4b08      	ldr	r3, [pc, #32]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	689b      	ldr	r3, [r3, #8]
 8010a84:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8010a86:	4b09      	ldr	r3, [pc, #36]	; (8010aac <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 8092 	beq.w	8010bb4 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010a90:	4b06      	ldr	r3, [pc, #24]	; (8010aac <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a94:	2101      	movs	r1, #1
 8010a96:	2002      	movs	r0, #2
 8010a98:	4798      	blx	r3
                    }
                }
                break;
 8010a9a:	e08b      	b.n	8010bb4 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010a9c:	20000960 	.word	0x20000960
 8010aa0:	20000974 	.word	0x20000974
 8010aa4:	08010bcd 	.word	0x08010bcd
 8010aa8:	20000948 	.word	0x20000948
 8010aac:	200000f4 	.word	0x200000f4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7b1b      	ldrb	r3, [r3, #12]
 8010ab4:	2b03      	cmp	r3, #3
 8010ab6:	d113      	bne.n	8010ae0 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010ab8:	2306      	movs	r3, #6
 8010aba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	021b      	lsls	r3, r3, #8
 8010ac8:	b21a      	sxth	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	3302      	adds	r3, #2
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	b21b      	sxth	r3, r3
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	b21b      	sxth	r3, r3
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010ade:	e032      	b.n	8010b46 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	7b1b      	ldrb	r3, [r3, #12]
 8010ae4:	2b07      	cmp	r3, #7
 8010ae6:	d12e      	bne.n	8010b46 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010ae8:	2307      	movs	r3, #7
 8010aea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	3301      	adds	r3, #1
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	021b      	lsls	r3, r3, #8
 8010af8:	b21a      	sxth	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	3302      	adds	r3, #2
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	b21b      	sxth	r3, r3
 8010b04:	4313      	orrs	r3, r2
 8010b06:	b21b      	sxth	r3, r3
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	3303      	adds	r3, #3
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	041a      	lsls	r2, r3, #16
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	3304      	adds	r3, #4
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	021b      	lsls	r3, r3, #8
 8010b22:	4313      	orrs	r3, r2
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	6892      	ldr	r2, [r2, #8]
 8010b28:	3205      	adds	r2, #5
 8010b2a:	7812      	ldrb	r2, [r2, #0]
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	461a      	mov	r2, r3
 8010b30:	2364      	movs	r3, #100	; 0x64
 8010b32:	fb02 f303 	mul.w	r3, r2, r3
 8010b36:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	3306      	adds	r3, #6
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	b25b      	sxtb	r3, r3
 8010b42:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 8010b46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f004 fb00 	bl	8015150 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8010b50:	4b1a      	ldr	r3, [pc, #104]	; (8010bbc <LmhpComplianceOnMcpsIndication+0x3c0>)
 8010b52:	2201      	movs	r2, #1
 8010b54:	709a      	strb	r2, [r3, #2]
                }
                break;
 8010b56:	e02e      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8010b58:	230a      	movs	r3, #10
 8010b5a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b62:	4618      	mov	r0, r3
 8010b64:	f004 faf4 	bl	8015150 <LoRaMacMlmeRequest>
                }
                break;
 8010b68:	e025      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	689b      	ldr	r3, [r3, #8]
 8010b72:	3301      	adds	r3, #1
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010b78:	f107 030c 	add.w	r3, r7, #12
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f003 ff53 	bl	8014a28 <LoRaMacMibSetRequestConfirm>
                }
                break;
 8010b82:	e018      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010b84:	230d      	movs	r3, #13
 8010b86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	785b      	ldrb	r3, [r3, #1]
 8010b90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f004 fad9 	bl	8015150 <LoRaMacMlmeRequest>
                }
                break;
 8010b9e:	e00a      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010ba0:	bf00      	nop
 8010ba2:	e008      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010ba4:	bf00      	nop
 8010ba6:	e006      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010ba8:	bf00      	nop
 8010baa:	e004      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010bac:	bf00      	nop
 8010bae:	e002      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010bb0:	bf00      	nop
 8010bb2:	e000      	b.n	8010bb6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010bb4:	bf00      	nop
        }
    }
}
 8010bb6:	3788      	adds	r7, #136	; 0x88
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	20000960 	.word	0x20000960

08010bc0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010bc4:	bf00      	nop
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bc80      	pop	{r7}
 8010bca:	4770      	bx	lr

08010bcc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010bd4:	f7ff fd9c 	bl	8010710 <LmhpComplianceTxProcess>
}
 8010bd8:	bf00      	nop
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010be8:	2300      	movs	r3, #0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	370c      	adds	r7, #12
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bc80      	pop	{r7}
 8010bf2:	4770      	bx	lr

08010bf4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	6039      	str	r1, [r7, #0]
 8010bfe:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010c00:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bc80      	pop	{r7}
 8010c0c:	4770      	bx	lr
	...

08010c10 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010c10:	b590      	push	{r4, r7, lr}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010c16:	f00d fbb9 	bl	801e38c <UTIL_TIMER_GetCurrentTime>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	4a0f      	ldr	r2, [pc, #60]	; (8010c5c <OnRadioTxDone+0x4c>)
 8010c1e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010c20:	4c0f      	ldr	r4, [pc, #60]	; (8010c60 <OnRadioTxDone+0x50>)
 8010c22:	463b      	mov	r3, r7
 8010c24:	4618      	mov	r0, r3
 8010c26:	f00c fd2f 	bl	801d688 <SysTimeGet>
 8010c2a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c2e:	463a      	mov	r2, r7
 8010c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c34:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c38:	4a0a      	ldr	r2, [pc, #40]	; (8010c64 <OnRadioTxDone+0x54>)
 8010c3a:	7813      	ldrb	r3, [r2, #0]
 8010c3c:	f043 0310 	orr.w	r3, r3, #16
 8010c40:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c42:	f003 f8e1 	bl	8013e08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c46:	4b08      	ldr	r3, [pc, #32]	; (8010c68 <OnRadioTxDone+0x58>)
 8010c48:	2201      	movs	r2, #1
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	2002      	movs	r0, #2
 8010c4e:	f00d fc8d 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 8010c52:	bf00      	nop
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd90      	pop	{r4, r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	200015ec 	.word	0x200015ec
 8010c60:	20000978 	.word	0x20000978
 8010c64:	200015e8 	.word	0x200015e8
 8010c68:	0801f334 	.word	0x0801f334

08010c6c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	4608      	mov	r0, r1
 8010c76:	4611      	mov	r1, r2
 8010c78:	461a      	mov	r2, r3
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	817b      	strh	r3, [r7, #10]
 8010c7e:	460b      	mov	r3, r1
 8010c80:	813b      	strh	r3, [r7, #8]
 8010c82:	4613      	mov	r3, r2
 8010c84:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010c86:	f00d fb81 	bl	801e38c <UTIL_TIMER_GetCurrentTime>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	4a0f      	ldr	r2, [pc, #60]	; (8010ccc <OnRadioRxDone+0x60>)
 8010c8e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010c90:	4a0e      	ldr	r2, [pc, #56]	; (8010ccc <OnRadioRxDone+0x60>)
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010c96:	4a0d      	ldr	r2, [pc, #52]	; (8010ccc <OnRadioRxDone+0x60>)
 8010c98:	897b      	ldrh	r3, [r7, #10]
 8010c9a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010c9c:	4a0b      	ldr	r2, [pc, #44]	; (8010ccc <OnRadioRxDone+0x60>)
 8010c9e:	893b      	ldrh	r3, [r7, #8]
 8010ca0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010ca2:	4a0a      	ldr	r2, [pc, #40]	; (8010ccc <OnRadioRxDone+0x60>)
 8010ca4:	79fb      	ldrb	r3, [r7, #7]
 8010ca6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010ca8:	4a09      	ldr	r2, [pc, #36]	; (8010cd0 <OnRadioRxDone+0x64>)
 8010caa:	7813      	ldrb	r3, [r2, #0]
 8010cac:	f043 0308 	orr.w	r3, r3, #8
 8010cb0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010cb2:	f003 f8a9 	bl	8013e08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010cb6:	4b07      	ldr	r3, [pc, #28]	; (8010cd4 <OnRadioRxDone+0x68>)
 8010cb8:	2201      	movs	r2, #1
 8010cba:	2100      	movs	r1, #0
 8010cbc:	2002      	movs	r0, #2
 8010cbe:	f00d fc55 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 8010cc2:	bf00      	nop
 8010cc4:	3710      	adds	r7, #16
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	200015f0 	.word	0x200015f0
 8010cd0:	200015e8 	.word	0x200015e8
 8010cd4:	0801f344 	.word	0x0801f344

08010cd8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010cdc:	4a07      	ldr	r2, [pc, #28]	; (8010cfc <OnRadioTxTimeout+0x24>)
 8010cde:	7813      	ldrb	r3, [r2, #0]
 8010ce0:	f043 0304 	orr.w	r3, r3, #4
 8010ce4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010ce6:	f003 f88f 	bl	8013e08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010cea:	4b05      	ldr	r3, [pc, #20]	; (8010d00 <OnRadioTxTimeout+0x28>)
 8010cec:	2201      	movs	r2, #1
 8010cee:	2100      	movs	r1, #0
 8010cf0:	2002      	movs	r0, #2
 8010cf2:	f00d fc3b 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 8010cf6:	bf00      	nop
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	200015e8 	.word	0x200015e8
 8010d00:	0801f354 	.word	0x0801f354

08010d04 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010d08:	4a04      	ldr	r2, [pc, #16]	; (8010d1c <OnRadioRxError+0x18>)
 8010d0a:	7813      	ldrb	r3, [r2, #0]
 8010d0c:	f043 0302 	orr.w	r3, r3, #2
 8010d10:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d12:	f003 f879 	bl	8013e08 <OnMacProcessNotify>
}
 8010d16:	bf00      	nop
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	200015e8 	.word	0x200015e8

08010d20 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d24:	4a07      	ldr	r2, [pc, #28]	; (8010d44 <OnRadioRxTimeout+0x24>)
 8010d26:	7813      	ldrb	r3, [r2, #0]
 8010d28:	f043 0301 	orr.w	r3, r3, #1
 8010d2c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d2e:	f003 f86b 	bl	8013e08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d32:	4b05      	ldr	r3, [pc, #20]	; (8010d48 <OnRadioRxTimeout+0x28>)
 8010d34:	2201      	movs	r2, #1
 8010d36:	2100      	movs	r1, #0
 8010d38:	2002      	movs	r0, #2
 8010d3a:	f00d fc17 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 8010d3e:	bf00      	nop
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	200015e8 	.word	0x200015e8
 8010d48:	0801f364 	.word	0x0801f364

08010d4c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d50:	4b08      	ldr	r3, [pc, #32]	; (8010d74 <UpdateRxSlotIdleState+0x28>)
 8010d52:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d004      	beq.n	8010d64 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d5a:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <UpdateRxSlotIdleState+0x2c>)
 8010d5c:	2206      	movs	r2, #6
 8010d5e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d62:	e003      	b.n	8010d6c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d64:	4b04      	ldr	r3, [pc, #16]	; (8010d78 <UpdateRxSlotIdleState+0x2c>)
 8010d66:	2202      	movs	r2, #2
 8010d68:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8010d6c:	bf00      	nop
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bc80      	pop	{r7}
 8010d72:	4770      	bx	lr
 8010d74:	20000e80 	.word	0x20000e80
 8010d78:	20000978 	.word	0x20000978

08010d7c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b092      	sub	sp, #72	; 0x48
 8010d80:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d82:	4b50      	ldr	r3, [pc, #320]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010d84:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d88:	2b02      	cmp	r3, #2
 8010d8a:	d002      	beq.n	8010d92 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010d8c:	4b4e      	ldr	r3, [pc, #312]	; (8010ec8 <ProcessRadioTxDone+0x14c>)
 8010d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d90:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d92:	f3ef 8310 	mrs	r3, PRIMASK
 8010d96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010d9c:	b672      	cpsid	i
}
 8010d9e:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010da0:	f00d faf4 	bl	801e38c <UTIL_TIMER_GetCurrentTime>
 8010da4:	4602      	mov	r2, r0
 8010da6:	4b49      	ldr	r3, [pc, #292]	; (8010ecc <ProcessRadioTxDone+0x150>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010dae:	4b48      	ldr	r3, [pc, #288]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010db0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	4619      	mov	r1, r3
 8010dba:	4846      	ldr	r0, [pc, #280]	; (8010ed4 <ProcessRadioTxDone+0x158>)
 8010dbc:	f00d fa3c 	bl	801e238 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010dc0:	4844      	ldr	r0, [pc, #272]	; (8010ed4 <ProcessRadioTxDone+0x158>)
 8010dc2:	f00d f95b 	bl	801e07c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010dc6:	4b42      	ldr	r3, [pc, #264]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010dc8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	4841      	ldr	r0, [pc, #260]	; (8010ed8 <ProcessRadioTxDone+0x15c>)
 8010dd4:	f00d fa30 	bl	801e238 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010dd8:	483f      	ldr	r0, [pc, #252]	; (8010ed8 <ProcessRadioTxDone+0x15c>)
 8010dda:	f00d f94f 	bl	801e07c <UTIL_TIMER_Start>
 8010dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de4:	f383 8810 	msr	PRIMASK, r3
}
 8010de8:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010dea:	4b36      	ldr	r3, [pc, #216]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010dec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	d004      	beq.n	8010dfe <ProcessRadioTxDone+0x82>
 8010df4:	4b36      	ldr	r3, [pc, #216]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010df6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d019      	beq.n	8010e32 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010dfe:	2316      	movs	r3, #22
 8010e00:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e04:	4b2f      	ldr	r3, [pc, #188]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010e06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e0a:	f107 0220 	add.w	r2, r7, #32
 8010e0e:	4611      	mov	r1, r2
 8010e10:	4618      	mov	r0, r3
 8010e12:	f006 fcec 	bl	80177ee <RegionGetPhyParam>
 8010e16:	4603      	mov	r3, r0
 8010e18:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010e1a:	4b2d      	ldr	r3, [pc, #180]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010e1c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	4413      	add	r3, r2
 8010e24:	4619      	mov	r1, r3
 8010e26:	482d      	ldr	r0, [pc, #180]	; (8010edc <ProcessRadioTxDone+0x160>)
 8010e28:	f00d fa06 	bl	801e238 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010e2c:	482b      	ldr	r0, [pc, #172]	; (8010edc <ProcessRadioTxDone+0x160>)
 8010e2e:	f00d f925 	bl	801e07c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e32:	4b26      	ldr	r3, [pc, #152]	; (8010ecc <ProcessRadioTxDone+0x150>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a23      	ldr	r2, [pc, #140]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e3a:	4b25      	ldr	r3, [pc, #148]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010e3c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010e40:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e42:	4b22      	ldr	r3, [pc, #136]	; (8010ecc <ProcessRadioTxDone+0x150>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f00c fc53 	bl	801d6f8 <SysTimeGetMcuTime>
 8010e52:	4638      	mov	r0, r7
 8010e54:	4b1b      	ldr	r3, [pc, #108]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010e56:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8010e5a:	9200      	str	r2, [sp, #0]
 8010e5c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010e60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e64:	ca06      	ldmia	r2, {r1, r2}
 8010e66:	f00c fba8 	bl	801d5ba <SysTimeSub>
 8010e6a:	f107 0314 	add.w	r3, r7, #20
 8010e6e:	463a      	mov	r2, r7
 8010e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e74:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010e78:	4b15      	ldr	r3, [pc, #84]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010e7a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8010e7e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010e80:	2301      	movs	r3, #1
 8010e82:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e84:	4b0f      	ldr	r3, [pc, #60]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010e86:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010e92:	4b0c      	ldr	r3, [pc, #48]	; (8010ec4 <ProcessRadioTxDone+0x148>)
 8010e94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e98:	f107 0208 	add.w	r2, r7, #8
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f006 fcbd 	bl	801781e <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010ea4:	4b0a      	ldr	r3, [pc, #40]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010ea6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010eaa:	f083 0301 	eor.w	r3, r3, #1
 8010eae:	b2db      	uxtb	r3, r3
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d003      	beq.n	8010ebc <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010eb4:	4b06      	ldr	r3, [pc, #24]	; (8010ed0 <ProcessRadioTxDone+0x154>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010ebc:	bf00      	nop
 8010ebe:	3740      	adds	r7, #64	; 0x40
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	20000e80 	.word	0x20000e80
 8010ec8:	0801fa14 	.word	0x0801fa14
 8010ecc:	200015ec 	.word	0x200015ec
 8010ed0:	20000978 	.word	0x20000978
 8010ed4:	20000cf8 	.word	0x20000cf8
 8010ed8:	20000d10 	.word	0x20000d10
 8010edc:	20000d6c 	.word	0x20000d6c

08010ee0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ee4:	4b10      	ldr	r3, [pc, #64]	; (8010f28 <PrepareRxDoneAbort+0x48>)
 8010ee6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eee:	4a0e      	ldr	r2, [pc, #56]	; (8010f28 <PrepareRxDoneAbort+0x48>)
 8010ef0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010ef4:	4b0c      	ldr	r3, [pc, #48]	; (8010f28 <PrepareRxDoneAbort+0x48>)
 8010ef6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010efe:	2000      	movs	r0, #0
 8010f00:	f001 f950 	bl	80121a4 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010f04:	4a08      	ldr	r2, [pc, #32]	; (8010f28 <PrepareRxDoneAbort+0x48>)
 8010f06:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010f0a:	f043 0302 	orr.w	r3, r3, #2
 8010f0e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010f12:	4a05      	ldr	r2, [pc, #20]	; (8010f28 <PrepareRxDoneAbort+0x48>)
 8010f14:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010f18:	f043 0310 	orr.w	r3, r3, #16
 8010f1c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010f20:	f7ff ff14 	bl	8010d4c <UpdateRxSlotIdleState>
}
 8010f24:	bf00      	nop
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	20000978 	.word	0x20000978

08010f2c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f2c:	b5b0      	push	{r4, r5, r7, lr}
 8010f2e:	b0aa      	sub	sp, #168	; 0xa8
 8010f30:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f32:	2313      	movs	r3, #19
 8010f34:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f38:	4b78      	ldr	r3, [pc, #480]	; (801111c <ProcessRadioRxDone+0x1f0>)
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010f40:	4b76      	ldr	r3, [pc, #472]	; (801111c <ProcessRadioRxDone+0x1f0>)
 8010f42:	891b      	ldrh	r3, [r3, #8]
 8010f44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010f48:	4b74      	ldr	r3, [pc, #464]	; (801111c <ProcessRadioRxDone+0x1f0>)
 8010f4a:	895b      	ldrh	r3, [r3, #10]
 8010f4c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010f50:	4b72      	ldr	r3, [pc, #456]	; (801111c <ProcessRadioRxDone+0x1f0>)
 8010f52:	7b1b      	ldrb	r3, [r3, #12]
 8010f54:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f62:	4b6f      	ldr	r3, [pc, #444]	; (8011120 <ProcessRadioRxDone+0x1f4>)
 8010f64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f7e:	4b69      	ldr	r3, [pc, #420]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010f86:	4a67      	ldr	r2, [pc, #412]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010f88:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010f8c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010f90:	4a64      	ldr	r2, [pc, #400]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010f92:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010f96:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010f9a:	4b62      	ldr	r3, [pc, #392]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010f9c:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010fa0:	4b60      	ldr	r3, [pc, #384]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fa2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010fa6:	4b5f      	ldr	r3, [pc, #380]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010fae:	4b5d      	ldr	r3, [pc, #372]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010fb6:	4b5b      	ldr	r3, [pc, #364]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010fbe:	4b59      	ldr	r3, [pc, #356]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010fc6:	4b57      	ldr	r3, [pc, #348]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010fce:	4b55      	ldr	r3, [pc, #340]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010fd6:	4b53      	ldr	r3, [pc, #332]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010fde:	4b51      	ldr	r3, [pc, #324]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010fe6:	4b4f      	ldr	r3, [pc, #316]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010fee:	4b4d      	ldr	r3, [pc, #308]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010ff6:	4b4b      	ldr	r3, [pc, #300]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010ffe:	4b4a      	ldr	r3, [pc, #296]	; (8011128 <ProcessRadioRxDone+0x1fc>)
 8011000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011002:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011004:	4849      	ldr	r0, [pc, #292]	; (801112c <ProcessRadioRxDone+0x200>)
 8011006:	f00d f8a7 	bl	801e158 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 801100a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801100e:	4619      	mov	r1, r3
 8011010:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011014:	f004 fc4b 	bl	80158ae <LoRaMacClassBRxBeacon>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00b      	beq.n	8011036 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801101e:	4a41      	ldr	r2, [pc, #260]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8011020:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011024:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011028:	4a3e      	ldr	r2, [pc, #248]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 801102a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801102e:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8011032:	f000 bc1f 	b.w	8011874 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011036:	4b3a      	ldr	r3, [pc, #232]	; (8011120 <ProcessRadioRxDone+0x1f4>)
 8011038:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801103c:	2b01      	cmp	r3, #1
 801103e:	d11e      	bne.n	801107e <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011040:	f004 fc48 	bl	80158d4 <LoRaMacClassBIsPingExpected>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00a      	beq.n	8011060 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801104a:	2000      	movs	r0, #0
 801104c:	f004 fbf9 	bl	8015842 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011050:	2000      	movs	r0, #0
 8011052:	f004 fc1a 	bl	801588a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011056:	4b33      	ldr	r3, [pc, #204]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8011058:	2204      	movs	r2, #4
 801105a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 801105e:	e00e      	b.n	801107e <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011060:	f004 fc3f 	bl	80158e2 <LoRaMacClassBIsMulticastExpected>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d009      	beq.n	801107e <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801106a:	2000      	movs	r0, #0
 801106c:	f004 fbf3 	bl	8015856 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011070:	2000      	movs	r0, #0
 8011072:	f004 fc13 	bl	801589c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8011076:	4b2b      	ldr	r3, [pc, #172]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8011078:	2205      	movs	r2, #5
 801107a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801107e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011082:	2b00      	cmp	r3, #0
 8011084:	d106      	bne.n	8011094 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011086:	4b27      	ldr	r3, [pc, #156]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8011088:	2201      	movs	r2, #1
 801108a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 801108e:	f7ff ff27 	bl	8010ee0 <PrepareRxDoneAbort>
        return;
 8011092:	e3ef      	b.n	8011874 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011094:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 801109e:	461a      	mov	r2, r3
 80110a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110a4:	4413      	add	r3, r2
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80110ac:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110b0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	3b01      	subs	r3, #1
 80110b8:	2b06      	cmp	r3, #6
 80110ba:	f200 83b4 	bhi.w	8011826 <ProcessRadioRxDone+0x8fa>
 80110be:	a201      	add	r2, pc, #4	; (adr r2, 80110c4 <ProcessRadioRxDone+0x198>)
 80110c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c4:	080110e1 	.word	0x080110e1
 80110c8:	08011827 	.word	0x08011827
 80110cc:	080112c1 	.word	0x080112c1
 80110d0:	08011827 	.word	0x08011827
 80110d4:	080112b9 	.word	0x080112b9
 80110d8:	08011827 	.word	0x08011827
 80110dc:	080117cb 	.word	0x080117cb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80110e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110e4:	2b10      	cmp	r3, #16
 80110e6:	d806      	bhi.n	80110f6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110e8:	4b0e      	ldr	r3, [pc, #56]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 80110ea:	2201      	movs	r2, #1
 80110ec:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80110f0:	f7ff fef6 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 80110f4:	e3be      	b.n	8011874 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 80110f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110fa:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 80110fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011100:	b2db      	uxtb	r3, r3
 8011102:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011104:	4b06      	ldr	r3, [pc, #24]	; (8011120 <ProcessRadioRxDone+0x1f4>)
 8011106:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801110a:	2b00      	cmp	r3, #0
 801110c:	d010      	beq.n	8011130 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801110e:	4b05      	ldr	r3, [pc, #20]	; (8011124 <ProcessRadioRxDone+0x1f8>)
 8011110:	2201      	movs	r2, #1
 8011112:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011116:	f7ff fee3 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 801111a:	e3ab      	b.n	8011874 <ProcessRadioRxDone+0x948>
 801111c:	200015f0 	.word	0x200015f0
 8011120:	20000e80 	.word	0x20000e80
 8011124:	20000978 	.word	0x20000978
 8011128:	0801fa14 	.word	0x0801fa14
 801112c:	20000d10 	.word	0x20000d10
            }

            SecureElementGetJoinEui( joinEui );
 8011130:	1d3b      	adds	r3, r7, #4
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe fa92 	bl	800f65c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8011138:	f107 0214 	add.w	r2, r7, #20
 801113c:	1d3b      	adds	r3, r7, #4
 801113e:	4619      	mov	r1, r3
 8011140:	20ff      	movs	r0, #255	; 0xff
 8011142:	f005 fdd5 	bl	8016cf0 <LoRaMacCryptoHandleJoinAccept>
 8011146:	4603      	mov	r3, r0
 8011148:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 801114c:	2300      	movs	r3, #0
 801114e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011152:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011156:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801115a:	b2db      	uxtb	r3, r3
 801115c:	b25b      	sxtb	r3, r3
 801115e:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011160:	4bbb      	ldr	r3, [pc, #748]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011162:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011166:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8011168:	4bb9      	ldr	r3, [pc, #740]	; (8011450 <ProcessRadioRxDone+0x524>)
 801116a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801116e:	4639      	mov	r1, r7
 8011170:	2207      	movs	r2, #7
 8011172:	4618      	mov	r0, r3
 8011174:	f006 fb76 	bl	8017864 <RegionVerify>
 8011178:	4603      	mov	r3, r0
 801117a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 801117e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011182:	2b00      	cmp	r3, #0
 8011184:	f040 808c 	bne.w	80112a0 <ProcessRadioRxDone+0x374>
 8011188:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 8087 	beq.w	80112a0 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011192:	7f7b      	ldrb	r3, [r7, #29]
 8011194:	461a      	mov	r2, r3
 8011196:	4bae      	ldr	r3, [pc, #696]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011198:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 801119c:	4bac      	ldr	r3, [pc, #688]	; (8011450 <ProcessRadioRxDone+0x524>)
 801119e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111a2:	7fbb      	ldrb	r3, [r7, #30]
 80111a4:	021b      	lsls	r3, r3, #8
 80111a6:	4313      	orrs	r3, r2
 80111a8:	4aa9      	ldr	r2, [pc, #676]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80111ae:	4ba8      	ldr	r3, [pc, #672]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111b4:	7ffb      	ldrb	r3, [r7, #31]
 80111b6:	041b      	lsls	r3, r3, #16
 80111b8:	4313      	orrs	r3, r2
 80111ba:	4aa5      	ldr	r2, [pc, #660]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80111c0:	6a3b      	ldr	r3, [r7, #32]
 80111c2:	4aa3      	ldr	r2, [pc, #652]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111c4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80111c8:	4ba1      	ldr	r3, [pc, #644]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80111ce:	4619      	mov	r1, r3
 80111d0:	2002      	movs	r0, #2
 80111d2:	f7fe fa5b 	bl	800f68c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80111d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	461a      	mov	r2, r3
 80111e2:	4b9b      	ldr	r3, [pc, #620]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	461a      	mov	r2, r3
 80111f4:	4b96      	ldr	r3, [pc, #600]	; (8011450 <ProcessRadioRxDone+0x524>)
 80111f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011202:	b2db      	uxtb	r3, r3
 8011204:	461a      	mov	r2, r3
 8011206:	4b92      	ldr	r3, [pc, #584]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801120c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011210:	461a      	mov	r2, r3
 8011212:	4b8f      	ldr	r3, [pc, #572]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011214:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011216:	4b8e      	ldr	r3, [pc, #568]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801121a:	2b00      	cmp	r3, #0
 801121c:	d102      	bne.n	8011224 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801121e:	4b8c      	ldr	r3, [pc, #560]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011220:	2201      	movs	r2, #1
 8011222:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011224:	4b8a      	ldr	r3, [pc, #552]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801122c:	fb02 f303 	mul.w	r3, r2, r3
 8011230:	4a87      	ldr	r2, [pc, #540]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011232:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011234:	4b86      	ldr	r3, [pc, #536]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011238:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801123c:	4a84      	ldr	r2, [pc, #528]	; (8011450 <ProcessRadioRxDone+0x524>)
 801123e:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8011240:	4b83      	ldr	r3, [pc, #524]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011242:	2201      	movs	r2, #1
 8011244:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011248:	4b81      	ldr	r3, [pc, #516]	; (8011450 <ProcessRadioRxDone+0x524>)
 801124a:	2200      	movs	r2, #0
 801124c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011250:	f107 0314 	add.w	r3, r7, #20
 8011254:	3312      	adds	r3, #18
 8011256:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011258:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801125c:	b2db      	uxtb	r3, r3
 801125e:	3b11      	subs	r3, #17
 8011260:	b2db      	uxtb	r3, r3
 8011262:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011266:	4b7a      	ldr	r3, [pc, #488]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011268:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801126c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011270:	4611      	mov	r1, r2
 8011272:	4618      	mov	r0, r3
 8011274:	f006 fb0d 	bl	8017892 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011278:	4b75      	ldr	r3, [pc, #468]	; (8011450 <ProcessRadioRxDone+0x524>)
 801127a:	2202      	movs	r2, #2
 801127c:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011280:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011284:	4618      	mov	r0, r3
 8011286:	f005 f80d 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	f000 82d2 	beq.w	8011836 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8011292:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011296:	4619      	mov	r1, r3
 8011298:	2000      	movs	r0, #0
 801129a:	f004 ff77 	bl	801618c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801129e:	e2ca      	b.n	8011836 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80112a0:	2001      	movs	r0, #1
 80112a2:	f004 ffff 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 82c3 	beq.w	8011834 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80112ae:	2101      	movs	r1, #1
 80112b0:	2007      	movs	r0, #7
 80112b2:	f004 ff6b 	bl	801618c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 80112b6:	e2bd      	b.n	8011834 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80112b8:	4b66      	ldr	r3, [pc, #408]	; (8011454 <ProcessRadioRxDone+0x528>)
 80112ba:	2201      	movs	r2, #1
 80112bc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112c0:	4b63      	ldr	r3, [pc, #396]	; (8011450 <ProcessRadioRxDone+0x524>)
 80112c2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80112c6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80112ca:	4b62      	ldr	r3, [pc, #392]	; (8011454 <ProcessRadioRxDone+0x528>)
 80112cc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80112d0:	b25b      	sxtb	r3, r3
 80112d2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80112d6:	230d      	movs	r3, #13
 80112d8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80112dc:	4b5c      	ldr	r3, [pc, #368]	; (8011450 <ProcessRadioRxDone+0x524>)
 80112de:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80112e6:	230e      	movs	r3, #14
 80112e8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112ec:	4b58      	ldr	r3, [pc, #352]	; (8011450 <ProcessRadioRxDone+0x524>)
 80112ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80112f6:	4611      	mov	r1, r2
 80112f8:	4618      	mov	r0, r3
 80112fa:	f006 fa78 	bl	80177ee <RegionGetPhyParam>
 80112fe:	4603      	mov	r3, r0
 8011300:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011302:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011306:	3b0d      	subs	r3, #13
 8011308:	b29b      	uxth	r3, r3
 801130a:	b21b      	sxth	r3, r3
 801130c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011310:	b21a      	sxth	r2, r3
 8011312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011314:	b21b      	sxth	r3, r3
 8011316:	429a      	cmp	r2, r3
 8011318:	dc03      	bgt.n	8011322 <ProcessRadioRxDone+0x3f6>
 801131a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801131e:	2b0b      	cmp	r3, #11
 8011320:	d806      	bhi.n	8011330 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011322:	4b4c      	ldr	r3, [pc, #304]	; (8011454 <ProcessRadioRxDone+0x528>)
 8011324:	2201      	movs	r2, #1
 8011326:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801132a:	f7ff fdd9 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 801132e:	e2a1      	b.n	8011874 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 8011330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011334:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 8011336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801133a:	b2db      	uxtb	r3, r3
 801133c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011340:	4b45      	ldr	r3, [pc, #276]	; (8011458 <ProcessRadioRxDone+0x52c>)
 8011342:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011344:	23ff      	movs	r3, #255	; 0xff
 8011346:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801134a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801134e:	4618      	mov	r0, r3
 8011350:	f005 ffd0 	bl	80172f4 <LoRaMacParserData>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d006      	beq.n	8011368 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801135a:	4b3e      	ldr	r3, [pc, #248]	; (8011454 <ProcessRadioRxDone+0x528>)
 801135c:	2201      	movs	r2, #1
 801135e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011362:	f7ff fdbd 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 8011366:	e285      	b.n	8011874 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801136a:	4a3a      	ldr	r2, [pc, #232]	; (8011454 <ProcessRadioRxDone+0x528>)
 801136c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011370:	f107 020e 	add.w	r2, r7, #14
 8011374:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011378:	4611      	mov	r1, r2
 801137a:	4618      	mov	r0, r3
 801137c:	f002 fc6b 	bl	8013c56 <DetermineFrameType>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d006      	beq.n	8011394 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011386:	4b33      	ldr	r3, [pc, #204]	; (8011454 <ProcessRadioRxDone+0x528>)
 8011388:	2201      	movs	r2, #1
 801138a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801138e:	f7ff fda7 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 8011392:	e26f      	b.n	8011874 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011394:	2300      	movs	r3, #0
 8011396:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 801139a:	2300      	movs	r3, #0
 801139c:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801139e:	2300      	movs	r3, #0
 80113a0:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80113a4:	e04f      	b.n	8011446 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113a6:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113aa:	4929      	ldr	r1, [pc, #164]	; (8011450 <ProcessRadioRxDone+0x524>)
 80113ac:	4613      	mov	r3, r2
 80113ae:	005b      	lsls	r3, r3, #1
 80113b0:	4413      	add	r3, r2
 80113b2:	011b      	lsls	r3, r3, #4
 80113b4:	440b      	add	r3, r1
 80113b6:	33ec      	adds	r3, #236	; 0xec
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113bc:	429a      	cmp	r2, r3
 80113be:	d13d      	bne.n	801143c <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80113c0:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113c4:	4922      	ldr	r1, [pc, #136]	; (8011450 <ProcessRadioRxDone+0x524>)
 80113c6:	4613      	mov	r3, r2
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	4413      	add	r3, r2
 80113cc:	011b      	lsls	r3, r3, #4
 80113ce:	440b      	add	r3, r1
 80113d0:	33e9      	adds	r3, #233	; 0xe9
 80113d2:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d031      	beq.n	801143c <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 80113d8:	2301      	movs	r3, #1
 80113da:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80113de:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113e2:	491b      	ldr	r1, [pc, #108]	; (8011450 <ProcessRadioRxDone+0x524>)
 80113e4:	4613      	mov	r3, r2
 80113e6:	005b      	lsls	r3, r3, #1
 80113e8:	4413      	add	r3, r2
 80113ea:	011b      	lsls	r3, r3, #4
 80113ec:	440b      	add	r3, r1
 80113ee:	33ea      	adds	r3, #234	; 0xea
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80113f6:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113fa:	4915      	ldr	r1, [pc, #84]	; (8011450 <ProcessRadioRxDone+0x524>)
 80113fc:	4613      	mov	r3, r2
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	4413      	add	r3, r2
 8011402:	011b      	lsls	r3, r3, #4
 8011404:	440b      	add	r3, r1
 8011406:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011410:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011414:	490e      	ldr	r1, [pc, #56]	; (8011450 <ProcessRadioRxDone+0x524>)
 8011416:	4613      	mov	r3, r2
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	4413      	add	r3, r2
 801141c:	011b      	lsls	r3, r3, #4
 801141e:	440b      	add	r3, r1
 8011420:	33ec      	adds	r3, #236	; 0xec
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011428:	4b09      	ldr	r3, [pc, #36]	; (8011450 <ProcessRadioRxDone+0x524>)
 801142a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801142e:	2b02      	cmp	r3, #2
 8011430:	d114      	bne.n	801145c <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011432:	4b08      	ldr	r3, [pc, #32]	; (8011454 <ProcessRadioRxDone+0x528>)
 8011434:	2203      	movs	r2, #3
 8011436:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 801143a:	e00f      	b.n	801145c <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801143c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8011440:	3301      	adds	r3, #1
 8011442:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011446:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801144a:	2b00      	cmp	r3, #0
 801144c:	d0ab      	beq.n	80113a6 <ProcessRadioRxDone+0x47a>
 801144e:	e006      	b.n	801145e <ProcessRadioRxDone+0x532>
 8011450:	20000e80 	.word	0x20000e80
 8011454:	20000978 	.word	0x20000978
 8011458:	20000bb0 	.word	0x20000bb0
                    break;
 801145c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801145e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011462:	2b01      	cmp	r3, #1
 8011464:	d117      	bne.n	8011496 <ProcessRadioRxDone+0x56a>
 8011466:	7bbb      	ldrb	r3, [r7, #14]
 8011468:	2b03      	cmp	r3, #3
 801146a:	d10d      	bne.n	8011488 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801146c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011470:	f003 0320 	and.w	r3, r3, #32
 8011474:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011476:	2b00      	cmp	r3, #0
 8011478:	d106      	bne.n	8011488 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801147a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011482:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011484:	2b00      	cmp	r3, #0
 8011486:	d006      	beq.n	8011496 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011488:	4bb3      	ldr	r3, [pc, #716]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801148a:	2201      	movs	r2, #1
 801148c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011490:	f7ff fd26 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 8011494:	e1ee      	b.n	8011874 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011496:	2315      	movs	r3, #21
 8011498:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801149c:	4baf      	ldr	r3, [pc, #700]	; (801175c <ProcessRadioRxDone+0x830>)
 801149e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80114a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80114a6:	4611      	mov	r1, r2
 80114a8:	4618      	mov	r0, r3
 80114aa:	f006 f9a0 	bl	80177ee <RegionGetPhyParam>
 80114ae:	4603      	mov	r3, r0
 80114b0:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80114b2:	7bb9      	ldrb	r1, [r7, #14]
 80114b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	4da8      	ldr	r5, [pc, #672]	; (801175c <ProcessRadioRxDone+0x830>)
 80114ba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80114be:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80114c2:	f107 0210 	add.w	r2, r7, #16
 80114c6:	9202      	str	r2, [sp, #8]
 80114c8:	f107 020f 	add.w	r2, r7, #15
 80114cc:	9201      	str	r2, [sp, #4]
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80114d4:	4622      	mov	r2, r4
 80114d6:	f000 fe8d 	bl	80121f4 <GetFCntDown>
 80114da:	4603      	mov	r3, r0
 80114dc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80114e0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d035      	beq.n	8011554 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80114e8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114ec:	2b07      	cmp	r3, #7
 80114ee:	d119      	bne.n	8011524 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80114f0:	4b99      	ldr	r3, [pc, #612]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80114f2:	2208      	movs	r2, #8
 80114f4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80114f8:	4b98      	ldr	r3, [pc, #608]	; (801175c <ProcessRadioRxDone+0x830>)
 80114fa:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d11d      	bne.n	801153e <ProcessRadioRxDone+0x612>
 8011502:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011506:	f023 031f 	bic.w	r3, r3, #31
 801150a:	b2db      	uxtb	r3, r3
 801150c:	2ba0      	cmp	r3, #160	; 0xa0
 801150e:	d116      	bne.n	801153e <ProcessRadioRxDone+0x612>
 8011510:	4b92      	ldr	r3, [pc, #584]	; (801175c <ProcessRadioRxDone+0x830>)
 8011512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011516:	429a      	cmp	r2, r3
 8011518:	d111      	bne.n	801153e <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801151a:	4b90      	ldr	r3, [pc, #576]	; (801175c <ProcessRadioRxDone+0x830>)
 801151c:	2201      	movs	r2, #1
 801151e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011522:	e00c      	b.n	801153e <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011524:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011528:	2b08      	cmp	r3, #8
 801152a:	d104      	bne.n	8011536 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 801152c:	4b8a      	ldr	r3, [pc, #552]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801152e:	220a      	movs	r2, #10
 8011530:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011534:	e003      	b.n	801153e <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011536:	4b88      	ldr	r3, [pc, #544]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011538:	2201      	movs	r2, #1
 801153a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	4a85      	ldr	r2, [pc, #532]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011542:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	4a83      	ldr	r2, [pc, #524]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801154a:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 801154e:	f7ff fcc7 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 8011552:	e18f      	b.n	8011874 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011554:	7bfa      	ldrb	r2, [r7, #15]
 8011556:	6939      	ldr	r1, [r7, #16]
 8011558:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 801155c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	460b      	mov	r3, r1
 8011564:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011568:	f005 fd24 	bl	8016fb4 <LoRaMacCryptoUnsecureMessage>
 801156c:	4603      	mov	r3, r0
 801156e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011572:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00f      	beq.n	801159a <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801157a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801157e:	2b02      	cmp	r3, #2
 8011580:	d104      	bne.n	801158c <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011582:	4b75      	ldr	r3, [pc, #468]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011584:	220b      	movs	r2, #11
 8011586:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 801158a:	e003      	b.n	8011594 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801158c:	4b72      	ldr	r3, [pc, #456]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801158e:	220c      	movs	r2, #12
 8011590:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8011594:	f7ff fca4 	bl	8010ee0 <PrepareRxDoneAbort>
                return;
 8011598:	e16c      	b.n	8011874 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801159a:	4b6f      	ldr	r3, [pc, #444]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801159c:	2200      	movs	r2, #0
 801159e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 80115a2:	4a6d      	ldr	r2, [pc, #436]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115a4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80115a8:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 80115ac:	4b6a      	ldr	r3, [pc, #424]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115ae:	2200      	movs	r2, #0
 80115b0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 80115b4:	4b68      	ldr	r3, [pc, #416]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115b6:	2200      	movs	r2, #0
 80115b8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	4a66      	ldr	r2, [pc, #408]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115c0:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	4a64      	ldr	r2, [pc, #400]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115c8:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	bf14      	ite	ne
 80115da:	2301      	movne	r3, #1
 80115dc:	2300      	moveq	r3, #0
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	4b5d      	ldr	r3, [pc, #372]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115e2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115e6:	4b5c      	ldr	r3, [pc, #368]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	bf14      	ite	ne
 80115fc:	2301      	movne	r3, #1
 80115fe:	2300      	moveq	r3, #0
 8011600:	b2da      	uxtb	r2, r3
 8011602:	4b55      	ldr	r3, [pc, #340]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011604:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011608:	4b53      	ldr	r3, [pc, #332]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801160a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801160e:	2b00      	cmp	r3, #0
 8011610:	d004      	beq.n	801161c <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011612:	4b51      	ldr	r3, [pc, #324]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011614:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011618:	2b01      	cmp	r3, #1
 801161a:	d102      	bne.n	8011622 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801161c:	4b4f      	ldr	r3, [pc, #316]	; (801175c <ProcessRadioRxDone+0x830>)
 801161e:	2200      	movs	r2, #0
 8011620:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011622:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011626:	2b01      	cmp	r3, #1
 8011628:	d104      	bne.n	8011634 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801162a:	4b4b      	ldr	r3, [pc, #300]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801162c:	2202      	movs	r2, #2
 801162e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011632:	e01f      	b.n	8011674 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011634:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011638:	f023 031f 	bic.w	r3, r3, #31
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2ba0      	cmp	r3, #160	; 0xa0
 8011640:	d110      	bne.n	8011664 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011642:	4b46      	ldr	r3, [pc, #280]	; (801175c <ProcessRadioRxDone+0x830>)
 8011644:	2201      	movs	r2, #1
 8011646:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801164a:	4b44      	ldr	r3, [pc, #272]	; (801175c <ProcessRadioRxDone+0x830>)
 801164c:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011650:	2b00      	cmp	r3, #0
 8011652:	d102      	bne.n	801165a <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011656:	4a41      	ldr	r2, [pc, #260]	; (801175c <ProcessRadioRxDone+0x830>)
 8011658:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801165a:	4b3f      	ldr	r3, [pc, #252]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801165c:	2201      	movs	r2, #1
 801165e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011662:	e007      	b.n	8011674 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011664:	4b3d      	ldr	r3, [pc, #244]	; (801175c <ProcessRadioRxDone+0x830>)
 8011666:	2200      	movs	r2, #0
 8011668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801166c:	4b3a      	ldr	r3, [pc, #232]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801166e:	2200      	movs	r2, #0
 8011670:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011674:	4b39      	ldr	r3, [pc, #228]	; (801175c <ProcessRadioRxDone+0x830>)
 8011676:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801167a:	2b00      	cmp	r3, #0
 801167c:	d106      	bne.n	801168c <ProcessRadioRxDone+0x760>
 801167e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011682:	f003 0310 	and.w	r3, r3, #16
 8011686:	b2db      	uxtb	r3, r3
 8011688:	2b00      	cmp	r3, #0
 801168a:	d008      	beq.n	801169e <ProcessRadioRxDone+0x772>
 801168c:	4b33      	ldr	r3, [pc, #204]	; (801175c <ProcessRadioRxDone+0x830>)
 801168e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011692:	2b00      	cmp	r3, #0
 8011694:	d103      	bne.n	801169e <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8011696:	4b30      	ldr	r3, [pc, #192]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011698:	2201      	movs	r2, #1
 801169a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801169e:	4b2e      	ldr	r3, [pc, #184]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80116a0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116a4:	4a2c      	ldr	r2, [pc, #176]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80116a6:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 80116aa:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80116ae:	4618      	mov	r0, r3
 80116b0:	f001 fef2 	bl	8013498 <RemoveMacCommands>

            switch( fType )
 80116b4:	7bbb      	ldrb	r3, [r7, #14]
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d878      	bhi.n	80117ac <ProcessRadioRxDone+0x880>
 80116ba:	a201      	add	r2, pc, #4	; (adr r2, 80116c0 <ProcessRadioRxDone+0x794>)
 80116bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c0:	080116d1 	.word	0x080116d1
 80116c4:	08011721 	.word	0x08011721
 80116c8:	08011761 	.word	0x08011761
 80116cc:	08011787 	.word	0x08011787
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80116d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80116d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	461c      	mov	r4, r3
 80116dc:	4b1e      	ldr	r3, [pc, #120]	; (8011758 <ProcessRadioRxDone+0x82c>)
 80116de:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116e2:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80116e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80116ea:	f102 0010 	add.w	r0, r2, #16
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	460b      	mov	r3, r1
 80116f2:	4622      	mov	r2, r4
 80116f4:	2100      	movs	r1, #0
 80116f6:	f000 fef7 	bl	80124e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116fa:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116fe:	4b16      	ldr	r3, [pc, #88]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011700:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011706:	4a14      	ldr	r2, [pc, #80]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011708:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801170c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011710:	4b11      	ldr	r3, [pc, #68]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011712:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011716:	4b10      	ldr	r3, [pc, #64]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011718:	2201      	movs	r2, #1
 801171a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801171e:	e04c      	b.n	80117ba <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011720:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011724:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011728:	b2db      	uxtb	r3, r3
 801172a:	461c      	mov	r4, r3
 801172c:	4b0a      	ldr	r3, [pc, #40]	; (8011758 <ProcessRadioRxDone+0x82c>)
 801172e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011732:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011736:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801173a:	f102 0010 	add.w	r0, r2, #16
 801173e:	9300      	str	r3, [sp, #0]
 8011740:	460b      	mov	r3, r1
 8011742:	4622      	mov	r2, r4
 8011744:	2100      	movs	r1, #0
 8011746:	f000 fecf 	bl	80124e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801174a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801174e:	4b02      	ldr	r3, [pc, #8]	; (8011758 <ProcessRadioRxDone+0x82c>)
 8011750:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011754:	e031      	b.n	80117ba <ProcessRadioRxDone+0x88e>
 8011756:	bf00      	nop
 8011758:	20000978 	.word	0x20000978
 801175c:	20000e80 	.word	0x20000e80
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011760:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011762:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011766:	4b45      	ldr	r3, [pc, #276]	; (801187c <ProcessRadioRxDone+0x950>)
 8011768:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801176c:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011770:	9300      	str	r3, [sp, #0]
 8011772:	460b      	mov	r3, r1
 8011774:	2100      	movs	r1, #0
 8011776:	f000 feb7 	bl	80124e8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801177a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801177e:	4b3f      	ldr	r3, [pc, #252]	; (801187c <ProcessRadioRxDone+0x950>)
 8011780:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011784:	e019      	b.n	80117ba <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011786:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801178a:	4b3c      	ldr	r3, [pc, #240]	; (801187c <ProcessRadioRxDone+0x950>)
 801178c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011792:	4a3a      	ldr	r2, [pc, #232]	; (801187c <ProcessRadioRxDone+0x950>)
 8011794:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011798:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801179c:	4b37      	ldr	r3, [pc, #220]	; (801187c <ProcessRadioRxDone+0x950>)
 801179e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 80117a2:	4b36      	ldr	r3, [pc, #216]	; (801187c <ProcessRadioRxDone+0x950>)
 80117a4:	2201      	movs	r2, #1
 80117a6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 80117aa:	e006      	b.n	80117ba <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117ac:	4b33      	ldr	r3, [pc, #204]	; (801187c <ProcessRadioRxDone+0x950>)
 80117ae:	2201      	movs	r2, #1
 80117b0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 80117b4:	f7ff fb94 	bl	8010ee0 <PrepareRxDoneAbort>
                    break;
 80117b8:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80117ba:	4a30      	ldr	r2, [pc, #192]	; (801187c <ProcessRadioRxDone+0x950>)
 80117bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117c0:	f043 0302 	orr.w	r3, r3, #2
 80117c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80117c8:	e035      	b.n	8011836 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80117ca:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117d2:	18d1      	adds	r1, r2, r3
 80117d4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80117de:	1ad3      	subs	r3, r2, r3
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	461a      	mov	r2, r3
 80117e4:	4826      	ldr	r0, [pc, #152]	; (8011880 <ProcessRadioRxDone+0x954>)
 80117e6:	f008 fb1c 	bl	8019e22 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80117ea:	4b24      	ldr	r3, [pc, #144]	; (801187c <ProcessRadioRxDone+0x950>)
 80117ec:	2203      	movs	r2, #3
 80117ee:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117f2:	4b22      	ldr	r3, [pc, #136]	; (801187c <ProcessRadioRxDone+0x950>)
 80117f4:	2200      	movs	r2, #0
 80117f6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80117fa:	4b20      	ldr	r3, [pc, #128]	; (801187c <ProcessRadioRxDone+0x950>)
 80117fc:	4a20      	ldr	r2, [pc, #128]	; (8011880 <ProcessRadioRxDone+0x954>)
 80117fe:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011802:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011806:	b2da      	uxtb	r2, r3
 8011808:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	b2da      	uxtb	r2, r3
 8011810:	4b1a      	ldr	r3, [pc, #104]	; (801187c <ProcessRadioRxDone+0x950>)
 8011812:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011816:	4a19      	ldr	r2, [pc, #100]	; (801187c <ProcessRadioRxDone+0x950>)
 8011818:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801181c:	f043 0302 	orr.w	r3, r3, #2
 8011820:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011824:	e007      	b.n	8011836 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011826:	4b15      	ldr	r3, [pc, #84]	; (801187c <ProcessRadioRxDone+0x950>)
 8011828:	2201      	movs	r2, #1
 801182a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 801182e:	f7ff fb57 	bl	8010ee0 <PrepareRxDoneAbort>
            break;
 8011832:	e000      	b.n	8011836 <ProcessRadioRxDone+0x90a>
            break;
 8011834:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <ProcessRadioRxDone+0x950>)
 8011838:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801183c:	2b00      	cmp	r3, #0
 801183e:	d008      	beq.n	8011852 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011840:	4b0e      	ldr	r3, [pc, #56]	; (801187c <ProcessRadioRxDone+0x950>)
 8011842:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00b      	beq.n	8011862 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801184a:	2000      	movs	r0, #0
 801184c:	f000 fcaa 	bl	80121a4 <OnAckTimeoutTimerEvent>
 8011850:	e007      	b.n	8011862 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011852:	4b0c      	ldr	r3, [pc, #48]	; (8011884 <ProcessRadioRxDone+0x958>)
 8011854:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011858:	2b02      	cmp	r3, #2
 801185a:	d102      	bne.n	8011862 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801185c:	2000      	movs	r0, #0
 801185e:	f000 fca1 	bl	80121a4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011862:	4a06      	ldr	r2, [pc, #24]	; (801187c <ProcessRadioRxDone+0x950>)
 8011864:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011868:	f043 0310 	orr.w	r3, r3, #16
 801186c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011870:	f7ff fa6c 	bl	8010d4c <UpdateRxSlotIdleState>
}
 8011874:	3798      	adds	r7, #152	; 0x98
 8011876:	46bd      	mov	sp, r7
 8011878:	bdb0      	pop	{r4, r5, r7, pc}
 801187a:	bf00      	nop
 801187c:	20000978 	.word	0x20000978
 8011880:	20000bb0 	.word	0x20000bb0
 8011884:	20000e80 	.word	0x20000e80

08011888 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801188c:	4b11      	ldr	r3, [pc, #68]	; (80118d4 <ProcessRadioTxTimeout+0x4c>)
 801188e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011892:	2b02      	cmp	r3, #2
 8011894:	d002      	beq.n	801189c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011896:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <ProcessRadioTxTimeout+0x50>)
 8011898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801189a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801189c:	f7ff fa56 	bl	8010d4c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80118a0:	4b0e      	ldr	r3, [pc, #56]	; (80118dc <ProcessRadioTxTimeout+0x54>)
 80118a2:	2202      	movs	r2, #2
 80118a4:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80118a8:	2002      	movs	r0, #2
 80118aa:	f004 fcc7 	bl	801623c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80118ae:	4b0b      	ldr	r3, [pc, #44]	; (80118dc <ProcessRadioTxTimeout+0x54>)
 80118b0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d003      	beq.n	80118c0 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 80118b8:	4b08      	ldr	r3, [pc, #32]	; (80118dc <ProcessRadioTxTimeout+0x54>)
 80118ba:	2201      	movs	r2, #1
 80118bc:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80118c0:	4a06      	ldr	r2, [pc, #24]	; (80118dc <ProcessRadioTxTimeout+0x54>)
 80118c2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80118c6:	f043 0310 	orr.w	r3, r3, #16
 80118ca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80118ce:	bf00      	nop
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	20000e80 	.word	0x20000e80
 80118d8:	0801fa14 	.word	0x0801fa14
 80118dc:	20000978 	.word	0x20000978

080118e0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	4603      	mov	r3, r0
 80118e8:	460a      	mov	r2, r1
 80118ea:	71fb      	strb	r3, [r7, #7]
 80118ec:	4613      	mov	r3, r2
 80118ee:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80118f0:	2300      	movs	r3, #0
 80118f2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80118f4:	4b40      	ldr	r3, [pc, #256]	; (80119f8 <HandleRadioRxErrorTimeout+0x118>)
 80118f6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80118fa:	2b02      	cmp	r3, #2
 80118fc:	d002      	beq.n	8011904 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80118fe:	4b3f      	ldr	r3, [pc, #252]	; (80119fc <HandleRadioRxErrorTimeout+0x11c>)
 8011900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011902:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011904:	f003 ffdf 	bl	80158c6 <LoRaMacClassBIsBeaconExpected>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d007      	beq.n	801191e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801190e:	2002      	movs	r0, #2
 8011910:	f003 ff8d 	bl	801582e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011914:	2000      	movs	r0, #0
 8011916:	f003 ffaf 	bl	8015878 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801191a:	2301      	movs	r3, #1
 801191c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801191e:	4b36      	ldr	r3, [pc, #216]	; (80119f8 <HandleRadioRxErrorTimeout+0x118>)
 8011920:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011924:	2b01      	cmp	r3, #1
 8011926:	d119      	bne.n	801195c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011928:	f003 ffd4 	bl	80158d4 <LoRaMacClassBIsPingExpected>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d007      	beq.n	8011942 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011932:	2000      	movs	r0, #0
 8011934:	f003 ff85 	bl	8015842 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011938:	2000      	movs	r0, #0
 801193a:	f003 ffa6 	bl	801588a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801193e:	2301      	movs	r3, #1
 8011940:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011942:	f003 ffce 	bl	80158e2 <LoRaMacClassBIsMulticastExpected>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d007      	beq.n	801195c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801194c:	2000      	movs	r0, #0
 801194e:	f003 ff82 	bl	8015856 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011952:	2000      	movs	r0, #0
 8011954:	f003 ffa2 	bl	801589c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011958:	2301      	movs	r3, #1
 801195a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 801195c:	7bfb      	ldrb	r3, [r7, #15]
 801195e:	f083 0301 	eor.w	r3, r3, #1
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2b00      	cmp	r3, #0
 8011966:	d040      	beq.n	80119ea <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011968:	4b25      	ldr	r3, [pc, #148]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 801196a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801196e:	2b00      	cmp	r3, #0
 8011970:	d122      	bne.n	80119b8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011972:	4b23      	ldr	r3, [pc, #140]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 8011974:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011978:	2b00      	cmp	r3, #0
 801197a:	d003      	beq.n	8011984 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 801197c:	4a20      	ldr	r2, [pc, #128]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 801197e:	79fb      	ldrb	r3, [r7, #7]
 8011980:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011984:	79fb      	ldrb	r3, [r7, #7]
 8011986:	4618      	mov	r0, r3
 8011988:	f004 fc58 	bl	801623c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 801198c:	4b1a      	ldr	r3, [pc, #104]	; (80119f8 <HandleRadioRxErrorTimeout+0x118>)
 801198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011990:	4618      	mov	r0, r3
 8011992:	f00c fd0d 	bl	801e3b0 <UTIL_TIMER_GetElapsedTime>
 8011996:	4602      	mov	r2, r0
 8011998:	4b19      	ldr	r3, [pc, #100]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 801199a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801199e:	429a      	cmp	r2, r3
 80119a0:	d323      	bcc.n	80119ea <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 80119a2:	4818      	ldr	r0, [pc, #96]	; (8011a04 <HandleRadioRxErrorTimeout+0x124>)
 80119a4:	f00c fbd8 	bl	801e158 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119a8:	4a15      	ldr	r2, [pc, #84]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 80119aa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119ae:	f043 0310 	orr.w	r3, r3, #16
 80119b2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80119b6:	e018      	b.n	80119ea <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80119b8:	4b11      	ldr	r3, [pc, #68]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 80119ba:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d003      	beq.n	80119ca <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80119c2:	4a0f      	ldr	r2, [pc, #60]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 80119c4:	79bb      	ldrb	r3, [r7, #6]
 80119c6:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80119ca:	79bb      	ldrb	r3, [r7, #6]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f004 fc35 	bl	801623c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80119d2:	4b09      	ldr	r3, [pc, #36]	; (80119f8 <HandleRadioRxErrorTimeout+0x118>)
 80119d4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119d8:	2b02      	cmp	r3, #2
 80119da:	d006      	beq.n	80119ea <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119dc:	4a08      	ldr	r2, [pc, #32]	; (8011a00 <HandleRadioRxErrorTimeout+0x120>)
 80119de:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119e2:	f043 0310 	orr.w	r3, r3, #16
 80119e6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80119ea:	f7ff f9af 	bl	8010d4c <UpdateRxSlotIdleState>
}
 80119ee:	bf00      	nop
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	20000e80 	.word	0x20000e80
 80119fc:	0801fa14 	.word	0x0801fa14
 8011a00:	20000978 	.word	0x20000978
 8011a04:	20000d10 	.word	0x20000d10

08011a08 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011a0c:	2106      	movs	r1, #6
 8011a0e:	2005      	movs	r0, #5
 8011a10:	f7ff ff66 	bl	80118e0 <HandleRadioRxErrorTimeout>
}
 8011a14:	bf00      	nop
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011a1c:	2104      	movs	r1, #4
 8011a1e:	2003      	movs	r0, #3
 8011a20:	f7ff ff5e 	bl	80118e0 <HandleRadioRxErrorTimeout>
}
 8011a24:	bf00      	nop
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a32:	607b      	str	r3, [r7, #4]
  return(result);
 8011a34:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011a36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a38:	b672      	cpsid	i
}
 8011a3a:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011a3c:	4b1d      	ldr	r3, [pc, #116]	; (8011ab4 <LoRaMacHandleIrqEvents+0x8c>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011a42:	4b1c      	ldr	r3, [pc, #112]	; (8011ab4 <LoRaMacHandleIrqEvents+0x8c>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	f383 8810 	msr	PRIMASK, r3
}
 8011a52:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d027      	beq.n	8011aaa <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011a5a:	783b      	ldrb	r3, [r7, #0]
 8011a5c:	f003 0310 	and.w	r3, r3, #16
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d001      	beq.n	8011a6a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011a66:	f7ff f989 	bl	8010d7c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011a6a:	783b      	ldrb	r3, [r7, #0]
 8011a6c:	f003 0308 	and.w	r3, r3, #8
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d001      	beq.n	8011a7a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011a76:	f7ff fa59 	bl	8010f2c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011a7a:	783b      	ldrb	r3, [r7, #0]
 8011a7c:	f003 0304 	and.w	r3, r3, #4
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011a86:	f7ff feff 	bl	8011888 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011a8a:	783b      	ldrb	r3, [r7, #0]
 8011a8c:	f003 0302 	and.w	r3, r3, #2
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d001      	beq.n	8011a9a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011a96:	f7ff ffb7 	bl	8011a08 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011a9a:	783b      	ldrb	r3, [r7, #0]
 8011a9c:	f003 0301 	and.w	r3, r3, #1
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011aa6:	f7ff ffb7 	bl	8011a18 <ProcessRadioRxTimeout>
        }
    }
}
 8011aaa:	bf00      	nop
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	200015e8 	.word	0x200015e8

08011ab8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011ab8:	b480      	push	{r7}
 8011aba:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011abc:	4b0b      	ldr	r3, [pc, #44]	; (8011aec <LoRaMacIsBusy+0x34>)
 8011abe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d101      	bne.n	8011aca <LoRaMacIsBusy+0x12>
    {
        return false;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	e00c      	b.n	8011ae4 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011aca:	4b08      	ldr	r3, [pc, #32]	; (8011aec <LoRaMacIsBusy+0x34>)
 8011acc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d106      	bne.n	8011ae2 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011ad4:	4b05      	ldr	r3, [pc, #20]	; (8011aec <LoRaMacIsBusy+0x34>)
 8011ad6:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d101      	bne.n	8011ae2 <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	e000      	b.n	8011ae4 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011ae2:	2301      	movs	r3, #1
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bc80      	pop	{r7}
 8011aea:	4770      	bx	lr
 8011aec:	20000978 	.word	0x20000978

08011af0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011af0:	b480      	push	{r7}
 8011af2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011af4:	4b05      	ldr	r3, [pc, #20]	; (8011b0c <LoRaMacIsStopped+0x1c>)
 8011af6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d101      	bne.n	8011b02 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011afe:	2301      	movs	r3, #1
 8011b00:	e000      	b.n	8011b04 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bc80      	pop	{r7}
 8011b0a:	4770      	bx	lr
 8011b0c:	20000978 	.word	0x20000978

08011b10 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011b1a:	4a04      	ldr	r2, [pc, #16]	; (8011b2c <LoRaMacEnableRequests+0x1c>)
 8011b1c:	79fb      	ldrb	r3, [r7, #7]
 8011b1e:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011b22:	bf00      	nop
 8011b24:	370c      	adds	r7, #12
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bc80      	pop	{r7}
 8011b2a:	4770      	bx	lr
 8011b2c:	20000978 	.word	0x20000978

08011b30 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011b36:	4b2c      	ldr	r3, [pc, #176]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b38:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b3c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011b3e:	4b2a      	ldr	r3, [pc, #168]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d14a      	bne.n	8011bde <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011b48:	4b27      	ldr	r3, [pc, #156]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b4a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b4e:	f003 0301 	and.w	r3, r3, #1
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d006      	beq.n	8011b66 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011b58:	4a23      	ldr	r2, [pc, #140]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b5a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b5e:	f36f 0300 	bfc	r3, #0, #1
 8011b62:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b66:	4b20      	ldr	r3, [pc, #128]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b68:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b6c:	f003 0304 	and.w	r3, r3, #4
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d006      	beq.n	8011b84 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b76:	4a1c      	ldr	r2, [pc, #112]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b78:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b7c:	f36f 0382 	bfc	r3, #2, #1
 8011b80:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b84:	2001      	movs	r0, #1
 8011b86:	f7ff ffc3 	bl	8011b10 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011b8a:	793b      	ldrb	r3, [r7, #4]
 8011b8c:	f003 0301 	and.w	r3, r3, #1
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d005      	beq.n	8011ba2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011b96:	4b14      	ldr	r3, [pc, #80]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b98:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4813      	ldr	r0, [pc, #76]	; (8011bec <LoRaMacHandleRequestEvents+0xbc>)
 8011ba0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011ba2:	793b      	ldrb	r3, [r7, #4]
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00e      	beq.n	8011bcc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011bae:	4810      	ldr	r0, [pc, #64]	; (8011bf0 <LoRaMacHandleRequestEvents+0xc0>)
 8011bb0:	f004 fb92 	bl	80162d8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011bb4:	f004 fbe2 	bl	801637c <LoRaMacConfirmQueueGetCnt>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d006      	beq.n	8011bcc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bbe:	4a0a      	ldr	r2, [pc, #40]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011bc0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bc4:	f043 0304 	orr.w	r3, r3, #4
 8011bc8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011bcc:	f003 fea7 	bl	801591e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011bd0:	4a05      	ldr	r2, [pc, #20]	; (8011be8 <LoRaMacHandleRequestEvents+0xb8>)
 8011bd2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bd6:	f36f 1304 	bfc	r3, #4, #1
 8011bda:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011bde:	bf00      	nop
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	20000978 	.word	0x20000978
 8011bec:	20000dac 	.word	0x20000dac
 8011bf0:	20000dc0 	.word	0x20000dc0

08011bf4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011bf8:	4b16      	ldr	r3, [pc, #88]	; (8011c54 <LoRaMacHandleIndicationEvents+0x60>)
 8011bfa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011bfe:	f003 0308 	and.w	r3, r3, #8
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d00d      	beq.n	8011c24 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011c08:	4a12      	ldr	r2, [pc, #72]	; (8011c54 <LoRaMacHandleIndicationEvents+0x60>)
 8011c0a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c0e:	f36f 03c3 	bfc	r3, #3, #1
 8011c12:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011c16:	4b0f      	ldr	r3, [pc, #60]	; (8011c54 <LoRaMacHandleIndicationEvents+0x60>)
 8011c18:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	490e      	ldr	r1, [pc, #56]	; (8011c58 <LoRaMacHandleIndicationEvents+0x64>)
 8011c20:	480e      	ldr	r0, [pc, #56]	; (8011c5c <LoRaMacHandleIndicationEvents+0x68>)
 8011c22:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011c24:	4b0b      	ldr	r3, [pc, #44]	; (8011c54 <LoRaMacHandleIndicationEvents+0x60>)
 8011c26:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c2a:	f003 0302 	and.w	r3, r3, #2
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00d      	beq.n	8011c50 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011c34:	4a07      	ldr	r2, [pc, #28]	; (8011c54 <LoRaMacHandleIndicationEvents+0x60>)
 8011c36:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c3a:	f36f 0341 	bfc	r3, #1, #1
 8011c3e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011c42:	4b04      	ldr	r3, [pc, #16]	; (8011c54 <LoRaMacHandleIndicationEvents+0x60>)
 8011c44:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	4903      	ldr	r1, [pc, #12]	; (8011c58 <LoRaMacHandleIndicationEvents+0x64>)
 8011c4c:	4804      	ldr	r0, [pc, #16]	; (8011c60 <LoRaMacHandleIndicationEvents+0x6c>)
 8011c4e:	4798      	blx	r3
    }
}
 8011c50:	bf00      	nop
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	20000978 	.word	0x20000978
 8011c58:	20000df4 	.word	0x20000df4
 8011c5c:	20000dd4 	.word	0x20000dd4
 8011c60:	20000d90 	.word	0x20000d90

08011c64 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011c6a:	4b32      	ldr	r3, [pc, #200]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c6c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d058      	beq.n	8011d2c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c82:	4b2c      	ldr	r3, [pc, #176]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c84:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d004      	beq.n	8011c96 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011c8c:	4b29      	ldr	r3, [pc, #164]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c8e:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c92:	2b03      	cmp	r3, #3
 8011c94:	d104      	bne.n	8011ca0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011c96:	f002 f82d 	bl	8013cf4 <CheckRetransUnconfirmedUplink>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	71fb      	strb	r3, [r7, #7]
 8011c9e:	e020      	b.n	8011ce2 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011ca0:	4b24      	ldr	r3, [pc, #144]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ca2:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d11b      	bne.n	8011ce2 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011caa:	4b22      	ldr	r3, [pc, #136]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cac:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d014      	beq.n	8011cde <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011cb4:	f002 f84a 	bl	8013d4c <CheckRetransConfirmedUplink>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011cbc:	4b1e      	ldr	r3, [pc, #120]	; (8011d38 <LoRaMacHandleMcpsRequest+0xd4>)
 8011cbe:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10d      	bne.n	8011ce2 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011cc6:	79fb      	ldrb	r3, [r7, #7]
 8011cc8:	f083 0301 	eor.w	r3, r3, #1
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d002      	beq.n	8011cd8 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011cd2:	f002 f8cd 	bl	8013e70 <AckTimeoutRetriesProcess>
 8011cd6:	e004      	b.n	8011ce2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011cd8:	f002 f908 	bl	8013eec <AckTimeoutRetriesFinalize>
 8011cdc:	e001      	b.n	8011ce2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011ce2:	79fb      	ldrb	r3, [r7, #7]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00d      	beq.n	8011d04 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011ce8:	4814      	ldr	r0, [pc, #80]	; (8011d3c <LoRaMacHandleMcpsRequest+0xd8>)
 8011cea:	f00c fa35 	bl	801e158 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011cee:	4b11      	ldr	r3, [pc, #68]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cf0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011cf4:	f023 0320 	bic.w	r3, r3, #32
 8011cf8:	4a0e      	ldr	r2, [pc, #56]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cfa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011cfe:	f002 f847 	bl	8013d90 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011d02:	e013      	b.n	8011d2c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011d04:	79bb      	ldrb	r3, [r7, #6]
 8011d06:	f083 0301 	eor.w	r3, r3, #1
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00d      	beq.n	8011d2c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011d10:	4a08      	ldr	r2, [pc, #32]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d12:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d16:	f36f 1304 	bfc	r3, #4, #1
 8011d1a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011d1e:	4b05      	ldr	r3, [pc, #20]	; (8011d34 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d20:	2200      	movs	r2, #0
 8011d22:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8011d26:	2000      	movs	r0, #0
 8011d28:	f000 f992 	bl	8012050 <OnTxDelayedTimerEvent>
}
 8011d2c:	bf00      	nop
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	20000978 	.word	0x20000978
 8011d38:	20000e80 	.word	0x20000e80
 8011d3c:	20000ce0 	.word	0x20000ce0

08011d40 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d44:	4b1b      	ldr	r3, [pc, #108]	; (8011db4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d46:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d4a:	f003 0304 	and.w	r3, r3, #4
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d02c      	beq.n	8011dae <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011d54:	2001      	movs	r0, #1
 8011d56:	f004 faa5 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d012      	beq.n	8011d86 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011d60:	2001      	movs	r0, #1
 8011d62:	f004 fa41 	bl	80161e8 <LoRaMacConfirmQueueGetStatus>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d103      	bne.n	8011d74 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011d6c:	4b11      	ldr	r3, [pc, #68]	; (8011db4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d74:	4b0f      	ldr	r3, [pc, #60]	; (8011db4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d76:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d7a:	f023 0302 	bic.w	r3, r3, #2
 8011d7e:	4a0d      	ldr	r2, [pc, #52]	; (8011db4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d80:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011d84:	e013      	b.n	8011dae <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d86:	2006      	movs	r0, #6
 8011d88:	f004 fa8c 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d105      	bne.n	8011d9e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011d92:	2007      	movs	r0, #7
 8011d94:	f004 fa86 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8011d98:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d007      	beq.n	8011dae <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d9e:	4b05      	ldr	r3, [pc, #20]	; (8011db4 <LoRaMacHandleMlmeRequest+0x74>)
 8011da0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011da4:	f023 0302 	bic.w	r3, r3, #2
 8011da8:	4a02      	ldr	r2, [pc, #8]	; (8011db4 <LoRaMacHandleMlmeRequest+0x74>)
 8011daa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011dae:	bf00      	nop
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	20000978 	.word	0x20000978

08011db8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011dbc:	200c      	movs	r0, #12
 8011dbe:	f004 fa71 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d019      	beq.n	8011dfc <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011dc8:	4b0e      	ldr	r3, [pc, #56]	; (8011e04 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dce:	f003 0301 	and.w	r3, r3, #1
 8011dd2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d111      	bne.n	8011dfc <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011dd8:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dda:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dde:	f003 0304 	and.w	r3, r3, #4
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d009      	beq.n	8011dfc <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011de8:	4b06      	ldr	r3, [pc, #24]	; (8011e04 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dee:	f023 0302 	bic.w	r3, r3, #2
 8011df2:	4a04      	ldr	r2, [pc, #16]	; (8011e04 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011df4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e000      	b.n	8011dfe <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	20000978 	.word	0x20000978

08011e08 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011e08:	b480      	push	{r7}
 8011e0a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011e0c:	4b0d      	ldr	r3, [pc, #52]	; (8011e44 <LoRaMacCheckForRxAbort+0x3c>)
 8011e0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00f      	beq.n	8011e3a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011e1a:	4b0a      	ldr	r3, [pc, #40]	; (8011e44 <LoRaMacCheckForRxAbort+0x3c>)
 8011e1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e24:	4a07      	ldr	r2, [pc, #28]	; (8011e44 <LoRaMacCheckForRxAbort+0x3c>)
 8011e26:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e2a:	4b06      	ldr	r3, [pc, #24]	; (8011e44 <LoRaMacCheckForRxAbort+0x3c>)
 8011e2c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e30:	f023 0302 	bic.w	r3, r3, #2
 8011e34:	4a03      	ldr	r2, [pc, #12]	; (8011e44 <LoRaMacCheckForRxAbort+0x3c>)
 8011e36:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011e3a:	bf00      	nop
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bc80      	pop	{r7}
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop
 8011e44:	20000978 	.word	0x20000978

08011e48 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011e54:	2300      	movs	r3, #0
 8011e56:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011e58:	4b50      	ldr	r3, [pc, #320]	; (8011f9c <LoRaMacHandleNvm+0x154>)
 8011e5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f040 8098 	bne.w	8011f94 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2124      	movs	r1, #36	; 0x24
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f008 f82f 	bl	8019ecc <Crc32>
 8011e6e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e74:	68ba      	ldr	r2, [r7, #8]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d006      	beq.n	8011e88 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011e80:	89fb      	ldrh	r3, [r7, #14]
 8011e82:	f043 0301 	orr.w	r3, r3, #1
 8011e86:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	3328      	adds	r3, #40	; 0x28
 8011e8c:	211c      	movs	r1, #28
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f008 f81c 	bl	8019ecc <Crc32>
 8011e94:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e9a:	68ba      	ldr	r2, [r7, #8]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d006      	beq.n	8011eae <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011ea6:	89fb      	ldrh	r3, [r7, #14]
 8011ea8:	f043 0302 	orr.w	r3, r3, #2
 8011eac:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	3348      	adds	r3, #72	; 0x48
 8011eb2:	21fc      	movs	r1, #252	; 0xfc
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f008 f809 	bl	8019ecc <Crc32>
 8011eba:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011ec2:	68ba      	ldr	r2, [r7, #8]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d007      	beq.n	8011ed8 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011ed0:	89fb      	ldrh	r3, [r7, #14]
 8011ed2:	f043 0304 	orr.w	r3, r3, #4
 8011ed6:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011ede:	21d4      	movs	r1, #212	; 0xd4
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f007 fff3 	bl	8019ecc <Crc32>
 8011ee6:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011eee:	68ba      	ldr	r2, [r7, #8]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d007      	beq.n	8011f04 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011efc:	89fb      	ldrh	r3, [r7, #14]
 8011efe:	f043 0308 	orr.w	r3, r3, #8
 8011f02:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011f0a:	2190      	movs	r1, #144	; 0x90
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f007 ffdd 	bl	8019ecc <Crc32>
 8011f12:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f1a:	68ba      	ldr	r2, [r7, #8]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d007      	beq.n	8011f30 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	68ba      	ldr	r2, [r7, #8]
 8011f24:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011f28:	89fb      	ldrh	r3, [r7, #14]
 8011f2a:	f043 0310 	orr.w	r3, r3, #16
 8011f2e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011f36:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f007 ffc6 	bl	8019ecc <Crc32>
 8011f40:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011f48:	68ba      	ldr	r2, [r7, #8]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d007      	beq.n	8011f5e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	68ba      	ldr	r2, [r7, #8]
 8011f52:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011f56:	89fb      	ldrh	r3, [r7, #14]
 8011f58:	f043 0320 	orr.w	r3, r3, #32
 8011f5c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011f64:	2114      	movs	r1, #20
 8011f66:	4618      	mov	r0, r3
 8011f68:	f007 ffb0 	bl	8019ecc <Crc32>
 8011f6c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d007      	beq.n	8011f8a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011f82:	89fb      	ldrh	r3, [r7, #14]
 8011f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f88:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011f8a:	89fb      	ldrh	r3, [r7, #14]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f001 ff51 	bl	8013e34 <CallNvmDataChangeCallback>
 8011f92:	e000      	b.n	8011f96 <LoRaMacHandleNvm+0x14e>
        return;
 8011f94:	bf00      	nop
}
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	20000978 	.word	0x20000978

08011fa0 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011faa:	f7ff fd3d 	bl	8011a28 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011fae:	f003 fd1a 	bl	80159e6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011fb2:	4b25      	ldr	r3, [pc, #148]	; (8012048 <LoRaMacProcess+0xa8>)
 8011fb4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011fb8:	f003 0310 	and.w	r3, r3, #16
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d023      	beq.n	801200a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f7ff fda4 	bl	8011b10 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011fc8:	f7ff ff1e 	bl	8011e08 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011fcc:	f001 ffc2 	bl	8013f54 <IsRequestPending>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d006      	beq.n	8011fe4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011fd6:	f7ff feef 	bl	8011db8 <LoRaMacCheckForBeaconAcquisition>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	461a      	mov	r2, r3
 8011fde:	79fb      	ldrb	r3, [r7, #7]
 8011fe0:	4313      	orrs	r3, r2
 8011fe2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011fe4:	79fb      	ldrb	r3, [r7, #7]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d103      	bne.n	8011ff2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011fea:	f7ff fea9 	bl	8011d40 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011fee:	f7ff fe39 	bl	8011c64 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011ff2:	f7ff fd9d 	bl	8011b30 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011ff6:	2001      	movs	r0, #1
 8011ff8:	f7ff fd8a 	bl	8011b10 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011ffc:	4a12      	ldr	r2, [pc, #72]	; (8012048 <LoRaMacProcess+0xa8>)
 8011ffe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012002:	f043 0320 	orr.w	r3, r3, #32
 8012006:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 801200a:	f7ff fdf3 	bl	8011bf4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801200e:	4b0e      	ldr	r3, [pc, #56]	; (8012048 <LoRaMacProcess+0xa8>)
 8012010:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012014:	2b02      	cmp	r3, #2
 8012016:	d101      	bne.n	801201c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8012018:	f001 fbb8 	bl	801378c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801201c:	4b0a      	ldr	r3, [pc, #40]	; (8012048 <LoRaMacProcess+0xa8>)
 801201e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012022:	f003 0320 	and.w	r3, r3, #32
 8012026:	b2db      	uxtb	r3, r3
 8012028:	2b00      	cmp	r3, #0
 801202a:	d009      	beq.n	8012040 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801202c:	4a06      	ldr	r2, [pc, #24]	; (8012048 <LoRaMacProcess+0xa8>)
 801202e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012032:	f36f 1345 	bfc	r3, #5, #1
 8012036:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 801203a:	4804      	ldr	r0, [pc, #16]	; (801204c <LoRaMacProcess+0xac>)
 801203c:	f7ff ff04 	bl	8011e48 <LoRaMacHandleNvm>
    }
}
 8012040:	bf00      	nop
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	20000978 	.word	0x20000978
 801204c:	20000e80 	.word	0x20000e80

08012050 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012058:	4817      	ldr	r0, [pc, #92]	; (80120b8 <OnTxDelayedTimerEvent+0x68>)
 801205a:	f00c f87d 	bl	801e158 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801205e:	4b17      	ldr	r3, [pc, #92]	; (80120bc <OnTxDelayedTimerEvent+0x6c>)
 8012060:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012064:	f023 0320 	bic.w	r3, r3, #32
 8012068:	4a14      	ldr	r2, [pc, #80]	; (80120bc <OnTxDelayedTimerEvent+0x6c>)
 801206a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801206e:	2001      	movs	r0, #1
 8012070:	f001 f8e4 	bl	801323c <ScheduleTx>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d018      	beq.n	80120ac <OnTxDelayedTimerEvent+0x5c>
 801207a:	2b0b      	cmp	r3, #11
 801207c:	d016      	beq.n	80120ac <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801207e:	4b10      	ldr	r3, [pc, #64]	; (80120c0 <OnTxDelayedTimerEvent+0x70>)
 8012080:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012084:	b2da      	uxtb	r2, r3
 8012086:	4b0d      	ldr	r3, [pc, #52]	; (80120bc <OnTxDelayedTimerEvent+0x6c>)
 8012088:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801208c:	4b0b      	ldr	r3, [pc, #44]	; (80120bc <OnTxDelayedTimerEvent+0x6c>)
 801208e:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012092:	4b0a      	ldr	r3, [pc, #40]	; (80120bc <OnTxDelayedTimerEvent+0x6c>)
 8012094:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012098:	4b08      	ldr	r3, [pc, #32]	; (80120bc <OnTxDelayedTimerEvent+0x6c>)
 801209a:	2209      	movs	r2, #9
 801209c:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80120a0:	2009      	movs	r0, #9
 80120a2:	f004 f8cb 	bl	801623c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80120a6:	f001 fe73 	bl	8013d90 <StopRetransmission>
            break;
 80120aa:	e000      	b.n	80120ae <OnTxDelayedTimerEvent+0x5e>
            break;
 80120ac:	bf00      	nop
        }
    }
}
 80120ae:	bf00      	nop
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20000ce0 	.word	0x20000ce0
 80120bc:	20000978 	.word	0x20000978
 80120c0:	20000e80 	.word	0x20000e80

080120c4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80120cc:	4b14      	ldr	r3, [pc, #80]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 80120ce:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80120d2:	4b13      	ldr	r3, [pc, #76]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 80120d4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80120d8:	4b12      	ldr	r3, [pc, #72]	; (8012124 <OnRxWindow1TimerEvent+0x60>)
 80120da:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80120de:	b25a      	sxtb	r2, r3
 80120e0:	4b0f      	ldr	r3, [pc, #60]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 80120e2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120e6:	4b0f      	ldr	r3, [pc, #60]	; (8012124 <OnRxWindow1TimerEvent+0x60>)
 80120e8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80120ec:	4b0c      	ldr	r3, [pc, #48]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 80120ee:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80120f2:	4b0c      	ldr	r3, [pc, #48]	; (8012124 <OnRxWindow1TimerEvent+0x60>)
 80120f4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80120f8:	4b09      	ldr	r3, [pc, #36]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 80120fa:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80120fe:	4b08      	ldr	r3, [pc, #32]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 8012100:	2200      	movs	r2, #0
 8012102:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8012106:	4b06      	ldr	r3, [pc, #24]	; (8012120 <OnRxWindow1TimerEvent+0x5c>)
 8012108:	2200      	movs	r2, #0
 801210a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801210e:	4906      	ldr	r1, [pc, #24]	; (8012128 <OnRxWindow1TimerEvent+0x64>)
 8012110:	4806      	ldr	r0, [pc, #24]	; (801212c <OnRxWindow1TimerEvent+0x68>)
 8012112:	f001 fb07 	bl	8013724 <RxWindowSetup>
}
 8012116:	bf00      	nop
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	20000978 	.word	0x20000978
 8012124:	20000e80 	.word	0x20000e80
 8012128:	20000d30 	.word	0x20000d30
 801212c:	20000cf8 	.word	0x20000cf8

08012130 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012138:	4b16      	ldr	r3, [pc, #88]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 801213a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801213e:	2b00      	cmp	r3, #0
 8012140:	d023      	beq.n	801218a <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012142:	4b14      	ldr	r3, [pc, #80]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 8012144:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012148:	4b12      	ldr	r3, [pc, #72]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 801214a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801214e:	4b12      	ldr	r3, [pc, #72]	; (8012198 <OnRxWindow2TimerEvent+0x68>)
 8012150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012152:	4a10      	ldr	r2, [pc, #64]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 8012154:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012158:	4b0f      	ldr	r3, [pc, #60]	; (8012198 <OnRxWindow2TimerEvent+0x68>)
 801215a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801215e:	4b0d      	ldr	r3, [pc, #52]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 8012160:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012164:	4b0c      	ldr	r3, [pc, #48]	; (8012198 <OnRxWindow2TimerEvent+0x68>)
 8012166:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801216a:	4b0a      	ldr	r3, [pc, #40]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 801216c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012170:	4b08      	ldr	r3, [pc, #32]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 8012172:	2200      	movs	r2, #0
 8012174:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012178:	4b06      	ldr	r3, [pc, #24]	; (8012194 <OnRxWindow2TimerEvent+0x64>)
 801217a:	2201      	movs	r2, #1
 801217c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8012180:	4906      	ldr	r1, [pc, #24]	; (801219c <OnRxWindow2TimerEvent+0x6c>)
 8012182:	4807      	ldr	r0, [pc, #28]	; (80121a0 <OnRxWindow2TimerEvent+0x70>)
 8012184:	f001 face 	bl	8013724 <RxWindowSetup>
 8012188:	e000      	b.n	801218c <OnRxWindow2TimerEvent+0x5c>
        return;
 801218a:	bf00      	nop
}
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20000978 	.word	0x20000978
 8012198:	20000e80 	.word	0x20000e80
 801219c:	20000d44 	.word	0x20000d44
 80121a0:	20000d10 	.word	0x20000d10

080121a4 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80121ac:	480e      	ldr	r0, [pc, #56]	; (80121e8 <OnAckTimeoutTimerEvent+0x44>)
 80121ae:	f00b ffd3 	bl	801e158 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80121b2:	4b0e      	ldr	r3, [pc, #56]	; (80121ec <OnAckTimeoutTimerEvent+0x48>)
 80121b4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d003      	beq.n	80121c4 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80121bc:	4b0b      	ldr	r3, [pc, #44]	; (80121ec <OnAckTimeoutTimerEvent+0x48>)
 80121be:	2201      	movs	r2, #1
 80121c0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80121c4:	4b0a      	ldr	r3, [pc, #40]	; (80121f0 <OnAckTimeoutTimerEvent+0x4c>)
 80121c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80121ca:	2b02      	cmp	r3, #2
 80121cc:	d106      	bne.n	80121dc <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80121ce:	4a07      	ldr	r2, [pc, #28]	; (80121ec <OnAckTimeoutTimerEvent+0x48>)
 80121d0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80121d4:	f043 0310 	orr.w	r3, r3, #16
 80121d8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 80121dc:	f001 fe14 	bl	8013e08 <OnMacProcessNotify>
}
 80121e0:	bf00      	nop
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	20000d6c 	.word	0x20000d6c
 80121ec:	20000978 	.word	0x20000978
 80121f0:	20000e80 	.word	0x20000e80

080121f4 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60ba      	str	r2, [r7, #8]
 80121fc:	607b      	str	r3, [r7, #4]
 80121fe:	4603      	mov	r3, r0
 8012200:	73fb      	strb	r3, [r7, #15]
 8012202:	460b      	mov	r3, r1
 8012204:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d005      	beq.n	8012218 <GetFCntDown+0x24>
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d002      	beq.n	8012218 <GetFCntDown+0x24>
 8012212:	6a3b      	ldr	r3, [r7, #32]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d101      	bne.n	801221c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012218:	230a      	movs	r3, #10
 801221a:	e029      	b.n	8012270 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801221c:	7bfb      	ldrb	r3, [r7, #15]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d016      	beq.n	8012250 <GetFCntDown+0x5c>
 8012222:	2b01      	cmp	r3, #1
 8012224:	d118      	bne.n	8012258 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012226:	79bb      	ldrb	r3, [r7, #6]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d10d      	bne.n	8012248 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801222c:	7bbb      	ldrb	r3, [r7, #14]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <GetFCntDown+0x44>
 8012232:	7bbb      	ldrb	r3, [r7, #14]
 8012234:	2b03      	cmp	r3, #3
 8012236:	d103      	bne.n	8012240 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2202      	movs	r2, #2
 801223c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801223e:	e00d      	b.n	801225c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	2201      	movs	r2, #1
 8012244:	701a      	strb	r2, [r3, #0]
            break;
 8012246:	e009      	b.n	801225c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	2203      	movs	r2, #3
 801224c:	701a      	strb	r2, [r3, #0]
            break;
 801224e:	e005      	b.n	801225c <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	2204      	movs	r2, #4
 8012254:	701a      	strb	r2, [r3, #0]
            break;
 8012256:	e001      	b.n	801225c <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012258:	2305      	movs	r3, #5
 801225a:	e009      	b.n	8012270 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	7818      	ldrb	r0, [r3, #0]
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	89db      	ldrh	r3, [r3, #14]
 8012264:	461a      	mov	r2, r3
 8012266:	8b39      	ldrh	r1, [r7, #24]
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	f004 fc25 	bl	8016ab8 <LoRaMacCryptoGetFCntDown>
 801226e:	4603      	mov	r3, r0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012278:	b5b0      	push	{r4, r5, r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	4603      	mov	r3, r0
 8012280:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012282:	2303      	movs	r3, #3
 8012284:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012286:	4b6d      	ldr	r3, [pc, #436]	; (801243c <SwitchClass+0x1c4>)
 8012288:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801228c:	2b02      	cmp	r3, #2
 801228e:	f000 80b9 	beq.w	8012404 <SwitchClass+0x18c>
 8012292:	2b02      	cmp	r3, #2
 8012294:	f300 80cc 	bgt.w	8012430 <SwitchClass+0x1b8>
 8012298:	2b00      	cmp	r3, #0
 801229a:	d003      	beq.n	80122a4 <SwitchClass+0x2c>
 801229c:	2b01      	cmp	r3, #1
 801229e:	f000 80a3 	beq.w	80123e8 <SwitchClass+0x170>
 80122a2:	e0c5      	b.n	8012430 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80122a4:	79fb      	ldrb	r3, [r7, #7]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d109      	bne.n	80122be <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80122aa:	4b64      	ldr	r3, [pc, #400]	; (801243c <SwitchClass+0x1c4>)
 80122ac:	4a63      	ldr	r2, [pc, #396]	; (801243c <SwitchClass+0x1c4>)
 80122ae:	3374      	adds	r3, #116	; 0x74
 80122b0:	326c      	adds	r2, #108	; 0x6c
 80122b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122b6:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80122ba:	2300      	movs	r3, #0
 80122bc:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d10c      	bne.n	80122de <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80122c4:	79fb      	ldrb	r3, [r7, #7]
 80122c6:	4618      	mov	r0, r3
 80122c8:	f003 fb2f 	bl	801592a <LoRaMacClassBSwitchClass>
 80122cc:	4603      	mov	r3, r0
 80122ce:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d103      	bne.n	80122de <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80122d6:	4a59      	ldr	r2, [pc, #356]	; (801243c <SwitchClass+0x1c4>)
 80122d8:	79fb      	ldrb	r3, [r7, #7]
 80122da:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80122de:	79fb      	ldrb	r3, [r7, #7]
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	f040 80a0 	bne.w	8012426 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80122e6:	4a55      	ldr	r2, [pc, #340]	; (801243c <SwitchClass+0x1c4>)
 80122e8:	79fb      	ldrb	r3, [r7, #7]
 80122ea:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80122ee:	4a54      	ldr	r2, [pc, #336]	; (8012440 <SwitchClass+0x1c8>)
 80122f0:	4b53      	ldr	r3, [pc, #332]	; (8012440 <SwitchClass+0x1c8>)
 80122f2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80122f6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80122fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122fe:	682b      	ldr	r3, [r5, #0]
 8012300:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012302:	4b4f      	ldr	r3, [pc, #316]	; (8012440 <SwitchClass+0x1c8>)
 8012304:	2202      	movs	r2, #2
 8012306:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801230a:	2300      	movs	r3, #0
 801230c:	73bb      	strb	r3, [r7, #14]
 801230e:	e05b      	b.n	80123c8 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012310:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012314:	4949      	ldr	r1, [pc, #292]	; (801243c <SwitchClass+0x1c4>)
 8012316:	4613      	mov	r3, r2
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	4413      	add	r3, r2
 801231c:	011b      	lsls	r3, r3, #4
 801231e:	440b      	add	r3, r1
 8012320:	33e9      	adds	r3, #233	; 0xe9
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d049      	beq.n	80123bc <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012328:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801232c:	4943      	ldr	r1, [pc, #268]	; (801243c <SwitchClass+0x1c4>)
 801232e:	4613      	mov	r3, r2
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	4413      	add	r3, r2
 8012334:	011b      	lsls	r3, r3, #4
 8012336:	440b      	add	r3, r1
 8012338:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801233c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801233e:	2b02      	cmp	r3, #2
 8012340:	d13c      	bne.n	80123bc <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8012342:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012346:	493d      	ldr	r1, [pc, #244]	; (801243c <SwitchClass+0x1c4>)
 8012348:	4613      	mov	r3, r2
 801234a:	005b      	lsls	r3, r3, #1
 801234c:	4413      	add	r3, r2
 801234e:	011b      	lsls	r3, r3, #4
 8012350:	440b      	add	r3, r1
 8012352:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	4a38      	ldr	r2, [pc, #224]	; (801243c <SwitchClass+0x1c4>)
 801235a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801235c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012360:	4936      	ldr	r1, [pc, #216]	; (801243c <SwitchClass+0x1c4>)
 8012362:	4613      	mov	r3, r2
 8012364:	005b      	lsls	r3, r3, #1
 8012366:	4413      	add	r3, r2
 8012368:	011b      	lsls	r3, r3, #4
 801236a:	440b      	add	r3, r1
 801236c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012370:	f993 3000 	ldrsb.w	r3, [r3]
 8012374:	b2da      	uxtb	r2, r3
 8012376:	4b31      	ldr	r3, [pc, #196]	; (801243c <SwitchClass+0x1c4>)
 8012378:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801237c:	4b30      	ldr	r3, [pc, #192]	; (8012440 <SwitchClass+0x1c8>)
 801237e:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012382:	4b2f      	ldr	r3, [pc, #188]	; (8012440 <SwitchClass+0x1c8>)
 8012384:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012388:	4b2c      	ldr	r3, [pc, #176]	; (801243c <SwitchClass+0x1c4>)
 801238a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801238c:	4a2c      	ldr	r2, [pc, #176]	; (8012440 <SwitchClass+0x1c8>)
 801238e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012392:	4b2a      	ldr	r3, [pc, #168]	; (801243c <SwitchClass+0x1c4>)
 8012394:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012398:	4b29      	ldr	r3, [pc, #164]	; (8012440 <SwitchClass+0x1c8>)
 801239a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801239e:	4b27      	ldr	r3, [pc, #156]	; (801243c <SwitchClass+0x1c4>)
 80123a0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80123a4:	4b26      	ldr	r3, [pc, #152]	; (8012440 <SwitchClass+0x1c8>)
 80123a6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80123aa:	4b25      	ldr	r3, [pc, #148]	; (8012440 <SwitchClass+0x1c8>)
 80123ac:	2203      	movs	r2, #3
 80123ae:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80123b2:	4b23      	ldr	r3, [pc, #140]	; (8012440 <SwitchClass+0x1c8>)
 80123b4:	2201      	movs	r2, #1
 80123b6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80123ba:	e009      	b.n	80123d0 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80123bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	3301      	adds	r3, #1
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	73bb      	strb	r3, [r7, #14]
 80123c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	dd9f      	ble.n	8012310 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80123d0:	4b1b      	ldr	r3, [pc, #108]	; (8012440 <SwitchClass+0x1c8>)
 80123d2:	2200      	movs	r2, #0
 80123d4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80123d8:	4b1a      	ldr	r3, [pc, #104]	; (8012444 <SwitchClass+0x1cc>)
 80123da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123dc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80123de:	f001 f9d5 	bl	801378c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80123e2:	2300      	movs	r3, #0
 80123e4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80123e6:	e01e      	b.n	8012426 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80123e8:	79fb      	ldrb	r3, [r7, #7]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f003 fa9d 	bl	801592a <LoRaMacClassBSwitchClass>
 80123f0:	4603      	mov	r3, r0
 80123f2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d117      	bne.n	801242a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80123fa:	4a10      	ldr	r2, [pc, #64]	; (801243c <SwitchClass+0x1c4>)
 80123fc:	79fb      	ldrb	r3, [r7, #7]
 80123fe:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8012402:	e012      	b.n	801242a <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012404:	79fb      	ldrb	r3, [r7, #7]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d111      	bne.n	801242e <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801240a:	4b0d      	ldr	r3, [pc, #52]	; (8012440 <SwitchClass+0x1c8>)
 801240c:	2206      	movs	r2, #6
 801240e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012412:	4a0a      	ldr	r2, [pc, #40]	; (801243c <SwitchClass+0x1c4>)
 8012414:	79fb      	ldrb	r3, [r7, #7]
 8012416:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801241a:	4b0a      	ldr	r3, [pc, #40]	; (8012444 <SwitchClass+0x1cc>)
 801241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801241e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012420:	2300      	movs	r3, #0
 8012422:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012424:	e003      	b.n	801242e <SwitchClass+0x1b6>
            break;
 8012426:	bf00      	nop
 8012428:	e002      	b.n	8012430 <SwitchClass+0x1b8>
            break;
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <SwitchClass+0x1b8>
            break;
 801242e:	bf00      	nop
        }
    }

    return status;
 8012430:	7bfb      	ldrb	r3, [r7, #15]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bdb0      	pop	{r4, r5, r7, pc}
 801243a:	bf00      	nop
 801243c:	20000e80 	.word	0x20000e80
 8012440:	20000978 	.word	0x20000978
 8012444:	0801fa14 	.word	0x0801fa14

08012448 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	4603      	mov	r3, r0
 8012450:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012452:	4b10      	ldr	r3, [pc, #64]	; (8012494 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012454:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012458:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801245a:	79fb      	ldrb	r3, [r7, #7]
 801245c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801245e:	230d      	movs	r3, #13
 8012460:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012462:	4b0c      	ldr	r3, [pc, #48]	; (8012494 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012464:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801246c:	230e      	movs	r3, #14
 801246e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012470:	4b08      	ldr	r3, [pc, #32]	; (8012494 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012472:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012476:	f107 0210 	add.w	r2, r7, #16
 801247a:	4611      	mov	r1, r2
 801247c:	4618      	mov	r0, r3
 801247e:	f005 f9b6 	bl	80177ee <RegionGetPhyParam>
 8012482:	4603      	mov	r3, r0
 8012484:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	b2db      	uxtb	r3, r3
}
 801248a:	4618      	mov	r0, r3
 801248c:	3718      	adds	r7, #24
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
 8012492:	bf00      	nop
 8012494:	20000e80 	.word	0x20000e80

08012498 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	4603      	mov	r3, r0
 80124a0:	71fb      	strb	r3, [r7, #7]
 80124a2:	460b      	mov	r3, r1
 80124a4:	71bb      	strb	r3, [r7, #6]
 80124a6:	4613      	mov	r3, r2
 80124a8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80124aa:	2300      	movs	r3, #0
 80124ac:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80124ae:	2300      	movs	r3, #0
 80124b0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80124b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7ff ffc6 	bl	8012448 <GetMaxAppPayloadWithoutFOptsLength>
 80124bc:	4603      	mov	r3, r0
 80124be:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80124c0:	79fb      	ldrb	r3, [r7, #7]
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	797b      	ldrb	r3, [r7, #5]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	4413      	add	r3, r2
 80124ca:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80124cc:	89ba      	ldrh	r2, [r7, #12]
 80124ce:	89fb      	ldrh	r3, [r7, #14]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d804      	bhi.n	80124de <ValidatePayloadLength+0x46>
 80124d4:	89bb      	ldrh	r3, [r7, #12]
 80124d6:	2bff      	cmp	r3, #255	; 0xff
 80124d8:	d801      	bhi.n	80124de <ValidatePayloadLength+0x46>
    {
        return true;
 80124da:	2301      	movs	r3, #1
 80124dc:	e000      	b.n	80124e0 <ValidatePayloadLength+0x48>
    }
    return false;
 80124de:	2300      	movs	r3, #0
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80124e8:	b590      	push	{r4, r7, lr}
 80124ea:	b0a5      	sub	sp, #148	; 0x94
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	4608      	mov	r0, r1
 80124f2:	4611      	mov	r1, r2
 80124f4:	461a      	mov	r2, r3
 80124f6:	4603      	mov	r3, r0
 80124f8:	70fb      	strb	r3, [r7, #3]
 80124fa:	460b      	mov	r3, r1
 80124fc:	70bb      	strb	r3, [r7, #2]
 80124fe:	4613      	mov	r3, r2
 8012500:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012502:	2300      	movs	r3, #0
 8012504:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012508:	2300      	movs	r3, #0
 801250a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801250e:	2300      	movs	r3, #0
 8012510:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012514:	f000 bc6d 	b.w	8012df2 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012518:	78fb      	ldrb	r3, [r7, #3]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	4413      	add	r3, r2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	4618      	mov	r0, r3
 8012522:	f003 fce7 	bl	8015ef4 <LoRaMacCommandsGetCmdSize>
 8012526:	4603      	mov	r3, r0
 8012528:	461a      	mov	r2, r3
 801252a:	78fb      	ldrb	r3, [r7, #3]
 801252c:	441a      	add	r2, r3
 801252e:	78bb      	ldrb	r3, [r7, #2]
 8012530:	429a      	cmp	r2, r3
 8012532:	f300 8464 	bgt.w	8012dfe <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012536:	78fb      	ldrb	r3, [r7, #3]
 8012538:	1c5a      	adds	r2, r3, #1
 801253a:	70fa      	strb	r2, [r7, #3]
 801253c:	461a      	mov	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4413      	add	r3, r2
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	3b02      	subs	r3, #2
 8012546:	2b11      	cmp	r3, #17
 8012548:	f200 845b 	bhi.w	8012e02 <ProcessMacCommands+0x91a>
 801254c:	a201      	add	r2, pc, #4	; (adr r2, 8012554 <ProcessMacCommands+0x6c>)
 801254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012552:	bf00      	nop
 8012554:	0801259d 	.word	0x0801259d
 8012558:	080125df 	.word	0x080125df
 801255c:	080126fb 	.word	0x080126fb
 8012560:	08012739 	.word	0x08012739
 8012564:	08012825 	.word	0x08012825
 8012568:	08012881 	.word	0x08012881
 801256c:	0801293d 	.word	0x0801293d
 8012570:	08012993 	.word	0x08012993
 8012574:	08012a79 	.word	0x08012a79
 8012578:	08012e03 	.word	0x08012e03
 801257c:	08012e03 	.word	0x08012e03
 8012580:	08012b1d 	.word	0x08012b1d
 8012584:	08012e03 	.word	0x08012e03
 8012588:	08012e03 	.word	0x08012e03
 801258c:	08012c33 	.word	0x08012c33
 8012590:	08012c67 	.word	0x08012c67
 8012594:	08012cf7 	.word	0x08012cf7
 8012598:	08012d6d 	.word	0x08012d6d
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801259c:	2005      	movs	r0, #5
 801259e:	f003 fe81 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f000 8424 	beq.w	8012df2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80125aa:	2105      	movs	r1, #5
 80125ac:	2000      	movs	r0, #0
 80125ae:	f003 fded 	bl	801618c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80125b2:	78fb      	ldrb	r3, [r7, #3]
 80125b4:	1c5a      	adds	r2, r3, #1
 80125b6:	70fa      	strb	r2, [r7, #3]
 80125b8:	461a      	mov	r2, r3
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	4413      	add	r3, r2
 80125be:	781a      	ldrb	r2, [r3, #0]
 80125c0:	4bac      	ldr	r3, [pc, #688]	; (8012874 <ProcessMacCommands+0x38c>)
 80125c2:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80125c6:	78fb      	ldrb	r3, [r7, #3]
 80125c8:	1c5a      	adds	r2, r3, #1
 80125ca:	70fa      	strb	r2, [r7, #3]
 80125cc:	461a      	mov	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	781a      	ldrb	r2, [r3, #0]
 80125d4:	4ba7      	ldr	r3, [pc, #668]	; (8012874 <ProcessMacCommands+0x38c>)
 80125d6:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 80125da:	f000 bc0a 	b.w	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80125de:	2300      	movs	r3, #0
 80125e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80125e4:	2300      	movs	r3, #0
 80125e6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80125f0:	2300      	movs	r3, #0
 80125f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80125f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80125fa:	f083 0301 	eor.w	r3, r3, #1
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	2b00      	cmp	r3, #0
 8012602:	d078      	beq.n	80126f6 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012604:	2301      	movs	r3, #1
 8012606:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801260a:	78fb      	ldrb	r3, [r7, #3]
 801260c:	3b01      	subs	r3, #1
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	4413      	add	r3, r2
 8012612:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012614:	78ba      	ldrb	r2, [r7, #2]
 8012616:	78fb      	ldrb	r3, [r7, #3]
 8012618:	1ad3      	subs	r3, r2, r3
 801261a:	b2db      	uxtb	r3, r3
 801261c:	3301      	adds	r3, #1
 801261e:	b2db      	uxtb	r3, r3
 8012620:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012624:	4b94      	ldr	r3, [pc, #592]	; (8012878 <ProcessMacCommands+0x390>)
 8012626:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801262a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801262e:	4b92      	ldr	r3, [pc, #584]	; (8012878 <ProcessMacCommands+0x390>)
 8012630:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012634:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012638:	4b8f      	ldr	r3, [pc, #572]	; (8012878 <ProcessMacCommands+0x390>)
 801263a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801263e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012642:	4b8d      	ldr	r3, [pc, #564]	; (8012878 <ProcessMacCommands+0x390>)
 8012644:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012648:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801264c:	4b8a      	ldr	r3, [pc, #552]	; (8012878 <ProcessMacCommands+0x390>)
 801264e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012652:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012656:	4b88      	ldr	r3, [pc, #544]	; (8012878 <ProcessMacCommands+0x390>)
 8012658:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801265c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801265e:	4b86      	ldr	r3, [pc, #536]	; (8012878 <ProcessMacCommands+0x390>)
 8012660:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012664:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012668:	f107 0257 	add.w	r2, r7, #87	; 0x57
 801266c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012670:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012674:	9301      	str	r3, [sp, #4]
 8012676:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	4623      	mov	r3, r4
 801267e:	f005 f973 	bl	8017968 <RegionLinkAdrReq>
 8012682:	4603      	mov	r3, r0
 8012684:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012688:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801268c:	f003 0307 	and.w	r3, r3, #7
 8012690:	2b07      	cmp	r3, #7
 8012692:	d10e      	bne.n	80126b2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012694:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012698:	4b77      	ldr	r3, [pc, #476]	; (8012878 <ProcessMacCommands+0x390>)
 801269a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801269e:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80126a2:	4b75      	ldr	r3, [pc, #468]	; (8012878 <ProcessMacCommands+0x390>)
 80126a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80126a8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80126ac:	4b72      	ldr	r3, [pc, #456]	; (8012878 <ProcessMacCommands+0x390>)
 80126ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126b2:	2300      	movs	r3, #0
 80126b4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126b8:	e00b      	b.n	80126d2 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80126ba:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80126be:	2201      	movs	r2, #1
 80126c0:	4619      	mov	r1, r3
 80126c2:	2003      	movs	r0, #3
 80126c4:	f003 fab6 	bl	8015c34 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126c8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80126cc:	3301      	adds	r3, #1
 80126ce:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126d2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80126d6:	4a69      	ldr	r2, [pc, #420]	; (801287c <ProcessMacCommands+0x394>)
 80126d8:	fba2 2303 	umull	r2, r3, r2, r3
 80126dc:	089b      	lsrs	r3, r3, #2
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d3e8      	bcc.n	80126ba <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80126e8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80126ec:	78fb      	ldrb	r3, [r7, #3]
 80126ee:	4413      	add	r3, r2
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	3b01      	subs	r3, #1
 80126f4:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80126f6:	bf00      	nop
 80126f8:	e37b      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80126fa:	78fb      	ldrb	r3, [r7, #3]
 80126fc:	1c5a      	adds	r2, r3, #1
 80126fe:	70fa      	strb	r2, [r7, #3]
 8012700:	461a      	mov	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4413      	add	r3, r2
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	f003 030f 	and.w	r3, r3, #15
 801270c:	b2da      	uxtb	r2, r3
 801270e:	4b5a      	ldr	r3, [pc, #360]	; (8012878 <ProcessMacCommands+0x390>)
 8012710:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012714:	4b58      	ldr	r3, [pc, #352]	; (8012878 <ProcessMacCommands+0x390>)
 8012716:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801271a:	461a      	mov	r2, r3
 801271c:	2301      	movs	r3, #1
 801271e:	4093      	lsls	r3, r2
 8012720:	b29a      	uxth	r2, r3
 8012722:	4b55      	ldr	r3, [pc, #340]	; (8012878 <ProcessMacCommands+0x390>)
 8012724:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801272c:	2200      	movs	r2, #0
 801272e:	4619      	mov	r1, r3
 8012730:	2004      	movs	r0, #4
 8012732:	f003 fa7f 	bl	8015c34 <LoRaMacCommandsAddCmd>
                break;
 8012736:	e35c      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012738:	2307      	movs	r3, #7
 801273a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801273e:	78fb      	ldrb	r3, [r7, #3]
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	4413      	add	r3, r2
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	091b      	lsrs	r3, r3, #4
 8012748:	b2db      	uxtb	r3, r3
 801274a:	b25b      	sxtb	r3, r3
 801274c:	f003 0307 	and.w	r3, r3, #7
 8012750:	b25b      	sxtb	r3, r3
 8012752:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012756:	78fb      	ldrb	r3, [r7, #3]
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	4413      	add	r3, r2
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	b25b      	sxtb	r3, r3
 8012760:	f003 030f 	and.w	r3, r3, #15
 8012764:	b25b      	sxtb	r3, r3
 8012766:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801276a:	78fb      	ldrb	r3, [r7, #3]
 801276c:	3301      	adds	r3, #1
 801276e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	1c5a      	adds	r2, r3, #1
 8012774:	70fa      	strb	r2, [r7, #3]
 8012776:	461a      	mov	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4413      	add	r3, r2
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012780:	78fb      	ldrb	r3, [r7, #3]
 8012782:	1c5a      	adds	r2, r3, #1
 8012784:	70fa      	strb	r2, [r7, #3]
 8012786:	461a      	mov	r2, r3
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	4413      	add	r3, r2
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	021a      	lsls	r2, r3, #8
 8012790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012792:	4313      	orrs	r3, r2
 8012794:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012796:	78fb      	ldrb	r3, [r7, #3]
 8012798:	1c5a      	adds	r2, r3, #1
 801279a:	70fa      	strb	r2, [r7, #3]
 801279c:	461a      	mov	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4413      	add	r3, r2
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	041a      	lsls	r2, r3, #16
 80127a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127a8:	4313      	orrs	r3, r2
 80127aa:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80127ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ae:	2264      	movs	r2, #100	; 0x64
 80127b0:	fb02 f303 	mul.w	r3, r2, r3
 80127b4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80127b6:	4b30      	ldr	r3, [pc, #192]	; (8012878 <ProcessMacCommands+0x390>)
 80127b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127bc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80127c0:	4611      	mov	r1, r2
 80127c2:	4618      	mov	r0, r3
 80127c4:	f005 f8ea 	bl	801799c <RegionRxParamSetupReq>
 80127c8:	4603      	mov	r3, r0
 80127ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80127ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127d2:	f003 0307 	and.w	r3, r3, #7
 80127d6:	2b07      	cmp	r3, #7
 80127d8:	d117      	bne.n	801280a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80127da:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	4b25      	ldr	r3, [pc, #148]	; (8012878 <ProcessMacCommands+0x390>)
 80127e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80127e6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127ea:	b2da      	uxtb	r2, r3
 80127ec:	4b22      	ldr	r3, [pc, #136]	; (8012878 <ProcessMacCommands+0x390>)
 80127ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80127f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127f4:	4a20      	ldr	r2, [pc, #128]	; (8012878 <ProcessMacCommands+0x390>)
 80127f6:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80127f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127fa:	4a1f      	ldr	r2, [pc, #124]	; (8012878 <ProcessMacCommands+0x390>)
 80127fc:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80127fe:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012802:	b2da      	uxtb	r2, r3
 8012804:	4b1c      	ldr	r3, [pc, #112]	; (8012878 <ProcessMacCommands+0x390>)
 8012806:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801280a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801280e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012812:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012816:	2201      	movs	r2, #1
 8012818:	4619      	mov	r1, r3
 801281a:	2005      	movs	r0, #5
 801281c:	f003 fa0a 	bl	8015c34 <LoRaMacCommandsAddCmd>
                break;
 8012820:	bf00      	nop
 8012822:	e2e6      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012824:	23ff      	movs	r3, #255	; 0xff
 8012826:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801282a:	4b12      	ldr	r3, [pc, #72]	; (8012874 <ProcessMacCommands+0x38c>)
 801282c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00d      	beq.n	8012850 <ProcessMacCommands+0x368>
 8012834:	4b0f      	ldr	r3, [pc, #60]	; (8012874 <ProcessMacCommands+0x38c>)
 8012836:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d007      	beq.n	8012850 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012840:	4b0c      	ldr	r3, [pc, #48]	; (8012874 <ProcessMacCommands+0x38c>)
 8012842:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4798      	blx	r3
 801284a:	4603      	mov	r3, r0
 801284c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012850:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012854:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012858:	787b      	ldrb	r3, [r7, #1]
 801285a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801285e:	b2db      	uxtb	r3, r3
 8012860:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012864:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012868:	2202      	movs	r2, #2
 801286a:	4619      	mov	r1, r3
 801286c:	2006      	movs	r0, #6
 801286e:	f003 f9e1 	bl	8015c34 <LoRaMacCommandsAddCmd>
                break;
 8012872:	e2be      	b.n	8012df2 <ProcessMacCommands+0x90a>
 8012874:	20000978 	.word	0x20000978
 8012878:	20000e80 	.word	0x20000e80
 801287c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012880:	2303      	movs	r3, #3
 8012882:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012886:	78fb      	ldrb	r3, [r7, #3]
 8012888:	1c5a      	adds	r2, r3, #1
 801288a:	70fa      	strb	r2, [r7, #3]
 801288c:	461a      	mov	r2, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4413      	add	r3, r2
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	b25b      	sxtb	r3, r3
 8012896:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801289a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801289e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80128a0:	78fb      	ldrb	r3, [r7, #3]
 80128a2:	1c5a      	adds	r2, r3, #1
 80128a4:	70fa      	strb	r2, [r7, #3]
 80128a6:	461a      	mov	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4413      	add	r3, r2
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80128b0:	78fb      	ldrb	r3, [r7, #3]
 80128b2:	1c5a      	adds	r2, r3, #1
 80128b4:	70fa      	strb	r2, [r7, #3]
 80128b6:	461a      	mov	r2, r3
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4413      	add	r3, r2
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	021a      	lsls	r2, r3, #8
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	4313      	orrs	r3, r2
 80128c4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80128c6:	78fb      	ldrb	r3, [r7, #3]
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	70fa      	strb	r2, [r7, #3]
 80128cc:	461a      	mov	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	4413      	add	r3, r2
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	041a      	lsls	r2, r3, #16
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	4313      	orrs	r3, r2
 80128da:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80128dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128de:	2264      	movs	r2, #100	; 0x64
 80128e0:	fb02 f303 	mul.w	r3, r2, r3
 80128e4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80128e6:	2300      	movs	r3, #0
 80128e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80128ea:	78fb      	ldrb	r3, [r7, #3]
 80128ec:	1c5a      	adds	r2, r3, #1
 80128ee:	70fa      	strb	r2, [r7, #3]
 80128f0:	461a      	mov	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4413      	add	r3, r2
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	b25b      	sxtb	r3, r3
 80128fa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80128fe:	4b85      	ldr	r3, [pc, #532]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012900:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012904:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012908:	4611      	mov	r1, r2
 801290a:	4618      	mov	r0, r3
 801290c:	f005 f859 	bl	80179c2 <RegionNewChannelReq>
 8012910:	4603      	mov	r3, r0
 8012912:	b2db      	uxtb	r3, r3
 8012914:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012918:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801291c:	b25b      	sxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	db0a      	blt.n	8012938 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012922:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012926:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801292a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801292e:	2201      	movs	r2, #1
 8012930:	4619      	mov	r1, r3
 8012932:	2007      	movs	r0, #7
 8012934:	f003 f97e 	bl	8015c34 <LoRaMacCommandsAddCmd>
                }
                break;
 8012938:	bf00      	nop
 801293a:	e25a      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801293c:	78fb      	ldrb	r3, [r7, #3]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	70fa      	strb	r2, [r7, #3]
 8012942:	461a      	mov	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	4413      	add	r3, r2
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	f003 030f 	and.w	r3, r3, #15
 801294e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012952:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012956:	2b00      	cmp	r3, #0
 8012958:	d104      	bne.n	8012964 <ProcessMacCommands+0x47c>
                {
                    delay++;
 801295a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801295e:	3301      	adds	r3, #1
 8012960:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012964:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801296c:	fb02 f303 	mul.w	r3, r2, r3
 8012970:	461a      	mov	r2, r3
 8012972:	4b68      	ldr	r3, [pc, #416]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012974:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012976:	4b67      	ldr	r3, [pc, #412]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801297a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801297e:	4a65      	ldr	r2, [pc, #404]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012980:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012982:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012986:	2200      	movs	r2, #0
 8012988:	4619      	mov	r1, r3
 801298a:	2008      	movs	r0, #8
 801298c:	f003 f952 	bl	8015c34 <LoRaMacCommandsAddCmd>
                break;
 8012990:	e22f      	b.n	8012df2 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012992:	78fb      	ldrb	r3, [r7, #3]
 8012994:	1c5a      	adds	r2, r3, #1
 8012996:	70fa      	strb	r2, [r7, #3]
 8012998:	461a      	mov	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	4413      	add	r3, r2
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80129a4:	2300      	movs	r3, #0
 80129a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80129aa:	2300      	movs	r3, #0
 80129ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80129b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129b4:	f003 0320 	and.w	r3, r3, #32
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80129bc:	2301      	movs	r3, #1
 80129be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80129c2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129c6:	f003 0310 	and.w	r3, r3, #16
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80129ce:	2301      	movs	r3, #1
 80129d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80129d4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129d8:	f003 030f 	and.w	r3, r3, #15
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80129e2:	4b4c      	ldr	r3, [pc, #304]	; (8012b14 <ProcessMacCommands+0x62c>)
 80129e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80129ec:	4611      	mov	r1, r2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f004 fffa 	bl	80179e8 <RegionTxParamSetupReq>
 80129f4:	4603      	mov	r3, r0
 80129f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129fa:	d03b      	beq.n	8012a74 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80129fc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012a00:	4b44      	ldr	r3, [pc, #272]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012a06:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012a0a:	4b42      	ldr	r3, [pc, #264]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012a10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a14:	461a      	mov	r2, r3
 8012a16:	4b40      	ldr	r3, [pc, #256]	; (8012b18 <ProcessMacCommands+0x630>)
 8012a18:	5c9b      	ldrb	r3, [r3, r2]
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7ee f938 	bl	8000c90 <__aeabi_ui2f>
 8012a20:	4603      	mov	r3, r0
 8012a22:	4a3c      	ldr	r2, [pc, #240]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012a28:	2302      	movs	r3, #2
 8012a2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a2e:	4b39      	ldr	r3, [pc, #228]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a30:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a38:	4b36      	ldr	r3, [pc, #216]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a42:	4611      	mov	r1, r2
 8012a44:	4618      	mov	r0, r3
 8012a46:	f004 fed2 	bl	80177ee <RegionGetPhyParam>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a50:	b25a      	sxtb	r2, r3
 8012a52:	4b30      	ldr	r3, [pc, #192]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a54:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	bfb8      	it	lt
 8012a5c:	4613      	movlt	r3, r2
 8012a5e:	b25a      	sxtb	r2, r3
 8012a60:	4b2c      	ldr	r3, [pc, #176]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012a66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	2009      	movs	r0, #9
 8012a70:	f003 f8e0 	bl	8015c34 <LoRaMacCommandsAddCmd>
                }
                break;
 8012a74:	bf00      	nop
 8012a76:	e1bc      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012a78:	2303      	movs	r3, #3
 8012a7a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012a7e:	78fb      	ldrb	r3, [r7, #3]
 8012a80:	1c5a      	adds	r2, r3, #1
 8012a82:	70fa      	strb	r2, [r7, #3]
 8012a84:	461a      	mov	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	4413      	add	r3, r2
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012a90:	78fb      	ldrb	r3, [r7, #3]
 8012a92:	1c5a      	adds	r2, r3, #1
 8012a94:	70fa      	strb	r2, [r7, #3]
 8012a96:	461a      	mov	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	1c5a      	adds	r2, r3, #1
 8012aa4:	70fa      	strb	r2, [r7, #3]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	4413      	add	r3, r2
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	021a      	lsls	r2, r3, #8
 8012ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012ab6:	78fb      	ldrb	r3, [r7, #3]
 8012ab8:	1c5a      	adds	r2, r3, #1
 8012aba:	70fa      	strb	r2, [r7, #3]
 8012abc:	461a      	mov	r2, r3
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	781b      	ldrb	r3, [r3, #0]
 8012ac4:	041a      	lsls	r2, r3, #16
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ace:	2264      	movs	r2, #100	; 0x64
 8012ad0:	fb02 f303 	mul.w	r3, r2, r3
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012ad6:	4b0f      	ldr	r3, [pc, #60]	; (8012b14 <ProcessMacCommands+0x62c>)
 8012ad8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012adc:	f107 0220 	add.w	r2, r7, #32
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f004 ff93 	bl	8017a0e <RegionDlChannelReq>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012af0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012af4:	b25b      	sxtb	r3, r3
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	db0a      	blt.n	8012b10 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012afa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012afe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012b02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b06:	2201      	movs	r2, #1
 8012b08:	4619      	mov	r1, r3
 8012b0a:	200a      	movs	r0, #10
 8012b0c:	f003 f892 	bl	8015c34 <LoRaMacCommandsAddCmd>
                }
                break;
 8012b10:	bf00      	nop
 8012b12:	e16e      	b.n	8012df2 <ProcessMacCommands+0x90a>
 8012b14:	20000e80 	.word	0x20000e80
 8012b18:	0801f9cc 	.word	0x0801f9cc
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012b1c:	200a      	movs	r0, #10
 8012b1e:	f003 fbc1 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f000 8164 	beq.w	8012df2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012b2a:	210a      	movs	r1, #10
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f003 fb2d 	bl	801618c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012b32:	f107 0318 	add.w	r3, r7, #24
 8012b36:	2200      	movs	r2, #0
 8012b38:	601a      	str	r2, [r3, #0]
 8012b3a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012b3c:	f107 0310 	add.w	r3, r7, #16
 8012b40:	2200      	movs	r2, #0
 8012b42:	601a      	str	r2, [r3, #0]
 8012b44:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012b46:	f107 0308 	add.w	r3, r7, #8
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	601a      	str	r2, [r3, #0]
 8012b4e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012b50:	78fb      	ldrb	r3, [r7, #3]
 8012b52:	1c5a      	adds	r2, r3, #1
 8012b54:	70fa      	strb	r2, [r7, #3]
 8012b56:	461a      	mov	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012b60:	78fb      	ldrb	r3, [r7, #3]
 8012b62:	1c5a      	adds	r2, r3, #1
 8012b64:	70fa      	strb	r2, [r7, #3]
 8012b66:	461a      	mov	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	021a      	lsls	r2, r3, #8
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	4313      	orrs	r3, r2
 8012b74:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012b76:	78fb      	ldrb	r3, [r7, #3]
 8012b78:	1c5a      	adds	r2, r3, #1
 8012b7a:	70fa      	strb	r2, [r7, #3]
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	4413      	add	r3, r2
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	041a      	lsls	r2, r3, #16
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	4313      	orrs	r3, r2
 8012b8a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012b8c:	78fb      	ldrb	r3, [r7, #3]
 8012b8e:	1c5a      	adds	r2, r3, #1
 8012b90:	70fa      	strb	r2, [r7, #3]
 8012b92:	461a      	mov	r2, r3
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	4413      	add	r3, r2
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	061a      	lsls	r2, r3, #24
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012ba2:	78fb      	ldrb	r3, [r7, #3]
 8012ba4:	1c5a      	adds	r2, r3, #1
 8012ba6:	70fa      	strb	r2, [r7, #3]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4413      	add	r3, r2
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	b21b      	sxth	r3, r3
 8012bb2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012bb4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012bb8:	461a      	mov	r2, r3
 8012bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bbe:	fb02 f303 	mul.w	r3, r2, r3
 8012bc2:	121b      	asrs	r3, r3, #8
 8012bc4:	b21b      	sxth	r3, r3
 8012bc6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012bc8:	f107 0310 	add.w	r3, r7, #16
 8012bcc:	f107 0218 	add.w	r2, r7, #24
 8012bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bd4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	4b8c      	ldr	r3, [pc, #560]	; (8012e0c <ProcessMacCommands+0x924>)
 8012bdc:	4413      	add	r3, r2
 8012bde:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012be0:	f107 0308 	add.w	r3, r7, #8
 8012be4:	4618      	mov	r0, r3
 8012be6:	f00a fd4f 	bl	801d688 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012bea:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012bee:	4b88      	ldr	r3, [pc, #544]	; (8012e10 <ProcessMacCommands+0x928>)
 8012bf0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012bf4:	9200      	str	r2, [sp, #0]
 8012bf6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012bfa:	f107 0210 	add.w	r2, r7, #16
 8012bfe:	ca06      	ldmia	r2, {r1, r2}
 8012c00:	f00a fcdb 	bl	801d5ba <SysTimeSub>
 8012c04:	f107 0010 	add.w	r0, r7, #16
 8012c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c0a:	9300      	str	r3, [sp, #0]
 8012c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c0e:	f107 0208 	add.w	r2, r7, #8
 8012c12:	ca06      	ldmia	r2, {r1, r2}
 8012c14:	f00a fc98 	bl	801d548 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012c18:	f107 0310 	add.w	r3, r7, #16
 8012c1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012c20:	f00a fd04 	bl	801d62c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012c24:	f002 febf 	bl	80159a6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012c28:	4b79      	ldr	r3, [pc, #484]	; (8012e10 <ProcessMacCommands+0x928>)
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012c30:	e0df      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012c32:	200d      	movs	r0, #13
 8012c34:	f003 fb36 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f000 80d9 	beq.w	8012df2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012c40:	210d      	movs	r1, #13
 8012c42:	2000      	movs	r0, #0
 8012c44:	f003 faa2 	bl	801618c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012c48:	4b71      	ldr	r3, [pc, #452]	; (8012e10 <ProcessMacCommands+0x928>)
 8012c4a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c4e:	2b04      	cmp	r3, #4
 8012c50:	f000 80cf 	beq.w	8012df2 <ProcessMacCommands+0x90a>
 8012c54:	4b6e      	ldr	r3, [pc, #440]	; (8012e10 <ProcessMacCommands+0x928>)
 8012c56:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c5a:	2b05      	cmp	r3, #5
 8012c5c:	f000 80c9 	beq.w	8012df2 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012c60:	f002 fe82 	bl	8015968 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012c64:	e0c5      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012c66:	2303      	movs	r3, #3
 8012c68:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012c70:	78fb      	ldrb	r3, [r7, #3]
 8012c72:	1c5a      	adds	r2, r3, #1
 8012c74:	70fa      	strb	r2, [r7, #3]
 8012c76:	461a      	mov	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012c80:	78fb      	ldrb	r3, [r7, #3]
 8012c82:	1c5a      	adds	r2, r3, #1
 8012c84:	70fa      	strb	r2, [r7, #3]
 8012c86:	461a      	mov	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4413      	add	r3, r2
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	021b      	lsls	r3, r3, #8
 8012c90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c92:	4313      	orrs	r3, r2
 8012c94:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c96:	78fb      	ldrb	r3, [r7, #3]
 8012c98:	1c5a      	adds	r2, r3, #1
 8012c9a:	70fa      	strb	r2, [r7, #3]
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	041b      	lsls	r3, r3, #16
 8012ca6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cae:	2264      	movs	r2, #100	; 0x64
 8012cb0:	fb02 f303 	mul.w	r3, r2, r3
 8012cb4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012cb6:	78fb      	ldrb	r3, [r7, #3]
 8012cb8:	1c5a      	adds	r2, r3, #1
 8012cba:	70fa      	strb	r2, [r7, #3]
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	f003 030f 	and.w	r3, r3, #15
 8012cc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012ccc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012cd0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f002 fe4e 	bl	8015974 <LoRaMacClassBPingSlotChannelReq>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012cde:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012ce2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012ce6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cea:	2201      	movs	r2, #1
 8012cec:	4619      	mov	r1, r3
 8012cee:	2011      	movs	r0, #17
 8012cf0:	f002 ffa0 	bl	8015c34 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012cf4:	e07d      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012cf6:	200e      	movs	r0, #14
 8012cf8:	f003 fad4 	bl	80162a4 <LoRaMacConfirmQueueIsCmdActive>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d077      	beq.n	8012df2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012d02:	210e      	movs	r1, #14
 8012d04:	2000      	movs	r0, #0
 8012d06:	f003 fa41 	bl	801618c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012d10:	2300      	movs	r3, #0
 8012d12:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012d16:	78fb      	ldrb	r3, [r7, #3]
 8012d18:	1c5a      	adds	r2, r3, #1
 8012d1a:	70fa      	strb	r2, [r7, #3]
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4413      	add	r3, r2
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012d28:	78fb      	ldrb	r3, [r7, #3]
 8012d2a:	1c5a      	adds	r2, r3, #1
 8012d2c:	70fa      	strb	r2, [r7, #3]
 8012d2e:	461a      	mov	r2, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	4413      	add	r3, r2
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	021b      	lsls	r3, r3, #8
 8012d38:	b21a      	sxth	r2, r3
 8012d3a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	b21b      	sxth	r3, r3
 8012d42:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012d46:	78fb      	ldrb	r3, [r7, #3]
 8012d48:	1c5a      	adds	r2, r3, #1
 8012d4a:	70fa      	strb	r2, [r7, #3]
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4413      	add	r3, r2
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012d58:	4b2e      	ldr	r3, [pc, #184]	; (8012e14 <ProcessMacCommands+0x92c>)
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012d60:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012d64:	4618      	mov	r0, r3
 8012d66:	f002 fe11 	bl	801598c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012d6a:	e042      	b.n	8012df2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012d72:	78fb      	ldrb	r3, [r7, #3]
 8012d74:	1c5a      	adds	r2, r3, #1
 8012d76:	70fa      	strb	r2, [r7, #3]
 8012d78:	461a      	mov	r2, r3
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012d84:	78fb      	ldrb	r3, [r7, #3]
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	70fa      	strb	r2, [r7, #3]
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	4413      	add	r3, r2
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	021b      	lsls	r3, r3, #8
 8012d94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012d9e:	78fb      	ldrb	r3, [r7, #3]
 8012da0:	1c5a      	adds	r2, r3, #1
 8012da2:	70fa      	strb	r2, [r7, #3]
 8012da4:	461a      	mov	r2, r3
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4413      	add	r3, r2
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	041b      	lsls	r3, r3, #16
 8012dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012db2:	4313      	orrs	r3, r2
 8012db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012dbc:	2264      	movs	r2, #100	; 0x64
 8012dbe:	fb02 f303 	mul.w	r3, r2, r3
 8012dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012dc6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012dca:	f002 fdf2 	bl	80159b2 <LoRaMacClassBBeaconFreqReq>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d003      	beq.n	8012ddc <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012dda:	e002      	b.n	8012de2 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012de2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012de6:	2201      	movs	r2, #1
 8012de8:	4619      	mov	r1, r3
 8012dea:	2013      	movs	r0, #19
 8012dec:	f002 ff22 	bl	8015c34 <LoRaMacCommandsAddCmd>
                }
                break;
 8012df0:	bf00      	nop
    while( macIndex < commandsSize )
 8012df2:	78fa      	ldrb	r2, [r7, #3]
 8012df4:	78bb      	ldrb	r3, [r7, #2]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	f4ff ab8e 	bcc.w	8012518 <ProcessMacCommands+0x30>
 8012dfc:	e002      	b.n	8012e04 <ProcessMacCommands+0x91c>
            return;
 8012dfe:	bf00      	nop
 8012e00:	e000      	b.n	8012e04 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012e02:	bf00      	nop
        }
    }
}
 8012e04:	378c      	adds	r7, #140	; 0x8c
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd90      	pop	{r4, r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	12d53d80 	.word	0x12d53d80
 8012e10:	20000978 	.word	0x20000978
 8012e14:	200015f0 	.word	0x200015f0

08012e18 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b08e      	sub	sp, #56	; 0x38
 8012e1c:	af02      	add	r7, sp, #8
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	607a      	str	r2, [r7, #4]
 8012e22:	461a      	mov	r2, r3
 8012e24:	460b      	mov	r3, r1
 8012e26:	72fb      	strb	r3, [r7, #11]
 8012e28:	4613      	mov	r3, r2
 8012e2a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e32:	4b65      	ldr	r3, [pc, #404]	; (8012fc8 <Send+0x1b0>)
 8012e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012e38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e3c:	4b62      	ldr	r3, [pc, #392]	; (8012fc8 <Send+0x1b0>)
 8012e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012e46:	4b60      	ldr	r3, [pc, #384]	; (8012fc8 <Send+0x1b0>)
 8012e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e4c:	4b5e      	ldr	r3, [pc, #376]	; (8012fc8 <Send+0x1b0>)
 8012e4e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d101      	bne.n	8012e5a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012e56:	2307      	movs	r3, #7
 8012e58:	e0b1      	b.n	8012fbe <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012e5a:	4b5b      	ldr	r3, [pc, #364]	; (8012fc8 <Send+0x1b0>)
 8012e5c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d102      	bne.n	8012e6a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012e64:	4b58      	ldr	r3, [pc, #352]	; (8012fc8 <Send+0x1b0>)
 8012e66:	2200      	movs	r2, #0
 8012e68:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012e70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e74:	f36f 0303 	bfc	r3, #0, #4
 8012e78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012e7c:	4b52      	ldr	r3, [pc, #328]	; (8012fc8 <Send+0x1b0>)
 8012e7e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012e82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e86:	f362 13c7 	bfi	r3, r2, #7, #1
 8012e8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e8e:	4b4e      	ldr	r3, [pc, #312]	; (8012fc8 <Send+0x1b0>)
 8012e90:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e94:	2b01      	cmp	r3, #1
 8012e96:	d106      	bne.n	8012ea6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012e98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e9c:	f043 0310 	orr.w	r3, r3, #16
 8012ea0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012ea4:	e005      	b.n	8012eb2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eaa:	f36f 1304 	bfc	r3, #4, #1
 8012eae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012eb2:	4b45      	ldr	r3, [pc, #276]	; (8012fc8 <Send+0x1b0>)
 8012eb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d005      	beq.n	8012ec8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ec0:	f043 0320 	orr.w	r3, r3, #32
 8012ec4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012ec8:	2301      	movs	r3, #1
 8012eca:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012ecc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ed0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	bf14      	ite	ne
 8012eda:	2301      	movne	r3, #1
 8012edc:	2300      	moveq	r3, #0
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012ee2:	4b39      	ldr	r3, [pc, #228]	; (8012fc8 <Send+0x1b0>)
 8012ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ee6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012ee8:	4b37      	ldr	r3, [pc, #220]	; (8012fc8 <Send+0x1b0>)
 8012eea:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012eee:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012ef0:	4b35      	ldr	r3, [pc, #212]	; (8012fc8 <Send+0x1b0>)
 8012ef2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012ef6:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012ef8:	4b33      	ldr	r3, [pc, #204]	; (8012fc8 <Send+0x1b0>)
 8012efa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012efe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012f02:	4b31      	ldr	r3, [pc, #196]	; (8012fc8 <Send+0x1b0>)
 8012f04:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012f08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f0c:	4b2e      	ldr	r3, [pc, #184]	; (8012fc8 <Send+0x1b0>)
 8012f0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012f16:	4b2c      	ldr	r3, [pc, #176]	; (8012fc8 <Send+0x1b0>)
 8012f18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012f20:	4b29      	ldr	r3, [pc, #164]	; (8012fc8 <Send+0x1b0>)
 8012f22:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012f26:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f2c:	f107 0014 	add.w	r0, r7, #20
 8012f30:	4a26      	ldr	r2, [pc, #152]	; (8012fcc <Send+0x1b4>)
 8012f32:	4927      	ldr	r1, [pc, #156]	; (8012fd0 <Send+0x1b8>)
 8012f34:	f002 fc58 	bl	80157e8 <LoRaMacAdrCalcNext>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012f40:	f362 1386 	bfi	r3, r2, #6, #1
 8012f44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012f48:	7afa      	ldrb	r2, [r7, #11]
 8012f4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012f4e:	893b      	ldrh	r3, [r7, #8]
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	68f8      	ldr	r0, [r7, #12]
 8012f56:	f000 fc5d 	bl	8013814 <PrepareFrame>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d003      	beq.n	8012f70 <Send+0x158>
 8012f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f6c:	2b0a      	cmp	r3, #10
 8012f6e:	d107      	bne.n	8012f80 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012f70:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 f961 	bl	801323c <ScheduleTx>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d00a      	beq.n	8012f9e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012f88:	4a0f      	ldr	r2, [pc, #60]	; (8012fc8 <Send+0x1b0>)
 8012f8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012f8e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012f92:	4a0d      	ldr	r2, [pc, #52]	; (8012fc8 <Send+0x1b0>)
 8012f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f98:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012f9c:	e00d      	b.n	8012fba <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012f9e:	4b0a      	ldr	r3, [pc, #40]	; (8012fc8 <Send+0x1b0>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa8:	4a07      	ldr	r2, [pc, #28]	; (8012fc8 <Send+0x1b0>)
 8012faa:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012fac:	f002 fee8 	bl	8015d80 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012fb6:	2313      	movs	r3, #19
 8012fb8:	e001      	b.n	8012fbe <Send+0x1a6>
        }
    }
    return status;
 8012fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3730      	adds	r7, #48	; 0x30
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	20000e80 	.word	0x20000e80
 8012fcc:	20000eb8 	.word	0x20000eb8
 8012fd0:	20000eb9 	.word	0x20000eb9

08012fd4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012fea:	79fb      	ldrb	r3, [r7, #7]
 8012fec:	2bff      	cmp	r3, #255	; 0xff
 8012fee:	d11f      	bne.n	8013030 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	f7ff f941 	bl	8012278 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012ff6:	4b15      	ldr	r3, [pc, #84]	; (801304c <SendReJoinReq+0x78>)
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012ffe:	4b13      	ldr	r3, [pc, #76]	; (801304c <SendReJoinReq+0x78>)
 8013000:	4a13      	ldr	r2, [pc, #76]	; (8013050 <SendReJoinReq+0x7c>)
 8013002:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013006:	4b11      	ldr	r3, [pc, #68]	; (801304c <SendReJoinReq+0x78>)
 8013008:	22ff      	movs	r2, #255	; 0xff
 801300a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801300e:	7b3b      	ldrb	r3, [r7, #12]
 8013010:	f36f 1347 	bfc	r3, #5, #3
 8013014:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8013016:	7b3a      	ldrb	r2, [r7, #12]
 8013018:	4b0c      	ldr	r3, [pc, #48]	; (801304c <SendReJoinReq+0x78>)
 801301a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801301e:	480d      	ldr	r0, [pc, #52]	; (8013054 <SendReJoinReq+0x80>)
 8013020:	f7fc fb1c 	bl	800f65c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8013024:	480c      	ldr	r0, [pc, #48]	; (8013058 <SendReJoinReq+0x84>)
 8013026:	f7fc fae9 	bl	800f5fc <SecureElementGetDevEui>

            allowDelayedTx = false;
 801302a:	2300      	movs	r3, #0
 801302c:	73fb      	strb	r3, [r7, #15]

            break;
 801302e:	e002      	b.n	8013036 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013030:	2302      	movs	r3, #2
 8013032:	73bb      	strb	r3, [r7, #14]
            break;
 8013034:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013036:	7bfb      	ldrb	r3, [r7, #15]
 8013038:	4618      	mov	r0, r3
 801303a:	f000 f8ff 	bl	801323c <ScheduleTx>
 801303e:	4603      	mov	r3, r0
 8013040:	73bb      	strb	r3, [r7, #14]
    return status;
 8013042:	7bbb      	ldrb	r3, [r7, #14]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	20000978 	.word	0x20000978
 8013050:	2000097a 	.word	0x2000097a
 8013054:	20000a86 	.word	0x20000a86
 8013058:	20000a8e 	.word	0x20000a8e

0801305c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013060:	f002 fc31 	bl	80158c6 <LoRaMacClassBIsBeaconExpected>
 8013064:	4603      	mov	r3, r0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d001      	beq.n	801306e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801306a:	230e      	movs	r3, #14
 801306c:	e013      	b.n	8013096 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801306e:	4b0b      	ldr	r3, [pc, #44]	; (801309c <CheckForClassBCollision+0x40>)
 8013070:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013074:	2b01      	cmp	r3, #1
 8013076:	d10d      	bne.n	8013094 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013078:	f002 fc2c 	bl	80158d4 <LoRaMacClassBIsPingExpected>
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	d001      	beq.n	8013086 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013082:	230f      	movs	r3, #15
 8013084:	e007      	b.n	8013096 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013086:	f002 fc2c 	bl	80158e2 <LoRaMacClassBIsMulticastExpected>
 801308a:	4603      	mov	r3, r0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d001      	beq.n	8013094 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013090:	230f      	movs	r3, #15
 8013092:	e000      	b.n	8013096 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	20000e80 	.word	0x20000e80

080130a0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80130a0:	b590      	push	{r4, r7, lr}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130a6:	4b2d      	ldr	r3, [pc, #180]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130a8:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130ac:	4b2b      	ldr	r3, [pc, #172]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130ae:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80130b2:	4b2a      	ldr	r3, [pc, #168]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130b4:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80130b8:	4b28      	ldr	r3, [pc, #160]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130ba:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80130be:	4b27      	ldr	r3, [pc, #156]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130c4:	b25b      	sxtb	r3, r3
 80130c6:	f004 fcf9 	bl	8017abc <RegionApplyDrOffset>
 80130ca:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130cc:	b259      	sxtb	r1, r3
 80130ce:	4b23      	ldr	r3, [pc, #140]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130d0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130d4:	4b21      	ldr	r3, [pc, #132]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130d8:	4821      	ldr	r0, [pc, #132]	; (8013160 <ComputeRxWindowParameters+0xc0>)
 80130da:	9000      	str	r0, [sp, #0]
 80130dc:	4620      	mov	r0, r4
 80130de:	f004 fbfd 	bl	80178dc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130e2:	4b1e      	ldr	r3, [pc, #120]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130e4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80130e8:	4b1c      	ldr	r3, [pc, #112]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130ee:	b259      	sxtb	r1, r3
 80130f0:	4b1a      	ldr	r3, [pc, #104]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130f2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130f6:	4b19      	ldr	r3, [pc, #100]	; (801315c <ComputeRxWindowParameters+0xbc>)
 80130f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130fa:	4c1a      	ldr	r4, [pc, #104]	; (8013164 <ComputeRxWindowParameters+0xc4>)
 80130fc:	9400      	str	r4, [sp, #0]
 80130fe:	f004 fbed 	bl	80178dc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013102:	4b16      	ldr	r3, [pc, #88]	; (801315c <ComputeRxWindowParameters+0xbc>)
 8013104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013106:	4a18      	ldr	r2, [pc, #96]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013108:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801310c:	4413      	add	r3, r2
 801310e:	4a16      	ldr	r2, [pc, #88]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013110:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013114:	4b11      	ldr	r3, [pc, #68]	; (801315c <ComputeRxWindowParameters+0xbc>)
 8013116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013118:	4a13      	ldr	r2, [pc, #76]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 801311a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801311e:	4413      	add	r3, r2
 8013120:	4a11      	ldr	r2, [pc, #68]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013122:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8013126:	4b10      	ldr	r3, [pc, #64]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013128:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801312c:	2b04      	cmp	r3, #4
 801312e:	d011      	beq.n	8013154 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013130:	4b0a      	ldr	r3, [pc, #40]	; (801315c <ComputeRxWindowParameters+0xbc>)
 8013132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013134:	4a0c      	ldr	r2, [pc, #48]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013136:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801313a:	4413      	add	r3, r2
 801313c:	4a0a      	ldr	r2, [pc, #40]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 801313e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013142:	4b06      	ldr	r3, [pc, #24]	; (801315c <ComputeRxWindowParameters+0xbc>)
 8013144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013146:	4a08      	ldr	r2, [pc, #32]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013148:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801314c:	4413      	add	r3, r2
 801314e:	4a06      	ldr	r2, [pc, #24]	; (8013168 <ComputeRxWindowParameters+0xc8>)
 8013150:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013154:	bf00      	nop
 8013156:	3704      	adds	r7, #4
 8013158:	46bd      	mov	sp, r7
 801315a:	bd90      	pop	{r4, r7, pc}
 801315c:	20000e80 	.word	0x20000e80
 8013160:	20000d30 	.word	0x20000d30
 8013164:	20000d44 	.word	0x20000d44
 8013168:	20000978 	.word	0x20000978

0801316c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013176:	4b13      	ldr	r3, [pc, #76]	; (80131c4 <VerifyTxFrame+0x58>)
 8013178:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801317c:	2b00      	cmp	r3, #0
 801317e:	d01b      	beq.n	80131b8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013180:	1d3b      	adds	r3, r7, #4
 8013182:	4618      	mov	r0, r3
 8013184:	f002 fe4c 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d001      	beq.n	8013192 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801318e:	2313      	movs	r3, #19
 8013190:	e013      	b.n	80131ba <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013192:	4b0d      	ldr	r3, [pc, #52]	; (80131c8 <VerifyTxFrame+0x5c>)
 8013194:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013198:	4a0a      	ldr	r2, [pc, #40]	; (80131c4 <VerifyTxFrame+0x58>)
 801319a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	b2d2      	uxtb	r2, r2
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7ff f978 	bl	8012498 <ValidatePayloadLength>
 80131a8:	4603      	mov	r3, r0
 80131aa:	f083 0301 	eor.w	r3, r3, #1
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d001      	beq.n	80131b8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80131b4:	2308      	movs	r3, #8
 80131b6:	e000      	b.n	80131ba <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80131b8:	2300      	movs	r3, #0
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20000e80 	.word	0x20000e80
 80131c8:	20000978 	.word	0x20000978

080131cc <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80131d2:	4b18      	ldr	r3, [pc, #96]	; (8013234 <SerializeTxFrame+0x68>)
 80131d4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d002      	beq.n	80131e2 <SerializeTxFrame+0x16>
 80131dc:	2b04      	cmp	r3, #4
 80131de:	d011      	beq.n	8013204 <SerializeTxFrame+0x38>
 80131e0:	e021      	b.n	8013226 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80131e2:	4815      	ldr	r0, [pc, #84]	; (8013238 <SerializeTxFrame+0x6c>)
 80131e4:	f004 f97a 	bl	80174dc <LoRaMacSerializerJoinRequest>
 80131e8:	4603      	mov	r3, r0
 80131ea:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80131ec:	79fb      	ldrb	r3, [r7, #7]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80131f2:	2311      	movs	r3, #17
 80131f4:	e01a      	b.n	801322c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80131f6:	4b0f      	ldr	r3, [pc, #60]	; (8013234 <SerializeTxFrame+0x68>)
 80131f8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	4b0d      	ldr	r3, [pc, #52]	; (8013234 <SerializeTxFrame+0x68>)
 8013200:	801a      	strh	r2, [r3, #0]
            break;
 8013202:	e012      	b.n	801322a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013204:	480c      	ldr	r0, [pc, #48]	; (8013238 <SerializeTxFrame+0x6c>)
 8013206:	f004 f9eb 	bl	80175e0 <LoRaMacSerializerData>
 801320a:	4603      	mov	r3, r0
 801320c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801320e:	79fb      	ldrb	r3, [r7, #7]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013214:	2311      	movs	r3, #17
 8013216:	e009      	b.n	801322c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013218:	4b06      	ldr	r3, [pc, #24]	; (8013234 <SerializeTxFrame+0x68>)
 801321a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801321e:	b29a      	uxth	r2, r3
 8013220:	4b04      	ldr	r3, [pc, #16]	; (8013234 <SerializeTxFrame+0x68>)
 8013222:	801a      	strh	r2, [r3, #0]
            break;
 8013224:	e001      	b.n	801322a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013226:	2303      	movs	r3, #3
 8013228:	e000      	b.n	801322c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}
 8013234:	20000978 	.word	0x20000978
 8013238:	20000a80 	.word	0x20000a80

0801323c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b090      	sub	sp, #64	; 0x40
 8013240:	af02      	add	r7, sp, #8
 8013242:	4603      	mov	r3, r0
 8013244:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013246:	2303      	movs	r3, #3
 8013248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801324c:	f7ff ff06 	bl	801305c <CheckForClassBCollision>
 8013250:	4603      	mov	r3, r0
 8013252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <ScheduleTx+0x28>
    {
        return status;
 801325e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013262:	e092      	b.n	801338a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013264:	f000 f8fe 	bl	8013464 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013268:	f7ff ffb0 	bl	80131cc <SerializeTxFrame>
 801326c:	4603      	mov	r3, r0
 801326e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013276:	2b00      	cmp	r3, #0
 8013278:	d002      	beq.n	8013280 <ScheduleTx+0x44>
    {
        return status;
 801327a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801327e:	e084      	b.n	801338a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013280:	4b44      	ldr	r3, [pc, #272]	; (8013394 <ScheduleTx+0x158>)
 8013282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013284:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013286:	4b43      	ldr	r3, [pc, #268]	; (8013394 <ScheduleTx+0x158>)
 8013288:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801328c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801328e:	4b41      	ldr	r3, [pc, #260]	; (8013394 <ScheduleTx+0x158>)
 8013290:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013294:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801329a:	4618      	mov	r0, r3
 801329c:	f00a fa2c 	bl	801d6f8 <SysTimeGetMcuTime>
 80132a0:	4638      	mov	r0, r7
 80132a2:	4b3c      	ldr	r3, [pc, #240]	; (8013394 <ScheduleTx+0x158>)
 80132a4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80132a8:	9200      	str	r2, [sp, #0]
 80132aa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80132ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80132b2:	ca06      	ldmia	r2, {r1, r2}
 80132b4:	f00a f981 	bl	801d5ba <SysTimeSub>
 80132b8:	f107 0320 	add.w	r3, r7, #32
 80132bc:	463a      	mov	r2, r7
 80132be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132c2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80132c6:	4b33      	ldr	r3, [pc, #204]	; (8013394 <ScheduleTx+0x158>)
 80132c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ca:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80132cc:	2300      	movs	r3, #0
 80132ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80132d2:	2301      	movs	r3, #1
 80132d4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80132d6:	4b30      	ldr	r3, [pc, #192]	; (8013398 <ScheduleTx+0x15c>)
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80132dc:	4b2d      	ldr	r3, [pc, #180]	; (8013394 <ScheduleTx+0x158>)
 80132de:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d104      	bne.n	80132f0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80132e6:	2301      	movs	r3, #1
 80132e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80132ec:	2300      	movs	r3, #0
 80132ee:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80132f0:	4b28      	ldr	r3, [pc, #160]	; (8013394 <ScheduleTx+0x158>)
 80132f2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80132f6:	f107 0114 	add.w	r1, r7, #20
 80132fa:	4b28      	ldr	r3, [pc, #160]	; (801339c <ScheduleTx+0x160>)
 80132fc:	9300      	str	r3, [sp, #0]
 80132fe:	4b28      	ldr	r3, [pc, #160]	; (80133a0 <ScheduleTx+0x164>)
 8013300:	4a28      	ldr	r2, [pc, #160]	; (80133a4 <ScheduleTx+0x168>)
 8013302:	f004 fbb1 	bl	8017a68 <RegionNextChannel>
 8013306:	4603      	mov	r3, r0
 8013308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 801330c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013310:	2b00      	cmp	r3, #0
 8013312:	d025      	beq.n	8013360 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013318:	2b0b      	cmp	r3, #11
 801331a:	d11e      	bne.n	801335a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 801331c:	4b1e      	ldr	r3, [pc, #120]	; (8013398 <ScheduleTx+0x15c>)
 801331e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013322:	2b00      	cmp	r3, #0
 8013324:	d01c      	beq.n	8013360 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8013326:	7bfb      	ldrb	r3, [r7, #15]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d013      	beq.n	8013354 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801332c:	4b1a      	ldr	r3, [pc, #104]	; (8013398 <ScheduleTx+0x15c>)
 801332e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013332:	f043 0320 	orr.w	r3, r3, #32
 8013336:	4a18      	ldr	r2, [pc, #96]	; (8013398 <ScheduleTx+0x15c>)
 8013338:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 801333c:	4b16      	ldr	r3, [pc, #88]	; (8013398 <ScheduleTx+0x15c>)
 801333e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013342:	4619      	mov	r1, r3
 8013344:	4818      	ldr	r0, [pc, #96]	; (80133a8 <ScheduleTx+0x16c>)
 8013346:	f00a ff77 	bl	801e238 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801334a:	4817      	ldr	r0, [pc, #92]	; (80133a8 <ScheduleTx+0x16c>)
 801334c:	f00a fe96 	bl	801e07c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8013350:	2300      	movs	r3, #0
 8013352:	e01a      	b.n	801338a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8013354:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013358:	e017      	b.n	801338a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801335a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801335e:	e014      	b.n	801338a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013360:	f7ff fe9e 	bl	80130a0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013364:	f7ff ff02 	bl	801316c <VerifyTxFrame>
 8013368:	4603      	mov	r3, r0
 801336a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801336e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013372:	2b00      	cmp	r3, #0
 8013374:	d002      	beq.n	801337c <ScheduleTx+0x140>
    {
        return status;
 8013376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801337a:	e006      	b.n	801338a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801337c:	4b06      	ldr	r3, [pc, #24]	; (8013398 <ScheduleTx+0x15c>)
 801337e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013382:	4618      	mov	r0, r3
 8013384:	f000 fb62 	bl	8013a4c <SendFrameOnChannel>
 8013388:	4603      	mov	r3, r0
}
 801338a:	4618      	mov	r0, r3
 801338c:	3738      	adds	r7, #56	; 0x38
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	20000e80 	.word	0x20000e80
 8013398:	20000978 	.word	0x20000978
 801339c:	20000eb0 	.word	0x20000eb0
 80133a0:	20000dfc 	.word	0x20000dfc
 80133a4:	20000d89 	.word	0x20000d89
 80133a8:	20000ce0 	.word	0x20000ce0

080133ac <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b084      	sub	sp, #16
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	4603      	mov	r3, r0
 80133b4:	460a      	mov	r2, r1
 80133b6:	71fb      	strb	r3, [r7, #7]
 80133b8:	4613      	mov	r3, r2
 80133ba:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133bc:	2313      	movs	r3, #19
 80133be:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80133c4:	4b25      	ldr	r3, [pc, #148]	; (801345c <SecureFrame+0xb0>)
 80133c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d002      	beq.n	80133d4 <SecureFrame+0x28>
 80133ce:	2b04      	cmp	r3, #4
 80133d0:	d011      	beq.n	80133f6 <SecureFrame+0x4a>
 80133d2:	e03b      	b.n	801344c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133d4:	4822      	ldr	r0, [pc, #136]	; (8013460 <SecureFrame+0xb4>)
 80133d6:	f003 fc47 	bl	8016c68 <LoRaMacCryptoPrepareJoinRequest>
 80133da:	4603      	mov	r3, r0
 80133dc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80133de:	7bfb      	ldrb	r3, [r7, #15]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d001      	beq.n	80133e8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133e4:	2311      	movs	r3, #17
 80133e6:	e034      	b.n	8013452 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80133e8:	4b1c      	ldr	r3, [pc, #112]	; (801345c <SecureFrame+0xb0>)
 80133ea:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	4b1a      	ldr	r3, [pc, #104]	; (801345c <SecureFrame+0xb0>)
 80133f2:	801a      	strh	r2, [r3, #0]
            break;
 80133f4:	e02c      	b.n	8013450 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80133f6:	f107 0308 	add.w	r3, r7, #8
 80133fa:	4618      	mov	r0, r3
 80133fc:	f003 fb44 	bl	8016a88 <LoRaMacCryptoGetFCntUp>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d001      	beq.n	801340a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013406:	2312      	movs	r3, #18
 8013408:	e023      	b.n	8013452 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 801340a:	4b14      	ldr	r3, [pc, #80]	; (801345c <SecureFrame+0xb0>)
 801340c:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013410:	2b00      	cmp	r3, #0
 8013412:	d104      	bne.n	801341e <SecureFrame+0x72>
 8013414:	4b11      	ldr	r3, [pc, #68]	; (801345c <SecureFrame+0xb0>)
 8013416:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 801341a:	2b01      	cmp	r3, #1
 801341c:	d902      	bls.n	8013424 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	3b01      	subs	r3, #1
 8013422:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013424:	68b8      	ldr	r0, [r7, #8]
 8013426:	79ba      	ldrb	r2, [r7, #6]
 8013428:	79f9      	ldrb	r1, [r7, #7]
 801342a:	4b0d      	ldr	r3, [pc, #52]	; (8013460 <SecureFrame+0xb4>)
 801342c:	f003 fd4a 	bl	8016ec4 <LoRaMacCryptoSecureMessage>
 8013430:	4603      	mov	r3, r0
 8013432:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013434:	7bfb      	ldrb	r3, [r7, #15]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d001      	beq.n	801343e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801343a:	2311      	movs	r3, #17
 801343c:	e009      	b.n	8013452 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801343e:	4b07      	ldr	r3, [pc, #28]	; (801345c <SecureFrame+0xb0>)
 8013440:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013444:	b29a      	uxth	r2, r3
 8013446:	4b05      	ldr	r3, [pc, #20]	; (801345c <SecureFrame+0xb0>)
 8013448:	801a      	strh	r2, [r3, #0]
            break;
 801344a:	e001      	b.n	8013450 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801344c:	2303      	movs	r3, #3
 801344e:	e000      	b.n	8013452 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	20000978 	.word	0x20000978
 8013460:	20000a80 	.word	0x20000a80

08013464 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013464:	b480      	push	{r7}
 8013466:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013468:	4b09      	ldr	r3, [pc, #36]	; (8013490 <CalculateBackOff+0x2c>)
 801346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801346c:	2b00      	cmp	r3, #0
 801346e:	d10a      	bne.n	8013486 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013470:	4b07      	ldr	r3, [pc, #28]	; (8013490 <CalculateBackOff+0x2c>)
 8013472:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8013476:	3b01      	subs	r3, #1
 8013478:	4a06      	ldr	r2, [pc, #24]	; (8013494 <CalculateBackOff+0x30>)
 801347a:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 801347e:	fb02 f303 	mul.w	r3, r2, r3
 8013482:	4a03      	ldr	r2, [pc, #12]	; (8013490 <CalculateBackOff+0x2c>)
 8013484:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013486:	bf00      	nop
 8013488:	46bd      	mov	sp, r7
 801348a:	bc80      	pop	{r7}
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop
 8013490:	20000e80 	.word	0x20000e80
 8013494:	20000978 	.word	0x20000978

08013498 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	4603      	mov	r3, r0
 80134a0:	7139      	strb	r1, [r7, #4]
 80134a2:	71fb      	strb	r3, [r7, #7]
 80134a4:	4613      	mov	r3, r2
 80134a6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80134a8:	79fb      	ldrb	r3, [r7, #7]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d002      	beq.n	80134b4 <RemoveMacCommands+0x1c>
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d10d      	bne.n	80134d0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80134b4:	79bb      	ldrb	r3, [r7, #6]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d108      	bne.n	80134cc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80134ba:	793b      	ldrb	r3, [r7, #4]
 80134bc:	f003 0320 	and.w	r3, r3, #32
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d004      	beq.n	80134d0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80134c6:	f002 fc7f 	bl	8015dc8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80134ca:	e001      	b.n	80134d0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80134cc:	f002 fc7c 	bl	8015dc8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80134d0:	bf00      	nop
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80134d8:	b5b0      	push	{r4, r5, r7, lr}
 80134da:	b090      	sub	sp, #64	; 0x40
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80134e2:	79fb      	ldrb	r3, [r7, #7]
 80134e4:	f083 0301 	eor.w	r3, r3, #1
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d003      	beq.n	80134f6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80134ee:	4b80      	ldr	r3, [pc, #512]	; (80136f0 <ResetMacParameters+0x218>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80134f6:	4b7e      	ldr	r3, [pc, #504]	; (80136f0 <ResetMacParameters+0x218>)
 80134f8:	2200      	movs	r2, #0
 80134fa:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80134fc:	4b7d      	ldr	r3, [pc, #500]	; (80136f4 <ResetMacParameters+0x21c>)
 80134fe:	2200      	movs	r2, #0
 8013500:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8013504:	4b7b      	ldr	r3, [pc, #492]	; (80136f4 <ResetMacParameters+0x21c>)
 8013506:	2201      	movs	r2, #1
 8013508:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 801350c:	4b79      	ldr	r3, [pc, #484]	; (80136f4 <ResetMacParameters+0x21c>)
 801350e:	2201      	movs	r2, #1
 8013510:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8013514:	4b77      	ldr	r3, [pc, #476]	; (80136f4 <ResetMacParameters+0x21c>)
 8013516:	2200      	movs	r2, #0
 8013518:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801351c:	4b74      	ldr	r3, [pc, #464]	; (80136f0 <ResetMacParameters+0x218>)
 801351e:	2200      	movs	r2, #0
 8013520:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013524:	4b72      	ldr	r3, [pc, #456]	; (80136f0 <ResetMacParameters+0x218>)
 8013526:	2201      	movs	r2, #1
 8013528:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801352c:	4b70      	ldr	r3, [pc, #448]	; (80136f0 <ResetMacParameters+0x218>)
 801352e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013532:	4b6f      	ldr	r3, [pc, #444]	; (80136f0 <ResetMacParameters+0x218>)
 8013534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013538:	4b6d      	ldr	r3, [pc, #436]	; (80136f0 <ResetMacParameters+0x218>)
 801353a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801353e:	4b6c      	ldr	r3, [pc, #432]	; (80136f0 <ResetMacParameters+0x218>)
 8013540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013544:	4b6a      	ldr	r3, [pc, #424]	; (80136f0 <ResetMacParameters+0x218>)
 8013546:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 801354a:	4b69      	ldr	r3, [pc, #420]	; (80136f0 <ResetMacParameters+0x218>)
 801354c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013550:	4b67      	ldr	r3, [pc, #412]	; (80136f0 <ResetMacParameters+0x218>)
 8013552:	4a67      	ldr	r2, [pc, #412]	; (80136f0 <ResetMacParameters+0x218>)
 8013554:	336c      	adds	r3, #108	; 0x6c
 8013556:	32b4      	adds	r2, #180	; 0xb4
 8013558:	e892 0003 	ldmia.w	r2, {r0, r1}
 801355c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013560:	4b63      	ldr	r3, [pc, #396]	; (80136f0 <ResetMacParameters+0x218>)
 8013562:	4a63      	ldr	r2, [pc, #396]	; (80136f0 <ResetMacParameters+0x218>)
 8013564:	3374      	adds	r3, #116	; 0x74
 8013566:	32bc      	adds	r2, #188	; 0xbc
 8013568:	e892 0003 	ldmia.w	r2, {r0, r1}
 801356c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013570:	4b5f      	ldr	r3, [pc, #380]	; (80136f0 <ResetMacParameters+0x218>)
 8013572:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8013576:	4b5e      	ldr	r3, [pc, #376]	; (80136f0 <ResetMacParameters+0x218>)
 8013578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801357c:	4b5c      	ldr	r3, [pc, #368]	; (80136f0 <ResetMacParameters+0x218>)
 801357e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8013582:	4b5b      	ldr	r3, [pc, #364]	; (80136f0 <ResetMacParameters+0x218>)
 8013584:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013588:	4b59      	ldr	r3, [pc, #356]	; (80136f0 <ResetMacParameters+0x218>)
 801358a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801358e:	4a58      	ldr	r2, [pc, #352]	; (80136f0 <ResetMacParameters+0x218>)
 8013590:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013594:	4b56      	ldr	r3, [pc, #344]	; (80136f0 <ResetMacParameters+0x218>)
 8013596:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801359a:	4a55      	ldr	r2, [pc, #340]	; (80136f0 <ResetMacParameters+0x218>)
 801359c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80135a0:	4b53      	ldr	r3, [pc, #332]	; (80136f0 <ResetMacParameters+0x218>)
 80135a2:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80135a6:	4b52      	ldr	r3, [pc, #328]	; (80136f0 <ResetMacParameters+0x218>)
 80135a8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80135ac:	4b50      	ldr	r3, [pc, #320]	; (80136f0 <ResetMacParameters+0x218>)
 80135ae:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80135b2:	4b4f      	ldr	r3, [pc, #316]	; (80136f0 <ResetMacParameters+0x218>)
 80135b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 80135b8:	4b4e      	ldr	r3, [pc, #312]	; (80136f4 <ResetMacParameters+0x21c>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80135c0:	4b4b      	ldr	r3, [pc, #300]	; (80136f0 <ResetMacParameters+0x218>)
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80135c8:	4b49      	ldr	r3, [pc, #292]	; (80136f0 <ResetMacParameters+0x218>)
 80135ca:	2200      	movs	r2, #0
 80135cc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80135d0:	4b47      	ldr	r3, [pc, #284]	; (80136f0 <ResetMacParameters+0x218>)
 80135d2:	2200      	movs	r2, #0
 80135d4:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80135d8:	4b45      	ldr	r3, [pc, #276]	; (80136f0 <ResetMacParameters+0x218>)
 80135da:	2200      	movs	r2, #0
 80135dc:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80135e0:	4b43      	ldr	r3, [pc, #268]	; (80136f0 <ResetMacParameters+0x218>)
 80135e2:	2200      	movs	r2, #0
 80135e4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80135e8:	4b41      	ldr	r3, [pc, #260]	; (80136f0 <ResetMacParameters+0x218>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80135f0:	4b3f      	ldr	r3, [pc, #252]	; (80136f0 <ResetMacParameters+0x218>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80135f8:	4b3d      	ldr	r3, [pc, #244]	; (80136f0 <ResetMacParameters+0x218>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013600:	4b3b      	ldr	r3, [pc, #236]	; (80136f0 <ResetMacParameters+0x218>)
 8013602:	2200      	movs	r2, #0
 8013604:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013608:	2301      	movs	r3, #1
 801360a:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801360c:	4b3a      	ldr	r3, [pc, #232]	; (80136f8 <ResetMacParameters+0x220>)
 801360e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013610:	4b3a      	ldr	r3, [pc, #232]	; (80136fc <ResetMacParameters+0x224>)
 8013612:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013614:	4b36      	ldr	r3, [pc, #216]	; (80136f0 <ResetMacParameters+0x218>)
 8013616:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801361a:	f107 020c 	add.w	r2, r7, #12
 801361e:	4611      	mov	r1, r2
 8013620:	4618      	mov	r0, r3
 8013622:	f004 f90d 	bl	8017840 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013626:	4b33      	ldr	r3, [pc, #204]	; (80136f4 <ResetMacParameters+0x21c>)
 8013628:	2200      	movs	r2, #0
 801362a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801362e:	4b31      	ldr	r3, [pc, #196]	; (80136f4 <ResetMacParameters+0x21c>)
 8013630:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8013634:	4b2f      	ldr	r3, [pc, #188]	; (80136f4 <ResetMacParameters+0x21c>)
 8013636:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801363a:	4b2d      	ldr	r3, [pc, #180]	; (80136f0 <ResetMacParameters+0x218>)
 801363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363e:	4a2d      	ldr	r2, [pc, #180]	; (80136f4 <ResetMacParameters+0x21c>)
 8013640:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013644:	4b2a      	ldr	r3, [pc, #168]	; (80136f0 <ResetMacParameters+0x218>)
 8013646:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801364a:	4b2a      	ldr	r3, [pc, #168]	; (80136f4 <ResetMacParameters+0x21c>)
 801364c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013650:	4b27      	ldr	r3, [pc, #156]	; (80136f0 <ResetMacParameters+0x218>)
 8013652:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013656:	4b27      	ldr	r3, [pc, #156]	; (80136f4 <ResetMacParameters+0x21c>)
 8013658:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801365c:	4b25      	ldr	r3, [pc, #148]	; (80136f4 <ResetMacParameters+0x21c>)
 801365e:	2200      	movs	r2, #0
 8013660:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013664:	4b23      	ldr	r3, [pc, #140]	; (80136f4 <ResetMacParameters+0x21c>)
 8013666:	2201      	movs	r2, #1
 8013668:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801366c:	4a21      	ldr	r2, [pc, #132]	; (80136f4 <ResetMacParameters+0x21c>)
 801366e:	4b21      	ldr	r3, [pc, #132]	; (80136f4 <ResetMacParameters+0x21c>)
 8013670:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013674:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801367a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801367c:	682b      	ldr	r3, [r5, #0]
 801367e:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013680:	4b1c      	ldr	r3, [pc, #112]	; (80136f4 <ResetMacParameters+0x21c>)
 8013682:	2201      	movs	r2, #1
 8013684:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013688:	4b1a      	ldr	r3, [pc, #104]	; (80136f4 <ResetMacParameters+0x21c>)
 801368a:	2202      	movs	r2, #2
 801368c:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013690:	2300      	movs	r3, #0
 8013692:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8013694:	2300      	movs	r3, #0
 8013696:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8013698:	4b16      	ldr	r3, [pc, #88]	; (80136f4 <ResetMacParameters+0x21c>)
 801369a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d009      	beq.n	80136b6 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80136a2:	4b14      	ldr	r3, [pc, #80]	; (80136f4 <ResetMacParameters+0x21c>)
 80136a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80136ac:	4b11      	ldr	r3, [pc, #68]	; (80136f4 <ResetMacParameters+0x21c>)
 80136ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136b2:	695b      	ldr	r3, [r3, #20]
 80136b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80136b6:	4b12      	ldr	r3, [pc, #72]	; (8013700 <ResetMacParameters+0x228>)
 80136b8:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80136ba:	4b12      	ldr	r3, [pc, #72]	; (8013704 <ResetMacParameters+0x22c>)
 80136bc:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80136be:	4b12      	ldr	r3, [pc, #72]	; (8013708 <ResetMacParameters+0x230>)
 80136c0:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80136c2:	4b12      	ldr	r3, [pc, #72]	; (801370c <ResetMacParameters+0x234>)
 80136c4:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80136c6:	4b12      	ldr	r3, [pc, #72]	; (8013710 <ResetMacParameters+0x238>)
 80136c8:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80136ca:	4b12      	ldr	r3, [pc, #72]	; (8013714 <ResetMacParameters+0x23c>)
 80136cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80136ce:	4b12      	ldr	r3, [pc, #72]	; (8013718 <ResetMacParameters+0x240>)
 80136d0:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80136d2:	4b12      	ldr	r3, [pc, #72]	; (801371c <ResetMacParameters+0x244>)
 80136d4:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80136d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80136da:	f107 0318 	add.w	r3, r7, #24
 80136de:	4a10      	ldr	r2, [pc, #64]	; (8013720 <ResetMacParameters+0x248>)
 80136e0:	4618      	mov	r0, r3
 80136e2:	f002 f899 	bl	8015818 <LoRaMacClassBInit>
}
 80136e6:	bf00      	nop
 80136e8:	3740      	adds	r7, #64	; 0x40
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bdb0      	pop	{r4, r5, r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20000e80 	.word	0x20000e80
 80136f4:	20000978 	.word	0x20000978
 80136f8:	200010a0 	.word	0x200010a0
 80136fc:	20001134 	.word	0x20001134
 8013700:	20000dd4 	.word	0x20000dd4
 8013704:	20000d90 	.word	0x20000d90
 8013708:	20000dc0 	.word	0x20000dc0
 801370c:	20000df9 	.word	0x20000df9
 8013710:	20000f64 	.word	0x20000f64
 8013714:	20000ec8 	.word	0x20000ec8
 8013718:	20000ecc 	.word	0x20000ecc
 801371c:	20000f68 	.word	0x20000f68
 8013720:	200015d0 	.word	0x200015d0

08013724 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f00a fd12 	bl	801e158 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013734:	4b11      	ldr	r3, [pc, #68]	; (801377c <RxWindowSetup+0x58>)
 8013736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013738:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801373a:	4b11      	ldr	r3, [pc, #68]	; (8013780 <RxWindowSetup+0x5c>)
 801373c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013740:	4a10      	ldr	r2, [pc, #64]	; (8013784 <RxWindowSetup+0x60>)
 8013742:	6839      	ldr	r1, [r7, #0]
 8013744:	4618      	mov	r0, r3
 8013746:	f004 f8e3 	bl	8017910 <RegionRxConfig>
 801374a:	4603      	mov	r3, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d010      	beq.n	8013772 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013750:	4b0d      	ldr	r3, [pc, #52]	; (8013788 <RxWindowSetup+0x64>)
 8013752:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8013756:	4b0c      	ldr	r3, [pc, #48]	; (8013788 <RxWindowSetup+0x64>)
 8013758:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801375c:	4b07      	ldr	r3, [pc, #28]	; (801377c <RxWindowSetup+0x58>)
 801375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013760:	4a07      	ldr	r2, [pc, #28]	; (8013780 <RxWindowSetup+0x5c>)
 8013762:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013764:	4610      	mov	r0, r2
 8013766:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	7cda      	ldrb	r2, [r3, #19]
 801376c:	4b06      	ldr	r3, [pc, #24]	; (8013788 <RxWindowSetup+0x64>)
 801376e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013772:	bf00      	nop
 8013774:	3708      	adds	r7, #8
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	0801fa14 	.word	0x0801fa14
 8013780:	20000e80 	.word	0x20000e80
 8013784:	20000d94 	.word	0x20000d94
 8013788:	20000978 	.word	0x20000978

0801378c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801378c:	b590      	push	{r4, r7, lr}
 801378e:	b083      	sub	sp, #12
 8013790:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013792:	4b1b      	ldr	r3, [pc, #108]	; (8013800 <OpenContinuousRxCWindow+0x74>)
 8013794:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013798:	4b19      	ldr	r3, [pc, #100]	; (8013800 <OpenContinuousRxCWindow+0x74>)
 801379a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801379e:	b259      	sxtb	r1, r3
 80137a0:	4b17      	ldr	r3, [pc, #92]	; (8013800 <OpenContinuousRxCWindow+0x74>)
 80137a2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80137a6:	4b16      	ldr	r3, [pc, #88]	; (8013800 <OpenContinuousRxCWindow+0x74>)
 80137a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137aa:	4c16      	ldr	r4, [pc, #88]	; (8013804 <OpenContinuousRxCWindow+0x78>)
 80137ac:	9400      	str	r4, [sp, #0]
 80137ae:	f004 f895 	bl	80178dc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80137b2:	4b15      	ldr	r3, [pc, #84]	; (8013808 <OpenContinuousRxCWindow+0x7c>)
 80137b4:	2202      	movs	r2, #2
 80137b6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80137ba:	4b13      	ldr	r3, [pc, #76]	; (8013808 <OpenContinuousRxCWindow+0x7c>)
 80137bc:	2201      	movs	r2, #1
 80137be:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80137c2:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <OpenContinuousRxCWindow+0x74>)
 80137c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137c8:	4a10      	ldr	r2, [pc, #64]	; (801380c <OpenContinuousRxCWindow+0x80>)
 80137ca:	490e      	ldr	r1, [pc, #56]	; (8013804 <OpenContinuousRxCWindow+0x78>)
 80137cc:	4618      	mov	r0, r3
 80137ce:	f004 f89f 	bl	8017910 <RegionRxConfig>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d00f      	beq.n	80137f8 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80137d8:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <OpenContinuousRxCWindow+0x7c>)
 80137da:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80137de:	4b0a      	ldr	r3, [pc, #40]	; (8013808 <OpenContinuousRxCWindow+0x7c>)
 80137e0:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 80137e4:	4b0a      	ldr	r3, [pc, #40]	; (8013810 <OpenContinuousRxCWindow+0x84>)
 80137e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137e8:	2000      	movs	r0, #0
 80137ea:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80137ec:	4b06      	ldr	r3, [pc, #24]	; (8013808 <OpenContinuousRxCWindow+0x7c>)
 80137ee:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80137f2:	4b05      	ldr	r3, [pc, #20]	; (8013808 <OpenContinuousRxCWindow+0x7c>)
 80137f4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80137f8:	bf00      	nop
 80137fa:	3704      	adds	r7, #4
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd90      	pop	{r4, r7, pc}
 8013800:	20000e80 	.word	0x20000e80
 8013804:	20000d58 	.word	0x20000d58
 8013808:	20000978 	.word	0x20000978
 801380c:	20000d94 	.word	0x20000d94
 8013810:	0801fa14 	.word	0x0801fa14

08013814 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b088      	sub	sp, #32
 8013818:	af00      	add	r7, sp, #0
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	603b      	str	r3, [r7, #0]
 8013820:	4613      	mov	r3, r2
 8013822:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013824:	4b82      	ldr	r3, [pc, #520]	; (8013a30 <PrepareFrame+0x21c>)
 8013826:	2200      	movs	r2, #0
 8013828:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801382a:	4b81      	ldr	r3, [pc, #516]	; (8013a30 <PrepareFrame+0x21c>)
 801382c:	2200      	movs	r2, #0
 801382e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8013832:	2300      	movs	r3, #0
 8013834:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801383a:	2300      	movs	r3, #0
 801383c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d101      	bne.n	8013848 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013844:	2300      	movs	r3, #0
 8013846:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801384a:	461a      	mov	r2, r3
 801384c:	6839      	ldr	r1, [r7, #0]
 801384e:	4879      	ldr	r0, [pc, #484]	; (8013a34 <PrepareFrame+0x220>)
 8013850:	f006 fae7 	bl	8019e22 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013854:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013856:	b2da      	uxtb	r2, r3
 8013858:	4b75      	ldr	r3, [pc, #468]	; (8013a30 <PrepareFrame+0x21c>)
 801385a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	781a      	ldrb	r2, [r3, #0]
 8013862:	4b73      	ldr	r3, [pc, #460]	; (8013a30 <PrepareFrame+0x21c>)
 8013864:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801386e:	b2db      	uxtb	r3, r3
 8013870:	2b07      	cmp	r3, #7
 8013872:	f000 80b9 	beq.w	80139e8 <PrepareFrame+0x1d4>
 8013876:	2b07      	cmp	r3, #7
 8013878:	f300 80d0 	bgt.w	8013a1c <PrepareFrame+0x208>
 801387c:	2b02      	cmp	r3, #2
 801387e:	d006      	beq.n	801388e <PrepareFrame+0x7a>
 8013880:	2b04      	cmp	r3, #4
 8013882:	f040 80cb 	bne.w	8013a1c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013886:	4b6a      	ldr	r3, [pc, #424]	; (8013a30 <PrepareFrame+0x21c>)
 8013888:	2201      	movs	r2, #1
 801388a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801388e:	4b68      	ldr	r3, [pc, #416]	; (8013a30 <PrepareFrame+0x21c>)
 8013890:	2204      	movs	r2, #4
 8013892:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013896:	4b66      	ldr	r3, [pc, #408]	; (8013a30 <PrepareFrame+0x21c>)
 8013898:	4a67      	ldr	r2, [pc, #412]	; (8013a38 <PrepareFrame+0x224>)
 801389a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801389e:	4b64      	ldr	r3, [pc, #400]	; (8013a30 <PrepareFrame+0x21c>)
 80138a0:	22ff      	movs	r2, #255	; 0xff
 80138a2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	781a      	ldrb	r2, [r3, #0]
 80138aa:	4b61      	ldr	r3, [pc, #388]	; (8013a30 <PrepareFrame+0x21c>)
 80138ac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80138b0:	4a5f      	ldr	r2, [pc, #380]	; (8013a30 <PrepareFrame+0x21c>)
 80138b2:	79fb      	ldrb	r3, [r7, #7]
 80138b4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80138b8:	4b60      	ldr	r3, [pc, #384]	; (8013a3c <PrepareFrame+0x228>)
 80138ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80138be:	4a5c      	ldr	r2, [pc, #368]	; (8013a30 <PrepareFrame+0x21c>)
 80138c0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	781a      	ldrb	r2, [r3, #0]
 80138c8:	4b59      	ldr	r3, [pc, #356]	; (8013a30 <PrepareFrame+0x21c>)
 80138ca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80138ce:	4b58      	ldr	r3, [pc, #352]	; (8013a30 <PrepareFrame+0x21c>)
 80138d0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80138d4:	4b56      	ldr	r3, [pc, #344]	; (8013a30 <PrepareFrame+0x21c>)
 80138d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80138da:	4b55      	ldr	r3, [pc, #340]	; (8013a30 <PrepareFrame+0x21c>)
 80138dc:	4a55      	ldr	r2, [pc, #340]	; (8013a34 <PrepareFrame+0x220>)
 80138de:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80138e2:	f107 0318 	add.w	r3, r7, #24
 80138e6:	4618      	mov	r0, r3
 80138e8:	f003 f8ce 	bl	8016a88 <LoRaMacCryptoGetFCntUp>
 80138ec:	4603      	mov	r3, r0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d001      	beq.n	80138f6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80138f2:	2312      	movs	r3, #18
 80138f4:	e098      	b.n	8013a28 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	b29a      	uxth	r2, r3
 80138fa:	4b4d      	ldr	r3, [pc, #308]	; (8013a30 <PrepareFrame+0x21c>)
 80138fc:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8013900:	4b4b      	ldr	r3, [pc, #300]	; (8013a30 <PrepareFrame+0x21c>)
 8013902:	2200      	movs	r2, #0
 8013904:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013908:	4b49      	ldr	r3, [pc, #292]	; (8013a30 <PrepareFrame+0x21c>)
 801390a:	2200      	movs	r2, #0
 801390c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	4a47      	ldr	r2, [pc, #284]	; (8013a30 <PrepareFrame+0x21c>)
 8013914:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013918:	f107 0314 	add.w	r3, r7, #20
 801391c:	4618      	mov	r0, r3
 801391e:	f002 fa7f 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>
 8013922:	4603      	mov	r3, r0
 8013924:	2b00      	cmp	r3, #0
 8013926:	d001      	beq.n	801392c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013928:	2313      	movs	r3, #19
 801392a:	e07d      	b.n	8013a28 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d076      	beq.n	8013a20 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013932:	4b42      	ldr	r3, [pc, #264]	; (8013a3c <PrepareFrame+0x228>)
 8013934:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013938:	4618      	mov	r0, r3
 801393a:	f7fe fd85 	bl	8012448 <GetMaxAppPayloadWithoutFOptsLength>
 801393e:	4603      	mov	r3, r0
 8013940:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013942:	4b3b      	ldr	r3, [pc, #236]	; (8013a30 <PrepareFrame+0x21c>)
 8013944:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013948:	2b00      	cmp	r3, #0
 801394a:	d01d      	beq.n	8013988 <PrepareFrame+0x174>
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	2b0f      	cmp	r3, #15
 8013950:	d81a      	bhi.n	8013988 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013952:	f107 0314 	add.w	r3, r7, #20
 8013956:	4a3a      	ldr	r2, [pc, #232]	; (8013a40 <PrepareFrame+0x22c>)
 8013958:	4619      	mov	r1, r3
 801395a:	200f      	movs	r0, #15
 801395c:	f002 fa76 	bl	8015e4c <LoRaMacCommandsSerializeCmds>
 8013960:	4603      	mov	r3, r0
 8013962:	2b00      	cmp	r3, #0
 8013964:	d001      	beq.n	801396a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013966:	2313      	movs	r3, #19
 8013968:	e05e      	b.n	8013a28 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	f003 030f 	and.w	r3, r3, #15
 8013970:	b2d9      	uxtb	r1, r3
 8013972:	68ba      	ldr	r2, [r7, #8]
 8013974:	7813      	ldrb	r3, [r2, #0]
 8013976:	f361 0303 	bfi	r3, r1, #0, #4
 801397a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	781a      	ldrb	r2, [r3, #0]
 8013980:	4b2b      	ldr	r3, [pc, #172]	; (8013a30 <PrepareFrame+0x21c>)
 8013982:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013986:	e04b      	b.n	8013a20 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013988:	4b29      	ldr	r3, [pc, #164]	; (8013a30 <PrepareFrame+0x21c>)
 801398a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801398e:	2b00      	cmp	r3, #0
 8013990:	d010      	beq.n	80139b4 <PrepareFrame+0x1a0>
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	2b0f      	cmp	r3, #15
 8013996:	d90d      	bls.n	80139b4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013998:	7ffb      	ldrb	r3, [r7, #31]
 801399a:	f107 0114 	add.w	r1, r7, #20
 801399e:	4a29      	ldr	r2, [pc, #164]	; (8013a44 <PrepareFrame+0x230>)
 80139a0:	4618      	mov	r0, r3
 80139a2:	f002 fa53 	bl	8015e4c <LoRaMacCommandsSerializeCmds>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d001      	beq.n	80139b0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139ac:	2313      	movs	r3, #19
 80139ae:	e03b      	b.n	8013a28 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80139b0:	230a      	movs	r3, #10
 80139b2:	e039      	b.n	8013a28 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80139b4:	7ffb      	ldrb	r3, [r7, #31]
 80139b6:	f107 0114 	add.w	r1, r7, #20
 80139ba:	4a22      	ldr	r2, [pc, #136]	; (8013a44 <PrepareFrame+0x230>)
 80139bc:	4618      	mov	r0, r3
 80139be:	f002 fa45 	bl	8015e4c <LoRaMacCommandsSerializeCmds>
 80139c2:	4603      	mov	r3, r0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d001      	beq.n	80139cc <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139c8:	2313      	movs	r3, #19
 80139ca:	e02d      	b.n	8013a28 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80139cc:	4b18      	ldr	r3, [pc, #96]	; (8013a30 <PrepareFrame+0x21c>)
 80139ce:	2200      	movs	r2, #0
 80139d0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80139d4:	4b16      	ldr	r3, [pc, #88]	; (8013a30 <PrepareFrame+0x21c>)
 80139d6:	4a1b      	ldr	r2, [pc, #108]	; (8013a44 <PrepareFrame+0x230>)
 80139d8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	b2da      	uxtb	r2, r3
 80139e0:	4b13      	ldr	r3, [pc, #76]	; (8013a30 <PrepareFrame+0x21c>)
 80139e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80139e6:	e01b      	b.n	8013a20 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d01a      	beq.n	8013a24 <PrepareFrame+0x210>
 80139ee:	4b10      	ldr	r3, [pc, #64]	; (8013a30 <PrepareFrame+0x21c>)
 80139f0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d015      	beq.n	8013a24 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80139f8:	4813      	ldr	r0, [pc, #76]	; (8013a48 <PrepareFrame+0x234>)
 80139fa:	4b0d      	ldr	r3, [pc, #52]	; (8013a30 <PrepareFrame+0x21c>)
 80139fc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	461a      	mov	r2, r3
 8013a04:	6839      	ldr	r1, [r7, #0]
 8013a06:	f006 fa0c 	bl	8019e22 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013a0a:	4b09      	ldr	r3, [pc, #36]	; (8013a30 <PrepareFrame+0x21c>)
 8013a0c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	3301      	adds	r3, #1
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	4b06      	ldr	r3, [pc, #24]	; (8013a30 <PrepareFrame+0x21c>)
 8013a18:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013a1a:	e003      	b.n	8013a24 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	e003      	b.n	8013a28 <PrepareFrame+0x214>
            break;
 8013a20:	bf00      	nop
 8013a22:	e000      	b.n	8013a26 <PrepareFrame+0x212>
            break;
 8013a24:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013a26:	2300      	movs	r3, #0
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3720      	adds	r7, #32
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	20000978 	.word	0x20000978
 8013a34:	20000ab0 	.word	0x20000ab0
 8013a38:	2000097a 	.word	0x2000097a
 8013a3c:	20000e80 	.word	0x20000e80
 8013a40:	20000a90 	.word	0x20000a90
 8013a44:	20000e00 	.word	0x20000e00
 8013a48:	2000097b 	.word	0x2000097b

08013a4c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b08a      	sub	sp, #40	; 0x28
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	4603      	mov	r3, r0
 8013a54:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a56:	2303      	movs	r3, #3
 8013a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a64:	4b48      	ldr	r3, [pc, #288]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013a66:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a6a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a6c:	4b46      	ldr	r3, [pc, #280]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013a6e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013a72:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013a74:	4b44      	ldr	r3, [pc, #272]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a7a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013a7c:	4b42      	ldr	r3, [pc, #264]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a82:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013a84:	4b41      	ldr	r3, [pc, #260]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013a86:	881b      	ldrh	r3, [r3, #0]
 8013a88:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013a8a:	4b3f      	ldr	r3, [pc, #252]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013a8c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013a90:	f107 020f 	add.w	r2, r7, #15
 8013a94:	f107 0110 	add.w	r1, r7, #16
 8013a98:	4b3d      	ldr	r3, [pc, #244]	; (8013b90 <SendFrameOnChannel+0x144>)
 8013a9a:	f003 ff4e 	bl	801793a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a9e:	4b3b      	ldr	r3, [pc, #236]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013aa6:	4b38      	ldr	r3, [pc, #224]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013aa8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	4b37      	ldr	r3, [pc, #220]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013ab0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013ab4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013ab8:	4b34      	ldr	r3, [pc, #208]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013aba:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013abe:	79fb      	ldrb	r3, [r7, #7]
 8013ac0:	4a32      	ldr	r2, [pc, #200]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013ac2:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ac6:	4b31      	ldr	r3, [pc, #196]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013ac8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013acc:	4a2f      	ldr	r2, [pc, #188]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013ace:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ad2:	4b2e      	ldr	r3, [pc, #184]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013ad4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013ad8:	4a2c      	ldr	r2, [pc, #176]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013ada:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013ade:	f001 ff07 	bl	80158f0 <LoRaMacClassBIsBeaconModeActive>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00b      	beq.n	8013b00 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013ae8:	4b28      	ldr	r3, [pc, #160]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013aea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013aee:	4618      	mov	r0, r3
 8013af0:	f001 ff69 	bl	80159c6 <LoRaMacClassBIsUplinkCollision>
 8013af4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013af6:	6a3b      	ldr	r3, [r7, #32]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d001      	beq.n	8013b00 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013afc:	2310      	movs	r3, #16
 8013afe:	e03e      	b.n	8013b7e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013b00:	4b21      	ldr	r3, [pc, #132]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013b02:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013b06:	2b01      	cmp	r3, #1
 8013b08:	d101      	bne.n	8013b0e <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013b0a:	f001 ff66 	bl	80159da <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013b0e:	f001 ff00 	bl	8015912 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013b12:	4b1d      	ldr	r3, [pc, #116]	; (8013b88 <SendFrameOnChannel+0x13c>)
 8013b14:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b18:	b2db      	uxtb	r3, r3
 8013b1a:	4a1c      	ldr	r2, [pc, #112]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b1c:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013b20:	4611      	mov	r1, r2
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ff fc42 	bl	80133ac <SecureFrame>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d002      	beq.n	8013b3c <SendFrameOnChannel+0xf0>
    {
        return status;
 8013b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b3a:	e020      	b.n	8013b7e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b3c:	4b13      	ldr	r3, [pc, #76]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013b42:	f043 0302 	orr.w	r3, r3, #2
 8013b46:	4a11      	ldr	r2, [pc, #68]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b48:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013b4c:	4b0f      	ldr	r3, [pc, #60]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b4e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013b52:	f083 0301 	eor.w	r3, r3, #1
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d007      	beq.n	8013b6c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013b5c:	4b0b      	ldr	r3, [pc, #44]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b5e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013b62:	3301      	adds	r3, #1
 8013b64:	b2da      	uxtb	r2, r3
 8013b66:	4b09      	ldr	r3, [pc, #36]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b68:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013b6c:	4b09      	ldr	r3, [pc, #36]	; (8013b94 <SendFrameOnChannel+0x148>)
 8013b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b70:	4a06      	ldr	r2, [pc, #24]	; (8013b8c <SendFrameOnChannel+0x140>)
 8013b72:	8812      	ldrh	r2, [r2, #0]
 8013b74:	b2d2      	uxtb	r2, r2
 8013b76:	4611      	mov	r1, r2
 8013b78:	4807      	ldr	r0, [pc, #28]	; (8013b98 <SendFrameOnChannel+0x14c>)
 8013b7a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3728      	adds	r7, #40	; 0x28
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	20000e80 	.word	0x20000e80
 8013b8c:	20000978 	.word	0x20000978
 8013b90:	20000d8c 	.word	0x20000d8c
 8013b94:	0801fa14 	.word	0x0801fa14
 8013b98:	2000097a 	.word	0x2000097a

08013b9c <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013ba6:	4b16      	ldr	r3, [pc, #88]	; (8013c00 <SetTxContinuousWave+0x64>)
 8013ba8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013bac:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013bae:	4b15      	ldr	r3, [pc, #84]	; (8013c04 <SetTxContinuousWave+0x68>)
 8013bb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013bb4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013bb6:	4b13      	ldr	r3, [pc, #76]	; (8013c04 <SetTxContinuousWave+0x68>)
 8013bb8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013bbc:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013bbe:	4b11      	ldr	r3, [pc, #68]	; (8013c04 <SetTxContinuousWave+0x68>)
 8013bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bc4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013bc6:	4b0f      	ldr	r3, [pc, #60]	; (8013c04 <SetTxContinuousWave+0x68>)
 8013bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bcc:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013bce:	88fb      	ldrh	r3, [r7, #6]
 8013bd0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013bd2:	4b0c      	ldr	r3, [pc, #48]	; (8013c04 <SetTxContinuousWave+0x68>)
 8013bd4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bd8:	f107 0208 	add.w	r2, r7, #8
 8013bdc:	4611      	mov	r1, r2
 8013bde:	4618      	mov	r0, r3
 8013be0:	f003 ff5a 	bl	8017a98 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013be4:	4b06      	ldr	r3, [pc, #24]	; (8013c00 <SetTxContinuousWave+0x64>)
 8013be6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013bea:	f043 0302 	orr.w	r3, r3, #2
 8013bee:	4a04      	ldr	r2, [pc, #16]	; (8013c00 <SetTxContinuousWave+0x64>)
 8013bf0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3718      	adds	r7, #24
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	20000978 	.word	0x20000978
 8013c04:	20000e80 	.word	0x20000e80

08013c08 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	4603      	mov	r3, r0
 8013c10:	6039      	str	r1, [r7, #0]
 8013c12:	80fb      	strh	r3, [r7, #6]
 8013c14:	4613      	mov	r3, r2
 8013c16:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013c18:	4b09      	ldr	r3, [pc, #36]	; (8013c40 <SetTxContinuousWave1+0x38>)
 8013c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c1c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013c20:	88fa      	ldrh	r2, [r7, #6]
 8013c22:	6838      	ldr	r0, [r7, #0]
 8013c24:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c26:	4b07      	ldr	r3, [pc, #28]	; (8013c44 <SetTxContinuousWave1+0x3c>)
 8013c28:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c2c:	f043 0302 	orr.w	r3, r3, #2
 8013c30:	4a04      	ldr	r2, [pc, #16]	; (8013c44 <SetTxContinuousWave1+0x3c>)
 8013c32:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013c36:	2300      	movs	r3, #0
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	0801fa14 	.word	0x0801fa14
 8013c44:	20000978 	.word	0x20000978

08013c48 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013c48:	b480      	push	{r7}
 8013c4a:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013c4c:	2300      	movs	r3, #0
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bc80      	pop	{r7}
 8013c54:	4770      	bx	lr

08013c56 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013c56:	b480      	push	{r7}
 8013c58:	b083      	sub	sp, #12
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	6078      	str	r0, [r7, #4]
 8013c5e:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d002      	beq.n	8013c6c <DetermineFrameType+0x16>
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d101      	bne.n	8013c70 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013c6c:	2303      	movs	r3, #3
 8013c6e:	e03b      	b.n	8013ce8 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	7b1b      	ldrb	r3, [r3, #12]
 8013c74:	f003 030f 	and.w	r3, r3, #15
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d008      	beq.n	8013c90 <DetermineFrameType+0x3a>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d003      	beq.n	8013c90 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	701a      	strb	r2, [r3, #0]
 8013c8e:	e02a      	b.n	8013ce6 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d103      	bne.n	8013ca2 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	2201      	movs	r2, #1
 8013c9e:	701a      	strb	r2, [r3, #0]
 8013ca0:	e021      	b.n	8013ce6 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7b1b      	ldrb	r3, [r3, #12]
 8013ca6:	f003 030f 	and.w	r3, r3, #15
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d108      	bne.n	8013cc2 <DetermineFrameType+0x6c>
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d103      	bne.n	8013cc2 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	2202      	movs	r2, #2
 8013cbe:	701a      	strb	r2, [r3, #0]
 8013cc0:	e011      	b.n	8013ce6 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	7b1b      	ldrb	r3, [r3, #12]
 8013cc6:	f003 030f 	and.w	r3, r3, #15
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d108      	bne.n	8013ce2 <DetermineFrameType+0x8c>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d003      	beq.n	8013ce2 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	2203      	movs	r2, #3
 8013cde:	701a      	strb	r2, [r3, #0]
 8013ce0:	e001      	b.n	8013ce6 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013ce2:	2318      	movs	r3, #24
 8013ce4:	e000      	b.n	8013ce8 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	370c      	adds	r7, #12
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bc80      	pop	{r7}
 8013cf0:	4770      	bx	lr
	...

08013cf4 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013cf8:	4b12      	ldr	r3, [pc, #72]	; (8013d44 <CheckRetransUnconfirmedUplink+0x50>)
 8013cfa:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013cfe:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <CheckRetransUnconfirmedUplink+0x54>)
 8013d00:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d301      	bcc.n	8013d0c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013d08:	2301      	movs	r3, #1
 8013d0a:	e016      	b.n	8013d3a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d0c:	4b0d      	ldr	r3, [pc, #52]	; (8013d44 <CheckRetransUnconfirmedUplink+0x50>)
 8013d0e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d12:	f003 0302 	and.w	r3, r3, #2
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00d      	beq.n	8013d38 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013d1c:	4b0a      	ldr	r3, [pc, #40]	; (8013d48 <CheckRetransUnconfirmedUplink+0x54>)
 8013d1e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d101      	bne.n	8013d2a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013d26:	2301      	movs	r3, #1
 8013d28:	e007      	b.n	8013d3a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013d2a:	4b06      	ldr	r3, [pc, #24]	; (8013d44 <CheckRetransUnconfirmedUplink+0x50>)
 8013d2c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013d34:	2301      	movs	r3, #1
 8013d36:	e000      	b.n	8013d3a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bc80      	pop	{r7}
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	20000978 	.word	0x20000978
 8013d48:	20000e80 	.word	0x20000e80

08013d4c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d50:	4b0e      	ldr	r3, [pc, #56]	; (8013d8c <CheckRetransConfirmedUplink+0x40>)
 8013d52:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8013d56:	4b0d      	ldr	r3, [pc, #52]	; (8013d8c <CheckRetransConfirmedUplink+0x40>)
 8013d58:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d301      	bcc.n	8013d64 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013d60:	2301      	movs	r3, #1
 8013d62:	e00f      	b.n	8013d84 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d64:	4b09      	ldr	r3, [pc, #36]	; (8013d8c <CheckRetransConfirmedUplink+0x40>)
 8013d66:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d6a:	f003 0302 	and.w	r3, r3, #2
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d006      	beq.n	8013d82 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d74:	4b05      	ldr	r3, [pc, #20]	; (8013d8c <CheckRetransConfirmedUplink+0x40>)
 8013d76:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d001      	beq.n	8013d82 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e000      	b.n	8013d84 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013d82:	2300      	movs	r3, #0
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bc80      	pop	{r7}
 8013d8a:	4770      	bx	lr
 8013d8c:	20000978 	.word	0x20000978

08013d90 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d90:	b480      	push	{r7}
 8013d92:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d94:	4b1a      	ldr	r3, [pc, #104]	; (8013e00 <StopRetransmission+0x70>)
 8013d96:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d9a:	f003 0302 	and.w	r3, r3, #2
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d009      	beq.n	8013db8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013da4:	4b16      	ldr	r3, [pc, #88]	; (8013e00 <StopRetransmission+0x70>)
 8013da6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d00e      	beq.n	8013dcc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013dae:	4b14      	ldr	r3, [pc, #80]	; (8013e00 <StopRetransmission+0x70>)
 8013db0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d009      	beq.n	8013dcc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013db8:	4b12      	ldr	r3, [pc, #72]	; (8013e04 <StopRetransmission+0x74>)
 8013dba:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d004      	beq.n	8013dcc <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013dc2:	4b10      	ldr	r3, [pc, #64]	; (8013e04 <StopRetransmission+0x74>)
 8013dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	4a0e      	ldr	r2, [pc, #56]	; (8013e04 <StopRetransmission+0x74>)
 8013dca:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013dcc:	4b0c      	ldr	r3, [pc, #48]	; (8013e00 <StopRetransmission+0x70>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013dd4:	4b0a      	ldr	r3, [pc, #40]	; (8013e00 <StopRetransmission+0x70>)
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013ddc:	4b08      	ldr	r3, [pc, #32]	; (8013e00 <StopRetransmission+0x70>)
 8013dde:	2200      	movs	r2, #0
 8013de0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013de4:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <StopRetransmission+0x70>)
 8013de6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dea:	f023 0302 	bic.w	r3, r3, #2
 8013dee:	4a04      	ldr	r2, [pc, #16]	; (8013e00 <StopRetransmission+0x70>)
 8013df0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013df4:	2301      	movs	r3, #1
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bc80      	pop	{r7}
 8013dfc:	4770      	bx	lr
 8013dfe:	bf00      	nop
 8013e00:	20000978 	.word	0x20000978
 8013e04:	20000e80 	.word	0x20000e80

08013e08 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013e0c:	4b08      	ldr	r3, [pc, #32]	; (8013e30 <OnMacProcessNotify+0x28>)
 8013e0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d00a      	beq.n	8013e2c <OnMacProcessNotify+0x24>
 8013e16:	4b06      	ldr	r3, [pc, #24]	; (8013e30 <OnMacProcessNotify+0x28>)
 8013e18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e1c:	695b      	ldr	r3, [r3, #20]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d004      	beq.n	8013e2c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013e22:	4b03      	ldr	r3, [pc, #12]	; (8013e30 <OnMacProcessNotify+0x28>)
 8013e24:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e28:	695b      	ldr	r3, [r3, #20]
 8013e2a:	4798      	blx	r3
    }
}
 8013e2c:	bf00      	nop
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	20000978 	.word	0x20000978

08013e34 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e3e:	4b0b      	ldr	r3, [pc, #44]	; (8013e6c <CallNvmDataChangeCallback+0x38>)
 8013e40:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00c      	beq.n	8013e62 <CallNvmDataChangeCallback+0x2e>
 8013e48:	4b08      	ldr	r3, [pc, #32]	; (8013e6c <CallNvmDataChangeCallback+0x38>)
 8013e4a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e4e:	691b      	ldr	r3, [r3, #16]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d006      	beq.n	8013e62 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e54:	4b05      	ldr	r3, [pc, #20]	; (8013e6c <CallNvmDataChangeCallback+0x38>)
 8013e56:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e5a:	691b      	ldr	r3, [r3, #16]
 8013e5c:	88fa      	ldrh	r2, [r7, #6]
 8013e5e:	4610      	mov	r0, r2
 8013e60:	4798      	blx	r3
    }
}
 8013e62:	bf00      	nop
 8013e64:	3708      	adds	r7, #8
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20000978 	.word	0x20000978

08013e70 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013e76:	4b1b      	ldr	r3, [pc, #108]	; (8013ee4 <AckTimeoutRetriesProcess+0x74>)
 8013e78:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013e7c:	4b19      	ldr	r3, [pc, #100]	; (8013ee4 <AckTimeoutRetriesProcess+0x74>)
 8013e7e:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d229      	bcs.n	8013eda <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013e86:	4b17      	ldr	r3, [pc, #92]	; (8013ee4 <AckTimeoutRetriesProcess+0x74>)
 8013e88:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	b2da      	uxtb	r2, r3
 8013e90:	4b14      	ldr	r3, [pc, #80]	; (8013ee4 <AckTimeoutRetriesProcess+0x74>)
 8013e92:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013e96:	4b13      	ldr	r3, [pc, #76]	; (8013ee4 <AckTimeoutRetriesProcess+0x74>)
 8013e98:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e9c:	f003 0301 	and.w	r3, r3, #1
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d019      	beq.n	8013eda <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013ea6:	2322      	movs	r3, #34	; 0x22
 8013ea8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013eaa:	4b0f      	ldr	r3, [pc, #60]	; (8013ee8 <AckTimeoutRetriesProcess+0x78>)
 8013eac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013eb0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013eb2:	4b0d      	ldr	r3, [pc, #52]	; (8013ee8 <AckTimeoutRetriesProcess+0x78>)
 8013eb4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013eb8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013eba:	4b0b      	ldr	r3, [pc, #44]	; (8013ee8 <AckTimeoutRetriesProcess+0x78>)
 8013ebc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ec0:	f107 0208 	add.w	r2, r7, #8
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f003 fc91 	bl	80177ee <RegionGetPhyParam>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	b25a      	sxtb	r2, r3
 8013ed4:	4b04      	ldr	r3, [pc, #16]	; (8013ee8 <AckTimeoutRetriesProcess+0x78>)
 8013ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013eda:	bf00      	nop
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	20000978 	.word	0x20000978
 8013ee8:	20000e80 	.word	0x20000e80

08013eec <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013ef2:	4b14      	ldr	r3, [pc, #80]	; (8013f44 <AckTimeoutRetriesFinalize+0x58>)
 8013ef4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013ef8:	f083 0301 	eor.w	r3, r3, #1
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d015      	beq.n	8013f2e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013f02:	2302      	movs	r3, #2
 8013f04:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013f06:	4b10      	ldr	r3, [pc, #64]	; (8013f48 <AckTimeoutRetriesFinalize+0x5c>)
 8013f08:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013f0a:	4b10      	ldr	r3, [pc, #64]	; (8013f4c <AckTimeoutRetriesFinalize+0x60>)
 8013f0c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013f0e:	4b10      	ldr	r3, [pc, #64]	; (8013f50 <AckTimeoutRetriesFinalize+0x64>)
 8013f10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f14:	1d3a      	adds	r2, r7, #4
 8013f16:	4611      	mov	r1, r2
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f003 fc91 	bl	8017840 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013f1e:	4b09      	ldr	r3, [pc, #36]	; (8013f44 <AckTimeoutRetriesFinalize+0x58>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013f26:	4b07      	ldr	r3, [pc, #28]	; (8013f44 <AckTimeoutRetriesFinalize+0x58>)
 8013f28:	2200      	movs	r2, #0
 8013f2a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013f2e:	4b05      	ldr	r3, [pc, #20]	; (8013f44 <AckTimeoutRetriesFinalize+0x58>)
 8013f30:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013f34:	4b03      	ldr	r3, [pc, #12]	; (8013f44 <AckTimeoutRetriesFinalize+0x58>)
 8013f36:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013f3a:	bf00      	nop
 8013f3c:	3710      	adds	r7, #16
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20000978 	.word	0x20000978
 8013f48:	200010a0 	.word	0x200010a0
 8013f4c:	20001134 	.word	0x20001134
 8013f50:	20000e80 	.word	0x20000e80

08013f54 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013f54:	b480      	push	{r7}
 8013f56:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f58:	4b0b      	ldr	r3, [pc, #44]	; (8013f88 <IsRequestPending+0x34>)
 8013f5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f5e:	f003 0304 	and.w	r3, r3, #4
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d107      	bne.n	8013f78 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013f68:	4b07      	ldr	r3, [pc, #28]	; (8013f88 <IsRequestPending+0x34>)
 8013f6a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f6e:	f003 0301 	and.w	r3, r3, #1
 8013f72:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d001      	beq.n	8013f7c <IsRequestPending+0x28>
    {
        return 1;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	e000      	b.n	8013f7e <IsRequestPending+0x2a>
    }
    return 0;
 8013f7c:	2300      	movs	r3, #0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bc80      	pop	{r7}
 8013f84:	4770      	bx	lr
 8013f86:	bf00      	nop
 8013f88:	20000978 	.word	0x20000978

08013f8c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013f8c:	b590      	push	{r4, r7, lr}
 8013f8e:	b08f      	sub	sp, #60	; 0x3c
 8013f90:	af02      	add	r7, sp, #8
 8013f92:	6178      	str	r0, [r7, #20]
 8013f94:	6139      	str	r1, [r7, #16]
 8013f96:	4613      	mov	r3, r2
 8013f98:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d002      	beq.n	8013fa6 <LoRaMacInitialization+0x1a>
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d101      	bne.n	8013faa <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fa6:	2303      	movs	r3, #3
 8013fa8:	e273      	b.n	8014492 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d00b      	beq.n	8013fca <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d007      	beq.n	8013fca <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d003      	beq.n	8013fca <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d101      	bne.n	8013fce <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fca:	2303      	movs	r3, #3
 8013fcc:	e261      	b.n	8014492 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013fce:	7bfb      	ldrb	r3, [r7, #15]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f003 fbfc 	bl	80177ce <RegionIsActive>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	f083 0301 	eor.w	r3, r3, #1
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d001      	beq.n	8013fe6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013fe2:	2309      	movs	r3, #9
 8013fe4:	e255      	b.n	8014492 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013fe6:	6978      	ldr	r0, [r7, #20]
 8013fe8:	f002 f852 	bl	8016090 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013fec:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	48c7      	ldr	r0, [pc, #796]	; (8014310 <LoRaMacInitialization+0x384>)
 8013ff4:	f005 ff50 	bl	8019e98 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013ff8:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013ffc:	2100      	movs	r1, #0
 8013ffe:	48c5      	ldr	r0, [pc, #788]	; (8014314 <LoRaMacInitialization+0x388>)
 8014000:	f005 ff4a 	bl	8019e98 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014004:	4bc3      	ldr	r3, [pc, #780]	; (8014314 <LoRaMacInitialization+0x388>)
 8014006:	2201      	movs	r2, #1
 8014008:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 801400c:	4bc1      	ldr	r3, [pc, #772]	; (8014314 <LoRaMacInitialization+0x388>)
 801400e:	2201      	movs	r2, #1
 8014010:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014014:	4abe      	ldr	r2, [pc, #760]	; (8014310 <LoRaMacInitialization+0x384>)
 8014016:	7bfb      	ldrb	r3, [r7, #15]
 8014018:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801401c:	4bbc      	ldr	r3, [pc, #752]	; (8014310 <LoRaMacInitialization+0x384>)
 801401e:	2200      	movs	r2, #0
 8014020:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014024:	4bba      	ldr	r3, [pc, #744]	; (8014310 <LoRaMacInitialization+0x384>)
 8014026:	2200      	movs	r2, #0
 8014028:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801402c:	4bb8      	ldr	r3, [pc, #736]	; (8014310 <LoRaMacInitialization+0x384>)
 801402e:	4aba      	ldr	r2, [pc, #744]	; (8014318 <LoRaMacInitialization+0x38c>)
 8014030:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014034:	230f      	movs	r3, #15
 8014036:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801403a:	4bb5      	ldr	r3, [pc, #724]	; (8014310 <LoRaMacInitialization+0x384>)
 801403c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014040:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014044:	4611      	mov	r1, r2
 8014046:	4618      	mov	r0, r3
 8014048:	f003 fbd1 	bl	80177ee <RegionGetPhyParam>
 801404c:	4603      	mov	r3, r0
 801404e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014052:	2b00      	cmp	r3, #0
 8014054:	bf14      	ite	ne
 8014056:	2301      	movne	r3, #1
 8014058:	2300      	moveq	r3, #0
 801405a:	b2da      	uxtb	r2, r3
 801405c:	4bac      	ldr	r3, [pc, #688]	; (8014310 <LoRaMacInitialization+0x384>)
 801405e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8014062:	230a      	movs	r3, #10
 8014064:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014068:	4ba9      	ldr	r3, [pc, #676]	; (8014310 <LoRaMacInitialization+0x384>)
 801406a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801406e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014072:	4611      	mov	r1, r2
 8014074:	4618      	mov	r0, r3
 8014076:	f003 fbba 	bl	80177ee <RegionGetPhyParam>
 801407a:	4603      	mov	r3, r0
 801407c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014080:	b25a      	sxtb	r2, r3
 8014082:	4ba3      	ldr	r3, [pc, #652]	; (8014310 <LoRaMacInitialization+0x384>)
 8014084:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8014088:	2306      	movs	r3, #6
 801408a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801408e:	4ba0      	ldr	r3, [pc, #640]	; (8014310 <LoRaMacInitialization+0x384>)
 8014090:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014094:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014098:	4611      	mov	r1, r2
 801409a:	4618      	mov	r0, r3
 801409c:	f003 fba7 	bl	80177ee <RegionGetPhyParam>
 80140a0:	4603      	mov	r3, r0
 80140a2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80140a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a6:	b25a      	sxtb	r2, r3
 80140a8:	4b99      	ldr	r3, [pc, #612]	; (8014310 <LoRaMacInitialization+0x384>)
 80140aa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80140ae:	2310      	movs	r3, #16
 80140b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140b4:	4b96      	ldr	r3, [pc, #600]	; (8014310 <LoRaMacInitialization+0x384>)
 80140b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140be:	4611      	mov	r1, r2
 80140c0:	4618      	mov	r0, r3
 80140c2:	f003 fb94 	bl	80177ee <RegionGetPhyParam>
 80140c6:	4603      	mov	r3, r0
 80140c8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80140ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140cc:	4a90      	ldr	r2, [pc, #576]	; (8014310 <LoRaMacInitialization+0x384>)
 80140ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80140d2:	2311      	movs	r3, #17
 80140d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140d8:	4b8d      	ldr	r3, [pc, #564]	; (8014310 <LoRaMacInitialization+0x384>)
 80140da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140e2:	4611      	mov	r1, r2
 80140e4:	4618      	mov	r0, r3
 80140e6:	f003 fb82 	bl	80177ee <RegionGetPhyParam>
 80140ea:	4603      	mov	r3, r0
 80140ec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80140ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f0:	4a87      	ldr	r2, [pc, #540]	; (8014310 <LoRaMacInitialization+0x384>)
 80140f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80140f6:	2312      	movs	r3, #18
 80140f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140fc:	4b84      	ldr	r3, [pc, #528]	; (8014310 <LoRaMacInitialization+0x384>)
 80140fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014106:	4611      	mov	r1, r2
 8014108:	4618      	mov	r0, r3
 801410a:	f003 fb70 	bl	80177ee <RegionGetPhyParam>
 801410e:	4603      	mov	r3, r0
 8014110:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014114:	4a7e      	ldr	r2, [pc, #504]	; (8014310 <LoRaMacInitialization+0x384>)
 8014116:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801411a:	2313      	movs	r3, #19
 801411c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014120:	4b7b      	ldr	r3, [pc, #492]	; (8014310 <LoRaMacInitialization+0x384>)
 8014122:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801412a:	4611      	mov	r1, r2
 801412c:	4618      	mov	r0, r3
 801412e:	f003 fb5e 	bl	80177ee <RegionGetPhyParam>
 8014132:	4603      	mov	r3, r0
 8014134:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014138:	4a75      	ldr	r2, [pc, #468]	; (8014310 <LoRaMacInitialization+0x384>)
 801413a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801413e:	2314      	movs	r3, #20
 8014140:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014144:	4b72      	ldr	r3, [pc, #456]	; (8014310 <LoRaMacInitialization+0x384>)
 8014146:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801414a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801414e:	4611      	mov	r1, r2
 8014150:	4618      	mov	r0, r3
 8014152:	f003 fb4c 	bl	80177ee <RegionGetPhyParam>
 8014156:	4603      	mov	r3, r0
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	4a6c      	ldr	r2, [pc, #432]	; (8014310 <LoRaMacInitialization+0x384>)
 801415e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014162:	2317      	movs	r3, #23
 8014164:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014168:	4b69      	ldr	r3, [pc, #420]	; (8014310 <LoRaMacInitialization+0x384>)
 801416a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801416e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014172:	4611      	mov	r1, r2
 8014174:	4618      	mov	r0, r3
 8014176:	f003 fb3a 	bl	80177ee <RegionGetPhyParam>
 801417a:	4603      	mov	r3, r0
 801417c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014180:	b2da      	uxtb	r2, r3
 8014182:	4b63      	ldr	r3, [pc, #396]	; (8014310 <LoRaMacInitialization+0x384>)
 8014184:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8014188:	2318      	movs	r3, #24
 801418a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801418e:	4b60      	ldr	r3, [pc, #384]	; (8014310 <LoRaMacInitialization+0x384>)
 8014190:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014194:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014198:	4611      	mov	r1, r2
 801419a:	4618      	mov	r0, r3
 801419c:	f003 fb27 	bl	80177ee <RegionGetPhyParam>
 80141a0:	4603      	mov	r3, r0
 80141a2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	4a5a      	ldr	r2, [pc, #360]	; (8014310 <LoRaMacInitialization+0x384>)
 80141a8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	4a58      	ldr	r2, [pc, #352]	; (8014310 <LoRaMacInitialization+0x384>)
 80141b0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80141b4:	2319      	movs	r3, #25
 80141b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141ba:	4b55      	ldr	r3, [pc, #340]	; (8014310 <LoRaMacInitialization+0x384>)
 80141bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141c4:	4611      	mov	r1, r2
 80141c6:	4618      	mov	r0, r3
 80141c8:	f003 fb11 	bl	80177ee <RegionGetPhyParam>
 80141cc:	4603      	mov	r3, r0
 80141ce:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	b2da      	uxtb	r2, r3
 80141d4:	4b4e      	ldr	r3, [pc, #312]	; (8014310 <LoRaMacInitialization+0x384>)
 80141d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	b2da      	uxtb	r2, r3
 80141de:	4b4c      	ldr	r3, [pc, #304]	; (8014310 <LoRaMacInitialization+0x384>)
 80141e0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80141e4:	231e      	movs	r3, #30
 80141e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141ea:	4b49      	ldr	r3, [pc, #292]	; (8014310 <LoRaMacInitialization+0x384>)
 80141ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141f4:	4611      	mov	r1, r2
 80141f6:	4618      	mov	r0, r3
 80141f8:	f003 faf9 	bl	80177ee <RegionGetPhyParam>
 80141fc:	4603      	mov	r3, r0
 80141fe:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014202:	b2da      	uxtb	r2, r3
 8014204:	4b42      	ldr	r3, [pc, #264]	; (8014310 <LoRaMacInitialization+0x384>)
 8014206:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801420a:	231f      	movs	r3, #31
 801420c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014210:	4b3f      	ldr	r3, [pc, #252]	; (8014310 <LoRaMacInitialization+0x384>)
 8014212:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801421a:	4611      	mov	r1, r2
 801421c:	4618      	mov	r0, r3
 801421e:	f003 fae6 	bl	80177ee <RegionGetPhyParam>
 8014222:	4603      	mov	r3, r0
 8014224:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	b2da      	uxtb	r2, r3
 801422a:	4b39      	ldr	r3, [pc, #228]	; (8014310 <LoRaMacInitialization+0x384>)
 801422c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014230:	2320      	movs	r3, #32
 8014232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014236:	4b36      	ldr	r3, [pc, #216]	; (8014310 <LoRaMacInitialization+0x384>)
 8014238:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801423c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014240:	4611      	mov	r1, r2
 8014242:	4618      	mov	r0, r3
 8014244:	f003 fad3 	bl	80177ee <RegionGetPhyParam>
 8014248:	4603      	mov	r3, r0
 801424a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424e:	4a30      	ldr	r2, [pc, #192]	; (8014310 <LoRaMacInitialization+0x384>)
 8014250:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014254:	2321      	movs	r3, #33	; 0x21
 8014256:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801425a:	4b2d      	ldr	r3, [pc, #180]	; (8014310 <LoRaMacInitialization+0x384>)
 801425c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014260:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014264:	4611      	mov	r1, r2
 8014266:	4618      	mov	r0, r3
 8014268:	f003 fac1 	bl	80177ee <RegionGetPhyParam>
 801426c:	4603      	mov	r3, r0
 801426e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	4a27      	ldr	r2, [pc, #156]	; (8014310 <LoRaMacInitialization+0x384>)
 8014274:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014278:	230b      	movs	r3, #11
 801427a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801427e:	4b24      	ldr	r3, [pc, #144]	; (8014310 <LoRaMacInitialization+0x384>)
 8014280:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014284:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014288:	4611      	mov	r1, r2
 801428a:	4618      	mov	r0, r3
 801428c:	f003 faaf 	bl	80177ee <RegionGetPhyParam>
 8014290:	4603      	mov	r3, r0
 8014292:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014296:	b29a      	uxth	r2, r3
 8014298:	4b1d      	ldr	r3, [pc, #116]	; (8014310 <LoRaMacInitialization+0x384>)
 801429a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801429e:	230c      	movs	r3, #12
 80142a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142a4:	4b1a      	ldr	r3, [pc, #104]	; (8014310 <LoRaMacInitialization+0x384>)
 80142a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80142ae:	4611      	mov	r1, r2
 80142b0:	4618      	mov	r0, r3
 80142b2:	f003 fa9c 	bl	80177ee <RegionGetPhyParam>
 80142b6:	4603      	mov	r3, r0
 80142b8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80142ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142bc:	b29a      	uxth	r2, r3
 80142be:	4b14      	ldr	r3, [pc, #80]	; (8014310 <LoRaMacInitialization+0x384>)
 80142c0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80142c4:	4b12      	ldr	r3, [pc, #72]	; (8014310 <LoRaMacInitialization+0x384>)
 80142c6:	2201      	movs	r2, #1
 80142c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80142cc:	4b10      	ldr	r3, [pc, #64]	; (8014310 <LoRaMacInitialization+0x384>)
 80142ce:	220a      	movs	r2, #10
 80142d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80142d4:	4b0e      	ldr	r3, [pc, #56]	; (8014310 <LoRaMacInitialization+0x384>)
 80142d6:	2206      	movs	r2, #6
 80142d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80142dc:	4b0c      	ldr	r3, [pc, #48]	; (8014310 <LoRaMacInitialization+0x384>)
 80142de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80142e2:	4a0b      	ldr	r2, [pc, #44]	; (8014310 <LoRaMacInitialization+0x384>)
 80142e4:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80142e6:	4b0a      	ldr	r3, [pc, #40]	; (8014310 <LoRaMacInitialization+0x384>)
 80142e8:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80142ec:	4b08      	ldr	r3, [pc, #32]	; (8014310 <LoRaMacInitialization+0x384>)
 80142ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80142f2:	4b07      	ldr	r3, [pc, #28]	; (8014310 <LoRaMacInitialization+0x384>)
 80142f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80142f8:	4a05      	ldr	r2, [pc, #20]	; (8014310 <LoRaMacInitialization+0x384>)
 80142fa:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80142fc:	4b04      	ldr	r3, [pc, #16]	; (8014310 <LoRaMacInitialization+0x384>)
 80142fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014302:	4a03      	ldr	r2, [pc, #12]	; (8014310 <LoRaMacInitialization+0x384>)
 8014304:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014306:	4b02      	ldr	r3, [pc, #8]	; (8014310 <LoRaMacInitialization+0x384>)
 8014308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801430c:	e006      	b.n	801431c <LoRaMacInitialization+0x390>
 801430e:	bf00      	nop
 8014310:	20000e80 	.word	0x20000e80
 8014314:	20000978 	.word	0x20000978
 8014318:	01000300 	.word	0x01000300
 801431c:	4a5f      	ldr	r2, [pc, #380]	; (801449c <LoRaMacInitialization+0x510>)
 801431e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014320:	4b5e      	ldr	r3, [pc, #376]	; (801449c <LoRaMacInitialization+0x510>)
 8014322:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014326:	4a5d      	ldr	r2, [pc, #372]	; (801449c <LoRaMacInitialization+0x510>)
 8014328:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801432a:	4b5c      	ldr	r3, [pc, #368]	; (801449c <LoRaMacInitialization+0x510>)
 801432c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014330:	4a5a      	ldr	r2, [pc, #360]	; (801449c <LoRaMacInitialization+0x510>)
 8014332:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014334:	4b59      	ldr	r3, [pc, #356]	; (801449c <LoRaMacInitialization+0x510>)
 8014336:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801433a:	4b58      	ldr	r3, [pc, #352]	; (801449c <LoRaMacInitialization+0x510>)
 801433c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014340:	2300      	movs	r3, #0
 8014342:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014346:	4b56      	ldr	r3, [pc, #344]	; (80144a0 <LoRaMacInitialization+0x514>)
 8014348:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801434a:	4b56      	ldr	r3, [pc, #344]	; (80144a4 <LoRaMacInitialization+0x518>)
 801434c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801434e:	4b53      	ldr	r3, [pc, #332]	; (801449c <LoRaMacInitialization+0x510>)
 8014350:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014354:	f107 0218 	add.w	r2, r7, #24
 8014358:	4611      	mov	r1, r2
 801435a:	4618      	mov	r0, r3
 801435c:	f003 fa70 	bl	8017840 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014360:	4a51      	ldr	r2, [pc, #324]	; (80144a8 <LoRaMacInitialization+0x51c>)
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014368:	2000      	movs	r0, #0
 801436a:	f7ff f8b5 	bl	80134d8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801436e:	4b4b      	ldr	r3, [pc, #300]	; (801449c <LoRaMacInitialization+0x510>)
 8014370:	2201      	movs	r2, #1
 8014372:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8014376:	4a4c      	ldr	r2, [pc, #304]	; (80144a8 <LoRaMacInitialization+0x51c>)
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801437e:	4b4a      	ldr	r3, [pc, #296]	; (80144a8 <LoRaMacInitialization+0x51c>)
 8014380:	2200      	movs	r2, #0
 8014382:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8014386:	4b48      	ldr	r3, [pc, #288]	; (80144a8 <LoRaMacInitialization+0x51c>)
 8014388:	2201      	movs	r2, #1
 801438a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801438e:	4b43      	ldr	r3, [pc, #268]	; (801449c <LoRaMacInitialization+0x510>)
 8014390:	2200      	movs	r2, #0
 8014392:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014394:	4b41      	ldr	r3, [pc, #260]	; (801449c <LoRaMacInitialization+0x510>)
 8014396:	2200      	movs	r2, #0
 8014398:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801439a:	2300      	movs	r3, #0
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	4b43      	ldr	r3, [pc, #268]	; (80144ac <LoRaMacInitialization+0x520>)
 80143a0:	2200      	movs	r2, #0
 80143a2:	f04f 31ff 	mov.w	r1, #4294967295
 80143a6:	4842      	ldr	r0, [pc, #264]	; (80144b0 <LoRaMacInitialization+0x524>)
 80143a8:	f009 fe32 	bl	801e010 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80143ac:	2300      	movs	r3, #0
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	4b40      	ldr	r3, [pc, #256]	; (80144b4 <LoRaMacInitialization+0x528>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	f04f 31ff 	mov.w	r1, #4294967295
 80143b8:	483f      	ldr	r0, [pc, #252]	; (80144b8 <LoRaMacInitialization+0x52c>)
 80143ba:	f009 fe29 	bl	801e010 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80143be:	2300      	movs	r3, #0
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	4b3e      	ldr	r3, [pc, #248]	; (80144bc <LoRaMacInitialization+0x530>)
 80143c4:	2200      	movs	r2, #0
 80143c6:	f04f 31ff 	mov.w	r1, #4294967295
 80143ca:	483d      	ldr	r0, [pc, #244]	; (80144c0 <LoRaMacInitialization+0x534>)
 80143cc:	f009 fe20 	bl	801e010 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80143d0:	2300      	movs	r3, #0
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	4b3b      	ldr	r3, [pc, #236]	; (80144c4 <LoRaMacInitialization+0x538>)
 80143d6:	2200      	movs	r2, #0
 80143d8:	f04f 31ff 	mov.w	r1, #4294967295
 80143dc:	483a      	ldr	r0, [pc, #232]	; (80144c8 <LoRaMacInitialization+0x53c>)
 80143de:	f009 fe17 	bl	801e010 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80143e2:	4c2e      	ldr	r4, [pc, #184]	; (801449c <LoRaMacInitialization+0x510>)
 80143e4:	463b      	mov	r3, r7
 80143e6:	4618      	mov	r0, r3
 80143e8:	f009 f986 	bl	801d6f8 <SysTimeGetMcuTime>
 80143ec:	f504 7390 	add.w	r3, r4, #288	; 0x120
 80143f0:	463a      	mov	r2, r7
 80143f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143f6:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80143fa:	4b2b      	ldr	r3, [pc, #172]	; (80144a8 <LoRaMacInitialization+0x51c>)
 80143fc:	4a33      	ldr	r2, [pc, #204]	; (80144cc <LoRaMacInitialization+0x540>)
 80143fe:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014402:	4b29      	ldr	r3, [pc, #164]	; (80144a8 <LoRaMacInitialization+0x51c>)
 8014404:	4a32      	ldr	r2, [pc, #200]	; (80144d0 <LoRaMacInitialization+0x544>)
 8014406:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801440a:	4b27      	ldr	r3, [pc, #156]	; (80144a8 <LoRaMacInitialization+0x51c>)
 801440c:	4a31      	ldr	r2, [pc, #196]	; (80144d4 <LoRaMacInitialization+0x548>)
 801440e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014412:	4b25      	ldr	r3, [pc, #148]	; (80144a8 <LoRaMacInitialization+0x51c>)
 8014414:	4a30      	ldr	r2, [pc, #192]	; (80144d8 <LoRaMacInitialization+0x54c>)
 8014416:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801441a:	4b23      	ldr	r3, [pc, #140]	; (80144a8 <LoRaMacInitialization+0x51c>)
 801441c:	4a2f      	ldr	r2, [pc, #188]	; (80144dc <LoRaMacInitialization+0x550>)
 801441e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014422:	4b2f      	ldr	r3, [pc, #188]	; (80144e0 <LoRaMacInitialization+0x554>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	482f      	ldr	r0, [pc, #188]	; (80144e4 <LoRaMacInitialization+0x558>)
 8014428:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801442a:	482f      	ldr	r0, [pc, #188]	; (80144e8 <LoRaMacInitialization+0x55c>)
 801442c:	f7fa fe10 	bl	800f050 <SecureElementInit>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014436:	2311      	movs	r3, #17
 8014438:	e02b      	b.n	8014492 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801443a:	4818      	ldr	r0, [pc, #96]	; (801449c <LoRaMacInitialization+0x510>)
 801443c:	f002 fae8 	bl	8016a10 <LoRaMacCryptoInit>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d001      	beq.n	801444a <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014446:	2311      	movs	r3, #17
 8014448:	e023      	b.n	8014492 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801444a:	f001 fbe3 	bl	8015c14 <LoRaMacCommandsInit>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d001      	beq.n	8014458 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014454:	2313      	movs	r3, #19
 8014456:	e01c      	b.n	8014492 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014458:	4824      	ldr	r0, [pc, #144]	; (80144ec <LoRaMacInitialization+0x560>)
 801445a:	f002 fba3 	bl	8016ba4 <LoRaMacCryptoSetMulticastReference>
 801445e:	4603      	mov	r3, r0
 8014460:	2b00      	cmp	r3, #0
 8014462:	d001      	beq.n	8014468 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014464:	2311      	movs	r3, #17
 8014466:	e014      	b.n	8014492 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014468:	4b1d      	ldr	r3, [pc, #116]	; (80144e0 <LoRaMacInitialization+0x554>)
 801446a:	695b      	ldr	r3, [r3, #20]
 801446c:	4798      	blx	r3
 801446e:	4603      	mov	r3, r0
 8014470:	4618      	mov	r0, r3
 8014472:	f005 fcb1 	bl	8019dd8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014476:	4b1a      	ldr	r3, [pc, #104]	; (80144e0 <LoRaMacInitialization+0x554>)
 8014478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801447a:	4a08      	ldr	r2, [pc, #32]	; (801449c <LoRaMacInitialization+0x510>)
 801447c:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014480:	4610      	mov	r0, r2
 8014482:	4798      	blx	r3
    Radio.Sleep( );
 8014484:	4b16      	ldr	r3, [pc, #88]	; (80144e0 <LoRaMacInitialization+0x554>)
 8014486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014488:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801448a:	2001      	movs	r0, #1
 801448c:	f7fd fb40 	bl	8011b10 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014490:	2300      	movs	r3, #0
}
 8014492:	4618      	mov	r0, r3
 8014494:	3734      	adds	r7, #52	; 0x34
 8014496:	46bd      	mov	sp, r7
 8014498:	bd90      	pop	{r4, r7, pc}
 801449a:	bf00      	nop
 801449c:	20000e80 	.word	0x20000e80
 80144a0:	200010a0 	.word	0x200010a0
 80144a4:	20001134 	.word	0x20001134
 80144a8:	20000978 	.word	0x20000978
 80144ac:	08012051 	.word	0x08012051
 80144b0:	20000ce0 	.word	0x20000ce0
 80144b4:	080120c5 	.word	0x080120c5
 80144b8:	20000cf8 	.word	0x20000cf8
 80144bc:	08012131 	.word	0x08012131
 80144c0:	20000d10 	.word	0x20000d10
 80144c4:	080121a5 	.word	0x080121a5
 80144c8:	20000d6c 	.word	0x20000d6c
 80144cc:	08010c11 	.word	0x08010c11
 80144d0:	08010c6d 	.word	0x08010c6d
 80144d4:	08010d05 	.word	0x08010d05
 80144d8:	08010cd9 	.word	0x08010cd9
 80144dc:	08010d21 	.word	0x08010d21
 80144e0:	0801fa14 	.word	0x0801fa14
 80144e4:	20000cc4 	.word	0x20000cc4
 80144e8:	20000fc8 	.word	0x20000fc8
 80144ec:	20000f68 	.word	0x20000f68

080144f0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80144f4:	4b04      	ldr	r3, [pc, #16]	; (8014508 <LoRaMacStart+0x18>)
 80144f6:	2200      	movs	r2, #0
 80144f8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80144fc:	f7fc fc26 	bl	8010d4c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop
 8014508:	20000978 	.word	0x20000978

0801450c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014510:	f7fd fad2 	bl	8011ab8 <LoRaMacIsBusy>
 8014514:	4603      	mov	r3, r0
 8014516:	f083 0301 	eor.w	r3, r3, #1
 801451a:	b2db      	uxtb	r3, r3
 801451c:	2b00      	cmp	r3, #0
 801451e:	d00d      	beq.n	801453c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014520:	4b0b      	ldr	r3, [pc, #44]	; (8014550 <LoRaMacStop+0x44>)
 8014522:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014526:	2b02      	cmp	r3, #2
 8014528:	d102      	bne.n	8014530 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801452a:	4b0a      	ldr	r3, [pc, #40]	; (8014554 <LoRaMacStop+0x48>)
 801452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801452e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014530:	4b09      	ldr	r3, [pc, #36]	; (8014558 <LoRaMacStop+0x4c>)
 8014532:	2201      	movs	r2, #1
 8014534:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	e007      	b.n	801454c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801453c:	4b06      	ldr	r3, [pc, #24]	; (8014558 <LoRaMacStop+0x4c>)
 801453e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014542:	2b01      	cmp	r3, #1
 8014544:	d101      	bne.n	801454a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8014546:	2300      	movs	r3, #0
 8014548:	e000      	b.n	801454c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801454a:	2301      	movs	r3, #1
}
 801454c:	4618      	mov	r0, r3
 801454e:	bd80      	pop	{r7, pc}
 8014550:	20000e80 	.word	0x20000e80
 8014554:	0801fa14 	.word	0x0801fa14
 8014558:	20000978 	.word	0x20000978

0801455c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014560:	480d      	ldr	r0, [pc, #52]	; (8014598 <LoRaMacHalt+0x3c>)
 8014562:	f009 fdf9 	bl	801e158 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014566:	480d      	ldr	r0, [pc, #52]	; (801459c <LoRaMacHalt+0x40>)
 8014568:	f009 fdf6 	bl	801e158 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801456c:	480c      	ldr	r0, [pc, #48]	; (80145a0 <LoRaMacHalt+0x44>)
 801456e:	f009 fdf3 	bl	801e158 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014572:	480c      	ldr	r0, [pc, #48]	; (80145a4 <LoRaMacHalt+0x48>)
 8014574:	f009 fdf0 	bl	801e158 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014578:	f001 f9cb 	bl	8015912 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801457c:	4b0a      	ldr	r3, [pc, #40]	; (80145a8 <LoRaMacHalt+0x4c>)
 801457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014580:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014582:	4b0a      	ldr	r3, [pc, #40]	; (80145ac <LoRaMacHalt+0x50>)
 8014584:	2200      	movs	r2, #0
 8014586:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801458a:	4b08      	ldr	r3, [pc, #32]	; (80145ac <LoRaMacHalt+0x50>)
 801458c:	2201      	movs	r2, #1
 801458e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014592:	2300      	movs	r3, #0
}
 8014594:	4618      	mov	r0, r3
 8014596:	bd80      	pop	{r7, pc}
 8014598:	20000ce0 	.word	0x20000ce0
 801459c:	20000cf8 	.word	0x20000cf8
 80145a0:	20000d10 	.word	0x20000d10
 80145a4:	20000d6c 	.word	0x20000d6c
 80145a8:	0801fa14 	.word	0x0801fa14
 80145ac:	20000978 	.word	0x20000978

080145b0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b08a      	sub	sp, #40	; 0x28
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	4603      	mov	r3, r0
 80145b8:	6039      	str	r1, [r7, #0]
 80145ba:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145bc:	4b3e      	ldr	r3, [pc, #248]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145c0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80145c2:	4b3d      	ldr	r3, [pc, #244]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145c4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80145c8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80145ca:	4b3b      	ldr	r3, [pc, #236]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145cc:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80145d0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80145d2:	2300      	movs	r3, #0
 80145d4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d101      	bne.n	80145e0 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145dc:	2303      	movs	r3, #3
 80145de:	e066      	b.n	80146ae <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80145e0:	4b35      	ldr	r3, [pc, #212]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145e2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80145e6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80145e8:	2300      	movs	r3, #0
 80145ea:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80145ec:	4b32      	ldr	r3, [pc, #200]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145ee:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80145f2:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145f4:	4b30      	ldr	r3, [pc, #192]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f8:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80145fa:	4b2f      	ldr	r3, [pc, #188]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 80145fc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014600:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014602:	4b2d      	ldr	r3, [pc, #180]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 8014604:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014608:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801460a:	4b2b      	ldr	r3, [pc, #172]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 801460c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014610:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014614:	4b28      	ldr	r3, [pc, #160]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 8014616:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801461a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801461e:	4b26      	ldr	r3, [pc, #152]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 8014620:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014624:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014628:	4b23      	ldr	r3, [pc, #140]	; (80146b8 <LoRaMacQueryTxPossible+0x108>)
 801462a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801462e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014632:	f107 0310 	add.w	r3, r7, #16
 8014636:	f107 020e 	add.w	r2, r7, #14
 801463a:	f107 010f 	add.w	r1, r7, #15
 801463e:	f107 0014 	add.w	r0, r7, #20
 8014642:	f001 f8d1 	bl	80157e8 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801464a:	4618      	mov	r0, r3
 801464c:	f7fd fefc 	bl	8012448 <GetMaxAppPayloadWithoutFOptsLength>
 8014650:	4603      	mov	r3, r0
 8014652:	461a      	mov	r2, r3
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014658:	f107 0308 	add.w	r3, r7, #8
 801465c:	4618      	mov	r0, r3
 801465e:	f001 fbdf 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d001      	beq.n	801466c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014668:	2313      	movs	r3, #19
 801466a:	e020      	b.n	80146ae <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	2b0f      	cmp	r3, #15
 8014670:	d819      	bhi.n	80146a6 <LoRaMacQueryTxPossible+0xf6>
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	785b      	ldrb	r3, [r3, #1]
 8014676:	461a      	mov	r2, r3
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	429a      	cmp	r2, r3
 801467c:	d313      	bcc.n	80146a6 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	785a      	ldrb	r2, [r3, #1]
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	b2db      	uxtb	r3, r3
 8014686:	1ad3      	subs	r3, r2, r3
 8014688:	b2da      	uxtb	r2, r3
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	785b      	ldrb	r3, [r3, #1]
 8014692:	4619      	mov	r1, r3
 8014694:	79fa      	ldrb	r2, [r7, #7]
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	4413      	add	r3, r2
 801469a:	4299      	cmp	r1, r3
 801469c:	d301      	bcc.n	80146a2 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801469e:	2300      	movs	r3, #0
 80146a0:	e005      	b.n	80146ae <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80146a2:	2308      	movs	r3, #8
 80146a4:	e003      	b.n	80146ae <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	2200      	movs	r2, #0
 80146aa:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80146ac:	2308      	movs	r3, #8
    }
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3728      	adds	r7, #40	; 0x28
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	20000e80 	.word	0x20000e80

080146bc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80146bc:	b590      	push	{r4, r7, lr}
 80146be:	b087      	sub	sp, #28
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146c4:	2300      	movs	r3, #0
 80146c6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d101      	bne.n	80146d2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80146ce:	2303      	movs	r3, #3
 80146d0:	e1a4      	b.n	8014a1c <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	2b3f      	cmp	r3, #63	; 0x3f
 80146d8:	f200 8199 	bhi.w	8014a0e <LoRaMacMibGetRequestConfirm+0x352>
 80146dc:	a201      	add	r2, pc, #4	; (adr r2, 80146e4 <LoRaMacMibGetRequestConfirm+0x28>)
 80146de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146e2:	bf00      	nop
 80146e4:	080147e5 	.word	0x080147e5
 80146e8:	080147f1 	.word	0x080147f1
 80146ec:	080147fd 	.word	0x080147fd
 80146f0:	08014809 	.word	0x08014809
 80146f4:	08014815 	.word	0x08014815
 80146f8:	08014821 	.word	0x08014821
 80146fc:	0801482d 	.word	0x0801482d
 8014700:	08014a0f 	.word	0x08014a0f
 8014704:	08014a0f 	.word	0x08014a0f
 8014708:	08014a0f 	.word	0x08014a0f
 801470c:	08014a0f 	.word	0x08014a0f
 8014710:	08014a0f 	.word	0x08014a0f
 8014714:	08014a0f 	.word	0x08014a0f
 8014718:	08014a0f 	.word	0x08014a0f
 801471c:	08014a0f 	.word	0x08014a0f
 8014720:	08014841 	.word	0x08014841
 8014724:	0801484d 	.word	0x0801484d
 8014728:	08014859 	.word	0x08014859
 801472c:	0801487b 	.word	0x0801487b
 8014730:	0801488d 	.word	0x0801488d
 8014734:	0801489f 	.word	0x0801489f
 8014738:	080148b1 	.word	0x080148b1
 801473c:	080148e5 	.word	0x080148e5
 8014740:	080148c3 	.word	0x080148c3
 8014744:	08014907 	.word	0x08014907
 8014748:	08014913 	.word	0x08014913
 801474c:	0801491d 	.word	0x0801491d
 8014750:	08014927 	.word	0x08014927
 8014754:	08014931 	.word	0x08014931
 8014758:	0801493b 	.word	0x0801493b
 801475c:	08014945 	.word	0x08014945
 8014760:	08014951 	.word	0x08014951
 8014764:	08014969 	.word	0x08014969
 8014768:	0801495d 	.word	0x0801495d
 801476c:	08014975 	.word	0x08014975
 8014770:	0801497f 	.word	0x0801497f
 8014774:	0801498b 	.word	0x0801498b
 8014778:	080149a7 	.word	0x080149a7
 801477c:	08014997 	.word	0x08014997
 8014780:	0801499f 	.word	0x0801499f
 8014784:	08014a0f 	.word	0x08014a0f
 8014788:	080149b3 	.word	0x080149b3
 801478c:	08014a0f 	.word	0x08014a0f
 8014790:	08014a0f 	.word	0x08014a0f
 8014794:	08014a0f 	.word	0x08014a0f
 8014798:	08014a0f 	.word	0x08014a0f
 801479c:	08014a0f 	.word	0x08014a0f
 80147a0:	08014a0f 	.word	0x08014a0f
 80147a4:	08014a0f 	.word	0x08014a0f
 80147a8:	08014a0f 	.word	0x08014a0f
 80147ac:	08014a0f 	.word	0x08014a0f
 80147b0:	08014a0f 	.word	0x08014a0f
 80147b4:	08014a0f 	.word	0x08014a0f
 80147b8:	08014a0f 	.word	0x08014a0f
 80147bc:	08014a0f 	.word	0x08014a0f
 80147c0:	08014a0f 	.word	0x08014a0f
 80147c4:	08014a0f 	.word	0x08014a0f
 80147c8:	080149c7 	.word	0x080149c7
 80147cc:	080149d3 	.word	0x080149d3
 80147d0:	080149df 	.word	0x080149df
 80147d4:	080149eb 	.word	0x080149eb
 80147d8:	080149f7 	.word	0x080149f7
 80147dc:	08014a03 	.word	0x08014a03
 80147e0:	08014a09 	.word	0x08014a09
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80147e4:	4b8f      	ldr	r3, [pc, #572]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80147e6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	711a      	strb	r2, [r3, #4]
            break;
 80147ee:	e114      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80147f0:	4b8c      	ldr	r3, [pc, #560]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80147f2:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	711a      	strb	r2, [r3, #4]
            break;
 80147fa:	e10e      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	f7fa fefb 	bl	800f5fc <SecureElementGetDevEui>
            break;
 8014806:	e108      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	4618      	mov	r0, r3
 801480e:	f7fa ff25 	bl	800f65c <SecureElementGetJoinEui>
            break;
 8014812:	e102      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014814:	4b83      	ldr	r3, [pc, #524]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014816:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	711a      	strb	r2, [r3, #4]
            break;
 801481e:	e0fc      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014820:	4b80      	ldr	r3, [pc, #512]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014822:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	605a      	str	r2, [r3, #4]
            break;
 801482a:	e0f6      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801482c:	4b7d      	ldr	r3, [pc, #500]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801482e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	3304      	adds	r3, #4
 8014836:	4619      	mov	r1, r3
 8014838:	4610      	mov	r0, r2
 801483a:	f7fa ff41 	bl	800f6c0 <SecureElementGetDevAddr>
            break;
 801483e:	e0ec      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014840:	4b78      	ldr	r3, [pc, #480]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014842:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	711a      	strb	r2, [r3, #4]
            break;
 801484a:	e0e6      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801484c:	4b75      	ldr	r3, [pc, #468]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801484e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	711a      	strb	r2, [r3, #4]
            break;
 8014856:	e0e0      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014858:	231d      	movs	r3, #29
 801485a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801485c:	4b71      	ldr	r3, [pc, #452]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801485e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014862:	f107 0210 	add.w	r2, r7, #16
 8014866:	4611      	mov	r1, r2
 8014868:	4618      	mov	r0, r3
 801486a:	f002 ffc0 	bl	80177ee <RegionGetPhyParam>
 801486e:	4603      	mov	r3, r0
 8014870:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014872:	68fa      	ldr	r2, [r7, #12]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	605a      	str	r2, [r3, #4]
            break;
 8014878:	e0cf      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	4a69      	ldr	r2, [pc, #420]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801487e:	3304      	adds	r3, #4
 8014880:	326c      	adds	r2, #108	; 0x6c
 8014882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014886:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801488a:	e0c6      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	4a65      	ldr	r2, [pc, #404]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014890:	3304      	adds	r3, #4
 8014892:	32b4      	adds	r2, #180	; 0xb4
 8014894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014898:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801489c:	e0bd      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	4a60      	ldr	r2, [pc, #384]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80148a2:	3304      	adds	r3, #4
 80148a4:	3274      	adds	r2, #116	; 0x74
 80148a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148aa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148ae:	e0b4      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	4a5c      	ldr	r2, [pc, #368]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80148b4:	3304      	adds	r3, #4
 80148b6:	32bc      	adds	r2, #188	; 0xbc
 80148b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148bc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148c0:	e0ab      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80148c2:	231b      	movs	r3, #27
 80148c4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148c6:	4b57      	ldr	r3, [pc, #348]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80148c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148cc:	f107 0210 	add.w	r2, r7, #16
 80148d0:	4611      	mov	r1, r2
 80148d2:	4618      	mov	r0, r3
 80148d4:	f002 ff8b 	bl	80177ee <RegionGetPhyParam>
 80148d8:	4603      	mov	r3, r0
 80148da:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80148dc:	68fa      	ldr	r2, [r7, #12]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	605a      	str	r2, [r3, #4]
            break;
 80148e2:	e09a      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80148e4:	231a      	movs	r3, #26
 80148e6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148e8:	4b4e      	ldr	r3, [pc, #312]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80148ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148ee:	f107 0210 	add.w	r2, r7, #16
 80148f2:	4611      	mov	r1, r2
 80148f4:	4618      	mov	r0, r3
 80148f6:	f002 ff7a 	bl	80177ee <RegionGetPhyParam>
 80148fa:	4603      	mov	r3, r0
 80148fc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80148fe:	68fa      	ldr	r2, [r7, #12]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	605a      	str	r2, [r3, #4]
            break;
 8014904:	e089      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014906:	4b47      	ldr	r3, [pc, #284]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014908:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	711a      	strb	r2, [r3, #4]
            break;
 8014910:	e083      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014912:	4b44      	ldr	r3, [pc, #272]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	605a      	str	r2, [r3, #4]
            break;
 801491a:	e07e      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801491c:	4b41      	ldr	r3, [pc, #260]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801491e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	605a      	str	r2, [r3, #4]
            break;
 8014924:	e079      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014926:	4b3f      	ldr	r3, [pc, #252]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014928:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	605a      	str	r2, [r3, #4]
            break;
 801492e:	e074      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014930:	4b3c      	ldr	r3, [pc, #240]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	605a      	str	r2, [r3, #4]
            break;
 8014938:	e06f      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801493a:	4b3a      	ldr	r3, [pc, #232]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801493c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	605a      	str	r2, [r3, #4]
            break;
 8014942:	e06a      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014944:	4b37      	ldr	r3, [pc, #220]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014946:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	711a      	strb	r2, [r3, #4]
            break;
 801494e:	e064      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014950:	4b34      	ldr	r3, [pc, #208]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014952:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	711a      	strb	r2, [r3, #4]
            break;
 801495a:	e05e      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801495c:	4b31      	ldr	r3, [pc, #196]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801495e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	711a      	strb	r2, [r3, #4]
            break;
 8014966:	e058      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014968:	4b2e      	ldr	r3, [pc, #184]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801496a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	711a      	strb	r2, [r3, #4]
            break;
 8014972:	e052      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014974:	4b2b      	ldr	r3, [pc, #172]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	605a      	str	r2, [r3, #4]
            break;
 801497c:	e04d      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801497e:	4b29      	ldr	r3, [pc, #164]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 8014980:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	711a      	strb	r2, [r3, #4]
            break;
 8014988:	e047      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801498a:	4b26      	ldr	r3, [pc, #152]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801498c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	605a      	str	r2, [r3, #4]
            break;
 8014994:	e041      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	4a22      	ldr	r2, [pc, #136]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 801499a:	605a      	str	r2, [r3, #4]
            break;
 801499c:	e03d      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2200      	movs	r2, #0
 80149a2:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80149a4:	e039      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80149a6:	4b1f      	ldr	r3, [pc, #124]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149a8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	605a      	str	r2, [r3, #4]
            break;
 80149b0:	e033      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4a1b      	ldr	r2, [pc, #108]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149b6:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80149ba:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80149bc:	687c      	ldr	r4, [r7, #4]
 80149be:	f003 f89f 	bl	8017b00 <RegionGetVersion>
 80149c2:	60a0      	str	r0, [r4, #8]
            break;
 80149c4:	e029      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80149c6:	4b17      	ldr	r3, [pc, #92]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	605a      	str	r2, [r3, #4]
            break;
 80149d0:	e023      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80149d2:	4b14      	ldr	r3, [pc, #80]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149d4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	809a      	strh	r2, [r3, #4]
            break;
 80149dc:	e01d      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80149de:	4b11      	ldr	r3, [pc, #68]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149e0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	809a      	strh	r2, [r3, #4]
            break;
 80149e8:	e017      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80149ea:	4b0e      	ldr	r3, [pc, #56]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149ec:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	809a      	strh	r2, [r3, #4]
            break;
 80149f4:	e011      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80149f6:	4b0b      	ldr	r3, [pc, #44]	; (8014a24 <LoRaMacMibGetRequestConfirm+0x368>)
 80149f8:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	809a      	strh	r2, [r3, #4]
            break;
 8014a00:	e00b      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014a02:	2318      	movs	r3, #24
 8014a04:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014a06:	e008      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014a08:	2318      	movs	r3, #24
 8014a0a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014a0c:	e005      	b.n	8014a1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f000 ff96 	bl	8015940 <LoRaMacClassBMibGetRequestConfirm>
 8014a14:	4603      	mov	r3, r0
 8014a16:	75fb      	strb	r3, [r7, #23]
            break;
 8014a18:	bf00      	nop
        }
    }
    return status;
 8014a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	371c      	adds	r7, #28
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd90      	pop	{r4, r7, pc}
 8014a24:	20000e80 	.word	0x20000e80

08014a28 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b086      	sub	sp, #24
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014a30:	2300      	movs	r3, #0
 8014a32:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d101      	bne.n	8014a3e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a3a:	2303      	movs	r3, #3
 8014a3c:	e382      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014a3e:	4bbb      	ldr	r3, [pc, #748]	; (8014d2c <LoRaMacMibSetRequestConfirm+0x304>)
 8014a40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a44:	f003 0302 	and.w	r3, r3, #2
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d001      	beq.n	8014a50 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e379      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	2b3f      	cmp	r3, #63	; 0x3f
 8014a56:	f200 8353 	bhi.w	8015100 <LoRaMacMibSetRequestConfirm+0x6d8>
 8014a5a:	a201      	add	r2, pc, #4	; (adr r2, 8014a60 <LoRaMacMibSetRequestConfirm+0x38>)
 8014a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a60:	08014b61 	.word	0x08014b61
 8014a64:	08014b71 	.word	0x08014b71
 8014a68:	08014b8b 	.word	0x08014b8b
 8014a6c:	08014ba3 	.word	0x08014ba3
 8014a70:	08014bbb 	.word	0x08014bbb
 8014a74:	08014bc7 	.word	0x08014bc7
 8014a78:	08014bd3 	.word	0x08014bd3
 8014a7c:	08014bfd 	.word	0x08014bfd
 8014a80:	08014c23 	.word	0x08014c23
 8014a84:	08014c49 	.word	0x08014c49
 8014a88:	08014c6f 	.word	0x08014c6f
 8014a8c:	08014c95 	.word	0x08014c95
 8014a90:	08014cbb 	.word	0x08014cbb
 8014a94:	08014ce1 	.word	0x08014ce1
 8014a98:	08014d07 	.word	0x08014d07
 8014a9c:	08014d35 	.word	0x08014d35
 8014aa0:	08014d55 	.word	0x08014d55
 8014aa4:	08015101 	.word	0x08015101
 8014aa8:	08014d61 	.word	0x08014d61
 8014aac:	08014dd1 	.word	0x08014dd1
 8014ab0:	08014e11 	.word	0x08014e11
 8014ab4:	08014e73 	.word	0x08014e73
 8014ab8:	08014ee3 	.word	0x08014ee3
 8014abc:	08014eb3 	.word	0x08014eb3
 8014ac0:	08014f13 	.word	0x08014f13
 8014ac4:	08014f35 	.word	0x08014f35
 8014ac8:	08014f3f 	.word	0x08014f3f
 8014acc:	08014f49 	.word	0x08014f49
 8014ad0:	08014f53 	.word	0x08014f53
 8014ad4:	08014f5d 	.word	0x08014f5d
 8014ad8:	08014f67 	.word	0x08014f67
 8014adc:	08014f99 	.word	0x08014f99
 8014ae0:	0801500d 	.word	0x0801500d
 8014ae4:	08014fd3 	.word	0x08014fd3
 8014ae8:	0801503f 	.word	0x0801503f
 8014aec:	08015055 	.word	0x08015055
 8014af0:	0801506d 	.word	0x0801506d
 8014af4:	08015079 	.word	0x08015079
 8014af8:	08015085 	.word	0x08015085
 8014afc:	08015101 	.word	0x08015101
 8014b00:	0801508f 	.word	0x0801508f
 8014b04:	08015101 	.word	0x08015101
 8014b08:	08015101 	.word	0x08015101
 8014b0c:	08015101 	.word	0x08015101
 8014b10:	08015101 	.word	0x08015101
 8014b14:	08015101 	.word	0x08015101
 8014b18:	08015101 	.word	0x08015101
 8014b1c:	08015101 	.word	0x08015101
 8014b20:	08015101 	.word	0x08015101
 8014b24:	08015101 	.word	0x08015101
 8014b28:	08015101 	.word	0x08015101
 8014b2c:	08015101 	.word	0x08015101
 8014b30:	08015101 	.word	0x08015101
 8014b34:	08015101 	.word	0x08015101
 8014b38:	08015101 	.word	0x08015101
 8014b3c:	08015101 	.word	0x08015101
 8014b40:	08015101 	.word	0x08015101
 8014b44:	080150b9 	.word	0x080150b9
 8014b48:	080150c5 	.word	0x080150c5
 8014b4c:	080150d1 	.word	0x080150d1
 8014b50:	080150dd 	.word	0x080150dd
 8014b54:	080150e9 	.word	0x080150e9
 8014b58:	080150f5 	.word	0x080150f5
 8014b5c:	080150fb 	.word	0x080150fb
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	791b      	ldrb	r3, [r3, #4]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fd fb87 	bl	8012278 <SwitchClass>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	75fb      	strb	r3, [r7, #23]
            break;
 8014b6e:	e2e8      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	791b      	ldrb	r3, [r3, #4]
 8014b74:	2b02      	cmp	r3, #2
 8014b76:	d005      	beq.n	8014b84 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	791a      	ldrb	r2, [r3, #4]
 8014b7c:	4b6c      	ldr	r3, [pc, #432]	; (8014d30 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b7e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b82:	e2de      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b84:	2303      	movs	r3, #3
 8014b86:	75fb      	strb	r3, [r7, #23]
            break;
 8014b88:	e2db      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7fa fd1c 	bl	800f5cc <SecureElementSetDevEui>
 8014b94:	4603      	mov	r3, r0
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 82b8 	beq.w	801510c <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b9c:	2303      	movs	r3, #3
 8014b9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ba0:	e2b4      	b.n	801510c <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fa fd40 	bl	800f62c <SecureElementSetJoinEui>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f000 82ae 	beq.w	8015110 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bb4:	2303      	movs	r3, #3
 8014bb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bb8:	e2aa      	b.n	8015110 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	791a      	ldrb	r2, [r3, #4]
 8014bbe:	4b5c      	ldr	r3, [pc, #368]	; (8014d30 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bc0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014bc4:	e2bd      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	4a59      	ldr	r2, [pc, #356]	; (8014d30 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014bd0:	e2b7      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014bd2:	4b57      	ldr	r3, [pc, #348]	; (8014d30 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bd4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	4610      	mov	r0, r2
 8014be0:	f7fa fd54 	bl	800f68c <SecureElementSetDevAddr>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d002      	beq.n	8014bf0 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bea:	2303      	movs	r3, #3
 8014bec:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014bee:	e2a8      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	4a4e      	ldr	r2, [pc, #312]	; (8014d30 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bf6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014bfa:	e2a2      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d00b      	beq.n	8014c1c <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	685b      	ldr	r3, [r3, #4]
 8014c08:	4619      	mov	r1, r3
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	f001 fff4 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014c10:	4603      	mov	r3, r0
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	f000 827e 	beq.w	8015114 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c18:	2311      	movs	r3, #17
 8014c1a:	e293      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c1c:	2303      	movs	r3, #3
 8014c1e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c20:	e278      	b.n	8015114 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d00b      	beq.n	8014c42 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	4619      	mov	r1, r3
 8014c30:	2001      	movs	r0, #1
 8014c32:	f001 ffe1 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	f000 826d 	beq.w	8015118 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c3e:	2311      	movs	r3, #17
 8014c40:	e280      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c42:	2303      	movs	r3, #3
 8014c44:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c46:	e267      	b.n	8015118 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d00b      	beq.n	8014c68 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	4619      	mov	r1, r3
 8014c56:	2008      	movs	r0, #8
 8014c58:	f001 ffce 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	f000 825c 	beq.w	801511c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c64:	2311      	movs	r3, #17
 8014c66:	e26d      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c68:	2303      	movs	r3, #3
 8014c6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c6c:	e256      	b.n	801511c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	685b      	ldr	r3, [r3, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d00b      	beq.n	8014c8e <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	685b      	ldr	r3, [r3, #4]
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	2009      	movs	r0, #9
 8014c7e:	f001 ffbb 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f000 824b 	beq.w	8015120 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c8a:	2311      	movs	r3, #17
 8014c8c:	e25a      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c8e:	2303      	movs	r3, #3
 8014c90:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c92:	e245      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d00b      	beq.n	8014cb4 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	200c      	movs	r0, #12
 8014ca4:	f001 ffa8 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f000 823a 	beq.w	8015124 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cb0:	2311      	movs	r3, #17
 8014cb2:	e247      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cb4:	2303      	movs	r3, #3
 8014cb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cb8:	e234      	b.n	8015124 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d00b      	beq.n	8014cda <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	200d      	movs	r0, #13
 8014cca:	f001 ff95 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	f000 8229 	beq.w	8015128 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cd6:	2311      	movs	r3, #17
 8014cd8:	e234      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cda:	2303      	movs	r3, #3
 8014cdc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cde:	e223      	b.n	8015128 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00b      	beq.n	8014d00 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	4619      	mov	r1, r3
 8014cee:	200e      	movs	r0, #14
 8014cf0:	f001 ff82 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	f000 8218 	beq.w	801512c <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cfc:	2311      	movs	r3, #17
 8014cfe:	e221      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d00:	2303      	movs	r3, #3
 8014d02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d04:	e212      	b.n	801512c <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d00b      	beq.n	8014d26 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	4619      	mov	r1, r3
 8014d14:	200f      	movs	r0, #15
 8014d16:	f001 ff6f 	bl	8016bf8 <LoRaMacCryptoSetKey>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f000 8207 	beq.w	8015130 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d22:	2311      	movs	r3, #17
 8014d24:	e20e      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d26:	2303      	movs	r3, #3
 8014d28:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d2a:	e201      	b.n	8015130 <LoRaMacMibSetRequestConfirm+0x708>
 8014d2c:	20000978 	.word	0x20000978
 8014d30:	20000e80 	.word	0x20000e80
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	791a      	ldrb	r2, [r3, #4]
 8014d38:	4bb2      	ldr	r3, [pc, #712]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d3a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014d3e:	4bb2      	ldr	r3, [pc, #712]	; (8015008 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d42:	4ab0      	ldr	r2, [pc, #704]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d44:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014d48:	4610      	mov	r0, r2
 8014d4a:	4798      	blx	r3
            Radio.Sleep( );
 8014d4c:	4bae      	ldr	r3, [pc, #696]	; (8015008 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d50:	4798      	blx	r3
            break;
 8014d52:	e1f6      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	791a      	ldrb	r2, [r3, #4]
 8014d58:	4baa      	ldr	r3, [pc, #680]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d5a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014d5e:	e1f0      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	7a1b      	ldrb	r3, [r3, #8]
 8014d64:	b25b      	sxtb	r3, r3
 8014d66:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d68:	4ba6      	ldr	r3, [pc, #664]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d6a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d6e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014d70:	4ba4      	ldr	r3, [pc, #656]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d76:	f107 0108 	add.w	r1, r7, #8
 8014d7a:	2207      	movs	r2, #7
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f002 fd71 	bl	8017864 <RegionVerify>
 8014d82:	4603      	mov	r3, r0
 8014d84:	f083 0301 	eor.w	r3, r3, #1
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d002      	beq.n	8014d94 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d8e:	2303      	movs	r3, #3
 8014d90:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d92:	e1d6      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d9a:	4b9a      	ldr	r3, [pc, #616]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014da0:	f107 0108 	add.w	r1, r7, #8
 8014da4:	2200      	movs	r2, #0
 8014da6:	4618      	mov	r0, r3
 8014da8:	f002 fd5c 	bl	8017864 <RegionVerify>
 8014dac:	4603      	mov	r3, r0
 8014dae:	f083 0301 	eor.w	r3, r3, #1
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d002      	beq.n	8014dbe <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014db8:	2303      	movs	r3, #3
 8014dba:	75fb      	strb	r3, [r7, #23]
            break;
 8014dbc:	e1c1      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014dbe:	4b91      	ldr	r3, [pc, #580]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dc0:	687a      	ldr	r2, [r7, #4]
 8014dc2:	336c      	adds	r3, #108	; 0x6c
 8014dc4:	3204      	adds	r2, #4
 8014dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014dce:	e1b8      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	7a1b      	ldrb	r3, [r3, #8]
 8014dd4:	b25b      	sxtb	r3, r3
 8014dd6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014dd8:	4b8a      	ldr	r3, [pc, #552]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dda:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dde:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014de0:	4b88      	ldr	r3, [pc, #544]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014de2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014de6:	f107 0108 	add.w	r1, r7, #8
 8014dea:	2207      	movs	r2, #7
 8014dec:	4618      	mov	r0, r3
 8014dee:	f002 fd39 	bl	8017864 <RegionVerify>
 8014df2:	4603      	mov	r3, r0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d008      	beq.n	8014e0a <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014df8:	4b82      	ldr	r3, [pc, #520]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	33b4      	adds	r3, #180	; 0xb4
 8014dfe:	3204      	adds	r2, #4
 8014e00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e04:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e08:	e19b      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	75fb      	strb	r3, [r7, #23]
            break;
 8014e0e:	e198      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	7a1b      	ldrb	r3, [r3, #8]
 8014e14:	b25b      	sxtb	r3, r3
 8014e16:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e18:	4b7a      	ldr	r3, [pc, #488]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e1a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e1e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e20:	4b78      	ldr	r3, [pc, #480]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e26:	f107 0108 	add.w	r1, r7, #8
 8014e2a:	2207      	movs	r2, #7
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f002 fd19 	bl	8017864 <RegionVerify>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d019      	beq.n	8014e6c <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014e38:	4b72      	ldr	r3, [pc, #456]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e3a:	687a      	ldr	r2, [r7, #4]
 8014e3c:	3374      	adds	r3, #116	; 0x74
 8014e3e:	3204      	adds	r2, #4
 8014e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e44:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014e48:	4b6e      	ldr	r3, [pc, #440]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e4a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014e4e:	2b02      	cmp	r3, #2
 8014e50:	f040 8170 	bne.w	8015134 <LoRaMacMibSetRequestConfirm+0x70c>
 8014e54:	4b6b      	ldr	r3, [pc, #428]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e56:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f000 816a 	beq.w	8015134 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014e60:	4b69      	ldr	r3, [pc, #420]	; (8015008 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e64:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014e66:	f7fe fc91 	bl	801378c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e6a:	e163      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e6c:	2303      	movs	r3, #3
 8014e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8014e70:	e160      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	7a1b      	ldrb	r3, [r3, #8]
 8014e76:	b25b      	sxtb	r3, r3
 8014e78:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e7a:	4b62      	ldr	r3, [pc, #392]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e7c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e80:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e82:	4b60      	ldr	r3, [pc, #384]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e88:	f107 0108 	add.w	r1, r7, #8
 8014e8c:	2207      	movs	r2, #7
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f002 fce8 	bl	8017864 <RegionVerify>
 8014e94:	4603      	mov	r3, r0
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d008      	beq.n	8014eac <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e9a:	4b5a      	ldr	r3, [pc, #360]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e9c:	687a      	ldr	r2, [r7, #4]
 8014e9e:	33bc      	adds	r3, #188	; 0xbc
 8014ea0:	3204      	adds	r2, #4
 8014ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ea6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014eaa:	e14a      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014eac:	2303      	movs	r3, #3
 8014eae:	75fb      	strb	r3, [r7, #23]
            break;
 8014eb0:	e147      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014eb8:	2301      	movs	r3, #1
 8014eba:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014ebc:	4b51      	ldr	r3, [pc, #324]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ebe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ec2:	f107 020c 	add.w	r2, r7, #12
 8014ec6:	4611      	mov	r1, r2
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f002 fcf4 	bl	80178b6 <RegionChanMaskSet>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	f083 0301 	eor.w	r3, r3, #1
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	f000 812e 	beq.w	8015138 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014edc:	2303      	movs	r3, #3
 8014ede:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ee0:	e12a      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014eec:	4b45      	ldr	r3, [pc, #276]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014eee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ef2:	f107 020c 	add.w	r2, r7, #12
 8014ef6:	4611      	mov	r1, r2
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f002 fcdc 	bl	80178b6 <RegionChanMaskSet>
 8014efe:	4603      	mov	r3, r0
 8014f00:	f083 0301 	eor.w	r3, r3, #1
 8014f04:	b2db      	uxtb	r3, r3
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	f000 8118 	beq.w	801513c <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f0c:	2303      	movs	r3, #3
 8014f0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f10:	e114      	b.n	801513c <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	791b      	ldrb	r3, [r3, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d009      	beq.n	8014f2e <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f1e:	2b0f      	cmp	r3, #15
 8014f20:	d805      	bhi.n	8014f2e <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	791a      	ldrb	r2, [r3, #4]
 8014f26:	4b37      	ldr	r3, [pc, #220]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f28:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f2c:	e109      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f2e:	2303      	movs	r3, #3
 8014f30:	75fb      	strb	r3, [r7, #23]
            break;
 8014f32:	e106      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	4a32      	ldr	r2, [pc, #200]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f3a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014f3c:	e101      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	4a30      	ldr	r2, [pc, #192]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f44:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014f46:	e0fc      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	4a2d      	ldr	r2, [pc, #180]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f4e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014f50:	e0f7      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	4a2b      	ldr	r2, [pc, #172]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f58:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014f5a:	e0f2      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	4a28      	ldr	r2, [pc, #160]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f62:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014f64:	e0ed      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f6c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014f6e:	4b25      	ldr	r3, [pc, #148]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f74:	f107 0108 	add.w	r1, r7, #8
 8014f78:	2206      	movs	r2, #6
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f002 fc72 	bl	8017864 <RegionVerify>
 8014f80:	4603      	mov	r3, r0
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d005      	beq.n	8014f92 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014f86:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f8a:	4b1e      	ldr	r3, [pc, #120]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f8c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f90:	e0d7      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f92:	2303      	movs	r3, #3
 8014f94:	75fb      	strb	r3, [r7, #23]
            break;
 8014f96:	e0d4      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f9e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014fa0:	4b18      	ldr	r3, [pc, #96]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fa2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014fa6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014fa8:	4b16      	ldr	r3, [pc, #88]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014faa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fae:	f107 0108 	add.w	r1, r7, #8
 8014fb2:	2205      	movs	r2, #5
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f002 fc55 	bl	8017864 <RegionVerify>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d005      	beq.n	8014fcc <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014fc0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fc4:	4b0f      	ldr	r3, [pc, #60]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fca:	e0ba      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fcc:	2303      	movs	r3, #3
 8014fce:	75fb      	strb	r3, [r7, #23]
            break;
 8014fd0:	e0b7      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fd8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014fda:	4b0a      	ldr	r3, [pc, #40]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fdc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fe0:	f107 0108 	add.w	r1, r7, #8
 8014fe4:	220a      	movs	r2, #10
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f002 fc3c 	bl	8017864 <RegionVerify>
 8014fec:	4603      	mov	r3, r0
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d005      	beq.n	8014ffe <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014ff2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014ff6:	4b03      	ldr	r3, [pc, #12]	; (8015004 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ff8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ffc:	e0a1      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ffe:	2303      	movs	r3, #3
 8015000:	75fb      	strb	r3, [r7, #23]
            break;
 8015002:	e09e      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
 8015004:	20000e80 	.word	0x20000e80
 8015008:	0801fa14 	.word	0x0801fa14
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015012:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015014:	4b4d      	ldr	r3, [pc, #308]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801501a:	f107 0108 	add.w	r1, r7, #8
 801501e:	2209      	movs	r2, #9
 8015020:	4618      	mov	r0, r3
 8015022:	f002 fc1f 	bl	8017864 <RegionVerify>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d005      	beq.n	8015038 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801502c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015030:	4b46      	ldr	r3, [pc, #280]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015036:	e084      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015038:	2303      	movs	r3, #3
 801503a:	75fb      	strb	r3, [r7, #23]
            break;
 801503c:	e081      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	4a42      	ldr	r2, [pc, #264]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015048:	4b40      	ldr	r3, [pc, #256]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 801504a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801504e:	4a3f      	ldr	r2, [pc, #252]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015050:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015052:	e076      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	791a      	ldrb	r2, [r3, #4]
 8015058:	4b3c      	ldr	r3, [pc, #240]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 801505a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801505e:	4b3b      	ldr	r3, [pc, #236]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015060:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015064:	4b39      	ldr	r3, [pc, #228]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801506a:	e06a      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	4a36      	ldr	r2, [pc, #216]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015072:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8015076:	e064      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	4a33      	ldr	r2, [pc, #204]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 801507e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8015082:	e05e      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015084:	f7fe fde0 	bl	8013c48 <RestoreNvmData>
 8015088:	4603      	mov	r3, r0
 801508a:	75fb      	strb	r3, [r7, #23]
            break;
 801508c:	e059      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	799b      	ldrb	r3, [r3, #6]
 8015092:	2b01      	cmp	r3, #1
 8015094:	d80d      	bhi.n	80150b2 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8015096:	4a2d      	ldr	r2, [pc, #180]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6858      	ldr	r0, [r3, #4]
 80150a4:	f001 fce0 	bl	8016a68 <LoRaMacCryptoSetLrWanVersion>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d048      	beq.n	8015140 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80150ae:	2311      	movs	r3, #17
 80150b0:	e048      	b.n	8015144 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150b2:	2303      	movs	r3, #3
 80150b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80150b6:	e043      	b.n	8015140 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	4a23      	ldr	r2, [pc, #140]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 80150be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80150c2:	e03e      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	889a      	ldrh	r2, [r3, #4]
 80150c8:	4b20      	ldr	r3, [pc, #128]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 80150ca:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80150ce:	e038      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	889a      	ldrh	r2, [r3, #4]
 80150d4:	4b1d      	ldr	r3, [pc, #116]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 80150d6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80150da:	e032      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	889a      	ldrh	r2, [r3, #4]
 80150e0:	4b1a      	ldr	r3, [pc, #104]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 80150e2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80150e6:	e02c      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	889a      	ldrh	r2, [r3, #4]
 80150ec:	4b17      	ldr	r3, [pc, #92]	; (801514c <LoRaMacMibSetRequestConfirm+0x724>)
 80150ee:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80150f2:	e026      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150f4:	2318      	movs	r3, #24
 80150f6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150f8:	e023      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150fa:	2318      	movs	r3, #24
 80150fc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150fe:	e020      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f000 fc27 	bl	8015954 <LoRaMacMibClassBSetRequestConfirm>
 8015106:	4603      	mov	r3, r0
 8015108:	75fb      	strb	r3, [r7, #23]
            break;
 801510a:	e01a      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801510c:	bf00      	nop
 801510e:	e018      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015110:	bf00      	nop
 8015112:	e016      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015114:	bf00      	nop
 8015116:	e014      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015118:	bf00      	nop
 801511a:	e012      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801511c:	bf00      	nop
 801511e:	e010      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015120:	bf00      	nop
 8015122:	e00e      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015124:	bf00      	nop
 8015126:	e00c      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015128:	bf00      	nop
 801512a:	e00a      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801512c:	bf00      	nop
 801512e:	e008      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015130:	bf00      	nop
 8015132:	e006      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015134:	bf00      	nop
 8015136:	e004      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015138:	bf00      	nop
 801513a:	e002      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801513c:	bf00      	nop
 801513e:	e000      	b.n	8015142 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015140:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015142:	7dfb      	ldrb	r3, [r7, #23]
}
 8015144:	4618      	mov	r0, r3
 8015146:	3718      	adds	r7, #24
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	20000e80 	.word	0x20000e80

08015150 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015158:	2302      	movs	r3, #2
 801515a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801515c:	2300      	movs	r3, #0
 801515e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d101      	bne.n	801516a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015166:	2303      	movs	r3, #3
 8015168:	e13a      	b.n	80153e0 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801516a:	f7fc fca5 	bl	8011ab8 <LoRaMacIsBusy>
 801516e:	4603      	mov	r3, r0
 8015170:	2b00      	cmp	r3, #0
 8015172:	d001      	beq.n	8015178 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015174:	2301      	movs	r3, #1
 8015176:	e133      	b.n	80153e0 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015178:	f001 f90c 	bl	8016394 <LoRaMacConfirmQueueIsFull>
 801517c:	4603      	mov	r3, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d001      	beq.n	8015186 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8015182:	2301      	movs	r3, #1
 8015184:	e12c      	b.n	80153e0 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015186:	f001 f8f9 	bl	801637c <LoRaMacConfirmQueueGetCnt>
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	d104      	bne.n	801519a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015190:	2214      	movs	r2, #20
 8015192:	2100      	movs	r1, #0
 8015194:	4894      	ldr	r0, [pc, #592]	; (80153e8 <LoRaMacMlmeRequest+0x298>)
 8015196:	f004 fe7f 	bl	8019e98 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801519a:	4b94      	ldr	r3, [pc, #592]	; (80153ec <LoRaMacMlmeRequest+0x29c>)
 801519c:	2201      	movs	r2, #1
 801519e:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80151a2:	4a92      	ldr	r2, [pc, #584]	; (80153ec <LoRaMacMlmeRequest+0x29c>)
 80151a4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80151a8:	f043 0304 	orr.w	r3, r3, #4
 80151ac:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151b6:	2301      	movs	r3, #1
 80151b8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80151ba:	2300      	movs	r3, #0
 80151bc:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	3b01      	subs	r3, #1
 80151c4:	2b0d      	cmp	r3, #13
 80151c6:	f200 80e1 	bhi.w	801538c <LoRaMacMlmeRequest+0x23c>
 80151ca:	a201      	add	r2, pc, #4	; (adr r2, 80151d0 <LoRaMacMlmeRequest+0x80>)
 80151cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151d0:	08015209 	.word	0x08015209
 80151d4:	0801538d 	.word	0x0801538d
 80151d8:	0801538d 	.word	0x0801538d
 80151dc:	0801538d 	.word	0x0801538d
 80151e0:	08015281 	.word	0x08015281
 80151e4:	0801529f 	.word	0x0801529f
 80151e8:	080152af 	.word	0x080152af
 80151ec:	0801538d 	.word	0x0801538d
 80151f0:	0801538d 	.word	0x0801538d
 80151f4:	080152cb 	.word	0x080152cb
 80151f8:	0801538d 	.word	0x0801538d
 80151fc:	08015361 	.word	0x08015361
 8015200:	08015301 	.word	0x08015301
 8015204:	08015343 	.word	0x08015343
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015208:	4b78      	ldr	r3, [pc, #480]	; (80153ec <LoRaMacMlmeRequest+0x29c>)
 801520a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801520e:	f003 0320 	and.w	r3, r3, #32
 8015212:	2b00      	cmp	r3, #0
 8015214:	d001      	beq.n	801521a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015216:	2301      	movs	r3, #1
 8015218:	e0e2      	b.n	80153e0 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801521a:	2000      	movs	r0, #0
 801521c:	f7fe f95c 	bl	80134d8 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015220:	4b73      	ldr	r3, [pc, #460]	; (80153f0 <LoRaMacMlmeRequest+0x2a0>)
 8015222:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	795b      	ldrb	r3, [r3, #5]
 801522a:	b25b      	sxtb	r3, r3
 801522c:	2200      	movs	r2, #0
 801522e:	4619      	mov	r1, r3
 8015230:	f002 fc00 	bl	8017a34 <RegionAlternateDr>
 8015234:	4603      	mov	r3, r0
 8015236:	461a      	mov	r2, r3
 8015238:	4b6d      	ldr	r3, [pc, #436]	; (80153f0 <LoRaMacMlmeRequest+0x2a0>)
 801523a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015244:	4b6a      	ldr	r3, [pc, #424]	; (80153f0 <LoRaMacMlmeRequest+0x2a0>)
 8015246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801524a:	2307      	movs	r3, #7
 801524c:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801524e:	20ff      	movs	r0, #255	; 0xff
 8015250:	f7fd fec0 	bl	8012fd4 <SendReJoinReq>
 8015254:	4603      	mov	r3, r0
 8015256:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8015258:	7dfb      	ldrb	r3, [r7, #23]
 801525a:	2b00      	cmp	r3, #0
 801525c:	f000 8098 	beq.w	8015390 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015260:	4b63      	ldr	r3, [pc, #396]	; (80153f0 <LoRaMacMlmeRequest+0x2a0>)
 8015262:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	795b      	ldrb	r3, [r3, #5]
 801526a:	b25b      	sxtb	r3, r3
 801526c:	2201      	movs	r2, #1
 801526e:	4619      	mov	r1, r3
 8015270:	f002 fbe0 	bl	8017a34 <RegionAlternateDr>
 8015274:	4603      	mov	r3, r0
 8015276:	461a      	mov	r2, r3
 8015278:	4b5d      	ldr	r3, [pc, #372]	; (80153f0 <LoRaMacMlmeRequest+0x2a0>)
 801527a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801527e:	e087      	b.n	8015390 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015280:	2300      	movs	r3, #0
 8015282:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015284:	f107 030c 	add.w	r3, r7, #12
 8015288:	2200      	movs	r2, #0
 801528a:	4619      	mov	r1, r3
 801528c:	2002      	movs	r0, #2
 801528e:	f000 fcd1 	bl	8015c34 <LoRaMacCommandsAddCmd>
 8015292:	4603      	mov	r3, r0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d07d      	beq.n	8015394 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015298:	2313      	movs	r3, #19
 801529a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801529c:	e07a      	b.n	8015394 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	889b      	ldrh	r3, [r3, #4]
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fe fc7a 	bl	8013b9c <SetTxContinuousWave>
 80152a8:	4603      	mov	r3, r0
 80152aa:	75fb      	strb	r3, [r7, #23]
            break;
 80152ac:	e079      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	8898      	ldrh	r0, [r3, #4]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6899      	ldr	r1, [r3, #8]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	461a      	mov	r2, r3
 80152c0:	f7fe fca2 	bl	8013c08 <SetTxContinuousWave1>
 80152c4:	4603      	mov	r3, r0
 80152c6:	75fb      	strb	r3, [r7, #23]
            break;
 80152c8:	e06b      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152ca:	2300      	movs	r3, #0
 80152cc:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152ce:	f107 0308 	add.w	r3, r7, #8
 80152d2:	4619      	mov	r1, r3
 80152d4:	200d      	movs	r0, #13
 80152d6:	f000 fd2d 	bl	8015d34 <LoRaMacCommandsGetCmd>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d102      	bne.n	80152e6 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80152e4:	e058      	b.n	8015398 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152e6:	f107 030c 	add.w	r3, r7, #12
 80152ea:	2200      	movs	r2, #0
 80152ec:	4619      	mov	r1, r3
 80152ee:	200d      	movs	r0, #13
 80152f0:	f000 fca0 	bl	8015c34 <LoRaMacCommandsAddCmd>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d04e      	beq.n	8015398 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152fa:	2313      	movs	r3, #19
 80152fc:	75fb      	strb	r3, [r7, #23]
            break;
 80152fe:	e04b      	b.n	8015398 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015300:	4b3b      	ldr	r3, [pc, #236]	; (80153f0 <LoRaMacMlmeRequest+0x2a0>)
 8015302:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015306:	2b00      	cmp	r3, #0
 8015308:	d148      	bne.n	801539c <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	791b      	ldrb	r3, [r3, #4]
 801530e:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	791b      	ldrb	r3, [r3, #4]
 8015314:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015318:	b2db      	uxtb	r3, r3
 801531a:	4618      	mov	r0, r3
 801531c:	f000 faef 	bl	80158fe <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015320:	7dbb      	ldrb	r3, [r7, #22]
 8015322:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015324:	2300      	movs	r3, #0
 8015326:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015328:	f107 030c 	add.w	r3, r7, #12
 801532c:	2201      	movs	r2, #1
 801532e:	4619      	mov	r1, r3
 8015330:	2010      	movs	r0, #16
 8015332:	f000 fc7f 	bl	8015c34 <LoRaMacCommandsAddCmd>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d02f      	beq.n	801539c <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801533c:	2313      	movs	r3, #19
 801533e:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015340:	e02c      	b.n	801539c <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015342:	2300      	movs	r3, #0
 8015344:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015346:	f107 030c 	add.w	r3, r7, #12
 801534a:	2200      	movs	r2, #0
 801534c:	4619      	mov	r1, r3
 801534e:	2012      	movs	r0, #18
 8015350:	f000 fc70 	bl	8015c34 <LoRaMacCommandsAddCmd>
 8015354:	4603      	mov	r3, r0
 8015356:	2b00      	cmp	r3, #0
 8015358:	d022      	beq.n	80153a0 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801535a:	2313      	movs	r3, #19
 801535c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801535e:	e01f      	b.n	80153a0 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015360:	2301      	movs	r3, #1
 8015362:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015364:	f000 fa81 	bl	801586a <LoRaMacClassBIsAcquisitionInProgress>
 8015368:	4603      	mov	r3, r0
 801536a:	f083 0301 	eor.w	r3, r3, #1
 801536e:	b2db      	uxtb	r3, r3
 8015370:	2b00      	cmp	r3, #0
 8015372:	d008      	beq.n	8015386 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015374:	2000      	movs	r0, #0
 8015376:	f000 fa5a 	bl	801582e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801537a:	2000      	movs	r0, #0
 801537c:	f000 fa7c 	bl	8015878 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015380:	2300      	movs	r3, #0
 8015382:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015384:	e00d      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8015386:	2301      	movs	r3, #1
 8015388:	75fb      	strb	r3, [r7, #23]
            break;
 801538a:	e00a      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 801538c:	bf00      	nop
 801538e:	e008      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
            break;
 8015390:	bf00      	nop
 8015392:	e006      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
            break;
 8015394:	bf00      	nop
 8015396:	e004      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
            break;
 8015398:	bf00      	nop
 801539a:	e002      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
            break;
 801539c:	bf00      	nop
 801539e:	e000      	b.n	80153a2 <LoRaMacMlmeRequest+0x252>
            break;
 80153a0:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80153a2:	4b12      	ldr	r3, [pc, #72]	; (80153ec <LoRaMacMlmeRequest+0x29c>)
 80153a4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80153ac:	7dfb      	ldrb	r3, [r7, #23]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d010      	beq.n	80153d4 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80153b2:	f000 ffe3 	bl	801637c <LoRaMacConfirmQueueGetCnt>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d110      	bne.n	80153de <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 80153bc:	4b0b      	ldr	r3, [pc, #44]	; (80153ec <LoRaMacMlmeRequest+0x29c>)
 80153be:	2200      	movs	r2, #0
 80153c0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80153c4:	4a09      	ldr	r2, [pc, #36]	; (80153ec <LoRaMacMlmeRequest+0x29c>)
 80153c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80153ca:	f36f 0382 	bfc	r3, #2, #1
 80153ce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80153d2:	e004      	b.n	80153de <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80153d4:	f107 0310 	add.w	r3, r7, #16
 80153d8:	4618      	mov	r0, r3
 80153da:	f000 fe7b 	bl	80160d4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80153de:	7dfb      	ldrb	r3, [r7, #23]
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3718      	adds	r7, #24
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	20000dc0 	.word	0x20000dc0
 80153ec:	20000978 	.word	0x20000978
 80153f0:	20000e80 	.word	0x20000e80

080153f4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08c      	sub	sp, #48	; 0x30
 80153f8:	af02      	add	r7, sp, #8
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	460b      	mov	r3, r1
 80153fe:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015400:	2302      	movs	r3, #2
 8015402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015406:	2300      	movs	r3, #0
 8015408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 801540c:	2300      	movs	r3, #0
 801540e:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015410:	2300      	movs	r3, #0
 8015412:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015414:	2300      	movs	r3, #0
 8015416:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d101      	bne.n	8015422 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801541e:	2303      	movs	r3, #3
 8015420:	e0d4      	b.n	80155cc <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015422:	f7fc fb49 	bl	8011ab8 <LoRaMacIsBusy>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d001      	beq.n	8015430 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 801542c:	2301      	movs	r3, #1
 801542e:	e0cd      	b.n	80155cc <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015430:	2300      	movs	r3, #0
 8015432:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015434:	2214      	movs	r2, #20
 8015436:	2100      	movs	r1, #0
 8015438:	4866      	ldr	r0, [pc, #408]	; (80155d4 <LoRaMacMcpsRequest+0x1e0>)
 801543a:	f004 fd2d 	bl	8019e98 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801543e:	4b66      	ldr	r3, [pc, #408]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 8015440:	2201      	movs	r2, #1
 8015442:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015446:	4b64      	ldr	r3, [pc, #400]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 8015448:	2201      	movs	r2, #1
 801544a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	2b03      	cmp	r3, #3
 8015454:	d03d      	beq.n	80154d2 <LoRaMacMcpsRequest+0xde>
 8015456:	2b03      	cmp	r3, #3
 8015458:	dc4f      	bgt.n	80154fa <LoRaMacMcpsRequest+0x106>
 801545a:	2b00      	cmp	r3, #0
 801545c:	d002      	beq.n	8015464 <LoRaMacMcpsRequest+0x70>
 801545e:	2b01      	cmp	r3, #1
 8015460:	d019      	beq.n	8015496 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015462:	e04a      	b.n	80154fa <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015464:	2301      	movs	r3, #1
 8015466:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015468:	4b5b      	ldr	r3, [pc, #364]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 801546a:	2201      	movs	r2, #1
 801546c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015470:	7b3b      	ldrb	r3, [r7, #12]
 8015472:	2202      	movs	r2, #2
 8015474:	f362 1347 	bfi	r3, r2, #5, #3
 8015478:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	791b      	ldrb	r3, [r3, #4]
 801547e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	689b      	ldr	r3, [r3, #8]
 8015486:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	899b      	ldrh	r3, [r3, #12]
 801548c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	7b9b      	ldrb	r3, [r3, #14]
 8015492:	777b      	strb	r3, [r7, #29]
            break;
 8015494:	e032      	b.n	80154fc <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015496:	2301      	movs	r3, #1
 8015498:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	7bdb      	ldrb	r3, [r3, #15]
 801549e:	2b08      	cmp	r3, #8
 80154a0:	bf28      	it	cs
 80154a2:	2308      	movcs	r3, #8
 80154a4:	b2da      	uxtb	r2, r3
 80154a6:	4b4c      	ldr	r3, [pc, #304]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 80154a8:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80154ac:	7b3b      	ldrb	r3, [r7, #12]
 80154ae:	2204      	movs	r2, #4
 80154b0:	f362 1347 	bfi	r3, r2, #5, #3
 80154b4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	791b      	ldrb	r3, [r3, #4]
 80154ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	899b      	ldrh	r3, [r3, #12]
 80154c8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	7b9b      	ldrb	r3, [r3, #14]
 80154ce:	777b      	strb	r3, [r7, #29]
            break;
 80154d0:	e014      	b.n	80154fc <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80154d2:	2301      	movs	r3, #1
 80154d4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80154d6:	4b40      	ldr	r3, [pc, #256]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 80154d8:	2201      	movs	r2, #1
 80154da:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80154de:	7b3b      	ldrb	r3, [r7, #12]
 80154e0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80154e4:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	891b      	ldrh	r3, [r3, #8]
 80154f0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	7a9b      	ldrb	r3, [r3, #10]
 80154f6:	777b      	strb	r3, [r7, #29]
            break;
 80154f8:	e000      	b.n	80154fc <LoRaMacMcpsRequest+0x108>
            break;
 80154fa:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80154fc:	2302      	movs	r3, #2
 80154fe:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015500:	4b36      	ldr	r3, [pc, #216]	; (80155dc <LoRaMacMcpsRequest+0x1e8>)
 8015502:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015506:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015508:	4b34      	ldr	r3, [pc, #208]	; (80155dc <LoRaMacMcpsRequest+0x1e8>)
 801550a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801550e:	f107 0214 	add.w	r2, r7, #20
 8015512:	4611      	mov	r1, r2
 8015514:	4618      	mov	r0, r3
 8015516:	f002 f96a 	bl	80177ee <RegionGetPhyParam>
 801551a:	4603      	mov	r3, r0
 801551c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	b25b      	sxtb	r3, r3
 8015522:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015526:	4293      	cmp	r3, r2
 8015528:	bfb8      	it	lt
 801552a:	4613      	movlt	r3, r2
 801552c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801552e:	7f3b      	ldrb	r3, [r7, #28]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d044      	beq.n	80155be <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015534:	4b29      	ldr	r3, [pc, #164]	; (80155dc <LoRaMacMcpsRequest+0x1e8>)
 8015536:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801553a:	f083 0301 	eor.w	r3, r3, #1
 801553e:	b2db      	uxtb	r3, r3
 8015540:	2b00      	cmp	r3, #0
 8015542:	d019      	beq.n	8015578 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015544:	7f7b      	ldrb	r3, [r7, #29]
 8015546:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015548:	4b24      	ldr	r3, [pc, #144]	; (80155dc <LoRaMacMcpsRequest+0x1e8>)
 801554a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801554e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015550:	4b22      	ldr	r3, [pc, #136]	; (80155dc <LoRaMacMcpsRequest+0x1e8>)
 8015552:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015556:	f107 0108 	add.w	r1, r7, #8
 801555a:	2205      	movs	r2, #5
 801555c:	4618      	mov	r0, r3
 801555e:	f002 f981 	bl	8017864 <RegionVerify>
 8015562:	4603      	mov	r3, r0
 8015564:	2b00      	cmp	r3, #0
 8015566:	d005      	beq.n	8015574 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015568:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801556c:	4b1b      	ldr	r3, [pc, #108]	; (80155dc <LoRaMacMcpsRequest+0x1e8>)
 801556e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015572:	e001      	b.n	8015578 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015574:	2303      	movs	r3, #3
 8015576:	e029      	b.n	80155cc <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015578:	8bfa      	ldrh	r2, [r7, #30]
 801557a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801557e:	f107 000c 	add.w	r0, r7, #12
 8015582:	78fb      	ldrb	r3, [r7, #3]
 8015584:	9300      	str	r3, [sp, #0]
 8015586:	4613      	mov	r3, r2
 8015588:	6a3a      	ldr	r2, [r7, #32]
 801558a:	f7fd fc45 	bl	8012e18 <Send>
 801558e:	4603      	mov	r3, r0
 8015590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015598:	2b00      	cmp	r3, #0
 801559a:	d10c      	bne.n	80155b6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	781a      	ldrb	r2, [r3, #0]
 80155a0:	4b0d      	ldr	r3, [pc, #52]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 80155a2:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80155a6:	4a0c      	ldr	r2, [pc, #48]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 80155a8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80155ac:	f043 0301 	orr.w	r3, r3, #1
 80155b0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80155b4:	e003      	b.n	80155be <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80155b6:	4b08      	ldr	r3, [pc, #32]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 80155b8:	2200      	movs	r2, #0
 80155ba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80155be:	4b06      	ldr	r3, [pc, #24]	; (80155d8 <LoRaMacMcpsRequest+0x1e4>)
 80155c0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	611a      	str	r2, [r3, #16]

    return status;
 80155c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3728      	adds	r7, #40	; 0x28
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	20000dac 	.word	0x20000dac
 80155d8:	20000978 	.word	0x20000978
 80155dc:	20000e80 	.word	0x20000e80

080155e0 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	4603      	mov	r3, r0
 80155e8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80155ea:	79fb      	ldrb	r3, [r7, #7]
 80155ec:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80155ee:	4b0d      	ldr	r3, [pc, #52]	; (8015624 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155f4:	f107 010c 	add.w	r1, r7, #12
 80155f8:	220f      	movs	r2, #15
 80155fa:	4618      	mov	r0, r3
 80155fc:	f002 f932 	bl	8017864 <RegionVerify>
 8015600:	4603      	mov	r3, r0
 8015602:	2b00      	cmp	r3, #0
 8015604:	d00a      	beq.n	801561c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015606:	4a07      	ldr	r2, [pc, #28]	; (8015624 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015608:	79fb      	ldrb	r3, [r7, #7]
 801560a:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801560e:	4a06      	ldr	r2, [pc, #24]	; (8015628 <LoRaMacTestSetDutyCycleOn+0x48>)
 8015610:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015614:	f043 0320 	orr.w	r3, r3, #32
 8015618:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 801561c:	bf00      	nop
 801561e:	3710      	adds	r7, #16
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	20000e80 	.word	0x20000e80
 8015628:	20000978 	.word	0x20000978

0801562c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015630:	f7fe ff6c 	bl	801450c <LoRaMacStop>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d115      	bne.n	8015666 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801563a:	480c      	ldr	r0, [pc, #48]	; (801566c <LoRaMacDeInitialization+0x40>)
 801563c:	f008 fd8c 	bl	801e158 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015640:	480b      	ldr	r0, [pc, #44]	; (8015670 <LoRaMacDeInitialization+0x44>)
 8015642:	f008 fd89 	bl	801e158 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015646:	480b      	ldr	r0, [pc, #44]	; (8015674 <LoRaMacDeInitialization+0x48>)
 8015648:	f008 fd86 	bl	801e158 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 801564c:	480a      	ldr	r0, [pc, #40]	; (8015678 <LoRaMacDeInitialization+0x4c>)
 801564e:	f008 fd83 	bl	801e158 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015652:	f000 f95e 	bl	8015912 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015656:	2000      	movs	r0, #0
 8015658:	f7fd ff3e 	bl	80134d8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801565c:	4b07      	ldr	r3, [pc, #28]	; (801567c <LoRaMacDeInitialization+0x50>)
 801565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015660:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015662:	2300      	movs	r3, #0
 8015664:	e000      	b.n	8015668 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015666:	2301      	movs	r3, #1
    }
}
 8015668:	4618      	mov	r0, r3
 801566a:	bd80      	pop	{r7, pc}
 801566c:	20000ce0 	.word	0x20000ce0
 8015670:	20000cf8 	.word	0x20000cf8
 8015674:	20000d10 	.word	0x20000d10
 8015678:	20000d6c 	.word	0x20000d6c
 801567c:	0801fa14 	.word	0x0801fa14

08015680 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b08c      	sub	sp, #48	; 0x30
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	60b9      	str	r1, [r7, #8]
 801568a:	607a      	str	r2, [r7, #4]
 801568c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801568e:	2300      	movs	r3, #0
 8015690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	7c1b      	ldrb	r3, [r3, #16]
 8015698:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	7c5b      	ldrb	r3, [r3, #17]
 80156a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	689a      	ldr	r2, [r3, #8]
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	795b      	ldrb	r3, [r3, #5]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f000 808b 	beq.w	80157cc <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80156b6:	2302      	movs	r3, #2
 80156b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	7c9b      	ldrb	r3, [r3, #18]
 80156c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	7cdb      	ldrb	r3, [r3, #19]
 80156c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156cc:	4611      	mov	r1, r2
 80156ce:	4618      	mov	r0, r3
 80156d0:	f002 f88d 	bl	80177ee <RegionGetPhyParam>
 80156d4:	4603      	mov	r3, r0
 80156d6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80156d8:	6a3b      	ldr	r3, [r7, #32]
 80156da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80156de:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80156e2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80156e6:	4293      	cmp	r3, r2
 80156e8:	bfb8      	it	lt
 80156ea:	4613      	movlt	r3, r2
 80156ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80156f0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80156f4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d106      	bne.n	801570a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	2200      	movs	r2, #0
 8015700:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8015702:	2300      	movs	r3, #0
 8015704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015708:	e060      	b.n	80157cc <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	689b      	ldr	r3, [r3, #8]
 801570e:	68fa      	ldr	r2, [r7, #12]
 8015710:	8992      	ldrh	r2, [r2, #12]
 8015712:	4293      	cmp	r3, r2
 8015714:	d303      	bcc.n	801571e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015716:	2301      	movs	r3, #1
 8015718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801571c:	e002      	b.n	8015724 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801571e:	2300      	movs	r3, #0
 8015720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	689b      	ldr	r3, [r3, #8]
 8015728:	68fa      	ldr	r2, [r7, #12]
 801572a:	8992      	ldrh	r2, [r2, #12]
 801572c:	4611      	mov	r1, r2
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	89d2      	ldrh	r2, [r2, #14]
 8015732:	440a      	add	r2, r1
 8015734:	4293      	cmp	r3, r2
 8015736:	d349      	bcc.n	80157cc <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015738:	2308      	movs	r3, #8
 801573a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	7cdb      	ldrb	r3, [r3, #19]
 8015742:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015746:	4611      	mov	r1, r2
 8015748:	4618      	mov	r0, r3
 801574a:	f002 f850 	bl	80177ee <RegionGetPhyParam>
 801574e:	4603      	mov	r3, r0
 8015750:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8015752:	6a3b      	ldr	r3, [r7, #32]
 8015754:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	689b      	ldr	r3, [r3, #8]
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	89d2      	ldrh	r2, [r2, #14]
 8015760:	fbb3 f1f2 	udiv	r1, r3, r2
 8015764:	fb01 f202 	mul.w	r2, r1, r2
 8015768:	1a9b      	subs	r3, r3, r2
 801576a:	2b01      	cmp	r3, #1
 801576c:	d12e      	bne.n	80157cc <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801576e:	2322      	movs	r3, #34	; 0x22
 8015770:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015774:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015778:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	7c9b      	ldrb	r3, [r3, #18]
 8015780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	7cdb      	ldrb	r3, [r3, #19]
 8015788:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801578c:	4611      	mov	r1, r2
 801578e:	4618      	mov	r0, r3
 8015790:	f002 f82d 	bl	80177ee <RegionGetPhyParam>
 8015794:	4603      	mov	r3, r0
 8015796:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015798:	6a3b      	ldr	r3, [r7, #32]
 801579a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801579e:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80157a2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d110      	bne.n	80157cc <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80157aa:	2300      	movs	r3, #0
 80157ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	791b      	ldrb	r3, [r3, #4]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d009      	beq.n	80157cc <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80157b8:	2302      	movs	r3, #2
 80157ba:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	7cdb      	ldrb	r3, [r3, #19]
 80157c0:	f107 0214 	add.w	r2, r7, #20
 80157c4:	4611      	mov	r1, r2
 80157c6:	4618      	mov	r0, r3
 80157c8:	f002 f83a 	bl	8017840 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80157d2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157da:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80157dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3730      	adds	r7, #48	; 0x30
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
 80157f4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	789b      	ldrb	r3, [r3, #2]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d107      	bne.n	801580e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	68b9      	ldr	r1, [r7, #8]
 8015804:	68f8      	ldr	r0, [r7, #12]
 8015806:	f7ff ff3b 	bl	8015680 <CalcNextV10X>
 801580a:	4603      	mov	r3, r0
 801580c:	e000      	b.n	8015810 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801580e:	2300      	movs	r3, #0
}
 8015810:	4618      	mov	r0, r3
 8015812:	3710      	adds	r7, #16
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}

08015818 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	60f8      	str	r0, [r7, #12]
 8015820:	60b9      	str	r1, [r7, #8]
 8015822:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015824:	bf00      	nop
 8015826:	3714      	adds	r7, #20
 8015828:	46bd      	mov	sp, r7
 801582a:	bc80      	pop	{r7}
 801582c:	4770      	bx	lr

0801582e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801582e:	b480      	push	{r7}
 8015830:	b083      	sub	sp, #12
 8015832:	af00      	add	r7, sp, #0
 8015834:	4603      	mov	r3, r0
 8015836:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015838:	bf00      	nop
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	bc80      	pop	{r7}
 8015840:	4770      	bx	lr

08015842 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015842:	b480      	push	{r7}
 8015844:	b083      	sub	sp, #12
 8015846:	af00      	add	r7, sp, #0
 8015848:	4603      	mov	r3, r0
 801584a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801584c:	bf00      	nop
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	bc80      	pop	{r7}
 8015854:	4770      	bx	lr

08015856 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015856:	b480      	push	{r7}
 8015858:	b083      	sub	sp, #12
 801585a:	af00      	add	r7, sp, #0
 801585c:	4603      	mov	r3, r0
 801585e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015860:	bf00      	nop
 8015862:	370c      	adds	r7, #12
 8015864:	46bd      	mov	sp, r7
 8015866:	bc80      	pop	{r7}
 8015868:	4770      	bx	lr

0801586a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801586a:	b480      	push	{r7}
 801586c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801586e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015870:	4618      	mov	r0, r3
 8015872:	46bd      	mov	sp, r7
 8015874:	bc80      	pop	{r7}
 8015876:	4770      	bx	lr

08015878 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	bc80      	pop	{r7}
 8015888:	4770      	bx	lr

0801588a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801588a:	b480      	push	{r7}
 801588c:	b083      	sub	sp, #12
 801588e:	af00      	add	r7, sp, #0
 8015890:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015892:	bf00      	nop
 8015894:	370c      	adds	r7, #12
 8015896:	46bd      	mov	sp, r7
 8015898:	bc80      	pop	{r7}
 801589a:	4770      	bx	lr

0801589c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801589c:	b480      	push	{r7}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158a4:	bf00      	nop
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bc80      	pop	{r7}
 80158ac:	4770      	bx	lr

080158ae <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80158ae:	b480      	push	{r7}
 80158b0:	b083      	sub	sp, #12
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
 80158b6:	460b      	mov	r3, r1
 80158b8:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80158ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158bc:	4618      	mov	r0, r3
 80158be:	370c      	adds	r7, #12
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bc80      	pop	{r7}
 80158c4:	4770      	bx	lr

080158c6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80158c6:	b480      	push	{r7}
 80158c8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158ca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bc80      	pop	{r7}
 80158d2:	4770      	bx	lr

080158d4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80158d4:	b480      	push	{r7}
 80158d6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158da:	4618      	mov	r0, r3
 80158dc:	46bd      	mov	sp, r7
 80158de:	bc80      	pop	{r7}
 80158e0:	4770      	bx	lr

080158e2 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80158e2:	b480      	push	{r7}
 80158e4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158e6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bc80      	pop	{r7}
 80158ee:	4770      	bx	lr

080158f0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80158f0:	b480      	push	{r7}
 80158f2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158f4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bc80      	pop	{r7}
 80158fc:	4770      	bx	lr

080158fe <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80158fe:	b480      	push	{r7}
 8015900:	b083      	sub	sp, #12
 8015902:	af00      	add	r7, sp, #0
 8015904:	4603      	mov	r3, r0
 8015906:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015908:	bf00      	nop
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	bc80      	pop	{r7}
 8015910:	4770      	bx	lr

08015912 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015912:	b480      	push	{r7}
 8015914:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015916:	bf00      	nop
 8015918:	46bd      	mov	sp, r7
 801591a:	bc80      	pop	{r7}
 801591c:	4770      	bx	lr

0801591e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801591e:	b480      	push	{r7}
 8015920:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015922:	bf00      	nop
 8015924:	46bd      	mov	sp, r7
 8015926:	bc80      	pop	{r7}
 8015928:	4770      	bx	lr

0801592a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801592a:	b480      	push	{r7}
 801592c:	b083      	sub	sp, #12
 801592e:	af00      	add	r7, sp, #0
 8015930:	4603      	mov	r3, r0
 8015932:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015934:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015936:	4618      	mov	r0, r3
 8015938:	370c      	adds	r7, #12
 801593a:	46bd      	mov	sp, r7
 801593c:	bc80      	pop	{r7}
 801593e:	4770      	bx	lr

08015940 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015948:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801594a:	4618      	mov	r0, r3
 801594c:	370c      	adds	r7, #12
 801594e:	46bd      	mov	sp, r7
 8015950:	bc80      	pop	{r7}
 8015952:	4770      	bx	lr

08015954 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801595c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801595e:	4618      	mov	r0, r3
 8015960:	370c      	adds	r7, #12
 8015962:	46bd      	mov	sp, r7
 8015964:	bc80      	pop	{r7}
 8015966:	4770      	bx	lr

08015968 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015968:	b480      	push	{r7}
 801596a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801596c:	bf00      	nop
 801596e:	46bd      	mov	sp, r7
 8015970:	bc80      	pop	{r7}
 8015972:	4770      	bx	lr

08015974 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015974:	b480      	push	{r7}
 8015976:	b083      	sub	sp, #12
 8015978:	af00      	add	r7, sp, #0
 801597a:	4603      	mov	r3, r0
 801597c:	6039      	str	r1, [r7, #0]
 801597e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015980:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015982:	4618      	mov	r0, r3
 8015984:	370c      	adds	r7, #12
 8015986:	46bd      	mov	sp, r7
 8015988:	bc80      	pop	{r7}
 801598a:	4770      	bx	lr

0801598c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	4603      	mov	r3, r0
 8015994:	603a      	str	r2, [r7, #0]
 8015996:	80fb      	strh	r3, [r7, #6]
 8015998:	460b      	mov	r3, r1
 801599a:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599c:	bf00      	nop
 801599e:	370c      	adds	r7, #12
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bc80      	pop	{r7}
 80159a4:	4770      	bx	lr

080159a6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80159a6:	b480      	push	{r7}
 80159a8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159aa:	bf00      	nop
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bc80      	pop	{r7}
 80159b0:	4770      	bx	lr

080159b2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80159b2:	b480      	push	{r7}
 80159b4:	b083      	sub	sp, #12
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80159ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159bc:	4618      	mov	r0, r3
 80159be:	370c      	adds	r7, #12
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bc80      	pop	{r7}
 80159c4:	4770      	bx	lr

080159c6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80159c6:	b480      	push	{r7}
 80159c8:	b083      	sub	sp, #12
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80159ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	370c      	adds	r7, #12
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bc80      	pop	{r7}
 80159d8:	4770      	bx	lr

080159da <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80159da:	b480      	push	{r7}
 80159dc:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159de:	bf00      	nop
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bc80      	pop	{r7}
 80159e4:	4770      	bx	lr

080159e6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80159e6:	b480      	push	{r7}
 80159e8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ea:	bf00      	nop
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bc80      	pop	{r7}
 80159f0:	4770      	bx	lr

080159f2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80159f2:	b480      	push	{r7}
 80159f4:	b085      	sub	sp, #20
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80159fe:	2300      	movs	r3, #0
 8015a00:	81fb      	strh	r3, [r7, #14]
 8015a02:	e00a      	b.n	8015a1a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015a04:	89fb      	ldrh	r3, [r7, #14]
 8015a06:	68ba      	ldr	r2, [r7, #8]
 8015a08:	4413      	add	r3, r2
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d001      	beq.n	8015a14 <IsSlotFree+0x22>
        {
            return false;
 8015a10:	2300      	movs	r3, #0
 8015a12:	e006      	b.n	8015a22 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a14:	89fb      	ldrh	r3, [r7, #14]
 8015a16:	3301      	adds	r3, #1
 8015a18:	81fb      	strh	r3, [r7, #14]
 8015a1a:	89fb      	ldrh	r3, [r7, #14]
 8015a1c:	2b0f      	cmp	r3, #15
 8015a1e:	d9f1      	bls.n	8015a04 <IsSlotFree+0x12>
        }
    }
    return true;
 8015a20:	2301      	movs	r3, #1
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3714      	adds	r7, #20
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bc80      	pop	{r7}
 8015a2a:	4770      	bx	lr

08015a2c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015a32:	2300      	movs	r3, #0
 8015a34:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a36:	e007      	b.n	8015a48 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015a38:	79fb      	ldrb	r3, [r7, #7]
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015a3e:	79fb      	ldrb	r3, [r7, #7]
 8015a40:	2b0f      	cmp	r3, #15
 8015a42:	d101      	bne.n	8015a48 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015a44:	2300      	movs	r3, #0
 8015a46:	e012      	b.n	8015a6e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a48:	79fb      	ldrb	r3, [r7, #7]
 8015a4a:	011b      	lsls	r3, r3, #4
 8015a4c:	3308      	adds	r3, #8
 8015a4e:	4a0a      	ldr	r2, [pc, #40]	; (8015a78 <MallocNewMacCommandSlot+0x4c>)
 8015a50:	4413      	add	r3, r2
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7ff ffcd 	bl	80159f2 <IsSlotFree>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	f083 0301 	eor.w	r3, r3, #1
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d1e9      	bne.n	8015a38 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015a64:	79fb      	ldrb	r3, [r7, #7]
 8015a66:	011b      	lsls	r3, r3, #4
 8015a68:	3308      	adds	r3, #8
 8015a6a:	4a03      	ldr	r2, [pc, #12]	; (8015a78 <MallocNewMacCommandSlot+0x4c>)
 8015a6c:	4413      	add	r3, r2
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	3708      	adds	r7, #8
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}
 8015a76:	bf00      	nop
 8015a78:	20001600 	.word	0x20001600

08015a7c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d101      	bne.n	8015a8e <FreeMacCommandSlot+0x12>
    {
        return false;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	e005      	b.n	8015a9a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015a8e:	2210      	movs	r2, #16
 8015a90:	2100      	movs	r1, #0
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f004 fa00 	bl	8019e98 <memset1>

    return true;
 8015a98:	2301      	movs	r3, #1
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3708      	adds	r7, #8
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015aa2:	b480      	push	{r7}
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d101      	bne.n	8015ab4 <LinkedListInit+0x12>
    {
        return false;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	e006      	b.n	8015ac2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2200      	movs	r2, #0
 8015abe:	605a      	str	r2, [r3, #4]

    return true;
 8015ac0:	2301      	movs	r3, #1
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	370c      	adds	r7, #12
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bc80      	pop	{r7}
 8015aca:	4770      	bx	lr

08015acc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015acc:	b480      	push	{r7}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d002      	beq.n	8015ae2 <LinkedListAdd+0x16>
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d101      	bne.n	8015ae6 <LinkedListAdd+0x1a>
    {
        return false;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	e015      	b.n	8015b12 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d102      	bne.n	8015af4 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	683a      	ldr	r2, [r7, #0]
 8015af2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d003      	beq.n	8015b04 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	683a      	ldr	r2, [r7, #0]
 8015b02:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	2200      	movs	r2, #0
 8015b08:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	683a      	ldr	r2, [r7, #0]
 8015b0e:	605a      	str	r2, [r3, #4]

    return true;
 8015b10:	2301      	movs	r3, #1
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	370c      	adds	r7, #12
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bc80      	pop	{r7}
 8015b1a:	4770      	bx	lr

08015b1c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b085      	sub	sp, #20
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d002      	beq.n	8015b32 <LinkedListGetPrevious+0x16>
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d101      	bne.n	8015b36 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015b32:	2300      	movs	r3, #0
 8015b34:	e016      	b.n	8015b64 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015b3c:	683a      	ldr	r2, [r7, #0]
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d00c      	beq.n	8015b5e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b44:	e002      	b.n	8015b4c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d007      	beq.n	8015b62 <LinkedListGetPrevious+0x46>
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	683a      	ldr	r2, [r7, #0]
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d1f4      	bne.n	8015b46 <LinkedListGetPrevious+0x2a>
 8015b5c:	e001      	b.n	8015b62 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015b62:	68fb      	ldr	r3, [r7, #12]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3714      	adds	r7, #20
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bc80      	pop	{r7}
 8015b6c:	4770      	bx	lr

08015b6e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b084      	sub	sp, #16
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	6078      	str	r0, [r7, #4]
 8015b76:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d002      	beq.n	8015b84 <LinkedListRemove+0x16>
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d101      	bne.n	8015b88 <LinkedListRemove+0x1a>
    {
        return false;
 8015b84:	2300      	movs	r3, #0
 8015b86:	e020      	b.n	8015bca <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015b88:	6839      	ldr	r1, [r7, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f7ff ffc6 	bl	8015b1c <LinkedListGetPrevious>
 8015b90:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	683a      	ldr	r2, [r7, #0]
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d103      	bne.n	8015ba4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	681a      	ldr	r2, [r3, #0]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	685b      	ldr	r3, [r3, #4]
 8015ba8:	683a      	ldr	r2, [r7, #0]
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d102      	bne.n	8015bb4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	68fa      	ldr	r2, [r7, #12]
 8015bb2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d003      	beq.n	8015bc2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]

    return true;
 8015bc8:	2301      	movs	r3, #1
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3710      	adds	r7, #16
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015bd2:	b480      	push	{r7}
 8015bd4:	b083      	sub	sp, #12
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	4603      	mov	r3, r0
 8015bda:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015bdc:	79fb      	ldrb	r3, [r7, #7]
 8015bde:	2b05      	cmp	r3, #5
 8015be0:	d004      	beq.n	8015bec <IsSticky+0x1a>
 8015be2:	2b05      	cmp	r3, #5
 8015be4:	db04      	blt.n	8015bf0 <IsSticky+0x1e>
 8015be6:	3b08      	subs	r3, #8
 8015be8:	2b02      	cmp	r3, #2
 8015bea:	d801      	bhi.n	8015bf0 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015bec:	2301      	movs	r3, #1
 8015bee:	e000      	b.n	8015bf2 <IsSticky+0x20>
        default:
            return false;
 8015bf0:	2300      	movs	r3, #0
    }
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	370c      	adds	r7, #12
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bc80      	pop	{r7}
 8015bfa:	4770      	bx	lr

08015bfc <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	4603      	mov	r3, r0
 8015c04:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015c06:	2300      	movs	r3, #0
    }
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	370c      	adds	r7, #12
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bc80      	pop	{r7}
 8015c10:	4770      	bx	lr
	...

08015c14 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015c18:	22fc      	movs	r2, #252	; 0xfc
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	4804      	ldr	r0, [pc, #16]	; (8015c30 <LoRaMacCommandsInit+0x1c>)
 8015c1e:	f004 f93b 	bl	8019e98 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015c22:	4803      	ldr	r0, [pc, #12]	; (8015c30 <LoRaMacCommandsInit+0x1c>)
 8015c24:	f7ff ff3d 	bl	8015aa2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c28:	2300      	movs	r3, #0
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	20001600 	.word	0x20001600

08015c34 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b086      	sub	sp, #24
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	60b9      	str	r1, [r7, #8]
 8015c3e:	607a      	str	r2, [r7, #4]
 8015c40:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e03b      	b.n	8015cc4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015c4c:	f7ff feee 	bl	8015a2c <MallocNewMacCommandSlot>
 8015c50:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d101      	bne.n	8015c5c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015c58:	2302      	movs	r3, #2
 8015c5a:	e033      	b.n	8015cc4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015c5c:	6979      	ldr	r1, [r7, #20]
 8015c5e:	481b      	ldr	r0, [pc, #108]	; (8015ccc <LoRaMacCommandsAddCmd+0x98>)
 8015c60:	f7ff ff34 	bl	8015acc <LinkedListAdd>
 8015c64:	4603      	mov	r3, r0
 8015c66:	f083 0301 	eor.w	r3, r3, #1
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d001      	beq.n	8015c74 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015c70:	2305      	movs	r3, #5
 8015c72:	e027      	b.n	8015cc4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	7bfa      	ldrb	r2, [r7, #15]
 8015c78:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	3305      	adds	r3, #5
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	b292      	uxth	r2, r2
 8015c88:	68b9      	ldr	r1, [r7, #8]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f004 f8c9 	bl	8019e22 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015c90:	7bfb      	ldrb	r3, [r7, #15]
 8015c92:	4618      	mov	r0, r3
 8015c94:	f7ff ff9d 	bl	8015bd2 <IsSticky>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7ff ffaa 	bl	8015bfc <IsConfirmationRequired>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	461a      	mov	r2, r3
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015cb0:	4b06      	ldr	r3, [pc, #24]	; (8015ccc <LoRaMacCommandsAddCmd+0x98>)
 8015cb2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	4413      	add	r3, r2
 8015cba:	3301      	adds	r3, #1
 8015cbc:	4a03      	ldr	r2, [pc, #12]	; (8015ccc <LoRaMacCommandsAddCmd+0x98>)
 8015cbe:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015cc2:	2300      	movs	r3, #0
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3718      	adds	r7, #24
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	20001600 	.word	0x20001600

08015cd0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d101      	bne.n	8015ce2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	e021      	b.n	8015d26 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015ce2:	6879      	ldr	r1, [r7, #4]
 8015ce4:	4812      	ldr	r0, [pc, #72]	; (8015d30 <LoRaMacCommandsRemoveCmd+0x60>)
 8015ce6:	f7ff ff42 	bl	8015b6e <LinkedListRemove>
 8015cea:	4603      	mov	r3, r0
 8015cec:	f083 0301 	eor.w	r3, r3, #1
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d001      	beq.n	8015cfa <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015cf6:	2303      	movs	r3, #3
 8015cf8:	e015      	b.n	8015d26 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015cfa:	4b0d      	ldr	r3, [pc, #52]	; (8015d30 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cfc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	689b      	ldr	r3, [r3, #8]
 8015d04:	1ad3      	subs	r3, r2, r3
 8015d06:	3b01      	subs	r3, #1
 8015d08:	4a09      	ldr	r2, [pc, #36]	; (8015d30 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d0a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f7ff feb4 	bl	8015a7c <FreeMacCommandSlot>
 8015d14:	4603      	mov	r3, r0
 8015d16:	f083 0301 	eor.w	r3, r3, #1
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d001      	beq.n	8015d24 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d20:	2305      	movs	r3, #5
 8015d22:	e000      	b.n	8015d26 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d24:	2300      	movs	r3, #0
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3708      	adds	r7, #8
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	20001600 	.word	0x20001600

08015d34 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015d34:	b480      	push	{r7}
 8015d36:	b085      	sub	sp, #20
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	6039      	str	r1, [r7, #0]
 8015d3e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d40:	4b0e      	ldr	r3, [pc, #56]	; (8015d7c <LoRaMacCommandsGetCmd+0x48>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d46:	e002      	b.n	8015d4e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d004      	beq.n	8015d5e <LoRaMacCommandsGetCmd+0x2a>
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	791b      	ldrb	r3, [r3, #4]
 8015d58:	79fa      	ldrb	r2, [r7, #7]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d1f4      	bne.n	8015d48 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	68fa      	ldr	r2, [r7, #12]
 8015d62:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d101      	bne.n	8015d6e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d6a:	2303      	movs	r3, #3
 8015d6c:	e000      	b.n	8015d70 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015d6e:	2300      	movs	r3, #0
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3714      	adds	r7, #20
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bc80      	pop	{r7}
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	20001600 	.word	0x20001600

08015d80 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d86:	4b0f      	ldr	r3, [pc, #60]	; (8015dc4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d8c:	e012      	b.n	8015db4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	7b1b      	ldrb	r3, [r3, #12]
 8015d92:	f083 0301 	eor.w	r3, r3, #1
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d008      	beq.n	8015dae <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f7ff ff94 	bl	8015cd0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	607b      	str	r3, [r7, #4]
 8015dac:	e002      	b.n	8015db4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1e9      	bne.n	8015d8e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dba:	2300      	movs	r3, #0
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3708      	adds	r7, #8
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	20001600 	.word	0x20001600

08015dc8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015dce:	4b13      	ldr	r3, [pc, #76]	; (8015e1c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015dd4:	e01a      	b.n	8015e0c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	791b      	ldrb	r3, [r3, #4]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff fef6 	bl	8015bd2 <IsSticky>
 8015de6:	4603      	mov	r3, r0
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00d      	beq.n	8015e08 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	791b      	ldrb	r3, [r3, #4]
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7ff ff03 	bl	8015bfc <IsConfirmationRequired>
 8015df6:	4603      	mov	r3, r0
 8015df8:	f083 0301 	eor.w	r3, r3, #1
 8015dfc:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d002      	beq.n	8015e08 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f7ff ff64 	bl	8015cd0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d1e1      	bne.n	8015dd6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e12:	2300      	movs	r3, #0
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3708      	adds	r7, #8
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	20001600 	.word	0x20001600

08015e20 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d101      	bne.n	8015e32 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e005      	b.n	8015e3e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015e32:	4b05      	ldr	r3, [pc, #20]	; (8015e48 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015e34:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e3c:	2300      	movs	r3, #0
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	370c      	adds	r7, #12
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bc80      	pop	{r7}
 8015e46:	4770      	bx	lr
 8015e48:	20001600 	.word	0x20001600

08015e4c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e58:	4b25      	ldr	r3, [pc, #148]	; (8015ef0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e5e:	2300      	movs	r3, #0
 8015e60:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d002      	beq.n	8015e6e <LoRaMacCommandsSerializeCmds+0x22>
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d126      	bne.n	8015ebc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e039      	b.n	8015ee6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e72:	7efb      	ldrb	r3, [r7, #27]
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	1ad2      	subs	r2, r2, r3
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	3301      	adds	r3, #1
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d320      	bcc.n	8015ec4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015e82:	7efb      	ldrb	r3, [r7, #27]
 8015e84:	1c5a      	adds	r2, r3, #1
 8015e86:	76fa      	strb	r2, [r7, #27]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	69fa      	ldr	r2, [r7, #28]
 8015e90:	7912      	ldrb	r2, [r2, #4]
 8015e92:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e94:	7efb      	ldrb	r3, [r7, #27]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	18d0      	adds	r0, r2, r3
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	1d59      	adds	r1, r3, #5
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	f003 ffbc 	bl	8019e22 <memcpy1>
            itr += curElement->PayloadSize;
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	689b      	ldr	r3, [r3, #8]
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	7efb      	ldrb	r3, [r7, #27]
 8015eb2:	4413      	add	r3, r2
 8015eb4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1d7      	bne.n	8015e72 <LoRaMacCommandsSerializeCmds+0x26>
 8015ec2:	e009      	b.n	8015ed8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015ec4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015ec6:	e007      	b.n	8015ed8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015ece:	69f8      	ldr	r0, [r7, #28]
 8015ed0:	f7ff fefe 	bl	8015cd0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ed8:	69fb      	ldr	r3, [r7, #28]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1f4      	bne.n	8015ec8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015ede:	68b8      	ldr	r0, [r7, #8]
 8015ee0:	f7ff ff9e 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015ee4:	2300      	movs	r3, #0
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	3720      	adds	r7, #32
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	20001600 	.word	0x20001600

08015ef4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	4603      	mov	r3, r0
 8015efc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015f02:	79fb      	ldrb	r3, [r7, #7]
 8015f04:	3b02      	subs	r3, #2
 8015f06:	2b11      	cmp	r3, #17
 8015f08:	d850      	bhi.n	8015fac <LoRaMacCommandsGetCmdSize+0xb8>
 8015f0a:	a201      	add	r2, pc, #4	; (adr r2, 8015f10 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f10:	08015f59 	.word	0x08015f59
 8015f14:	08015f5f 	.word	0x08015f5f
 8015f18:	08015f65 	.word	0x08015f65
 8015f1c:	08015f6b 	.word	0x08015f6b
 8015f20:	08015f71 	.word	0x08015f71
 8015f24:	08015f77 	.word	0x08015f77
 8015f28:	08015f7d 	.word	0x08015f7d
 8015f2c:	08015f83 	.word	0x08015f83
 8015f30:	08015f89 	.word	0x08015f89
 8015f34:	08015fad 	.word	0x08015fad
 8015f38:	08015fad 	.word	0x08015fad
 8015f3c:	08015f8f 	.word	0x08015f8f
 8015f40:	08015fad 	.word	0x08015fad
 8015f44:	08015fad 	.word	0x08015fad
 8015f48:	08015f95 	.word	0x08015f95
 8015f4c:	08015f9b 	.word	0x08015f9b
 8015f50:	08015fa1 	.word	0x08015fa1
 8015f54:	08015fa7 	.word	0x08015fa7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015f58:	2303      	movs	r3, #3
 8015f5a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f5c:	e027      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015f5e:	2305      	movs	r3, #5
 8015f60:	73fb      	strb	r3, [r7, #15]
            break;
 8015f62:	e024      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015f64:	2302      	movs	r3, #2
 8015f66:	73fb      	strb	r3, [r7, #15]
            break;
 8015f68:	e021      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015f6a:	2305      	movs	r3, #5
 8015f6c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f6e:	e01e      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015f70:	2301      	movs	r3, #1
 8015f72:	73fb      	strb	r3, [r7, #15]
            break;
 8015f74:	e01b      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015f76:	2306      	movs	r3, #6
 8015f78:	73fb      	strb	r3, [r7, #15]
            break;
 8015f7a:	e018      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015f7c:	2302      	movs	r3, #2
 8015f7e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f80:	e015      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015f82:	2302      	movs	r3, #2
 8015f84:	73fb      	strb	r3, [r7, #15]
            break;
 8015f86:	e012      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015f88:	2305      	movs	r3, #5
 8015f8a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f8c:	e00f      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015f8e:	2306      	movs	r3, #6
 8015f90:	73fb      	strb	r3, [r7, #15]
            break;
 8015f92:	e00c      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015f94:	2301      	movs	r3, #1
 8015f96:	73fb      	strb	r3, [r7, #15]
            break;
 8015f98:	e009      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015f9a:	2305      	movs	r3, #5
 8015f9c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f9e:	e006      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015fa0:	2304      	movs	r3, #4
 8015fa2:	73fb      	strb	r3, [r7, #15]
            break;
 8015fa4:	e003      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015fa6:	2304      	movs	r3, #4
 8015fa8:	73fb      	strb	r3, [r7, #15]
            break;
 8015faa:	e000      	b.n	8015fae <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015fac:	bf00      	nop
        }
    }
    return cidSize;
 8015fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3714      	adds	r7, #20
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bc80      	pop	{r7}
 8015fb8:	4770      	bx	lr
 8015fba:	bf00      	nop

08015fbc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	4a07      	ldr	r2, [pc, #28]	; (8015fe4 <IncreaseBufferPointer+0x28>)
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	d102      	bne.n	8015fd2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015fcc:	4b06      	ldr	r3, [pc, #24]	; (8015fe8 <IncreaseBufferPointer+0x2c>)
 8015fce:	607b      	str	r3, [r7, #4]
 8015fd0:	e002      	b.n	8015fd8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015fd8:	687b      	ldr	r3, [r7, #4]
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	370c      	adds	r7, #12
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bc80      	pop	{r7}
 8015fe2:	4770      	bx	lr
 8015fe4:	20001718 	.word	0x20001718
 8015fe8:	20001708 	.word	0x20001708

08015fec <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015ff6:	79fb      	ldrb	r3, [r7, #7]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d101      	bne.n	8016000 <IsListEmpty+0x14>
    {
        return true;
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e000      	b.n	8016002 <IsListEmpty+0x16>
    }
    return false;
 8016000:	2300      	movs	r3, #0
}
 8016002:	4618      	mov	r0, r3
 8016004:	370c      	adds	r7, #12
 8016006:	46bd      	mov	sp, r7
 8016008:	bc80      	pop	{r7}
 801600a:	4770      	bx	lr

0801600c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	4603      	mov	r3, r0
 8016014:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8016016:	79fb      	ldrb	r3, [r7, #7]
 8016018:	2b04      	cmp	r3, #4
 801601a:	d901      	bls.n	8016020 <IsListFull+0x14>
    {
        return true;
 801601c:	2301      	movs	r3, #1
 801601e:	e000      	b.n	8016022 <IsListFull+0x16>
    }
    return false;
 8016020:	2300      	movs	r3, #0
}
 8016022:	4618      	mov	r0, r3
 8016024:	370c      	adds	r7, #12
 8016026:	46bd      	mov	sp, r7
 8016028:	bc80      	pop	{r7}
 801602a:	4770      	bx	lr

0801602c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b086      	sub	sp, #24
 8016030:	af00      	add	r7, sp, #0
 8016032:	4603      	mov	r3, r0
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
 8016038:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801603e:	4b13      	ldr	r3, [pc, #76]	; (801608c <GetElement+0x60>)
 8016040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016044:	4618      	mov	r0, r3
 8016046:	f7ff ffd1 	bl	8015fec <IsListEmpty>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d001      	beq.n	8016054 <GetElement+0x28>
    {
        return NULL;
 8016050:	2300      	movs	r3, #0
 8016052:	e017      	b.n	8016084 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016054:	2300      	movs	r3, #0
 8016056:	74fb      	strb	r3, [r7, #19]
 8016058:	e00d      	b.n	8016076 <GetElement+0x4a>
    {
        if( element->Request == request )
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	7bfa      	ldrb	r2, [r7, #15]
 8016060:	429a      	cmp	r2, r3
 8016062:	d101      	bne.n	8016068 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	e00d      	b.n	8016084 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016068:	6978      	ldr	r0, [r7, #20]
 801606a:	f7ff ffa7 	bl	8015fbc <IncreaseBufferPointer>
 801606e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016070:	7cfb      	ldrb	r3, [r7, #19]
 8016072:	3301      	adds	r3, #1
 8016074:	74fb      	strb	r3, [r7, #19]
 8016076:	4b05      	ldr	r3, [pc, #20]	; (801608c <GetElement+0x60>)
 8016078:	f893 3020 	ldrb.w	r3, [r3, #32]
 801607c:	7cfa      	ldrb	r2, [r7, #19]
 801607e:	429a      	cmp	r2, r3
 8016080:	d3eb      	bcc.n	801605a <GetElement+0x2e>
    }

    return NULL;
 8016082:	2300      	movs	r3, #0
}
 8016084:	4618      	mov	r0, r3
 8016086:	3718      	adds	r7, #24
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}
 801608c:	200016fc 	.word	0x200016fc

08016090 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8016098:	4a0c      	ldr	r2, [pc, #48]	; (80160cc <LoRaMacConfirmQueueInit+0x3c>)
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801609e:	4b0b      	ldr	r3, [pc, #44]	; (80160cc <LoRaMacConfirmQueueInit+0x3c>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160a6:	4b09      	ldr	r3, [pc, #36]	; (80160cc <LoRaMacConfirmQueueInit+0x3c>)
 80160a8:	4a09      	ldr	r2, [pc, #36]	; (80160d0 <LoRaMacConfirmQueueInit+0x40>)
 80160aa:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160ac:	4b07      	ldr	r3, [pc, #28]	; (80160cc <LoRaMacConfirmQueueInit+0x3c>)
 80160ae:	4a08      	ldr	r2, [pc, #32]	; (80160d0 <LoRaMacConfirmQueueInit+0x40>)
 80160b0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80160b2:	2214      	movs	r2, #20
 80160b4:	21ff      	movs	r1, #255	; 0xff
 80160b6:	4806      	ldr	r0, [pc, #24]	; (80160d0 <LoRaMacConfirmQueueInit+0x40>)
 80160b8:	f003 feee 	bl	8019e98 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80160bc:	4b03      	ldr	r3, [pc, #12]	; (80160cc <LoRaMacConfirmQueueInit+0x3c>)
 80160be:	2201      	movs	r2, #1
 80160c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80160c4:	bf00      	nop
 80160c6:	3708      	adds	r7, #8
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	200016fc 	.word	0x200016fc
 80160d0:	20001708 	.word	0x20001708

080160d4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b082      	sub	sp, #8
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160dc:	4b19      	ldr	r3, [pc, #100]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 80160de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7ff ff92 	bl	801600c <IsListFull>
 80160e8:	4603      	mov	r3, r0
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d001      	beq.n	80160f2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80160ee:	2300      	movs	r3, #0
 80160f0:	e023      	b.n	801613a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80160f2:	4b14      	ldr	r3, [pc, #80]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	687a      	ldr	r2, [r7, #4]
 80160f8:	7812      	ldrb	r2, [r2, #0]
 80160fa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80160fc:	4b11      	ldr	r3, [pc, #68]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 80160fe:	689b      	ldr	r3, [r3, #8]
 8016100:	687a      	ldr	r2, [r7, #4]
 8016102:	7852      	ldrb	r2, [r2, #1]
 8016104:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8016106:	4b0f      	ldr	r3, [pc, #60]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 8016108:	689b      	ldr	r3, [r3, #8]
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	78d2      	ldrb	r2, [r2, #3]
 801610e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016110:	4b0c      	ldr	r3, [pc, #48]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 8016112:	689b      	ldr	r3, [r3, #8]
 8016114:	2200      	movs	r2, #0
 8016116:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8016118:	4b0a      	ldr	r3, [pc, #40]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 801611a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801611e:	3301      	adds	r3, #1
 8016120:	b2da      	uxtb	r2, r3
 8016122:	4b08      	ldr	r3, [pc, #32]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 8016124:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016128:	4b06      	ldr	r3, [pc, #24]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 801612a:	689b      	ldr	r3, [r3, #8]
 801612c:	4618      	mov	r0, r3
 801612e:	f7ff ff45 	bl	8015fbc <IncreaseBufferPointer>
 8016132:	4603      	mov	r3, r0
 8016134:	4a03      	ldr	r2, [pc, #12]	; (8016144 <LoRaMacConfirmQueueAdd+0x70>)
 8016136:	6093      	str	r3, [r2, #8]

    return true;
 8016138:	2301      	movs	r3, #1
}
 801613a:	4618      	mov	r0, r3
 801613c:	3708      	adds	r7, #8
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	200016fc 	.word	0x200016fc

08016148 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801614c:	4b0e      	ldr	r3, [pc, #56]	; (8016188 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801614e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016152:	4618      	mov	r0, r3
 8016154:	f7ff ff4a 	bl	8015fec <IsListEmpty>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d001      	beq.n	8016162 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801615e:	2300      	movs	r3, #0
 8016160:	e010      	b.n	8016184 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016162:	4b09      	ldr	r3, [pc, #36]	; (8016188 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016168:	3b01      	subs	r3, #1
 801616a:	b2da      	uxtb	r2, r3
 801616c:	4b06      	ldr	r3, [pc, #24]	; (8016188 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801616e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016172:	4b05      	ldr	r3, [pc, #20]	; (8016188 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	4618      	mov	r0, r3
 8016178:	f7ff ff20 	bl	8015fbc <IncreaseBufferPointer>
 801617c:	4603      	mov	r3, r0
 801617e:	4a02      	ldr	r2, [pc, #8]	; (8016188 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016180:	6053      	str	r3, [r2, #4]

    return true;
 8016182:	2301      	movs	r3, #1
}
 8016184:	4618      	mov	r0, r3
 8016186:	bd80      	pop	{r7, pc}
 8016188:	200016fc 	.word	0x200016fc

0801618c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	4603      	mov	r3, r0
 8016194:	460a      	mov	r2, r1
 8016196:	71fb      	strb	r3, [r7, #7]
 8016198:	4613      	mov	r3, r2
 801619a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801619c:	2300      	movs	r3, #0
 801619e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161a0:	4b10      	ldr	r3, [pc, #64]	; (80161e4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7ff ff20 	bl	8015fec <IsListEmpty>
 80161ac:	4603      	mov	r3, r0
 80161ae:	f083 0301 	eor.w	r3, r3, #1
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d011      	beq.n	80161dc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161b8:	4b0a      	ldr	r3, [pc, #40]	; (80161e4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161ba:	6859      	ldr	r1, [r3, #4]
 80161bc:	4b09      	ldr	r3, [pc, #36]	; (80161e4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161be:	689a      	ldr	r2, [r3, #8]
 80161c0:	79bb      	ldrb	r3, [r7, #6]
 80161c2:	4618      	mov	r0, r3
 80161c4:	f7ff ff32 	bl	801602c <GetElement>
 80161c8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d005      	beq.n	80161dc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	79fa      	ldrb	r2, [r7, #7]
 80161d4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2201      	movs	r2, #1
 80161da:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80161dc:	bf00      	nop
 80161de:	3710      	adds	r7, #16
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}
 80161e4:	200016fc 	.word	0x200016fc

080161e8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b084      	sub	sp, #16
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	4603      	mov	r3, r0
 80161f0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80161f2:	2300      	movs	r3, #0
 80161f4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161f6:	4b10      	ldr	r3, [pc, #64]	; (8016238 <LoRaMacConfirmQueueGetStatus+0x50>)
 80161f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161fc:	4618      	mov	r0, r3
 80161fe:	f7ff fef5 	bl	8015fec <IsListEmpty>
 8016202:	4603      	mov	r3, r0
 8016204:	f083 0301 	eor.w	r3, r3, #1
 8016208:	b2db      	uxtb	r3, r3
 801620a:	2b00      	cmp	r3, #0
 801620c:	d00e      	beq.n	801622c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801620e:	4b0a      	ldr	r3, [pc, #40]	; (8016238 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016210:	6859      	ldr	r1, [r3, #4]
 8016212:	4b09      	ldr	r3, [pc, #36]	; (8016238 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016214:	689a      	ldr	r2, [r3, #8]
 8016216:	79fb      	ldrb	r3, [r7, #7]
 8016218:	4618      	mov	r0, r3
 801621a:	f7ff ff07 	bl	801602c <GetElement>
 801621e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	785b      	ldrb	r3, [r3, #1]
 801622a:	e000      	b.n	801622e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801622c:	2301      	movs	r3, #1
}
 801622e:	4618      	mov	r0, r3
 8016230:	3710      	adds	r7, #16
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	200016fc 	.word	0x200016fc

0801623c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b084      	sub	sp, #16
 8016240:	af00      	add	r7, sp, #0
 8016242:	4603      	mov	r3, r0
 8016244:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016246:	4b16      	ldr	r3, [pc, #88]	; (80162a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801624c:	4a14      	ldr	r2, [pc, #80]	; (80162a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801624e:	79fb      	ldrb	r3, [r7, #7]
 8016250:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016254:	4b12      	ldr	r3, [pc, #72]	; (80162a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016256:	f893 3020 	ldrb.w	r3, [r3, #32]
 801625a:	4618      	mov	r0, r3
 801625c:	f7ff fec6 	bl	8015fec <IsListEmpty>
 8016260:	4603      	mov	r3, r0
 8016262:	f083 0301 	eor.w	r3, r3, #1
 8016266:	b2db      	uxtb	r3, r3
 8016268:	2b00      	cmp	r3, #0
 801626a:	d015      	beq.n	8016298 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	79fa      	ldrb	r2, [r7, #7]
 8016270:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	78db      	ldrb	r3, [r3, #3]
 8016276:	f083 0301 	eor.w	r3, r3, #1
 801627a:	b2db      	uxtb	r3, r3
 801627c:	2b00      	cmp	r3, #0
 801627e:	d002      	beq.n	8016286 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2201      	movs	r2, #1
 8016284:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016286:	68f8      	ldr	r0, [r7, #12]
 8016288:	f7ff fe98 	bl	8015fbc <IncreaseBufferPointer>
 801628c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801628e:	4b04      	ldr	r3, [pc, #16]	; (80162a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016290:	689b      	ldr	r3, [r3, #8]
 8016292:	68fa      	ldr	r2, [r7, #12]
 8016294:	429a      	cmp	r2, r3
 8016296:	d1e9      	bne.n	801626c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016298:	bf00      	nop
 801629a:	3710      	adds	r7, #16
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	200016fc 	.word	0x200016fc

080162a4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	4603      	mov	r3, r0
 80162ac:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80162ae:	4b09      	ldr	r3, [pc, #36]	; (80162d4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162b0:	6859      	ldr	r1, [r3, #4]
 80162b2:	4b08      	ldr	r3, [pc, #32]	; (80162d4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162b4:	689a      	ldr	r2, [r3, #8]
 80162b6:	79fb      	ldrb	r3, [r7, #7]
 80162b8:	4618      	mov	r0, r3
 80162ba:	f7ff feb7 	bl	801602c <GetElement>
 80162be:	4603      	mov	r3, r0
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d001      	beq.n	80162c8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80162c4:	2301      	movs	r3, #1
 80162c6:	e000      	b.n	80162ca <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	200016fc 	.word	0x200016fc

080162d8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80162e0:	4b25      	ldr	r3, [pc, #148]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162e6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80162e8:	2300      	movs	r3, #0
 80162ea:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80162ec:	f107 0308 	add.w	r3, r7, #8
 80162f0:	2204      	movs	r2, #4
 80162f2:	2100      	movs	r1, #0
 80162f4:	4618      	mov	r0, r3
 80162f6:	f003 fdcf 	bl	8019e98 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80162fa:	2300      	movs	r3, #0
 80162fc:	73fb      	strb	r3, [r7, #15]
 80162fe:	e032      	b.n	8016366 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016300:	4b1d      	ldr	r3, [pc, #116]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	781a      	ldrb	r2, [r3, #0]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801630a:	4b1b      	ldr	r3, [pc, #108]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	785a      	ldrb	r2, [r3, #1]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016314:	4b18      	ldr	r3, [pc, #96]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	789b      	ldrb	r3, [r3, #2]
 801631a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801631c:	7b7b      	ldrb	r3, [r7, #13]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d005      	beq.n	801632e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016322:	4b15      	ldr	r3, [pc, #84]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	689b      	ldr	r3, [r3, #8]
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	4798      	blx	r3
 801632c:	e00b      	b.n	8016346 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801632e:	4b12      	ldr	r3, [pc, #72]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016336:	4b10      	ldr	r3, [pc, #64]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	785b      	ldrb	r3, [r3, #1]
 801633c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801633e:	4b0e      	ldr	r3, [pc, #56]	; (8016378 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	78db      	ldrb	r3, [r3, #3]
 8016344:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016346:	f7ff feff 	bl	8016148 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801634a:	7b7b      	ldrb	r3, [r7, #13]
 801634c:	f083 0301 	eor.w	r3, r3, #1
 8016350:	b2db      	uxtb	r3, r3
 8016352:	2b00      	cmp	r3, #0
 8016354:	d004      	beq.n	8016360 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016356:	f107 0308 	add.w	r3, r7, #8
 801635a:	4618      	mov	r0, r3
 801635c:	f7ff feba 	bl	80160d4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016360:	7bfb      	ldrb	r3, [r7, #15]
 8016362:	3301      	adds	r3, #1
 8016364:	73fb      	strb	r3, [r7, #15]
 8016366:	7bfa      	ldrb	r2, [r7, #15]
 8016368:	7bbb      	ldrb	r3, [r7, #14]
 801636a:	429a      	cmp	r2, r3
 801636c:	d3c8      	bcc.n	8016300 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801636e:	bf00      	nop
 8016370:	bf00      	nop
 8016372:	3710      	adds	r7, #16
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	200016fc 	.word	0x200016fc

0801637c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801637c:	b480      	push	{r7}
 801637e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016380:	4b03      	ldr	r3, [pc, #12]	; (8016390 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016382:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016386:	4618      	mov	r0, r3
 8016388:	46bd      	mov	sp, r7
 801638a:	bc80      	pop	{r7}
 801638c:	4770      	bx	lr
 801638e:	bf00      	nop
 8016390:	200016fc 	.word	0x200016fc

08016394 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016398:	4b06      	ldr	r3, [pc, #24]	; (80163b4 <LoRaMacConfirmQueueIsFull+0x20>)
 801639a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801639e:	4618      	mov	r0, r3
 80163a0:	f7ff fe34 	bl	801600c <IsListFull>
 80163a4:	4603      	mov	r3, r0
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d001      	beq.n	80163ae <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80163aa:	2301      	movs	r3, #1
 80163ac:	e000      	b.n	80163b0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80163ae:	2300      	movs	r3, #0
    }
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	200016fc 	.word	0x200016fc

080163b8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b08e      	sub	sp, #56	; 0x38
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	607b      	str	r3, [r7, #4]
 80163c2:	460b      	mov	r3, r1
 80163c4:	817b      	strh	r3, [r7, #10]
 80163c6:	4613      	mov	r3, r2
 80163c8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d101      	bne.n	80163d4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163d0:	230a      	movs	r3, #10
 80163d2:	e086      	b.n	80164e2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80163d4:	2300      	movs	r3, #0
 80163d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80163da:	2301      	movs	r3, #1
 80163dc:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80163de:	2300      	movs	r3, #0
 80163e0:	623b      	str	r3, [r7, #32]
 80163e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163e6:	2200      	movs	r2, #0
 80163e8:	601a      	str	r2, [r3, #0]
 80163ea:	605a      	str	r2, [r3, #4]
 80163ec:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80163ee:	2300      	movs	r3, #0
 80163f0:	613b      	str	r3, [r7, #16]
 80163f2:	f107 0314 	add.w	r3, r7, #20
 80163f6:	2200      	movs	r2, #0
 80163f8:	601a      	str	r2, [r3, #0]
 80163fa:	605a      	str	r2, [r3, #4]
 80163fc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80163fe:	2301      	movs	r3, #1
 8016400:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8016402:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016406:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	b2db      	uxtb	r3, r3
 801640c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	0a1b      	lsrs	r3, r3, #8
 8016412:	b2db      	uxtb	r3, r3
 8016414:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	0c1b      	lsrs	r3, r3, #16
 801641a:	b2db      	uxtb	r3, r3
 801641c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	0e1b      	lsrs	r3, r3, #24
 8016422:	b2db      	uxtb	r3, r3
 8016424:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8016426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016428:	b2db      	uxtb	r3, r3
 801642a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801642c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801642e:	0a1b      	lsrs	r3, r3, #8
 8016430:	b2db      	uxtb	r3, r3
 8016432:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016436:	0c1b      	lsrs	r3, r3, #16
 8016438:	b2db      	uxtb	r3, r3
 801643a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801643e:	0e1b      	lsrs	r3, r3, #24
 8016440:	b2db      	uxtb	r3, r3
 8016442:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016444:	e048      	b.n	80164d8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016446:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016448:	b2db      	uxtb	r3, r3
 801644a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801644c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801644e:	3301      	adds	r3, #1
 8016450:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016452:	f107 0320 	add.w	r3, r7, #32
 8016456:	7a7a      	ldrb	r2, [r7, #9]
 8016458:	f107 0010 	add.w	r0, r7, #16
 801645c:	2110      	movs	r1, #16
 801645e:	f7f8 ff69 	bl	800f334 <SecureElementAesEncrypt>
 8016462:	4603      	mov	r3, r0
 8016464:	2b00      	cmp	r3, #0
 8016466:	d001      	beq.n	801646c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016468:	230f      	movs	r3, #15
 801646a:	e03a      	b.n	80164e2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801646c:	2300      	movs	r3, #0
 801646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016472:	e01e      	b.n	80164b2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016474:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016478:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801647c:	4413      	add	r3, r2
 801647e:	461a      	mov	r2, r3
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	4413      	add	r3, r2
 8016484:	7819      	ldrb	r1, [r3, #0]
 8016486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801648a:	3338      	adds	r3, #56	; 0x38
 801648c:	443b      	add	r3, r7
 801648e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016492:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801649a:	4403      	add	r3, r0
 801649c:	4618      	mov	r0, r3
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	4403      	add	r3, r0
 80164a2:	404a      	eors	r2, r1
 80164a4:	b2d2      	uxtb	r2, r2
 80164a6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80164a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164ac:	3301      	adds	r3, #1
 80164ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80164ba:	2a10      	cmp	r2, #16
 80164bc:	bfa8      	it	ge
 80164be:	2210      	movge	r2, #16
 80164c0:	b212      	sxth	r2, r2
 80164c2:	4293      	cmp	r3, r2
 80164c4:	dbd6      	blt.n	8016474 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80164c6:	897b      	ldrh	r3, [r7, #10]
 80164c8:	3b10      	subs	r3, #16
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80164ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164d2:	3310      	adds	r3, #16
 80164d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80164d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	dcb2      	bgt.n	8016446 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164e0:	2300      	movs	r3, #0
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3738      	adds	r7, #56	; 0x38
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}

080164ea <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80164ea:	b490      	push	{r4, r7}
 80164ec:	b082      	sub	sp, #8
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	4604      	mov	r4, r0
 80164f2:	4608      	mov	r0, r1
 80164f4:	4611      	mov	r1, r2
 80164f6:	461a      	mov	r2, r3
 80164f8:	4623      	mov	r3, r4
 80164fa:	80fb      	strh	r3, [r7, #6]
 80164fc:	4603      	mov	r3, r0
 80164fe:	717b      	strb	r3, [r7, #5]
 8016500:	460b      	mov	r3, r1
 8016502:	713b      	strb	r3, [r7, #4]
 8016504:	4613      	mov	r3, r2
 8016506:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016508:	69bb      	ldr	r3, [r7, #24]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d101      	bne.n	8016512 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801650e:	230a      	movs	r3, #10
 8016510:	e04e      	b.n	80165b0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	2249      	movs	r2, #73	; 0x49
 8016516:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	3301      	adds	r3, #1
 801651c:	2200      	movs	r2, #0
 801651e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	3302      	adds	r3, #2
 8016524:	2200      	movs	r2, #0
 8016526:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	3303      	adds	r3, #3
 801652c:	2200      	movs	r2, #0
 801652e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	3304      	adds	r3, #4
 8016534:	2200      	movs	r2, #0
 8016536:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	3305      	adds	r3, #5
 801653c:	78fa      	ldrb	r2, [r7, #3]
 801653e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	3306      	adds	r3, #6
 8016544:	693a      	ldr	r2, [r7, #16]
 8016546:	b2d2      	uxtb	r2, r2
 8016548:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801654a:	693b      	ldr	r3, [r7, #16]
 801654c:	0a1a      	lsrs	r2, r3, #8
 801654e:	69bb      	ldr	r3, [r7, #24]
 8016550:	3307      	adds	r3, #7
 8016552:	b2d2      	uxtb	r2, r2
 8016554:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	0c1a      	lsrs	r2, r3, #16
 801655a:	69bb      	ldr	r3, [r7, #24]
 801655c:	3308      	adds	r3, #8
 801655e:	b2d2      	uxtb	r2, r2
 8016560:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	0e1a      	lsrs	r2, r3, #24
 8016566:	69bb      	ldr	r3, [r7, #24]
 8016568:	3309      	adds	r3, #9
 801656a:	b2d2      	uxtb	r2, r2
 801656c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	330a      	adds	r3, #10
 8016572:	697a      	ldr	r2, [r7, #20]
 8016574:	b2d2      	uxtb	r2, r2
 8016576:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	0a1a      	lsrs	r2, r3, #8
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	330b      	adds	r3, #11
 8016580:	b2d2      	uxtb	r2, r2
 8016582:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	0c1a      	lsrs	r2, r3, #16
 8016588:	69bb      	ldr	r3, [r7, #24]
 801658a:	330c      	adds	r3, #12
 801658c:	b2d2      	uxtb	r2, r2
 801658e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	0e1a      	lsrs	r2, r3, #24
 8016594:	69bb      	ldr	r3, [r7, #24]
 8016596:	330d      	adds	r3, #13
 8016598:	b2d2      	uxtb	r2, r2
 801659a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801659c:	69bb      	ldr	r3, [r7, #24]
 801659e:	330e      	adds	r3, #14
 80165a0:	2200      	movs	r2, #0
 80165a2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80165a4:	69bb      	ldr	r3, [r7, #24]
 80165a6:	330f      	adds	r3, #15
 80165a8:	88fa      	ldrh	r2, [r7, #6]
 80165aa:	b2d2      	uxtb	r2, r2
 80165ac:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80165ae:	2300      	movs	r3, #0
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	3708      	adds	r7, #8
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bc90      	pop	{r4, r7}
 80165b8:	4770      	bx	lr

080165ba <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80165ba:	b590      	push	{r4, r7, lr}
 80165bc:	b08b      	sub	sp, #44	; 0x2c
 80165be:	af04      	add	r7, sp, #16
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	4608      	mov	r0, r1
 80165c4:	4611      	mov	r1, r2
 80165c6:	461a      	mov	r2, r3
 80165c8:	4603      	mov	r3, r0
 80165ca:	807b      	strh	r3, [r7, #2]
 80165cc:	460b      	mov	r3, r1
 80165ce:	707b      	strb	r3, [r7, #1]
 80165d0:	4613      	mov	r3, r2
 80165d2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d002      	beq.n	80165e0 <ComputeCmacB0+0x26>
 80165da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d101      	bne.n	80165e4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165e0:	230a      	movs	r3, #10
 80165e2:	e024      	b.n	801662e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80165e4:	887b      	ldrh	r3, [r7, #2]
 80165e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165ea:	d901      	bls.n	80165f0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80165ec:	230e      	movs	r3, #14
 80165ee:	e01e      	b.n	801662e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80165f0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80165f4:	783a      	ldrb	r2, [r7, #0]
 80165f6:	7879      	ldrb	r1, [r7, #1]
 80165f8:	8878      	ldrh	r0, [r7, #2]
 80165fa:	f107 0308 	add.w	r3, r7, #8
 80165fe:	9302      	str	r3, [sp, #8]
 8016600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016602:	9301      	str	r3, [sp, #4]
 8016604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016606:	9300      	str	r3, [sp, #0]
 8016608:	4623      	mov	r3, r4
 801660a:	f7ff ff6e 	bl	80164ea <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801660e:	887a      	ldrh	r2, [r7, #2]
 8016610:	7879      	ldrb	r1, [r7, #1]
 8016612:	f107 0008 	add.w	r0, r7, #8
 8016616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016618:	9300      	str	r3, [sp, #0]
 801661a:	460b      	mov	r3, r1
 801661c:	6879      	ldr	r1, [r7, #4]
 801661e:	f7f8 fe43 	bl	800f2a8 <SecureElementComputeAesCmac>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d001      	beq.n	801662c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016628:	230f      	movs	r3, #15
 801662a:	e000      	b.n	801662e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801662c:	2300      	movs	r3, #0
}
 801662e:	4618      	mov	r0, r3
 8016630:	371c      	adds	r7, #28
 8016632:	46bd      	mov	sp, r7
 8016634:	bd90      	pop	{r4, r7, pc}

08016636 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016636:	b590      	push	{r4, r7, lr}
 8016638:	b0cd      	sub	sp, #308	; 0x134
 801663a:	af04      	add	r7, sp, #16
 801663c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016640:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016644:	6020      	str	r0, [r4, #0]
 8016646:	460c      	mov	r4, r1
 8016648:	4610      	mov	r0, r2
 801664a:	4619      	mov	r1, r3
 801664c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016650:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016654:	4622      	mov	r2, r4
 8016656:	801a      	strh	r2, [r3, #0]
 8016658:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801665c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016660:	4602      	mov	r2, r0
 8016662:	701a      	strb	r2, [r3, #0]
 8016664:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016668:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801666c:	460a      	mov	r2, r1
 801666e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016670:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016674:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d101      	bne.n	8016682 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801667e:	230a      	movs	r3, #10
 8016680:	e063      	b.n	801674a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016682:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016686:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801668a:	881b      	ldrh	r3, [r3, #0]
 801668c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016690:	d901      	bls.n	8016696 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016692:	230e      	movs	r3, #14
 8016694:	e059      	b.n	801674a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016696:	f107 030c 	add.w	r3, r7, #12
 801669a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801669e:	2100      	movs	r1, #0
 80166a0:	4618      	mov	r0, r3
 80166a2:	f003 fbf9 	bl	8019e98 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166a6:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80166aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166b2:	781a      	ldrb	r2, [r3, #0]
 80166b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166b8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166bc:	7819      	ldrb	r1, [r3, #0]
 80166be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166c2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166c6:	8818      	ldrh	r0, [r3, #0]
 80166c8:	f107 030c 	add.w	r3, r7, #12
 80166cc:	9302      	str	r3, [sp, #8]
 80166ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80166d2:	9301      	str	r3, [sp, #4]
 80166d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	4623      	mov	r3, r4
 80166dc:	f7ff ff05 	bl	80164ea <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80166e0:	f107 030c 	add.w	r3, r7, #12
 80166e4:	3310      	adds	r3, #16
 80166e6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80166ea:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80166ee:	8812      	ldrh	r2, [r2, #0]
 80166f0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80166f4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80166f8:	6809      	ldr	r1, [r1, #0]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f003 fb91 	bl	8019e22 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016700:	2306      	movs	r3, #6
 8016702:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016706:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801670a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801670e:	881b      	ldrh	r3, [r3, #0]
 8016710:	3310      	adds	r3, #16
 8016712:	4619      	mov	r1, r3
 8016714:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016718:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	f107 000c 	add.w	r0, r7, #12
 8016722:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016726:	f7f8 fdd9 	bl	800f2dc <SecureElementVerifyAesCmac>
 801672a:	4603      	mov	r3, r0
 801672c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016734:	2b00      	cmp	r3, #0
 8016736:	d101      	bne.n	801673c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016738:	2300      	movs	r3, #0
 801673a:	e006      	b.n	801674a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801673c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016740:	2b01      	cmp	r3, #1
 8016742:	d101      	bne.n	8016748 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016744:	2301      	movs	r3, #1
 8016746:	e000      	b.n	801674a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016748:	230f      	movs	r3, #15
}
 801674a:	4618      	mov	r0, r3
 801674c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016750:	46bd      	mov	sp, r7
 8016752:	bd90      	pop	{r4, r7, pc}

08016754 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016754:	b480      	push	{r7}
 8016756:	b085      	sub	sp, #20
 8016758:	af00      	add	r7, sp, #0
 801675a:	4603      	mov	r3, r0
 801675c:	6039      	str	r1, [r7, #0]
 801675e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016760:	2300      	movs	r3, #0
 8016762:	73fb      	strb	r3, [r7, #15]
 8016764:	e011      	b.n	801678a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016766:	7bfb      	ldrb	r3, [r7, #15]
 8016768:	4a0c      	ldr	r2, [pc, #48]	; (801679c <GetKeyAddrItem+0x48>)
 801676a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801676e:	79fa      	ldrb	r2, [r7, #7]
 8016770:	429a      	cmp	r2, r3
 8016772:	d107      	bne.n	8016784 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016774:	7bfb      	ldrb	r3, [r7, #15]
 8016776:	009b      	lsls	r3, r3, #2
 8016778:	4a08      	ldr	r2, [pc, #32]	; (801679c <GetKeyAddrItem+0x48>)
 801677a:	441a      	add	r2, r3
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016780:	2300      	movs	r3, #0
 8016782:	e006      	b.n	8016792 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016784:	7bfb      	ldrb	r3, [r7, #15]
 8016786:	3301      	adds	r3, #1
 8016788:	73fb      	strb	r3, [r7, #15]
 801678a:	7bfb      	ldrb	r3, [r7, #15]
 801678c:	2b01      	cmp	r3, #1
 801678e:	d9ea      	bls.n	8016766 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016790:	230c      	movs	r3, #12
}
 8016792:	4618      	mov	r0, r3
 8016794:	3714      	adds	r7, #20
 8016796:	46bd      	mov	sp, r7
 8016798:	bc80      	pop	{r7}
 801679a:	4770      	bx	lr
 801679c:	20000130 	.word	0x20000130

080167a0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b088      	sub	sp, #32
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	60b9      	str	r1, [r7, #8]
 80167a8:	607a      	str	r2, [r7, #4]
 80167aa:	461a      	mov	r2, r3
 80167ac:	4603      	mov	r3, r0
 80167ae:	73fb      	strb	r3, [r7, #15]
 80167b0:	4613      	mov	r3, r2
 80167b2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80167b4:	2300      	movs	r3, #0
 80167b6:	613b      	str	r3, [r7, #16]
 80167b8:	f107 0314 	add.w	r3, r7, #20
 80167bc:	2200      	movs	r2, #0
 80167be:	601a      	str	r2, [r3, #0]
 80167c0:	605a      	str	r2, [r3, #4]
 80167c2:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80167c4:	7bfb      	ldrb	r3, [r7, #15]
 80167c6:	2b08      	cmp	r3, #8
 80167c8:	d002      	beq.n	80167d0 <DeriveSessionKey10x+0x30>
 80167ca:	2b09      	cmp	r3, #9
 80167cc:	d003      	beq.n	80167d6 <DeriveSessionKey10x+0x36>
 80167ce:	e005      	b.n	80167dc <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80167d0:	2301      	movs	r3, #1
 80167d2:	743b      	strb	r3, [r7, #16]
            break;
 80167d4:	e004      	b.n	80167e0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80167d6:	2302      	movs	r3, #2
 80167d8:	743b      	strb	r3, [r7, #16]
            break;
 80167da:	e001      	b.n	80167e0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80167dc:	230b      	movs	r3, #11
 80167de:	e02a      	b.n	8016836 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	0a1b      	lsrs	r3, r3, #8
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	0c1b      	lsrs	r3, r3, #16
 80167f2:	b2db      	uxtb	r3, r3
 80167f4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	0a1b      	lsrs	r3, r3, #8
 8016800:	b2db      	uxtb	r3, r3
 8016802:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	0c1b      	lsrs	r3, r3, #16
 8016808:	b2db      	uxtb	r3, r3
 801680a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801680c:	89bb      	ldrh	r3, [r7, #12]
 801680e:	b2db      	uxtb	r3, r3
 8016810:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016812:	89bb      	ldrh	r3, [r7, #12]
 8016814:	0a1b      	lsrs	r3, r3, #8
 8016816:	b29b      	uxth	r3, r3
 8016818:	b2db      	uxtb	r3, r3
 801681a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801681c:	7bfa      	ldrb	r2, [r7, #15]
 801681e:	f107 0310 	add.w	r3, r7, #16
 8016822:	2101      	movs	r1, #1
 8016824:	4618      	mov	r0, r3
 8016826:	f7f8 fe05 	bl	800f434 <SecureElementDeriveAndStoreKey>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d001      	beq.n	8016834 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016830:	230f      	movs	r3, #15
 8016832:	e000      	b.n	8016836 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016834:	2300      	movs	r3, #0
}
 8016836:	4618      	mov	r0, r3
 8016838:	3720      	adds	r7, #32
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}
	...

08016840 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016840:	b480      	push	{r7}
 8016842:	b083      	sub	sp, #12
 8016844:	af00      	add	r7, sp, #0
 8016846:	4603      	mov	r3, r0
 8016848:	6039      	str	r1, [r7, #0]
 801684a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d101      	bne.n	8016856 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016852:	230a      	movs	r3, #10
 8016854:	e029      	b.n	80168aa <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016856:	79fb      	ldrb	r3, [r7, #7]
 8016858:	3b01      	subs	r3, #1
 801685a:	2b03      	cmp	r3, #3
 801685c:	d822      	bhi.n	80168a4 <GetLastFcntDown+0x64>
 801685e:	a201      	add	r2, pc, #4	; (adr r2, 8016864 <GetLastFcntDown+0x24>)
 8016860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016864:	08016875 	.word	0x08016875
 8016868:	08016881 	.word	0x08016881
 801686c:	0801688d 	.word	0x0801688d
 8016870:	08016899 	.word	0x08016899
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016874:	4b0f      	ldr	r3, [pc, #60]	; (80168b4 <GetLastFcntDown+0x74>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	691a      	ldr	r2, [r3, #16]
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	601a      	str	r2, [r3, #0]
            break;
 801687e:	e013      	b.n	80168a8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016880:	4b0c      	ldr	r3, [pc, #48]	; (80168b4 <GetLastFcntDown+0x74>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	695a      	ldr	r2, [r3, #20]
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	601a      	str	r2, [r3, #0]
            break;
 801688a:	e00d      	b.n	80168a8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801688c:	4b09      	ldr	r3, [pc, #36]	; (80168b4 <GetLastFcntDown+0x74>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	699a      	ldr	r2, [r3, #24]
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	601a      	str	r2, [r3, #0]
            break;
 8016896:	e007      	b.n	80168a8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016898:	4b06      	ldr	r3, [pc, #24]	; (80168b4 <GetLastFcntDown+0x74>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	69da      	ldr	r2, [r3, #28]
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	601a      	str	r2, [r3, #0]
            break;
 80168a2:	e001      	b.n	80168a8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80168a4:	2305      	movs	r3, #5
 80168a6:	e000      	b.n	80168aa <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80168a8:	2300      	movs	r3, #0
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	370c      	adds	r7, #12
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bc80      	pop	{r7}
 80168b2:	4770      	bx	lr
 80168b4:	20001720 	.word	0x20001720

080168b8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	4603      	mov	r3, r0
 80168c0:	6039      	str	r1, [r7, #0]
 80168c2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80168c4:	2300      	movs	r3, #0
 80168c6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80168c8:	f107 020c 	add.w	r2, r7, #12
 80168cc:	79fb      	ldrb	r3, [r7, #7]
 80168ce:	4611      	mov	r1, r2
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7ff ffb5 	bl	8016840 <GetLastFcntDown>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d001      	beq.n	80168e0 <CheckFCntDown+0x28>
    {
        return false;
 80168dc:	2300      	movs	r3, #0
 80168de:	e00a      	b.n	80168f6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	683a      	ldr	r2, [r7, #0]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d803      	bhi.n	80168f0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80168e8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80168ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ee:	d101      	bne.n	80168f4 <CheckFCntDown+0x3c>
    {
        return true;
 80168f0:	2301      	movs	r3, #1
 80168f2:	e000      	b.n	80168f6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80168f4:	2300      	movs	r3, #0
    }
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3710      	adds	r7, #16
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
	...

08016900 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016900:	b480      	push	{r7}
 8016902:	b083      	sub	sp, #12
 8016904:	af00      	add	r7, sp, #0
 8016906:	4603      	mov	r3, r0
 8016908:	6039      	str	r1, [r7, #0]
 801690a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801690c:	79fb      	ldrb	r3, [r7, #7]
 801690e:	3b01      	subs	r3, #1
 8016910:	2b03      	cmp	r3, #3
 8016912:	d82b      	bhi.n	801696c <UpdateFCntDown+0x6c>
 8016914:	a201      	add	r2, pc, #4	; (adr r2, 801691c <UpdateFCntDown+0x1c>)
 8016916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801691a:	bf00      	nop
 801691c:	0801692d 	.word	0x0801692d
 8016920:	0801693f 	.word	0x0801693f
 8016924:	08016951 	.word	0x08016951
 8016928:	08016963 	.word	0x08016963
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801692c:	4b12      	ldr	r3, [pc, #72]	; (8016978 <UpdateFCntDown+0x78>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	683a      	ldr	r2, [r7, #0]
 8016932:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016934:	4b10      	ldr	r3, [pc, #64]	; (8016978 <UpdateFCntDown+0x78>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	683a      	ldr	r2, [r7, #0]
 801693a:	621a      	str	r2, [r3, #32]
            break;
 801693c:	e017      	b.n	801696e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801693e:	4b0e      	ldr	r3, [pc, #56]	; (8016978 <UpdateFCntDown+0x78>)
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	683a      	ldr	r2, [r7, #0]
 8016944:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016946:	4b0c      	ldr	r3, [pc, #48]	; (8016978 <UpdateFCntDown+0x78>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	683a      	ldr	r2, [r7, #0]
 801694c:	621a      	str	r2, [r3, #32]
            break;
 801694e:	e00e      	b.n	801696e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016950:	4b09      	ldr	r3, [pc, #36]	; (8016978 <UpdateFCntDown+0x78>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	683a      	ldr	r2, [r7, #0]
 8016956:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016958:	4b07      	ldr	r3, [pc, #28]	; (8016978 <UpdateFCntDown+0x78>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	683a      	ldr	r2, [r7, #0]
 801695e:	621a      	str	r2, [r3, #32]
            break;
 8016960:	e005      	b.n	801696e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016962:	4b05      	ldr	r3, [pc, #20]	; (8016978 <UpdateFCntDown+0x78>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	683a      	ldr	r2, [r7, #0]
 8016968:	61da      	str	r2, [r3, #28]
            break;
 801696a:	e000      	b.n	801696e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801696c:	bf00      	nop
    }
}
 801696e:	bf00      	nop
 8016970:	370c      	adds	r7, #12
 8016972:	46bd      	mov	sp, r7
 8016974:	bc80      	pop	{r7}
 8016976:	4770      	bx	lr
 8016978:	20001720 	.word	0x20001720

0801697c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801697c:	b480      	push	{r7}
 801697e:	b083      	sub	sp, #12
 8016980:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016982:	4b18      	ldr	r3, [pc, #96]	; (80169e4 <ResetFCnts+0x68>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	2200      	movs	r2, #0
 8016988:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801698a:	4b16      	ldr	r3, [pc, #88]	; (80169e4 <ResetFCnts+0x68>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f04f 32ff 	mov.w	r2, #4294967295
 8016992:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016994:	4b13      	ldr	r3, [pc, #76]	; (80169e4 <ResetFCnts+0x68>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	f04f 32ff 	mov.w	r2, #4294967295
 801699c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801699e:	4b11      	ldr	r3, [pc, #68]	; (80169e4 <ResetFCnts+0x68>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f04f 32ff 	mov.w	r2, #4294967295
 80169a6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80169a8:	4b0e      	ldr	r3, [pc, #56]	; (80169e4 <ResetFCnts+0x68>)
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	4b0d      	ldr	r3, [pc, #52]	; (80169e4 <ResetFCnts+0x68>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	6992      	ldr	r2, [r2, #24]
 80169b2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169b4:	2300      	movs	r3, #0
 80169b6:	607b      	str	r3, [r7, #4]
 80169b8:	e00b      	b.n	80169d2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80169ba:	4b0a      	ldr	r3, [pc, #40]	; (80169e4 <ResetFCnts+0x68>)
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	3306      	adds	r3, #6
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	4413      	add	r3, r2
 80169c6:	f04f 32ff 	mov.w	r2, #4294967295
 80169ca:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	3301      	adds	r3, #1
 80169d0:	607b      	str	r3, [r7, #4]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	ddf0      	ble.n	80169ba <ResetFCnts+0x3e>
    }
}
 80169d8:	bf00      	nop
 80169da:	bf00      	nop
 80169dc:	370c      	adds	r7, #12
 80169de:	46bd      	mov	sp, r7
 80169e0:	bc80      	pop	{r7}
 80169e2:	4770      	bx	lr
 80169e4:	20001720 	.word	0x20001720

080169e8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80169e8:	b480      	push	{r7}
 80169ea:	b083      	sub	sp, #12
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80169f0:	4b06      	ldr	r3, [pc, #24]	; (8016a0c <IsJoinNonce10xOk+0x24>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	689b      	ldr	r3, [r3, #8]
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	429a      	cmp	r2, r3
 80169fa:	bf8c      	ite	hi
 80169fc:	2301      	movhi	r3, #1
 80169fe:	2300      	movls	r3, #0
 8016a00:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	370c      	adds	r7, #12
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bc80      	pop	{r7}
 8016a0a:	4770      	bx	lr
 8016a0c:	20001720 	.word	0x20001720

08016a10 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d101      	bne.n	8016a22 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016a1e:	2309      	movs	r3, #9
 8016a20:	e01c      	b.n	8016a5c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016a22:	4a10      	ldr	r2, [pc, #64]	; (8016a64 <LoRaMacCryptoInit+0x54>)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a28:	4b0e      	ldr	r3, [pc, #56]	; (8016a64 <LoRaMacCryptoInit+0x54>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	2228      	movs	r2, #40	; 0x28
 8016a2e:	2100      	movs	r1, #0
 8016a30:	4618      	mov	r0, r3
 8016a32:	f003 fa31 	bl	8019e98 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a36:	4b0b      	ldr	r3, [pc, #44]	; (8016a64 <LoRaMacCryptoInit+0x54>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a3e:	4b09      	ldr	r3, [pc, #36]	; (8016a64 <LoRaMacCryptoInit+0x54>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	2201      	movs	r2, #1
 8016a44:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a46:	4b07      	ldr	r3, [pc, #28]	; (8016a64 <LoRaMacCryptoInit+0x54>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2201      	movs	r2, #1
 8016a4c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a4e:	4b05      	ldr	r3, [pc, #20]	; (8016a64 <LoRaMacCryptoInit+0x54>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2200      	movs	r2, #0
 8016a54:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a56:	f7ff ff91 	bl	801697c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a5a:	2300      	movs	r3, #0
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	20001720 	.word	0x20001720

08016a68 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a70:	4b04      	ldr	r3, [pc, #16]	; (8016a84 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016a78:	2300      	movs	r3, #0
}
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	370c      	adds	r7, #12
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bc80      	pop	{r7}
 8016a82:	4770      	bx	lr
 8016a84:	20001720 	.word	0x20001720

08016a88 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d101      	bne.n	8016a9a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a96:	230a      	movs	r3, #10
 8016a98:	e006      	b.n	8016aa8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016a9a:	4b06      	ldr	r3, [pc, #24]	; (8016ab4 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	68db      	ldr	r3, [r3, #12]
 8016aa0:	1c5a      	adds	r2, r3, #1
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	370c      	adds	r7, #12
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bc80      	pop	{r7}
 8016ab0:	4770      	bx	lr
 8016ab2:	bf00      	nop
 8016ab4:	20001720 	.word	0x20001720

08016ab8 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016abc:	b08a      	sub	sp, #40	; 0x28
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	613a      	str	r2, [r7, #16]
 8016ac2:	60fb      	str	r3, [r7, #12]
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	75fb      	strb	r3, [r7, #23]
 8016ac8:	460b      	mov	r3, r1
 8016aca:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016ad4:	2313      	movs	r3, #19
 8016ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d101      	bne.n	8016ae4 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ae0:	230a      	movs	r3, #10
 8016ae2:	e057      	b.n	8016b94 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ae4:	f107 021c 	add.w	r2, r7, #28
 8016ae8:	7dfb      	ldrb	r3, [r7, #23]
 8016aea:	4611      	mov	r1, r2
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7ff fea7 	bl	8016840 <GetLastFcntDown>
 8016af2:	4603      	mov	r3, r0
 8016af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d002      	beq.n	8016b06 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b04:	e046      	b.n	8016b94 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b0c:	d103      	bne.n	8016b16 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	693a      	ldr	r2, [r7, #16]
 8016b12:	601a      	str	r2, [r3, #0]
 8016b14:	e01e      	b.n	8016b54 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016b16:	69fb      	ldr	r3, [r7, #28]
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	693a      	ldr	r2, [r7, #16]
 8016b1c:	1ad3      	subs	r3, r2, r3
 8016b1e:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	dd05      	ble.n	8016b32 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b26:	69fa      	ldr	r2, [r7, #28]
 8016b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2a:	441a      	add	r2, r3
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	601a      	str	r2, [r3, #0]
 8016b30:	e010      	b.n	8016b54 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d104      	bne.n	8016b42 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b38:	69fa      	ldr	r2, [r7, #28]
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b3e:	2307      	movs	r3, #7
 8016b40:	e028      	b.n	8016b94 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	0c1b      	lsrs	r3, r3, #16
 8016b46:	041b      	lsls	r3, r3, #16
 8016b48:	693a      	ldr	r2, [r7, #16]
 8016b4a:	4413      	add	r3, r2
 8016b4c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b54:	4b12      	ldr	r3, [pc, #72]	; (8016ba0 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	789b      	ldrb	r3, [r3, #2]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d119      	bne.n	8016b92 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2200      	movs	r2, #0
 8016b64:	603b      	str	r3, [r7, #0]
 8016b66:	607a      	str	r2, [r7, #4]
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	469a      	mov	sl, r3
 8016b6e:	4693      	mov	fp, r2
 8016b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b74:	4611      	mov	r1, r2
 8016b76:	ebb1 040a 	subs.w	r4, r1, sl
 8016b7a:	eb63 050b 	sbc.w	r5, r3, fp
 8016b7e:	8abb      	ldrh	r3, [r7, #20]
 8016b80:	2200      	movs	r2, #0
 8016b82:	4698      	mov	r8, r3
 8016b84:	4691      	mov	r9, r2
 8016b86:	4544      	cmp	r4, r8
 8016b88:	eb75 0309 	sbcs.w	r3, r5, r9
 8016b8c:	db01      	blt.n	8016b92 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016b8e:	2308      	movs	r3, #8
 8016b90:	e000      	b.n	8016b94 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b92:	2300      	movs	r3, #0
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3728      	adds	r7, #40	; 0x28
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b9e:	bf00      	nop
 8016ba0:	20001720 	.word	0x20001720

08016ba4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b085      	sub	sp, #20
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d101      	bne.n	8016bb6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016bb2:	230a      	movs	r3, #10
 8016bb4:	e019      	b.n	8016bea <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	60fb      	str	r3, [r7, #12]
 8016bba:	e012      	b.n	8016be2 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016bbc:	4b0d      	ldr	r3, [pc, #52]	; (8016bf4 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016bbe:	6819      	ldr	r1, [r3, #0]
 8016bc0:	68fa      	ldr	r2, [r7, #12]
 8016bc2:	4613      	mov	r3, r2
 8016bc4:	005b      	lsls	r3, r3, #1
 8016bc6:	4413      	add	r3, r2
 8016bc8:	011b      	lsls	r3, r3, #4
 8016bca:	461a      	mov	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	4413      	add	r3, r2
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	3206      	adds	r2, #6
 8016bd4:	0092      	lsls	r2, r2, #2
 8016bd6:	440a      	add	r2, r1
 8016bd8:	3204      	adds	r2, #4
 8016bda:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	3301      	adds	r3, #1
 8016be0:	60fb      	str	r3, [r7, #12]
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	dde9      	ble.n	8016bbc <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016be8:	2300      	movs	r3, #0
}
 8016bea:	4618      	mov	r0, r3
 8016bec:	3714      	adds	r7, #20
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bc80      	pop	{r7}
 8016bf2:	4770      	bx	lr
 8016bf4:	20001720 	.word	0x20001720

08016bf8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	4603      	mov	r3, r0
 8016c00:	6039      	str	r1, [r7, #0]
 8016c02:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016c04:	79fb      	ldrb	r3, [r7, #7]
 8016c06:	6839      	ldr	r1, [r7, #0]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7f8 faef 	bl	800f1ec <SecureElementSetKey>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d001      	beq.n	8016c18 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c14:	230f      	movs	r3, #15
 8016c16:	e021      	b.n	8016c5c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016c18:	79fb      	ldrb	r3, [r7, #7]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d11d      	bne.n	8016c5a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c1e:	4b11      	ldr	r3, [pc, #68]	; (8016c64 <LoRaMacCryptoSetKey+0x6c>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	789b      	ldrb	r3, [r3, #2]
 8016c24:	210b      	movs	r1, #11
 8016c26:	4618      	mov	r0, r3
 8016c28:	f000 fa5e 	bl	80170e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d001      	beq.n	8016c36 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c32:	230f      	movs	r3, #15
 8016c34:	e012      	b.n	8016c5c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c36:	210c      	movs	r1, #12
 8016c38:	2000      	movs	r0, #0
 8016c3a:	f000 fa55 	bl	80170e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d001      	beq.n	8016c48 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c44:	230f      	movs	r3, #15
 8016c46:	e009      	b.n	8016c5c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c48:	210a      	movs	r1, #10
 8016c4a:	2000      	movs	r0, #0
 8016c4c:	f000 fa4c 	bl	80170e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d001      	beq.n	8016c5a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c56:	230f      	movs	r3, #15
 8016c58:	e000      	b.n	8016c5c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c5a:	2300      	movs	r3, #0
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3708      	adds	r7, #8
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	20001720 	.word	0x20001720

08016c68 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b086      	sub	sp, #24
 8016c6c:	af02      	add	r7, sp, #8
 8016c6e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d101      	bne.n	8016c7a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c76:	230a      	movs	r3, #10
 8016c78:	e033      	b.n	8016ce2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c7e:	2300      	movs	r3, #0
 8016c80:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016c82:	f107 0308 	add.w	r3, r7, #8
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7f8 fc8a 	bl	800f5a0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016c8c:	68ba      	ldr	r2, [r7, #8]
 8016c8e:	4b17      	ldr	r3, [pc, #92]	; (8016cec <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	b292      	uxth	r2, r2
 8016c94:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016c96:	4b15      	ldr	r3, [pc, #84]	; (8016cec <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	889a      	ldrh	r2, [r3, #4]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f000 fc1b 	bl	80174dc <LoRaMacSerializerJoinRequest>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d001      	beq.n	8016cb0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cac:	2311      	movs	r3, #17
 8016cae:	e018      	b.n	8016ce2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6819      	ldr	r1, [r3, #0]
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	3318      	adds	r3, #24
 8016cb8:	7bfa      	ldrb	r2, [r7, #15]
 8016cba:	9300      	str	r3, [sp, #0]
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	2213      	movs	r2, #19
 8016cc0:	2000      	movs	r0, #0
 8016cc2:	f7f8 faf1 	bl	800f2a8 <SecureElementComputeAesCmac>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d001      	beq.n	8016cd0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ccc:	230f      	movs	r3, #15
 8016cce:	e008      	b.n	8016ce2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f000 fc03 	bl	80174dc <LoRaMacSerializerJoinRequest>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d001      	beq.n	8016ce0 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cdc:	2311      	movs	r3, #17
 8016cde:	e000      	b.n	8016ce2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016ce0:	2300      	movs	r3, #0
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3710      	adds	r7, #16
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}
 8016cea:	bf00      	nop
 8016cec:	20001720 	.word	0x20001720

08016cf0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016cf0:	b590      	push	{r4, r7, lr}
 8016cf2:	b097      	sub	sp, #92	; 0x5c
 8016cf4:	af04      	add	r7, sp, #16
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	60b9      	str	r1, [r7, #8]
 8016cfa:	607a      	str	r2, [r7, #4]
 8016cfc:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d002      	beq.n	8016d0a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016d04:	68bb      	ldr	r3, [r7, #8]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d101      	bne.n	8016d0e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d0a:	230a      	movs	r3, #10
 8016d0c:	e0d3      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016d0e:	2313      	movs	r3, #19
 8016d10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d14:	2300      	movs	r3, #0
 8016d16:	617b      	str	r3, [r7, #20]
 8016d18:	f107 0318 	add.w	r3, r7, #24
 8016d1c:	221d      	movs	r2, #29
 8016d1e:	2100      	movs	r1, #0
 8016d20:	4618      	mov	r0, r3
 8016d22:	f007 fe9b 	bl	801ea5c <memset>
    uint8_t versionMinor         = 0;
 8016d26:	2300      	movs	r3, #0
 8016d28:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d2a:	4b65      	ldr	r3, [pc, #404]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	889b      	ldrh	r3, [r3, #4]
 8016d30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681c      	ldr	r4, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	791b      	ldrb	r3, [r3, #4]
 8016d3c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d40:	7bf8      	ldrb	r0, [r7, #15]
 8016d42:	f107 0213 	add.w	r2, r7, #19
 8016d46:	9202      	str	r2, [sp, #8]
 8016d48:	f107 0214 	add.w	r2, r7, #20
 8016d4c:	9201      	str	r2, [sp, #4]
 8016d4e:	9300      	str	r3, [sp, #0]
 8016d50:	4623      	mov	r3, r4
 8016d52:	460a      	mov	r2, r1
 8016d54:	68b9      	ldr	r1, [r7, #8]
 8016d56:	f7f8 fbad 	bl	800f4b4 <SecureElementProcessJoinAccept>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d001      	beq.n	8016d64 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d60:	230f      	movs	r3, #15
 8016d62:	e0a8      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6818      	ldr	r0, [r3, #0]
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	791b      	ldrb	r3, [r3, #4]
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	f107 0314 	add.w	r3, r7, #20
 8016d72:	4619      	mov	r1, r3
 8016d74:	f003 f855 	bl	8019e22 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f000 f9f0 	bl	801715e <LoRaMacParserJoinAccept>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d001      	beq.n	8016d88 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016d84:	2310      	movs	r3, #16
 8016d86:	e096      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	799b      	ldrb	r3, [r3, #6]
 8016d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	79db      	ldrb	r3, [r3, #7]
 8016d98:	021b      	lsls	r3, r3, #8
 8016d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d9c:	4313      	orrs	r3, r2
 8016d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	7a1b      	ldrb	r3, [r3, #8]
 8016da4:	041b      	lsls	r3, r3, #16
 8016da6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016da8:	4313      	orrs	r3, r2
 8016daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016dac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016dae:	f7ff fe1b 	bl	80169e8 <IsJoinNonce10xOk>
 8016db2:	4603      	mov	r3, r0
 8016db4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016db8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d010      	beq.n	8016de2 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016dc0:	4b3f      	ldr	r3, [pc, #252]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dc6:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016dc8:	7cfb      	ldrb	r3, [r7, #19]
 8016dca:	210b      	movs	r1, #11
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f000 f98b 	bl	80170e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d005      	beq.n	8016dec <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016de0:	e001      	b.n	8016de6 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016de2:	2303      	movs	r3, #3
 8016de4:	e067      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016de6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dea:	e064      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016dec:	210c      	movs	r1, #12
 8016dee:	2000      	movs	r0, #0
 8016df0:	f000 f97a 	bl	80170e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016df4:	4603      	mov	r3, r0
 8016df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d002      	beq.n	8016e08 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016e02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e06:	e056      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016e08:	210a      	movs	r1, #10
 8016e0a:	2000      	movs	r0, #0
 8016e0c:	f000 f96c 	bl	80170e8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e10:	4603      	mov	r3, r0
 8016e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d002      	beq.n	8016e24 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016e1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e22:	e048      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	7a5b      	ldrb	r3, [r3, #9]
 8016e28:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	7a9b      	ldrb	r3, [r3, #10]
 8016e2e:	021b      	lsls	r3, r3, #8
 8016e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e32:	4313      	orrs	r3, r2
 8016e34:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	7adb      	ldrb	r3, [r3, #11]
 8016e3a:	041b      	lsls	r3, r3, #16
 8016e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e3e:	4313      	orrs	r3, r2
 8016e40:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e4a:	2009      	movs	r0, #9
 8016e4c:	f7ff fca8 	bl	80167a0 <DeriveSessionKey10x>
 8016e50:	4603      	mov	r3, r0
 8016e52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d002      	beq.n	8016e64 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016e5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e62:	e028      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e6c:	2008      	movs	r0, #8
 8016e6e:	f7ff fc97 	bl	80167a0 <DeriveSessionKey10x>
 8016e72:	4603      	mov	r3, r0
 8016e74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d002      	beq.n	8016e86 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016e80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e84:	e017      	b.n	8016eb6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016e86:	4b0e      	ldr	r3, [pc, #56]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	7cfa      	ldrb	r2, [r7, #19]
 8016e8c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e8e:	4b0c      	ldr	r3, [pc, #48]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	2200      	movs	r2, #0
 8016e94:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e96:	4b0a      	ldr	r3, [pc, #40]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e9e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016ea0:	4b07      	ldr	r3, [pc, #28]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ea8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016eaa:	4b05      	ldr	r3, [pc, #20]	; (8016ec0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	f04f 32ff 	mov.w	r2, #4294967295
 8016eb2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016eb4:	2300      	movs	r3, #0
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	374c      	adds	r7, #76	; 0x4c
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd90      	pop	{r4, r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	20001720 	.word	0x20001720

08016ec4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016ec4:	b590      	push	{r4, r7, lr}
 8016ec6:	b08b      	sub	sp, #44	; 0x2c
 8016ec8:	af04      	add	r7, sp, #16
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	607b      	str	r3, [r7, #4]
 8016ece:	460b      	mov	r3, r1
 8016ed0:	72fb      	strb	r3, [r7, #11]
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016ed6:	2313      	movs	r3, #19
 8016ed8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016eda:	2309      	movs	r3, #9
 8016edc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d101      	bne.n	8016ee8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ee4:	230a      	movs	r3, #10
 8016ee6:	e05f      	b.n	8016fa8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016ee8:	4b31      	ldr	r3, [pc, #196]	; (8016fb0 <LoRaMacCryptoSecureMessage+0xec>)
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	68db      	ldr	r3, [r3, #12]
 8016eee:	68fa      	ldr	r2, [r7, #12]
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d201      	bcs.n	8016ef8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016ef4:	2306      	movs	r3, #6
 8016ef6:	e057      	b.n	8016fa8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d101      	bne.n	8016f06 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f02:	2308      	movs	r3, #8
 8016f04:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016f06:	4b2a      	ldr	r3, [pc, #168]	; (8016fb0 <LoRaMacCryptoSecureMessage+0xec>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	68db      	ldr	r3, [r3, #12]
 8016f0c:	68fa      	ldr	r2, [r7, #12]
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	d916      	bls.n	8016f40 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f1c:	b219      	sxth	r1, r3
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	689c      	ldr	r4, [r3, #8]
 8016f22:	7dfa      	ldrb	r2, [r7, #23]
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	9301      	str	r3, [sp, #4]
 8016f28:	2300      	movs	r3, #0
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	4623      	mov	r3, r4
 8016f2e:	f7ff fa43 	bl	80163b8 <PayloadEncrypt>
 8016f32:	4603      	mov	r3, r0
 8016f34:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f36:	7dbb      	ldrb	r3, [r7, #22]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d001      	beq.n	8016f40 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f3c:	7dbb      	ldrb	r3, [r7, #22]
 8016f3e:	e033      	b.n	8016fa8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f000 fb4d 	bl	80175e0 <LoRaMacSerializerData>
 8016f46:	4603      	mov	r3, r0
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d001      	beq.n	8016f50 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f4c:	2311      	movs	r3, #17
 8016f4e:	e02b      	b.n	8016fa8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f50:	2308      	movs	r3, #8
 8016f52:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	6818      	ldr	r0, [r3, #0]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	791b      	ldrb	r3, [r3, #4]
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	3b04      	subs	r3, #4
 8016f60:	b299      	uxth	r1, r3
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	689b      	ldr	r3, [r3, #8]
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	322c      	adds	r2, #44	; 0x2c
 8016f6a:	7dfc      	ldrb	r4, [r7, #23]
 8016f6c:	9203      	str	r2, [sp, #12]
 8016f6e:	68fa      	ldr	r2, [r7, #12]
 8016f70:	9202      	str	r2, [sp, #8]
 8016f72:	9301      	str	r3, [sp, #4]
 8016f74:	2300      	movs	r3, #0
 8016f76:	9300      	str	r3, [sp, #0]
 8016f78:	2300      	movs	r3, #0
 8016f7a:	4622      	mov	r2, r4
 8016f7c:	f7ff fb1d 	bl	80165ba <ComputeCmacB0>
 8016f80:	4603      	mov	r3, r0
 8016f82:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f84:	7dbb      	ldrb	r3, [r7, #22]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d001      	beq.n	8016f8e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016f8a:	7dbb      	ldrb	r3, [r7, #22]
 8016f8c:	e00c      	b.n	8016fa8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f000 fb26 	bl	80175e0 <LoRaMacSerializerData>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d001      	beq.n	8016f9e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f9a:	2311      	movs	r3, #17
 8016f9c:	e004      	b.n	8016fa8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f9e:	4b04      	ldr	r3, [pc, #16]	; (8016fb0 <LoRaMacCryptoSecureMessage+0xec>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	68fa      	ldr	r2, [r7, #12]
 8016fa4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016fa6:	2300      	movs	r3, #0
}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	371c      	adds	r7, #28
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd90      	pop	{r4, r7, pc}
 8016fb0:	20001720 	.word	0x20001720

08016fb4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016fb4:	b590      	push	{r4, r7, lr}
 8016fb6:	b08b      	sub	sp, #44	; 0x2c
 8016fb8:	af04      	add	r7, sp, #16
 8016fba:	60b9      	str	r1, [r7, #8]
 8016fbc:	607b      	str	r3, [r7, #4]
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	73fb      	strb	r3, [r7, #15]
 8016fc2:	4613      	mov	r3, r2
 8016fc4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d101      	bne.n	8016fd0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016fcc:	230a      	movs	r3, #10
 8016fce:	e084      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016fd0:	7bbb      	ldrb	r3, [r7, #14]
 8016fd2:	6879      	ldr	r1, [r7, #4]
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f7ff fc6f 	bl	80168b8 <CheckFCntDown>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	f083 0301 	eor.w	r3, r3, #1
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d001      	beq.n	8016fea <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016fe6:	2306      	movs	r3, #6
 8016fe8:	e077      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016fea:	2313      	movs	r3, #19
 8016fec:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016fee:	2309      	movs	r3, #9
 8016ff0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016ff2:	2308      	movs	r3, #8
 8016ff4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ff8:	f000 f97c 	bl	80172f4 <LoRaMacParserData>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d001      	beq.n	8017006 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017002:	2310      	movs	r3, #16
 8017004:	e069      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017006:	f107 0210 	add.w	r2, r7, #16
 801700a:	7bfb      	ldrb	r3, [r7, #15]
 801700c:	4611      	mov	r1, r2
 801700e:	4618      	mov	r0, r3
 8017010:	f7ff fba0 	bl	8016754 <GetKeyAddrItem>
 8017014:	4603      	mov	r3, r0
 8017016:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017018:	7d7b      	ldrb	r3, [r7, #21]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d001      	beq.n	8017022 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801701e:	7d7b      	ldrb	r3, [r7, #21]
 8017020:	e05b      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	785b      	ldrb	r3, [r3, #1]
 8017026:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017028:	693b      	ldr	r3, [r7, #16]
 801702a:	789b      	ldrb	r3, [r3, #2]
 801702c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017030:	689b      	ldr	r3, [r3, #8]
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	429a      	cmp	r2, r3
 8017036:	d001      	beq.n	801703c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017038:	2302      	movs	r3, #2
 801703a:	e04e      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703e:	7b1b      	ldrb	r3, [r3, #12]
 8017040:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017044:	b2db      	uxtb	r3, r3
 8017046:	2b00      	cmp	r3, #0
 8017048:	bf14      	ite	ne
 801704a:	2301      	movne	r3, #1
 801704c:	2300      	moveq	r3, #0
 801704e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017050:	4b24      	ldr	r3, [pc, #144]	; (80170e4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	789b      	ldrb	r3, [r3, #2]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d101      	bne.n	801705e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801705a:	2300      	movs	r3, #0
 801705c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017060:	6818      	ldr	r0, [r3, #0]
 8017062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017064:	791b      	ldrb	r3, [r3, #4]
 8017066:	b29b      	uxth	r3, r3
 8017068:	3b04      	subs	r3, #4
 801706a:	b299      	uxth	r1, r3
 801706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017070:	7dbc      	ldrb	r4, [r7, #22]
 8017072:	7d3a      	ldrb	r2, [r7, #20]
 8017074:	9303      	str	r3, [sp, #12]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	9302      	str	r3, [sp, #8]
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	9301      	str	r3, [sp, #4]
 801707e:	2301      	movs	r3, #1
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	4623      	mov	r3, r4
 8017084:	f7ff fad7 	bl	8016636 <VerifyCmacB0>
 8017088:	4603      	mov	r3, r0
 801708a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801708c:	7d7b      	ldrb	r3, [r7, #21]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d001      	beq.n	8017096 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8017092:	7d7b      	ldrb	r3, [r7, #21]
 8017094:	e021      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017098:	f893 3020 	ldrb.w	r3, [r3, #32]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d101      	bne.n	80170a4 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80170a0:	2308      	movs	r3, #8
 80170a2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80170a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80170a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170ae:	b219      	sxth	r1, r3
 80170b0:	7dfa      	ldrb	r2, [r7, #23]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	9301      	str	r3, [sp, #4]
 80170b6:	2301      	movs	r3, #1
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	f7ff f97c 	bl	80163b8 <PayloadEncrypt>
 80170c0:	4603      	mov	r3, r0
 80170c2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170c4:	7d7b      	ldrb	r3, [r7, #21]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80170ca:	7d7b      	ldrb	r3, [r7, #21]
 80170cc:	e005      	b.n	80170da <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80170ce:	7bbb      	ldrb	r3, [r7, #14]
 80170d0:	6879      	ldr	r1, [r7, #4]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7ff fc14 	bl	8016900 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80170d8:	2300      	movs	r3, #0
}
 80170da:	4618      	mov	r0, r3
 80170dc:	371c      	adds	r7, #28
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd90      	pop	{r4, r7, pc}
 80170e2:	bf00      	nop
 80170e4:	20001720 	.word	0x20001720

080170e8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b088      	sub	sp, #32
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	4603      	mov	r3, r0
 80170f0:	460a      	mov	r2, r1
 80170f2:	71fb      	strb	r3, [r7, #7]
 80170f4:	4613      	mov	r3, r2
 80170f6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80170f8:	2300      	movs	r3, #0
 80170fa:	60fb      	str	r3, [r7, #12]
 80170fc:	f107 0310 	add.w	r3, r7, #16
 8017100:	2200      	movs	r2, #0
 8017102:	601a      	str	r2, [r3, #0]
 8017104:	605a      	str	r2, [r3, #4]
 8017106:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8017108:	2300      	movs	r3, #0
 801710a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801710c:	79bb      	ldrb	r3, [r7, #6]
 801710e:	2b0c      	cmp	r3, #12
 8017110:	d00b      	beq.n	801712a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017112:	2b0c      	cmp	r3, #12
 8017114:	dc0f      	bgt.n	8017136 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017116:	2b0a      	cmp	r3, #10
 8017118:	d00a      	beq.n	8017130 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801711a:	2b0b      	cmp	r3, #11
 801711c:	d10b      	bne.n	8017136 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801711e:	79fb      	ldrb	r3, [r7, #7]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d10a      	bne.n	801713a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017124:	2320      	movs	r3, #32
 8017126:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017128:	e007      	b.n	801713a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801712a:	230b      	movs	r3, #11
 801712c:	77fb      	strb	r3, [r7, #31]
            break;
 801712e:	e005      	b.n	801713c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8017130:	2330      	movs	r3, #48	; 0x30
 8017132:	733b      	strb	r3, [r7, #12]
            break;
 8017134:	e002      	b.n	801713c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017136:	230b      	movs	r3, #11
 8017138:	e00d      	b.n	8017156 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801713a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801713c:	79ba      	ldrb	r2, [r7, #6]
 801713e:	7ff9      	ldrb	r1, [r7, #31]
 8017140:	f107 030c 	add.w	r3, r7, #12
 8017144:	4618      	mov	r0, r3
 8017146:	f7f8 f975 	bl	800f434 <SecureElementDeriveAndStoreKey>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	d001      	beq.n	8017154 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017150:	230f      	movs	r3, #15
 8017152:	e000      	b.n	8017156 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017154:	2300      	movs	r3, #0
}
 8017156:	4618      	mov	r0, r3
 8017158:	3720      	adds	r7, #32
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}

0801715e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801715e:	b580      	push	{r7, lr}
 8017160:	b084      	sub	sp, #16
 8017162:	af00      	add	r7, sp, #0
 8017164:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d003      	beq.n	8017174 <LoRaMacParserJoinAccept+0x16>
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d101      	bne.n	8017178 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017174:	2302      	movs	r3, #2
 8017176:	e0b9      	b.n	80172ec <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017178:	2300      	movs	r3, #0
 801717a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	89fb      	ldrh	r3, [r7, #14]
 8017182:	1c59      	adds	r1, r3, #1
 8017184:	81f9      	strh	r1, [r7, #14]
 8017186:	4413      	add	r3, r2
 8017188:	781a      	ldrb	r2, [r3, #0]
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	1d98      	adds	r0, r3, #6
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	89fb      	ldrh	r3, [r7, #14]
 8017198:	4413      	add	r3, r2
 801719a:	2203      	movs	r2, #3
 801719c:	4619      	mov	r1, r3
 801719e:	f002 fe40 	bl	8019e22 <memcpy1>
    bufItr = bufItr + 3;
 80171a2:	89fb      	ldrh	r3, [r7, #14]
 80171a4:	3303      	adds	r3, #3
 80171a6:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f103 0009 	add.w	r0, r3, #9
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681a      	ldr	r2, [r3, #0]
 80171b2:	89fb      	ldrh	r3, [r7, #14]
 80171b4:	4413      	add	r3, r2
 80171b6:	2203      	movs	r2, #3
 80171b8:	4619      	mov	r1, r3
 80171ba:	f002 fe32 	bl	8019e22 <memcpy1>
    bufItr = bufItr + 3;
 80171be:	89fb      	ldrh	r3, [r7, #14]
 80171c0:	3303      	adds	r3, #3
 80171c2:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	89fb      	ldrh	r3, [r7, #14]
 80171ca:	1c59      	adds	r1, r3, #1
 80171cc:	81f9      	strh	r1, [r7, #14]
 80171ce:	4413      	add	r3, r2
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	461a      	mov	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681a      	ldr	r2, [r3, #0]
 80171dc:	89fb      	ldrh	r3, [r7, #14]
 80171de:	1c59      	adds	r1, r3, #1
 80171e0:	81f9      	strh	r1, [r7, #14]
 80171e2:	4413      	add	r3, r2
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	021a      	lsls	r2, r3, #8
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	431a      	orrs	r2, r3
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	89fb      	ldrh	r3, [r7, #14]
 80171f8:	1c59      	adds	r1, r3, #1
 80171fa:	81f9      	strh	r1, [r7, #14]
 80171fc:	4413      	add	r3, r2
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	041a      	lsls	r2, r3, #16
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	431a      	orrs	r2, r3
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681a      	ldr	r2, [r3, #0]
 8017210:	89fb      	ldrh	r3, [r7, #14]
 8017212:	1c59      	adds	r1, r3, #1
 8017214:	81f9      	strh	r1, [r7, #14]
 8017216:	4413      	add	r3, r2
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	061a      	lsls	r2, r3, #24
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	68db      	ldr	r3, [r3, #12]
 8017220:	431a      	orrs	r2, r3
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	89fb      	ldrh	r3, [r7, #14]
 801722c:	1c59      	adds	r1, r3, #1
 801722e:	81f9      	strh	r1, [r7, #14]
 8017230:	4413      	add	r3, r2
 8017232:	781a      	ldrb	r2, [r3, #0]
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681a      	ldr	r2, [r3, #0]
 801723c:	89fb      	ldrh	r3, [r7, #14]
 801723e:	1c59      	adds	r1, r3, #1
 8017240:	81f9      	strh	r1, [r7, #14]
 8017242:	4413      	add	r3, r2
 8017244:	781a      	ldrb	r2, [r3, #0]
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	791b      	ldrb	r3, [r3, #4]
 801724e:	1f1a      	subs	r2, r3, #4
 8017250:	89fb      	ldrh	r3, [r7, #14]
 8017252:	1ad3      	subs	r3, r2, r3
 8017254:	2b10      	cmp	r3, #16
 8017256:	d10e      	bne.n	8017276 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f103 0012 	add.w	r0, r3, #18
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	89fb      	ldrh	r3, [r7, #14]
 8017264:	4413      	add	r3, r2
 8017266:	2210      	movs	r2, #16
 8017268:	4619      	mov	r1, r3
 801726a:	f002 fdda 	bl	8019e22 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801726e:	89fb      	ldrh	r3, [r7, #14]
 8017270:	3310      	adds	r3, #16
 8017272:	81fb      	strh	r3, [r7, #14]
 8017274:	e008      	b.n	8017288 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	791b      	ldrb	r3, [r3, #4]
 801727a:	1f1a      	subs	r2, r3, #4
 801727c:	89fb      	ldrh	r3, [r7, #14]
 801727e:	1ad3      	subs	r3, r2, r3
 8017280:	2b00      	cmp	r3, #0
 8017282:	dd01      	ble.n	8017288 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017284:	2301      	movs	r3, #1
 8017286:	e031      	b.n	80172ec <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681a      	ldr	r2, [r3, #0]
 801728c:	89fb      	ldrh	r3, [r7, #14]
 801728e:	1c59      	adds	r1, r3, #1
 8017290:	81f9      	strh	r1, [r7, #14]
 8017292:	4413      	add	r3, r2
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	461a      	mov	r2, r3
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	681a      	ldr	r2, [r3, #0]
 80172a0:	89fb      	ldrh	r3, [r7, #14]
 80172a2:	1c59      	adds	r1, r3, #1
 80172a4:	81f9      	strh	r1, [r7, #14]
 80172a6:	4413      	add	r3, r2
 80172a8:	781b      	ldrb	r3, [r3, #0]
 80172aa:	021a      	lsls	r2, r3, #8
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172b0:	431a      	orrs	r2, r3
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	89fb      	ldrh	r3, [r7, #14]
 80172bc:	1c59      	adds	r1, r3, #1
 80172be:	81f9      	strh	r1, [r7, #14]
 80172c0:	4413      	add	r3, r2
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	041a      	lsls	r2, r3, #16
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ca:	431a      	orrs	r2, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681a      	ldr	r2, [r3, #0]
 80172d4:	89fb      	ldrh	r3, [r7, #14]
 80172d6:	1c59      	adds	r1, r3, #1
 80172d8:	81f9      	strh	r1, [r7, #14]
 80172da:	4413      	add	r3, r2
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	061a      	lsls	r2, r3, #24
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172e4:	431a      	orrs	r2, r3
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80172ea:	2300      	movs	r3, #0
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3710      	adds	r7, #16
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d003      	beq.n	801730a <LoRaMacParserData+0x16>
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d101      	bne.n	801730e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801730a:	2302      	movs	r3, #2
 801730c:	e0e2      	b.n	80174d4 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801730e:	2300      	movs	r3, #0
 8017310:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	89fb      	ldrh	r3, [r7, #14]
 8017318:	1c59      	adds	r1, r3, #1
 801731a:	81f9      	strh	r1, [r7, #14]
 801731c:	4413      	add	r3, r2
 801731e:	781a      	ldrb	r2, [r3, #0]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681a      	ldr	r2, [r3, #0]
 8017328:	89fb      	ldrh	r3, [r7, #14]
 801732a:	1c59      	adds	r1, r3, #1
 801732c:	81f9      	strh	r1, [r7, #14]
 801732e:	4413      	add	r3, r2
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	461a      	mov	r2, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681a      	ldr	r2, [r3, #0]
 801733c:	89fb      	ldrh	r3, [r7, #14]
 801733e:	1c59      	adds	r1, r3, #1
 8017340:	81f9      	strh	r1, [r7, #14]
 8017342:	4413      	add	r3, r2
 8017344:	781b      	ldrb	r3, [r3, #0]
 8017346:	021a      	lsls	r2, r3, #8
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	689b      	ldr	r3, [r3, #8]
 801734c:	431a      	orrs	r2, r3
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	681a      	ldr	r2, [r3, #0]
 8017356:	89fb      	ldrh	r3, [r7, #14]
 8017358:	1c59      	adds	r1, r3, #1
 801735a:	81f9      	strh	r1, [r7, #14]
 801735c:	4413      	add	r3, r2
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	041a      	lsls	r2, r3, #16
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	689b      	ldr	r3, [r3, #8]
 8017366:	431a      	orrs	r2, r3
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	89fb      	ldrh	r3, [r7, #14]
 8017372:	1c59      	adds	r1, r3, #1
 8017374:	81f9      	strh	r1, [r7, #14]
 8017376:	4413      	add	r3, r2
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	061a      	lsls	r2, r3, #24
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	689b      	ldr	r3, [r3, #8]
 8017380:	431a      	orrs	r2, r3
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	89fb      	ldrh	r3, [r7, #14]
 801738c:	1c59      	adds	r1, r3, #1
 801738e:	81f9      	strh	r1, [r7, #14]
 8017390:	4413      	add	r3, r2
 8017392:	781a      	ldrb	r2, [r3, #0]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681a      	ldr	r2, [r3, #0]
 801739c:	89fb      	ldrh	r3, [r7, #14]
 801739e:	1c59      	adds	r1, r3, #1
 80173a0:	81f9      	strh	r1, [r7, #14]
 80173a2:	4413      	add	r3, r2
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	b29a      	uxth	r2, r3
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681a      	ldr	r2, [r3, #0]
 80173b0:	89fb      	ldrh	r3, [r7, #14]
 80173b2:	1c59      	adds	r1, r3, #1
 80173b4:	81f9      	strh	r1, [r7, #14]
 80173b6:	4413      	add	r3, r2
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	0219      	lsls	r1, r3, #8
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	89db      	ldrh	r3, [r3, #14]
 80173c0:	b21a      	sxth	r2, r3
 80173c2:	b20b      	sxth	r3, r1
 80173c4:	4313      	orrs	r3, r2
 80173c6:	b21b      	sxth	r3, r3
 80173c8:	b29a      	uxth	r2, r3
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	f103 0010 	add.w	r0, r3, #16
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681a      	ldr	r2, [r3, #0]
 80173d8:	89fb      	ldrh	r3, [r7, #14]
 80173da:	18d1      	adds	r1, r2, r3
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	7b1b      	ldrb	r3, [r3, #12]
 80173e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173e4:	b2db      	uxtb	r3, r3
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	461a      	mov	r2, r3
 80173ea:	f002 fd1a 	bl	8019e22 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	7b1b      	ldrb	r3, [r3, #12]
 80173f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	b29a      	uxth	r2, r3
 80173fa:	89fb      	ldrh	r3, [r7, #14]
 80173fc:	4413      	add	r3, r2
 80173fe:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2200      	movs	r2, #0
 8017404:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2200      	movs	r2, #0
 801740c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	791b      	ldrb	r3, [r3, #4]
 8017414:	461a      	mov	r2, r3
 8017416:	89fb      	ldrh	r3, [r7, #14]
 8017418:	1ad3      	subs	r3, r2, r3
 801741a:	2b04      	cmp	r3, #4
 801741c:	dd28      	ble.n	8017470 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	89fb      	ldrh	r3, [r7, #14]
 8017424:	1c59      	adds	r1, r3, #1
 8017426:	81f9      	strh	r1, [r7, #14]
 8017428:	4413      	add	r3, r2
 801742a:	781a      	ldrb	r2, [r3, #0]
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	791a      	ldrb	r2, [r3, #4]
 8017436:	89fb      	ldrh	r3, [r7, #14]
 8017438:	b2db      	uxtb	r3, r3
 801743a:	1ad3      	subs	r3, r2, r3
 801743c:	b2db      	uxtb	r3, r3
 801743e:	3b04      	subs	r3, #4
 8017440:	b2da      	uxtb	r2, r3
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681a      	ldr	r2, [r3, #0]
 8017450:	89fb      	ldrh	r3, [r7, #14]
 8017452:	18d1      	adds	r1, r2, r3
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801745a:	b29b      	uxth	r3, r3
 801745c:	461a      	mov	r2, r3
 801745e:	f002 fce0 	bl	8019e22 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017468:	b29a      	uxth	r2, r3
 801746a:	89fb      	ldrh	r3, [r7, #14]
 801746c:	4413      	add	r3, r2
 801746e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681a      	ldr	r2, [r3, #0]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	791b      	ldrb	r3, [r3, #4]
 8017478:	3b04      	subs	r3, #4
 801747a:	4413      	add	r3, r2
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	461a      	mov	r2, r3
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	6819      	ldr	r1, [r3, #0]
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	791b      	ldrb	r3, [r3, #4]
 8017490:	3b03      	subs	r3, #3
 8017492:	440b      	add	r3, r1
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	021b      	lsls	r3, r3, #8
 8017498:	431a      	orrs	r2, r3
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	6819      	ldr	r1, [r3, #0]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	791b      	ldrb	r3, [r3, #4]
 80174aa:	3b02      	subs	r3, #2
 80174ac:	440b      	add	r3, r1
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	041b      	lsls	r3, r3, #16
 80174b2:	431a      	orrs	r2, r3
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6819      	ldr	r1, [r3, #0]
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	791b      	ldrb	r3, [r3, #4]
 80174c4:	3b01      	subs	r3, #1
 80174c6:	440b      	add	r3, r1
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	061b      	lsls	r3, r3, #24
 80174cc:	431a      	orrs	r2, r3
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174d2:	2300      	movs	r3, #0
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3710      	adds	r7, #16
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b084      	sub	sp, #16
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d003      	beq.n	80174f2 <LoRaMacSerializerJoinRequest+0x16>
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d101      	bne.n	80174f6 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80174f2:	2301      	movs	r3, #1
 80174f4:	e070      	b.n	80175d8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80174f6:	2300      	movs	r3, #0
 80174f8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	791b      	ldrb	r3, [r3, #4]
 80174fe:	2b16      	cmp	r3, #22
 8017500:	d801      	bhi.n	8017506 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017502:	2302      	movs	r3, #2
 8017504:	e068      	b.n	80175d8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	89fb      	ldrh	r3, [r7, #14]
 801750c:	1c59      	adds	r1, r3, #1
 801750e:	81f9      	strh	r1, [r7, #14]
 8017510:	4413      	add	r3, r2
 8017512:	687a      	ldr	r2, [r7, #4]
 8017514:	7952      	ldrb	r2, [r2, #5]
 8017516:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681a      	ldr	r2, [r3, #0]
 801751c:	89fb      	ldrh	r3, [r7, #14]
 801751e:	18d0      	adds	r0, r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	3306      	adds	r3, #6
 8017524:	2208      	movs	r2, #8
 8017526:	4619      	mov	r1, r3
 8017528:	f002 fc96 	bl	8019e58 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801752c:	89fb      	ldrh	r3, [r7, #14]
 801752e:	3308      	adds	r3, #8
 8017530:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681a      	ldr	r2, [r3, #0]
 8017536:	89fb      	ldrh	r3, [r7, #14]
 8017538:	18d0      	adds	r0, r2, r3
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	330e      	adds	r3, #14
 801753e:	2208      	movs	r2, #8
 8017540:	4619      	mov	r1, r3
 8017542:	f002 fc89 	bl	8019e58 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017546:	89fb      	ldrh	r3, [r7, #14]
 8017548:	3308      	adds	r3, #8
 801754a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	8ad9      	ldrh	r1, [r3, #22]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	89fb      	ldrh	r3, [r7, #14]
 8017556:	1c58      	adds	r0, r3, #1
 8017558:	81f8      	strh	r0, [r7, #14]
 801755a:	4413      	add	r3, r2
 801755c:	b2ca      	uxtb	r2, r1
 801755e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	8adb      	ldrh	r3, [r3, #22]
 8017564:	0a1b      	lsrs	r3, r3, #8
 8017566:	b299      	uxth	r1, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681a      	ldr	r2, [r3, #0]
 801756c:	89fb      	ldrh	r3, [r7, #14]
 801756e:	1c58      	adds	r0, r3, #1
 8017570:	81f8      	strh	r0, [r7, #14]
 8017572:	4413      	add	r3, r2
 8017574:	b2ca      	uxtb	r2, r1
 8017576:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6999      	ldr	r1, [r3, #24]
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681a      	ldr	r2, [r3, #0]
 8017580:	89fb      	ldrh	r3, [r7, #14]
 8017582:	1c58      	adds	r0, r3, #1
 8017584:	81f8      	strh	r0, [r7, #14]
 8017586:	4413      	add	r3, r2
 8017588:	b2ca      	uxtb	r2, r1
 801758a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	699b      	ldr	r3, [r3, #24]
 8017590:	0a19      	lsrs	r1, r3, #8
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681a      	ldr	r2, [r3, #0]
 8017596:	89fb      	ldrh	r3, [r7, #14]
 8017598:	1c58      	adds	r0, r3, #1
 801759a:	81f8      	strh	r0, [r7, #14]
 801759c:	4413      	add	r3, r2
 801759e:	b2ca      	uxtb	r2, r1
 80175a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	699b      	ldr	r3, [r3, #24]
 80175a6:	0c19      	lsrs	r1, r3, #16
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681a      	ldr	r2, [r3, #0]
 80175ac:	89fb      	ldrh	r3, [r7, #14]
 80175ae:	1c58      	adds	r0, r3, #1
 80175b0:	81f8      	strh	r0, [r7, #14]
 80175b2:	4413      	add	r3, r2
 80175b4:	b2ca      	uxtb	r2, r1
 80175b6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	699b      	ldr	r3, [r3, #24]
 80175bc:	0e19      	lsrs	r1, r3, #24
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	681a      	ldr	r2, [r3, #0]
 80175c2:	89fb      	ldrh	r3, [r7, #14]
 80175c4:	1c58      	adds	r0, r3, #1
 80175c6:	81f8      	strh	r0, [r7, #14]
 80175c8:	4413      	add	r3, r2
 80175ca:	b2ca      	uxtb	r2, r1
 80175cc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175ce:	89fb      	ldrh	r3, [r7, #14]
 80175d0:	b2da      	uxtb	r2, r3
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175d6:	2300      	movs	r3, #0
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3710      	adds	r7, #16
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b084      	sub	sp, #16
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d003      	beq.n	80175f6 <LoRaMacSerializerData+0x16>
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d101      	bne.n	80175fa <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80175f6:	2301      	movs	r3, #1
 80175f8:	e0e5      	b.n	80177c6 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80175fa:	2300      	movs	r3, #0
 80175fc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80175fe:	2308      	movs	r3, #8
 8017600:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	7b1b      	ldrb	r3, [r3, #12]
 8017606:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801760a:	b2db      	uxtb	r3, r3
 801760c:	b29a      	uxth	r2, r3
 801760e:	89bb      	ldrh	r3, [r7, #12]
 8017610:	4413      	add	r3, r2
 8017612:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801761a:	2b00      	cmp	r3, #0
 801761c:	d002      	beq.n	8017624 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801761e:	89bb      	ldrh	r3, [r7, #12]
 8017620:	3301      	adds	r3, #1
 8017622:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801762a:	b29a      	uxth	r2, r3
 801762c:	89bb      	ldrh	r3, [r7, #12]
 801762e:	4413      	add	r3, r2
 8017630:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017632:	89bb      	ldrh	r3, [r7, #12]
 8017634:	3304      	adds	r3, #4
 8017636:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	791b      	ldrb	r3, [r3, #4]
 801763c:	b29b      	uxth	r3, r3
 801763e:	89ba      	ldrh	r2, [r7, #12]
 8017640:	429a      	cmp	r2, r3
 8017642:	d901      	bls.n	8017648 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017644:	2302      	movs	r3, #2
 8017646:	e0be      	b.n	80177c6 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	681a      	ldr	r2, [r3, #0]
 801764c:	89fb      	ldrh	r3, [r7, #14]
 801764e:	1c59      	adds	r1, r3, #1
 8017650:	81f9      	strh	r1, [r7, #14]
 8017652:	4413      	add	r3, r2
 8017654:	687a      	ldr	r2, [r7, #4]
 8017656:	7952      	ldrb	r2, [r2, #5]
 8017658:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6899      	ldr	r1, [r3, #8]
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	89fb      	ldrh	r3, [r7, #14]
 8017664:	1c58      	adds	r0, r3, #1
 8017666:	81f8      	strh	r0, [r7, #14]
 8017668:	4413      	add	r3, r2
 801766a:	b2ca      	uxtb	r2, r1
 801766c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	0a19      	lsrs	r1, r3, #8
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681a      	ldr	r2, [r3, #0]
 8017678:	89fb      	ldrh	r3, [r7, #14]
 801767a:	1c58      	adds	r0, r3, #1
 801767c:	81f8      	strh	r0, [r7, #14]
 801767e:	4413      	add	r3, r2
 8017680:	b2ca      	uxtb	r2, r1
 8017682:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	689b      	ldr	r3, [r3, #8]
 8017688:	0c19      	lsrs	r1, r3, #16
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681a      	ldr	r2, [r3, #0]
 801768e:	89fb      	ldrh	r3, [r7, #14]
 8017690:	1c58      	adds	r0, r3, #1
 8017692:	81f8      	strh	r0, [r7, #14]
 8017694:	4413      	add	r3, r2
 8017696:	b2ca      	uxtb	r2, r1
 8017698:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	0e19      	lsrs	r1, r3, #24
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	89fb      	ldrh	r3, [r7, #14]
 80176a6:	1c58      	adds	r0, r3, #1
 80176a8:	81f8      	strh	r0, [r7, #14]
 80176aa:	4413      	add	r3, r2
 80176ac:	b2ca      	uxtb	r2, r1
 80176ae:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681a      	ldr	r2, [r3, #0]
 80176b4:	89fb      	ldrh	r3, [r7, #14]
 80176b6:	1c59      	adds	r1, r3, #1
 80176b8:	81f9      	strh	r1, [r7, #14]
 80176ba:	4413      	add	r3, r2
 80176bc:	687a      	ldr	r2, [r7, #4]
 80176be:	7b12      	ldrb	r2, [r2, #12]
 80176c0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	89d9      	ldrh	r1, [r3, #14]
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681a      	ldr	r2, [r3, #0]
 80176ca:	89fb      	ldrh	r3, [r7, #14]
 80176cc:	1c58      	adds	r0, r3, #1
 80176ce:	81f8      	strh	r0, [r7, #14]
 80176d0:	4413      	add	r3, r2
 80176d2:	b2ca      	uxtb	r2, r1
 80176d4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	89db      	ldrh	r3, [r3, #14]
 80176da:	0a1b      	lsrs	r3, r3, #8
 80176dc:	b299      	uxth	r1, r3
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681a      	ldr	r2, [r3, #0]
 80176e2:	89fb      	ldrh	r3, [r7, #14]
 80176e4:	1c58      	adds	r0, r3, #1
 80176e6:	81f8      	strh	r0, [r7, #14]
 80176e8:	4413      	add	r3, r2
 80176ea:	b2ca      	uxtb	r2, r1
 80176ec:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681a      	ldr	r2, [r3, #0]
 80176f2:	89fb      	ldrh	r3, [r7, #14]
 80176f4:	18d0      	adds	r0, r2, r3
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	f103 0110 	add.w	r1, r3, #16
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	7b1b      	ldrb	r3, [r3, #12]
 8017700:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017704:	b2db      	uxtb	r3, r3
 8017706:	b29b      	uxth	r3, r3
 8017708:	461a      	mov	r2, r3
 801770a:	f002 fb8a 	bl	8019e22 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	7b1b      	ldrb	r3, [r3, #12]
 8017712:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017716:	b2db      	uxtb	r3, r3
 8017718:	b29a      	uxth	r2, r3
 801771a:	89fb      	ldrh	r3, [r7, #14]
 801771c:	4413      	add	r3, r2
 801771e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017726:	2b00      	cmp	r3, #0
 8017728:	d009      	beq.n	801773e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681a      	ldr	r2, [r3, #0]
 801772e:	89fb      	ldrh	r3, [r7, #14]
 8017730:	1c59      	adds	r1, r3, #1
 8017732:	81f9      	strh	r1, [r7, #14]
 8017734:	4413      	add	r3, r2
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	f892 2020 	ldrb.w	r2, [r2, #32]
 801773c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	89fb      	ldrh	r3, [r7, #14]
 8017744:	18d0      	adds	r0, r2, r3
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017750:	b29b      	uxth	r3, r3
 8017752:	461a      	mov	r2, r3
 8017754:	f002 fb65 	bl	8019e22 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801775e:	b29a      	uxth	r2, r3
 8017760:	89fb      	ldrh	r3, [r7, #14]
 8017762:	4413      	add	r3, r2
 8017764:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	681a      	ldr	r2, [r3, #0]
 801776e:	89fb      	ldrh	r3, [r7, #14]
 8017770:	1c58      	adds	r0, r3, #1
 8017772:	81f8      	strh	r0, [r7, #14]
 8017774:	4413      	add	r3, r2
 8017776:	b2ca      	uxtb	r2, r1
 8017778:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801777e:	0a19      	lsrs	r1, r3, #8
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681a      	ldr	r2, [r3, #0]
 8017784:	89fb      	ldrh	r3, [r7, #14]
 8017786:	1c58      	adds	r0, r3, #1
 8017788:	81f8      	strh	r0, [r7, #14]
 801778a:	4413      	add	r3, r2
 801778c:	b2ca      	uxtb	r2, r1
 801778e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017794:	0c19      	lsrs	r1, r3, #16
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	89fb      	ldrh	r3, [r7, #14]
 801779c:	1c58      	adds	r0, r3, #1
 801779e:	81f8      	strh	r0, [r7, #14]
 80177a0:	4413      	add	r3, r2
 80177a2:	b2ca      	uxtb	r2, r1
 80177a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177aa:	0e19      	lsrs	r1, r3, #24
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	89fb      	ldrh	r3, [r7, #14]
 80177b2:	1c58      	adds	r0, r3, #1
 80177b4:	81f8      	strh	r0, [r7, #14]
 80177b6:	4413      	add	r3, r2
 80177b8:	b2ca      	uxtb	r2, r1
 80177ba:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80177bc:	89fb      	ldrh	r3, [r7, #14]
 80177be:	b2da      	uxtb	r2, r3
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80177c4:	2300      	movs	r3, #0
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}

080177ce <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177ce:	b480      	push	{r7}
 80177d0:	b083      	sub	sp, #12
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	4603      	mov	r3, r0
 80177d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177d8:	79fb      	ldrb	r3, [r7, #7]
 80177da:	2b05      	cmp	r3, #5
 80177dc:	d101      	bne.n	80177e2 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177de:	2301      	movs	r3, #1
 80177e0:	e000      	b.n	80177e4 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80177e2:	2300      	movs	r3, #0
        }
    }
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	370c      	adds	r7, #12
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bc80      	pop	{r7}
 80177ec:	4770      	bx	lr

080177ee <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80177ee:	b580      	push	{r7, lr}
 80177f0:	b084      	sub	sp, #16
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	4603      	mov	r3, r0
 80177f6:	6039      	str	r1, [r7, #0]
 80177f8:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80177fa:	2300      	movs	r3, #0
 80177fc:	60bb      	str	r3, [r7, #8]
    switch( region )
 80177fe:	79fb      	ldrb	r3, [r7, #7]
 8017800:	2b05      	cmp	r3, #5
 8017802:	d105      	bne.n	8017810 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017804:	6838      	ldr	r0, [r7, #0]
 8017806:	f001 f995 	bl	8018b34 <RegionEU868GetPhyParam>
 801780a:	4603      	mov	r3, r0
 801780c:	60fb      	str	r3, [r7, #12]
 801780e:	e001      	b.n	8017814 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	4618      	mov	r0, r3
 8017818:	3710      	adds	r7, #16
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801781e:	b580      	push	{r7, lr}
 8017820:	b082      	sub	sp, #8
 8017822:	af00      	add	r7, sp, #0
 8017824:	4603      	mov	r3, r0
 8017826:	6039      	str	r1, [r7, #0]
 8017828:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801782a:	79fb      	ldrb	r3, [r7, #7]
 801782c:	2b05      	cmp	r3, #5
 801782e:	d103      	bne.n	8017838 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017830:	6838      	ldr	r0, [r7, #0]
 8017832:	f001 facb 	bl	8018dcc <RegionEU868SetBandTxDone>
 8017836:	e000      	b.n	801783a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017838:	bf00      	nop
        }
    }
}
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	4603      	mov	r3, r0
 8017848:	6039      	str	r1, [r7, #0]
 801784a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801784c:	79fb      	ldrb	r3, [r7, #7]
 801784e:	2b05      	cmp	r3, #5
 8017850:	d103      	bne.n	801785a <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017852:	6838      	ldr	r0, [r7, #0]
 8017854:	f001 fae6 	bl	8018e24 <RegionEU868InitDefaults>
 8017858:	e000      	b.n	801785c <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801785a:	bf00      	nop
        }
    }
}
 801785c:	bf00      	nop
 801785e:	3708      	adds	r7, #8
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}

08017864 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b082      	sub	sp, #8
 8017868:	af00      	add	r7, sp, #0
 801786a:	4603      	mov	r3, r0
 801786c:	6039      	str	r1, [r7, #0]
 801786e:	71fb      	strb	r3, [r7, #7]
 8017870:	4613      	mov	r3, r2
 8017872:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017874:	79fb      	ldrb	r3, [r7, #7]
 8017876:	2b05      	cmp	r3, #5
 8017878:	d106      	bne.n	8017888 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801787a:	79bb      	ldrb	r3, [r7, #6]
 801787c:	4619      	mov	r1, r3
 801787e:	6838      	ldr	r0, [r7, #0]
 8017880:	f001 fb6e 	bl	8018f60 <RegionEU868Verify>
 8017884:	4603      	mov	r3, r0
 8017886:	e000      	b.n	801788a <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017888:	2300      	movs	r3, #0
        }
    }
}
 801788a:	4618      	mov	r0, r3
 801788c:	3708      	adds	r7, #8
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}

08017892 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b082      	sub	sp, #8
 8017896:	af00      	add	r7, sp, #0
 8017898:	4603      	mov	r3, r0
 801789a:	6039      	str	r1, [r7, #0]
 801789c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801789e:	79fb      	ldrb	r3, [r7, #7]
 80178a0:	2b05      	cmp	r3, #5
 80178a2:	d103      	bne.n	80178ac <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80178a4:	6838      	ldr	r0, [r7, #0]
 80178a6:	f001 fbd7 	bl	8019058 <RegionEU868ApplyCFList>
 80178aa:	e000      	b.n	80178ae <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80178ac:	bf00      	nop
        }
    }
}
 80178ae:	bf00      	nop
 80178b0:	3708      	adds	r7, #8
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}

080178b6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80178b6:	b580      	push	{r7, lr}
 80178b8:	b082      	sub	sp, #8
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	4603      	mov	r3, r0
 80178be:	6039      	str	r1, [r7, #0]
 80178c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178c2:	79fb      	ldrb	r3, [r7, #7]
 80178c4:	2b05      	cmp	r3, #5
 80178c6:	d104      	bne.n	80178d2 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80178c8:	6838      	ldr	r0, [r7, #0]
 80178ca:	f001 fc39 	bl	8019140 <RegionEU868ChanMaskSet>
 80178ce:	4603      	mov	r3, r0
 80178d0:	e000      	b.n	80178d4 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80178d2:	2300      	movs	r3, #0
        }
    }
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3708      	adds	r7, #8
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	603b      	str	r3, [r7, #0]
 80178e4:	4603      	mov	r3, r0
 80178e6:	71fb      	strb	r3, [r7, #7]
 80178e8:	460b      	mov	r3, r1
 80178ea:	71bb      	strb	r3, [r7, #6]
 80178ec:	4613      	mov	r3, r2
 80178ee:	717b      	strb	r3, [r7, #5]
    switch( region )
 80178f0:	79fb      	ldrb	r3, [r7, #7]
 80178f2:	2b05      	cmp	r3, #5
 80178f4:	d107      	bne.n	8017906 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80178f6:	7979      	ldrb	r1, [r7, #5]
 80178f8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	683a      	ldr	r2, [r7, #0]
 8017900:	f001 fc48 	bl	8019194 <RegionEU868ComputeRxWindowParameters>
 8017904:	e000      	b.n	8017908 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017906:	bf00      	nop
        }
    }
}
 8017908:	bf00      	nop
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b084      	sub	sp, #16
 8017914:	af00      	add	r7, sp, #0
 8017916:	4603      	mov	r3, r0
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
 801791c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801791e:	7bfb      	ldrb	r3, [r7, #15]
 8017920:	2b05      	cmp	r3, #5
 8017922:	d105      	bne.n	8017930 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017924:	6879      	ldr	r1, [r7, #4]
 8017926:	68b8      	ldr	r0, [r7, #8]
 8017928:	f001 fc8e 	bl	8019248 <RegionEU868RxConfig>
 801792c:	4603      	mov	r3, r0
 801792e:	e000      	b.n	8017932 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017930:	2300      	movs	r3, #0
        }
    }
}
 8017932:	4618      	mov	r0, r3
 8017934:	3710      	adds	r7, #16
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}

0801793a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801793a:	b580      	push	{r7, lr}
 801793c:	b084      	sub	sp, #16
 801793e:	af00      	add	r7, sp, #0
 8017940:	60b9      	str	r1, [r7, #8]
 8017942:	607a      	str	r2, [r7, #4]
 8017944:	603b      	str	r3, [r7, #0]
 8017946:	4603      	mov	r3, r0
 8017948:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801794a:	7bfb      	ldrb	r3, [r7, #15]
 801794c:	2b05      	cmp	r3, #5
 801794e:	d106      	bne.n	801795e <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017950:	683a      	ldr	r2, [r7, #0]
 8017952:	6879      	ldr	r1, [r7, #4]
 8017954:	68b8      	ldr	r0, [r7, #8]
 8017956:	f001 fd47 	bl	80193e8 <RegionEU868TxConfig>
 801795a:	4603      	mov	r3, r0
 801795c:	e000      	b.n	8017960 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801795e:	2300      	movs	r3, #0
        }
    }
}
 8017960:	4618      	mov	r0, r3
 8017962:	3710      	adds	r7, #16
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b086      	sub	sp, #24
 801796c:	af02      	add	r7, sp, #8
 801796e:	60b9      	str	r1, [r7, #8]
 8017970:	607a      	str	r2, [r7, #4]
 8017972:	603b      	str	r3, [r7, #0]
 8017974:	4603      	mov	r3, r0
 8017976:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017978:	7bfb      	ldrb	r3, [r7, #15]
 801797a:	2b05      	cmp	r3, #5
 801797c:	d109      	bne.n	8017992 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801797e:	69fb      	ldr	r3, [r7, #28]
 8017980:	9300      	str	r3, [sp, #0]
 8017982:	69bb      	ldr	r3, [r7, #24]
 8017984:	683a      	ldr	r2, [r7, #0]
 8017986:	6879      	ldr	r1, [r7, #4]
 8017988:	68b8      	ldr	r0, [r7, #8]
 801798a:	f001 fdfd 	bl	8019588 <RegionEU868LinkAdrReq>
 801798e:	4603      	mov	r3, r0
 8017990:	e000      	b.n	8017994 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017992:	2300      	movs	r3, #0
        }
    }
}
 8017994:	4618      	mov	r0, r3
 8017996:	3710      	adds	r7, #16
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b082      	sub	sp, #8
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	4603      	mov	r3, r0
 80179a4:	6039      	str	r1, [r7, #0]
 80179a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179a8:	79fb      	ldrb	r3, [r7, #7]
 80179aa:	2b05      	cmp	r3, #5
 80179ac:	d104      	bne.n	80179b8 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80179ae:	6838      	ldr	r0, [r7, #0]
 80179b0:	f001 ff0c 	bl	80197cc <RegionEU868RxParamSetupReq>
 80179b4:	4603      	mov	r3, r0
 80179b6:	e000      	b.n	80179ba <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179b8:	2300      	movs	r3, #0
        }
    }
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}

080179c2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80179c2:	b580      	push	{r7, lr}
 80179c4:	b082      	sub	sp, #8
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	4603      	mov	r3, r0
 80179ca:	6039      	str	r1, [r7, #0]
 80179cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179ce:	79fb      	ldrb	r3, [r7, #7]
 80179d0:	2b05      	cmp	r3, #5
 80179d2:	d104      	bne.n	80179de <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80179d4:	6838      	ldr	r0, [r7, #0]
 80179d6:	f001 ff37 	bl	8019848 <RegionEU868NewChannelReq>
 80179da:	4603      	mov	r3, r0
 80179dc:	e000      	b.n	80179e0 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80179de:	2300      	movs	r3, #0
        }
    }
}
 80179e0:	4618      	mov	r0, r3
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}

080179e8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	4603      	mov	r3, r0
 80179f0:	6039      	str	r1, [r7, #0]
 80179f2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179f4:	79fb      	ldrb	r3, [r7, #7]
 80179f6:	2b05      	cmp	r3, #5
 80179f8:	d104      	bne.n	8017a04 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80179fa:	6838      	ldr	r0, [r7, #0]
 80179fc:	f001 ff82 	bl	8019904 <RegionEU868TxParamSetupReq>
 8017a00:	4603      	mov	r3, r0
 8017a02:	e000      	b.n	8017a06 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017a04:	2300      	movs	r3, #0
        }
    }
}
 8017a06:	4618      	mov	r0, r3
 8017a08:	3708      	adds	r7, #8
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}

08017a0e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017a0e:	b580      	push	{r7, lr}
 8017a10:	b082      	sub	sp, #8
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	4603      	mov	r3, r0
 8017a16:	6039      	str	r1, [r7, #0]
 8017a18:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a1a:	79fb      	ldrb	r3, [r7, #7]
 8017a1c:	2b05      	cmp	r3, #5
 8017a1e:	d104      	bne.n	8017a2a <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017a20:	6838      	ldr	r0, [r7, #0]
 8017a22:	f001 ff7b 	bl	801991c <RegionEU868DlChannelReq>
 8017a26:	4603      	mov	r3, r0
 8017a28:	e000      	b.n	8017a2c <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017a2a:	2300      	movs	r3, #0
        }
    }
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3708      	adds	r7, #8
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}

08017a34 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b082      	sub	sp, #8
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	71fb      	strb	r3, [r7, #7]
 8017a3e:	460b      	mov	r3, r1
 8017a40:	71bb      	strb	r3, [r7, #6]
 8017a42:	4613      	mov	r3, r2
 8017a44:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017a46:	79fb      	ldrb	r3, [r7, #7]
 8017a48:	2b05      	cmp	r3, #5
 8017a4a:	d108      	bne.n	8017a5e <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017a4c:	797a      	ldrb	r2, [r7, #5]
 8017a4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a52:	4611      	mov	r1, r2
 8017a54:	4618      	mov	r0, r3
 8017a56:	f001 ffab 	bl	80199b0 <RegionEU868AlternateDr>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	e000      	b.n	8017a60 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017a5e:	2300      	movs	r3, #0
        }
    }
}
 8017a60:	4618      	mov	r0, r3
 8017a62:	3708      	adds	r7, #8
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}

08017a68 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b084      	sub	sp, #16
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	60b9      	str	r1, [r7, #8]
 8017a70:	607a      	str	r2, [r7, #4]
 8017a72:	603b      	str	r3, [r7, #0]
 8017a74:	4603      	mov	r3, r0
 8017a76:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a78:	7bfb      	ldrb	r3, [r7, #15]
 8017a7a:	2b05      	cmp	r3, #5
 8017a7c:	d107      	bne.n	8017a8e <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017a7e:	69bb      	ldr	r3, [r7, #24]
 8017a80:	683a      	ldr	r2, [r7, #0]
 8017a82:	6879      	ldr	r1, [r7, #4]
 8017a84:	68b8      	ldr	r0, [r7, #8]
 8017a86:	f001 ffa3 	bl	80199d0 <RegionEU868NextChannel>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	e000      	b.n	8017a90 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017a8e:	2309      	movs	r3, #9
        }
    }
}
 8017a90:	4618      	mov	r0, r3
 8017a92:	3710      	adds	r7, #16
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	6039      	str	r1, [r7, #0]
 8017aa2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017aa4:	79fb      	ldrb	r3, [r7, #7]
 8017aa6:	2b05      	cmp	r3, #5
 8017aa8:	d103      	bne.n	8017ab2 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017aaa:	6838      	ldr	r0, [r7, #0]
 8017aac:	f002 f90a 	bl	8019cc4 <RegionEU868SetContinuousWave>
 8017ab0:	e000      	b.n	8017ab4 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017ab2:	bf00      	nop
        }
    }
}
 8017ab4:	bf00      	nop
 8017ab6:	3708      	adds	r7, #8
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017abc:	b590      	push	{r4, r7, lr}
 8017abe:	b083      	sub	sp, #12
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	4608      	mov	r0, r1
 8017ac6:	4611      	mov	r1, r2
 8017ac8:	461a      	mov	r2, r3
 8017aca:	4623      	mov	r3, r4
 8017acc:	71fb      	strb	r3, [r7, #7]
 8017ace:	4603      	mov	r3, r0
 8017ad0:	71bb      	strb	r3, [r7, #6]
 8017ad2:	460b      	mov	r3, r1
 8017ad4:	717b      	strb	r3, [r7, #5]
 8017ad6:	4613      	mov	r3, r2
 8017ad8:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017ada:	79fb      	ldrb	r3, [r7, #7]
 8017adc:	2b05      	cmp	r3, #5
 8017ade:	d109      	bne.n	8017af4 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017ae0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017ae4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017ae8:	79bb      	ldrb	r3, [r7, #6]
 8017aea:	4618      	mov	r0, r3
 8017aec:	f002 f938 	bl	8019d60 <RegionEU868ApplyDrOffset>
 8017af0:	4603      	mov	r3, r0
 8017af2:	e000      	b.n	8017af6 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017af4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	370c      	adds	r7, #12
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd90      	pop	{r4, r7, pc}
	...

08017b00 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017b00:	b480      	push	{r7}
 8017b02:	b083      	sub	sp, #12
 8017b04:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017b06:	4b04      	ldr	r3, [pc, #16]	; (8017b18 <RegionGetVersion+0x18>)
 8017b08:	607b      	str	r3, [r7, #4]

    return version;
 8017b0a:	687b      	ldr	r3, [r7, #4]
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	370c      	adds	r7, #12
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bc80      	pop	{r7}
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	01010003 	.word	0x01010003

08017b1c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b087      	sub	sp, #28
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	60f8      	str	r0, [r7, #12]
 8017b24:	4608      	mov	r0, r1
 8017b26:	4639      	mov	r1, r7
 8017b28:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	881b      	ldrh	r3, [r3, #0]
 8017b34:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017b36:	7afb      	ldrb	r3, [r7, #11]
 8017b38:	f083 0301 	eor.w	r3, r3, #1
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d01b      	beq.n	8017b7a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b42:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b46:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017b4e:	d202      	bcs.n	8017b56 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017b50:	2364      	movs	r3, #100	; 0x64
 8017b52:	82bb      	strh	r3, [r7, #20]
 8017b54:	e00b      	b.n	8017b6e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017b5c:	4293      	cmp	r3, r2
 8017b5e:	d803      	bhi.n	8017b68 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b64:	82bb      	strh	r3, [r7, #20]
 8017b66:	e002      	b.n	8017b6e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b68:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b6c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017b6e:	8aba      	ldrh	r2, [r7, #20]
 8017b70:	8afb      	ldrh	r3, [r7, #22]
 8017b72:	4293      	cmp	r3, r2
 8017b74:	bf38      	it	cc
 8017b76:	4613      	movcc	r3, r2
 8017b78:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017b7a:	8afb      	ldrh	r3, [r7, #22]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d101      	bne.n	8017b84 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017b80:	2301      	movs	r3, #1
 8017b82:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017b84:	8afb      	ldrh	r3, [r7, #22]
}
 8017b86:	4618      	mov	r0, r3
 8017b88:	371c      	adds	r7, #28
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bc80      	pop	{r7}
 8017b8e:	4770      	bx	lr

08017b90 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b08e      	sub	sp, #56	; 0x38
 8017b94:	af02      	add	r7, sp, #8
 8017b96:	60f8      	str	r0, [r7, #12]
 8017b98:	4608      	mov	r0, r1
 8017b9a:	4639      	mov	r1, r7
 8017b9c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	881b      	ldrh	r3, [r3, #0]
 8017ba8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017baa:	4b4b      	ldr	r3, [pc, #300]	; (8017cd8 <SetMaxTimeCredits+0x148>)
 8017bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017bae:	463b      	mov	r3, r7
 8017bb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bb4:	f005 fdc0 	bl	801d738 <SysTimeToMs>
 8017bb8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017bba:	f107 0314 	add.w	r3, r7, #20
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	601a      	str	r2, [r3, #0]
 8017bc2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017bc4:	7af9      	ldrb	r1, [r7, #11]
 8017bc6:	463b      	mov	r3, r7
 8017bc8:	cb0c      	ldmia	r3, {r2, r3}
 8017bca:	68f8      	ldr	r0, [r7, #12]
 8017bcc:	f7ff ffa6 	bl	8017b1c <GetDutyCycle>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017bd4:	7afb      	ldrb	r3, [r7, #11]
 8017bd6:	f083 0301 	eor.w	r3, r3, #1
 8017bda:	b2db      	uxtb	r3, r3
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d062      	beq.n	8017ca6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017be0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017be2:	2b64      	cmp	r3, #100	; 0x64
 8017be4:	d105      	bne.n	8017bf2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017be6:	4b3c      	ldr	r3, [pc, #240]	; (8017cd8 <SetMaxTimeCredits+0x148>)
 8017be8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bee:	609a      	str	r2, [r3, #8]
 8017bf0:	e00b      	b.n	8017c0a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bf8:	d105      	bne.n	8017c06 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017bfa:	4b38      	ldr	r3, [pc, #224]	; (8017cdc <SetMaxTimeCredits+0x14c>)
 8017bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c02:	609a      	str	r2, [r3, #8]
 8017c04:	e001      	b.n	8017c0a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017c06:	4b36      	ldr	r3, [pc, #216]	; (8017ce0 <SetMaxTimeCredits+0x150>)
 8017c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	689a      	ldr	r2, [r3, #8]
 8017c0e:	f107 031c 	add.w	r3, r7, #28
 8017c12:	4611      	mov	r1, r2
 8017c14:	4618      	mov	r0, r3
 8017c16:	f005 fdb7 	bl	801d788 <SysTimeFromMs>
 8017c1a:	f107 0014 	add.w	r0, r7, #20
 8017c1e:	6a3b      	ldr	r3, [r7, #32]
 8017c20:	9300      	str	r3, [sp, #0]
 8017c22:	69fb      	ldr	r3, [r7, #28]
 8017c24:	463a      	mov	r2, r7
 8017c26:	ca06      	ldmia	r2, {r1, r2}
 8017c28:	f005 fcc7 	bl	801d5ba <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c30:	f083 0301 	eor.w	r3, r3, #1
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d006      	beq.n	8017c48 <SetMaxTimeCredits+0xb8>
 8017c3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017c3e:	f083 0301 	eor.w	r3, r3, #1
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d108      	bne.n	8017c5a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d103      	bne.n	8017c5a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017c52:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c54:	4a23      	ldr	r2, [pc, #140]	; (8017ce4 <SetMaxTimeCredits+0x154>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d92f      	bls.n	8017cba <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c5e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	4a21      	ldr	r2, [pc, #132]	; (8017ce8 <SetMaxTimeCredits+0x158>)
 8017c64:	4293      	cmp	r3, r2
 8017c66:	d928      	bls.n	8017cba <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c6e:	3b30      	subs	r3, #48	; 0x30
 8017c70:	4a1e      	ldr	r2, [pc, #120]	; (8017cec <SetMaxTimeCredits+0x15c>)
 8017c72:	fba2 2303 	umull	r2, r3, r2, r3
 8017c76:	0c1b      	lsrs	r3, r3, #16
 8017c78:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017c7a:	697b      	ldr	r3, [r7, #20]
 8017c7c:	4a1c      	ldr	r2, [pc, #112]	; (8017cf0 <SetMaxTimeCredits+0x160>)
 8017c7e:	fb02 f303 	mul.w	r3, r2, r3
 8017c82:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017c84:	697b      	ldr	r3, [r7, #20]
 8017c86:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017c8a:	3330      	adds	r3, #48	; 0x30
 8017c8c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017c92:	f107 0314 	add.w	r3, r7, #20
 8017c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c9a:	f005 fd4d 	bl	801d738 <SysTimeToMs>
 8017c9e:	4602      	mov	r2, r0
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	609a      	str	r2, [r3, #8]
 8017ca4:	e009      	b.n	8017cba <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017ca6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017caa:	f083 0301 	eor.w	r3, r3, #1
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d002      	beq.n	8017cba <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cb8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	685b      	ldr	r3, [r3, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d102      	bne.n	8017cc8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cc6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ccc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017cce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3730      	adds	r7, #48	; 0x30
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}
 8017cd8:	001b7740 	.word	0x001b7740
 8017cdc:	0112a880 	.word	0x0112a880
 8017ce0:	02932e00 	.word	0x02932e00
 8017ce4:	0001517f 	.word	0x0001517f
 8017ce8:	0001ec2f 	.word	0x0001ec2f
 8017cec:	c22e4507 	.word	0xc22e4507
 8017cf0:	00015180 	.word	0x00015180

08017cf4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b086      	sub	sp, #24
 8017cf8:	af02      	add	r7, sp, #8
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	4608      	mov	r0, r1
 8017cfe:	4611      	mov	r1, r2
 8017d00:	461a      	mov	r2, r3
 8017d02:	4603      	mov	r3, r0
 8017d04:	70fb      	strb	r3, [r7, #3]
 8017d06:	460b      	mov	r3, r1
 8017d08:	70bb      	strb	r3, [r7, #2]
 8017d0a:	4613      	mov	r3, r2
 8017d0c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017d0e:	78f9      	ldrb	r1, [r7, #3]
 8017d10:	787b      	ldrb	r3, [r7, #1]
 8017d12:	9301      	str	r3, [sp, #4]
 8017d14:	78bb      	ldrb	r3, [r7, #2]
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	f107 0318 	add.w	r3, r7, #24
 8017d1c:	cb0c      	ldmia	r3, {r2, r3}
 8017d1e:	6878      	ldr	r0, [r7, #4]
 8017d20:	f7ff ff36 	bl	8017b90 <SetMaxTimeCredits>
 8017d24:	4603      	mov	r3, r0
 8017d26:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017d28:	78fb      	ldrb	r3, [r7, #3]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d00a      	beq.n	8017d44 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	685b      	ldr	r3, [r3, #4]
 8017d32:	4618      	mov	r0, r3
 8017d34:	f006 fb3c 	bl	801e3b0 <UTIL_TIMER_GetElapsedTime>
 8017d38:	4602      	mov	r2, r0
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	68db      	ldr	r3, [r3, #12]
 8017d3e:	441a      	add	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	68da      	ldr	r2, [r3, #12]
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	691b      	ldr	r3, [r3, #16]
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d903      	bls.n	8017d58 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	691a      	ldr	r2, [r3, #16]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	6a3a      	ldr	r2, [r7, #32]
 8017d5c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3710      	adds	r7, #16
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017d68:	b480      	push	{r7}
 8017d6a:	b085      	sub	sp, #20
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	4603      	mov	r3, r0
 8017d70:	460a      	mov	r2, r1
 8017d72:	80fb      	strh	r3, [r7, #6]
 8017d74:	4613      	mov	r3, r2
 8017d76:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017d78:	2300      	movs	r3, #0
 8017d7a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	73bb      	strb	r3, [r7, #14]
 8017d80:	e011      	b.n	8017da6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017d82:	88fa      	ldrh	r2, [r7, #6]
 8017d84:	7bbb      	ldrb	r3, [r7, #14]
 8017d86:	2101      	movs	r1, #1
 8017d88:	fa01 f303 	lsl.w	r3, r1, r3
 8017d8c:	401a      	ands	r2, r3
 8017d8e:	7bbb      	ldrb	r3, [r7, #14]
 8017d90:	2101      	movs	r1, #1
 8017d92:	fa01 f303 	lsl.w	r3, r1, r3
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d102      	bne.n	8017da0 <CountChannels+0x38>
        {
            nbActiveBits++;
 8017d9a:	7bfb      	ldrb	r3, [r7, #15]
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017da0:	7bbb      	ldrb	r3, [r7, #14]
 8017da2:	3301      	adds	r3, #1
 8017da4:	73bb      	strb	r3, [r7, #14]
 8017da6:	7bba      	ldrb	r2, [r7, #14]
 8017da8:	797b      	ldrb	r3, [r7, #5]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d3e9      	bcc.n	8017d82 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3714      	adds	r7, #20
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bc80      	pop	{r7}
 8017db8:	4770      	bx	lr

08017dba <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017dba:	b580      	push	{r7, lr}
 8017dbc:	b084      	sub	sp, #16
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6039      	str	r1, [r7, #0]
 8017dc2:	4611      	mov	r1, r2
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	71fb      	strb	r3, [r7, #7]
 8017dca:	460b      	mov	r3, r1
 8017dcc:	71bb      	strb	r3, [r7, #6]
 8017dce:	4613      	mov	r3, r2
 8017dd0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017dd2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017dd6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017dda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dde:	4618      	mov	r0, r3
 8017de0:	f000 f85d 	bl	8017e9e <RegionCommonValueInRange>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d101      	bne.n	8017dee <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017dea:	2300      	movs	r3, #0
 8017dec:	e053      	b.n	8017e96 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017dee:	2300      	movs	r3, #0
 8017df0:	73fb      	strb	r3, [r7, #15]
 8017df2:	2300      	movs	r3, #0
 8017df4:	73bb      	strb	r3, [r7, #14]
 8017df6:	e049      	b.n	8017e8c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017df8:	2300      	movs	r3, #0
 8017dfa:	737b      	strb	r3, [r7, #13]
 8017dfc:	e03d      	b.n	8017e7a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017dfe:	7bbb      	ldrb	r3, [r7, #14]
 8017e00:	005b      	lsls	r3, r3, #1
 8017e02:	683a      	ldr	r2, [r7, #0]
 8017e04:	4413      	add	r3, r2
 8017e06:	881b      	ldrh	r3, [r3, #0]
 8017e08:	461a      	mov	r2, r3
 8017e0a:	7b7b      	ldrb	r3, [r7, #13]
 8017e0c:	fa42 f303 	asr.w	r3, r2, r3
 8017e10:	f003 0301 	and.w	r3, r3, #1
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d02d      	beq.n	8017e74 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e18:	7bfa      	ldrb	r2, [r7, #15]
 8017e1a:	7b7b      	ldrb	r3, [r7, #13]
 8017e1c:	4413      	add	r3, r2
 8017e1e:	461a      	mov	r2, r3
 8017e20:	4613      	mov	r3, r2
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	4413      	add	r3, r2
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	461a      	mov	r2, r3
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	7a1b      	ldrb	r3, [r3, #8]
 8017e30:	f343 0303 	sbfx	r3, r3, #0, #4
 8017e34:	b25b      	sxtb	r3, r3
 8017e36:	f003 030f 	and.w	r3, r3, #15
 8017e3a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017e3c:	7bfa      	ldrb	r2, [r7, #15]
 8017e3e:	7b7b      	ldrb	r3, [r7, #13]
 8017e40:	4413      	add	r3, r2
 8017e42:	461a      	mov	r2, r3
 8017e44:	4613      	mov	r3, r2
 8017e46:	005b      	lsls	r3, r3, #1
 8017e48:	4413      	add	r3, r2
 8017e4a:	009b      	lsls	r3, r3, #2
 8017e4c:	461a      	mov	r2, r3
 8017e4e:	69fb      	ldr	r3, [r7, #28]
 8017e50:	4413      	add	r3, r2
 8017e52:	7a1b      	ldrb	r3, [r3, #8]
 8017e54:	f343 1303 	sbfx	r3, r3, #4, #4
 8017e58:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e5a:	f003 030f 	and.w	r3, r3, #15
 8017e5e:	b25a      	sxtb	r2, r3
 8017e60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e64:	4618      	mov	r0, r3
 8017e66:	f000 f81a 	bl	8017e9e <RegionCommonValueInRange>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	2b01      	cmp	r3, #1
 8017e6e:	d101      	bne.n	8017e74 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017e70:	2301      	movs	r3, #1
 8017e72:	e010      	b.n	8017e96 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017e74:	7b7b      	ldrb	r3, [r7, #13]
 8017e76:	3301      	adds	r3, #1
 8017e78:	737b      	strb	r3, [r7, #13]
 8017e7a:	7b7b      	ldrb	r3, [r7, #13]
 8017e7c:	2b0f      	cmp	r3, #15
 8017e7e:	d9be      	bls.n	8017dfe <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017e80:	7bfb      	ldrb	r3, [r7, #15]
 8017e82:	3310      	adds	r3, #16
 8017e84:	73fb      	strb	r3, [r7, #15]
 8017e86:	7bbb      	ldrb	r3, [r7, #14]
 8017e88:	3301      	adds	r3, #1
 8017e8a:	73bb      	strb	r3, [r7, #14]
 8017e8c:	7bfa      	ldrb	r2, [r7, #15]
 8017e8e:	79fb      	ldrb	r3, [r7, #7]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d3b1      	bcc.n	8017df8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017e94:	2300      	movs	r3, #0
}
 8017e96:	4618      	mov	r0, r3
 8017e98:	3710      	adds	r7, #16
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}

08017e9e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017e9e:	b480      	push	{r7}
 8017ea0:	b083      	sub	sp, #12
 8017ea2:	af00      	add	r7, sp, #0
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	71fb      	strb	r3, [r7, #7]
 8017ea8:	460b      	mov	r3, r1
 8017eaa:	71bb      	strb	r3, [r7, #6]
 8017eac:	4613      	mov	r3, r2
 8017eae:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017eb0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017eb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	db07      	blt.n	8017ecc <RegionCommonValueInRange+0x2e>
 8017ebc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017ec0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	dc01      	bgt.n	8017ecc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017ec8:	2301      	movs	r3, #1
 8017eca:	e000      	b.n	8017ece <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017ecc:	2300      	movs	r3, #0
}
 8017ece:	4618      	mov	r0, r3
 8017ed0:	370c      	adds	r7, #12
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bc80      	pop	{r7}
 8017ed6:	4770      	bx	lr

08017ed8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017ed8:	b480      	push	{r7}
 8017eda:	b085      	sub	sp, #20
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
 8017ee0:	460b      	mov	r3, r1
 8017ee2:	70fb      	strb	r3, [r7, #3]
 8017ee4:	4613      	mov	r3, r2
 8017ee6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017ee8:	78fb      	ldrb	r3, [r7, #3]
 8017eea:	091b      	lsrs	r3, r3, #4
 8017eec:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017eee:	78bb      	ldrb	r3, [r7, #2]
 8017ef0:	091b      	lsrs	r3, r3, #4
 8017ef2:	b2db      	uxtb	r3, r3
 8017ef4:	7bfa      	ldrb	r2, [r7, #15]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d803      	bhi.n	8017f02 <RegionCommonChanDisable+0x2a>
 8017efa:	78fa      	ldrb	r2, [r7, #3]
 8017efc:	78bb      	ldrb	r3, [r7, #2]
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d301      	bcc.n	8017f06 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017f02:	2300      	movs	r3, #0
 8017f04:	e017      	b.n	8017f36 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017f06:	7bfb      	ldrb	r3, [r7, #15]
 8017f08:	005b      	lsls	r3, r3, #1
 8017f0a:	687a      	ldr	r2, [r7, #4]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	881b      	ldrh	r3, [r3, #0]
 8017f10:	b21a      	sxth	r2, r3
 8017f12:	78fb      	ldrb	r3, [r7, #3]
 8017f14:	f003 030f 	and.w	r3, r3, #15
 8017f18:	2101      	movs	r1, #1
 8017f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8017f1e:	b21b      	sxth	r3, r3
 8017f20:	43db      	mvns	r3, r3
 8017f22:	b21b      	sxth	r3, r3
 8017f24:	4013      	ands	r3, r2
 8017f26:	b219      	sxth	r1, r3
 8017f28:	7bfb      	ldrb	r3, [r7, #15]
 8017f2a:	005b      	lsls	r3, r3, #1
 8017f2c:	687a      	ldr	r2, [r7, #4]
 8017f2e:	4413      	add	r3, r2
 8017f30:	b28a      	uxth	r2, r1
 8017f32:	801a      	strh	r2, [r3, #0]

    return true;
 8017f34:	2301      	movs	r3, #1
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3714      	adds	r7, #20
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bc80      	pop	{r7}
 8017f3e:	4770      	bx	lr

08017f40 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	460b      	mov	r3, r1
 8017f4a:	70fb      	strb	r3, [r7, #3]
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017f50:	2300      	movs	r3, #0
 8017f52:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d101      	bne.n	8017f5e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	e018      	b.n	8017f90 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f5e:	78fb      	ldrb	r3, [r7, #3]
 8017f60:	73bb      	strb	r3, [r7, #14]
 8017f62:	e010      	b.n	8017f86 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017f64:	7bbb      	ldrb	r3, [r7, #14]
 8017f66:	005b      	lsls	r3, r3, #1
 8017f68:	687a      	ldr	r2, [r7, #4]
 8017f6a:	4413      	add	r3, r2
 8017f6c:	881b      	ldrh	r3, [r3, #0]
 8017f6e:	2110      	movs	r1, #16
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7ff fef9 	bl	8017d68 <CountChannels>
 8017f76:	4603      	mov	r3, r0
 8017f78:	461a      	mov	r2, r3
 8017f7a:	7bfb      	ldrb	r3, [r7, #15]
 8017f7c:	4413      	add	r3, r2
 8017f7e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f80:	7bbb      	ldrb	r3, [r7, #14]
 8017f82:	3301      	adds	r3, #1
 8017f84:	73bb      	strb	r3, [r7, #14]
 8017f86:	7bba      	ldrb	r2, [r7, #14]
 8017f88:	78bb      	ldrb	r3, [r7, #2]
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d3ea      	bcc.n	8017f64 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	3710      	adds	r7, #16
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}

08017f98 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b087      	sub	sp, #28
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	60f8      	str	r0, [r7, #12]
 8017fa0:	60b9      	str	r1, [r7, #8]
 8017fa2:	4613      	mov	r3, r2
 8017fa4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d016      	beq.n	8017fda <RegionCommonChanMaskCopy+0x42>
 8017fac:	68bb      	ldr	r3, [r7, #8]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d013      	beq.n	8017fda <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	75fb      	strb	r3, [r7, #23]
 8017fb6:	e00c      	b.n	8017fd2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017fb8:	7dfb      	ldrb	r3, [r7, #23]
 8017fba:	005b      	lsls	r3, r3, #1
 8017fbc:	68ba      	ldr	r2, [r7, #8]
 8017fbe:	441a      	add	r2, r3
 8017fc0:	7dfb      	ldrb	r3, [r7, #23]
 8017fc2:	005b      	lsls	r3, r3, #1
 8017fc4:	68f9      	ldr	r1, [r7, #12]
 8017fc6:	440b      	add	r3, r1
 8017fc8:	8812      	ldrh	r2, [r2, #0]
 8017fca:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017fcc:	7dfb      	ldrb	r3, [r7, #23]
 8017fce:	3301      	adds	r3, #1
 8017fd0:	75fb      	strb	r3, [r7, #23]
 8017fd2:	7dfa      	ldrb	r2, [r7, #23]
 8017fd4:	79fb      	ldrb	r3, [r7, #7]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d3ee      	bcc.n	8017fb8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017fda:	bf00      	nop
 8017fdc:	371c      	adds	r7, #28
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bc80      	pop	{r7}
 8017fe2:	4770      	bx	lr

08017fe4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017fe4:	b082      	sub	sp, #8
 8017fe6:	b580      	push	{r7, lr}
 8017fe8:	b086      	sub	sp, #24
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	60f8      	str	r0, [r7, #12]
 8017fee:	60b9      	str	r1, [r7, #8]
 8017ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8017ff2:	4613      	mov	r3, r2
 8017ff4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017ff6:	79f9      	ldrb	r1, [r7, #7]
 8017ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ffc:	cb0c      	ldmia	r3, {r2, r3}
 8017ffe:	68f8      	ldr	r0, [r7, #12]
 8018000:	f7ff fd8c 	bl	8017b1c <GetDutyCycle>
 8018004:	4603      	mov	r3, r0
 8018006:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	68da      	ldr	r2, [r3, #12]
 801800c:	8afb      	ldrh	r3, [r7, #22]
 801800e:	68b9      	ldr	r1, [r7, #8]
 8018010:	fb01 f303 	mul.w	r3, r1, r3
 8018014:	429a      	cmp	r2, r3
 8018016:	d909      	bls.n	801802c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	68da      	ldr	r2, [r3, #12]
 801801c:	8afb      	ldrh	r3, [r7, #22]
 801801e:	68b9      	ldr	r1, [r7, #8]
 8018020:	fb01 f303 	mul.w	r3, r1, r3
 8018024:	1ad2      	subs	r2, r2, r3
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801802a:	e002      	b.n	8018032 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	2200      	movs	r2, #0
 8018030:	60da      	str	r2, [r3, #12]
}
 8018032:	bf00      	nop
 8018034:	3718      	adds	r7, #24
 8018036:	46bd      	mov	sp, r7
 8018038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801803c:	b002      	add	sp, #8
 801803e:	4770      	bx	lr

08018040 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018042:	b08f      	sub	sp, #60	; 0x3c
 8018044:	af04      	add	r7, sp, #16
 8018046:	6039      	str	r1, [r7, #0]
 8018048:	4611      	mov	r1, r2
 801804a:	461a      	mov	r2, r3
 801804c:	4603      	mov	r3, r0
 801804e:	71fb      	strb	r3, [r7, #7]
 8018050:	460b      	mov	r3, r1
 8018052:	71bb      	strb	r3, [r7, #6]
 8018054:	4613      	mov	r3, r2
 8018056:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018058:	f04f 33ff 	mov.w	r3, #4294967295
 801805c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801805e:	f006 f995 	bl	801e38c <UTIL_TIMER_GetCurrentTime>
 8018062:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018064:	2300      	movs	r3, #0
 8018066:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018068:	2301      	movs	r3, #1
 801806a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801806c:	2300      	movs	r3, #0
 801806e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8018072:	2300      	movs	r3, #0
 8018074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018078:	e0ba      	b.n	80181f0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801807a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801807e:	4613      	mov	r3, r2
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	4413      	add	r3, r2
 8018084:	00db      	lsls	r3, r3, #3
 8018086:	461a      	mov	r2, r3
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	189c      	adds	r4, r3, r2
 801808c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018090:	797a      	ldrb	r2, [r7, #5]
 8018092:	79fd      	ldrb	r5, [r7, #7]
 8018094:	69fb      	ldr	r3, [r7, #28]
 8018096:	9302      	str	r3, [sp, #8]
 8018098:	46ec      	mov	ip, sp
 801809a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801809e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80180a2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80180a6:	4633      	mov	r3, r6
 80180a8:	4629      	mov	r1, r5
 80180aa:	4620      	mov	r0, r4
 80180ac:	f7ff fe22 	bl	8017cf4 <UpdateTimeCredits>
 80180b0:	4603      	mov	r3, r0
 80180b2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80180b4:	8afa      	ldrh	r2, [r7, #22]
 80180b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180b8:	fb02 f303 	mul.w	r3, r2, r3
 80180bc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180c2:	4613      	mov	r3, r2
 80180c4:	005b      	lsls	r3, r3, #1
 80180c6:	4413      	add	r3, r2
 80180c8:	00db      	lsls	r3, r3, #3
 80180ca:	461a      	mov	r2, r3
 80180cc:	683b      	ldr	r3, [r7, #0]
 80180ce:	4413      	add	r3, r2
 80180d0:	68db      	ldr	r3, [r3, #12]
 80180d2:	69ba      	ldr	r2, [r7, #24]
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d908      	bls.n	80180ea <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180d8:	797b      	ldrb	r3, [r7, #5]
 80180da:	f083 0301 	eor.w	r3, r3, #1
 80180de:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d013      	beq.n	801810c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180e4:	79fb      	ldrb	r3, [r7, #7]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d010      	beq.n	801810c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80180ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180ee:	4613      	mov	r3, r2
 80180f0:	005b      	lsls	r3, r3, #1
 80180f2:	4413      	add	r3, r2
 80180f4:	00db      	lsls	r3, r3, #3
 80180f6:	461a      	mov	r2, r3
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	4413      	add	r3, r2
 80180fc:	2201      	movs	r2, #1
 80180fe:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018104:	3301      	adds	r3, #1
 8018106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801810a:	e06c      	b.n	80181e6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801810c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018110:	4613      	mov	r3, r2
 8018112:	005b      	lsls	r3, r3, #1
 8018114:	4413      	add	r3, r2
 8018116:	00db      	lsls	r3, r3, #3
 8018118:	461a      	mov	r2, r3
 801811a:	683b      	ldr	r3, [r7, #0]
 801811c:	4413      	add	r3, r2
 801811e:	2200      	movs	r2, #0
 8018120:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018122:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018126:	4613      	mov	r3, r2
 8018128:	005b      	lsls	r3, r3, #1
 801812a:	4413      	add	r3, r2
 801812c:	00db      	lsls	r3, r3, #3
 801812e:	461a      	mov	r2, r3
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	4413      	add	r3, r2
 8018134:	691b      	ldr	r3, [r3, #16]
 8018136:	69ba      	ldr	r2, [r7, #24]
 8018138:	429a      	cmp	r2, r3
 801813a:	d815      	bhi.n	8018168 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801813c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018140:	4613      	mov	r3, r2
 8018142:	005b      	lsls	r3, r3, #1
 8018144:	4413      	add	r3, r2
 8018146:	00db      	lsls	r3, r3, #3
 8018148:	461a      	mov	r2, r3
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	4413      	add	r3, r2
 801814e:	68db      	ldr	r3, [r3, #12]
 8018150:	69ba      	ldr	r2, [r7, #24]
 8018152:	1ad3      	subs	r3, r2, r3
 8018154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018156:	4293      	cmp	r3, r2
 8018158:	bf28      	it	cs
 801815a:	4613      	movcs	r3, r2
 801815c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801815e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018162:	3301      	adds	r3, #1
 8018164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018168:	79fb      	ldrb	r3, [r7, #7]
 801816a:	f083 0301 	eor.w	r3, r3, #1
 801816e:	b2db      	uxtb	r3, r3
 8018170:	2b00      	cmp	r3, #0
 8018172:	d038      	beq.n	80181e6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018174:	2300      	movs	r3, #0
 8018176:	60fb      	str	r3, [r7, #12]
 8018178:	2300      	movs	r3, #0
 801817a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801817c:	8afb      	ldrh	r3, [r7, #22]
 801817e:	2b64      	cmp	r3, #100	; 0x64
 8018180:	d103      	bne.n	801818a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8018182:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	e009      	b.n	801819e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801818a:	8afb      	ldrh	r3, [r7, #22]
 801818c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018190:	d103      	bne.n	801819a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8018192:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	e001      	b.n	801819e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801819a:	4b1e      	ldr	r3, [pc, #120]	; (8018214 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801819c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801819e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181a0:	4a1c      	ldr	r2, [pc, #112]	; (8018214 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80181a2:	4293      	cmp	r3, r2
 80181a4:	d90e      	bls.n	80181c4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80181a6:	68fa      	ldr	r2, [r7, #12]
 80181a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181aa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80181ae:	3b30      	subs	r3, #48	; 0x30
 80181b0:	4919      	ldr	r1, [pc, #100]	; (8018218 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80181b2:	fba1 1303 	umull	r1, r3, r1, r3
 80181b6:	0c1b      	lsrs	r3, r3, #16
 80181b8:	3301      	adds	r3, #1
 80181ba:	4918      	ldr	r1, [pc, #96]	; (801821c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80181bc:	fb01 f303 	mul.w	r3, r1, r3
 80181c0:	4413      	add	r3, r2
 80181c2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80181c4:	f107 000c 	add.w	r0, r7, #12
 80181c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181ca:	9300      	str	r3, [sp, #0]
 80181cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181ce:	f107 020c 	add.w	r2, r7, #12
 80181d2:	ca06      	ldmia	r2, {r1, r2}
 80181d4:	f005 f9f1 	bl	801d5ba <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80181d8:	f107 030c 	add.w	r3, r7, #12
 80181dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181e0:	f005 faaa 	bl	801d738 <SysTimeToMs>
 80181e4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80181e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80181ea:	3301      	adds	r3, #1
 80181ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80181f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181f4:	79bb      	ldrb	r3, [r7, #6]
 80181f6:	429a      	cmp	r2, r3
 80181f8:	f4ff af3f 	bcc.w	801807a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80181fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018200:	2b00      	cmp	r3, #0
 8018202:	d102      	bne.n	801820a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8018204:	f04f 33ff 	mov.w	r3, #4294967295
 8018208:	e000      	b.n	801820c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801820c:	4618      	mov	r0, r3
 801820e:	372c      	adds	r7, #44	; 0x2c
 8018210:	46bd      	mov	sp, r7
 8018212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018214:	0001ec30 	.word	0x0001ec30
 8018218:	c22e4507 	.word	0xc22e4507
 801821c:	00015180 	.word	0x00015180

08018220 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018220:	b480      	push	{r7}
 8018222:	b085      	sub	sp, #20
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801822a:	2300      	movs	r3, #0
 801822c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	781b      	ldrb	r3, [r3, #0]
 8018232:	2b03      	cmp	r3, #3
 8018234:	d13f      	bne.n	80182b6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	3301      	adds	r3, #1
 801823a:	781b      	ldrb	r3, [r3, #0]
 801823c:	b25a      	sxtb	r2, r3
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018248:	f003 030f 	and.w	r3, r3, #15
 801824c:	b25a      	sxtb	r2, r3
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018252:	683b      	ldr	r3, [r7, #0]
 8018254:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018258:	b2db      	uxtb	r3, r3
 801825a:	091b      	lsrs	r3, r3, #4
 801825c:	b2db      	uxtb	r3, r3
 801825e:	b25a      	sxtb	r2, r3
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	3302      	adds	r3, #2
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	b29a      	uxth	r2, r3
 801826c:	683b      	ldr	r3, [r7, #0]
 801826e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	889b      	ldrh	r3, [r3, #4]
 8018274:	b21a      	sxth	r2, r3
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	3303      	adds	r3, #3
 801827a:	781b      	ldrb	r3, [r3, #0]
 801827c:	021b      	lsls	r3, r3, #8
 801827e:	b21b      	sxth	r3, r3
 8018280:	4313      	orrs	r3, r2
 8018282:	b21b      	sxth	r3, r3
 8018284:	b29a      	uxth	r2, r3
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	791a      	ldrb	r2, [r3, #4]
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8018292:	683b      	ldr	r3, [r7, #0]
 8018294:	781b      	ldrb	r3, [r3, #0]
 8018296:	091b      	lsrs	r3, r3, #4
 8018298:	b2db      	uxtb	r3, r3
 801829a:	f003 0307 	and.w	r3, r3, #7
 801829e:	b2da      	uxtb	r2, r3
 80182a0:	683b      	ldr	r3, [r7, #0]
 80182a2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80182a4:	683b      	ldr	r3, [r7, #0]
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	f003 030f 	and.w	r3, r3, #15
 80182ac:	b2da      	uxtb	r2, r3
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80182b2:	2305      	movs	r3, #5
 80182b4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80182b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	3714      	adds	r7, #20
 80182bc:	46bd      	mov	sp, r7
 80182be:	bc80      	pop	{r7}
 80182c0:	4770      	bx	lr

080182c2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80182c2:	b5b0      	push	{r4, r5, r7, lr}
 80182c4:	b088      	sub	sp, #32
 80182c6:	af02      	add	r7, sp, #8
 80182c8:	60f8      	str	r0, [r7, #12]
 80182ca:	60b9      	str	r1, [r7, #8]
 80182cc:	607a      	str	r2, [r7, #4]
 80182ce:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	791b      	ldrb	r3, [r3, #4]
 80182d4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	799b      	ldrb	r3, [r3, #6]
 80182da:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	79db      	ldrb	r3, [r3, #7]
 80182e0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	7a1b      	ldrb	r3, [r3, #8]
 80182e6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	795b      	ldrb	r3, [r3, #5]
 80182ec:	f083 0301 	eor.w	r3, r3, #1
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d008      	beq.n	8018308 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	7adb      	ldrb	r3, [r3, #11]
 80182fa:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	7a5b      	ldrb	r3, [r3, #9]
 8018300:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	7a9b      	ldrb	r3, [r3, #10]
 8018306:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8018308:	7dfb      	ldrb	r3, [r7, #23]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d04a      	beq.n	80183a4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801830e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018312:	2b0f      	cmp	r3, #15
 8018314:	d103      	bne.n	801831e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	7a5b      	ldrb	r3, [r3, #9]
 801831a:	75bb      	strb	r3, [r7, #22]
 801831c:	e01d      	b.n	801835a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	7b18      	ldrb	r0, [r3, #12]
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	6919      	ldr	r1, [r3, #16]
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018332:	68fa      	ldr	r2, [r7, #12]
 8018334:	6992      	ldr	r2, [r2, #24]
 8018336:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801833a:	9201      	str	r2, [sp, #4]
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	462b      	mov	r3, r5
 8018340:	4622      	mov	r2, r4
 8018342:	f7ff fd3a 	bl	8017dba <RegionCommonChanVerifyDr>
 8018346:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018348:	f083 0301 	eor.w	r3, r3, #1
 801834c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801834e:	2b00      	cmp	r3, #0
 8018350:	d003      	beq.n	801835a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018352:	7dfb      	ldrb	r3, [r7, #23]
 8018354:	f023 0302 	bic.w	r3, r3, #2
 8018358:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801835a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801835e:	2b0f      	cmp	r3, #15
 8018360:	d103      	bne.n	801836a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	7a9b      	ldrb	r3, [r3, #10]
 8018366:	757b      	strb	r3, [r7, #21]
 8018368:	e01c      	b.n	80183a4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018376:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801837a:	4618      	mov	r0, r3
 801837c:	f7ff fd8f 	bl	8017e9e <RegionCommonValueInRange>
 8018380:	4603      	mov	r3, r0
 8018382:	2b00      	cmp	r3, #0
 8018384:	d10e      	bne.n	80183a4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801838c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018390:	429a      	cmp	r2, r3
 8018392:	da03      	bge.n	801839c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	7f5b      	ldrb	r3, [r3, #29]
 8018398:	757b      	strb	r3, [r7, #21]
 801839a:	e003      	b.n	80183a4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801839c:	7dfb      	ldrb	r3, [r7, #23]
 801839e:	f023 0304 	bic.w	r3, r3, #4
 80183a2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80183a4:	7dfb      	ldrb	r3, [r7, #23]
 80183a6:	2b07      	cmp	r3, #7
 80183a8:	d105      	bne.n	80183b6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80183aa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d101      	bne.n	80183b6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80183b2:	2301      	movs	r3, #1
 80183b4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	7dba      	ldrb	r2, [r7, #22]
 80183ba:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	7d7a      	ldrb	r2, [r7, #21]
 80183c0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80183c2:	7d3a      	ldrb	r2, [r7, #20]
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	701a      	strb	r2, [r3, #0]

    return status;
 80183c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3718      	adds	r7, #24
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080183d4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80183d4:	b480      	push	{r7}
 80183d6:	b083      	sub	sp, #12
 80183d8:	af00      	add	r7, sp, #0
 80183da:	4603      	mov	r3, r0
 80183dc:	6039      	str	r1, [r7, #0]
 80183de:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80183e0:	79fb      	ldrb	r3, [r7, #7]
 80183e2:	4a06      	ldr	r2, [pc, #24]	; (80183fc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80183e4:	fa02 f303 	lsl.w	r3, r2, r3
 80183e8:	461a      	mov	r2, r3
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	370c      	adds	r7, #12
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bc80      	pop	{r7}
 80183f8:	4770      	bx	lr
 80183fa:	bf00      	nop
 80183fc:	000f4240 	.word	0x000f4240

08018400 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018400:	b480      	push	{r7}
 8018402:	b083      	sub	sp, #12
 8018404:	af00      	add	r7, sp, #0
 8018406:	4603      	mov	r3, r0
 8018408:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801840a:	79fb      	ldrb	r3, [r7, #7]
 801840c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018410:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018414:	4618      	mov	r0, r3
 8018416:	370c      	adds	r7, #12
 8018418:	46bd      	mov	sp, r7
 801841a:	bc80      	pop	{r7}
 801841c:	4770      	bx	lr
	...

08018420 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018420:	b480      	push	{r7}
 8018422:	b085      	sub	sp, #20
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	607a      	str	r2, [r7, #4]
 801842a:	603b      	str	r3, [r7, #0]
 801842c:	460b      	mov	r3, r1
 801842e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018430:	7afa      	ldrb	r2, [r7, #11]
 8018432:	7afb      	ldrb	r3, [r7, #11]
 8018434:	3b04      	subs	r3, #4
 8018436:	4619      	mov	r1, r3
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	fb03 f101 	mul.w	r1, r3, r1
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018444:	fb00 f303 	mul.w	r3, r0, r3
 8018448:	440b      	add	r3, r1
 801844a:	005b      	lsls	r3, r3, #1
 801844c:	2b00      	cmp	r3, #0
 801844e:	d013      	beq.n	8018478 <RegionCommonComputeRxWindowParameters+0x58>
 8018450:	7afb      	ldrb	r3, [r7, #11]
 8018452:	3b04      	subs	r3, #4
 8018454:	4619      	mov	r1, r3
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	fb03 f101 	mul.w	r1, r3, r1
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018462:	fb00 f303 	mul.w	r3, r0, r3
 8018466:	440b      	add	r3, r1
 8018468:	0059      	lsls	r1, r3, #1
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	440b      	add	r3, r1
 801846e:	1e59      	subs	r1, r3, #1
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	fbb1 f3f3 	udiv	r3, r1, r3
 8018476:	e00f      	b.n	8018498 <RegionCommonComputeRxWindowParameters+0x78>
 8018478:	7afb      	ldrb	r3, [r7, #11]
 801847a:	3b04      	subs	r3, #4
 801847c:	4619      	mov	r1, r3
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	fb03 f101 	mul.w	r1, r3, r1
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801848a:	fb00 f303 	mul.w	r3, r0, r3
 801848e:	440b      	add	r3, r1
 8018490:	0059      	lsls	r1, r3, #1
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	fbb1 f3f3 	udiv	r3, r1, r3
 8018498:	429a      	cmp	r2, r3
 801849a:	bf38      	it	cc
 801849c:	461a      	movcc	r2, r3
 801849e:	69bb      	ldr	r3, [r7, #24]
 80184a0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	009b      	lsls	r3, r3, #2
 80184a6:	4619      	mov	r1, r3
 80184a8:	69bb      	ldr	r3, [r7, #24]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	68fa      	ldr	r2, [r7, #12]
 80184ae:	fb02 f303 	mul.w	r3, r2, r3
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d007      	beq.n	80184c6 <RegionCommonComputeRxWindowParameters+0xa6>
 80184b6:	69bb      	ldr	r3, [r7, #24]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	68fa      	ldr	r2, [r7, #12]
 80184bc:	fb02 f303 	mul.w	r3, r2, r3
 80184c0:	3301      	adds	r3, #1
 80184c2:	085b      	lsrs	r3, r3, #1
 80184c4:	e005      	b.n	80184d2 <RegionCommonComputeRxWindowParameters+0xb2>
 80184c6:	69bb      	ldr	r3, [r7, #24]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	68fa      	ldr	r2, [r7, #12]
 80184cc:	fb02 f303 	mul.w	r3, r2, r3
 80184d0:	085b      	lsrs	r3, r3, #1
 80184d2:	1acb      	subs	r3, r1, r3
 80184d4:	683a      	ldr	r2, [r7, #0]
 80184d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184da:	fb01 f202 	mul.w	r2, r1, r2
 80184de:	1a9b      	subs	r3, r3, r2
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	dd27      	ble.n	8018534 <RegionCommonComputeRxWindowParameters+0x114>
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	009b      	lsls	r3, r3, #2
 80184e8:	4619      	mov	r1, r3
 80184ea:	69bb      	ldr	r3, [r7, #24]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	68fa      	ldr	r2, [r7, #12]
 80184f0:	fb02 f303 	mul.w	r3, r2, r3
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d007      	beq.n	8018508 <RegionCommonComputeRxWindowParameters+0xe8>
 80184f8:	69bb      	ldr	r3, [r7, #24]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	68fa      	ldr	r2, [r7, #12]
 80184fe:	fb02 f303 	mul.w	r3, r2, r3
 8018502:	3301      	adds	r3, #1
 8018504:	085b      	lsrs	r3, r3, #1
 8018506:	e005      	b.n	8018514 <RegionCommonComputeRxWindowParameters+0xf4>
 8018508:	69bb      	ldr	r3, [r7, #24]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	68fa      	ldr	r2, [r7, #12]
 801850e:	fb02 f303 	mul.w	r3, r2, r3
 8018512:	085b      	lsrs	r3, r3, #1
 8018514:	1acb      	subs	r3, r1, r3
 8018516:	683a      	ldr	r2, [r7, #0]
 8018518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801851c:	fb01 f202 	mul.w	r2, r1, r2
 8018520:	1a9b      	subs	r3, r3, r2
 8018522:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018526:	4a19      	ldr	r2, [pc, #100]	; (801858c <RegionCommonComputeRxWindowParameters+0x16c>)
 8018528:	fb82 1203 	smull	r1, r2, r2, r3
 801852c:	1192      	asrs	r2, r2, #6
 801852e:	17db      	asrs	r3, r3, #31
 8018530:	1ad3      	subs	r3, r2, r3
 8018532:	e024      	b.n	801857e <RegionCommonComputeRxWindowParameters+0x15e>
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	009b      	lsls	r3, r3, #2
 8018538:	4619      	mov	r1, r3
 801853a:	69bb      	ldr	r3, [r7, #24]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	68fa      	ldr	r2, [r7, #12]
 8018540:	fb02 f303 	mul.w	r3, r2, r3
 8018544:	2b00      	cmp	r3, #0
 8018546:	d007      	beq.n	8018558 <RegionCommonComputeRxWindowParameters+0x138>
 8018548:	69bb      	ldr	r3, [r7, #24]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	fb02 f303 	mul.w	r3, r2, r3
 8018552:	3301      	adds	r3, #1
 8018554:	085b      	lsrs	r3, r3, #1
 8018556:	e005      	b.n	8018564 <RegionCommonComputeRxWindowParameters+0x144>
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	68fa      	ldr	r2, [r7, #12]
 801855e:	fb02 f303 	mul.w	r3, r2, r3
 8018562:	085b      	lsrs	r3, r3, #1
 8018564:	1acb      	subs	r3, r1, r3
 8018566:	683a      	ldr	r2, [r7, #0]
 8018568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801856c:	fb01 f202 	mul.w	r2, r1, r2
 8018570:	1a9b      	subs	r3, r3, r2
 8018572:	4a06      	ldr	r2, [pc, #24]	; (801858c <RegionCommonComputeRxWindowParameters+0x16c>)
 8018574:	fb82 1203 	smull	r1, r2, r2, r3
 8018578:	1192      	asrs	r2, r2, #6
 801857a:	17db      	asrs	r3, r3, #31
 801857c:	1ad3      	subs	r3, r2, r3
 801857e:	69fa      	ldr	r2, [r7, #28]
 8018580:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018582:	bf00      	nop
 8018584:	3714      	adds	r7, #20
 8018586:	46bd      	mov	sp, r7
 8018588:	bc80      	pop	{r7}
 801858a:	4770      	bx	lr
 801858c:	10624dd3 	.word	0x10624dd3

08018590 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b086      	sub	sp, #24
 8018594:	af00      	add	r7, sp, #0
 8018596:	4603      	mov	r3, r0
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	607a      	str	r2, [r7, #4]
 801859c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801859e:	2300      	movs	r3, #0
 80185a0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80185a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185a6:	005b      	lsls	r3, r3, #1
 80185a8:	4618      	mov	r0, r3
 80185aa:	f7e8 fb71 	bl	8000c90 <__aeabi_ui2f>
 80185ae:	4603      	mov	r3, r0
 80185b0:	4619      	mov	r1, r3
 80185b2:	68b8      	ldr	r0, [r7, #8]
 80185b4:	f7e8 faba 	bl	8000b2c <__aeabi_fsub>
 80185b8:	4603      	mov	r3, r0
 80185ba:	6879      	ldr	r1, [r7, #4]
 80185bc:	4618      	mov	r0, r3
 80185be:	f7e8 fab5 	bl	8000b2c <__aeabi_fsub>
 80185c2:	4603      	mov	r3, r0
 80185c4:	4618      	mov	r0, r3
 80185c6:	f7e7 ff43 	bl	8000450 <__aeabi_f2d>
 80185ca:	4602      	mov	r2, r0
 80185cc:	460b      	mov	r3, r1
 80185ce:	4610      	mov	r0, r2
 80185d0:	4619      	mov	r1, r3
 80185d2:	f006 fad5 	bl	801eb80 <floor>
 80185d6:	4602      	mov	r2, r0
 80185d8:	460b      	mov	r3, r1
 80185da:	4610      	mov	r0, r2
 80185dc:	4619      	mov	r1, r3
 80185de:	f7e8 fa29 	bl	8000a34 <__aeabi_d2iz>
 80185e2:	4603      	mov	r3, r0
 80185e4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80185e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80185ea:	4618      	mov	r0, r3
 80185ec:	3718      	adds	r7, #24
 80185ee:	46bd      	mov	sp, r7
 80185f0:	bd80      	pop	{r7, pc}

080185f2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80185f2:	b590      	push	{r4, r7, lr}
 80185f4:	b087      	sub	sp, #28
 80185f6:	af00      	add	r7, sp, #0
 80185f8:	60f8      	str	r0, [r7, #12]
 80185fa:	60b9      	str	r1, [r7, #8]
 80185fc:	607a      	str	r2, [r7, #4]
 80185fe:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018600:	2300      	movs	r3, #0
 8018602:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018604:	2300      	movs	r3, #0
 8018606:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018608:	2300      	movs	r3, #0
 801860a:	757b      	strb	r3, [r7, #21]
 801860c:	2300      	movs	r3, #0
 801860e:	753b      	strb	r3, [r7, #20]
 8018610:	e09c      	b.n	801874c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018612:	2300      	movs	r3, #0
 8018614:	74fb      	strb	r3, [r7, #19]
 8018616:	e08f      	b.n	8018738 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	685a      	ldr	r2, [r3, #4]
 801861c:	7d3b      	ldrb	r3, [r7, #20]
 801861e:	005b      	lsls	r3, r3, #1
 8018620:	4413      	add	r3, r2
 8018622:	881b      	ldrh	r3, [r3, #0]
 8018624:	461a      	mov	r2, r3
 8018626:	7cfb      	ldrb	r3, [r7, #19]
 8018628:	fa42 f303 	asr.w	r3, r2, r3
 801862c:	f003 0301 	and.w	r3, r3, #1
 8018630:	2b00      	cmp	r3, #0
 8018632:	d07e      	beq.n	8018732 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	689a      	ldr	r2, [r3, #8]
 8018638:	7d79      	ldrb	r1, [r7, #21]
 801863a:	7cfb      	ldrb	r3, [r7, #19]
 801863c:	440b      	add	r3, r1
 801863e:	4619      	mov	r1, r3
 8018640:	460b      	mov	r3, r1
 8018642:	005b      	lsls	r3, r3, #1
 8018644:	440b      	add	r3, r1
 8018646:	009b      	lsls	r3, r3, #2
 8018648:	4413      	add	r3, r2
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d06b      	beq.n	8018728 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	f083 0301 	eor.w	r3, r3, #1
 8018658:	b2db      	uxtb	r3, r3
 801865a:	2b00      	cmp	r3, #0
 801865c:	d011      	beq.n	8018682 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018662:	2b00      	cmp	r3, #0
 8018664:	d00d      	beq.n	8018682 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	695a      	ldr	r2, [r3, #20]
 801866a:	7d3b      	ldrb	r3, [r7, #20]
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	4413      	add	r3, r2
 8018670:	881b      	ldrh	r3, [r3, #0]
 8018672:	461a      	mov	r2, r3
 8018674:	7cfb      	ldrb	r3, [r7, #19]
 8018676:	fa42 f303 	asr.w	r3, r2, r3
 801867a:	f003 0301 	and.w	r3, r3, #1
 801867e:	2b00      	cmp	r3, #0
 8018680:	d054      	beq.n	801872c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	785b      	ldrb	r3, [r3, #1]
 8018686:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	689a      	ldr	r2, [r3, #8]
 801868c:	7d79      	ldrb	r1, [r7, #21]
 801868e:	7cfb      	ldrb	r3, [r7, #19]
 8018690:	440b      	add	r3, r1
 8018692:	4619      	mov	r1, r3
 8018694:	460b      	mov	r3, r1
 8018696:	005b      	lsls	r3, r3, #1
 8018698:	440b      	add	r3, r1
 801869a:	009b      	lsls	r3, r3, #2
 801869c:	4413      	add	r3, r2
 801869e:	7a1b      	ldrb	r3, [r3, #8]
 80186a0:	f343 0303 	sbfx	r3, r3, #0, #4
 80186a4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186a6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	689a      	ldr	r2, [r3, #8]
 80186ac:	7d79      	ldrb	r1, [r7, #21]
 80186ae:	7cfb      	ldrb	r3, [r7, #19]
 80186b0:	440b      	add	r3, r1
 80186b2:	4619      	mov	r1, r3
 80186b4:	460b      	mov	r3, r1
 80186b6:	005b      	lsls	r3, r3, #1
 80186b8:	440b      	add	r3, r1
 80186ba:	009b      	lsls	r3, r3, #2
 80186bc:	4413      	add	r3, r2
 80186be:	7a1b      	ldrb	r3, [r3, #8]
 80186c0:	f343 1303 	sbfx	r3, r3, #4, #4
 80186c4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186c6:	461a      	mov	r2, r3
 80186c8:	4621      	mov	r1, r4
 80186ca:	f7ff fbe8 	bl	8017e9e <RegionCommonValueInRange>
 80186ce:	4603      	mov	r3, r0
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d02d      	beq.n	8018730 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	68da      	ldr	r2, [r3, #12]
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	6899      	ldr	r1, [r3, #8]
 80186dc:	7d78      	ldrb	r0, [r7, #21]
 80186de:	7cfb      	ldrb	r3, [r7, #19]
 80186e0:	4403      	add	r3, r0
 80186e2:	4618      	mov	r0, r3
 80186e4:	4603      	mov	r3, r0
 80186e6:	005b      	lsls	r3, r3, #1
 80186e8:	4403      	add	r3, r0
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	440b      	add	r3, r1
 80186ee:	7a5b      	ldrb	r3, [r3, #9]
 80186f0:	4619      	mov	r1, r3
 80186f2:	460b      	mov	r3, r1
 80186f4:	005b      	lsls	r3, r3, #1
 80186f6:	440b      	add	r3, r1
 80186f8:	00db      	lsls	r3, r3, #3
 80186fa:	4413      	add	r3, r2
 80186fc:	7d1b      	ldrb	r3, [r3, #20]
 80186fe:	f083 0301 	eor.w	r3, r3, #1
 8018702:	b2db      	uxtb	r3, r3
 8018704:	2b00      	cmp	r3, #0
 8018706:	d003      	beq.n	8018710 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018708:	7dbb      	ldrb	r3, [r7, #22]
 801870a:	3301      	adds	r3, #1
 801870c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801870e:	e010      	b.n	8018732 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018710:	7dfb      	ldrb	r3, [r7, #23]
 8018712:	1c5a      	adds	r2, r3, #1
 8018714:	75fa      	strb	r2, [r7, #23]
 8018716:	461a      	mov	r2, r3
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	4413      	add	r3, r2
 801871c:	7d79      	ldrb	r1, [r7, #21]
 801871e:	7cfa      	ldrb	r2, [r7, #19]
 8018720:	440a      	add	r2, r1
 8018722:	b2d2      	uxtb	r2, r2
 8018724:	701a      	strb	r2, [r3, #0]
 8018726:	e004      	b.n	8018732 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018728:	bf00      	nop
 801872a:	e002      	b.n	8018732 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801872c:	bf00      	nop
 801872e:	e000      	b.n	8018732 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018730:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018732:	7cfb      	ldrb	r3, [r7, #19]
 8018734:	3301      	adds	r3, #1
 8018736:	74fb      	strb	r3, [r7, #19]
 8018738:	7cfb      	ldrb	r3, [r7, #19]
 801873a:	2b0f      	cmp	r3, #15
 801873c:	f67f af6c 	bls.w	8018618 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018740:	7d7b      	ldrb	r3, [r7, #21]
 8018742:	3310      	adds	r3, #16
 8018744:	757b      	strb	r3, [r7, #21]
 8018746:	7d3b      	ldrb	r3, [r7, #20]
 8018748:	3301      	adds	r3, #1
 801874a:	753b      	strb	r3, [r7, #20]
 801874c:	7d7b      	ldrb	r3, [r7, #21]
 801874e:	b29a      	uxth	r2, r3
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	8a1b      	ldrh	r3, [r3, #16]
 8018754:	429a      	cmp	r2, r3
 8018756:	f4ff af5c 	bcc.w	8018612 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	7dfa      	ldrb	r2, [r7, #23]
 801875e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	7dba      	ldrb	r2, [r7, #22]
 8018764:	701a      	strb	r2, [r3, #0]
}
 8018766:	bf00      	nop
 8018768:	371c      	adds	r7, #28
 801876a:	46bd      	mov	sp, r7
 801876c:	bd90      	pop	{r4, r7, pc}

0801876e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801876e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018770:	b08b      	sub	sp, #44	; 0x2c
 8018772:	af04      	add	r7, sp, #16
 8018774:	60f8      	str	r0, [r7, #12]
 8018776:	60b9      	str	r1, [r7, #8]
 8018778:	607a      	str	r2, [r7, #4]
 801877a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	4618      	mov	r0, r3
 8018782:	f005 fe15 	bl	801e3b0 <UTIL_TIMER_GetElapsedTime>
 8018786:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	681a      	ldr	r2, [r3, #0]
 801878c:	697b      	ldr	r3, [r7, #20]
 801878e:	1ad2      	subs	r2, r2, r3
 8018790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018792:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018796:	2201      	movs	r2, #1
 8018798:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801879a:	683b      	ldr	r3, [r7, #0]
 801879c:	2200      	movs	r2, #0
 801879e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	685b      	ldr	r3, [r3, #4]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d004      	beq.n	80187b2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80187ac:	697a      	ldr	r2, [r7, #20]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	d32b      	bcc.n	801880a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	2200      	movs	r2, #0
 80187b6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	69db      	ldr	r3, [r3, #28]
 80187bc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187c2:	68dd      	ldr	r5, [r3, #12]
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	7a5e      	ldrb	r6, [r3, #9]
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	f893 c008 	ldrb.w	ip, [r3, #8]
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	7d1b      	ldrb	r3, [r3, #20]
 80187d2:	68fa      	ldr	r2, [r7, #12]
 80187d4:	6992      	ldr	r2, [r2, #24]
 80187d6:	9203      	str	r2, [sp, #12]
 80187d8:	68fa      	ldr	r2, [r7, #12]
 80187da:	f10d 0e04 	add.w	lr, sp, #4
 80187de:	320c      	adds	r2, #12
 80187e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187e4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80187e8:	9300      	str	r3, [sp, #0]
 80187ea:	4663      	mov	r3, ip
 80187ec:	4632      	mov	r2, r6
 80187ee:	4629      	mov	r1, r5
 80187f0:	4620      	mov	r0, r4
 80187f2:	f7ff fc25 	bl	8018040 <RegionCommonUpdateBandTimeOff>
 80187f6:	4602      	mov	r2, r0
 80187f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187fa:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	69d8      	ldr	r0, [r3, #28]
 8018800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018802:	683a      	ldr	r2, [r7, #0]
 8018804:	6879      	ldr	r1, [r7, #4]
 8018806:	f7ff fef4 	bl	80185f2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d004      	beq.n	801881c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018814:	2200      	movs	r2, #0
 8018816:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018818:	2300      	movs	r3, #0
 801881a:	e006      	b.n	801882a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881e:	781b      	ldrb	r3, [r3, #0]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d001      	beq.n	8018828 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018824:	230b      	movs	r3, #11
 8018826:	e000      	b.n	801882a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018828:	230c      	movs	r3, #12
    }
}
 801882a:	4618      	mov	r0, r3
 801882c:	371c      	adds	r7, #28
 801882e:	46bd      	mov	sp, r7
 8018830:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018832 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018832:	b5b0      	push	{r4, r5, r7, lr}
 8018834:	b086      	sub	sp, #24
 8018836:	af02      	add	r7, sp, #8
 8018838:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	781b      	ldrb	r3, [r3, #0]
 801883e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f993 2000 	ldrsb.w	r2, [r3]
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801884c:	429a      	cmp	r2, r3
 801884e:	d103      	bne.n	8018858 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018856:	e026      	b.n	80188a6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018858:	7bfb      	ldrb	r3, [r7, #15]
 801885a:	3b01      	subs	r3, #1
 801885c:	b2db      	uxtb	r3, r3
 801885e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018866:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801886a:	429a      	cmp	r2, r3
 801886c:	d019      	beq.n	80188a2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	78d8      	ldrb	r0, [r3, #3]
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	6859      	ldr	r1, [r3, #4]
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018882:	687a      	ldr	r2, [r7, #4]
 8018884:	6892      	ldr	r2, [r2, #8]
 8018886:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801888a:	9201      	str	r2, [sp, #4]
 801888c:	9300      	str	r3, [sp, #0]
 801888e:	462b      	mov	r3, r5
 8018890:	4622      	mov	r2, r4
 8018892:	f7ff fa92 	bl	8017dba <RegionCommonChanVerifyDr>
 8018896:	4603      	mov	r3, r0
 8018898:	f083 0301 	eor.w	r3, r3, #1
 801889c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d1da      	bne.n	8018858 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80188a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80188a6:	4618      	mov	r0, r3
 80188a8:	3710      	adds	r7, #16
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bdb0      	pop	{r4, r5, r7, pc}

080188ae <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80188ae:	b480      	push	{r7}
 80188b0:	b083      	sub	sp, #12
 80188b2:	af00      	add	r7, sp, #0
 80188b4:	4603      	mov	r3, r0
 80188b6:	460a      	mov	r2, r1
 80188b8:	71fb      	strb	r3, [r7, #7]
 80188ba:	4613      	mov	r3, r2
 80188bc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80188be:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80188c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188c6:	4293      	cmp	r3, r2
 80188c8:	bfb8      	it	lt
 80188ca:	4613      	movlt	r3, r2
 80188cc:	b25b      	sxtb	r3, r3
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	370c      	adds	r7, #12
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bc80      	pop	{r7}
 80188d6:	4770      	bx	lr

080188d8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80188d8:	b480      	push	{r7}
 80188da:	b083      	sub	sp, #12
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
 80188e0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	009b      	lsls	r3, r3, #2
 80188e6:	683a      	ldr	r2, [r7, #0]
 80188e8:	4413      	add	r3, r2
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4a07      	ldr	r2, [pc, #28]	; (801890c <RegionCommonGetBandwidth+0x34>)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d004      	beq.n	80188fc <RegionCommonGetBandwidth+0x24>
 80188f2:	4a07      	ldr	r2, [pc, #28]	; (8018910 <RegionCommonGetBandwidth+0x38>)
 80188f4:	4293      	cmp	r3, r2
 80188f6:	d003      	beq.n	8018900 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80188f8:	2300      	movs	r3, #0
 80188fa:	e002      	b.n	8018902 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80188fc:	2301      	movs	r3, #1
 80188fe:	e000      	b.n	8018902 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018900:	2302      	movs	r3, #2
    }
}
 8018902:	4618      	mov	r0, r3
 8018904:	370c      	adds	r7, #12
 8018906:	46bd      	mov	sp, r7
 8018908:	bc80      	pop	{r7}
 801890a:	4770      	bx	lr
 801890c:	0003d090 	.word	0x0003d090
 8018910:	0007a120 	.word	0x0007a120

08018914 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b086      	sub	sp, #24
 8018918:	af04      	add	r7, sp, #16
 801891a:	4603      	mov	r3, r0
 801891c:	6039      	str	r1, [r7, #0]
 801891e:	71fb      	strb	r3, [r7, #7]
 8018920:	4613      	mov	r3, r2
 8018922:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018924:	79fb      	ldrb	r3, [r7, #7]
 8018926:	2b05      	cmp	r3, #5
 8018928:	d810      	bhi.n	801894c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801892a:	79fb      	ldrb	r3, [r7, #7]
 801892c:	4a0f      	ldr	r2, [pc, #60]	; (801896c <RegionCommonRxConfigPrint+0x58>)
 801892e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018932:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018936:	9202      	str	r2, [sp, #8]
 8018938:	683a      	ldr	r2, [r7, #0]
 801893a:	9201      	str	r2, [sp, #4]
 801893c:	9300      	str	r3, [sp, #0]
 801893e:	4b0c      	ldr	r3, [pc, #48]	; (8018970 <RegionCommonRxConfigPrint+0x5c>)
 8018940:	2201      	movs	r2, #1
 8018942:	2100      	movs	r1, #0
 8018944:	2002      	movs	r0, #2
 8018946:	f005 fe11 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801894a:	e00a      	b.n	8018962 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801894c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018950:	9301      	str	r3, [sp, #4]
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	9300      	str	r3, [sp, #0]
 8018956:	4b07      	ldr	r3, [pc, #28]	; (8018974 <RegionCommonRxConfigPrint+0x60>)
 8018958:	2201      	movs	r2, #1
 801895a:	2100      	movs	r1, #0
 801895c:	2002      	movs	r0, #2
 801895e:	f005 fe05 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 8018962:	bf00      	nop
 8018964:	3708      	adds	r7, #8
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}
 801896a:	bf00      	nop
 801896c:	20000138 	.word	0x20000138
 8018970:	0801f3b4 	.word	0x0801f3b4
 8018974:	0801f3d4 	.word	0x0801f3d4

08018978 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af02      	add	r7, sp, #8
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	460b      	mov	r3, r1
 8018982:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018988:	9301      	str	r3, [sp, #4]
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	9300      	str	r3, [sp, #0]
 801898e:	4b05      	ldr	r3, [pc, #20]	; (80189a4 <RegionCommonTxConfigPrint+0x2c>)
 8018990:	2201      	movs	r2, #1
 8018992:	2100      	movs	r1, #0
 8018994:	2002      	movs	r0, #2
 8018996:	f005 fde9 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
}
 801899a:	bf00      	nop
 801899c:	3708      	adds	r7, #8
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	0801f3f0 	.word	0x0801f3f0

080189a8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
 80189b0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80189b2:	4b2d      	ldr	r3, [pc, #180]	; (8018a68 <VerifyRfFreq+0xc0>)
 80189b4:	6a1b      	ldr	r3, [r3, #32]
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	4798      	blx	r3
 80189ba:	4603      	mov	r3, r0
 80189bc:	f083 0301 	eor.w	r3, r3, #1
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d001      	beq.n	80189ca <VerifyRfFreq+0x22>
    {
        return false;
 80189c6:	2300      	movs	r3, #0
 80189c8:	e04a      	b.n	8018a60 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	4a27      	ldr	r2, [pc, #156]	; (8018a6c <VerifyRfFreq+0xc4>)
 80189ce:	4293      	cmp	r3, r2
 80189d0:	d307      	bcc.n	80189e2 <VerifyRfFreq+0x3a>
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	4a26      	ldr	r2, [pc, #152]	; (8018a70 <VerifyRfFreq+0xc8>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d803      	bhi.n	80189e2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80189da:	683b      	ldr	r3, [r7, #0]
 80189dc:	2202      	movs	r2, #2
 80189de:	701a      	strb	r2, [r3, #0]
 80189e0:	e03d      	b.n	8018a5e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	4a22      	ldr	r2, [pc, #136]	; (8018a70 <VerifyRfFreq+0xc8>)
 80189e6:	4293      	cmp	r3, r2
 80189e8:	d907      	bls.n	80189fa <VerifyRfFreq+0x52>
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4a21      	ldr	r2, [pc, #132]	; (8018a74 <VerifyRfFreq+0xcc>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d803      	bhi.n	80189fa <VerifyRfFreq+0x52>
    {
        *band = 0;
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	2200      	movs	r2, #0
 80189f6:	701a      	strb	r2, [r3, #0]
 80189f8:	e031      	b.n	8018a5e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	4a1d      	ldr	r2, [pc, #116]	; (8018a74 <VerifyRfFreq+0xcc>)
 80189fe:	4293      	cmp	r3, r2
 8018a00:	d907      	bls.n	8018a12 <VerifyRfFreq+0x6a>
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4a1c      	ldr	r2, [pc, #112]	; (8018a78 <VerifyRfFreq+0xd0>)
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d803      	bhi.n	8018a12 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	2201      	movs	r2, #1
 8018a0e:	701a      	strb	r2, [r3, #0]
 8018a10:	e025      	b.n	8018a5e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	4a19      	ldr	r2, [pc, #100]	; (8018a7c <VerifyRfFreq+0xd4>)
 8018a16:	4293      	cmp	r3, r2
 8018a18:	d907      	bls.n	8018a2a <VerifyRfFreq+0x82>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	4a18      	ldr	r2, [pc, #96]	; (8018a80 <VerifyRfFreq+0xd8>)
 8018a1e:	4293      	cmp	r3, r2
 8018a20:	d803      	bhi.n	8018a2a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	2205      	movs	r2, #5
 8018a26:	701a      	strb	r2, [r3, #0]
 8018a28:	e019      	b.n	8018a5e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	4a15      	ldr	r2, [pc, #84]	; (8018a84 <VerifyRfFreq+0xdc>)
 8018a2e:	4293      	cmp	r3, r2
 8018a30:	d907      	bls.n	8018a42 <VerifyRfFreq+0x9a>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	4a14      	ldr	r2, [pc, #80]	; (8018a88 <VerifyRfFreq+0xe0>)
 8018a36:	4293      	cmp	r3, r2
 8018a38:	d803      	bhi.n	8018a42 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	2203      	movs	r2, #3
 8018a3e:	701a      	strb	r2, [r3, #0]
 8018a40:	e00d      	b.n	8018a5e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	4a11      	ldr	r2, [pc, #68]	; (8018a8c <VerifyRfFreq+0xe4>)
 8018a46:	4293      	cmp	r3, r2
 8018a48:	d307      	bcc.n	8018a5a <VerifyRfFreq+0xb2>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	4a10      	ldr	r2, [pc, #64]	; (8018a90 <VerifyRfFreq+0xe8>)
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	d803      	bhi.n	8018a5a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	2204      	movs	r2, #4
 8018a56:	701a      	strb	r2, [r3, #0]
 8018a58:	e001      	b.n	8018a5e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	e000      	b.n	8018a60 <VerifyRfFreq+0xb8>
    }
    return true;
 8018a5e:	2301      	movs	r3, #1
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	3708      	adds	r7, #8
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	0801fa14 	.word	0x0801fa14
 8018a6c:	337055c0 	.word	0x337055c0
 8018a70:	338eda3f 	.word	0x338eda3f
 8018a74:	33bca100 	.word	0x33bca100
 8018a78:	33c5c8c0 	.word	0x33c5c8c0
 8018a7c:	33c74f5f 	.word	0x33c74f5f
 8018a80:	33cef080 	.word	0x33cef080
 8018a84:	33d1fdbf 	.word	0x33d1fdbf
 8018a88:	33d5ce50 	.word	0x33d5ce50
 8018a8c:	33d691a0 	.word	0x33d691a0
 8018a90:	33db2580 	.word	0x33db2580

08018a94 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018a94:	b590      	push	{r4, r7, lr}
 8018a96:	b08b      	sub	sp, #44	; 0x2c
 8018a98:	af04      	add	r7, sp, #16
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	460a      	mov	r2, r1
 8018a9e:	71fb      	strb	r3, [r7, #7]
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018aa8:	4a1f      	ldr	r2, [pc, #124]	; (8018b28 <GetTimeOnAir+0x94>)
 8018aaa:	5cd3      	ldrb	r3, [r2, r3]
 8018aac:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ab2:	491e      	ldr	r1, [pc, #120]	; (8018b2c <GetTimeOnAir+0x98>)
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7ff ff0f 	bl	80188d8 <RegionCommonGetBandwidth>
 8018aba:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018abc:	2300      	movs	r3, #0
 8018abe:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ac4:	2b07      	cmp	r3, #7
 8018ac6:	d118      	bne.n	8018afa <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018ac8:	4b19      	ldr	r3, [pc, #100]	; (8018b30 <GetTimeOnAir+0x9c>)
 8018aca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018acc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ad4:	fb02 f303 	mul.w	r3, r2, r3
 8018ad8:	4619      	mov	r1, r3
 8018ada:	88bb      	ldrh	r3, [r7, #4]
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	2201      	movs	r2, #1
 8018ae0:	9203      	str	r2, [sp, #12]
 8018ae2:	9302      	str	r3, [sp, #8]
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	9301      	str	r3, [sp, #4]
 8018ae8:	2305      	movs	r3, #5
 8018aea:	9300      	str	r3, [sp, #0]
 8018aec:	2300      	movs	r3, #0
 8018aee:	460a      	mov	r2, r1
 8018af0:	68f9      	ldr	r1, [r7, #12]
 8018af2:	2000      	movs	r0, #0
 8018af4:	47a0      	blx	r4
 8018af6:	6178      	str	r0, [r7, #20]
 8018af8:	e011      	b.n	8018b1e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018afa:	4b0d      	ldr	r3, [pc, #52]	; (8018b30 <GetTimeOnAir+0x9c>)
 8018afc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018afe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018b02:	88bb      	ldrh	r3, [r7, #4]
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	2101      	movs	r1, #1
 8018b08:	9103      	str	r1, [sp, #12]
 8018b0a:	9302      	str	r3, [sp, #8]
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	9301      	str	r3, [sp, #4]
 8018b10:	2308      	movs	r3, #8
 8018b12:	9300      	str	r3, [sp, #0]
 8018b14:	2301      	movs	r3, #1
 8018b16:	68f9      	ldr	r1, [r7, #12]
 8018b18:	2001      	movs	r0, #1
 8018b1a:	47a0      	blx	r4
 8018b1c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018b1e:	697b      	ldr	r3, [r7, #20]
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	371c      	adds	r7, #28
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd90      	pop	{r4, r7, pc}
 8018b28:	0801f9dc 	.word	0x0801f9dc
 8018b2c:	0801f9e4 	.word	0x0801f9e4
 8018b30:	0801fa14 	.word	0x0801fa14

08018b34 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b088      	sub	sp, #32
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	781b      	ldrb	r3, [r3, #0]
 8018b44:	3b01      	subs	r3, #1
 8018b46:	2b38      	cmp	r3, #56	; 0x38
 8018b48:	f200 8128 	bhi.w	8018d9c <RegionEU868GetPhyParam+0x268>
 8018b4c:	a201      	add	r2, pc, #4	; (adr r2, 8018b54 <RegionEU868GetPhyParam+0x20>)
 8018b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b52:	bf00      	nop
 8018b54:	08018c39 	.word	0x08018c39
 8018b58:	08018c3f 	.word	0x08018c3f
 8018b5c:	08018d9d 	.word	0x08018d9d
 8018b60:	08018d9d 	.word	0x08018d9d
 8018b64:	08018d9d 	.word	0x08018d9d
 8018b68:	08018c45 	.word	0x08018c45
 8018b6c:	08018d9d 	.word	0x08018d9d
 8018b70:	08018c7f 	.word	0x08018c7f
 8018b74:	08018d9d 	.word	0x08018d9d
 8018b78:	08018c85 	.word	0x08018c85
 8018b7c:	08018c8b 	.word	0x08018c8b
 8018b80:	08018c91 	.word	0x08018c91
 8018b84:	08018c97 	.word	0x08018c97
 8018b88:	08018ca7 	.word	0x08018ca7
 8018b8c:	08018cb7 	.word	0x08018cb7
 8018b90:	08018cbd 	.word	0x08018cbd
 8018b94:	08018cc5 	.word	0x08018cc5
 8018b98:	08018ccd 	.word	0x08018ccd
 8018b9c:	08018cd5 	.word	0x08018cd5
 8018ba0:	08018cdd 	.word	0x08018cdd
 8018ba4:	08018ce5 	.word	0x08018ce5
 8018ba8:	08018ced 	.word	0x08018ced
 8018bac:	08018d01 	.word	0x08018d01
 8018bb0:	08018d07 	.word	0x08018d07
 8018bb4:	08018d0d 	.word	0x08018d0d
 8018bb8:	08018d13 	.word	0x08018d13
 8018bbc:	08018d1f 	.word	0x08018d1f
 8018bc0:	08018d2b 	.word	0x08018d2b
 8018bc4:	08018d31 	.word	0x08018d31
 8018bc8:	08018d39 	.word	0x08018d39
 8018bcc:	08018d3f 	.word	0x08018d3f
 8018bd0:	08018d45 	.word	0x08018d45
 8018bd4:	08018d4d 	.word	0x08018d4d
 8018bd8:	08018c4b 	.word	0x08018c4b
 8018bdc:	08018d9d 	.word	0x08018d9d
 8018be0:	08018d9d 	.word	0x08018d9d
 8018be4:	08018d9d 	.word	0x08018d9d
 8018be8:	08018d9d 	.word	0x08018d9d
 8018bec:	08018d9d 	.word	0x08018d9d
 8018bf0:	08018d9d 	.word	0x08018d9d
 8018bf4:	08018d9d 	.word	0x08018d9d
 8018bf8:	08018d9d 	.word	0x08018d9d
 8018bfc:	08018d9d 	.word	0x08018d9d
 8018c00:	08018d9d 	.word	0x08018d9d
 8018c04:	08018d9d 	.word	0x08018d9d
 8018c08:	08018d9d 	.word	0x08018d9d
 8018c0c:	08018d9d 	.word	0x08018d9d
 8018c10:	08018d53 	.word	0x08018d53
 8018c14:	08018d59 	.word	0x08018d59
 8018c18:	08018d67 	.word	0x08018d67
 8018c1c:	08018d9d 	.word	0x08018d9d
 8018c20:	08018d9d 	.word	0x08018d9d
 8018c24:	08018d6d 	.word	0x08018d6d
 8018c28:	08018d73 	.word	0x08018d73
 8018c2c:	08018d9d 	.word	0x08018d9d
 8018c30:	08018d79 	.word	0x08018d79
 8018c34:	08018d89 	.word	0x08018d89
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	61bb      	str	r3, [r7, #24]
            break;
 8018c3c:	e0af      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	61bb      	str	r3, [r7, #24]
            break;
 8018c42:	e0ac      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018c44:	2300      	movs	r3, #0
 8018c46:	61bb      	str	r3, [r7, #24]
            break;
 8018c48:	e0a9      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c50:	733b      	strb	r3, [r7, #12]
 8018c52:	2307      	movs	r3, #7
 8018c54:	737b      	strb	r3, [r7, #13]
 8018c56:	2300      	movs	r3, #0
 8018c58:	73bb      	strb	r3, [r7, #14]
 8018c5a:	2310      	movs	r3, #16
 8018c5c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018c5e:	4b53      	ldr	r3, [pc, #332]	; (8018dac <RegionEU868GetPhyParam+0x278>)
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c66:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018c68:	4b50      	ldr	r3, [pc, #320]	; (8018dac <RegionEU868GetPhyParam+0x278>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c6c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018c6e:	f107 030c 	add.w	r3, r7, #12
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7ff fddd 	bl	8018832 <RegionCommonGetNextLowerTxDr>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	61bb      	str	r3, [r7, #24]
            break;
 8018c7c:	e08f      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	61bb      	str	r3, [r7, #24]
            break;
 8018c82:	e08c      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018c84:	2300      	movs	r3, #0
 8018c86:	61bb      	str	r3, [r7, #24]
            break;
 8018c88:	e089      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018c8a:	2340      	movs	r3, #64	; 0x40
 8018c8c:	61bb      	str	r3, [r7, #24]
            break;
 8018c8e:	e086      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018c90:	2320      	movs	r3, #32
 8018c92:	61bb      	str	r3, [r7, #24]
            break;
 8018c94:	e083      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c9c:	461a      	mov	r2, r3
 8018c9e:	4b44      	ldr	r3, [pc, #272]	; (8018db0 <RegionEU868GetPhyParam+0x27c>)
 8018ca0:	5c9b      	ldrb	r3, [r3, r2]
 8018ca2:	61bb      	str	r3, [r7, #24]
            break;
 8018ca4:	e07b      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018cac:	461a      	mov	r2, r3
 8018cae:	4b41      	ldr	r3, [pc, #260]	; (8018db4 <RegionEU868GetPhyParam+0x280>)
 8018cb0:	5c9b      	ldrb	r3, [r3, r2]
 8018cb2:	61bb      	str	r3, [r7, #24]
            break;
 8018cb4:	e073      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018cb6:	2301      	movs	r3, #1
 8018cb8:	61bb      	str	r3, [r7, #24]
            break;
 8018cba:	e070      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018cbc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018cc0:	61bb      	str	r3, [r7, #24]
            break;
 8018cc2:	e06c      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018cc8:	61bb      	str	r3, [r7, #24]
            break;
 8018cca:	e068      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018ccc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018cd0:	61bb      	str	r3, [r7, #24]
            break;
 8018cd2:	e064      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8018cd8:	61bb      	str	r3, [r7, #24]
            break;
 8018cda:	e060      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018cdc:	f241 7370 	movw	r3, #6000	; 0x1770
 8018ce0:	61bb      	str	r3, [r7, #24]
            break;
 8018ce2:	e05c      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018ce8:	61bb      	str	r3, [r7, #24]
            break;
 8018cea:	e058      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018cec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018cf0:	4831      	ldr	r0, [pc, #196]	; (8018db8 <RegionEU868GetPhyParam+0x284>)
 8018cf2:	f001 f87f 	bl	8019df4 <randr>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018cfc:	61bb      	str	r3, [r7, #24]
            break;
 8018cfe:	e04e      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018d00:	2300      	movs	r3, #0
 8018d02:	61bb      	str	r3, [r7, #24]
            break;
 8018d04:	e04b      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018d06:	4b2d      	ldr	r3, [pc, #180]	; (8018dbc <RegionEU868GetPhyParam+0x288>)
 8018d08:	61bb      	str	r3, [r7, #24]
            break;
 8018d0a:	e048      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	61bb      	str	r3, [r7, #24]
            break;
 8018d10:	e045      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018d12:	4b26      	ldr	r3, [pc, #152]	; (8018dac <RegionEU868GetPhyParam+0x278>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018d1a:	61bb      	str	r3, [r7, #24]
            break;
 8018d1c:	e03f      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018d1e:	4b23      	ldr	r3, [pc, #140]	; (8018dac <RegionEU868GetPhyParam+0x278>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018d26:	61bb      	str	r3, [r7, #24]
            break;
 8018d28:	e039      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018d2a:	2310      	movs	r3, #16
 8018d2c:	61bb      	str	r3, [r7, #24]
            break;
 8018d2e:	e036      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018d30:	4b1e      	ldr	r3, [pc, #120]	; (8018dac <RegionEU868GetPhyParam+0x278>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	61bb      	str	r3, [r7, #24]
            break;
 8018d36:	e032      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	61bb      	str	r3, [r7, #24]
            break;
 8018d3c:	e02f      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	61bb      	str	r3, [r7, #24]
            break;
 8018d42:	e02c      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018d44:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018d48:	61bb      	str	r3, [r7, #24]
            break;
 8018d4a:	e028      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018d4c:	4b1c      	ldr	r3, [pc, #112]	; (8018dc0 <RegionEU868GetPhyParam+0x28c>)
 8018d4e:	61bb      	str	r3, [r7, #24]
            break;
 8018d50:	e025      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018d52:	4b1a      	ldr	r3, [pc, #104]	; (8018dbc <RegionEU868GetPhyParam+0x288>)
 8018d54:	61bb      	str	r3, [r7, #24]
            break;
 8018d56:	e022      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018d58:	2311      	movs	r3, #17
 8018d5a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018d5c:	2302      	movs	r3, #2
 8018d5e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018d60:	2300      	movs	r3, #0
 8018d62:	76bb      	strb	r3, [r7, #26]
            break;
 8018d64:	e01b      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018d66:	2303      	movs	r3, #3
 8018d68:	61bb      	str	r3, [r7, #24]
            break;
 8018d6a:	e018      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018d6c:	4b13      	ldr	r3, [pc, #76]	; (8018dbc <RegionEU868GetPhyParam+0x288>)
 8018d6e:	61bb      	str	r3, [r7, #24]
            break;
 8018d70:	e015      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018d72:	2303      	movs	r3, #3
 8018d74:	61bb      	str	r3, [r7, #24]
            break;
 8018d76:	e012      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d7e:	461a      	mov	r2, r3
 8018d80:	4b10      	ldr	r3, [pc, #64]	; (8018dc4 <RegionEU868GetPhyParam+0x290>)
 8018d82:	5c9b      	ldrb	r3, [r3, r2]
 8018d84:	61bb      	str	r3, [r7, #24]
            break;
 8018d86:	e00a      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d8e:	490e      	ldr	r1, [pc, #56]	; (8018dc8 <RegionEU868GetPhyParam+0x294>)
 8018d90:	4618      	mov	r0, r3
 8018d92:	f7ff fda1 	bl	80188d8 <RegionCommonGetBandwidth>
 8018d96:	4603      	mov	r3, r0
 8018d98:	61bb      	str	r3, [r7, #24]
            break;
 8018d9a:	e000      	b.n	8018d9e <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018d9c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018d9e:	69bb      	ldr	r3, [r7, #24]
 8018da0:	61fb      	str	r3, [r7, #28]
 8018da2:	69fb      	ldr	r3, [r7, #28]
}
 8018da4:	4618      	mov	r0, r3
 8018da6:	3720      	adds	r7, #32
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}
 8018dac:	20001728 	.word	0x20001728
 8018db0:	0801fa04 	.word	0x0801fa04
 8018db4:	0801fa0c 	.word	0x0801fa0c
 8018db8:	fffffc18 	.word	0xfffffc18
 8018dbc:	33d3e608 	.word	0x33d3e608
 8018dc0:	4009999a 	.word	0x4009999a
 8018dc4:	0801f9dc 	.word	0x0801f9dc
 8018dc8:	0801f9e4 	.word	0x0801f9e4

08018dcc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018dcc:	b590      	push	{r4, r7, lr}
 8018dce:	b085      	sub	sp, #20
 8018dd0:	af02      	add	r7, sp, #8
 8018dd2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018dd4:	4b11      	ldr	r3, [pc, #68]	; (8018e1c <RegionEU868SetBandTxDone+0x50>)
 8018dd6:	681a      	ldr	r2, [r3, #0]
 8018dd8:	4b11      	ldr	r3, [pc, #68]	; (8018e20 <RegionEU868SetBandTxDone+0x54>)
 8018dda:	6819      	ldr	r1, [r3, #0]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	4618      	mov	r0, r3
 8018de2:	4603      	mov	r3, r0
 8018de4:	005b      	lsls	r3, r3, #1
 8018de6:	4403      	add	r3, r0
 8018de8:	009b      	lsls	r3, r3, #2
 8018dea:	440b      	add	r3, r1
 8018dec:	3309      	adds	r3, #9
 8018dee:	781b      	ldrb	r3, [r3, #0]
 8018df0:	4619      	mov	r1, r3
 8018df2:	460b      	mov	r3, r1
 8018df4:	005b      	lsls	r3, r3, #1
 8018df6:	440b      	add	r3, r1
 8018df8:	00db      	lsls	r3, r3, #3
 8018dfa:	18d0      	adds	r0, r2, r3
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	6899      	ldr	r1, [r3, #8]
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	785c      	ldrb	r4, [r3, #1]
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	691a      	ldr	r2, [r3, #16]
 8018e08:	9200      	str	r2, [sp, #0]
 8018e0a:	68db      	ldr	r3, [r3, #12]
 8018e0c:	4622      	mov	r2, r4
 8018e0e:	f7ff f8e9 	bl	8017fe4 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018e12:	bf00      	nop
 8018e14:	370c      	adds	r7, #12
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd90      	pop	{r4, r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	20001724 	.word	0x20001724
 8018e20:	20001728 	.word	0x20001728

08018e24 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b0b0      	sub	sp, #192	; 0xc0
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e30:	2290      	movs	r2, #144	; 0x90
 8018e32:	2100      	movs	r1, #0
 8018e34:	4618      	mov	r0, r3
 8018e36:	f005 fe11 	bl	801ea5c <memset>
 8018e3a:	2364      	movs	r3, #100	; 0x64
 8018e3c:	863b      	strh	r3, [r7, #48]	; 0x30
 8018e3e:	2364      	movs	r3, #100	; 0x64
 8018e40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e48:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018e4c:	230a      	movs	r3, #10
 8018e4e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018e52:	2364      	movs	r3, #100	; 0x64
 8018e54:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e5c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	7a1b      	ldrb	r3, [r3, #8]
 8018e64:	2b02      	cmp	r3, #2
 8018e66:	d05e      	beq.n	8018f26 <RegionEU868InitDefaults+0x102>
 8018e68:	2b02      	cmp	r3, #2
 8018e6a:	dc6b      	bgt.n	8018f44 <RegionEU868InitDefaults+0x120>
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d002      	beq.n	8018e76 <RegionEU868InitDefaults+0x52>
 8018e70:	2b01      	cmp	r3, #1
 8018e72:	d03f      	beq.n	8018ef4 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018e74:	e066      	b.n	8018f44 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d063      	beq.n	8018f46 <RegionEU868InitDefaults+0x122>
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d05f      	beq.n	8018f46 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	4a30      	ldr	r2, [pc, #192]	; (8018f4c <RegionEU868InitDefaults+0x128>)
 8018e8c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	685b      	ldr	r3, [r3, #4]
 8018e92:	4a2f      	ldr	r2, [pc, #188]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018e94:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018e96:	4b2d      	ldr	r3, [pc, #180]	; (8018f4c <RegionEU868InitDefaults+0x128>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ea0:	2290      	movs	r2, #144	; 0x90
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	f000 ffbd 	bl	8019e22 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018ea8:	4b29      	ldr	r3, [pc, #164]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	4a29      	ldr	r2, [pc, #164]	; (8018f54 <RegionEU868InitDefaults+0x130>)
 8018eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8018eb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018eb4:	4b26      	ldr	r3, [pc, #152]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	4a27      	ldr	r2, [pc, #156]	; (8018f58 <RegionEU868InitDefaults+0x134>)
 8018eba:	330c      	adds	r3, #12
 8018ebc:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ebe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018ec2:	4b23      	ldr	r3, [pc, #140]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	4a25      	ldr	r2, [pc, #148]	; (8018f5c <RegionEU868InitDefaults+0x138>)
 8018ec8:	3318      	adds	r3, #24
 8018eca:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ecc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018ed0:	4b1f      	ldr	r3, [pc, #124]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2207      	movs	r2, #7
 8018ed6:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018eda:	4b1d      	ldr	r3, [pc, #116]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018ee2:	4b1b      	ldr	r3, [pc, #108]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018eea:	2201      	movs	r2, #1
 8018eec:	4619      	mov	r1, r3
 8018eee:	f7ff f853 	bl	8017f98 <RegionCommonChanMaskCopy>
 8018ef2:	e028      	b.n	8018f46 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018ef4:	4b16      	ldr	r3, [pc, #88]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2200      	movs	r2, #0
 8018efa:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018efc:	4b14      	ldr	r3, [pc, #80]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	2200      	movs	r2, #0
 8018f02:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018f04:	4b12      	ldr	r3, [pc, #72]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018f0c:	4b10      	ldr	r3, [pc, #64]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018f14:	4b0e      	ldr	r3, [pc, #56]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018f1c:	2201      	movs	r2, #1
 8018f1e:	4619      	mov	r1, r3
 8018f20:	f7ff f83a 	bl	8017f98 <RegionCommonChanMaskCopy>
            break;
 8018f24:	e00f      	b.n	8018f46 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018f26:	4b0a      	ldr	r3, [pc, #40]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018f2e:	4b08      	ldr	r3, [pc, #32]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018f36:	4b06      	ldr	r3, [pc, #24]	; (8018f50 <RegionEU868InitDefaults+0x12c>)
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	430a      	orrs	r2, r1
 8018f3c:	b292      	uxth	r2, r2
 8018f3e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018f42:	e000      	b.n	8018f46 <RegionEU868InitDefaults+0x122>
            break;
 8018f44:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018f46:	37c0      	adds	r7, #192	; 0xc0
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	20001724 	.word	0x20001724
 8018f50:	20001728 	.word	0x20001728
 8018f54:	0801f40c 	.word	0x0801f40c
 8018f58:	0801f418 	.word	0x0801f418
 8018f5c:	0801f424 	.word	0x0801f424

08018f60 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	460b      	mov	r3, r1
 8018f6a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018f6c:	78fb      	ldrb	r3, [r7, #3]
 8018f6e:	2b0f      	cmp	r3, #15
 8018f70:	d86c      	bhi.n	801904c <RegionEU868Verify+0xec>
 8018f72:	a201      	add	r2, pc, #4	; (adr r2, 8018f78 <RegionEU868Verify+0x18>)
 8018f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f78:	08018fb9 	.word	0x08018fb9
 8018f7c:	0801904d 	.word	0x0801904d
 8018f80:	0801904d 	.word	0x0801904d
 8018f84:	0801904d 	.word	0x0801904d
 8018f88:	0801904d 	.word	0x0801904d
 8018f8c:	08018fd1 	.word	0x08018fd1
 8018f90:	08018fef 	.word	0x08018fef
 8018f94:	0801900d 	.word	0x0801900d
 8018f98:	0801904d 	.word	0x0801904d
 8018f9c:	0801902b 	.word	0x0801902b
 8018fa0:	0801902b 	.word	0x0801902b
 8018fa4:	0801904d 	.word	0x0801904d
 8018fa8:	0801904d 	.word	0x0801904d
 8018fac:	0801904d 	.word	0x0801904d
 8018fb0:	0801904d 	.word	0x0801904d
 8018fb4:	08019049 	.word	0x08019049
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f107 020f 	add.w	r2, r7, #15
 8018fc4:	4611      	mov	r1, r2
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7ff fcee 	bl	80189a8 <VerifyRfFreq>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	e03e      	b.n	801904e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8018fd6:	2207      	movs	r2, #7
 8018fd8:	2100      	movs	r1, #0
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7fe ff5f 	bl	8017e9e <RegionCommonValueInRange>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	bf14      	ite	ne
 8018fe6:	2301      	movne	r3, #1
 8018fe8:	2300      	moveq	r3, #0
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	e02f      	b.n	801904e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8018ff4:	2205      	movs	r2, #5
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7fe ff50 	bl	8017e9e <RegionCommonValueInRange>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	bf14      	ite	ne
 8019004:	2301      	movne	r3, #1
 8019006:	2300      	moveq	r3, #0
 8019008:	b2db      	uxtb	r3, r3
 801900a:	e020      	b.n	801904e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	f993 3000 	ldrsb.w	r3, [r3]
 8019012:	2207      	movs	r2, #7
 8019014:	2100      	movs	r1, #0
 8019016:	4618      	mov	r0, r3
 8019018:	f7fe ff41 	bl	8017e9e <RegionCommonValueInRange>
 801901c:	4603      	mov	r3, r0
 801901e:	2b00      	cmp	r3, #0
 8019020:	bf14      	ite	ne
 8019022:	2301      	movne	r3, #1
 8019024:	2300      	moveq	r3, #0
 8019026:	b2db      	uxtb	r3, r3
 8019028:	e011      	b.n	801904e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	f993 3000 	ldrsb.w	r3, [r3]
 8019030:	2207      	movs	r2, #7
 8019032:	2100      	movs	r1, #0
 8019034:	4618      	mov	r0, r3
 8019036:	f7fe ff32 	bl	8017e9e <RegionCommonValueInRange>
 801903a:	4603      	mov	r3, r0
 801903c:	2b00      	cmp	r3, #0
 801903e:	bf14      	ite	ne
 8019040:	2301      	movne	r3, #1
 8019042:	2300      	moveq	r3, #0
 8019044:	b2db      	uxtb	r3, r3
 8019046:	e002      	b.n	801904e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019048:	2301      	movs	r3, #1
 801904a:	e000      	b.n	801904e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801904c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801904e:	4618      	mov	r0, r3
 8019050:	3710      	adds	r7, #16
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}
 8019056:	bf00      	nop

08019058 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b08a      	sub	sp, #40	; 0x28
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019060:	2350      	movs	r3, #80	; 0x50
 8019062:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	791b      	ldrb	r3, [r3, #4]
 801906a:	2b10      	cmp	r3, #16
 801906c:	d162      	bne.n	8019134 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	330f      	adds	r3, #15
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d15e      	bne.n	8019138 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801907a:	2300      	movs	r3, #0
 801907c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019080:	2303      	movs	r3, #3
 8019082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019086:	e050      	b.n	801912a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801908c:	2b07      	cmp	r3, #7
 801908e:	d824      	bhi.n	80190da <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681a      	ldr	r2, [r3, #0]
 8019094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019098:	4413      	add	r3, r2
 801909a:	781b      	ldrb	r3, [r3, #0]
 801909c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801909e:	69ba      	ldr	r2, [r7, #24]
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	6819      	ldr	r1, [r3, #0]
 80190a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190a8:	3301      	adds	r3, #1
 80190aa:	440b      	add	r3, r1
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	021b      	lsls	r3, r3, #8
 80190b0:	4313      	orrs	r3, r2
 80190b2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80190b4:	69ba      	ldr	r2, [r7, #24]
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	6819      	ldr	r1, [r3, #0]
 80190ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190be:	3302      	adds	r3, #2
 80190c0:	440b      	add	r3, r1
 80190c2:	781b      	ldrb	r3, [r3, #0]
 80190c4:	041b      	lsls	r3, r3, #16
 80190c6:	4313      	orrs	r3, r2
 80190c8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80190ca:	69bb      	ldr	r3, [r7, #24]
 80190cc:	2264      	movs	r2, #100	; 0x64
 80190ce:	fb02 f303 	mul.w	r3, r2, r3
 80190d2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80190d4:	2300      	movs	r3, #0
 80190d6:	61fb      	str	r3, [r7, #28]
 80190d8:	e006      	b.n	80190e8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80190da:	2300      	movs	r3, #0
 80190dc:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80190de:	2300      	movs	r3, #0
 80190e0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80190e4:	2300      	movs	r3, #0
 80190e6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80190e8:	69bb      	ldr	r3, [r7, #24]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d00b      	beq.n	8019106 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80190ee:	f107 0318 	add.w	r3, r7, #24
 80190f2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80190f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190f8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80190fa:	f107 0310 	add.w	r3, r7, #16
 80190fe:	4618      	mov	r0, r3
 8019100:	f000 fd14 	bl	8019b2c <RegionEU868ChannelAdd>
 8019104:	e007      	b.n	8019116 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8019106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801910a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801910c:	f107 030c 	add.w	r3, r7, #12
 8019110:	4618      	mov	r0, r3
 8019112:	f000 fdad 	bl	8019c70 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801911a:	3303      	adds	r3, #3
 801911c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019124:	3301      	adds	r3, #1
 8019126:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801912a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801912e:	2b0f      	cmp	r3, #15
 8019130:	d9aa      	bls.n	8019088 <RegionEU868ApplyCFList+0x30>
 8019132:	e002      	b.n	801913a <RegionEU868ApplyCFList+0xe2>
        return;
 8019134:	bf00      	nop
 8019136:	e000      	b.n	801913a <RegionEU868ApplyCFList+0xe2>
        return;
 8019138:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801913a:	3728      	adds	r7, #40	; 0x28
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}

08019140 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b082      	sub	sp, #8
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	791b      	ldrb	r3, [r3, #4]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d002      	beq.n	8019156 <RegionEU868ChanMaskSet+0x16>
 8019150:	2b01      	cmp	r3, #1
 8019152:	d00b      	beq.n	801916c <RegionEU868ChanMaskSet+0x2c>
 8019154:	e015      	b.n	8019182 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019156:	4b0e      	ldr	r3, [pc, #56]	; (8019190 <RegionEU868ChanMaskSet+0x50>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	2201      	movs	r2, #1
 8019164:	4619      	mov	r1, r3
 8019166:	f7fe ff17 	bl	8017f98 <RegionCommonChanMaskCopy>
            break;
 801916a:	e00c      	b.n	8019186 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801916c:	4b08      	ldr	r3, [pc, #32]	; (8019190 <RegionEU868ChanMaskSet+0x50>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	2201      	movs	r2, #1
 801917a:	4619      	mov	r1, r3
 801917c:	f7fe ff0c 	bl	8017f98 <RegionCommonChanMaskCopy>
            break;
 8019180:	e001      	b.n	8019186 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8019182:	2300      	movs	r3, #0
 8019184:	e000      	b.n	8019188 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8019186:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019188:	4618      	mov	r0, r3
 801918a:	3708      	adds	r7, #8
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}
 8019190:	20001728 	.word	0x20001728

08019194 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b088      	sub	sp, #32
 8019198:	af02      	add	r7, sp, #8
 801919a:	60ba      	str	r2, [r7, #8]
 801919c:	607b      	str	r3, [r7, #4]
 801919e:	4603      	mov	r3, r0
 80191a0:	73fb      	strb	r3, [r7, #15]
 80191a2:	460b      	mov	r3, r1
 80191a4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80191a6:	2300      	movs	r3, #0
 80191a8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80191aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191ae:	2b07      	cmp	r3, #7
 80191b0:	bfa8      	it	ge
 80191b2:	2307      	movge	r3, #7
 80191b4:	b25a      	sxtb	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191c0:	491e      	ldr	r1, [pc, #120]	; (801923c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7ff fb88 	bl	80188d8 <RegionCommonGetBandwidth>
 80191c8:	4603      	mov	r3, r0
 80191ca:	b2da      	uxtb	r2, r3
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191d6:	2b07      	cmp	r3, #7
 80191d8:	d10a      	bne.n	80191f0 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191e0:	461a      	mov	r2, r3
 80191e2:	4b17      	ldr	r3, [pc, #92]	; (8019240 <RegionEU868ComputeRxWindowParameters+0xac>)
 80191e4:	5c9b      	ldrb	r3, [r3, r2]
 80191e6:	4618      	mov	r0, r3
 80191e8:	f7ff f90a 	bl	8018400 <RegionCommonComputeSymbolTimeFsk>
 80191ec:	6178      	str	r0, [r7, #20]
 80191ee:	e011      	b.n	8019214 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191f6:	461a      	mov	r2, r3
 80191f8:	4b11      	ldr	r3, [pc, #68]	; (8019240 <RegionEU868ComputeRxWindowParameters+0xac>)
 80191fa:	5c9a      	ldrb	r2, [r3, r2]
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019202:	4619      	mov	r1, r3
 8019204:	4b0d      	ldr	r3, [pc, #52]	; (801923c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801920a:	4619      	mov	r1, r3
 801920c:	4610      	mov	r0, r2
 801920e:	f7ff f8e1 	bl	80183d4 <RegionCommonComputeSymbolTimeLoRa>
 8019212:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019214:	4b0b      	ldr	r3, [pc, #44]	; (8019244 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8019216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019218:	4798      	blx	r3
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	3308      	adds	r3, #8
 801921e:	687a      	ldr	r2, [r7, #4]
 8019220:	320c      	adds	r2, #12
 8019222:	7bb9      	ldrb	r1, [r7, #14]
 8019224:	9201      	str	r2, [sp, #4]
 8019226:	9300      	str	r3, [sp, #0]
 8019228:	4603      	mov	r3, r0
 801922a:	68ba      	ldr	r2, [r7, #8]
 801922c:	6978      	ldr	r0, [r7, #20]
 801922e:	f7ff f8f7 	bl	8018420 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8019232:	bf00      	nop
 8019234:	3718      	adds	r7, #24
 8019236:	46bd      	mov	sp, r7
 8019238:	bd80      	pop	{r7, pc}
 801923a:	bf00      	nop
 801923c:	0801f9e4 	.word	0x0801f9e4
 8019240:	0801f9dc 	.word	0x0801f9dc
 8019244:	0801fa14 	.word	0x0801fa14

08019248 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019248:	b5b0      	push	{r4, r5, r7, lr}
 801924a:	b090      	sub	sp, #64	; 0x40
 801924c:	af0a      	add	r7, sp, #40	; 0x28
 801924e:	6078      	str	r0, [r7, #4]
 8019250:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	785b      	ldrb	r3, [r3, #1]
 8019256:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019258:	2300      	movs	r3, #0
 801925a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801925c:	2300      	movs	r3, #0
 801925e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	685b      	ldr	r3, [r3, #4]
 8019264:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019266:	4b5a      	ldr	r3, [pc, #360]	; (80193d0 <RegionEU868RxConfig+0x188>)
 8019268:	685b      	ldr	r3, [r3, #4]
 801926a:	4798      	blx	r3
 801926c:	4603      	mov	r3, r0
 801926e:	2b00      	cmp	r3, #0
 8019270:	d001      	beq.n	8019276 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8019272:	2300      	movs	r3, #0
 8019274:	e0a8      	b.n	80193c8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	7cdb      	ldrb	r3, [r3, #19]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d126      	bne.n	80192cc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801927e:	4b55      	ldr	r3, [pc, #340]	; (80193d4 <RegionEU868RxConfig+0x18c>)
 8019280:	681a      	ldr	r2, [r3, #0]
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	4619      	mov	r1, r3
 8019288:	460b      	mov	r3, r1
 801928a:	005b      	lsls	r3, r3, #1
 801928c:	440b      	add	r3, r1
 801928e:	009b      	lsls	r3, r3, #2
 8019290:	4413      	add	r3, r2
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019296:	4b4f      	ldr	r3, [pc, #316]	; (80193d4 <RegionEU868RxConfig+0x18c>)
 8019298:	681a      	ldr	r2, [r3, #0]
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	4619      	mov	r1, r3
 80192a0:	460b      	mov	r3, r1
 80192a2:	005b      	lsls	r3, r3, #1
 80192a4:	440b      	add	r3, r1
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	4413      	add	r3, r2
 80192aa:	3304      	adds	r3, #4
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d00c      	beq.n	80192cc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80192b2:	4b48      	ldr	r3, [pc, #288]	; (80193d4 <RegionEU868RxConfig+0x18c>)
 80192b4:	681a      	ldr	r2, [r3, #0]
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	4619      	mov	r1, r3
 80192bc:	460b      	mov	r3, r1
 80192be:	005b      	lsls	r3, r3, #1
 80192c0:	440b      	add	r3, r1
 80192c2:	009b      	lsls	r3, r3, #2
 80192c4:	4413      	add	r3, r2
 80192c6:	3304      	adds	r3, #4
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80192cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192d0:	4a41      	ldr	r2, [pc, #260]	; (80193d8 <RegionEU868RxConfig+0x190>)
 80192d2:	5cd3      	ldrb	r3, [r2, r3]
 80192d4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80192d6:	4b3e      	ldr	r3, [pc, #248]	; (80193d0 <RegionEU868RxConfig+0x188>)
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	6938      	ldr	r0, [r7, #16]
 80192dc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80192de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192e2:	2b07      	cmp	r3, #7
 80192e4:	d128      	bne.n	8019338 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80192e6:	2300      	movs	r3, #0
 80192e8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80192ea:	4b39      	ldr	r3, [pc, #228]	; (80193d0 <RegionEU868RxConfig+0x188>)
 80192ec:	699c      	ldr	r4, [r3, #24]
 80192ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80192f6:	fb02 f303 	mul.w	r3, r2, r3
 80192fa:	4619      	mov	r1, r3
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	689b      	ldr	r3, [r3, #8]
 8019300:	b29b      	uxth	r3, r3
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	7c92      	ldrb	r2, [r2, #18]
 8019306:	7df8      	ldrb	r0, [r7, #23]
 8019308:	9209      	str	r2, [sp, #36]	; 0x24
 801930a:	2200      	movs	r2, #0
 801930c:	9208      	str	r2, [sp, #32]
 801930e:	2200      	movs	r2, #0
 8019310:	9207      	str	r2, [sp, #28]
 8019312:	2200      	movs	r2, #0
 8019314:	9206      	str	r2, [sp, #24]
 8019316:	2201      	movs	r2, #1
 8019318:	9205      	str	r2, [sp, #20]
 801931a:	2200      	movs	r2, #0
 801931c:	9204      	str	r2, [sp, #16]
 801931e:	2200      	movs	r2, #0
 8019320:	9203      	str	r2, [sp, #12]
 8019322:	9302      	str	r3, [sp, #8]
 8019324:	2305      	movs	r3, #5
 8019326:	9301      	str	r3, [sp, #4]
 8019328:	4b2c      	ldr	r3, [pc, #176]	; (80193dc <RegionEU868RxConfig+0x194>)
 801932a:	9300      	str	r3, [sp, #0]
 801932c:	2300      	movs	r3, #0
 801932e:	460a      	mov	r2, r1
 8019330:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019334:	47a0      	blx	r4
 8019336:	e024      	b.n	8019382 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019338:	2301      	movs	r3, #1
 801933a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801933c:	4b24      	ldr	r3, [pc, #144]	; (80193d0 <RegionEU868RxConfig+0x188>)
 801933e:	699c      	ldr	r4, [r3, #24]
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	789b      	ldrb	r3, [r3, #2]
 8019344:	461d      	mov	r5, r3
 8019346:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	689b      	ldr	r3, [r3, #8]
 801934e:	b29b      	uxth	r3, r3
 8019350:	687a      	ldr	r2, [r7, #4]
 8019352:	7c92      	ldrb	r2, [r2, #18]
 8019354:	7df8      	ldrb	r0, [r7, #23]
 8019356:	9209      	str	r2, [sp, #36]	; 0x24
 8019358:	2201      	movs	r2, #1
 801935a:	9208      	str	r2, [sp, #32]
 801935c:	2200      	movs	r2, #0
 801935e:	9207      	str	r2, [sp, #28]
 8019360:	2200      	movs	r2, #0
 8019362:	9206      	str	r2, [sp, #24]
 8019364:	2200      	movs	r2, #0
 8019366:	9205      	str	r2, [sp, #20]
 8019368:	2200      	movs	r2, #0
 801936a:	9204      	str	r2, [sp, #16]
 801936c:	2200      	movs	r2, #0
 801936e:	9203      	str	r2, [sp, #12]
 8019370:	9302      	str	r3, [sp, #8]
 8019372:	2308      	movs	r3, #8
 8019374:	9301      	str	r3, [sp, #4]
 8019376:	2300      	movs	r3, #0
 8019378:	9300      	str	r3, [sp, #0]
 801937a:	2301      	movs	r3, #1
 801937c:	460a      	mov	r2, r1
 801937e:	4629      	mov	r1, r5
 8019380:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	7c5b      	ldrb	r3, [r3, #17]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d005      	beq.n	8019396 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801938a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801938e:	4a14      	ldr	r2, [pc, #80]	; (80193e0 <RegionEU868RxConfig+0x198>)
 8019390:	5cd3      	ldrb	r3, [r2, r3]
 8019392:	75bb      	strb	r3, [r7, #22]
 8019394:	e004      	b.n	80193a0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8019396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801939a:	4a12      	ldr	r2, [pc, #72]	; (80193e4 <RegionEU868RxConfig+0x19c>)
 801939c:	5cd3      	ldrb	r3, [r2, r3]
 801939e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80193a0:	4b0b      	ldr	r3, [pc, #44]	; (80193d0 <RegionEU868RxConfig+0x188>)
 80193a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80193a4:	7dba      	ldrb	r2, [r7, #22]
 80193a6:	320d      	adds	r2, #13
 80193a8:	b2d1      	uxtb	r1, r2
 80193aa:	7dfa      	ldrb	r2, [r7, #23]
 80193ac:	4610      	mov	r0, r2
 80193ae:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	7cdb      	ldrb	r3, [r3, #19]
 80193b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80193b8:	6939      	ldr	r1, [r7, #16]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7ff faaa 	bl	8018914 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	7bfa      	ldrb	r2, [r7, #15]
 80193c4:	701a      	strb	r2, [r3, #0]
    return true;
 80193c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	3718      	adds	r7, #24
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bdb0      	pop	{r4, r5, r7, pc}
 80193d0:	0801fa14 	.word	0x0801fa14
 80193d4:	20001728 	.word	0x20001728
 80193d8:	0801f9dc 	.word	0x0801f9dc
 80193dc:	00014585 	.word	0x00014585
 80193e0:	0801fa0c 	.word	0x0801fa0c
 80193e4:	0801fa04 	.word	0x0801fa04

080193e8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80193e8:	b590      	push	{r4, r7, lr}
 80193ea:	b093      	sub	sp, #76	; 0x4c
 80193ec:	af0a      	add	r7, sp, #40	; 0x28
 80193ee:	60f8      	str	r0, [r7, #12]
 80193f0:	60b9      	str	r1, [r7, #8]
 80193f2:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193fa:	461a      	mov	r2, r3
 80193fc:	4b5d      	ldr	r3, [pc, #372]	; (8019574 <RegionEU868TxConfig+0x18c>)
 80193fe:	5c9b      	ldrb	r3, [r3, r2]
 8019400:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019408:	4b5b      	ldr	r3, [pc, #364]	; (8019578 <RegionEU868TxConfig+0x190>)
 801940a:	681a      	ldr	r2, [r3, #0]
 801940c:	4b5b      	ldr	r3, [pc, #364]	; (801957c <RegionEU868TxConfig+0x194>)
 801940e:	6819      	ldr	r1, [r3, #0]
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	781b      	ldrb	r3, [r3, #0]
 8019414:	461c      	mov	r4, r3
 8019416:	4623      	mov	r3, r4
 8019418:	005b      	lsls	r3, r3, #1
 801941a:	4423      	add	r3, r4
 801941c:	009b      	lsls	r3, r3, #2
 801941e:	440b      	add	r3, r1
 8019420:	3309      	adds	r3, #9
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	4619      	mov	r1, r3
 8019426:	460b      	mov	r3, r1
 8019428:	005b      	lsls	r3, r3, #1
 801942a:	440b      	add	r3, r1
 801942c:	00db      	lsls	r3, r3, #3
 801942e:	4413      	add	r3, r2
 8019430:	3302      	adds	r3, #2
 8019432:	f993 3000 	ldrsb.w	r3, [r3]
 8019436:	4619      	mov	r1, r3
 8019438:	f7ff fa39 	bl	80188ae <RegionCommonLimitTxPower>
 801943c:	4603      	mov	r3, r0
 801943e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019446:	494e      	ldr	r1, [pc, #312]	; (8019580 <RegionEU868TxConfig+0x198>)
 8019448:	4618      	mov	r0, r3
 801944a:	f7ff fa45 	bl	80188d8 <RegionCommonGetBandwidth>
 801944e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019450:	2300      	movs	r3, #0
 8019452:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	6859      	ldr	r1, [r3, #4]
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	689a      	ldr	r2, [r3, #8]
 801945c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019460:	4618      	mov	r0, r3
 8019462:	f7ff f895 	bl	8018590 <RegionCommonComputeTxPower>
 8019466:	4603      	mov	r3, r0
 8019468:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801946a:	4b46      	ldr	r3, [pc, #280]	; (8019584 <RegionEU868TxConfig+0x19c>)
 801946c:	68da      	ldr	r2, [r3, #12]
 801946e:	4b43      	ldr	r3, [pc, #268]	; (801957c <RegionEU868TxConfig+0x194>)
 8019470:	6819      	ldr	r1, [r3, #0]
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	781b      	ldrb	r3, [r3, #0]
 8019476:	4618      	mov	r0, r3
 8019478:	4603      	mov	r3, r0
 801947a:	005b      	lsls	r3, r3, #1
 801947c:	4403      	add	r3, r0
 801947e:	009b      	lsls	r3, r3, #2
 8019480:	440b      	add	r3, r1
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	4618      	mov	r0, r3
 8019486:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801948e:	2b07      	cmp	r3, #7
 8019490:	d124      	bne.n	80194dc <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019492:	2300      	movs	r3, #0
 8019494:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019496:	4b3b      	ldr	r3, [pc, #236]	; (8019584 <RegionEU868TxConfig+0x19c>)
 8019498:	69dc      	ldr	r4, [r3, #28]
 801949a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801949e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80194a2:	fb02 f303 	mul.w	r3, r2, r3
 80194a6:	461a      	mov	r2, r3
 80194a8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194ac:	7ff8      	ldrb	r0, [r7, #31]
 80194ae:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80194b2:	9308      	str	r3, [sp, #32]
 80194b4:	2300      	movs	r3, #0
 80194b6:	9307      	str	r3, [sp, #28]
 80194b8:	2300      	movs	r3, #0
 80194ba:	9306      	str	r3, [sp, #24]
 80194bc:	2300      	movs	r3, #0
 80194be:	9305      	str	r3, [sp, #20]
 80194c0:	2301      	movs	r3, #1
 80194c2:	9304      	str	r3, [sp, #16]
 80194c4:	2300      	movs	r3, #0
 80194c6:	9303      	str	r3, [sp, #12]
 80194c8:	2305      	movs	r3, #5
 80194ca:	9302      	str	r3, [sp, #8]
 80194cc:	2300      	movs	r3, #0
 80194ce:	9301      	str	r3, [sp, #4]
 80194d0:	9200      	str	r2, [sp, #0]
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80194d8:	47a0      	blx	r4
 80194da:	e01d      	b.n	8019518 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80194dc:	2301      	movs	r3, #1
 80194de:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80194e0:	4b28      	ldr	r3, [pc, #160]	; (8019584 <RegionEU868TxConfig+0x19c>)
 80194e2:	69dc      	ldr	r4, [r3, #28]
 80194e4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80194e8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194ec:	7ff8      	ldrb	r0, [r7, #31]
 80194ee:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80194f2:	9208      	str	r2, [sp, #32]
 80194f4:	2200      	movs	r2, #0
 80194f6:	9207      	str	r2, [sp, #28]
 80194f8:	2200      	movs	r2, #0
 80194fa:	9206      	str	r2, [sp, #24]
 80194fc:	2200      	movs	r2, #0
 80194fe:	9205      	str	r2, [sp, #20]
 8019500:	2201      	movs	r2, #1
 8019502:	9204      	str	r2, [sp, #16]
 8019504:	2200      	movs	r2, #0
 8019506:	9203      	str	r2, [sp, #12]
 8019508:	2208      	movs	r2, #8
 801950a:	9202      	str	r2, [sp, #8]
 801950c:	2201      	movs	r2, #1
 801950e:	9201      	str	r2, [sp, #4]
 8019510:	9300      	str	r3, [sp, #0]
 8019512:	69bb      	ldr	r3, [r7, #24]
 8019514:	2200      	movs	r2, #0
 8019516:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019518:	4b18      	ldr	r3, [pc, #96]	; (801957c <RegionEU868TxConfig+0x194>)
 801951a:	681a      	ldr	r2, [r3, #0]
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	781b      	ldrb	r3, [r3, #0]
 8019520:	4619      	mov	r1, r3
 8019522:	460b      	mov	r3, r1
 8019524:	005b      	lsls	r3, r3, #1
 8019526:	440b      	add	r3, r1
 8019528:	009b      	lsls	r3, r3, #2
 801952a:	4413      	add	r3, r2
 801952c:	681a      	ldr	r2, [r3, #0]
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019534:	4619      	mov	r1, r3
 8019536:	4610      	mov	r0, r2
 8019538:	f7ff fa1e 	bl	8018978 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	899b      	ldrh	r3, [r3, #12]
 8019546:	4619      	mov	r1, r3
 8019548:	4610      	mov	r0, r2
 801954a:	f7ff faa3 	bl	8018a94 <GetTimeOnAir>
 801954e:	4602      	mov	r2, r0
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019554:	4b0b      	ldr	r3, [pc, #44]	; (8019584 <RegionEU868TxConfig+0x19c>)
 8019556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019558:	68fa      	ldr	r2, [r7, #12]
 801955a:	8992      	ldrh	r2, [r2, #12]
 801955c:	b2d1      	uxtb	r1, r2
 801955e:	7ffa      	ldrb	r2, [r7, #31]
 8019560:	4610      	mov	r0, r2
 8019562:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	7f7a      	ldrb	r2, [r7, #29]
 8019568:	701a      	strb	r2, [r3, #0]
    return true;
 801956a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801956c:	4618      	mov	r0, r3
 801956e:	3724      	adds	r7, #36	; 0x24
 8019570:	46bd      	mov	sp, r7
 8019572:	bd90      	pop	{r4, r7, pc}
 8019574:	0801f9dc 	.word	0x0801f9dc
 8019578:	20001724 	.word	0x20001724
 801957c:	20001728 	.word	0x20001728
 8019580:	0801f9e4 	.word	0x0801f9e4
 8019584:	0801fa14 	.word	0x0801fa14

08019588 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019588:	b590      	push	{r4, r7, lr}
 801958a:	b093      	sub	sp, #76	; 0x4c
 801958c:	af00      	add	r7, sp, #0
 801958e:	60f8      	str	r0, [r7, #12]
 8019590:	60b9      	str	r1, [r7, #8]
 8019592:	607a      	str	r2, [r7, #4]
 8019594:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019596:	2307      	movs	r3, #7
 8019598:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801959c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80195a0:	2200      	movs	r2, #0
 80195a2:	601a      	str	r2, [r3, #0]
 80195a4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80195a6:	2300      	movs	r3, #0
 80195a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80195ac:	2300      	movs	r3, #0
 80195ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80195b2:	2300      	movs	r3, #0
 80195b4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195b6:	e085      	b.n	80196c4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	685a      	ldr	r2, [r3, #4]
 80195bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80195c0:	4413      	add	r3, r2
 80195c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80195c6:	4611      	mov	r1, r2
 80195c8:	4618      	mov	r0, r3
 80195ca:	f7fe fe29 	bl	8018220 <RegionCommonParseLinkAdrReq>
 80195ce:	4603      	mov	r3, r0
 80195d0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80195d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d07b      	beq.n	80196d4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80195dc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80195e0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195e4:	4413      	add	r3, r2
 80195e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80195ea:	2307      	movs	r3, #7
 80195ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80195f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195f4:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80195f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d109      	bne.n	8019612 <RegionEU868LinkAdrReq+0x8a>
 80195fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019600:	2b00      	cmp	r3, #0
 8019602:	d106      	bne.n	8019612 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019604:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019608:	f023 0301 	bic.w	r3, r3, #1
 801960c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019610:	e058      	b.n	80196c4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019616:	2b00      	cmp	r3, #0
 8019618:	d003      	beq.n	8019622 <RegionEU868LinkAdrReq+0x9a>
 801961a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801961e:	2b05      	cmp	r3, #5
 8019620:	d903      	bls.n	801962a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019626:	2b06      	cmp	r3, #6
 8019628:	d906      	bls.n	8019638 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801962a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801962e:	f023 0301 	bic.w	r3, r3, #1
 8019632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019636:	e045      	b.n	80196c4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019638:	2300      	movs	r3, #0
 801963a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801963e:	e03d      	b.n	80196bc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019640:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019644:	2b06      	cmp	r3, #6
 8019646:	d118      	bne.n	801967a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019648:	4b5f      	ldr	r3, [pc, #380]	; (80197c8 <RegionEU868LinkAdrReq+0x240>)
 801964a:	6819      	ldr	r1, [r3, #0]
 801964c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019650:	4613      	mov	r3, r2
 8019652:	005b      	lsls	r3, r3, #1
 8019654:	4413      	add	r3, r2
 8019656:	009b      	lsls	r3, r3, #2
 8019658:	440b      	add	r3, r1
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d028      	beq.n	80196b2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019660:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019664:	2201      	movs	r2, #1
 8019666:	fa02 f303 	lsl.w	r3, r2, r3
 801966a:	b21a      	sxth	r2, r3
 801966c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801966e:	b21b      	sxth	r3, r3
 8019670:	4313      	orrs	r3, r2
 8019672:	b21b      	sxth	r3, r3
 8019674:	b29b      	uxth	r3, r3
 8019676:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019678:	e01b      	b.n	80196b2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801967a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801967c:	461a      	mov	r2, r3
 801967e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019682:	fa42 f303 	asr.w	r3, r2, r3
 8019686:	f003 0301 	and.w	r3, r3, #1
 801968a:	2b00      	cmp	r3, #0
 801968c:	d011      	beq.n	80196b2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801968e:	4b4e      	ldr	r3, [pc, #312]	; (80197c8 <RegionEU868LinkAdrReq+0x240>)
 8019690:	6819      	ldr	r1, [r3, #0]
 8019692:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019696:	4613      	mov	r3, r2
 8019698:	005b      	lsls	r3, r3, #1
 801969a:	4413      	add	r3, r2
 801969c:	009b      	lsls	r3, r3, #2
 801969e:	440b      	add	r3, r1
 80196a0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d105      	bne.n	80196b2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80196a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196aa:	f023 0301 	bic.w	r3, r3, #1
 80196ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80196b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196b6:	3301      	adds	r3, #1
 80196b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80196bc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196c0:	2b0f      	cmp	r3, #15
 80196c2:	d9bd      	bls.n	8019640 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	7a1b      	ldrb	r3, [r3, #8]
 80196c8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80196cc:	429a      	cmp	r2, r3
 80196ce:	f4ff af73 	bcc.w	80195b8 <RegionEU868LinkAdrReq+0x30>
 80196d2:	e000      	b.n	80196d6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80196d4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80196d6:	2302      	movs	r3, #2
 80196d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	7a5b      	ldrb	r3, [r3, #9]
 80196e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80196e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7ff fa23 	bl	8018b34 <RegionEU868GetPhyParam>
 80196ee:	4603      	mov	r3, r0
 80196f0:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80196f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196f6:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	7a9b      	ldrb	r3, [r3, #10]
 80196fc:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80196fe:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019702:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019704:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019708:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801970a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801970e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019716:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801971e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	7b5b      	ldrb	r3, [r3, #13]
 8019724:	b25b      	sxtb	r3, r3
 8019726:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019728:	2310      	movs	r3, #16
 801972a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801972c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019730:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019734:	b25b      	sxtb	r3, r3
 8019736:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801973a:	2307      	movs	r3, #7
 801973c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019740:	4b21      	ldr	r3, [pc, #132]	; (80197c8 <RegionEU868LinkAdrReq+0x240>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019746:	2307      	movs	r3, #7
 8019748:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801974c:	2300      	movs	r3, #0
 801974e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019758:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801975c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019760:	1c9a      	adds	r2, r3, #2
 8019762:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019766:	1c59      	adds	r1, r3, #1
 8019768:	f107 0010 	add.w	r0, r7, #16
 801976c:	4623      	mov	r3, r4
 801976e:	f7fe fda8 	bl	80182c2 <RegionCommonLinkAdrReqVerifyParams>
 8019772:	4603      	mov	r3, r0
 8019774:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801977c:	2b07      	cmp	r3, #7
 801977e:	d10d      	bne.n	801979c <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019780:	4b11      	ldr	r3, [pc, #68]	; (80197c8 <RegionEU868LinkAdrReq+0x240>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019788:	220c      	movs	r2, #12
 801978a:	2100      	movs	r1, #0
 801978c:	4618      	mov	r0, r3
 801978e:	f000 fb83 	bl	8019e98 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019792:	4b0d      	ldr	r3, [pc, #52]	; (80197c8 <RegionEU868LinkAdrReq+0x240>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019798:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801979c:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80197a4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80197ac:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80197b0:	683b      	ldr	r3, [r7, #0]
 80197b2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80197b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80197b6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80197ba:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80197bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80197c0:	4618      	mov	r0, r3
 80197c2:	374c      	adds	r7, #76	; 0x4c
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd90      	pop	{r4, r7, pc}
 80197c8:	20001728 	.word	0x20001728

080197cc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b084      	sub	sp, #16
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80197d4:	2307      	movs	r3, #7
 80197d6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80197d8:	2300      	movs	r3, #0
 80197da:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	685b      	ldr	r3, [r3, #4]
 80197e0:	f107 020e 	add.w	r2, r7, #14
 80197e4:	4611      	mov	r1, r2
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7ff f8de 	bl	80189a8 <VerifyRfFreq>
 80197ec:	4603      	mov	r3, r0
 80197ee:	f083 0301 	eor.w	r3, r3, #1
 80197f2:	b2db      	uxtb	r3, r3
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d003      	beq.n	8019800 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80197f8:	7bfb      	ldrb	r3, [r7, #15]
 80197fa:	f023 0301 	bic.w	r3, r3, #1
 80197fe:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f993 3000 	ldrsb.w	r3, [r3]
 8019806:	2207      	movs	r2, #7
 8019808:	2100      	movs	r1, #0
 801980a:	4618      	mov	r0, r3
 801980c:	f7fe fb47 	bl	8017e9e <RegionCommonValueInRange>
 8019810:	4603      	mov	r3, r0
 8019812:	2b00      	cmp	r3, #0
 8019814:	d103      	bne.n	801981e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019816:	7bfb      	ldrb	r3, [r7, #15]
 8019818:	f023 0302 	bic.w	r3, r3, #2
 801981c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019824:	2205      	movs	r2, #5
 8019826:	2100      	movs	r1, #0
 8019828:	4618      	mov	r0, r3
 801982a:	f7fe fb38 	bl	8017e9e <RegionCommonValueInRange>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d103      	bne.n	801983c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019834:	7bfb      	ldrb	r3, [r7, #15]
 8019836:	f023 0304 	bic.w	r3, r3, #4
 801983a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801983c:	7bfb      	ldrb	r3, [r7, #15]
}
 801983e:	4618      	mov	r0, r3
 8019840:	3710      	adds	r7, #16
 8019842:	46bd      	mov	sp, r7
 8019844:	bd80      	pop	{r7, pc}
	...

08019848 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b086      	sub	sp, #24
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019850:	2303      	movs	r3, #3
 8019852:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d114      	bne.n	8019888 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019864:	b2db      	uxtb	r3, r3
 8019866:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019868:	f107 0308 	add.w	r3, r7, #8
 801986c:	4618      	mov	r0, r3
 801986e:	f000 f9ff 	bl	8019c70 <RegionEU868ChannelsRemove>
 8019872:	4603      	mov	r3, r0
 8019874:	f083 0301 	eor.w	r3, r3, #1
 8019878:	b2db      	uxtb	r3, r3
 801987a:	2b00      	cmp	r3, #0
 801987c:	d03b      	beq.n	80198f6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801987e:	7dfb      	ldrb	r3, [r7, #23]
 8019880:	f023 0303 	bic.w	r3, r3, #3
 8019884:	75fb      	strb	r3, [r7, #23]
 8019886:	e036      	b.n	80198f6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019894:	b2db      	uxtb	r3, r3
 8019896:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019898:	f107 030c 	add.w	r3, r7, #12
 801989c:	4618      	mov	r0, r3
 801989e:	f000 f945 	bl	8019b2c <RegionEU868ChannelAdd>
 80198a2:	4603      	mov	r3, r0
 80198a4:	2b06      	cmp	r3, #6
 80198a6:	d820      	bhi.n	80198ea <RegionEU868NewChannelReq+0xa2>
 80198a8:	a201      	add	r2, pc, #4	; (adr r2, 80198b0 <RegionEU868NewChannelReq+0x68>)
 80198aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198ae:	bf00      	nop
 80198b0:	080198f5 	.word	0x080198f5
 80198b4:	080198eb 	.word	0x080198eb
 80198b8:	080198eb 	.word	0x080198eb
 80198bc:	080198eb 	.word	0x080198eb
 80198c0:	080198cd 	.word	0x080198cd
 80198c4:	080198d7 	.word	0x080198d7
 80198c8:	080198e1 	.word	0x080198e1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80198cc:	7dfb      	ldrb	r3, [r7, #23]
 80198ce:	f023 0301 	bic.w	r3, r3, #1
 80198d2:	75fb      	strb	r3, [r7, #23]
                break;
 80198d4:	e00f      	b.n	80198f6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80198d6:	7dfb      	ldrb	r3, [r7, #23]
 80198d8:	f023 0302 	bic.w	r3, r3, #2
 80198dc:	75fb      	strb	r3, [r7, #23]
                break;
 80198de:	e00a      	b.n	80198f6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80198e0:	7dfb      	ldrb	r3, [r7, #23]
 80198e2:	f023 0303 	bic.w	r3, r3, #3
 80198e6:	75fb      	strb	r3, [r7, #23]
                break;
 80198e8:	e005      	b.n	80198f6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80198ea:	7dfb      	ldrb	r3, [r7, #23]
 80198ec:	f023 0303 	bic.w	r3, r3, #3
 80198f0:	75fb      	strb	r3, [r7, #23]
                break;
 80198f2:	e000      	b.n	80198f6 <RegionEU868NewChannelReq+0xae>
                break;
 80198f4:	bf00      	nop
            }
        }
    }

    return status;
 80198f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80198fa:	4618      	mov	r0, r3
 80198fc:	3718      	adds	r7, #24
 80198fe:	46bd      	mov	sp, r7
 8019900:	bd80      	pop	{r7, pc}
 8019902:	bf00      	nop

08019904 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019904:	b480      	push	{r7}
 8019906:	b083      	sub	sp, #12
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801990c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019910:	4618      	mov	r0, r3
 8019912:	370c      	adds	r7, #12
 8019914:	46bd      	mov	sp, r7
 8019916:	bc80      	pop	{r7}
 8019918:	4770      	bx	lr
	...

0801991c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b084      	sub	sp, #16
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019924:	2303      	movs	r3, #3
 8019926:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019928:	2300      	movs	r3, #0
 801992a:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	2b0f      	cmp	r3, #15
 8019932:	d901      	bls.n	8019938 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019934:	2300      	movs	r3, #0
 8019936:	e035      	b.n	80199a4 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	685b      	ldr	r3, [r3, #4]
 801993c:	f107 020e 	add.w	r2, r7, #14
 8019940:	4611      	mov	r1, r2
 8019942:	4618      	mov	r0, r3
 8019944:	f7ff f830 	bl	80189a8 <VerifyRfFreq>
 8019948:	4603      	mov	r3, r0
 801994a:	f083 0301 	eor.w	r3, r3, #1
 801994e:	b2db      	uxtb	r3, r3
 8019950:	2b00      	cmp	r3, #0
 8019952:	d003      	beq.n	801995c <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019954:	7bfb      	ldrb	r3, [r7, #15]
 8019956:	f023 0301 	bic.w	r3, r3, #1
 801995a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801995c:	4b13      	ldr	r3, [pc, #76]	; (80199ac <RegionEU868DlChannelReq+0x90>)
 801995e:	681a      	ldr	r2, [r3, #0]
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	781b      	ldrb	r3, [r3, #0]
 8019964:	4619      	mov	r1, r3
 8019966:	460b      	mov	r3, r1
 8019968:	005b      	lsls	r3, r3, #1
 801996a:	440b      	add	r3, r1
 801996c:	009b      	lsls	r3, r3, #2
 801996e:	4413      	add	r3, r2
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d103      	bne.n	801997e <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	f023 0302 	bic.w	r3, r3, #2
 801997c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801997e:	7bfb      	ldrb	r3, [r7, #15]
 8019980:	2b03      	cmp	r3, #3
 8019982:	d10d      	bne.n	80199a0 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019984:	4b09      	ldr	r3, [pc, #36]	; (80199ac <RegionEU868DlChannelReq+0x90>)
 8019986:	6819      	ldr	r1, [r3, #0]
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	781b      	ldrb	r3, [r3, #0]
 801998c:	4618      	mov	r0, r3
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	685a      	ldr	r2, [r3, #4]
 8019992:	4603      	mov	r3, r0
 8019994:	005b      	lsls	r3, r3, #1
 8019996:	4403      	add	r3, r0
 8019998:	009b      	lsls	r3, r3, #2
 801999a:	440b      	add	r3, r1
 801999c:	3304      	adds	r3, #4
 801999e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80199a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	3710      	adds	r7, #16
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	20001728 	.word	0x20001728

080199b0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80199b0:	b480      	push	{r7}
 80199b2:	b083      	sub	sp, #12
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	4603      	mov	r3, r0
 80199b8:	460a      	mov	r2, r1
 80199ba:	71fb      	strb	r3, [r7, #7]
 80199bc:	4613      	mov	r3, r2
 80199be:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80199c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	370c      	adds	r7, #12
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bc80      	pop	{r7}
 80199cc:	4770      	bx	lr
	...

080199d0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b09a      	sub	sp, #104	; 0x68
 80199d4:	af02      	add	r7, sp, #8
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	60b9      	str	r1, [r7, #8]
 80199da:	607a      	str	r2, [r7, #4]
 80199dc:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80199de:	2300      	movs	r3, #0
 80199e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80199e4:	2300      	movs	r3, #0
 80199e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80199ea:	2300      	movs	r3, #0
 80199ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80199ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80199f2:	2200      	movs	r2, #0
 80199f4:	601a      	str	r2, [r3, #0]
 80199f6:	605a      	str	r2, [r3, #4]
 80199f8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80199fa:	230c      	movs	r3, #12
 80199fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019a00:	2307      	movs	r3, #7
 8019a02:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019a04:	4b47      	ldr	r3, [pc, #284]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a0c:	2201      	movs	r2, #1
 8019a0e:	2100      	movs	r1, #0
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7fe fa95 	bl	8017f40 <RegionCommonCountChannels>
 8019a16:	4603      	mov	r3, r0
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d10a      	bne.n	8019a32 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019a1c:	4b41      	ldr	r3, [pc, #260]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019a24:	4b3f      	ldr	r3, [pc, #252]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	f042 0207 	orr.w	r2, r2, #7
 8019a2c:	b292      	uxth	r2, r2
 8019a2e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	7a5b      	ldrb	r3, [r3, #9]
 8019a36:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019a42:	4b38      	ldr	r3, [pc, #224]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a4a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019a4c:	4b35      	ldr	r3, [pc, #212]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019a52:	4b35      	ldr	r3, [pc, #212]	; (8019b28 <RegionEU868NextChannel+0x158>)
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019a58:	2310      	movs	r3, #16
 8019a5a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019a5c:	f107 0312 	add.w	r3, r7, #18
 8019a60:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	7a9b      	ldrb	r3, [r3, #10]
 8019a72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019a76:	2306      	movs	r3, #6
 8019a78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019a7c:	68fa      	ldr	r2, [r7, #12]
 8019a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019a82:	320c      	adds	r2, #12
 8019a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a88:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	7d1b      	ldrb	r3, [r3, #20]
 8019a90:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	8adb      	ldrh	r3, [r3, #22]
 8019a9e:	4619      	mov	r1, r3
 8019aa0:	4610      	mov	r0, r2
 8019aa2:	f7fe fff7 	bl	8018a94 <GetTimeOnAir>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019aaa:	f107 0314 	add.w	r3, r7, #20
 8019aae:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019ab0:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019ab4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019ab8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	9301      	str	r3, [sp, #4]
 8019ac0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019ac4:	9300      	str	r3, [sp, #0]
 8019ac6:	460b      	mov	r3, r1
 8019ac8:	6839      	ldr	r1, [r7, #0]
 8019aca:	f7fe fe50 	bl	801876e <RegionCommonIdentifyChannels>
 8019ace:	4603      	mov	r3, r0
 8019ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d10e      	bne.n	8019afa <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019adc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019ae0:	3b01      	subs	r3, #1
 8019ae2:	4619      	mov	r1, r3
 8019ae4:	2000      	movs	r0, #0
 8019ae6:	f000 f985 	bl	8019df4 <randr>
 8019aea:	4603      	mov	r3, r0
 8019aec:	3360      	adds	r3, #96	; 0x60
 8019aee:	443b      	add	r3, r7
 8019af0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	701a      	strb	r2, [r3, #0]
 8019af8:	e00e      	b.n	8019b18 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019afe:	2b0c      	cmp	r3, #12
 8019b00:	d10a      	bne.n	8019b18 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019b02:	4b08      	ldr	r3, [pc, #32]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019b0a:	4b06      	ldr	r3, [pc, #24]	; (8019b24 <RegionEU868NextChannel+0x154>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	f042 0207 	orr.w	r2, r2, #7
 8019b12:	b292      	uxth	r2, r2
 8019b14:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3760      	adds	r7, #96	; 0x60
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	20001728 	.word	0x20001728
 8019b28:	20001724 	.word	0x20001724

08019b2c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b084      	sub	sp, #16
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019b34:	2300      	movs	r3, #0
 8019b36:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	791b      	ldrb	r3, [r3, #4]
 8019b44:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019b46:	7b7b      	ldrb	r3, [r7, #13]
 8019b48:	2b02      	cmp	r3, #2
 8019b4a:	d801      	bhi.n	8019b50 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b4c:	2306      	movs	r3, #6
 8019b4e:	e089      	b.n	8019c64 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019b50:	7b7b      	ldrb	r3, [r7, #13]
 8019b52:	2b0f      	cmp	r3, #15
 8019b54:	d901      	bls.n	8019b5a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b56:	2303      	movs	r3, #3
 8019b58:	e084      	b.n	8019c64 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	7a1b      	ldrb	r3, [r3, #8]
 8019b60:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b64:	b25b      	sxtb	r3, r3
 8019b66:	2207      	movs	r2, #7
 8019b68:	2100      	movs	r1, #0
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	f7fe f997 	bl	8017e9e <RegionCommonValueInRange>
 8019b70:	4603      	mov	r3, r0
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d101      	bne.n	8019b7a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019b76:	2301      	movs	r3, #1
 8019b78:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	7a1b      	ldrb	r3, [r3, #8]
 8019b80:	f343 1303 	sbfx	r3, r3, #4, #4
 8019b84:	b25b      	sxtb	r3, r3
 8019b86:	2207      	movs	r2, #7
 8019b88:	2100      	movs	r1, #0
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7fe f987 	bl	8017e9e <RegionCommonValueInRange>
 8019b90:	4603      	mov	r3, r0
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d101      	bne.n	8019b9a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019b96:	2301      	movs	r3, #1
 8019b98:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	7a1b      	ldrb	r3, [r3, #8]
 8019ba0:	f343 0303 	sbfx	r3, r3, #0, #4
 8019ba4:	b25a      	sxtb	r2, r3
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	7a1b      	ldrb	r3, [r3, #8]
 8019bac:	f343 1303 	sbfx	r3, r3, #4, #4
 8019bb0:	b25b      	sxtb	r3, r3
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	dd01      	ble.n	8019bba <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019bba:	7bbb      	ldrb	r3, [r7, #14]
 8019bbc:	f083 0301 	eor.w	r3, r3, #1
 8019bc0:	b2db      	uxtb	r3, r3
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d010      	beq.n	8019be8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	f107 020c 	add.w	r2, r7, #12
 8019bd0:	4611      	mov	r1, r2
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f7fe fee8 	bl	80189a8 <VerifyRfFreq>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	f083 0301 	eor.w	r3, r3, #1
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d001      	beq.n	8019be8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019be4:	2301      	movs	r3, #1
 8019be6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019be8:	7bfb      	ldrb	r3, [r7, #15]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d004      	beq.n	8019bf8 <RegionEU868ChannelAdd+0xcc>
 8019bee:	7bbb      	ldrb	r3, [r7, #14]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d001      	beq.n	8019bf8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019bf4:	2306      	movs	r3, #6
 8019bf6:	e035      	b.n	8019c64 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019bf8:	7bfb      	ldrb	r3, [r7, #15]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d001      	beq.n	8019c02 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019bfe:	2305      	movs	r3, #5
 8019c00:	e030      	b.n	8019c64 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019c02:	7bbb      	ldrb	r3, [r7, #14]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d001      	beq.n	8019c0c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019c08:	2304      	movs	r3, #4
 8019c0a:	e02b      	b.n	8019c64 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019c0c:	4b17      	ldr	r3, [pc, #92]	; (8019c6c <RegionEU868ChannelAdd+0x140>)
 8019c0e:	6819      	ldr	r1, [r3, #0]
 8019c10:	7b7a      	ldrb	r2, [r7, #13]
 8019c12:	4613      	mov	r3, r2
 8019c14:	005b      	lsls	r3, r3, #1
 8019c16:	4413      	add	r3, r2
 8019c18:	009b      	lsls	r3, r3, #2
 8019c1a:	18c8      	adds	r0, r1, r3
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	220c      	movs	r2, #12
 8019c22:	4619      	mov	r1, r3
 8019c24:	f000 f8fd 	bl	8019e22 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019c28:	4b10      	ldr	r3, [pc, #64]	; (8019c6c <RegionEU868ChannelAdd+0x140>)
 8019c2a:	6819      	ldr	r1, [r3, #0]
 8019c2c:	7b7a      	ldrb	r2, [r7, #13]
 8019c2e:	7b38      	ldrb	r0, [r7, #12]
 8019c30:	4613      	mov	r3, r2
 8019c32:	005b      	lsls	r3, r3, #1
 8019c34:	4413      	add	r3, r2
 8019c36:	009b      	lsls	r3, r3, #2
 8019c38:	440b      	add	r3, r1
 8019c3a:	3309      	adds	r3, #9
 8019c3c:	4602      	mov	r2, r0
 8019c3e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019c40:	4b0a      	ldr	r3, [pc, #40]	; (8019c6c <RegionEU868ChannelAdd+0x140>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019c48:	b21a      	sxth	r2, r3
 8019c4a:	7b7b      	ldrb	r3, [r7, #13]
 8019c4c:	2101      	movs	r1, #1
 8019c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8019c52:	b21b      	sxth	r3, r3
 8019c54:	4313      	orrs	r3, r2
 8019c56:	b21a      	sxth	r2, r3
 8019c58:	4b04      	ldr	r3, [pc, #16]	; (8019c6c <RegionEU868ChannelAdd+0x140>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	b292      	uxth	r2, r2
 8019c5e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019c62:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	3710      	adds	r7, #16
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	20001728 	.word	0x20001728

08019c70 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b086      	sub	sp, #24
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	781b      	ldrb	r3, [r3, #0]
 8019c7c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c7e:	7dfb      	ldrb	r3, [r7, #23]
 8019c80:	2b02      	cmp	r3, #2
 8019c82:	d801      	bhi.n	8019c88 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019c84:	2300      	movs	r3, #0
 8019c86:	e016      	b.n	8019cb6 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019c88:	4b0d      	ldr	r3, [pc, #52]	; (8019cc0 <RegionEU868ChannelsRemove+0x50>)
 8019c8a:	6819      	ldr	r1, [r3, #0]
 8019c8c:	7dfa      	ldrb	r2, [r7, #23]
 8019c8e:	4613      	mov	r3, r2
 8019c90:	005b      	lsls	r3, r3, #1
 8019c92:	4413      	add	r3, r2
 8019c94:	009b      	lsls	r3, r3, #2
 8019c96:	440b      	add	r3, r1
 8019c98:	461a      	mov	r2, r3
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	6013      	str	r3, [r2, #0]
 8019c9e:	6053      	str	r3, [r2, #4]
 8019ca0:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019ca2:	4b07      	ldr	r3, [pc, #28]	; (8019cc0 <RegionEU868ChannelsRemove+0x50>)
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019caa:	7df9      	ldrb	r1, [r7, #23]
 8019cac:	2210      	movs	r2, #16
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f7fe f912 	bl	8017ed8 <RegionCommonChanDisable>
 8019cb4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3718      	adds	r7, #24
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
 8019cbe:	bf00      	nop
 8019cc0:	20001728 	.word	0x20001728

08019cc4 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019cc4:	b590      	push	{r4, r7, lr}
 8019cc6:	b085      	sub	sp, #20
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019cd2:	4b20      	ldr	r3, [pc, #128]	; (8019d54 <RegionEU868SetContinuousWave+0x90>)
 8019cd4:	681a      	ldr	r2, [r3, #0]
 8019cd6:	4b20      	ldr	r3, [pc, #128]	; (8019d58 <RegionEU868SetContinuousWave+0x94>)
 8019cd8:	6819      	ldr	r1, [r3, #0]
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	461c      	mov	r4, r3
 8019ce0:	4623      	mov	r3, r4
 8019ce2:	005b      	lsls	r3, r3, #1
 8019ce4:	4423      	add	r3, r4
 8019ce6:	009b      	lsls	r3, r3, #2
 8019ce8:	440b      	add	r3, r1
 8019cea:	3309      	adds	r3, #9
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	4619      	mov	r1, r3
 8019cf0:	460b      	mov	r3, r1
 8019cf2:	005b      	lsls	r3, r3, #1
 8019cf4:	440b      	add	r3, r1
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	4413      	add	r3, r2
 8019cfa:	3302      	adds	r3, #2
 8019cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8019d00:	4619      	mov	r1, r3
 8019d02:	f7fe fdd4 	bl	80188ae <RegionCommonLimitTxPower>
 8019d06:	4603      	mov	r3, r0
 8019d08:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019d0e:	4b12      	ldr	r3, [pc, #72]	; (8019d58 <RegionEU868SetContinuousWave+0x94>)
 8019d10:	681a      	ldr	r2, [r3, #0]
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	781b      	ldrb	r3, [r3, #0]
 8019d16:	4619      	mov	r1, r3
 8019d18:	460b      	mov	r3, r1
 8019d1a:	005b      	lsls	r3, r3, #1
 8019d1c:	440b      	add	r3, r1
 8019d1e:	009b      	lsls	r3, r3, #2
 8019d20:	4413      	add	r3, r2
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	6859      	ldr	r1, [r3, #4]
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	689a      	ldr	r2, [r3, #8]
 8019d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fe fc2c 	bl	8018590 <RegionCommonComputeTxPower>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019d3c:	4b07      	ldr	r3, [pc, #28]	; (8019d5c <RegionEU868SetContinuousWave+0x98>)
 8019d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d40:	687a      	ldr	r2, [r7, #4]
 8019d42:	8992      	ldrh	r2, [r2, #12]
 8019d44:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019d48:	68b8      	ldr	r0, [r7, #8]
 8019d4a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019d4c:	bf00      	nop
 8019d4e:	3714      	adds	r7, #20
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd90      	pop	{r4, r7, pc}
 8019d54:	20001724 	.word	0x20001724
 8019d58:	20001728 	.word	0x20001728
 8019d5c:	0801fa14 	.word	0x0801fa14

08019d60 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d60:	b480      	push	{r7}
 8019d62:	b085      	sub	sp, #20
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	4603      	mov	r3, r0
 8019d68:	71fb      	strb	r3, [r7, #7]
 8019d6a:	460b      	mov	r3, r1
 8019d6c:	71bb      	strb	r3, [r7, #6]
 8019d6e:	4613      	mov	r3, r2
 8019d70:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019d72:	79ba      	ldrb	r2, [r7, #6]
 8019d74:	797b      	ldrb	r3, [r7, #5]
 8019d76:	1ad3      	subs	r3, r2, r3
 8019d78:	b2db      	uxtb	r3, r3
 8019d7a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	da01      	bge.n	8019d88 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019d84:	2300      	movs	r3, #0
 8019d86:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019d88:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3714      	adds	r7, #20
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bc80      	pop	{r7}
 8019d92:	4770      	bx	lr

08019d94 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019d94:	b480      	push	{r7}
 8019d96:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019d98:	4b0d      	ldr	r3, [pc, #52]	; (8019dd0 <rand1+0x3c>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	4a0d      	ldr	r2, [pc, #52]	; (8019dd4 <rand1+0x40>)
 8019d9e:	fb02 f303 	mul.w	r3, r2, r3
 8019da2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019da6:	3339      	adds	r3, #57	; 0x39
 8019da8:	4a09      	ldr	r2, [pc, #36]	; (8019dd0 <rand1+0x3c>)
 8019daa:	6013      	str	r3, [r2, #0]
 8019dac:	4b08      	ldr	r3, [pc, #32]	; (8019dd0 <rand1+0x3c>)
 8019dae:	681a      	ldr	r2, [r3, #0]
 8019db0:	2303      	movs	r3, #3
 8019db2:	fba3 1302 	umull	r1, r3, r3, r2
 8019db6:	1ad1      	subs	r1, r2, r3
 8019db8:	0849      	lsrs	r1, r1, #1
 8019dba:	440b      	add	r3, r1
 8019dbc:	0f99      	lsrs	r1, r3, #30
 8019dbe:	460b      	mov	r3, r1
 8019dc0:	07db      	lsls	r3, r3, #31
 8019dc2:	1a5b      	subs	r3, r3, r1
 8019dc4:	1ad1      	subs	r1, r2, r3
 8019dc6:	460b      	mov	r3, r1
}
 8019dc8:	4618      	mov	r0, r3
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bc80      	pop	{r7}
 8019dce:	4770      	bx	lr
 8019dd0:	20000150 	.word	0x20000150
 8019dd4:	41c64e6d 	.word	0x41c64e6d

08019dd8 <srand1>:

void srand1( uint32_t seed )
{
 8019dd8:	b480      	push	{r7}
 8019dda:	b083      	sub	sp, #12
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
    next = seed;
 8019de0:	4a03      	ldr	r2, [pc, #12]	; (8019df0 <srand1+0x18>)
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	6013      	str	r3, [r2, #0]
}
 8019de6:	bf00      	nop
 8019de8:	370c      	adds	r7, #12
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bc80      	pop	{r7}
 8019dee:	4770      	bx	lr
 8019df0:	20000150 	.word	0x20000150

08019df4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
 8019dfc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019dfe:	f7ff ffc9 	bl	8019d94 <rand1>
 8019e02:	4602      	mov	r2, r0
 8019e04:	6839      	ldr	r1, [r7, #0]
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	1acb      	subs	r3, r1, r3
 8019e0a:	3301      	adds	r3, #1
 8019e0c:	fb92 f1f3 	sdiv	r1, r2, r3
 8019e10:	fb01 f303 	mul.w	r3, r1, r3
 8019e14:	1ad2      	subs	r2, r2, r3
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	4413      	add	r3, r2
}
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	3708      	adds	r7, #8
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}

08019e22 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e22:	b480      	push	{r7}
 8019e24:	b085      	sub	sp, #20
 8019e26:	af00      	add	r7, sp, #0
 8019e28:	60f8      	str	r0, [r7, #12]
 8019e2a:	60b9      	str	r1, [r7, #8]
 8019e2c:	4613      	mov	r3, r2
 8019e2e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019e30:	e007      	b.n	8019e42 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019e32:	68ba      	ldr	r2, [r7, #8]
 8019e34:	1c53      	adds	r3, r2, #1
 8019e36:	60bb      	str	r3, [r7, #8]
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	1c59      	adds	r1, r3, #1
 8019e3c:	60f9      	str	r1, [r7, #12]
 8019e3e:	7812      	ldrb	r2, [r2, #0]
 8019e40:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e42:	88fb      	ldrh	r3, [r7, #6]
 8019e44:	1e5a      	subs	r2, r3, #1
 8019e46:	80fa      	strh	r2, [r7, #6]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d1f2      	bne.n	8019e32 <memcpy1+0x10>
    }
}
 8019e4c:	bf00      	nop
 8019e4e:	bf00      	nop
 8019e50:	3714      	adds	r7, #20
 8019e52:	46bd      	mov	sp, r7
 8019e54:	bc80      	pop	{r7}
 8019e56:	4770      	bx	lr

08019e58 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b085      	sub	sp, #20
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	4613      	mov	r3, r2
 8019e64:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019e66:	88fb      	ldrh	r3, [r7, #6]
 8019e68:	3b01      	subs	r3, #1
 8019e6a:	68fa      	ldr	r2, [r7, #12]
 8019e6c:	4413      	add	r3, r2
 8019e6e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019e70:	e007      	b.n	8019e82 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019e72:	68ba      	ldr	r2, [r7, #8]
 8019e74:	1c53      	adds	r3, r2, #1
 8019e76:	60bb      	str	r3, [r7, #8]
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	1e59      	subs	r1, r3, #1
 8019e7c:	60f9      	str	r1, [r7, #12]
 8019e7e:	7812      	ldrb	r2, [r2, #0]
 8019e80:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e82:	88fb      	ldrh	r3, [r7, #6]
 8019e84:	1e5a      	subs	r2, r3, #1
 8019e86:	80fa      	strh	r2, [r7, #6]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d1f2      	bne.n	8019e72 <memcpyr+0x1a>
    }
}
 8019e8c:	bf00      	nop
 8019e8e:	bf00      	nop
 8019e90:	3714      	adds	r7, #20
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bc80      	pop	{r7}
 8019e96:	4770      	bx	lr

08019e98 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b083      	sub	sp, #12
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
 8019ea0:	460b      	mov	r3, r1
 8019ea2:	70fb      	strb	r3, [r7, #3]
 8019ea4:	4613      	mov	r3, r2
 8019ea6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019ea8:	e004      	b.n	8019eb4 <memset1+0x1c>
    {
        *dst++ = value;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	1c5a      	adds	r2, r3, #1
 8019eae:	607a      	str	r2, [r7, #4]
 8019eb0:	78fa      	ldrb	r2, [r7, #3]
 8019eb2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019eb4:	883b      	ldrh	r3, [r7, #0]
 8019eb6:	1e5a      	subs	r2, r3, #1
 8019eb8:	803a      	strh	r2, [r7, #0]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d1f5      	bne.n	8019eaa <memset1+0x12>
    }
}
 8019ebe:	bf00      	nop
 8019ec0:	bf00      	nop
 8019ec2:	370c      	adds	r7, #12
 8019ec4:	46bd      	mov	sp, r7
 8019ec6:	bc80      	pop	{r7}
 8019ec8:	4770      	bx	lr
	...

08019ecc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019ecc:	b480      	push	{r7}
 8019ece:	b085      	sub	sp, #20
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	460b      	mov	r3, r1
 8019ed6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8019edc:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d101      	bne.n	8019ee8 <Crc32+0x1c>
    {
        return 0;
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	e026      	b.n	8019f36 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019ee8:	2300      	movs	r3, #0
 8019eea:	817b      	strh	r3, [r7, #10]
 8019eec:	e01d      	b.n	8019f2a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019eee:	897b      	ldrh	r3, [r7, #10]
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	4413      	add	r3, r2
 8019ef4:	781b      	ldrb	r3, [r3, #0]
 8019ef6:	461a      	mov	r2, r3
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	4053      	eors	r3, r2
 8019efc:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019efe:	2300      	movs	r3, #0
 8019f00:	813b      	strh	r3, [r7, #8]
 8019f02:	e00c      	b.n	8019f1e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	085a      	lsrs	r2, r3, #1
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	f003 0301 	and.w	r3, r3, #1
 8019f0e:	425b      	negs	r3, r3
 8019f10:	490b      	ldr	r1, [pc, #44]	; (8019f40 <Crc32+0x74>)
 8019f12:	400b      	ands	r3, r1
 8019f14:	4053      	eors	r3, r2
 8019f16:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019f18:	893b      	ldrh	r3, [r7, #8]
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	813b      	strh	r3, [r7, #8]
 8019f1e:	893b      	ldrh	r3, [r7, #8]
 8019f20:	2b07      	cmp	r3, #7
 8019f22:	d9ef      	bls.n	8019f04 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019f24:	897b      	ldrh	r3, [r7, #10]
 8019f26:	3301      	adds	r3, #1
 8019f28:	817b      	strh	r3, [r7, #10]
 8019f2a:	897a      	ldrh	r2, [r7, #10]
 8019f2c:	887b      	ldrh	r3, [r7, #2]
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	d3dd      	bcc.n	8019eee <Crc32+0x22>
        }
    }

    return ~crc;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	43db      	mvns	r3, r3
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	3714      	adds	r7, #20
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bc80      	pop	{r7}
 8019f3e:	4770      	bx	lr
 8019f40:	edb88320 	.word	0xedb88320

08019f44 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b084      	sub	sp, #16
 8019f48:	af02      	add	r7, sp, #8
 8019f4a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019f4c:	4a24      	ldr	r2, [pc, #144]	; (8019fe0 <RadioInit+0x9c>)
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019f52:	4b24      	ldr	r3, [pc, #144]	; (8019fe4 <RadioInit+0xa0>)
 8019f54:	2200      	movs	r2, #0
 8019f56:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019f58:	4b22      	ldr	r3, [pc, #136]	; (8019fe4 <RadioInit+0xa0>)
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019f5e:	4b21      	ldr	r3, [pc, #132]	; (8019fe4 <RadioInit+0xa0>)
 8019f60:	2200      	movs	r2, #0
 8019f62:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f64:	4b1f      	ldr	r3, [pc, #124]	; (8019fe4 <RadioInit+0xa0>)
 8019f66:	2200      	movs	r2, #0
 8019f68:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019f6a:	481f      	ldr	r0, [pc, #124]	; (8019fe8 <RadioInit+0xa4>)
 8019f6c:	f001 ffc2 	bl	801bef4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019f70:	4b1c      	ldr	r3, [pc, #112]	; (8019fe4 <RadioInit+0xa0>)
 8019f72:	2200      	movs	r2, #0
 8019f74:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019f76:	4b1b      	ldr	r3, [pc, #108]	; (8019fe4 <RadioInit+0xa0>)
 8019f78:	2200      	movs	r2, #0
 8019f7a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019f7c:	f002 fa56 	bl	801c42c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019f80:	2100      	movs	r1, #0
 8019f82:	2000      	movs	r0, #0
 8019f84:	f002 fe22 	bl	801cbcc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019f88:	2204      	movs	r2, #4
 8019f8a:	2100      	movs	r1, #0
 8019f8c:	2001      	movs	r0, #1
 8019f8e:	f002 fbdf 	bl	801c750 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019f92:	2300      	movs	r3, #0
 8019f94:	2200      	movs	r2, #0
 8019f96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f9e:	f002 fb0f 	bl	801c5c0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019fa2:	f000 fe99 	bl	801acd8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	9300      	str	r3, [sp, #0]
 8019faa:	4b10      	ldr	r3, [pc, #64]	; (8019fec <RadioInit+0xa8>)
 8019fac:	2200      	movs	r2, #0
 8019fae:	f04f 31ff 	mov.w	r1, #4294967295
 8019fb2:	480f      	ldr	r0, [pc, #60]	; (8019ff0 <RadioInit+0xac>)
 8019fb4:	f004 f82c 	bl	801e010 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019fb8:	2300      	movs	r3, #0
 8019fba:	9300      	str	r3, [sp, #0]
 8019fbc:	4b0d      	ldr	r3, [pc, #52]	; (8019ff4 <RadioInit+0xb0>)
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8019fc4:	480c      	ldr	r0, [pc, #48]	; (8019ff8 <RadioInit+0xb4>)
 8019fc6:	f004 f823 	bl	801e010 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019fca:	4809      	ldr	r0, [pc, #36]	; (8019ff0 <RadioInit+0xac>)
 8019fcc:	f004 f8c4 	bl	801e158 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019fd0:	4809      	ldr	r0, [pc, #36]	; (8019ff8 <RadioInit+0xb4>)
 8019fd2:	f004 f8c1 	bl	801e158 <UTIL_TIMER_Stop>
}
 8019fd6:	bf00      	nop
 8019fd8:	3708      	adds	r7, #8
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
 8019fde:	bf00      	nop
 8019fe0:	2000182c 	.word	0x2000182c
 8019fe4:	20001830 	.word	0x20001830
 8019fe8:	0801b0d1 	.word	0x0801b0d1
 8019fec:	0801b059 	.word	0x0801b059
 8019ff0:	2000188c 	.word	0x2000188c
 8019ff4:	0801b06d 	.word	0x0801b06d
 8019ff8:	200018a4 	.word	0x200018a4

08019ffc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a000:	f001 ffc0 	bl	801bf84 <SUBGRF_GetOperatingMode>
 801a004:	4603      	mov	r3, r0
 801a006:	2b07      	cmp	r3, #7
 801a008:	d00a      	beq.n	801a020 <RadioGetStatus+0x24>
 801a00a:	2b07      	cmp	r3, #7
 801a00c:	dc0a      	bgt.n	801a024 <RadioGetStatus+0x28>
 801a00e:	2b04      	cmp	r3, #4
 801a010:	d002      	beq.n	801a018 <RadioGetStatus+0x1c>
 801a012:	2b05      	cmp	r3, #5
 801a014:	d002      	beq.n	801a01c <RadioGetStatus+0x20>
 801a016:	e005      	b.n	801a024 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a018:	2302      	movs	r3, #2
 801a01a:	e004      	b.n	801a026 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a01c:	2301      	movs	r3, #1
 801a01e:	e002      	b.n	801a026 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a020:	2303      	movs	r3, #3
 801a022:	e000      	b.n	801a026 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a024:	2300      	movs	r3, #0
    }
}
 801a026:	4618      	mov	r0, r3
 801a028:	bd80      	pop	{r7, pc}
	...

0801a02c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b082      	sub	sp, #8
 801a030:	af00      	add	r7, sp, #0
 801a032:	4603      	mov	r3, r0
 801a034:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a036:	4a2a      	ldr	r2, [pc, #168]	; (801a0e0 <RadioSetModem+0xb4>)
 801a038:	79fb      	ldrb	r3, [r7, #7]
 801a03a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a03c:	79fb      	ldrb	r3, [r7, #7]
 801a03e:	4618      	mov	r0, r3
 801a040:	f003 f997 	bl	801d372 <RFW_SetRadioModem>
    switch( modem )
 801a044:	79fb      	ldrb	r3, [r7, #7]
 801a046:	2b05      	cmp	r3, #5
 801a048:	d80e      	bhi.n	801a068 <RadioSetModem+0x3c>
 801a04a:	a201      	add	r2, pc, #4	; (adr r2, 801a050 <RadioSetModem+0x24>)
 801a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a050:	0801a077 	.word	0x0801a077
 801a054:	0801a085 	.word	0x0801a085
 801a058:	0801a069 	.word	0x0801a069
 801a05c:	0801a0ab 	.word	0x0801a0ab
 801a060:	0801a0b9 	.word	0x0801a0b9
 801a064:	0801a0c7 	.word	0x0801a0c7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a068:	2003      	movs	r0, #3
 801a06a:	f002 fb4b 	bl	801c704 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a06e:	4b1c      	ldr	r3, [pc, #112]	; (801a0e0 <RadioSetModem+0xb4>)
 801a070:	2200      	movs	r2, #0
 801a072:	735a      	strb	r2, [r3, #13]
        break;
 801a074:	e02f      	b.n	801a0d6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a076:	2000      	movs	r0, #0
 801a078:	f002 fb44 	bl	801c704 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a07c:	4b18      	ldr	r3, [pc, #96]	; (801a0e0 <RadioSetModem+0xb4>)
 801a07e:	2200      	movs	r2, #0
 801a080:	735a      	strb	r2, [r3, #13]
        break;
 801a082:	e028      	b.n	801a0d6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a084:	2001      	movs	r0, #1
 801a086:	f002 fb3d 	bl	801c704 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a08a:	4b15      	ldr	r3, [pc, #84]	; (801a0e0 <RadioSetModem+0xb4>)
 801a08c:	7b5a      	ldrb	r2, [r3, #13]
 801a08e:	4b14      	ldr	r3, [pc, #80]	; (801a0e0 <RadioSetModem+0xb4>)
 801a090:	7b1b      	ldrb	r3, [r3, #12]
 801a092:	429a      	cmp	r2, r3
 801a094:	d01e      	beq.n	801a0d4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a096:	4b12      	ldr	r3, [pc, #72]	; (801a0e0 <RadioSetModem+0xb4>)
 801a098:	7b1a      	ldrb	r2, [r3, #12]
 801a09a:	4b11      	ldr	r3, [pc, #68]	; (801a0e0 <RadioSetModem+0xb4>)
 801a09c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a09e:	4b10      	ldr	r3, [pc, #64]	; (801a0e0 <RadioSetModem+0xb4>)
 801a0a0:	7b5b      	ldrb	r3, [r3, #13]
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f000 ffa2 	bl	801afec <RadioSetPublicNetwork>
        }
        break;
 801a0a8:	e014      	b.n	801a0d4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a0aa:	2002      	movs	r0, #2
 801a0ac:	f002 fb2a 	bl	801c704 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0b0:	4b0b      	ldr	r3, [pc, #44]	; (801a0e0 <RadioSetModem+0xb4>)
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	735a      	strb	r2, [r3, #13]
        break;
 801a0b6:	e00e      	b.n	801a0d6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a0b8:	2002      	movs	r0, #2
 801a0ba:	f002 fb23 	bl	801c704 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0be:	4b08      	ldr	r3, [pc, #32]	; (801a0e0 <RadioSetModem+0xb4>)
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	735a      	strb	r2, [r3, #13]
        break;
 801a0c4:	e007      	b.n	801a0d6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a0c6:	2000      	movs	r0, #0
 801a0c8:	f002 fb1c 	bl	801c704 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0cc:	4b04      	ldr	r3, [pc, #16]	; (801a0e0 <RadioSetModem+0xb4>)
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	735a      	strb	r2, [r3, #13]
        break;
 801a0d2:	e000      	b.n	801a0d6 <RadioSetModem+0xaa>
        break;
 801a0d4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a0d6:	bf00      	nop
 801a0d8:	3708      	adds	r7, #8
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bd80      	pop	{r7, pc}
 801a0de:	bf00      	nop
 801a0e0:	20001830 	.word	0x20001830

0801a0e4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	b082      	sub	sp, #8
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a0ec:	6878      	ldr	r0, [r7, #4]
 801a0ee:	f002 fac3 	bl	801c678 <SUBGRF_SetRfFrequency>
}
 801a0f2:	bf00      	nop
 801a0f4:	3708      	adds	r7, #8
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bd80      	pop	{r7, pc}

0801a0fa <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a0fa:	b580      	push	{r7, lr}
 801a0fc:	b090      	sub	sp, #64	; 0x40
 801a0fe:	af0a      	add	r7, sp, #40	; 0x28
 801a100:	60f8      	str	r0, [r7, #12]
 801a102:	60b9      	str	r1, [r7, #8]
 801a104:	603b      	str	r3, [r7, #0]
 801a106:	4613      	mov	r3, r2
 801a108:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a10a:	2301      	movs	r3, #1
 801a10c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a10e:	2300      	movs	r3, #0
 801a110:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a112:	2300      	movs	r3, #0
 801a114:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a116:	f000 fdf2 	bl	801acfe <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a11a:	2000      	movs	r0, #0
 801a11c:	f7ff ff86 	bl	801a02c <RadioSetModem>

    RadioSetChannel( freq );
 801a120:	68f8      	ldr	r0, [r7, #12]
 801a122:	f7ff ffdf 	bl	801a0e4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a126:	2301      	movs	r3, #1
 801a128:	9309      	str	r3, [sp, #36]	; 0x24
 801a12a:	2300      	movs	r3, #0
 801a12c:	9308      	str	r3, [sp, #32]
 801a12e:	2300      	movs	r3, #0
 801a130:	9307      	str	r3, [sp, #28]
 801a132:	2300      	movs	r3, #0
 801a134:	9306      	str	r3, [sp, #24]
 801a136:	2300      	movs	r3, #0
 801a138:	9305      	str	r3, [sp, #20]
 801a13a:	2300      	movs	r3, #0
 801a13c:	9304      	str	r3, [sp, #16]
 801a13e:	2300      	movs	r3, #0
 801a140:	9303      	str	r3, [sp, #12]
 801a142:	2300      	movs	r3, #0
 801a144:	9302      	str	r3, [sp, #8]
 801a146:	2303      	movs	r3, #3
 801a148:	9301      	str	r3, [sp, #4]
 801a14a:	68bb      	ldr	r3, [r7, #8]
 801a14c:	9300      	str	r3, [sp, #0]
 801a14e:	2300      	movs	r3, #0
 801a150:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a154:	68b9      	ldr	r1, [r7, #8]
 801a156:	2000      	movs	r0, #0
 801a158:	f000 f83c 	bl	801a1d4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a15c:	2000      	movs	r0, #0
 801a15e:	f000 fdd5 	bl	801ad0c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a162:	f000 ff71 	bl	801b048 <RadioGetWakeupTime>
 801a166:	4603      	mov	r3, r0
 801a168:	4618      	mov	r0, r3
 801a16a:	f7e8 fd7d 	bl	8002c68 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a16e:	f004 f90d 	bl	801e38c <UTIL_TIMER_GetCurrentTime>
 801a172:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a174:	e00d      	b.n	801a192 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a176:	2000      	movs	r0, #0
 801a178:	f000 feb6 	bl	801aee8 <RadioRssi>
 801a17c:	4603      	mov	r3, r0
 801a17e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a180:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a188:	429a      	cmp	r2, r3
 801a18a:	dd02      	ble.n	801a192 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a18c:	2300      	movs	r3, #0
 801a18e:	75fb      	strb	r3, [r7, #23]
            break;
 801a190:	e006      	b.n	801a1a0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a192:	6938      	ldr	r0, [r7, #16]
 801a194:	f004 f90c 	bl	801e3b0 <UTIL_TIMER_GetElapsedTime>
 801a198:	4602      	mov	r2, r0
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	4293      	cmp	r3, r2
 801a19e:	d8ea      	bhi.n	801a176 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a1a0:	f000 fdad 	bl	801acfe <RadioStandby>

    return status;
 801a1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	3718      	adds	r7, #24
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}

0801a1ae <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a1ae:	b580      	push	{r7, lr}
 801a1b0:	b082      	sub	sp, #8
 801a1b2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	2100      	movs	r1, #0
 801a1be:	2000      	movs	r0, #0
 801a1c0:	f002 f9fe 	bl	801c5c0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a1c4:	f001 ffaf 	bl	801c126 <SUBGRF_GetRandom>
 801a1c8:	6078      	str	r0, [r7, #4]

    return rnd;
 801a1ca:	687b      	ldr	r3, [r7, #4]
}
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	3708      	adds	r7, #8
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}

0801a1d4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b08a      	sub	sp, #40	; 0x28
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	60b9      	str	r1, [r7, #8]
 801a1dc:	607a      	str	r2, [r7, #4]
 801a1de:	461a      	mov	r2, r3
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	73fb      	strb	r3, [r7, #15]
 801a1e4:	4613      	mov	r3, r2
 801a1e6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a1e8:	4ab9      	ldr	r2, [pc, #740]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a1ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1ee:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a1f0:	f003 f87d 	bl	801d2ee <RFW_DeInit>
    if( rxContinuous == true )
 801a1f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d001      	beq.n	801a200 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a204:	2b00      	cmp	r3, #0
 801a206:	d004      	beq.n	801a212 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a208:	4ab2      	ldr	r2, [pc, #712]	; (801a4d4 <RadioSetRxConfig+0x300>)
 801a20a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a20e:	7013      	strb	r3, [r2, #0]
 801a210:	e002      	b.n	801a218 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a212:	4bb0      	ldr	r3, [pc, #704]	; (801a4d4 <RadioSetRxConfig+0x300>)
 801a214:	22ff      	movs	r2, #255	; 0xff
 801a216:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a218:	7bfb      	ldrb	r3, [r7, #15]
 801a21a:	2b05      	cmp	r3, #5
 801a21c:	d009      	beq.n	801a232 <RadioSetRxConfig+0x5e>
 801a21e:	2b05      	cmp	r3, #5
 801a220:	f300 81d7 	bgt.w	801a5d2 <RadioSetRxConfig+0x3fe>
 801a224:	2b00      	cmp	r3, #0
 801a226:	f000 80bf 	beq.w	801a3a8 <RadioSetRxConfig+0x1d4>
 801a22a:	2b01      	cmp	r3, #1
 801a22c:	f000 8124 	beq.w	801a478 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a230:	e1cf      	b.n	801a5d2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a232:	2001      	movs	r0, #1
 801a234:	f002 f8bc 	bl	801c3b0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a238:	4ba5      	ldr	r3, [pc, #660]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a23a:	2200      	movs	r2, #0
 801a23c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a240:	4aa3      	ldr	r2, [pc, #652]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a246:	4ba2      	ldr	r3, [pc, #648]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a248:	2209      	movs	r2, #9
 801a24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a24e:	4ba0      	ldr	r3, [pc, #640]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a250:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a254:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a256:	68b8      	ldr	r0, [r7, #8]
 801a258:	f002 ff7c 	bl	801d154 <SUBGRF_GetFskBandwidthRegValue>
 801a25c:	4603      	mov	r3, r0
 801a25e:	461a      	mov	r2, r3
 801a260:	4b9b      	ldr	r3, [pc, #620]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a266:	4b9a      	ldr	r3, [pc, #616]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a268:	2200      	movs	r2, #0
 801a26a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a26c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a26e:	00db      	lsls	r3, r3, #3
 801a270:	b29a      	uxth	r2, r3
 801a272:	4b97      	ldr	r3, [pc, #604]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a274:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a276:	4b96      	ldr	r3, [pc, #600]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a278:	2200      	movs	r2, #0
 801a27a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a27c:	4b94      	ldr	r3, [pc, #592]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a27e:	2210      	movs	r2, #16
 801a280:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a282:	4b93      	ldr	r3, [pc, #588]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a284:	2200      	movs	r2, #0
 801a286:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a288:	4b91      	ldr	r3, [pc, #580]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a28a:	2200      	movs	r2, #0
 801a28c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a28e:	4b91      	ldr	r3, [pc, #580]	; (801a4d4 <RadioSetRxConfig+0x300>)
 801a290:	781a      	ldrb	r2, [r3, #0]
 801a292:	4b8f      	ldr	r3, [pc, #572]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a294:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a296:	4b8e      	ldr	r3, [pc, #568]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a298:	2201      	movs	r2, #1
 801a29a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a29c:	4b8c      	ldr	r3, [pc, #560]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a29e:	2200      	movs	r2, #0
 801a2a0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a2a2:	2005      	movs	r0, #5
 801a2a4:	f7ff fec2 	bl	801a02c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2a8:	488b      	ldr	r0, [pc, #556]	; (801a4d8 <RadioSetRxConfig+0x304>)
 801a2aa:	f002 fb1f 	bl	801c8ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2ae:	488b      	ldr	r0, [pc, #556]	; (801a4dc <RadioSetRxConfig+0x308>)
 801a2b0:	f002 fbee 	bl	801ca90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a2b4:	4a8a      	ldr	r2, [pc, #552]	; (801a4e0 <RadioSetRxConfig+0x30c>)
 801a2b6:	f107 031c 	add.w	r3, r7, #28
 801a2ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a2be:	e883 0003 	stmia.w	r3, {r0, r1}
 801a2c2:	f107 031c 	add.w	r3, r7, #28
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f001 feab 	bl	801c022 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a2cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a2d0:	f001 fef6 	bl	801c0c0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a2d4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2d8:	f000 fe25 	bl	801af26 <RadioRead>
 801a2dc:	4603      	mov	r3, r0
 801a2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2e6:	f023 0310 	bic.w	r3, r3, #16
 801a2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2f8:	f000 fe03 	bl	801af02 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a2fc:	2104      	movs	r1, #4
 801a2fe:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a302:	f000 fdfe 	bl	801af02 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a306:	f640 009b 	movw	r0, #2203	; 0x89b
 801a30a:	f000 fe0c 	bl	801af26 <RadioRead>
 801a30e:	4603      	mov	r3, r0
 801a310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a318:	f023 031c 	bic.w	r3, r3, #28
 801a31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a324:	f043 0308 	orr.w	r3, r3, #8
 801a328:	b2db      	uxtb	r3, r3
 801a32a:	4619      	mov	r1, r3
 801a32c:	f640 009b 	movw	r0, #2203	; 0x89b
 801a330:	f000 fde7 	bl	801af02 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a334:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a338:	f000 fdf5 	bl	801af26 <RadioRead>
 801a33c:	4603      	mov	r3, r0
 801a33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a346:	f023 0318 	bic.w	r3, r3, #24
 801a34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a352:	f043 0318 	orr.w	r3, r3, #24
 801a356:	b2db      	uxtb	r3, r3
 801a358:	4619      	mov	r1, r3
 801a35a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a35e:	f000 fdd0 	bl	801af02 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a362:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a366:	f000 fdde 	bl	801af26 <RadioRead>
 801a36a:	4603      	mov	r3, r0
 801a36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a380:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a384:	b2db      	uxtb	r3, r3
 801a386:	4619      	mov	r1, r3
 801a388:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a38c:	f000 fdb9 	bl	801af02 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a392:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a396:	fb02 f303 	mul.w	r3, r2, r3
 801a39a:	461a      	mov	r2, r3
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3a2:	4a4b      	ldr	r2, [pc, #300]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3a4:	6093      	str	r3, [r2, #8]
            break;
 801a3a6:	e115      	b.n	801a5d4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	f002 f801 	bl	801c3b0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a3ae:	4b48      	ldr	r3, [pc, #288]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a3b6:	4a46      	ldr	r2, [pc, #280]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a3bc:	4b44      	ldr	r3, [pc, #272]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3be:	220b      	movs	r2, #11
 801a3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a3c4:	68b8      	ldr	r0, [r7, #8]
 801a3c6:	f002 fec5 	bl	801d154 <SUBGRF_GetFskBandwidthRegValue>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	461a      	mov	r2, r3
 801a3ce:	4b40      	ldr	r3, [pc, #256]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a3d4:	4b3e      	ldr	r3, [pc, #248]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a3da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a3dc:	00db      	lsls	r3, r3, #3
 801a3de:	b29a      	uxth	r2, r3
 801a3e0:	4b3b      	ldr	r3, [pc, #236]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3e2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a3e4:	4b3a      	ldr	r3, [pc, #232]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3e6:	2204      	movs	r2, #4
 801a3e8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a3ea:	4b39      	ldr	r3, [pc, #228]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3ec:	2218      	movs	r2, #24
 801a3ee:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a3f0:	4b37      	ldr	r3, [pc, #220]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a3f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a3fa:	f083 0301 	eor.w	r3, r3, #1
 801a3fe:	b2db      	uxtb	r3, r3
 801a400:	461a      	mov	r2, r3
 801a402:	4b33      	ldr	r3, [pc, #204]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a404:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a406:	4b33      	ldr	r3, [pc, #204]	; (801a4d4 <RadioSetRxConfig+0x300>)
 801a408:	781a      	ldrb	r2, [r3, #0]
 801a40a:	4b31      	ldr	r3, [pc, #196]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a40c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a40e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a412:	2b00      	cmp	r3, #0
 801a414:	d003      	beq.n	801a41e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a416:	4b2e      	ldr	r3, [pc, #184]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a418:	22f2      	movs	r2, #242	; 0xf2
 801a41a:	75da      	strb	r2, [r3, #23]
 801a41c:	e002      	b.n	801a424 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a41e:	4b2c      	ldr	r3, [pc, #176]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a420:	2201      	movs	r2, #1
 801a422:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a424:	4b2a      	ldr	r3, [pc, #168]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a426:	2201      	movs	r2, #1
 801a428:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a42a:	f000 fc68 	bl	801acfe <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a42e:	2000      	movs	r0, #0
 801a430:	f7ff fdfc 	bl	801a02c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a434:	4828      	ldr	r0, [pc, #160]	; (801a4d8 <RadioSetRxConfig+0x304>)
 801a436:	f002 fa59 	bl	801c8ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a43a:	4828      	ldr	r0, [pc, #160]	; (801a4dc <RadioSetRxConfig+0x308>)
 801a43c:	f002 fb28 	bl	801ca90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a440:	4a28      	ldr	r2, [pc, #160]	; (801a4e4 <RadioSetRxConfig+0x310>)
 801a442:	f107 0314 	add.w	r3, r7, #20
 801a446:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a44a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a44e:	f107 0314 	add.w	r3, r7, #20
 801a452:	4618      	mov	r0, r3
 801a454:	f001 fde5 	bl	801c022 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a458:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a45c:	f001 fe30 	bl	801c0c0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a460:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a462:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a466:	fb02 f303 	mul.w	r3, r2, r3
 801a46a:	461a      	mov	r2, r3
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a472:	4a17      	ldr	r2, [pc, #92]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a474:	6093      	str	r3, [r2, #8]
            break;
 801a476:	e0ad      	b.n	801a5d4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a478:	2000      	movs	r0, #0
 801a47a:	f001 ff99 	bl	801c3b0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a47e:	4b14      	ldr	r3, [pc, #80]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a480:	2201      	movs	r2, #1
 801a482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	b2da      	uxtb	r2, r3
 801a48a:	4b11      	ldr	r3, [pc, #68]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a48c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a490:	4a15      	ldr	r2, [pc, #84]	; (801a4e8 <RadioSetRxConfig+0x314>)
 801a492:	68bb      	ldr	r3, [r7, #8]
 801a494:	4413      	add	r3, r2
 801a496:	781a      	ldrb	r2, [r3, #0]
 801a498:	4b0d      	ldr	r3, [pc, #52]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a49a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a49e:	4a0c      	ldr	r2, [pc, #48]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a4a0:	7bbb      	ldrb	r3, [r7, #14]
 801a4a2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d105      	bne.n	801a4b8 <RadioSetRxConfig+0x2e4>
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	2b0b      	cmp	r3, #11
 801a4b0:	d008      	beq.n	801a4c4 <RadioSetRxConfig+0x2f0>
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	2b0c      	cmp	r3, #12
 801a4b6:	d005      	beq.n	801a4c4 <RadioSetRxConfig+0x2f0>
 801a4b8:	68bb      	ldr	r3, [r7, #8]
 801a4ba:	2b01      	cmp	r3, #1
 801a4bc:	d116      	bne.n	801a4ec <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	2b0c      	cmp	r3, #12
 801a4c2:	d113      	bne.n	801a4ec <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a4c4:	4b02      	ldr	r3, [pc, #8]	; (801a4d0 <RadioSetRxConfig+0x2fc>)
 801a4c6:	2201      	movs	r2, #1
 801a4c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a4cc:	e012      	b.n	801a4f4 <RadioSetRxConfig+0x320>
 801a4ce:	bf00      	nop
 801a4d0:	20001830 	.word	0x20001830
 801a4d4:	20000154 	.word	0x20000154
 801a4d8:	20001868 	.word	0x20001868
 801a4dc:	2000183e 	.word	0x2000183e
 801a4e0:	0801f430 	.word	0x0801f430
 801a4e4:	0801f438 	.word	0x0801f438
 801a4e8:	0801faa0 	.word	0x0801faa0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a4ec:	4b3b      	ldr	r3, [pc, #236]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a4f4:	4b39      	ldr	r3, [pc, #228]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a4f6:	2201      	movs	r2, #1
 801a4f8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4fa:	4b38      	ldr	r3, [pc, #224]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a4fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a500:	2b05      	cmp	r3, #5
 801a502:	d004      	beq.n	801a50e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a504:	4b35      	ldr	r3, [pc, #212]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a50a:	2b06      	cmp	r3, #6
 801a50c:	d10a      	bne.n	801a524 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a50e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a510:	2b0b      	cmp	r3, #11
 801a512:	d803      	bhi.n	801a51c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a514:	4b31      	ldr	r3, [pc, #196]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a516:	220c      	movs	r2, #12
 801a518:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a51a:	e006      	b.n	801a52a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a51c:	4a2f      	ldr	r2, [pc, #188]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a51e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a520:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a522:	e002      	b.n	801a52a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a524:	4a2d      	ldr	r2, [pc, #180]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a526:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a528:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a52a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a52e:	4b2b      	ldr	r3, [pc, #172]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a530:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a532:	4b2b      	ldr	r3, [pc, #172]	; (801a5e0 <RadioSetRxConfig+0x40c>)
 801a534:	781a      	ldrb	r2, [r3, #0]
 801a536:	4b29      	ldr	r3, [pc, #164]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a538:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a53a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a53e:	4b27      	ldr	r3, [pc, #156]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a540:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a544:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a548:	4b24      	ldr	r3, [pc, #144]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a54a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a54e:	f000 fbd6 	bl	801acfe <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a552:	2001      	movs	r0, #1
 801a554:	f7ff fd6a 	bl	801a02c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a558:	4822      	ldr	r0, [pc, #136]	; (801a5e4 <RadioSetRxConfig+0x410>)
 801a55a:	f002 f9c7 	bl	801c8ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a55e:	4822      	ldr	r0, [pc, #136]	; (801a5e8 <RadioSetRxConfig+0x414>)
 801a560:	f002 fa96 	bl	801ca90 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a564:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a566:	b2db      	uxtb	r3, r3
 801a568:	4618      	mov	r0, r3
 801a56a:	f001 ff30 	bl	801c3ce <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a56e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a572:	f002 fbe9 	bl	801cd48 <SUBGRF_ReadRegister>
 801a576:	4603      	mov	r3, r0
 801a578:	f003 0301 	and.w	r3, r3, #1
 801a57c:	b2db      	uxtb	r3, r3
 801a57e:	4619      	mov	r1, r3
 801a580:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a584:	f002 fbcc 	bl	801cd20 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a588:	4b14      	ldr	r3, [pc, #80]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a58a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a58e:	2b01      	cmp	r3, #1
 801a590:	d10d      	bne.n	801a5ae <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a592:	f240 7036 	movw	r0, #1846	; 0x736
 801a596:	f002 fbd7 	bl	801cd48 <SUBGRF_ReadRegister>
 801a59a:	4603      	mov	r3, r0
 801a59c:	f023 0304 	bic.w	r3, r3, #4
 801a5a0:	b2db      	uxtb	r3, r3
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	f240 7036 	movw	r0, #1846	; 0x736
 801a5a8:	f002 fbba 	bl	801cd20 <SUBGRF_WriteRegister>
 801a5ac:	e00c      	b.n	801a5c8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a5ae:	f240 7036 	movw	r0, #1846	; 0x736
 801a5b2:	f002 fbc9 	bl	801cd48 <SUBGRF_ReadRegister>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	f043 0304 	orr.w	r3, r3, #4
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	4619      	mov	r1, r3
 801a5c0:	f240 7036 	movw	r0, #1846	; 0x736
 801a5c4:	f002 fbac 	bl	801cd20 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a5c8:	4b04      	ldr	r3, [pc, #16]	; (801a5dc <RadioSetRxConfig+0x408>)
 801a5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5ce:	609a      	str	r2, [r3, #8]
            break;
 801a5d0:	e000      	b.n	801a5d4 <RadioSetRxConfig+0x400>
            break;
 801a5d2:	bf00      	nop
    }
}
 801a5d4:	bf00      	nop
 801a5d6:	3728      	adds	r7, #40	; 0x28
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}
 801a5dc:	20001830 	.word	0x20001830
 801a5e0:	20000154 	.word	0x20000154
 801a5e4:	20001868 	.word	0x20001868
 801a5e8:	2000183e 	.word	0x2000183e

0801a5ec <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b086      	sub	sp, #24
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	60ba      	str	r2, [r7, #8]
 801a5f4:	607b      	str	r3, [r7, #4]
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	73fb      	strb	r3, [r7, #15]
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a5fe:	f002 fe76 	bl	801d2ee <RFW_DeInit>
    switch( modem )
 801a602:	7bfb      	ldrb	r3, [r7, #15]
 801a604:	2b04      	cmp	r3, #4
 801a606:	f000 80c7 	beq.w	801a798 <RadioSetTxConfig+0x1ac>
 801a60a:	2b04      	cmp	r3, #4
 801a60c:	f300 80d6 	bgt.w	801a7bc <RadioSetTxConfig+0x1d0>
 801a610:	2b00      	cmp	r3, #0
 801a612:	d002      	beq.n	801a61a <RadioSetTxConfig+0x2e>
 801a614:	2b01      	cmp	r3, #1
 801a616:	d059      	beq.n	801a6cc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a618:	e0d0      	b.n	801a7bc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a61a:	4b77      	ldr	r3, [pc, #476]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a61c:	2200      	movs	r2, #0
 801a61e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a622:	4a75      	ldr	r2, [pc, #468]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a624:	6a3b      	ldr	r3, [r7, #32]
 801a626:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a628:	4b73      	ldr	r3, [pc, #460]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a62a:	220b      	movs	r2, #11
 801a62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f002 fd8f 	bl	801d154 <SUBGRF_GetFskBandwidthRegValue>
 801a636:	4603      	mov	r3, r0
 801a638:	461a      	mov	r2, r3
 801a63a:	4b6f      	ldr	r3, [pc, #444]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a640:	4a6d      	ldr	r2, [pc, #436]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a642:	68bb      	ldr	r3, [r7, #8]
 801a644:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a646:	4b6c      	ldr	r3, [pc, #432]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a648:	2200      	movs	r2, #0
 801a64a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a64c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a64e:	00db      	lsls	r3, r3, #3
 801a650:	b29a      	uxth	r2, r3
 801a652:	4b69      	ldr	r3, [pc, #420]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a654:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a656:	4b68      	ldr	r3, [pc, #416]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a658:	2204      	movs	r2, #4
 801a65a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a65c:	4b66      	ldr	r3, [pc, #408]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a65e:	2218      	movs	r2, #24
 801a660:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a662:	4b65      	ldr	r3, [pc, #404]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a664:	2200      	movs	r2, #0
 801a666:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a668:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a66c:	f083 0301 	eor.w	r3, r3, #1
 801a670:	b2db      	uxtb	r3, r3
 801a672:	461a      	mov	r2, r3
 801a674:	4b60      	ldr	r3, [pc, #384]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a676:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a678:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d003      	beq.n	801a688 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a680:	4b5d      	ldr	r3, [pc, #372]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a682:	22f2      	movs	r2, #242	; 0xf2
 801a684:	75da      	strb	r2, [r3, #23]
 801a686:	e002      	b.n	801a68e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a688:	4b5b      	ldr	r3, [pc, #364]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a68a:	2201      	movs	r2, #1
 801a68c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a68e:	4b5a      	ldr	r3, [pc, #360]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a690:	2201      	movs	r2, #1
 801a692:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a694:	f000 fb33 	bl	801acfe <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a698:	2000      	movs	r0, #0
 801a69a:	f7ff fcc7 	bl	801a02c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a69e:	4857      	ldr	r0, [pc, #348]	; (801a7fc <RadioSetTxConfig+0x210>)
 801a6a0:	f002 f924 	bl	801c8ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6a4:	4856      	ldr	r0, [pc, #344]	; (801a800 <RadioSetTxConfig+0x214>)
 801a6a6:	f002 f9f3 	bl	801ca90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a6aa:	4a56      	ldr	r2, [pc, #344]	; (801a804 <RadioSetTxConfig+0x218>)
 801a6ac:	f107 0310 	add.w	r3, r7, #16
 801a6b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6b4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6b8:	f107 0310 	add.w	r3, r7, #16
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f001 fcb0 	bl	801c022 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a6c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a6c6:	f001 fcfb 	bl	801c0c0 <SUBGRF_SetWhiteningSeed>
            break;
 801a6ca:	e078      	b.n	801a7be <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a6cc:	4b4a      	ldr	r3, [pc, #296]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a6ce:	2201      	movs	r2, #1
 801a6d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a6d4:	6a3b      	ldr	r3, [r7, #32]
 801a6d6:	b2da      	uxtb	r2, r3
 801a6d8:	4b47      	ldr	r3, [pc, #284]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a6da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a6de:	4a4a      	ldr	r2, [pc, #296]	; (801a808 <RadioSetTxConfig+0x21c>)
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	4413      	add	r3, r2
 801a6e4:	781a      	ldrb	r2, [r3, #0]
 801a6e6:	4b44      	ldr	r3, [pc, #272]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a6e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a6ec:	4a42      	ldr	r2, [pc, #264]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a6ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a6f2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d105      	bne.n	801a708 <RadioSetTxConfig+0x11c>
 801a6fc:	6a3b      	ldr	r3, [r7, #32]
 801a6fe:	2b0b      	cmp	r3, #11
 801a700:	d008      	beq.n	801a714 <RadioSetTxConfig+0x128>
 801a702:	6a3b      	ldr	r3, [r7, #32]
 801a704:	2b0c      	cmp	r3, #12
 801a706:	d005      	beq.n	801a714 <RadioSetTxConfig+0x128>
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	2b01      	cmp	r3, #1
 801a70c:	d107      	bne.n	801a71e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a70e:	6a3b      	ldr	r3, [r7, #32]
 801a710:	2b0c      	cmp	r3, #12
 801a712:	d104      	bne.n	801a71e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a714:	4b38      	ldr	r3, [pc, #224]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a716:	2201      	movs	r2, #1
 801a718:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a71c:	e003      	b.n	801a726 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a71e:	4b36      	ldr	r3, [pc, #216]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a720:	2200      	movs	r2, #0
 801a722:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a726:	4b34      	ldr	r3, [pc, #208]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a728:	2201      	movs	r2, #1
 801a72a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a72c:	4b32      	ldr	r3, [pc, #200]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a72e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a732:	2b05      	cmp	r3, #5
 801a734:	d004      	beq.n	801a740 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a736:	4b30      	ldr	r3, [pc, #192]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a73c:	2b06      	cmp	r3, #6
 801a73e:	d10a      	bne.n	801a756 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a742:	2b0b      	cmp	r3, #11
 801a744:	d803      	bhi.n	801a74e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a746:	4b2c      	ldr	r3, [pc, #176]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a748:	220c      	movs	r2, #12
 801a74a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a74c:	e006      	b.n	801a75c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a74e:	4a2a      	ldr	r2, [pc, #168]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a750:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a752:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a754:	e002      	b.n	801a75c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a756:	4a28      	ldr	r2, [pc, #160]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a758:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a75a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a75c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a760:	4b25      	ldr	r3, [pc, #148]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a762:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a764:	4b29      	ldr	r3, [pc, #164]	; (801a80c <RadioSetTxConfig+0x220>)
 801a766:	781a      	ldrb	r2, [r3, #0]
 801a768:	4b23      	ldr	r3, [pc, #140]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a76a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a76c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a770:	4b21      	ldr	r3, [pc, #132]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a772:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a776:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a77a:	4b1f      	ldr	r3, [pc, #124]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a77c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a780:	f000 fabd 	bl	801acfe <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a784:	2001      	movs	r0, #1
 801a786:	f7ff fc51 	bl	801a02c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a78a:	481c      	ldr	r0, [pc, #112]	; (801a7fc <RadioSetTxConfig+0x210>)
 801a78c:	f002 f8ae 	bl	801c8ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a790:	481b      	ldr	r0, [pc, #108]	; (801a800 <RadioSetTxConfig+0x214>)
 801a792:	f002 f97d 	bl	801ca90 <SUBGRF_SetPacketParams>
            break;
 801a796:	e012      	b.n	801a7be <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a798:	2004      	movs	r0, #4
 801a79a:	f7ff fc47 	bl	801a02c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a79e:	4b16      	ldr	r3, [pc, #88]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a7a0:	2202      	movs	r2, #2
 801a7a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a7a6:	4a14      	ldr	r2, [pc, #80]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a7a8:	6a3b      	ldr	r3, [r7, #32]
 801a7aa:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a7ac:	4b12      	ldr	r3, [pc, #72]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a7ae:	2216      	movs	r2, #22
 801a7b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7b4:	4811      	ldr	r0, [pc, #68]	; (801a7fc <RadioSetTxConfig+0x210>)
 801a7b6:	f002 f899 	bl	801c8ec <SUBGRF_SetModulationParams>
            break;
 801a7ba:	e000      	b.n	801a7be <RadioSetTxConfig+0x1d2>
            break;
 801a7bc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a7be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	f002 fbc8 	bl	801cf58 <SUBGRF_SetRfTxPower>
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	4b0a      	ldr	r3, [pc, #40]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a7ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a7d2:	210e      	movs	r1, #14
 801a7d4:	f640 101f 	movw	r0, #2335	; 0x91f
 801a7d8:	f002 faa2 	bl	801cd20 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a7dc:	4b06      	ldr	r3, [pc, #24]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a7de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f002 fd97 	bl	801d316 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a7e8:	4a03      	ldr	r2, [pc, #12]	; (801a7f8 <RadioSetTxConfig+0x20c>)
 801a7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7ec:	6053      	str	r3, [r2, #4]
}
 801a7ee:	bf00      	nop
 801a7f0:	3718      	adds	r7, #24
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	bd80      	pop	{r7, pc}
 801a7f6:	bf00      	nop
 801a7f8:	20001830 	.word	0x20001830
 801a7fc:	20001868 	.word	0x20001868
 801a800:	2000183e 	.word	0x2000183e
 801a804:	0801f438 	.word	0x0801f438
 801a808:	0801faa0 	.word	0x0801faa0
 801a80c:	20000154 	.word	0x20000154

0801a810 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a810:	b480      	push	{r7}
 801a812:	b083      	sub	sp, #12
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
    return true;
 801a818:	2301      	movs	r3, #1
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	370c      	adds	r7, #12
 801a81e:	46bd      	mov	sp, r7
 801a820:	bc80      	pop	{r7}
 801a822:	4770      	bx	lr

0801a824 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a824:	b480      	push	{r7}
 801a826:	b085      	sub	sp, #20
 801a828:	af00      	add	r7, sp, #0
 801a82a:	4603      	mov	r3, r0
 801a82c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a82e:	2300      	movs	r3, #0
 801a830:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a832:	79fb      	ldrb	r3, [r7, #7]
 801a834:	2b0a      	cmp	r3, #10
 801a836:	d83e      	bhi.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
 801a838:	a201      	add	r2, pc, #4	; (adr r2, 801a840 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a83e:	bf00      	nop
 801a840:	0801a86d 	.word	0x0801a86d
 801a844:	0801a87d 	.word	0x0801a87d
 801a848:	0801a88d 	.word	0x0801a88d
 801a84c:	0801a89d 	.word	0x0801a89d
 801a850:	0801a8a5 	.word	0x0801a8a5
 801a854:	0801a8ab 	.word	0x0801a8ab
 801a858:	0801a8b1 	.word	0x0801a8b1
 801a85c:	0801a8b7 	.word	0x0801a8b7
 801a860:	0801a875 	.word	0x0801a875
 801a864:	0801a885 	.word	0x0801a885
 801a868:	0801a895 	.word	0x0801a895
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a86c:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a870:	60fb      	str	r3, [r7, #12]
        break;
 801a872:	e020      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a874:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a878:	60fb      	str	r3, [r7, #12]
        break;
 801a87a:	e01c      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a87c:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a880:	60fb      	str	r3, [r7, #12]
        break;
 801a882:	e018      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a884:	f245 1361 	movw	r3, #20833	; 0x5161
 801a888:	60fb      	str	r3, [r7, #12]
        break;
 801a88a:	e014      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a88c:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a890:	60fb      	str	r3, [r7, #12]
        break;
 801a892:	e010      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a894:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a898:	60fb      	str	r3, [r7, #12]
        break;
 801a89a:	e00c      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a89c:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a8a0:	60fb      	str	r3, [r7, #12]
        break;
 801a8a2:	e008      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a8a4:	4b07      	ldr	r3, [pc, #28]	; (801a8c4 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a8a6:	60fb      	str	r3, [r7, #12]
        break;
 801a8a8:	e005      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a8aa:	4b07      	ldr	r3, [pc, #28]	; (801a8c8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a8ac:	60fb      	str	r3, [r7, #12]
        break;
 801a8ae:	e002      	b.n	801a8b6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a8b0:	4b06      	ldr	r3, [pc, #24]	; (801a8cc <RadioGetLoRaBandwidthInHz+0xa8>)
 801a8b2:	60fb      	str	r3, [r7, #12]
        break;
 801a8b4:	bf00      	nop
    }

    return bandwidthInHz;
 801a8b6:	68fb      	ldr	r3, [r7, #12]
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	3714      	adds	r7, #20
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bc80      	pop	{r7}
 801a8c0:	4770      	bx	lr
 801a8c2:	bf00      	nop
 801a8c4:	0001e848 	.word	0x0001e848
 801a8c8:	0003d090 	.word	0x0003d090
 801a8cc:	0007a120 	.word	0x0007a120

0801a8d0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a8d0:	b480      	push	{r7}
 801a8d2:	b083      	sub	sp, #12
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
 801a8d8:	4608      	mov	r0, r1
 801a8da:	4611      	mov	r1, r2
 801a8dc:	461a      	mov	r2, r3
 801a8de:	4603      	mov	r3, r0
 801a8e0:	70fb      	strb	r3, [r7, #3]
 801a8e2:	460b      	mov	r3, r1
 801a8e4:	803b      	strh	r3, [r7, #0]
 801a8e6:	4613      	mov	r3, r2
 801a8e8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a8ea:	883b      	ldrh	r3, [r7, #0]
 801a8ec:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8ee:	78ba      	ldrb	r2, [r7, #2]
 801a8f0:	f082 0201 	eor.w	r2, r2, #1
 801a8f4:	b2d2      	uxtb	r2, r2
 801a8f6:	2a00      	cmp	r2, #0
 801a8f8:	d001      	beq.n	801a8fe <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a8fa:	2208      	movs	r2, #8
 801a8fc:	e000      	b.n	801a900 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a8fe:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a900:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a902:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a906:	7c3b      	ldrb	r3, [r7, #16]
 801a908:	7d39      	ldrb	r1, [r7, #20]
 801a90a:	2900      	cmp	r1, #0
 801a90c:	d001      	beq.n	801a912 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a90e:	2102      	movs	r1, #2
 801a910:	e000      	b.n	801a914 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a912:	2100      	movs	r1, #0
 801a914:	440b      	add	r3, r1
 801a916:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a918:	4413      	add	r3, r2
}
 801a91a:	4618      	mov	r0, r3
 801a91c:	370c      	adds	r7, #12
 801a91e:	46bd      	mov	sp, r7
 801a920:	bc80      	pop	{r7}
 801a922:	4770      	bx	lr

0801a924 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a924:	b480      	push	{r7}
 801a926:	b08b      	sub	sp, #44	; 0x2c
 801a928:	af00      	add	r7, sp, #0
 801a92a:	60f8      	str	r0, [r7, #12]
 801a92c:	60b9      	str	r1, [r7, #8]
 801a92e:	4611      	mov	r1, r2
 801a930:	461a      	mov	r2, r3
 801a932:	460b      	mov	r3, r1
 801a934:	71fb      	strb	r3, [r7, #7]
 801a936:	4613      	mov	r3, r2
 801a938:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a93a:	79fb      	ldrb	r3, [r7, #7]
 801a93c:	3304      	adds	r3, #4
 801a93e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a940:	2300      	movs	r3, #0
 801a942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a946:	68bb      	ldr	r3, [r7, #8]
 801a948:	2b05      	cmp	r3, #5
 801a94a:	d002      	beq.n	801a952 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a94c:	68bb      	ldr	r3, [r7, #8]
 801a94e:	2b06      	cmp	r3, #6
 801a950:	d104      	bne.n	801a95c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a952:	88bb      	ldrh	r3, [r7, #4]
 801a954:	2b0b      	cmp	r3, #11
 801a956:	d801      	bhi.n	801a95c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a958:	230c      	movs	r3, #12
 801a95a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d105      	bne.n	801a96e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a962:	68bb      	ldr	r3, [r7, #8]
 801a964:	2b0b      	cmp	r3, #11
 801a966:	d008      	beq.n	801a97a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	2b0c      	cmp	r3, #12
 801a96c:	d005      	beq.n	801a97a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	2b01      	cmp	r3, #1
 801a972:	d105      	bne.n	801a980 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a974:	68bb      	ldr	r3, [r7, #8]
 801a976:	2b0c      	cmp	r3, #12
 801a978:	d102      	bne.n	801a980 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a97a:	2301      	movs	r3, #1
 801a97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a980:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a984:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a986:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a98a:	2a00      	cmp	r2, #0
 801a98c:	d001      	beq.n	801a992 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a98e:	2210      	movs	r2, #16
 801a990:	e000      	b.n	801a994 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a992:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a994:	4413      	add	r3, r2
 801a996:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a99c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a99e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a9a2:	2a00      	cmp	r2, #0
 801a9a4:	d001      	beq.n	801a9aa <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	e000      	b.n	801a9ac <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a9aa:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a9ac:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a9ae:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	2b06      	cmp	r3, #6
 801a9b4:	d803      	bhi.n	801a9be <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	009b      	lsls	r3, r3, #2
 801a9ba:	623b      	str	r3, [r7, #32]
 801a9bc:	e00e      	b.n	801a9dc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a9be:	69fb      	ldr	r3, [r7, #28]
 801a9c0:	3308      	adds	r3, #8
 801a9c2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d004      	beq.n	801a9d6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	3b02      	subs	r3, #2
 801a9d0:	009b      	lsls	r3, r3, #2
 801a9d2:	623b      	str	r3, [r7, #32]
 801a9d4:	e002      	b.n	801a9dc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	009b      	lsls	r3, r3, #2
 801a9da:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a9dc:	69fb      	ldr	r3, [r7, #28]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	da01      	bge.n	801a9e6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a9e6:	69fa      	ldr	r2, [r7, #28]
 801a9e8:	6a3b      	ldr	r3, [r7, #32]
 801a9ea:	4413      	add	r3, r2
 801a9ec:	1e5a      	subs	r2, r3, #1
 801a9ee:	6a3b      	ldr	r3, [r7, #32]
 801a9f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9f4:	697a      	ldr	r2, [r7, #20]
 801a9f6:	fb03 f202 	mul.w	r2, r3, r2
 801a9fa:	88bb      	ldrh	r3, [r7, #4]
 801a9fc:	4413      	add	r3, r2
    int32_t intermediate =
 801a9fe:	330c      	adds	r3, #12
 801aa00:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801aa02:	68bb      	ldr	r3, [r7, #8]
 801aa04:	2b06      	cmp	r3, #6
 801aa06:	d802      	bhi.n	801aa0e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801aa08:	69bb      	ldr	r3, [r7, #24]
 801aa0a:	3302      	adds	r3, #2
 801aa0c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	009b      	lsls	r3, r3, #2
 801aa12:	1c5a      	adds	r2, r3, #1
 801aa14:	68bb      	ldr	r3, [r7, #8]
 801aa16:	3b02      	subs	r3, #2
 801aa18:	fa02 f303 	lsl.w	r3, r2, r3
}
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	372c      	adds	r7, #44	; 0x2c
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bc80      	pop	{r7}
 801aa24:	4770      	bx	lr
	...

0801aa28 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b08a      	sub	sp, #40	; 0x28
 801aa2c:	af04      	add	r7, sp, #16
 801aa2e:	60b9      	str	r1, [r7, #8]
 801aa30:	607a      	str	r2, [r7, #4]
 801aa32:	461a      	mov	r2, r3
 801aa34:	4603      	mov	r3, r0
 801aa36:	73fb      	strb	r3, [r7, #15]
 801aa38:	4613      	mov	r3, r2
 801aa3a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801aa40:	2301      	movs	r3, #1
 801aa42:	613b      	str	r3, [r7, #16]

    switch( modem )
 801aa44:	7bfb      	ldrb	r3, [r7, #15]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d002      	beq.n	801aa50 <RadioTimeOnAir+0x28>
 801aa4a:	2b01      	cmp	r3, #1
 801aa4c:	d017      	beq.n	801aa7e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801aa4e:	e035      	b.n	801aabc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801aa50:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801aa54:	8c3a      	ldrh	r2, [r7, #32]
 801aa56:	7bb9      	ldrb	r1, [r7, #14]
 801aa58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa5c:	9301      	str	r3, [sp, #4]
 801aa5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa62:	9300      	str	r3, [sp, #0]
 801aa64:	4603      	mov	r3, r0
 801aa66:	6878      	ldr	r0, [r7, #4]
 801aa68:	f7ff ff32 	bl	801a8d0 <RadioGetGfskTimeOnAirNumerator>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa72:	fb02 f303 	mul.w	r3, r2, r3
 801aa76:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	613b      	str	r3, [r7, #16]
        break;
 801aa7c:	e01e      	b.n	801aabc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801aa7e:	8c39      	ldrh	r1, [r7, #32]
 801aa80:	7bba      	ldrb	r2, [r7, #14]
 801aa82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa86:	9302      	str	r3, [sp, #8]
 801aa88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa8c:	9301      	str	r3, [sp, #4]
 801aa8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa92:	9300      	str	r3, [sp, #0]
 801aa94:	460b      	mov	r3, r1
 801aa96:	6879      	ldr	r1, [r7, #4]
 801aa98:	68b8      	ldr	r0, [r7, #8]
 801aa9a:	f7ff ff43 	bl	801a924 <RadioGetLoRaTimeOnAirNumerator>
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aaa4:	fb02 f303 	mul.w	r3, r2, r3
 801aaa8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801aaaa:	4a0a      	ldr	r2, [pc, #40]	; (801aad4 <RadioTimeOnAir+0xac>)
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	4413      	add	r3, r2
 801aab0:	781b      	ldrb	r3, [r3, #0]
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7ff feb6 	bl	801a824 <RadioGetLoRaBandwidthInHz>
 801aab8:	6138      	str	r0, [r7, #16]
        break;
 801aaba:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801aabc:	697a      	ldr	r2, [r7, #20]
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	4413      	add	r3, r2
 801aac2:	1e5a      	subs	r2, r3, #1
 801aac4:	693b      	ldr	r3, [r7, #16]
 801aac6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	3718      	adds	r7, #24
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}
 801aad2:	bf00      	nop
 801aad4:	0801faa0 	.word	0x0801faa0

0801aad8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b084      	sub	sp, #16
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	460b      	mov	r3, r1
 801aae2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801aae4:	2300      	movs	r3, #0
 801aae6:	2200      	movs	r2, #0
 801aae8:	f240 2101 	movw	r1, #513	; 0x201
 801aaec:	f240 2001 	movw	r0, #513	; 0x201
 801aaf0:	f001 fd66 	bl	801c5c0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801aaf4:	4b73      	ldr	r3, [pc, #460]	; (801acc4 <RadioSend+0x1ec>)
 801aaf6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aafa:	2101      	movs	r1, #1
 801aafc:	4618      	mov	r0, r3
 801aafe:	f002 fa03 	bl	801cf08 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801ab02:	4b70      	ldr	r3, [pc, #448]	; (801acc4 <RadioSend+0x1ec>)
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	d112      	bne.n	801ab30 <RadioSend+0x58>
 801ab0a:	4b6e      	ldr	r3, [pc, #440]	; (801acc4 <RadioSend+0x1ec>)
 801ab0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ab10:	2b06      	cmp	r3, #6
 801ab12:	d10d      	bne.n	801ab30 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ab14:	f640 0089 	movw	r0, #2185	; 0x889
 801ab18:	f002 f916 	bl	801cd48 <SUBGRF_ReadRegister>
 801ab1c:	4603      	mov	r3, r0
 801ab1e:	f023 0304 	bic.w	r3, r3, #4
 801ab22:	b2db      	uxtb	r3, r3
 801ab24:	4619      	mov	r1, r3
 801ab26:	f640 0089 	movw	r0, #2185	; 0x889
 801ab2a:	f002 f8f9 	bl	801cd20 <SUBGRF_WriteRegister>
 801ab2e:	e00c      	b.n	801ab4a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab30:	f640 0089 	movw	r0, #2185	; 0x889
 801ab34:	f002 f908 	bl	801cd48 <SUBGRF_ReadRegister>
 801ab38:	4603      	mov	r3, r0
 801ab3a:	f043 0304 	orr.w	r3, r3, #4
 801ab3e:	b2db      	uxtb	r3, r3
 801ab40:	4619      	mov	r1, r3
 801ab42:	f640 0089 	movw	r0, #2185	; 0x889
 801ab46:	f002 f8eb 	bl	801cd20 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801ab4a:	4b5e      	ldr	r3, [pc, #376]	; (801acc4 <RadioSend+0x1ec>)
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	2b04      	cmp	r3, #4
 801ab50:	f200 80a8 	bhi.w	801aca4 <RadioSend+0x1cc>
 801ab54:	a201      	add	r2, pc, #4	; (adr r2, 801ab5c <RadioSend+0x84>)
 801ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab5a:	bf00      	nop
 801ab5c:	0801ab8b 	.word	0x0801ab8b
 801ab60:	0801ab71 	.word	0x0801ab71
 801ab64:	0801ab8b 	.word	0x0801ab8b
 801ab68:	0801abed 	.word	0x0801abed
 801ab6c:	0801ac0d 	.word	0x0801ac0d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ab70:	4a54      	ldr	r2, [pc, #336]	; (801acc4 <RadioSend+0x1ec>)
 801ab72:	78fb      	ldrb	r3, [r7, #3]
 801ab74:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab76:	4854      	ldr	r0, [pc, #336]	; (801acc8 <RadioSend+0x1f0>)
 801ab78:	f001 ff8a 	bl	801ca90 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ab7c:	78fb      	ldrb	r3, [r7, #3]
 801ab7e:	2200      	movs	r2, #0
 801ab80:	4619      	mov	r1, r3
 801ab82:	6878      	ldr	r0, [r7, #4]
 801ab84:	f001 fa3a 	bl	801bffc <SUBGRF_SendPayload>
            break;
 801ab88:	e08d      	b.n	801aca6 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ab8a:	f002 fbb6 	bl	801d2fa <RFW_Is_Init>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	2b01      	cmp	r3, #1
 801ab92:	d11e      	bne.n	801abd2 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ab94:	f107 020d 	add.w	r2, r7, #13
 801ab98:	78fb      	ldrb	r3, [r7, #3]
 801ab9a:	4619      	mov	r1, r3
 801ab9c:	6878      	ldr	r0, [r7, #4]
 801ab9e:	f002 fbc4 	bl	801d32a <RFW_TransmitInit>
 801aba2:	4603      	mov	r3, r0
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d10c      	bne.n	801abc2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801aba8:	7b7a      	ldrb	r2, [r7, #13]
 801abaa:	4b46      	ldr	r3, [pc, #280]	; (801acc4 <RadioSend+0x1ec>)
 801abac:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abae:	4846      	ldr	r0, [pc, #280]	; (801acc8 <RadioSend+0x1f0>)
 801abb0:	f001 ff6e 	bl	801ca90 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801abb4:	7b7b      	ldrb	r3, [r7, #13]
 801abb6:	2200      	movs	r2, #0
 801abb8:	4619      	mov	r1, r3
 801abba:	6878      	ldr	r0, [r7, #4]
 801abbc:	f001 fa1e 	bl	801bffc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801abc0:	e071      	b.n	801aca6 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801abc2:	4b42      	ldr	r3, [pc, #264]	; (801accc <RadioSend+0x1f4>)
 801abc4:	2201      	movs	r2, #1
 801abc6:	2100      	movs	r1, #0
 801abc8:	2002      	movs	r0, #2
 801abca:	f003 fccf 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801abce:	2303      	movs	r3, #3
 801abd0:	e073      	b.n	801acba <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801abd2:	4a3c      	ldr	r2, [pc, #240]	; (801acc4 <RadioSend+0x1ec>)
 801abd4:	78fb      	ldrb	r3, [r7, #3]
 801abd6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abd8:	483b      	ldr	r0, [pc, #236]	; (801acc8 <RadioSend+0x1f0>)
 801abda:	f001 ff59 	bl	801ca90 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801abde:	78fb      	ldrb	r3, [r7, #3]
 801abe0:	2200      	movs	r2, #0
 801abe2:	4619      	mov	r1, r3
 801abe4:	6878      	ldr	r0, [r7, #4]
 801abe6:	f001 fa09 	bl	801bffc <SUBGRF_SendPayload>
            break;
 801abea:	e05c      	b.n	801aca6 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801abec:	4b35      	ldr	r3, [pc, #212]	; (801acc4 <RadioSend+0x1ec>)
 801abee:	2202      	movs	r2, #2
 801abf0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801abf2:	4a34      	ldr	r2, [pc, #208]	; (801acc4 <RadioSend+0x1ec>)
 801abf4:	78fb      	ldrb	r3, [r7, #3]
 801abf6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abf8:	4833      	ldr	r0, [pc, #204]	; (801acc8 <RadioSend+0x1f0>)
 801abfa:	f001 ff49 	bl	801ca90 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801abfe:	78fb      	ldrb	r3, [r7, #3]
 801ac00:	2200      	movs	r2, #0
 801ac02:	4619      	mov	r1, r3
 801ac04:	6878      	ldr	r0, [r7, #4]
 801ac06:	f001 f9f9 	bl	801bffc <SUBGRF_SendPayload>
            break;
 801ac0a:	e04c      	b.n	801aca6 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801ac0c:	78fb      	ldrb	r3, [r7, #3]
 801ac0e:	461a      	mov	r2, r3
 801ac10:	6879      	ldr	r1, [r7, #4]
 801ac12:	482f      	ldr	r0, [pc, #188]	; (801acd0 <RadioSend+0x1f8>)
 801ac14:	f000 fccc 	bl	801b5b0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ac18:	4b2a      	ldr	r3, [pc, #168]	; (801acc4 <RadioSend+0x1ec>)
 801ac1a:	2202      	movs	r2, #2
 801ac1c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801ac1e:	78fb      	ldrb	r3, [r7, #3]
 801ac20:	3301      	adds	r3, #1
 801ac22:	b2da      	uxtb	r2, r3
 801ac24:	4b27      	ldr	r3, [pc, #156]	; (801acc4 <RadioSend+0x1ec>)
 801ac26:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac28:	4827      	ldr	r0, [pc, #156]	; (801acc8 <RadioSend+0x1f0>)
 801ac2a:	f001 ff31 	bl	801ca90 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801ac2e:	2100      	movs	r1, #0
 801ac30:	20f1      	movs	r0, #241	; 0xf1
 801ac32:	f000 f966 	bl	801af02 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801ac36:	2100      	movs	r1, #0
 801ac38:	20f0      	movs	r0, #240	; 0xf0
 801ac3a:	f000 f962 	bl	801af02 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801ac3e:	4b21      	ldr	r3, [pc, #132]	; (801acc4 <RadioSend+0x1ec>)
 801ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac42:	2b64      	cmp	r3, #100	; 0x64
 801ac44:	d108      	bne.n	801ac58 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801ac46:	2170      	movs	r1, #112	; 0x70
 801ac48:	20f3      	movs	r0, #243	; 0xf3
 801ac4a:	f000 f95a 	bl	801af02 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801ac4e:	211d      	movs	r1, #29
 801ac50:	20f2      	movs	r0, #242	; 0xf2
 801ac52:	f000 f956 	bl	801af02 <RadioWrite>
 801ac56:	e007      	b.n	801ac68 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801ac58:	21e1      	movs	r1, #225	; 0xe1
 801ac5a:	20f3      	movs	r0, #243	; 0xf3
 801ac5c:	f000 f951 	bl	801af02 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801ac60:	2104      	movs	r1, #4
 801ac62:	20f2      	movs	r0, #242	; 0xf2
 801ac64:	f000 f94d 	bl	801af02 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801ac68:	78fb      	ldrb	r3, [r7, #3]
 801ac6a:	b29b      	uxth	r3, r3
 801ac6c:	00db      	lsls	r3, r3, #3
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	3302      	adds	r3, #2
 801ac72:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801ac74:	89fb      	ldrh	r3, [r7, #14]
 801ac76:	0a1b      	lsrs	r3, r3, #8
 801ac78:	b29b      	uxth	r3, r3
 801ac7a:	b2db      	uxtb	r3, r3
 801ac7c:	4619      	mov	r1, r3
 801ac7e:	20f4      	movs	r0, #244	; 0xf4
 801ac80:	f000 f93f 	bl	801af02 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801ac84:	89fb      	ldrh	r3, [r7, #14]
 801ac86:	b2db      	uxtb	r3, r3
 801ac88:	4619      	mov	r1, r3
 801ac8a:	20f5      	movs	r0, #245	; 0xf5
 801ac8c:	f000 f939 	bl	801af02 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801ac90:	78fb      	ldrb	r3, [r7, #3]
 801ac92:	3301      	adds	r3, #1
 801ac94:	b2db      	uxtb	r3, r3
 801ac96:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801ac9a:	4619      	mov	r1, r3
 801ac9c:	480c      	ldr	r0, [pc, #48]	; (801acd0 <RadioSend+0x1f8>)
 801ac9e:	f001 f9ad 	bl	801bffc <SUBGRF_SendPayload>
            break;
 801aca2:	e000      	b.n	801aca6 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801aca4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801aca6:	4b07      	ldr	r3, [pc, #28]	; (801acc4 <RadioSend+0x1ec>)
 801aca8:	685b      	ldr	r3, [r3, #4]
 801acaa:	4619      	mov	r1, r3
 801acac:	4809      	ldr	r0, [pc, #36]	; (801acd4 <RadioSend+0x1fc>)
 801acae:	f003 fac3 	bl	801e238 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801acb2:	4808      	ldr	r0, [pc, #32]	; (801acd4 <RadioSend+0x1fc>)
 801acb4:	f003 f9e2 	bl	801e07c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801acb8:	2300      	movs	r3, #0
}
 801acba:	4618      	mov	r0, r3
 801acbc:	3710      	adds	r7, #16
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}
 801acc2:	bf00      	nop
 801acc4:	20001830 	.word	0x20001830
 801acc8:	2000183e 	.word	0x2000183e
 801accc:	0801f440 	.word	0x0801f440
 801acd0:	2000172c 	.word	0x2000172c
 801acd4:	2000188c 	.word	0x2000188c

0801acd8 <RadioSleep>:

static void RadioSleep( void )
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b082      	sub	sp, #8
 801acdc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801acde:	2300      	movs	r3, #0
 801ace0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801ace2:	793b      	ldrb	r3, [r7, #4]
 801ace4:	f043 0304 	orr.w	r3, r3, #4
 801ace8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801acea:	7938      	ldrb	r0, [r7, #4]
 801acec:	f001 fa62 	bl	801c1b4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801acf0:	2002      	movs	r0, #2
 801acf2:	f7e7 ffb9 	bl	8002c68 <HAL_Delay>
}
 801acf6:	bf00      	nop
 801acf8:	3708      	adds	r7, #8
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd80      	pop	{r7, pc}

0801acfe <RadioStandby>:

static void RadioStandby( void )
{
 801acfe:	b580      	push	{r7, lr}
 801ad00:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801ad02:	2000      	movs	r0, #0
 801ad04:	f001 fa88 	bl	801c218 <SUBGRF_SetStandby>
}
 801ad08:	bf00      	nop
 801ad0a:	bd80      	pop	{r7, pc}

0801ad0c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b082      	sub	sp, #8
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801ad14:	f002 faf1 	bl	801d2fa <RFW_Is_Init>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	2b01      	cmp	r3, #1
 801ad1c:	d102      	bne.n	801ad24 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801ad1e:	f002 fb14 	bl	801d34a <RFW_ReceiveInit>
 801ad22:	e007      	b.n	801ad34 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad24:	2300      	movs	r3, #0
 801ad26:	2200      	movs	r2, #0
 801ad28:	f240 2162 	movw	r1, #610	; 0x262
 801ad2c:	f240 2062 	movw	r0, #610	; 0x262
 801ad30:	f001 fc46 	bl	801c5c0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d006      	beq.n	801ad48 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad3a:	6879      	ldr	r1, [r7, #4]
 801ad3c:	4811      	ldr	r0, [pc, #68]	; (801ad84 <RadioRx+0x78>)
 801ad3e:	f003 fa7b 	bl	801e238 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad42:	4810      	ldr	r0, [pc, #64]	; (801ad84 <RadioRx+0x78>)
 801ad44:	f003 f99a 	bl	801e07c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ad48:	4b0f      	ldr	r3, [pc, #60]	; (801ad88 <RadioRx+0x7c>)
 801ad4a:	2200      	movs	r2, #0
 801ad4c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ad4e:	4b0e      	ldr	r3, [pc, #56]	; (801ad88 <RadioRx+0x7c>)
 801ad50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad54:	2100      	movs	r1, #0
 801ad56:	4618      	mov	r0, r3
 801ad58:	f002 f8d6 	bl	801cf08 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801ad5c:	4b0a      	ldr	r3, [pc, #40]	; (801ad88 <RadioRx+0x7c>)
 801ad5e:	785b      	ldrb	r3, [r3, #1]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d004      	beq.n	801ad6e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ad64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad68:	f001 fa92 	bl	801c290 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ad6c:	e005      	b.n	801ad7a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ad6e:	4b06      	ldr	r3, [pc, #24]	; (801ad88 <RadioRx+0x7c>)
 801ad70:	689b      	ldr	r3, [r3, #8]
 801ad72:	019b      	lsls	r3, r3, #6
 801ad74:	4618      	mov	r0, r3
 801ad76:	f001 fa8b 	bl	801c290 <SUBGRF_SetRx>
}
 801ad7a:	bf00      	nop
 801ad7c:	3708      	adds	r7, #8
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	200018a4 	.word	0x200018a4
 801ad88:	20001830 	.word	0x20001830

0801ad8c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b082      	sub	sp, #8
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801ad94:	f002 fab1 	bl	801d2fa <RFW_Is_Init>
 801ad98:	4603      	mov	r3, r0
 801ad9a:	2b01      	cmp	r3, #1
 801ad9c:	d102      	bne.n	801ada4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801ad9e:	f002 fad4 	bl	801d34a <RFW_ReceiveInit>
 801ada2:	e007      	b.n	801adb4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ada4:	2300      	movs	r3, #0
 801ada6:	2200      	movs	r2, #0
 801ada8:	f240 2162 	movw	r1, #610	; 0x262
 801adac:	f240 2062 	movw	r0, #610	; 0x262
 801adb0:	f001 fc06 	bl	801c5c0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d006      	beq.n	801adc8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801adba:	6879      	ldr	r1, [r7, #4]
 801adbc:	4811      	ldr	r0, [pc, #68]	; (801ae04 <RadioRxBoosted+0x78>)
 801adbe:	f003 fa3b 	bl	801e238 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801adc2:	4810      	ldr	r0, [pc, #64]	; (801ae04 <RadioRxBoosted+0x78>)
 801adc4:	f003 f95a 	bl	801e07c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801adc8:	4b0f      	ldr	r3, [pc, #60]	; (801ae08 <RadioRxBoosted+0x7c>)
 801adca:	2200      	movs	r2, #0
 801adcc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801adce:	4b0e      	ldr	r3, [pc, #56]	; (801ae08 <RadioRxBoosted+0x7c>)
 801add0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801add4:	2100      	movs	r1, #0
 801add6:	4618      	mov	r0, r3
 801add8:	f002 f896 	bl	801cf08 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801addc:	4b0a      	ldr	r3, [pc, #40]	; (801ae08 <RadioRxBoosted+0x7c>)
 801adde:	785b      	ldrb	r3, [r3, #1]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d004      	beq.n	801adee <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801ade4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ade8:	f001 fa72 	bl	801c2d0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801adec:	e005      	b.n	801adfa <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801adee:	4b06      	ldr	r3, [pc, #24]	; (801ae08 <RadioRxBoosted+0x7c>)
 801adf0:	689b      	ldr	r3, [r3, #8]
 801adf2:	019b      	lsls	r3, r3, #6
 801adf4:	4618      	mov	r0, r3
 801adf6:	f001 fa6b 	bl	801c2d0 <SUBGRF_SetRxBoosted>
}
 801adfa:	bf00      	nop
 801adfc:	3708      	adds	r7, #8
 801adfe:	46bd      	mov	sp, r7
 801ae00:	bd80      	pop	{r7, pc}
 801ae02:	bf00      	nop
 801ae04:	200018a4 	.word	0x200018a4
 801ae08:	20001830 	.word	0x20001830

0801ae0c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b082      	sub	sp, #8
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
 801ae14:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	005a      	lsls	r2, r3, #1
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	4413      	add	r3, r2
 801ae1e:	4a0c      	ldr	r2, [pc, #48]	; (801ae50 <RadioSetRxDutyCycle+0x44>)
 801ae20:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801ae22:	2300      	movs	r3, #0
 801ae24:	2200      	movs	r2, #0
 801ae26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae2e:	f001 fbc7 	bl	801c5c0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae32:	4b07      	ldr	r3, [pc, #28]	; (801ae50 <RadioSetRxDutyCycle+0x44>)
 801ae34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae38:	2100      	movs	r1, #0
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f002 f864 	bl	801cf08 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801ae40:	6839      	ldr	r1, [r7, #0]
 801ae42:	6878      	ldr	r0, [r7, #4]
 801ae44:	f001 fa68 	bl	801c318 <SUBGRF_SetRxDutyCycle>
}
 801ae48:	bf00      	nop
 801ae4a:	3708      	adds	r7, #8
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd80      	pop	{r7, pc}
 801ae50:	20001830 	.word	0x20001830

0801ae54 <RadioStartCad>:

static void RadioStartCad( void )
{
 801ae54:	b580      	push	{r7, lr}
 801ae56:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae58:	4b09      	ldr	r3, [pc, #36]	; (801ae80 <RadioStartCad+0x2c>)
 801ae5a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae5e:	2100      	movs	r1, #0
 801ae60:	4618      	mov	r0, r3
 801ae62:	f002 f851 	bl	801cf08 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801ae66:	2300      	movs	r3, #0
 801ae68:	2200      	movs	r2, #0
 801ae6a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ae6e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801ae72:	f001 fba5 	bl	801c5c0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801ae76:	f001 fa7b 	bl	801c370 <SUBGRF_SetCad>
}
 801ae7a:	bf00      	nop
 801ae7c:	bd80      	pop	{r7, pc}
 801ae7e:	bf00      	nop
 801ae80:	20001830 	.word	0x20001830

0801ae84 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b084      	sub	sp, #16
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
 801ae8c:	460b      	mov	r3, r1
 801ae8e:	70fb      	strb	r3, [r7, #3]
 801ae90:	4613      	mov	r3, r2
 801ae92:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801ae94:	883b      	ldrh	r3, [r7, #0]
 801ae96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ae9a:	fb02 f303 	mul.w	r3, r2, r3
 801ae9e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f001 fbe9 	bl	801c678 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801aea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aeaa:	4618      	mov	r0, r3
 801aeac:	f002 f854 	bl	801cf58 <SUBGRF_SetRfTxPower>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aeb4:	210e      	movs	r1, #14
 801aeb6:	f640 101f 	movw	r0, #2335	; 0x91f
 801aeba:	f001 ff31 	bl	801cd20 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801aebe:	7afb      	ldrb	r3, [r7, #11]
 801aec0:	2101      	movs	r1, #1
 801aec2:	4618      	mov	r0, r3
 801aec4:	f002 f820 	bl	801cf08 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801aec8:	f001 fa60 	bl	801c38c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801aecc:	68f9      	ldr	r1, [r7, #12]
 801aece:	4805      	ldr	r0, [pc, #20]	; (801aee4 <RadioSetTxContinuousWave+0x60>)
 801aed0:	f003 f9b2 	bl	801e238 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801aed4:	4803      	ldr	r0, [pc, #12]	; (801aee4 <RadioSetTxContinuousWave+0x60>)
 801aed6:	f003 f8d1 	bl	801e07c <UTIL_TIMER_Start>
}
 801aeda:	bf00      	nop
 801aedc:	3710      	adds	r7, #16
 801aede:	46bd      	mov	sp, r7
 801aee0:	bd80      	pop	{r7, pc}
 801aee2:	bf00      	nop
 801aee4:	2000188c 	.word	0x2000188c

0801aee8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801aee8:	b580      	push	{r7, lr}
 801aeea:	b082      	sub	sp, #8
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	4603      	mov	r3, r0
 801aef0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801aef2:	f001 fe82 	bl	801cbfa <SUBGRF_GetRssiInst>
 801aef6:	4603      	mov	r3, r0
 801aef8:	b21b      	sxth	r3, r3
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	3708      	adds	r7, #8
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}

0801af02 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801af02:	b580      	push	{r7, lr}
 801af04:	b082      	sub	sp, #8
 801af06:	af00      	add	r7, sp, #0
 801af08:	4603      	mov	r3, r0
 801af0a:	460a      	mov	r2, r1
 801af0c:	80fb      	strh	r3, [r7, #6]
 801af0e:	4613      	mov	r3, r2
 801af10:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801af12:	797a      	ldrb	r2, [r7, #5]
 801af14:	88fb      	ldrh	r3, [r7, #6]
 801af16:	4611      	mov	r1, r2
 801af18:	4618      	mov	r0, r3
 801af1a:	f001 ff01 	bl	801cd20 <SUBGRF_WriteRegister>
}
 801af1e:	bf00      	nop
 801af20:	3708      	adds	r7, #8
 801af22:	46bd      	mov	sp, r7
 801af24:	bd80      	pop	{r7, pc}

0801af26 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801af26:	b580      	push	{r7, lr}
 801af28:	b082      	sub	sp, #8
 801af2a:	af00      	add	r7, sp, #0
 801af2c:	4603      	mov	r3, r0
 801af2e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801af30:	88fb      	ldrh	r3, [r7, #6]
 801af32:	4618      	mov	r0, r3
 801af34:	f001 ff08 	bl	801cd48 <SUBGRF_ReadRegister>
 801af38:	4603      	mov	r3, r0
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	3708      	adds	r7, #8
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}

0801af42 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af42:	b580      	push	{r7, lr}
 801af44:	b082      	sub	sp, #8
 801af46:	af00      	add	r7, sp, #0
 801af48:	4603      	mov	r3, r0
 801af4a:	6039      	str	r1, [r7, #0]
 801af4c:	80fb      	strh	r3, [r7, #6]
 801af4e:	4613      	mov	r3, r2
 801af50:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801af52:	797b      	ldrb	r3, [r7, #5]
 801af54:	b29a      	uxth	r2, r3
 801af56:	88fb      	ldrh	r3, [r7, #6]
 801af58:	6839      	ldr	r1, [r7, #0]
 801af5a:	4618      	mov	r0, r3
 801af5c:	f001 ff08 	bl	801cd70 <SUBGRF_WriteRegisters>
}
 801af60:	bf00      	nop
 801af62:	3708      	adds	r7, #8
 801af64:	46bd      	mov	sp, r7
 801af66:	bd80      	pop	{r7, pc}

0801af68 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	4603      	mov	r3, r0
 801af70:	6039      	str	r1, [r7, #0]
 801af72:	80fb      	strh	r3, [r7, #6]
 801af74:	4613      	mov	r3, r2
 801af76:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801af78:	797b      	ldrb	r3, [r7, #5]
 801af7a:	b29a      	uxth	r2, r3
 801af7c:	88fb      	ldrh	r3, [r7, #6]
 801af7e:	6839      	ldr	r1, [r7, #0]
 801af80:	4618      	mov	r0, r3
 801af82:	f001 ff17 	bl	801cdb4 <SUBGRF_ReadRegisters>
}
 801af86:	bf00      	nop
 801af88:	3708      	adds	r7, #8
 801af8a:	46bd      	mov	sp, r7
 801af8c:	bd80      	pop	{r7, pc}
	...

0801af90 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b082      	sub	sp, #8
 801af94:	af00      	add	r7, sp, #0
 801af96:	4603      	mov	r3, r0
 801af98:	460a      	mov	r2, r1
 801af9a:	71fb      	strb	r3, [r7, #7]
 801af9c:	4613      	mov	r3, r2
 801af9e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801afa0:	79fb      	ldrb	r3, [r7, #7]
 801afa2:	2b01      	cmp	r3, #1
 801afa4:	d10a      	bne.n	801afbc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801afa6:	4a0e      	ldr	r2, [pc, #56]	; (801afe0 <RadioSetMaxPayloadLength+0x50>)
 801afa8:	79bb      	ldrb	r3, [r7, #6]
 801afaa:	7013      	strb	r3, [r2, #0]
 801afac:	4b0c      	ldr	r3, [pc, #48]	; (801afe0 <RadioSetMaxPayloadLength+0x50>)
 801afae:	781a      	ldrb	r2, [r3, #0]
 801afb0:	4b0c      	ldr	r3, [pc, #48]	; (801afe4 <RadioSetMaxPayloadLength+0x54>)
 801afb2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afb4:	480c      	ldr	r0, [pc, #48]	; (801afe8 <RadioSetMaxPayloadLength+0x58>)
 801afb6:	f001 fd6b 	bl	801ca90 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801afba:	e00d      	b.n	801afd8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801afbc:	4b09      	ldr	r3, [pc, #36]	; (801afe4 <RadioSetMaxPayloadLength+0x54>)
 801afbe:	7d5b      	ldrb	r3, [r3, #21]
 801afc0:	2b01      	cmp	r3, #1
 801afc2:	d109      	bne.n	801afd8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801afc4:	4a06      	ldr	r2, [pc, #24]	; (801afe0 <RadioSetMaxPayloadLength+0x50>)
 801afc6:	79bb      	ldrb	r3, [r7, #6]
 801afc8:	7013      	strb	r3, [r2, #0]
 801afca:	4b05      	ldr	r3, [pc, #20]	; (801afe0 <RadioSetMaxPayloadLength+0x50>)
 801afcc:	781a      	ldrb	r2, [r3, #0]
 801afce:	4b05      	ldr	r3, [pc, #20]	; (801afe4 <RadioSetMaxPayloadLength+0x54>)
 801afd0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afd2:	4805      	ldr	r0, [pc, #20]	; (801afe8 <RadioSetMaxPayloadLength+0x58>)
 801afd4:	f001 fd5c 	bl	801ca90 <SUBGRF_SetPacketParams>
}
 801afd8:	bf00      	nop
 801afda:	3708      	adds	r7, #8
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}
 801afe0:	20000154 	.word	0x20000154
 801afe4:	20001830 	.word	0x20001830
 801afe8:	2000183e 	.word	0x2000183e

0801afec <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b082      	sub	sp, #8
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	4603      	mov	r3, r0
 801aff4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801aff6:	4a13      	ldr	r2, [pc, #76]	; (801b044 <RadioSetPublicNetwork+0x58>)
 801aff8:	79fb      	ldrb	r3, [r7, #7]
 801affa:	7313      	strb	r3, [r2, #12]
 801affc:	4b11      	ldr	r3, [pc, #68]	; (801b044 <RadioSetPublicNetwork+0x58>)
 801affe:	7b1a      	ldrb	r2, [r3, #12]
 801b000:	4b10      	ldr	r3, [pc, #64]	; (801b044 <RadioSetPublicNetwork+0x58>)
 801b002:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b004:	2001      	movs	r0, #1
 801b006:	f7ff f811 	bl	801a02c <RadioSetModem>
    if( enable == true )
 801b00a:	79fb      	ldrb	r3, [r7, #7]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d00a      	beq.n	801b026 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b010:	2134      	movs	r1, #52	; 0x34
 801b012:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b016:	f001 fe83 	bl	801cd20 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b01a:	2144      	movs	r1, #68	; 0x44
 801b01c:	f240 7041 	movw	r0, #1857	; 0x741
 801b020:	f001 fe7e 	bl	801cd20 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b024:	e009      	b.n	801b03a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b026:	2114      	movs	r1, #20
 801b028:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b02c:	f001 fe78 	bl	801cd20 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b030:	2124      	movs	r1, #36	; 0x24
 801b032:	f240 7041 	movw	r0, #1857	; 0x741
 801b036:	f001 fe73 	bl	801cd20 <SUBGRF_WriteRegister>
}
 801b03a:	bf00      	nop
 801b03c:	3708      	adds	r7, #8
 801b03e:	46bd      	mov	sp, r7
 801b040:	bd80      	pop	{r7, pc}
 801b042:	bf00      	nop
 801b044:	20001830 	.word	0x20001830

0801b048 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b04c:	f001 ffb8 	bl	801cfc0 <SUBGRF_GetRadioWakeUpTime>
 801b050:	4603      	mov	r3, r0
 801b052:	3303      	adds	r3, #3
}
 801b054:	4618      	mov	r0, r3
 801b056:	bd80      	pop	{r7, pc}

0801b058 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b082      	sub	sp, #8
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b060:	f000 f80e 	bl	801b080 <RadioOnTxTimeoutProcess>
}
 801b064:	bf00      	nop
 801b066:	3708      	adds	r7, #8
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}

0801b06c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b082      	sub	sp, #8
 801b070:	af00      	add	r7, sp, #0
 801b072:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b074:	f000 f818 	bl	801b0a8 <RadioOnRxTimeoutProcess>
}
 801b078:	bf00      	nop
 801b07a:	3708      	adds	r7, #8
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}

0801b080 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b080:	b580      	push	{r7, lr}
 801b082:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b084:	4b07      	ldr	r3, [pc, #28]	; (801b0a4 <RadioOnTxTimeoutProcess+0x24>)
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d008      	beq.n	801b09e <RadioOnTxTimeoutProcess+0x1e>
 801b08c:	4b05      	ldr	r3, [pc, #20]	; (801b0a4 <RadioOnTxTimeoutProcess+0x24>)
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	685b      	ldr	r3, [r3, #4]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d003      	beq.n	801b09e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b096:	4b03      	ldr	r3, [pc, #12]	; (801b0a4 <RadioOnTxTimeoutProcess+0x24>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	685b      	ldr	r3, [r3, #4]
 801b09c:	4798      	blx	r3
    }
}
 801b09e:	bf00      	nop
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	bf00      	nop
 801b0a4:	2000182c 	.word	0x2000182c

0801b0a8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b0ac:	4b07      	ldr	r3, [pc, #28]	; (801b0cc <RadioOnRxTimeoutProcess+0x24>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d008      	beq.n	801b0c6 <RadioOnRxTimeoutProcess+0x1e>
 801b0b4:	4b05      	ldr	r3, [pc, #20]	; (801b0cc <RadioOnRxTimeoutProcess+0x24>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	68db      	ldr	r3, [r3, #12]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d003      	beq.n	801b0c6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b0be:	4b03      	ldr	r3, [pc, #12]	; (801b0cc <RadioOnRxTimeoutProcess+0x24>)
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	68db      	ldr	r3, [r3, #12]
 801b0c4:	4798      	blx	r3
    }
}
 801b0c6:	bf00      	nop
 801b0c8:	bd80      	pop	{r7, pc}
 801b0ca:	bf00      	nop
 801b0cc:	2000182c 	.word	0x2000182c

0801b0d0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b082      	sub	sp, #8
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b0da:	4a05      	ldr	r2, [pc, #20]	; (801b0f0 <RadioOnDioIrq+0x20>)
 801b0dc:	88fb      	ldrh	r3, [r7, #6]
 801b0de:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b0e2:	f000 f807 	bl	801b0f4 <RadioIrqProcess>
}
 801b0e6:	bf00      	nop
 801b0e8:	3708      	adds	r7, #8
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	bd80      	pop	{r7, pc}
 801b0ee:	bf00      	nop
 801b0f0:	20001830 	.word	0x20001830

0801b0f4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b0f4:	b5b0      	push	{r4, r5, r7, lr}
 801b0f6:	b082      	sub	sp, #8
 801b0f8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b0fe:	2300      	movs	r3, #0
 801b100:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b102:	4ba8      	ldr	r3, [pc, #672]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b104:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b10c:	f000 810d 	beq.w	801b32a <RadioIrqProcess+0x236>
 801b110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b114:	f300 81e8 	bgt.w	801b4e8 <RadioIrqProcess+0x3f4>
 801b118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b11c:	f000 80f1 	beq.w	801b302 <RadioIrqProcess+0x20e>
 801b120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b124:	f300 81e0 	bgt.w	801b4e8 <RadioIrqProcess+0x3f4>
 801b128:	2b80      	cmp	r3, #128	; 0x80
 801b12a:	f000 80d6 	beq.w	801b2da <RadioIrqProcess+0x1e6>
 801b12e:	2b80      	cmp	r3, #128	; 0x80
 801b130:	f300 81da 	bgt.w	801b4e8 <RadioIrqProcess+0x3f4>
 801b134:	2b20      	cmp	r3, #32
 801b136:	dc49      	bgt.n	801b1cc <RadioIrqProcess+0xd8>
 801b138:	2b00      	cmp	r3, #0
 801b13a:	f340 81d5 	ble.w	801b4e8 <RadioIrqProcess+0x3f4>
 801b13e:	3b01      	subs	r3, #1
 801b140:	2b1f      	cmp	r3, #31
 801b142:	f200 81d1 	bhi.w	801b4e8 <RadioIrqProcess+0x3f4>
 801b146:	a201      	add	r2, pc, #4	; (adr r2, 801b14c <RadioIrqProcess+0x58>)
 801b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b14c:	0801b1d5 	.word	0x0801b1d5
 801b150:	0801b20f 	.word	0x0801b20f
 801b154:	0801b4e9 	.word	0x0801b4e9
 801b158:	0801b3c5 	.word	0x0801b3c5
 801b15c:	0801b4e9 	.word	0x0801b4e9
 801b160:	0801b4e9 	.word	0x0801b4e9
 801b164:	0801b4e9 	.word	0x0801b4e9
 801b168:	0801b441 	.word	0x0801b441
 801b16c:	0801b4e9 	.word	0x0801b4e9
 801b170:	0801b4e9 	.word	0x0801b4e9
 801b174:	0801b4e9 	.word	0x0801b4e9
 801b178:	0801b4e9 	.word	0x0801b4e9
 801b17c:	0801b4e9 	.word	0x0801b4e9
 801b180:	0801b4e9 	.word	0x0801b4e9
 801b184:	0801b4e9 	.word	0x0801b4e9
 801b188:	0801b45d 	.word	0x0801b45d
 801b18c:	0801b4e9 	.word	0x0801b4e9
 801b190:	0801b4e9 	.word	0x0801b4e9
 801b194:	0801b4e9 	.word	0x0801b4e9
 801b198:	0801b4e9 	.word	0x0801b4e9
 801b19c:	0801b4e9 	.word	0x0801b4e9
 801b1a0:	0801b4e9 	.word	0x0801b4e9
 801b1a4:	0801b4e9 	.word	0x0801b4e9
 801b1a8:	0801b4e9 	.word	0x0801b4e9
 801b1ac:	0801b4e9 	.word	0x0801b4e9
 801b1b0:	0801b4e9 	.word	0x0801b4e9
 801b1b4:	0801b4e9 	.word	0x0801b4e9
 801b1b8:	0801b4e9 	.word	0x0801b4e9
 801b1bc:	0801b4e9 	.word	0x0801b4e9
 801b1c0:	0801b4e9 	.word	0x0801b4e9
 801b1c4:	0801b4e9 	.word	0x0801b4e9
 801b1c8:	0801b46b 	.word	0x0801b46b
 801b1cc:	2b40      	cmp	r3, #64	; 0x40
 801b1ce:	f000 816d 	beq.w	801b4ac <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b1d2:	e189      	b.n	801b4e8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b1d4:	4874      	ldr	r0, [pc, #464]	; (801b3a8 <RadioIrqProcess+0x2b4>)
 801b1d6:	f002 ffbf 	bl	801e158 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b1da:	2000      	movs	r0, #0
 801b1dc:	f001 f81c 	bl	801c218 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b1e0:	f002 f892 	bl	801d308 <RFW_Is_LongPacketModeEnabled>
 801b1e4:	4603      	mov	r3, r0
 801b1e6:	2b01      	cmp	r3, #1
 801b1e8:	d101      	bne.n	801b1ee <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b1ea:	f002 f8b6 	bl	801d35a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b1ee:	4b6f      	ldr	r3, [pc, #444]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	f000 817a 	beq.w	801b4ec <RadioIrqProcess+0x3f8>
 801b1f8:	4b6c      	ldr	r3, [pc, #432]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	f000 8174 	beq.w	801b4ec <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b204:	4b69      	ldr	r3, [pc, #420]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	4798      	blx	r3
        break;
 801b20c:	e16e      	b.n	801b4ec <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b20e:	4868      	ldr	r0, [pc, #416]	; (801b3b0 <RadioIrqProcess+0x2bc>)
 801b210:	f002 ffa2 	bl	801e158 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b214:	4b63      	ldr	r3, [pc, #396]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b216:	785b      	ldrb	r3, [r3, #1]
 801b218:	f083 0301 	eor.w	r3, r3, #1
 801b21c:	b2db      	uxtb	r3, r3
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d014      	beq.n	801b24c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b222:	2000      	movs	r0, #0
 801b224:	f000 fff8 	bl	801c218 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b228:	2100      	movs	r1, #0
 801b22a:	f640 1002 	movw	r0, #2306	; 0x902
 801b22e:	f001 fd77 	bl	801cd20 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b232:	f640 1044 	movw	r0, #2372	; 0x944
 801b236:	f001 fd87 	bl	801cd48 <SUBGRF_ReadRegister>
 801b23a:	4603      	mov	r3, r0
 801b23c:	f043 0302 	orr.w	r3, r3, #2
 801b240:	b2db      	uxtb	r3, r3
 801b242:	4619      	mov	r1, r3
 801b244:	f640 1044 	movw	r0, #2372	; 0x944
 801b248:	f001 fd6a 	bl	801cd20 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b24c:	1dfb      	adds	r3, r7, #7
 801b24e:	22ff      	movs	r2, #255	; 0xff
 801b250:	4619      	mov	r1, r3
 801b252:	4858      	ldr	r0, [pc, #352]	; (801b3b4 <RadioIrqProcess+0x2c0>)
 801b254:	f000 feb0 	bl	801bfb8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b258:	4857      	ldr	r0, [pc, #348]	; (801b3b8 <RadioIrqProcess+0x2c4>)
 801b25a:	f001 fd0f 	bl	801cc7c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b25e:	4b53      	ldr	r3, [pc, #332]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	2b00      	cmp	r3, #0
 801b264:	f000 8144 	beq.w	801b4f0 <RadioIrqProcess+0x3fc>
 801b268:	4b50      	ldr	r3, [pc, #320]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	689b      	ldr	r3, [r3, #8]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	f000 813e 	beq.w	801b4f0 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b274:	4b4b      	ldr	r3, [pc, #300]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b27a:	2b01      	cmp	r3, #1
 801b27c:	d10e      	bne.n	801b29c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b27e:	4b4b      	ldr	r3, [pc, #300]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	689c      	ldr	r4, [r3, #8]
 801b284:	79fb      	ldrb	r3, [r7, #7]
 801b286:	b299      	uxth	r1, r3
 801b288:	4b46      	ldr	r3, [pc, #280]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b28a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b28e:	b21a      	sxth	r2, r3
 801b290:	4b44      	ldr	r3, [pc, #272]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b292:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b296:	4847      	ldr	r0, [pc, #284]	; (801b3b4 <RadioIrqProcess+0x2c0>)
 801b298:	47a0      	blx	r4
                break;
 801b29a:	e01d      	b.n	801b2d8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b29c:	4b41      	ldr	r3, [pc, #260]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2a0:	463a      	mov	r2, r7
 801b2a2:	4611      	mov	r1, r2
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f001 ff7d 	bl	801d1a4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b2aa:	4b40      	ldr	r3, [pc, #256]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	689c      	ldr	r4, [r3, #8]
 801b2b0:	79fb      	ldrb	r3, [r7, #7]
 801b2b2:	b299      	uxth	r1, r3
 801b2b4:	4b3b      	ldr	r3, [pc, #236]	; (801b3a4 <RadioIrqProcess+0x2b0>)
 801b2b6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b2ba:	b218      	sxth	r0, r3
 801b2bc:	683b      	ldr	r3, [r7, #0]
 801b2be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b2c2:	4a3e      	ldr	r2, [pc, #248]	; (801b3bc <RadioIrqProcess+0x2c8>)
 801b2c4:	fb82 5203 	smull	r5, r2, r2, r3
 801b2c8:	1192      	asrs	r2, r2, #6
 801b2ca:	17db      	asrs	r3, r3, #31
 801b2cc:	1ad3      	subs	r3, r2, r3
 801b2ce:	b25b      	sxtb	r3, r3
 801b2d0:	4602      	mov	r2, r0
 801b2d2:	4838      	ldr	r0, [pc, #224]	; (801b3b4 <RadioIrqProcess+0x2c0>)
 801b2d4:	47a0      	blx	r4
                break;
 801b2d6:	bf00      	nop
        break;
 801b2d8:	e10a      	b.n	801b4f0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b2da:	2000      	movs	r0, #0
 801b2dc:	f000 ff9c 	bl	801c218 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2e0:	4b32      	ldr	r3, [pc, #200]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	f000 8105 	beq.w	801b4f4 <RadioIrqProcess+0x400>
 801b2ea:	4b30      	ldr	r3, [pc, #192]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	699b      	ldr	r3, [r3, #24]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	f000 80ff 	beq.w	801b4f4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b2f6:	4b2d      	ldr	r3, [pc, #180]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	699b      	ldr	r3, [r3, #24]
 801b2fc:	2000      	movs	r0, #0
 801b2fe:	4798      	blx	r3
        break;
 801b300:	e0f8      	b.n	801b4f4 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b302:	2000      	movs	r0, #0
 801b304:	f000 ff88 	bl	801c218 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b308:	4b28      	ldr	r3, [pc, #160]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	f000 80f3 	beq.w	801b4f8 <RadioIrqProcess+0x404>
 801b312:	4b26      	ldr	r3, [pc, #152]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	699b      	ldr	r3, [r3, #24]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	f000 80ed 	beq.w	801b4f8 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b31e:	4b23      	ldr	r3, [pc, #140]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	699b      	ldr	r3, [r3, #24]
 801b324:	2001      	movs	r0, #1
 801b326:	4798      	blx	r3
        break;
 801b328:	e0e6      	b.n	801b4f8 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b32a:	4b25      	ldr	r3, [pc, #148]	; (801b3c0 <RadioIrqProcess+0x2cc>)
 801b32c:	2201      	movs	r2, #1
 801b32e:	2100      	movs	r1, #0
 801b330:	2002      	movs	r0, #2
 801b332:	f003 f91b 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b336:	f000 fe25 	bl	801bf84 <SUBGRF_GetOperatingMode>
 801b33a:	4603      	mov	r3, r0
 801b33c:	2b04      	cmp	r3, #4
 801b33e:	d115      	bne.n	801b36c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b340:	4819      	ldr	r0, [pc, #100]	; (801b3a8 <RadioIrqProcess+0x2b4>)
 801b342:	f002 ff09 	bl	801e158 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b346:	2000      	movs	r0, #0
 801b348:	f000 ff66 	bl	801c218 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b34c:	4b17      	ldr	r3, [pc, #92]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	2b00      	cmp	r3, #0
 801b352:	f000 80d3 	beq.w	801b4fc <RadioIrqProcess+0x408>
 801b356:	4b15      	ldr	r3, [pc, #84]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	685b      	ldr	r3, [r3, #4]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	f000 80cd 	beq.w	801b4fc <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b362:	4b12      	ldr	r3, [pc, #72]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	685b      	ldr	r3, [r3, #4]
 801b368:	4798      	blx	r3
        break;
 801b36a:	e0c7      	b.n	801b4fc <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b36c:	f000 fe0a 	bl	801bf84 <SUBGRF_GetOperatingMode>
 801b370:	4603      	mov	r3, r0
 801b372:	2b05      	cmp	r3, #5
 801b374:	f040 80c2 	bne.w	801b4fc <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b378:	480d      	ldr	r0, [pc, #52]	; (801b3b0 <RadioIrqProcess+0x2bc>)
 801b37a:	f002 feed 	bl	801e158 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b37e:	2000      	movs	r0, #0
 801b380:	f000 ff4a 	bl	801c218 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b384:	4b09      	ldr	r3, [pc, #36]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	f000 80b7 	beq.w	801b4fc <RadioIrqProcess+0x408>
 801b38e:	4b07      	ldr	r3, [pc, #28]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	68db      	ldr	r3, [r3, #12]
 801b394:	2b00      	cmp	r3, #0
 801b396:	f000 80b1 	beq.w	801b4fc <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b39a:	4b04      	ldr	r3, [pc, #16]	; (801b3ac <RadioIrqProcess+0x2b8>)
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	68db      	ldr	r3, [r3, #12]
 801b3a0:	4798      	blx	r3
        break;
 801b3a2:	e0ab      	b.n	801b4fc <RadioIrqProcess+0x408>
 801b3a4:	20001830 	.word	0x20001830
 801b3a8:	2000188c 	.word	0x2000188c
 801b3ac:	2000182c 	.word	0x2000182c
 801b3b0:	200018a4 	.word	0x200018a4
 801b3b4:	2000172c 	.word	0x2000172c
 801b3b8:	20001854 	.word	0x20001854
 801b3bc:	10624dd3 	.word	0x10624dd3
 801b3c0:	0801f458 	.word	0x0801f458
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b3c4:	4b54      	ldr	r3, [pc, #336]	; (801b518 <RadioIrqProcess+0x424>)
 801b3c6:	2201      	movs	r2, #1
 801b3c8:	2100      	movs	r1, #0
 801b3ca:	2002      	movs	r0, #2
 801b3cc:	f003 f8ce 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b3d0:	4b52      	ldr	r3, [pc, #328]	; (801b51c <RadioIrqProcess+0x428>)
 801b3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	f000 8093 	beq.w	801b500 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b3da:	4a51      	ldr	r2, [pc, #324]	; (801b520 <RadioIrqProcess+0x42c>)
 801b3dc:	4b4f      	ldr	r3, [pc, #316]	; (801b51c <RadioIrqProcess+0x428>)
 801b3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3e0:	0c1b      	lsrs	r3, r3, #16
 801b3e2:	b2db      	uxtb	r3, r3
 801b3e4:	4619      	mov	r1, r3
 801b3e6:	f640 1003 	movw	r0, #2307	; 0x903
 801b3ea:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b3ec:	4a4c      	ldr	r2, [pc, #304]	; (801b520 <RadioIrqProcess+0x42c>)
 801b3ee:	4b4b      	ldr	r3, [pc, #300]	; (801b51c <RadioIrqProcess+0x428>)
 801b3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3f2:	0a1b      	lsrs	r3, r3, #8
 801b3f4:	b2db      	uxtb	r3, r3
 801b3f6:	4619      	mov	r1, r3
 801b3f8:	f640 1004 	movw	r0, #2308	; 0x904
 801b3fc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b3fe:	4a48      	ldr	r2, [pc, #288]	; (801b520 <RadioIrqProcess+0x42c>)
 801b400:	4b46      	ldr	r3, [pc, #280]	; (801b51c <RadioIrqProcess+0x428>)
 801b402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b404:	b2db      	uxtb	r3, r3
 801b406:	4619      	mov	r1, r3
 801b408:	f640 1005 	movw	r0, #2309	; 0x905
 801b40c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b40e:	4c44      	ldr	r4, [pc, #272]	; (801b520 <RadioIrqProcess+0x42c>)
 801b410:	4b44      	ldr	r3, [pc, #272]	; (801b524 <RadioIrqProcess+0x430>)
 801b412:	f640 1002 	movw	r0, #2306	; 0x902
 801b416:	4798      	blx	r3
 801b418:	4603      	mov	r3, r0
 801b41a:	f043 0301 	orr.w	r3, r3, #1
 801b41e:	b2db      	uxtb	r3, r3
 801b420:	4619      	mov	r1, r3
 801b422:	f640 1002 	movw	r0, #2306	; 0x902
 801b426:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b428:	4b3c      	ldr	r3, [pc, #240]	; (801b51c <RadioIrqProcess+0x428>)
 801b42a:	2200      	movs	r2, #0
 801b42c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b42e:	2300      	movs	r3, #0
 801b430:	2200      	movs	r2, #0
 801b432:	f240 2162 	movw	r1, #610	; 0x262
 801b436:	f240 2062 	movw	r0, #610	; 0x262
 801b43a:	f001 f8c1 	bl	801c5c0 <SUBGRF_SetDioIrqParams>
        break;
 801b43e:	e05f      	b.n	801b500 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b440:	4b39      	ldr	r3, [pc, #228]	; (801b528 <RadioIrqProcess+0x434>)
 801b442:	2201      	movs	r2, #1
 801b444:	2100      	movs	r1, #0
 801b446:	2002      	movs	r0, #2
 801b448:	f003 f890 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b44c:	f001 ff55 	bl	801d2fa <RFW_Is_Init>
 801b450:	4603      	mov	r3, r0
 801b452:	2b01      	cmp	r3, #1
 801b454:	d156      	bne.n	801b504 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b456:	f001 ff86 	bl	801d366 <RFW_ReceivePayload>
        break;
 801b45a:	e053      	b.n	801b504 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b45c:	4b33      	ldr	r3, [pc, #204]	; (801b52c <RadioIrqProcess+0x438>)
 801b45e:	2201      	movs	r2, #1
 801b460:	2100      	movs	r1, #0
 801b462:	2002      	movs	r0, #2
 801b464:	f003 f882 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b468:	e051      	b.n	801b50e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b46a:	4831      	ldr	r0, [pc, #196]	; (801b530 <RadioIrqProcess+0x43c>)
 801b46c:	f002 fe74 	bl	801e158 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b470:	4b2a      	ldr	r3, [pc, #168]	; (801b51c <RadioIrqProcess+0x428>)
 801b472:	785b      	ldrb	r3, [r3, #1]
 801b474:	f083 0301 	eor.w	r3, r3, #1
 801b478:	b2db      	uxtb	r3, r3
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d002      	beq.n	801b484 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b47e:	2000      	movs	r0, #0
 801b480:	f000 feca 	bl	801c218 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b484:	4b2b      	ldr	r3, [pc, #172]	; (801b534 <RadioIrqProcess+0x440>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d03d      	beq.n	801b508 <RadioIrqProcess+0x414>
 801b48c:	4b29      	ldr	r3, [pc, #164]	; (801b534 <RadioIrqProcess+0x440>)
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	68db      	ldr	r3, [r3, #12]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d038      	beq.n	801b508 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b496:	4b27      	ldr	r3, [pc, #156]	; (801b534 <RadioIrqProcess+0x440>)
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	68db      	ldr	r3, [r3, #12]
 801b49c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b49e:	4b26      	ldr	r3, [pc, #152]	; (801b538 <RadioIrqProcess+0x444>)
 801b4a0:	2201      	movs	r2, #1
 801b4a2:	2100      	movs	r1, #0
 801b4a4:	2002      	movs	r0, #2
 801b4a6:	f003 f861 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b4aa:	e02d      	b.n	801b508 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b4ac:	4b23      	ldr	r3, [pc, #140]	; (801b53c <RadioIrqProcess+0x448>)
 801b4ae:	2201      	movs	r2, #1
 801b4b0:	2100      	movs	r1, #0
 801b4b2:	2002      	movs	r0, #2
 801b4b4:	f003 f85a 	bl	801e56c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b4b8:	4b18      	ldr	r3, [pc, #96]	; (801b51c <RadioIrqProcess+0x428>)
 801b4ba:	785b      	ldrb	r3, [r3, #1]
 801b4bc:	f083 0301 	eor.w	r3, r3, #1
 801b4c0:	b2db      	uxtb	r3, r3
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d002      	beq.n	801b4cc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b4c6:	2000      	movs	r0, #0
 801b4c8:	f000 fea6 	bl	801c218 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b4cc:	4b19      	ldr	r3, [pc, #100]	; (801b534 <RadioIrqProcess+0x440>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d01b      	beq.n	801b50c <RadioIrqProcess+0x418>
 801b4d4:	4b17      	ldr	r3, [pc, #92]	; (801b534 <RadioIrqProcess+0x440>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	691b      	ldr	r3, [r3, #16]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d016      	beq.n	801b50c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b4de:	4b15      	ldr	r3, [pc, #84]	; (801b534 <RadioIrqProcess+0x440>)
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	691b      	ldr	r3, [r3, #16]
 801b4e4:	4798      	blx	r3
        break;
 801b4e6:	e011      	b.n	801b50c <RadioIrqProcess+0x418>
        break;
 801b4e8:	bf00      	nop
 801b4ea:	e010      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b4ec:	bf00      	nop
 801b4ee:	e00e      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b4f0:	bf00      	nop
 801b4f2:	e00c      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b4f4:	bf00      	nop
 801b4f6:	e00a      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b4f8:	bf00      	nop
 801b4fa:	e008      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b4fc:	bf00      	nop
 801b4fe:	e006      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b500:	bf00      	nop
 801b502:	e004      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b504:	bf00      	nop
 801b506:	e002      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b508:	bf00      	nop
 801b50a:	e000      	b.n	801b50e <RadioIrqProcess+0x41a>
        break;
 801b50c:	bf00      	nop
    }
}
 801b50e:	bf00      	nop
 801b510:	3708      	adds	r7, #8
 801b512:	46bd      	mov	sp, r7
 801b514:	bdb0      	pop	{r4, r5, r7, pc}
 801b516:	bf00      	nop
 801b518:	0801f46c 	.word	0x0801f46c
 801b51c:	20001830 	.word	0x20001830
 801b520:	0801af03 	.word	0x0801af03
 801b524:	0801af27 	.word	0x0801af27
 801b528:	0801f478 	.word	0x0801f478
 801b52c:	0801f484 	.word	0x0801f484
 801b530:	200018a4 	.word	0x200018a4
 801b534:	2000182c 	.word	0x2000182c
 801b538:	0801f490 	.word	0x0801f490
 801b53c:	0801f49c 	.word	0x0801f49c

0801b540 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b540:	b580      	push	{r7, lr}
 801b542:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b544:	4b09      	ldr	r3, [pc, #36]	; (801b56c <RadioTxPrbs+0x2c>)
 801b546:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b54a:	2101      	movs	r1, #1
 801b54c:	4618      	mov	r0, r3
 801b54e:	f001 fcdb 	bl	801cf08 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b552:	4b07      	ldr	r3, [pc, #28]	; (801b570 <RadioTxPrbs+0x30>)
 801b554:	212d      	movs	r1, #45	; 0x2d
 801b556:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b55a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b55c:	f000 ff1f 	bl	801c39e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b560:	4804      	ldr	r0, [pc, #16]	; (801b574 <RadioTxPrbs+0x34>)
 801b562:	f000 fe75 	bl	801c250 <SUBGRF_SetTx>
}
 801b566:	bf00      	nop
 801b568:	bd80      	pop	{r7, pc}
 801b56a:	bf00      	nop
 801b56c:	20001830 	.word	0x20001830
 801b570:	0801af03 	.word	0x0801af03
 801b574:	000fffff 	.word	0x000fffff

0801b578 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b084      	sub	sp, #16
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	4603      	mov	r3, r0
 801b580:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b586:	4618      	mov	r0, r3
 801b588:	f001 fce6 	bl	801cf58 <SUBGRF_SetRfTxPower>
 801b58c:	4603      	mov	r3, r0
 801b58e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b590:	210e      	movs	r1, #14
 801b592:	f640 101f 	movw	r0, #2335	; 0x91f
 801b596:	f001 fbc3 	bl	801cd20 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b59a:	7bfb      	ldrb	r3, [r7, #15]
 801b59c:	2101      	movs	r1, #1
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f001 fcb2 	bl	801cf08 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b5a4:	f000 fef2 	bl	801c38c <SUBGRF_SetTxContinuousWave>
}
 801b5a8:	bf00      	nop
 801b5aa:	3710      	adds	r7, #16
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}

0801b5b0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b5b0:	b480      	push	{r7}
 801b5b2:	b089      	sub	sp, #36	; 0x24
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	60f8      	str	r0, [r7, #12]
 801b5b8:	60b9      	str	r1, [r7, #8]
 801b5ba:	4613      	mov	r3, r2
 801b5bc:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b5be:	2300      	movs	r3, #0
 801b5c0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	61bb      	str	r3, [r7, #24]
 801b5ca:	e011      	b.n	801b5f0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b5cc:	69bb      	ldr	r3, [r7, #24]
 801b5ce:	68ba      	ldr	r2, [r7, #8]
 801b5d0:	4413      	add	r3, r2
 801b5d2:	781a      	ldrb	r2, [r3, #0]
 801b5d4:	69bb      	ldr	r3, [r7, #24]
 801b5d6:	68b9      	ldr	r1, [r7, #8]
 801b5d8:	440b      	add	r3, r1
 801b5da:	43d2      	mvns	r2, r2
 801b5dc:	b2d2      	uxtb	r2, r2
 801b5de:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b5e0:	69bb      	ldr	r3, [r7, #24]
 801b5e2:	68fa      	ldr	r2, [r7, #12]
 801b5e4:	4413      	add	r3, r2
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b5ea:	69bb      	ldr	r3, [r7, #24]
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	61bb      	str	r3, [r7, #24]
 801b5f0:	79fb      	ldrb	r3, [r7, #7]
 801b5f2:	69ba      	ldr	r2, [r7, #24]
 801b5f4:	429a      	cmp	r2, r3
 801b5f6:	dbe9      	blt.n	801b5cc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b5f8:	2300      	movs	r3, #0
 801b5fa:	61bb      	str	r3, [r7, #24]
 801b5fc:	e049      	b.n	801b692 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b5fe:	69bb      	ldr	r3, [r7, #24]
 801b600:	425a      	negs	r2, r3
 801b602:	f003 0307 	and.w	r3, r3, #7
 801b606:	f002 0207 	and.w	r2, r2, #7
 801b60a:	bf58      	it	pl
 801b60c:	4253      	negpl	r3, r2
 801b60e:	b2db      	uxtb	r3, r3
 801b610:	f1c3 0307 	rsb	r3, r3, #7
 801b614:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b616:	69bb      	ldr	r3, [r7, #24]
 801b618:	2b00      	cmp	r3, #0
 801b61a:	da00      	bge.n	801b61e <payload_integration+0x6e>
 801b61c:	3307      	adds	r3, #7
 801b61e:	10db      	asrs	r3, r3, #3
 801b620:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b622:	69bb      	ldr	r3, [r7, #24]
 801b624:	3301      	adds	r3, #1
 801b626:	425a      	negs	r2, r3
 801b628:	f003 0307 	and.w	r3, r3, #7
 801b62c:	f002 0207 	and.w	r2, r2, #7
 801b630:	bf58      	it	pl
 801b632:	4253      	negpl	r3, r2
 801b634:	b2db      	uxtb	r3, r3
 801b636:	f1c3 0307 	rsb	r3, r3, #7
 801b63a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b63c:	69bb      	ldr	r3, [r7, #24]
 801b63e:	3301      	adds	r3, #1
 801b640:	2b00      	cmp	r3, #0
 801b642:	da00      	bge.n	801b646 <payload_integration+0x96>
 801b644:	3307      	adds	r3, #7
 801b646:	10db      	asrs	r3, r3, #3
 801b648:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b64a:	7dbb      	ldrb	r3, [r7, #22]
 801b64c:	68ba      	ldr	r2, [r7, #8]
 801b64e:	4413      	add	r3, r2
 801b650:	781b      	ldrb	r3, [r3, #0]
 801b652:	461a      	mov	r2, r3
 801b654:	7dfb      	ldrb	r3, [r7, #23]
 801b656:	fa42 f303 	asr.w	r3, r2, r3
 801b65a:	b2db      	uxtb	r3, r3
 801b65c:	f003 0301 	and.w	r3, r3, #1
 801b660:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b662:	7ffa      	ldrb	r2, [r7, #31]
 801b664:	7cfb      	ldrb	r3, [r7, #19]
 801b666:	4053      	eors	r3, r2
 801b668:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b66a:	7d3b      	ldrb	r3, [r7, #20]
 801b66c:	68fa      	ldr	r2, [r7, #12]
 801b66e:	4413      	add	r3, r2
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	b25a      	sxtb	r2, r3
 801b674:	7ff9      	ldrb	r1, [r7, #31]
 801b676:	7d7b      	ldrb	r3, [r7, #21]
 801b678:	fa01 f303 	lsl.w	r3, r1, r3
 801b67c:	b25b      	sxtb	r3, r3
 801b67e:	4313      	orrs	r3, r2
 801b680:	b259      	sxtb	r1, r3
 801b682:	7d3b      	ldrb	r3, [r7, #20]
 801b684:	68fa      	ldr	r2, [r7, #12]
 801b686:	4413      	add	r3, r2
 801b688:	b2ca      	uxtb	r2, r1
 801b68a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b68c:	69bb      	ldr	r3, [r7, #24]
 801b68e:	3301      	adds	r3, #1
 801b690:	61bb      	str	r3, [r7, #24]
 801b692:	79fb      	ldrb	r3, [r7, #7]
 801b694:	00db      	lsls	r3, r3, #3
 801b696:	69ba      	ldr	r2, [r7, #24]
 801b698:	429a      	cmp	r2, r3
 801b69a:	dbb0      	blt.n	801b5fe <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b69c:	7ffb      	ldrb	r3, [r7, #31]
 801b69e:	01db      	lsls	r3, r3, #7
 801b6a0:	b25a      	sxtb	r2, r3
 801b6a2:	7ffb      	ldrb	r3, [r7, #31]
 801b6a4:	019b      	lsls	r3, r3, #6
 801b6a6:	b25b      	sxtb	r3, r3
 801b6a8:	4313      	orrs	r3, r2
 801b6aa:	b25b      	sxtb	r3, r3
 801b6ac:	7ffa      	ldrb	r2, [r7, #31]
 801b6ae:	2a00      	cmp	r2, #0
 801b6b0:	d101      	bne.n	801b6b6 <payload_integration+0x106>
 801b6b2:	2220      	movs	r2, #32
 801b6b4:	e000      	b.n	801b6b8 <payload_integration+0x108>
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	4313      	orrs	r3, r2
 801b6ba:	b259      	sxtb	r1, r3
 801b6bc:	79fb      	ldrb	r3, [r7, #7]
 801b6be:	68fa      	ldr	r2, [r7, #12]
 801b6c0:	4413      	add	r3, r2
 801b6c2:	b2ca      	uxtb	r2, r1
 801b6c4:	701a      	strb	r2, [r3, #0]
}
 801b6c6:	bf00      	nop
 801b6c8:	3724      	adds	r7, #36	; 0x24
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bc80      	pop	{r7}
 801b6ce:	4770      	bx	lr

0801b6d0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b08c      	sub	sp, #48	; 0x30
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	60b9      	str	r1, [r7, #8]
 801b6d8:	607a      	str	r2, [r7, #4]
 801b6da:	603b      	str	r3, [r7, #0]
 801b6dc:	4603      	mov	r3, r0
 801b6de:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	623b      	str	r3, [r7, #32]
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b6ec:	f001 fdff 	bl	801d2ee <RFW_DeInit>

    if( rxContinuous != 0 )
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d001      	beq.n	801b6fa <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	bf14      	ite	ne
 801b700:	2301      	movne	r3, #1
 801b702:	2300      	moveq	r3, #0
 801b704:	b2da      	uxtb	r2, r3
 801b706:	4ba3      	ldr	r3, [pc, #652]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b708:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b70a:	7bfb      	ldrb	r3, [r7, #15]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d003      	beq.n	801b718 <RadioSetRxGenericConfig+0x48>
 801b710:	2b01      	cmp	r3, #1
 801b712:	f000 80dc 	beq.w	801b8ce <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b716:	e194      	b.n	801ba42 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b718:	68bb      	ldr	r3, [r7, #8]
 801b71a:	689b      	ldr	r3, [r3, #8]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d003      	beq.n	801b728 <RadioSetRxGenericConfig+0x58>
 801b720:	68bb      	ldr	r3, [r7, #8]
 801b722:	68db      	ldr	r3, [r3, #12]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d102      	bne.n	801b72e <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b728:	f04f 33ff 	mov.w	r3, #4294967295
 801b72c:	e18a      	b.n	801ba44 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	7f9b      	ldrb	r3, [r3, #30]
 801b732:	2b08      	cmp	r3, #8
 801b734:	d902      	bls.n	801b73c <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b736:	f04f 33ff 	mov.w	r3, #4294967295
 801b73a:	e183      	b.n	801ba44 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b73c:	68bb      	ldr	r3, [r7, #8]
 801b73e:	6919      	ldr	r1, [r3, #16]
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	7f9b      	ldrb	r3, [r3, #30]
 801b744:	b29a      	uxth	r2, r3
 801b746:	f107 0320 	add.w	r3, r7, #32
 801b74a:	4618      	mov	r0, r3
 801b74c:	f001 fec2 	bl	801d4d4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	2b00      	cmp	r3, #0
 801b756:	bf14      	ite	ne
 801b758:	2301      	movne	r3, #1
 801b75a:	2300      	moveq	r3, #0
 801b75c:	b2db      	uxtb	r3, r3
 801b75e:	4618      	mov	r0, r3
 801b760:	f000 fe26 	bl	801c3b0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b764:	4b8b      	ldr	r3, [pc, #556]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b766:	2200      	movs	r2, #0
 801b768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b76c:	68bb      	ldr	r3, [r7, #8]
 801b76e:	689b      	ldr	r3, [r3, #8]
 801b770:	4a88      	ldr	r2, [pc, #544]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b772:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b774:	68bb      	ldr	r3, [r7, #8]
 801b776:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b77a:	4b86      	ldr	r3, [pc, #536]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b77c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	4618      	mov	r0, r3
 801b786:	f001 fce5 	bl	801d154 <SUBGRF_GetFskBandwidthRegValue>
 801b78a:	4603      	mov	r3, r0
 801b78c:	461a      	mov	r2, r3
 801b78e:	4b81      	ldr	r3, [pc, #516]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b794:	4b7f      	ldr	r3, [pc, #508]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b796:	2200      	movs	r2, #0
 801b798:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b79a:	68bb      	ldr	r3, [r7, #8]
 801b79c:	68db      	ldr	r3, [r3, #12]
 801b79e:	b29b      	uxth	r3, r3
 801b7a0:	00db      	lsls	r3, r3, #3
 801b7a2:	b29a      	uxth	r2, r3
 801b7a4:	4b7b      	ldr	r3, [pc, #492]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7a6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b7a8:	68bb      	ldr	r3, [r7, #8]
 801b7aa:	7fda      	ldrb	r2, [r3, #31]
 801b7ac:	4b79      	ldr	r3, [pc, #484]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7ae:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b7b0:	68bb      	ldr	r3, [r7, #8]
 801b7b2:	7f9b      	ldrb	r3, [r3, #30]
 801b7b4:	00db      	lsls	r3, r3, #3
 801b7b6:	b2da      	uxtb	r2, r3
 801b7b8:	4b76      	ldr	r3, [pc, #472]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7ba:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b7c2:	4b74      	ldr	r3, [pc, #464]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7c4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d105      	bne.n	801b7dc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	695b      	ldr	r3, [r3, #20]
 801b7d4:	b2da      	uxtb	r2, r3
 801b7d6:	4b6f      	ldr	r3, [pc, #444]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7d8:	759a      	strb	r2, [r3, #22]
 801b7da:	e00b      	b.n	801b7f4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7e2:	2b02      	cmp	r3, #2
 801b7e4:	d103      	bne.n	801b7ee <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7e6:	4b6b      	ldr	r3, [pc, #428]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7e8:	22ff      	movs	r2, #255	; 0xff
 801b7ea:	759a      	strb	r2, [r3, #22]
 801b7ec:	e002      	b.n	801b7f4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7ee:	4b69      	ldr	r3, [pc, #420]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b7f0:	22ff      	movs	r2, #255	; 0xff
 801b7f2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b7f4:	68bb      	ldr	r3, [r7, #8]
 801b7f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b7fa:	2b02      	cmp	r3, #2
 801b7fc:	d004      	beq.n	801b808 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b804:	2b02      	cmp	r3, #2
 801b806:	d12d      	bne.n	801b864 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b808:	68bb      	ldr	r3, [r7, #8]
 801b80a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b80e:	2bf1      	cmp	r3, #241	; 0xf1
 801b810:	d00c      	beq.n	801b82c <RadioSetRxGenericConfig+0x15c>
 801b812:	68bb      	ldr	r3, [r7, #8]
 801b814:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b818:	2bf2      	cmp	r3, #242	; 0xf2
 801b81a:	d007      	beq.n	801b82c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b81c:	68bb      	ldr	r3, [r7, #8]
 801b81e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b822:	2b01      	cmp	r3, #1
 801b824:	d002      	beq.n	801b82c <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b826:	f04f 33ff 	mov.w	r3, #4294967295
 801b82a:	e10b      	b.n	801ba44 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b82c:	2300      	movs	r3, #0
 801b82e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b834:	4b58      	ldr	r3, [pc, #352]	; (801b998 <RadioSetRxGenericConfig+0x2c8>)
 801b836:	6819      	ldr	r1, [r3, #0]
 801b838:	f107 0314 	add.w	r3, r7, #20
 801b83c:	4a57      	ldr	r2, [pc, #348]	; (801b99c <RadioSetRxGenericConfig+0x2cc>)
 801b83e:	4618      	mov	r0, r3
 801b840:	f001 fd48 	bl	801d2d4 <RFW_Init>
 801b844:	4603      	mov	r3, r0
 801b846:	2b00      	cmp	r3, #0
 801b848:	d002      	beq.n	801b850 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b84a:	f04f 33ff 	mov.w	r3, #4294967295
 801b84e:	e0f9      	b.n	801ba44 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b850:	4b50      	ldr	r3, [pc, #320]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b852:	2200      	movs	r2, #0
 801b854:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b856:	4b4f      	ldr	r3, [pc, #316]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b858:	2201      	movs	r2, #1
 801b85a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b85c:	4b4d      	ldr	r3, [pc, #308]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b85e:	2200      	movs	r2, #0
 801b860:	755a      	strb	r2, [r3, #21]
        {
 801b862:	e00e      	b.n	801b882 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b864:	68bb      	ldr	r3, [r7, #8]
 801b866:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b86a:	4b4a      	ldr	r3, [pc, #296]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b86c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b874:	4b47      	ldr	r3, [pc, #284]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b876:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b878:	68bb      	ldr	r3, [r7, #8]
 801b87a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b87e:	4b45      	ldr	r3, [pc, #276]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b880:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b882:	f7ff fa3c 	bl	801acfe <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b886:	2000      	movs	r0, #0
 801b888:	f7fe fbd0 	bl	801a02c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b88c:	4844      	ldr	r0, [pc, #272]	; (801b9a0 <RadioSetRxGenericConfig+0x2d0>)
 801b88e:	f001 f82d 	bl	801c8ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b892:	4844      	ldr	r0, [pc, #272]	; (801b9a4 <RadioSetRxGenericConfig+0x2d4>)
 801b894:	f001 f8fc 	bl	801ca90 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b898:	f107 0320 	add.w	r3, r7, #32
 801b89c:	4618      	mov	r0, r3
 801b89e:	f000 fbc0 	bl	801c022 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b8a2:	68bb      	ldr	r3, [r7, #8]
 801b8a4:	8b9b      	ldrh	r3, [r3, #28]
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	f000 fc0a 	bl	801c0c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	8b1b      	ldrh	r3, [r3, #24]
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f000 fbe5 	bl	801c080 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b8bc:	fb03 f202 	mul.w	r2, r3, r2
 801b8c0:	68bb      	ldr	r3, [r7, #8]
 801b8c2:	689b      	ldr	r3, [r3, #8]
 801b8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8c8:	4a32      	ldr	r2, [pc, #200]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b8ca:	6093      	str	r3, [r2, #8]
        break;
 801b8cc:	e0b9      	b.n	801ba42 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d102      	bne.n	801b8dc <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b8d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8da:	e0b3      	b.n	801ba44 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b8dc:	68bb      	ldr	r3, [r7, #8]
 801b8de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b8e2:	2b01      	cmp	r3, #1
 801b8e4:	d104      	bne.n	801b8f0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b8e6:	68bb      	ldr	r3, [r7, #8]
 801b8e8:	695b      	ldr	r3, [r3, #20]
 801b8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b8ee:	e002      	b.n	801b8f6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b8f0:	23ff      	movs	r3, #255	; 0xff
 801b8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b8f6:	68bb      	ldr	r3, [r7, #8]
 801b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	bf14      	ite	ne
 801b8fe:	2301      	movne	r3, #1
 801b900:	2300      	moveq	r3, #0
 801b902:	b2db      	uxtb	r3, r3
 801b904:	4618      	mov	r0, r3
 801b906:	f000 fd53 	bl	801c3b0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	b2db      	uxtb	r3, r3
 801b90e:	4618      	mov	r0, r3
 801b910:	f000 fd5d 	bl	801c3ce <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b914:	4b1f      	ldr	r3, [pc, #124]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b916:	2201      	movs	r2, #1
 801b918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b922:	4b1c      	ldr	r3, [pc, #112]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b92e:	4b19      	ldr	r3, [pc, #100]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b934:	68bb      	ldr	r3, [r7, #8]
 801b936:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b93a:	4b16      	ldr	r3, [pc, #88]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b93c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b940:	68bb      	ldr	r3, [r7, #8]
 801b942:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b946:	2b02      	cmp	r3, #2
 801b948:	d010      	beq.n	801b96c <RadioSetRxGenericConfig+0x29c>
 801b94a:	2b02      	cmp	r3, #2
 801b94c:	dc2c      	bgt.n	801b9a8 <RadioSetRxGenericConfig+0x2d8>
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d002      	beq.n	801b958 <RadioSetRxGenericConfig+0x288>
 801b952:	2b01      	cmp	r3, #1
 801b954:	d005      	beq.n	801b962 <RadioSetRxGenericConfig+0x292>
            break;
 801b956:	e027      	b.n	801b9a8 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b958:	4b0e      	ldr	r3, [pc, #56]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b95a:	2200      	movs	r2, #0
 801b95c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b960:	e023      	b.n	801b9aa <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b962:	4b0c      	ldr	r3, [pc, #48]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b964:	2201      	movs	r2, #1
 801b966:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b96a:	e01e      	b.n	801b9aa <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b972:	2b0b      	cmp	r3, #11
 801b974:	d004      	beq.n	801b980 <RadioSetRxGenericConfig+0x2b0>
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b97c:	2b0c      	cmp	r3, #12
 801b97e:	d104      	bne.n	801b98a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b980:	4b04      	ldr	r3, [pc, #16]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b982:	2201      	movs	r2, #1
 801b984:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b988:	e00f      	b.n	801b9aa <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b98a:	4b02      	ldr	r3, [pc, #8]	; (801b994 <RadioSetRxGenericConfig+0x2c4>)
 801b98c:	2200      	movs	r2, #0
 801b98e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b992:	e00a      	b.n	801b9aa <RadioSetRxGenericConfig+0x2da>
 801b994:	20001830 	.word	0x20001830
 801b998:	2000182c 	.word	0x2000182c
 801b99c:	200018a4 	.word	0x200018a4
 801b9a0:	20001868 	.word	0x20001868
 801b9a4:	2000183e 	.word	0x2000183e
            break;
 801b9a8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b9aa:	4b28      	ldr	r3, [pc, #160]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9ac:	2201      	movs	r2, #1
 801b9ae:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b9b0:	68bb      	ldr	r3, [r7, #8]
 801b9b2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b9b4:	4b25      	ldr	r3, [pc, #148]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9b6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b9b8:	68bb      	ldr	r3, [r7, #8]
 801b9ba:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b9be:	4b23      	ldr	r3, [pc, #140]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9c0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b9c2:	4a22      	ldr	r2, [pc, #136]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9c8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b9d0:	4b1e      	ldr	r3, [pc, #120]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b9dc:	4b1b      	ldr	r3, [pc, #108]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b9e2:	f7ff f98c 	bl	801acfe <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b9e6:	2001      	movs	r0, #1
 801b9e8:	f7fe fb20 	bl	801a02c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b9ec:	4818      	ldr	r0, [pc, #96]	; (801ba50 <RadioSetRxGenericConfig+0x380>)
 801b9ee:	f000 ff7d 	bl	801c8ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b9f2:	4818      	ldr	r0, [pc, #96]	; (801ba54 <RadioSetRxGenericConfig+0x384>)
 801b9f4:	f001 f84c 	bl	801ca90 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b9f8:	4b14      	ldr	r3, [pc, #80]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801b9fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b9fe:	2b01      	cmp	r3, #1
 801ba00:	d10d      	bne.n	801ba1e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801ba02:	f240 7036 	movw	r0, #1846	; 0x736
 801ba06:	f001 f99f 	bl	801cd48 <SUBGRF_ReadRegister>
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	f023 0304 	bic.w	r3, r3, #4
 801ba10:	b2db      	uxtb	r3, r3
 801ba12:	4619      	mov	r1, r3
 801ba14:	f240 7036 	movw	r0, #1846	; 0x736
 801ba18:	f001 f982 	bl	801cd20 <SUBGRF_WriteRegister>
 801ba1c:	e00c      	b.n	801ba38 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ba1e:	f240 7036 	movw	r0, #1846	; 0x736
 801ba22:	f001 f991 	bl	801cd48 <SUBGRF_ReadRegister>
 801ba26:	4603      	mov	r3, r0
 801ba28:	f043 0304 	orr.w	r3, r3, #4
 801ba2c:	b2db      	uxtb	r3, r3
 801ba2e:	4619      	mov	r1, r3
 801ba30:	f240 7036 	movw	r0, #1846	; 0x736
 801ba34:	f001 f974 	bl	801cd20 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801ba38:	4b04      	ldr	r3, [pc, #16]	; (801ba4c <RadioSetRxGenericConfig+0x37c>)
 801ba3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba3e:	609a      	str	r2, [r3, #8]
        break;
 801ba40:	bf00      	nop
    }
    return status;
 801ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ba44:	4618      	mov	r0, r3
 801ba46:	3730      	adds	r7, #48	; 0x30
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bd80      	pop	{r7, pc}
 801ba4c:	20001830 	.word	0x20001830
 801ba50:	20001868 	.word	0x20001868
 801ba54:	2000183e 	.word	0x2000183e

0801ba58 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b08e      	sub	sp, #56	; 0x38
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	60b9      	str	r1, [r7, #8]
 801ba60:	607b      	str	r3, [r7, #4]
 801ba62:	4603      	mov	r3, r0
 801ba64:	73fb      	strb	r3, [r7, #15]
 801ba66:	4613      	mov	r3, r2
 801ba68:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba6e:	2300      	movs	r3, #0
 801ba70:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ba72:	f001 fc3c 	bl	801d2ee <RFW_DeInit>
    switch( modem )
 801ba76:	7bfb      	ldrb	r3, [r7, #15]
 801ba78:	2b03      	cmp	r3, #3
 801ba7a:	f200 8204 	bhi.w	801be86 <RadioSetTxGenericConfig+0x42e>
 801ba7e:	a201      	add	r2, pc, #4	; (adr r2, 801ba84 <RadioSetTxGenericConfig+0x2c>)
 801ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba84:	0801bc09 	.word	0x0801bc09
 801ba88:	0801bd51 	.word	0x0801bd51
 801ba8c:	0801be49 	.word	0x0801be49
 801ba90:	0801ba95 	.word	0x0801ba95
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ba94:	68bb      	ldr	r3, [r7, #8]
 801ba96:	7c9b      	ldrb	r3, [r3, #18]
 801ba98:	2b08      	cmp	r3, #8
 801ba9a:	d902      	bls.n	801baa2 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 801baa0:	e206      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	6899      	ldr	r1, [r3, #8]
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	7c9b      	ldrb	r3, [r3, #18]
 801baaa:	b29a      	uxth	r2, r3
 801baac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bab0:	4618      	mov	r0, r3
 801bab2:	f001 fd0f 	bl	801d4d4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801bab6:	68bb      	ldr	r3, [r7, #8]
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d102      	bne.n	801bac4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801babe:	f04f 33ff 	mov.w	r3, #4294967295
 801bac2:	e1f5      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801bac4:	68bb      	ldr	r3, [r7, #8]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f242 7210 	movw	r2, #10000	; 0x2710
 801bacc:	4293      	cmp	r3, r2
 801bace:	d813      	bhi.n	801baf8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801bad0:	2302      	movs	r3, #2
 801bad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801bad6:	4b99      	ldr	r3, [pc, #612]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bad8:	2203      	movs	r2, #3
 801bada:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801badc:	4b97      	ldr	r3, [pc, #604]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bade:	2203      	movs	r2, #3
 801bae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bae4:	68bb      	ldr	r3, [r7, #8]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	4a94      	ldr	r2, [pc, #592]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801baea:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801baec:	68bb      	ldr	r3, [r7, #8]
 801baee:	7cda      	ldrb	r2, [r3, #19]
 801baf0:	4b92      	ldr	r3, [pc, #584]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801baf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801baf6:	e017      	b.n	801bb28 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801baf8:	2300      	movs	r3, #0
 801bafa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bafe:	4b8f      	ldr	r3, [pc, #572]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb00:	2200      	movs	r2, #0
 801bb02:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bb04:	4b8d      	ldr	r3, [pc, #564]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb06:	2200      	movs	r2, #0
 801bb08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	4a8a      	ldr	r2, [pc, #552]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb12:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb14:	68bb      	ldr	r3, [r7, #8]
 801bb16:	7cda      	ldrb	r2, [r3, #19]
 801bb18:	4b88      	ldr	r3, [pc, #544]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bb1e:	68bb      	ldr	r3, [r7, #8]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	089b      	lsrs	r3, r3, #2
 801bb24:	4a85      	ldr	r2, [pc, #532]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb26:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bb28:	68bb      	ldr	r3, [r7, #8]
 801bb2a:	685b      	ldr	r3, [r3, #4]
 801bb2c:	b29b      	uxth	r3, r3
 801bb2e:	00db      	lsls	r3, r3, #3
 801bb30:	b29a      	uxth	r2, r3
 801bb32:	4b82      	ldr	r3, [pc, #520]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb34:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bb36:	4b81      	ldr	r3, [pc, #516]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb38:	2204      	movs	r2, #4
 801bb3a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bb3c:	68bb      	ldr	r3, [r7, #8]
 801bb3e:	7c9b      	ldrb	r3, [r3, #18]
 801bb40:	00db      	lsls	r3, r3, #3
 801bb42:	b2da      	uxtb	r2, r3
 801bb44:	4b7d      	ldr	r3, [pc, #500]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb46:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bb48:	4b7c      	ldr	r3, [pc, #496]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bb4e:	68bb      	ldr	r3, [r7, #8]
 801bb50:	7d9b      	ldrb	r3, [r3, #22]
 801bb52:	2b02      	cmp	r3, #2
 801bb54:	d003      	beq.n	801bb5e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bb56:	68bb      	ldr	r3, [r7, #8]
 801bb58:	7d1b      	ldrb	r3, [r3, #20]
 801bb5a:	2b02      	cmp	r3, #2
 801bb5c:	d12b      	bne.n	801bbb6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	7d5b      	ldrb	r3, [r3, #21]
 801bb62:	2bf1      	cmp	r3, #241	; 0xf1
 801bb64:	d00a      	beq.n	801bb7c <RadioSetTxGenericConfig+0x124>
 801bb66:	68bb      	ldr	r3, [r7, #8]
 801bb68:	7d5b      	ldrb	r3, [r3, #21]
 801bb6a:	2bf2      	cmp	r3, #242	; 0xf2
 801bb6c:	d006      	beq.n	801bb7c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	7d5b      	ldrb	r3, [r3, #21]
 801bb72:	2b01      	cmp	r3, #1
 801bb74:	d002      	beq.n	801bb7c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801bb76:	f04f 33ff 	mov.w	r3, #4294967295
 801bb7a:	e199      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801bb7c:	68bb      	ldr	r3, [r7, #8]
 801bb7e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801bb80:	2301      	movs	r3, #1
 801bb82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bb86:	4b6e      	ldr	r3, [pc, #440]	; (801bd40 <RadioSetTxGenericConfig+0x2e8>)
 801bb88:	6819      	ldr	r1, [r3, #0]
 801bb8a:	f107 0320 	add.w	r3, r7, #32
 801bb8e:	4a6d      	ldr	r2, [pc, #436]	; (801bd44 <RadioSetTxGenericConfig+0x2ec>)
 801bb90:	4618      	mov	r0, r3
 801bb92:	f001 fb9f 	bl	801d2d4 <RFW_Init>
 801bb96:	4603      	mov	r3, r0
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d002      	beq.n	801bba2 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801bb9c:	f04f 33ff 	mov.w	r3, #4294967295
 801bba0:	e186      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bba2:	4b66      	ldr	r3, [pc, #408]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bba4:	2200      	movs	r2, #0
 801bba6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bba8:	4b64      	ldr	r3, [pc, #400]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bbaa:	2201      	movs	r2, #1
 801bbac:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bbae:	4b63      	ldr	r3, [pc, #396]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	755a      	strb	r2, [r3, #21]
        {
 801bbb4:	e00b      	b.n	801bbce <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	7d5a      	ldrb	r2, [r3, #21]
 801bbba:	4b60      	ldr	r3, [pc, #384]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bbbc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bbbe:	68bb      	ldr	r3, [r7, #8]
 801bbc0:	7d9a      	ldrb	r2, [r3, #22]
 801bbc2:	4b5e      	ldr	r3, [pc, #376]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bbc4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bbc6:	68bb      	ldr	r3, [r7, #8]
 801bbc8:	7d1a      	ldrb	r2, [r3, #20]
 801bbca:	4b5c      	ldr	r3, [pc, #368]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bbcc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bbce:	f7ff f896 	bl	801acfe <RadioStandby>
        RadioSetModem( radio_modem );
 801bbd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	f7fe fa28 	bl	801a02c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bbdc:	485a      	ldr	r0, [pc, #360]	; (801bd48 <RadioSetTxGenericConfig+0x2f0>)
 801bbde:	f000 fe85 	bl	801c8ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bbe2:	485a      	ldr	r0, [pc, #360]	; (801bd4c <RadioSetTxGenericConfig+0x2f4>)
 801bbe4:	f000 ff54 	bl	801ca90 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bbe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bbec:	4618      	mov	r0, r3
 801bbee:	f000 fa18 	bl	801c022 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bbf2:	68bb      	ldr	r3, [r7, #8]
 801bbf4:	8a1b      	ldrh	r3, [r3, #16]
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f000 fa62 	bl	801c0c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801bbfc:	68bb      	ldr	r3, [r7, #8]
 801bbfe:	899b      	ldrh	r3, [r3, #12]
 801bc00:	4618      	mov	r0, r3
 801bc02:	f000 fa3d 	bl	801c080 <SUBGRF_SetCrcPolynomial>
        break;
 801bc06:	e13f      	b.n	801be88 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bc08:	68bb      	ldr	r3, [r7, #8]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d102      	bne.n	801bc16 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bc10:	f04f 33ff 	mov.w	r3, #4294967295
 801bc14:	e14c      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bc16:	68bb      	ldr	r3, [r7, #8]
 801bc18:	7c9b      	ldrb	r3, [r3, #18]
 801bc1a:	2b08      	cmp	r3, #8
 801bc1c:	d902      	bls.n	801bc24 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bc1e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc22:	e145      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	6899      	ldr	r1, [r3, #8]
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	7c9b      	ldrb	r3, [r3, #18]
 801bc2c:	b29a      	uxth	r2, r3
 801bc2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc32:	4618      	mov	r0, r3
 801bc34:	f001 fc4e 	bl	801d4d4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc38:	4b40      	ldr	r3, [pc, #256]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bc40:	68bb      	ldr	r3, [r7, #8]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	4a3d      	ldr	r2, [pc, #244]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc46:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	7cda      	ldrb	r2, [r3, #19]
 801bc4c:	4b3b      	ldr	r3, [pc, #236]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	699b      	ldr	r3, [r3, #24]
 801bc56:	4a39      	ldr	r2, [pc, #228]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc58:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc5a:	4b38      	ldr	r3, [pc, #224]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	b29b      	uxth	r3, r3
 801bc66:	00db      	lsls	r3, r3, #3
 801bc68:	b29a      	uxth	r2, r3
 801bc6a:	4b34      	ldr	r3, [pc, #208]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc6c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bc6e:	4b33      	ldr	r3, [pc, #204]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc70:	2204      	movs	r2, #4
 801bc72:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	7c9b      	ldrb	r3, [r3, #18]
 801bc78:	00db      	lsls	r3, r3, #3
 801bc7a:	b2da      	uxtb	r2, r3
 801bc7c:	4b2f      	ldr	r3, [pc, #188]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc7e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bc80:	4b2e      	ldr	r3, [pc, #184]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bc82:	2200      	movs	r2, #0
 801bc84:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	7d9b      	ldrb	r3, [r3, #22]
 801bc8a:	2b02      	cmp	r3, #2
 801bc8c:	d003      	beq.n	801bc96 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	7d1b      	ldrb	r3, [r3, #20]
 801bc92:	2b02      	cmp	r3, #2
 801bc94:	d12a      	bne.n	801bcec <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	7d5b      	ldrb	r3, [r3, #21]
 801bc9a:	2bf1      	cmp	r3, #241	; 0xf1
 801bc9c:	d00a      	beq.n	801bcb4 <RadioSetTxGenericConfig+0x25c>
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	7d5b      	ldrb	r3, [r3, #21]
 801bca2:	2bf2      	cmp	r3, #242	; 0xf2
 801bca4:	d006      	beq.n	801bcb4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	7d5b      	ldrb	r3, [r3, #21]
 801bcaa:	2b01      	cmp	r3, #1
 801bcac:	d002      	beq.n	801bcb4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bcae:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb2:	e0fd      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bcb8:	68bb      	ldr	r3, [r7, #8]
 801bcba:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bcbc:	4b20      	ldr	r3, [pc, #128]	; (801bd40 <RadioSetTxGenericConfig+0x2e8>)
 801bcbe:	6819      	ldr	r1, [r3, #0]
 801bcc0:	f107 0314 	add.w	r3, r7, #20
 801bcc4:	4a1f      	ldr	r2, [pc, #124]	; (801bd44 <RadioSetTxGenericConfig+0x2ec>)
 801bcc6:	4618      	mov	r0, r3
 801bcc8:	f001 fb04 	bl	801d2d4 <RFW_Init>
 801bccc:	4603      	mov	r3, r0
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d002      	beq.n	801bcd8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bcd2:	f04f 33ff 	mov.w	r3, #4294967295
 801bcd6:	e0eb      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bcd8:	4b18      	ldr	r3, [pc, #96]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bcda:	2200      	movs	r2, #0
 801bcdc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bcde:	4b17      	ldr	r3, [pc, #92]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bce0:	2201      	movs	r2, #1
 801bce2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bce4:	4b15      	ldr	r3, [pc, #84]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bce6:	2200      	movs	r2, #0
 801bce8:	755a      	strb	r2, [r3, #21]
        {
 801bcea:	e00b      	b.n	801bd04 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	7d5a      	ldrb	r2, [r3, #21]
 801bcf0:	4b12      	ldr	r3, [pc, #72]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bcf2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bcf4:	68bb      	ldr	r3, [r7, #8]
 801bcf6:	7d9a      	ldrb	r2, [r3, #22]
 801bcf8:	4b10      	ldr	r3, [pc, #64]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bcfa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bcfc:	68bb      	ldr	r3, [r7, #8]
 801bcfe:	7d1a      	ldrb	r2, [r3, #20]
 801bd00:	4b0e      	ldr	r3, [pc, #56]	; (801bd3c <RadioSetTxGenericConfig+0x2e4>)
 801bd02:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bd04:	f7fe fffb 	bl	801acfe <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bd08:	2000      	movs	r0, #0
 801bd0a:	f7fe f98f 	bl	801a02c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bd0e:	480e      	ldr	r0, [pc, #56]	; (801bd48 <RadioSetTxGenericConfig+0x2f0>)
 801bd10:	f000 fdec 	bl	801c8ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd14:	480d      	ldr	r0, [pc, #52]	; (801bd4c <RadioSetTxGenericConfig+0x2f4>)
 801bd16:	f000 febb 	bl	801ca90 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bd1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd1e:	4618      	mov	r0, r3
 801bd20:	f000 f97f 	bl	801c022 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bd24:	68bb      	ldr	r3, [r7, #8]
 801bd26:	8a1b      	ldrh	r3, [r3, #16]
 801bd28:	4618      	mov	r0, r3
 801bd2a:	f000 f9c9 	bl	801c0c0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bd2e:	68bb      	ldr	r3, [r7, #8]
 801bd30:	899b      	ldrh	r3, [r3, #12]
 801bd32:	4618      	mov	r0, r3
 801bd34:	f000 f9a4 	bl	801c080 <SUBGRF_SetCrcPolynomial>
        break;
 801bd38:	e0a6      	b.n	801be88 <RadioSetTxGenericConfig+0x430>
 801bd3a:	bf00      	nop
 801bd3c:	20001830 	.word	0x20001830
 801bd40:	2000182c 	.word	0x2000182c
 801bd44:	2000188c 	.word	0x2000188c
 801bd48:	20001868 	.word	0x20001868
 801bd4c:	2000183e 	.word	0x2000183e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bd50:	4b59      	ldr	r3, [pc, #356]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bd52:	2201      	movs	r2, #1
 801bd54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bd58:	68bb      	ldr	r3, [r7, #8]
 801bd5a:	781a      	ldrb	r2, [r3, #0]
 801bd5c:	4b56      	ldr	r3, [pc, #344]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bd5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bd62:	68bb      	ldr	r3, [r7, #8]
 801bd64:	785a      	ldrb	r2, [r3, #1]
 801bd66:	4b54      	ldr	r3, [pc, #336]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bd68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	789a      	ldrb	r2, [r3, #2]
 801bd70:	4b51      	ldr	r3, [pc, #324]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bd72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bd76:	68bb      	ldr	r3, [r7, #8]
 801bd78:	78db      	ldrb	r3, [r3, #3]
 801bd7a:	2b02      	cmp	r3, #2
 801bd7c:	d010      	beq.n	801bda0 <RadioSetTxGenericConfig+0x348>
 801bd7e:	2b02      	cmp	r3, #2
 801bd80:	dc20      	bgt.n	801bdc4 <RadioSetTxGenericConfig+0x36c>
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d002      	beq.n	801bd8c <RadioSetTxGenericConfig+0x334>
 801bd86:	2b01      	cmp	r3, #1
 801bd88:	d005      	beq.n	801bd96 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801bd8a:	e01b      	b.n	801bdc4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd8c:	4b4a      	ldr	r3, [pc, #296]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bd8e:	2200      	movs	r2, #0
 801bd90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd94:	e017      	b.n	801bdc6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd96:	4b48      	ldr	r3, [pc, #288]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bd98:	2201      	movs	r2, #1
 801bd9a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd9e:	e012      	b.n	801bdc6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	781b      	ldrb	r3, [r3, #0]
 801bda4:	2b0b      	cmp	r3, #11
 801bda6:	d003      	beq.n	801bdb0 <RadioSetTxGenericConfig+0x358>
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	781b      	ldrb	r3, [r3, #0]
 801bdac:	2b0c      	cmp	r3, #12
 801bdae:	d104      	bne.n	801bdba <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bdb0:	4b41      	ldr	r3, [pc, #260]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bdb2:	2201      	movs	r2, #1
 801bdb4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdb8:	e005      	b.n	801bdc6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bdba:	4b3f      	ldr	r3, [pc, #252]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdc2:	e000      	b.n	801bdc6 <RadioSetTxGenericConfig+0x36e>
            break;
 801bdc4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bdc6:	4b3c      	ldr	r3, [pc, #240]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bdc8:	2201      	movs	r2, #1
 801bdca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	889a      	ldrh	r2, [r3, #4]
 801bdd0:	4b39      	ldr	r3, [pc, #228]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bdd2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bdd4:	68bb      	ldr	r3, [r7, #8]
 801bdd6:	799a      	ldrb	r2, [r3, #6]
 801bdd8:	4b37      	ldr	r3, [pc, #220]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bdda:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bddc:	68bb      	ldr	r3, [r7, #8]
 801bdde:	79da      	ldrb	r2, [r3, #7]
 801bde0:	4b35      	ldr	r3, [pc, #212]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bde2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bde6:	68bb      	ldr	r3, [r7, #8]
 801bde8:	7a1a      	ldrb	r2, [r3, #8]
 801bdea:	4b33      	ldr	r3, [pc, #204]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801bdec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801bdf0:	f7fe ff85 	bl	801acfe <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bdf4:	2001      	movs	r0, #1
 801bdf6:	f7fe f919 	bl	801a02c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdfa:	4830      	ldr	r0, [pc, #192]	; (801bebc <RadioSetTxGenericConfig+0x464>)
 801bdfc:	f000 fd76 	bl	801c8ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be00:	482f      	ldr	r0, [pc, #188]	; (801bec0 <RadioSetTxGenericConfig+0x468>)
 801be02:	f000 fe45 	bl	801ca90 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801be06:	4b2c      	ldr	r3, [pc, #176]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801be08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801be0c:	2b06      	cmp	r3, #6
 801be0e:	d10d      	bne.n	801be2c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801be10:	f640 0089 	movw	r0, #2185	; 0x889
 801be14:	f000 ff98 	bl	801cd48 <SUBGRF_ReadRegister>
 801be18:	4603      	mov	r3, r0
 801be1a:	f023 0304 	bic.w	r3, r3, #4
 801be1e:	b2db      	uxtb	r3, r3
 801be20:	4619      	mov	r1, r3
 801be22:	f640 0089 	movw	r0, #2185	; 0x889
 801be26:	f000 ff7b 	bl	801cd20 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801be2a:	e02d      	b.n	801be88 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801be2c:	f640 0089 	movw	r0, #2185	; 0x889
 801be30:	f000 ff8a 	bl	801cd48 <SUBGRF_ReadRegister>
 801be34:	4603      	mov	r3, r0
 801be36:	f043 0304 	orr.w	r3, r3, #4
 801be3a:	b2db      	uxtb	r3, r3
 801be3c:	4619      	mov	r1, r3
 801be3e:	f640 0089 	movw	r0, #2185	; 0x889
 801be42:	f000 ff6d 	bl	801cd20 <SUBGRF_WriteRegister>
        break;
 801be46:	e01f      	b.n	801be88 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d004      	beq.n	801be5a <RadioSetTxGenericConfig+0x402>
 801be50:	68bb      	ldr	r3, [r7, #8]
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801be58:	d902      	bls.n	801be60 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801be5a:	f04f 33ff 	mov.w	r3, #4294967295
 801be5e:	e027      	b.n	801beb0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801be60:	2003      	movs	r0, #3
 801be62:	f7fe f8e3 	bl	801a02c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801be66:	4b14      	ldr	r3, [pc, #80]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801be68:	2202      	movs	r2, #2
 801be6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	4a11      	ldr	r2, [pc, #68]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801be74:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801be76:	4b10      	ldr	r3, [pc, #64]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801be78:	2216      	movs	r2, #22
 801be7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be7e:	480f      	ldr	r0, [pc, #60]	; (801bebc <RadioSetTxGenericConfig+0x464>)
 801be80:	f000 fd34 	bl	801c8ec <SUBGRF_SetModulationParams>
        break;
 801be84:	e000      	b.n	801be88 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801be86:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801be88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801be8c:	4618      	mov	r0, r3
 801be8e:	f001 f863 	bl	801cf58 <SUBGRF_SetRfTxPower>
 801be92:	4603      	mov	r3, r0
 801be94:	461a      	mov	r2, r3
 801be96:	4b08      	ldr	r3, [pc, #32]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801be98:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be9c:	4b06      	ldr	r3, [pc, #24]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801be9e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bea2:	4618      	mov	r0, r3
 801bea4:	f001 fa37 	bl	801d316 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801bea8:	4a03      	ldr	r2, [pc, #12]	; (801beb8 <RadioSetTxGenericConfig+0x460>)
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	6053      	str	r3, [r2, #4]
    return 0;
 801beae:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801beb0:	4618      	mov	r0, r3
 801beb2:	3738      	adds	r7, #56	; 0x38
 801beb4:	46bd      	mov	sp, r7
 801beb6:	bd80      	pop	{r7, pc}
 801beb8:	20001830 	.word	0x20001830
 801bebc:	20001868 	.word	0x20001868
 801bec0:	2000183e 	.word	0x2000183e

0801bec4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801bec4:	b480      	push	{r7}
 801bec6:	b085      	sub	sp, #20
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801becc:	2301      	movs	r3, #1
 801bece:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801bed0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bed2:	4618      	mov	r0, r3
 801bed4:	3714      	adds	r7, #20
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bc80      	pop	{r7}
 801beda:	4770      	bx	lr

0801bedc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801bedc:	b480      	push	{r7}
 801bede:	b083      	sub	sp, #12
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	6078      	str	r0, [r7, #4]
 801bee4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bee6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801bee8:	4618      	mov	r0, r3
 801beea:	370c      	adds	r7, #12
 801beec:	46bd      	mov	sp, r7
 801beee:	bc80      	pop	{r7}
 801bef0:	4770      	bx	lr
	...

0801bef4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b084      	sub	sp, #16
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d002      	beq.n	801bf08 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801bf02:	4a1d      	ldr	r2, [pc, #116]	; (801bf78 <SUBGRF_Init+0x84>)
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801bf08:	f7e6 fcdc 	bl	80028c4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bf0c:	2002      	movs	r0, #2
 801bf0e:	f001 f8ff 	bl	801d110 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801bf12:	4b1a      	ldr	r3, [pc, #104]	; (801bf7c <SUBGRF_Init+0x88>)
 801bf14:	2200      	movs	r2, #0
 801bf16:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801bf18:	2000      	movs	r0, #0
 801bf1a:	f000 f97d 	bl	801c218 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801bf1e:	f7f1 ff1f 	bl	800dd60 <RBI_IsTCXO>
 801bf22:	4603      	mov	r3, r0
 801bf24:	2b01      	cmp	r3, #1
 801bf26:	d10e      	bne.n	801bf46 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801bf28:	2140      	movs	r1, #64	; 0x40
 801bf2a:	2001      	movs	r0, #1
 801bf2c:	f000 fb82 	bl	801c634 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bf30:	2100      	movs	r1, #0
 801bf32:	f640 1011 	movw	r0, #2321	; 0x911
 801bf36:	f000 fef3 	bl	801cd20 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bf3a:	237f      	movs	r3, #127	; 0x7f
 801bf3c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801bf3e:	7b38      	ldrb	r0, [r7, #12]
 801bf40:	f000 fa8b 	bl	801c45a <SUBGRF_Calibrate>
 801bf44:	e009      	b.n	801bf5a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf46:	2120      	movs	r1, #32
 801bf48:	f640 1011 	movw	r0, #2321	; 0x911
 801bf4c:	f000 fee8 	bl	801cd20 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf50:	2120      	movs	r1, #32
 801bf52:	f640 1012 	movw	r0, #2322	; 0x912
 801bf56:	f000 fee3 	bl	801cd20 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bf5a:	210e      	movs	r1, #14
 801bf5c:	f640 101f 	movw	r0, #2335	; 0x91f
 801bf60:	f000 fede 	bl	801cd20 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bf64:	f7f1 fee0 	bl	800dd28 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bf68:	4b05      	ldr	r3, [pc, #20]	; (801bf80 <SUBGRF_Init+0x8c>)
 801bf6a:	2201      	movs	r2, #1
 801bf6c:	701a      	strb	r2, [r3, #0]
}
 801bf6e:	bf00      	nop
 801bf70:	3710      	adds	r7, #16
 801bf72:	46bd      	mov	sp, r7
 801bf74:	bd80      	pop	{r7, pc}
 801bf76:	bf00      	nop
 801bf78:	200018c8 	.word	0x200018c8
 801bf7c:	200018c4 	.word	0x200018c4
 801bf80:	200018bc 	.word	0x200018bc

0801bf84 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bf84:	b480      	push	{r7}
 801bf86:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bf88:	4b02      	ldr	r3, [pc, #8]	; (801bf94 <SUBGRF_GetOperatingMode+0x10>)
 801bf8a:	781b      	ldrb	r3, [r3, #0]
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	bc80      	pop	{r7}
 801bf92:	4770      	bx	lr
 801bf94:	200018bc 	.word	0x200018bc

0801bf98 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b082      	sub	sp, #8
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	6078      	str	r0, [r7, #4]
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bfa4:	78fb      	ldrb	r3, [r7, #3]
 801bfa6:	461a      	mov	r2, r3
 801bfa8:	6879      	ldr	r1, [r7, #4]
 801bfaa:	2000      	movs	r0, #0
 801bfac:	f000 ff24 	bl	801cdf8 <SUBGRF_WriteBuffer>
}
 801bfb0:	bf00      	nop
 801bfb2:	3708      	adds	r7, #8
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}

0801bfb8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b086      	sub	sp, #24
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	60f8      	str	r0, [r7, #12]
 801bfc0:	60b9      	str	r1, [r7, #8]
 801bfc2:	4613      	mov	r3, r2
 801bfc4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bfca:	f107 0317 	add.w	r3, r7, #23
 801bfce:	4619      	mov	r1, r3
 801bfd0:	68b8      	ldr	r0, [r7, #8]
 801bfd2:	f000 fe27 	bl	801cc24 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	781b      	ldrb	r3, [r3, #0]
 801bfda:	79fa      	ldrb	r2, [r7, #7]
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	d201      	bcs.n	801bfe4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	e007      	b.n	801bff4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801bfe4:	7df8      	ldrb	r0, [r7, #23]
 801bfe6:	68bb      	ldr	r3, [r7, #8]
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	461a      	mov	r2, r3
 801bfec:	68f9      	ldr	r1, [r7, #12]
 801bfee:	f000 ff25 	bl	801ce3c <SUBGRF_ReadBuffer>

    return 0;
 801bff2:	2300      	movs	r3, #0
}
 801bff4:	4618      	mov	r0, r3
 801bff6:	3718      	adds	r7, #24
 801bff8:	46bd      	mov	sp, r7
 801bffa:	bd80      	pop	{r7, pc}

0801bffc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	af00      	add	r7, sp, #0
 801c002:	60f8      	str	r0, [r7, #12]
 801c004:	460b      	mov	r3, r1
 801c006:	607a      	str	r2, [r7, #4]
 801c008:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c00a:	7afb      	ldrb	r3, [r7, #11]
 801c00c:	4619      	mov	r1, r3
 801c00e:	68f8      	ldr	r0, [r7, #12]
 801c010:	f7ff ffc2 	bl	801bf98 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	f000 f91b 	bl	801c250 <SUBGRF_SetTx>
}
 801c01a:	bf00      	nop
 801c01c:	3710      	adds	r7, #16
 801c01e:	46bd      	mov	sp, r7
 801c020:	bd80      	pop	{r7, pc}

0801c022 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c022:	b580      	push	{r7, lr}
 801c024:	b082      	sub	sp, #8
 801c026:	af00      	add	r7, sp, #0
 801c028:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c02a:	2208      	movs	r2, #8
 801c02c:	6879      	ldr	r1, [r7, #4]
 801c02e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c032:	f000 fe9d 	bl	801cd70 <SUBGRF_WriteRegisters>
    return 0;
 801c036:	2300      	movs	r3, #0
}
 801c038:	4618      	mov	r0, r3
 801c03a:	3708      	adds	r7, #8
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bd80      	pop	{r7, pc}

0801c040 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
 801c046:	4603      	mov	r3, r0
 801c048:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c04a:	88fb      	ldrh	r3, [r7, #6]
 801c04c:	0a1b      	lsrs	r3, r3, #8
 801c04e:	b29b      	uxth	r3, r3
 801c050:	b2db      	uxtb	r3, r3
 801c052:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c054:	88fb      	ldrh	r3, [r7, #6]
 801c056:	b2db      	uxtb	r3, r3
 801c058:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c05a:	f000 fb6f 	bl	801c73c <SUBGRF_GetPacketType>
 801c05e:	4603      	mov	r3, r0
 801c060:	2b00      	cmp	r3, #0
 801c062:	d108      	bne.n	801c076 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c064:	f107 030c 	add.w	r3, r7, #12
 801c068:	2202      	movs	r2, #2
 801c06a:	4619      	mov	r1, r3
 801c06c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c070:	f000 fe7e 	bl	801cd70 <SUBGRF_WriteRegisters>
            break;
 801c074:	e000      	b.n	801c078 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c076:	bf00      	nop
    }
}
 801c078:	bf00      	nop
 801c07a:	3710      	adds	r7, #16
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}

0801c080 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b084      	sub	sp, #16
 801c084:	af00      	add	r7, sp, #0
 801c086:	4603      	mov	r3, r0
 801c088:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c08a:	88fb      	ldrh	r3, [r7, #6]
 801c08c:	0a1b      	lsrs	r3, r3, #8
 801c08e:	b29b      	uxth	r3, r3
 801c090:	b2db      	uxtb	r3, r3
 801c092:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c094:	88fb      	ldrh	r3, [r7, #6]
 801c096:	b2db      	uxtb	r3, r3
 801c098:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c09a:	f000 fb4f 	bl	801c73c <SUBGRF_GetPacketType>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d108      	bne.n	801c0b6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c0a4:	f107 030c 	add.w	r3, r7, #12
 801c0a8:	2202      	movs	r2, #2
 801c0aa:	4619      	mov	r1, r3
 801c0ac:	f240 60be 	movw	r0, #1726	; 0x6be
 801c0b0:	f000 fe5e 	bl	801cd70 <SUBGRF_WriteRegisters>
            break;
 801c0b4:	e000      	b.n	801c0b8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c0b6:	bf00      	nop
    }
}
 801c0b8:	bf00      	nop
 801c0ba:	3710      	adds	r7, #16
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bd80      	pop	{r7, pc}

0801c0c0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b084      	sub	sp, #16
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c0ce:	f000 fb35 	bl	801c73c <SUBGRF_GetPacketType>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d121      	bne.n	801c11c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c0d8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0dc:	f000 fe34 	bl	801cd48 <SUBGRF_ReadRegister>
 801c0e0:	4603      	mov	r3, r0
 801c0e2:	f023 0301 	bic.w	r3, r3, #1
 801c0e6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c0e8:	88fb      	ldrh	r3, [r7, #6]
 801c0ea:	0a1b      	lsrs	r3, r3, #8
 801c0ec:	b29b      	uxth	r3, r3
 801c0ee:	b25b      	sxtb	r3, r3
 801c0f0:	f003 0301 	and.w	r3, r3, #1
 801c0f4:	b25a      	sxtb	r2, r3
 801c0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0fa:	4313      	orrs	r3, r2
 801c0fc:	b25b      	sxtb	r3, r3
 801c0fe:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c100:	7bfb      	ldrb	r3, [r7, #15]
 801c102:	4619      	mov	r1, r3
 801c104:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c108:	f000 fe0a 	bl	801cd20 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c10c:	88fb      	ldrh	r3, [r7, #6]
 801c10e:	b2db      	uxtb	r3, r3
 801c110:	4619      	mov	r1, r3
 801c112:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c116:	f000 fe03 	bl	801cd20 <SUBGRF_WriteRegister>
            break;
 801c11a:	e000      	b.n	801c11e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c11c:	bf00      	nop
    }
}
 801c11e:	bf00      	nop
 801c120:	3710      	adds	r7, #16
 801c122:	46bd      	mov	sp, r7
 801c124:	bd80      	pop	{r7, pc}

0801c126 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c126:	b580      	push	{r7, lr}
 801c128:	b082      	sub	sp, #8
 801c12a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c12c:	2300      	movs	r3, #0
 801c12e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c130:	2300      	movs	r3, #0
 801c132:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c134:	2300      	movs	r3, #0
 801c136:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c138:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c13c:	f000 fe04 	bl	801cd48 <SUBGRF_ReadRegister>
 801c140:	4603      	mov	r3, r0
 801c142:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c144:	79fb      	ldrb	r3, [r7, #7]
 801c146:	f023 0301 	bic.w	r3, r3, #1
 801c14a:	b2db      	uxtb	r3, r3
 801c14c:	4619      	mov	r1, r3
 801c14e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c152:	f000 fde5 	bl	801cd20 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c156:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c15a:	f000 fdf5 	bl	801cd48 <SUBGRF_ReadRegister>
 801c15e:	4603      	mov	r3, r0
 801c160:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c162:	79bb      	ldrb	r3, [r7, #6]
 801c164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c168:	b2db      	uxtb	r3, r3
 801c16a:	4619      	mov	r1, r3
 801c16c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c170:	f000 fdd6 	bl	801cd20 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c174:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c178:	f000 f88a 	bl	801c290 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c17c:	463b      	mov	r3, r7
 801c17e:	2204      	movs	r2, #4
 801c180:	4619      	mov	r1, r3
 801c182:	f640 0019 	movw	r0, #2073	; 0x819
 801c186:	f000 fe15 	bl	801cdb4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c18a:	2000      	movs	r0, #0
 801c18c:	f000 f844 	bl	801c218 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c190:	79fb      	ldrb	r3, [r7, #7]
 801c192:	4619      	mov	r1, r3
 801c194:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c198:	f000 fdc2 	bl	801cd20 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c19c:	79bb      	ldrb	r3, [r7, #6]
 801c19e:	4619      	mov	r1, r3
 801c1a0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c1a4:	f000 fdbc 	bl	801cd20 <SUBGRF_WriteRegister>

    return number;
 801c1a8:	683b      	ldr	r3, [r7, #0]
}
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	3708      	adds	r7, #8
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	bd80      	pop	{r7, pc}
	...

0801c1b4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b084      	sub	sp, #16
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c1bc:	2000      	movs	r0, #0
 801c1be:	f7f1 fdba 	bl	800dd36 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c1c2:	2002      	movs	r0, #2
 801c1c4:	f000 ffa4 	bl	801d110 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1c8:	793b      	ldrb	r3, [r7, #4]
 801c1ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1ce:	b2db      	uxtb	r3, r3
 801c1d0:	009b      	lsls	r3, r3, #2
 801c1d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1d4:	793b      	ldrb	r3, [r7, #4]
 801c1d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c1da:	b2db      	uxtb	r3, r3
 801c1dc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1de:	b25b      	sxtb	r3, r3
 801c1e0:	4313      	orrs	r3, r2
 801c1e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c1e4:	793b      	ldrb	r3, [r7, #4]
 801c1e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c1ea:	b2db      	uxtb	r3, r3
 801c1ec:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1ee:	4313      	orrs	r3, r2
 801c1f0:	b25b      	sxtb	r3, r3
 801c1f2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c1f6:	f107 030f 	add.w	r3, r7, #15
 801c1fa:	2201      	movs	r2, #1
 801c1fc:	4619      	mov	r1, r3
 801c1fe:	2084      	movs	r0, #132	; 0x84
 801c200:	f000 fe3e 	bl	801ce80 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c204:	4b03      	ldr	r3, [pc, #12]	; (801c214 <SUBGRF_SetSleep+0x60>)
 801c206:	2200      	movs	r2, #0
 801c208:	701a      	strb	r2, [r3, #0]
}
 801c20a:	bf00      	nop
 801c20c:	3710      	adds	r7, #16
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}
 801c212:	bf00      	nop
 801c214:	200018bc 	.word	0x200018bc

0801c218 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b082      	sub	sp, #8
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	4603      	mov	r3, r0
 801c220:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c222:	1dfb      	adds	r3, r7, #7
 801c224:	2201      	movs	r2, #1
 801c226:	4619      	mov	r1, r3
 801c228:	2080      	movs	r0, #128	; 0x80
 801c22a:	f000 fe29 	bl	801ce80 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c22e:	79fb      	ldrb	r3, [r7, #7]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d103      	bne.n	801c23c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c234:	4b05      	ldr	r3, [pc, #20]	; (801c24c <SUBGRF_SetStandby+0x34>)
 801c236:	2201      	movs	r2, #1
 801c238:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c23a:	e002      	b.n	801c242 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c23c:	4b03      	ldr	r3, [pc, #12]	; (801c24c <SUBGRF_SetStandby+0x34>)
 801c23e:	2202      	movs	r2, #2
 801c240:	701a      	strb	r2, [r3, #0]
}
 801c242:	bf00      	nop
 801c244:	3708      	adds	r7, #8
 801c246:	46bd      	mov	sp, r7
 801c248:	bd80      	pop	{r7, pc}
 801c24a:	bf00      	nop
 801c24c:	200018bc 	.word	0x200018bc

0801c250 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c250:	b580      	push	{r7, lr}
 801c252:	b084      	sub	sp, #16
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c258:	4b0c      	ldr	r3, [pc, #48]	; (801c28c <SUBGRF_SetTx+0x3c>)
 801c25a:	2204      	movs	r2, #4
 801c25c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	0c1b      	lsrs	r3, r3, #16
 801c262:	b2db      	uxtb	r3, r3
 801c264:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	0a1b      	lsrs	r3, r3, #8
 801c26a:	b2db      	uxtb	r3, r3
 801c26c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	b2db      	uxtb	r3, r3
 801c272:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c274:	f107 030c 	add.w	r3, r7, #12
 801c278:	2203      	movs	r2, #3
 801c27a:	4619      	mov	r1, r3
 801c27c:	2083      	movs	r0, #131	; 0x83
 801c27e:	f000 fdff 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c282:	bf00      	nop
 801c284:	3710      	adds	r7, #16
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}
 801c28a:	bf00      	nop
 801c28c:	200018bc 	.word	0x200018bc

0801c290 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b084      	sub	sp, #16
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c298:	4b0c      	ldr	r3, [pc, #48]	; (801c2cc <SUBGRF_SetRx+0x3c>)
 801c29a:	2205      	movs	r2, #5
 801c29c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	0c1b      	lsrs	r3, r3, #16
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	0a1b      	lsrs	r3, r3, #8
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	b2db      	uxtb	r3, r3
 801c2b2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2b4:	f107 030c 	add.w	r3, r7, #12
 801c2b8:	2203      	movs	r2, #3
 801c2ba:	4619      	mov	r1, r3
 801c2bc:	2082      	movs	r0, #130	; 0x82
 801c2be:	f000 fddf 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c2c2:	bf00      	nop
 801c2c4:	3710      	adds	r7, #16
 801c2c6:	46bd      	mov	sp, r7
 801c2c8:	bd80      	pop	{r7, pc}
 801c2ca:	bf00      	nop
 801c2cc:	200018bc 	.word	0x200018bc

0801c2d0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b084      	sub	sp, #16
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2d8:	4b0e      	ldr	r3, [pc, #56]	; (801c314 <SUBGRF_SetRxBoosted+0x44>)
 801c2da:	2205      	movs	r2, #5
 801c2dc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c2de:	2197      	movs	r1, #151	; 0x97
 801c2e0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c2e4:	f000 fd1c 	bl	801cd20 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	0c1b      	lsrs	r3, r3, #16
 801c2ec:	b2db      	uxtb	r3, r3
 801c2ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	0a1b      	lsrs	r3, r3, #8
 801c2f4:	b2db      	uxtb	r3, r3
 801c2f6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	b2db      	uxtb	r3, r3
 801c2fc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2fe:	f107 030c 	add.w	r3, r7, #12
 801c302:	2203      	movs	r2, #3
 801c304:	4619      	mov	r1, r3
 801c306:	2082      	movs	r0, #130	; 0x82
 801c308:	f000 fdba 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c30c:	bf00      	nop
 801c30e:	3710      	adds	r7, #16
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}
 801c314:	200018bc 	.word	0x200018bc

0801c318 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b084      	sub	sp, #16
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	0c1b      	lsrs	r3, r3, #16
 801c326:	b2db      	uxtb	r3, r3
 801c328:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	0a1b      	lsrs	r3, r3, #8
 801c32e:	b2db      	uxtb	r3, r3
 801c330:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	b2db      	uxtb	r3, r3
 801c336:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	0c1b      	lsrs	r3, r3, #16
 801c33c:	b2db      	uxtb	r3, r3
 801c33e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c340:	683b      	ldr	r3, [r7, #0]
 801c342:	0a1b      	lsrs	r3, r3, #8
 801c344:	b2db      	uxtb	r3, r3
 801c346:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c348:	683b      	ldr	r3, [r7, #0]
 801c34a:	b2db      	uxtb	r3, r3
 801c34c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c34e:	f107 0308 	add.w	r3, r7, #8
 801c352:	2206      	movs	r2, #6
 801c354:	4619      	mov	r1, r3
 801c356:	2094      	movs	r0, #148	; 0x94
 801c358:	f000 fd92 	bl	801ce80 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c35c:	4b03      	ldr	r3, [pc, #12]	; (801c36c <SUBGRF_SetRxDutyCycle+0x54>)
 801c35e:	2206      	movs	r2, #6
 801c360:	701a      	strb	r2, [r3, #0]
}
 801c362:	bf00      	nop
 801c364:	3710      	adds	r7, #16
 801c366:	46bd      	mov	sp, r7
 801c368:	bd80      	pop	{r7, pc}
 801c36a:	bf00      	nop
 801c36c:	200018bc 	.word	0x200018bc

0801c370 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c370:	b580      	push	{r7, lr}
 801c372:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c374:	2200      	movs	r2, #0
 801c376:	2100      	movs	r1, #0
 801c378:	20c5      	movs	r0, #197	; 0xc5
 801c37a:	f000 fd81 	bl	801ce80 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c37e:	4b02      	ldr	r3, [pc, #8]	; (801c388 <SUBGRF_SetCad+0x18>)
 801c380:	2207      	movs	r2, #7
 801c382:	701a      	strb	r2, [r3, #0]
}
 801c384:	bf00      	nop
 801c386:	bd80      	pop	{r7, pc}
 801c388:	200018bc 	.word	0x200018bc

0801c38c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c390:	2200      	movs	r2, #0
 801c392:	2100      	movs	r1, #0
 801c394:	20d1      	movs	r0, #209	; 0xd1
 801c396:	f000 fd73 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c39a:	bf00      	nop
 801c39c:	bd80      	pop	{r7, pc}

0801c39e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c39e:	b580      	push	{r7, lr}
 801c3a0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	2100      	movs	r1, #0
 801c3a6:	20d2      	movs	r0, #210	; 0xd2
 801c3a8:	f000 fd6a 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c3ac:	bf00      	nop
 801c3ae:	bd80      	pop	{r7, pc}

0801c3b0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b082      	sub	sp, #8
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c3ba:	1dfb      	adds	r3, r7, #7
 801c3bc:	2201      	movs	r2, #1
 801c3be:	4619      	mov	r1, r3
 801c3c0:	209f      	movs	r0, #159	; 0x9f
 801c3c2:	f000 fd5d 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c3c6:	bf00      	nop
 801c3c8:	3708      	adds	r7, #8
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	bd80      	pop	{r7, pc}

0801c3ce <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c3ce:	b580      	push	{r7, lr}
 801c3d0:	b084      	sub	sp, #16
 801c3d2:	af00      	add	r7, sp, #0
 801c3d4:	4603      	mov	r3, r0
 801c3d6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c3d8:	1dfb      	adds	r3, r7, #7
 801c3da:	2201      	movs	r2, #1
 801c3dc:	4619      	mov	r1, r3
 801c3de:	20a0      	movs	r0, #160	; 0xa0
 801c3e0:	f000 fd4e 	bl	801ce80 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c3e4:	79fb      	ldrb	r3, [r7, #7]
 801c3e6:	2b3f      	cmp	r3, #63	; 0x3f
 801c3e8:	d91c      	bls.n	801c424 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c3ea:	79fb      	ldrb	r3, [r7, #7]
 801c3ec:	085b      	lsrs	r3, r3, #1
 801c3ee:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c3f8:	e005      	b.n	801c406 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c3fa:	7bfb      	ldrb	r3, [r7, #15]
 801c3fc:	089b      	lsrs	r3, r3, #2
 801c3fe:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c400:	7bbb      	ldrb	r3, [r7, #14]
 801c402:	3301      	adds	r3, #1
 801c404:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c406:	7bfb      	ldrb	r3, [r7, #15]
 801c408:	2b1f      	cmp	r3, #31
 801c40a:	d8f6      	bhi.n	801c3fa <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c40c:	7bfb      	ldrb	r3, [r7, #15]
 801c40e:	00db      	lsls	r3, r3, #3
 801c410:	b2da      	uxtb	r2, r3
 801c412:	7bbb      	ldrb	r3, [r7, #14]
 801c414:	4413      	add	r3, r2
 801c416:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c418:	7b7b      	ldrb	r3, [r7, #13]
 801c41a:	4619      	mov	r1, r3
 801c41c:	f240 7006 	movw	r0, #1798	; 0x706
 801c420:	f000 fc7e 	bl	801cd20 <SUBGRF_WriteRegister>
    }
}
 801c424:	bf00      	nop
 801c426:	3710      	adds	r7, #16
 801c428:	46bd      	mov	sp, r7
 801c42a:	bd80      	pop	{r7, pc}

0801c42c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b082      	sub	sp, #8
 801c430:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c432:	f7f1 fc9c 	bl	800dd6e <RBI_IsDCDC>
 801c436:	4603      	mov	r3, r0
 801c438:	2b01      	cmp	r3, #1
 801c43a:	d102      	bne.n	801c442 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c43c:	2301      	movs	r3, #1
 801c43e:	71fb      	strb	r3, [r7, #7]
 801c440:	e001      	b.n	801c446 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c442:	2300      	movs	r3, #0
 801c444:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c446:	1dfb      	adds	r3, r7, #7
 801c448:	2201      	movs	r2, #1
 801c44a:	4619      	mov	r1, r3
 801c44c:	2096      	movs	r0, #150	; 0x96
 801c44e:	f000 fd17 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c452:	bf00      	nop
 801c454:	3708      	adds	r7, #8
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}

0801c45a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c45a:	b580      	push	{r7, lr}
 801c45c:	b084      	sub	sp, #16
 801c45e:	af00      	add	r7, sp, #0
 801c460:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c462:	793b      	ldrb	r3, [r7, #4]
 801c464:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c468:	b2db      	uxtb	r3, r3
 801c46a:	019b      	lsls	r3, r3, #6
 801c46c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c46e:	793b      	ldrb	r3, [r7, #4]
 801c470:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c474:	b2db      	uxtb	r3, r3
 801c476:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c478:	b25b      	sxtb	r3, r3
 801c47a:	4313      	orrs	r3, r2
 801c47c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c47e:	793b      	ldrb	r3, [r7, #4]
 801c480:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c484:	b2db      	uxtb	r3, r3
 801c486:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c488:	b25b      	sxtb	r3, r3
 801c48a:	4313      	orrs	r3, r2
 801c48c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c48e:	793b      	ldrb	r3, [r7, #4]
 801c490:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c494:	b2db      	uxtb	r3, r3
 801c496:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c498:	b25b      	sxtb	r3, r3
 801c49a:	4313      	orrs	r3, r2
 801c49c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c49e:	793b      	ldrb	r3, [r7, #4]
 801c4a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c4a4:	b2db      	uxtb	r3, r3
 801c4a6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c4a8:	b25b      	sxtb	r3, r3
 801c4aa:	4313      	orrs	r3, r2
 801c4ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4ae:	793b      	ldrb	r3, [r7, #4]
 801c4b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4b8:	b25b      	sxtb	r3, r3
 801c4ba:	4313      	orrs	r3, r2
 801c4bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c4be:	793b      	ldrb	r3, [r7, #4]
 801c4c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c4c4:	b2db      	uxtb	r3, r3
 801c4c6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4c8:	4313      	orrs	r3, r2
 801c4ca:	b25b      	sxtb	r3, r3
 801c4cc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4ce:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c4d0:	f107 030f 	add.w	r3, r7, #15
 801c4d4:	2201      	movs	r2, #1
 801c4d6:	4619      	mov	r1, r3
 801c4d8:	2089      	movs	r0, #137	; 0x89
 801c4da:	f000 fcd1 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c4de:	bf00      	nop
 801c4e0:	3710      	adds	r7, #16
 801c4e2:	46bd      	mov	sp, r7
 801c4e4:	bd80      	pop	{r7, pc}
	...

0801c4e8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b084      	sub	sp, #16
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	4a1d      	ldr	r2, [pc, #116]	; (801c568 <SUBGRF_CalibrateImage+0x80>)
 801c4f4:	4293      	cmp	r3, r2
 801c4f6:	d904      	bls.n	801c502 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c4f8:	23e1      	movs	r3, #225	; 0xe1
 801c4fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c4fc:	23e9      	movs	r3, #233	; 0xe9
 801c4fe:	737b      	strb	r3, [r7, #13]
 801c500:	e027      	b.n	801c552 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	4a19      	ldr	r2, [pc, #100]	; (801c56c <SUBGRF_CalibrateImage+0x84>)
 801c506:	4293      	cmp	r3, r2
 801c508:	d904      	bls.n	801c514 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c50a:	23d7      	movs	r3, #215	; 0xd7
 801c50c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c50e:	23db      	movs	r3, #219	; 0xdb
 801c510:	737b      	strb	r3, [r7, #13]
 801c512:	e01e      	b.n	801c552 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	4a16      	ldr	r2, [pc, #88]	; (801c570 <SUBGRF_CalibrateImage+0x88>)
 801c518:	4293      	cmp	r3, r2
 801c51a:	d904      	bls.n	801c526 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c51c:	23c1      	movs	r3, #193	; 0xc1
 801c51e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c520:	23c5      	movs	r3, #197	; 0xc5
 801c522:	737b      	strb	r3, [r7, #13]
 801c524:	e015      	b.n	801c552 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	4a12      	ldr	r2, [pc, #72]	; (801c574 <SUBGRF_CalibrateImage+0x8c>)
 801c52a:	4293      	cmp	r3, r2
 801c52c:	d904      	bls.n	801c538 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c52e:	2375      	movs	r3, #117	; 0x75
 801c530:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c532:	2381      	movs	r3, #129	; 0x81
 801c534:	737b      	strb	r3, [r7, #13]
 801c536:	e00c      	b.n	801c552 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	4a0f      	ldr	r2, [pc, #60]	; (801c578 <SUBGRF_CalibrateImage+0x90>)
 801c53c:	4293      	cmp	r3, r2
 801c53e:	d904      	bls.n	801c54a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c540:	236b      	movs	r3, #107	; 0x6b
 801c542:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c544:	236f      	movs	r3, #111	; 0x6f
 801c546:	737b      	strb	r3, [r7, #13]
 801c548:	e003      	b.n	801c552 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c54a:	2329      	movs	r3, #41	; 0x29
 801c54c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c54e:	232b      	movs	r3, #43	; 0x2b
 801c550:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c552:	f107 030c 	add.w	r3, r7, #12
 801c556:	2202      	movs	r2, #2
 801c558:	4619      	mov	r1, r3
 801c55a:	2098      	movs	r0, #152	; 0x98
 801c55c:	f000 fc90 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c560:	bf00      	nop
 801c562:	3710      	adds	r7, #16
 801c564:	46bd      	mov	sp, r7
 801c566:	bd80      	pop	{r7, pc}
 801c568:	35a4e900 	.word	0x35a4e900
 801c56c:	32a9f880 	.word	0x32a9f880
 801c570:	2de54480 	.word	0x2de54480
 801c574:	1b6b0b00 	.word	0x1b6b0b00
 801c578:	1954fc40 	.word	0x1954fc40

0801c57c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c57c:	b590      	push	{r4, r7, lr}
 801c57e:	b085      	sub	sp, #20
 801c580:	af00      	add	r7, sp, #0
 801c582:	4604      	mov	r4, r0
 801c584:	4608      	mov	r0, r1
 801c586:	4611      	mov	r1, r2
 801c588:	461a      	mov	r2, r3
 801c58a:	4623      	mov	r3, r4
 801c58c:	71fb      	strb	r3, [r7, #7]
 801c58e:	4603      	mov	r3, r0
 801c590:	71bb      	strb	r3, [r7, #6]
 801c592:	460b      	mov	r3, r1
 801c594:	717b      	strb	r3, [r7, #5]
 801c596:	4613      	mov	r3, r2
 801c598:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c59a:	79fb      	ldrb	r3, [r7, #7]
 801c59c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c59e:	79bb      	ldrb	r3, [r7, #6]
 801c5a0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c5a2:	797b      	ldrb	r3, [r7, #5]
 801c5a4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c5a6:	793b      	ldrb	r3, [r7, #4]
 801c5a8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c5aa:	f107 030c 	add.w	r3, r7, #12
 801c5ae:	2204      	movs	r2, #4
 801c5b0:	4619      	mov	r1, r3
 801c5b2:	2095      	movs	r0, #149	; 0x95
 801c5b4:	f000 fc64 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c5b8:	bf00      	nop
 801c5ba:	3714      	adds	r7, #20
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bd90      	pop	{r4, r7, pc}

0801c5c0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c5c0:	b590      	push	{r4, r7, lr}
 801c5c2:	b085      	sub	sp, #20
 801c5c4:	af00      	add	r7, sp, #0
 801c5c6:	4604      	mov	r4, r0
 801c5c8:	4608      	mov	r0, r1
 801c5ca:	4611      	mov	r1, r2
 801c5cc:	461a      	mov	r2, r3
 801c5ce:	4623      	mov	r3, r4
 801c5d0:	80fb      	strh	r3, [r7, #6]
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	80bb      	strh	r3, [r7, #4]
 801c5d6:	460b      	mov	r3, r1
 801c5d8:	807b      	strh	r3, [r7, #2]
 801c5da:	4613      	mov	r3, r2
 801c5dc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c5de:	88fb      	ldrh	r3, [r7, #6]
 801c5e0:	0a1b      	lsrs	r3, r3, #8
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	b2db      	uxtb	r3, r3
 801c5e6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c5e8:	88fb      	ldrh	r3, [r7, #6]
 801c5ea:	b2db      	uxtb	r3, r3
 801c5ec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c5ee:	88bb      	ldrh	r3, [r7, #4]
 801c5f0:	0a1b      	lsrs	r3, r3, #8
 801c5f2:	b29b      	uxth	r3, r3
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c5f8:	88bb      	ldrh	r3, [r7, #4]
 801c5fa:	b2db      	uxtb	r3, r3
 801c5fc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c5fe:	887b      	ldrh	r3, [r7, #2]
 801c600:	0a1b      	lsrs	r3, r3, #8
 801c602:	b29b      	uxth	r3, r3
 801c604:	b2db      	uxtb	r3, r3
 801c606:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c608:	887b      	ldrh	r3, [r7, #2]
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c60e:	883b      	ldrh	r3, [r7, #0]
 801c610:	0a1b      	lsrs	r3, r3, #8
 801c612:	b29b      	uxth	r3, r3
 801c614:	b2db      	uxtb	r3, r3
 801c616:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c618:	883b      	ldrh	r3, [r7, #0]
 801c61a:	b2db      	uxtb	r3, r3
 801c61c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c61e:	f107 0308 	add.w	r3, r7, #8
 801c622:	2208      	movs	r2, #8
 801c624:	4619      	mov	r1, r3
 801c626:	2008      	movs	r0, #8
 801c628:	f000 fc2a 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c62c:	bf00      	nop
 801c62e:	3714      	adds	r7, #20
 801c630:	46bd      	mov	sp, r7
 801c632:	bd90      	pop	{r4, r7, pc}

0801c634 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b084      	sub	sp, #16
 801c638:	af00      	add	r7, sp, #0
 801c63a:	4603      	mov	r3, r0
 801c63c:	6039      	str	r1, [r7, #0]
 801c63e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c640:	79fb      	ldrb	r3, [r7, #7]
 801c642:	f003 0307 	and.w	r3, r3, #7
 801c646:	b2db      	uxtb	r3, r3
 801c648:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	0c1b      	lsrs	r3, r3, #16
 801c64e:	b2db      	uxtb	r3, r3
 801c650:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c652:	683b      	ldr	r3, [r7, #0]
 801c654:	0a1b      	lsrs	r3, r3, #8
 801c656:	b2db      	uxtb	r3, r3
 801c658:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c65a:	683b      	ldr	r3, [r7, #0]
 801c65c:	b2db      	uxtb	r3, r3
 801c65e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c660:	f107 030c 	add.w	r3, r7, #12
 801c664:	2204      	movs	r2, #4
 801c666:	4619      	mov	r1, r3
 801c668:	2097      	movs	r0, #151	; 0x97
 801c66a:	f000 fc09 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c66e:	bf00      	nop
 801c670:	3710      	adds	r7, #16
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
	...

0801c678 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c67c:	b084      	sub	sp, #16
 801c67e:	af00      	add	r7, sp, #0
 801c680:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c682:	2300      	movs	r3, #0
 801c684:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c686:	4b1d      	ldr	r3, [pc, #116]	; (801c6fc <SUBGRF_SetRfFrequency+0x84>)
 801c688:	781b      	ldrb	r3, [r3, #0]
 801c68a:	f083 0301 	eor.w	r3, r3, #1
 801c68e:	b2db      	uxtb	r3, r3
 801c690:	2b00      	cmp	r3, #0
 801c692:	d005      	beq.n	801c6a0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c694:	6878      	ldr	r0, [r7, #4]
 801c696:	f7ff ff27 	bl	801c4e8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c69a:	4b18      	ldr	r3, [pc, #96]	; (801c6fc <SUBGRF_SetRfFrequency+0x84>)
 801c69c:	2201      	movs	r2, #1
 801c69e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	2200      	movs	r2, #0
 801c6a4:	461c      	mov	r4, r3
 801c6a6:	4615      	mov	r5, r2
 801c6a8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c6ac:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c6b0:	4a13      	ldr	r2, [pc, #76]	; (801c700 <SUBGRF_SetRfFrequency+0x88>)
 801c6b2:	f04f 0300 	mov.w	r3, #0
 801c6b6:	4640      	mov	r0, r8
 801c6b8:	4649      	mov	r1, r9
 801c6ba:	f7e4 fb67 	bl	8000d8c <__aeabi_uldivmod>
 801c6be:	4602      	mov	r2, r0
 801c6c0:	460b      	mov	r3, r1
 801c6c2:	4613      	mov	r3, r2
 801c6c4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	0e1b      	lsrs	r3, r3, #24
 801c6ca:	b2db      	uxtb	r3, r3
 801c6cc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	0c1b      	lsrs	r3, r3, #16
 801c6d2:	b2db      	uxtb	r3, r3
 801c6d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	0a1b      	lsrs	r3, r3, #8
 801c6da:	b2db      	uxtb	r3, r3
 801c6dc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	b2db      	uxtb	r3, r3
 801c6e2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c6e4:	f107 0308 	add.w	r3, r7, #8
 801c6e8:	2204      	movs	r2, #4
 801c6ea:	4619      	mov	r1, r3
 801c6ec:	2086      	movs	r0, #134	; 0x86
 801c6ee:	f000 fbc7 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c6f2:	bf00      	nop
 801c6f4:	3710      	adds	r7, #16
 801c6f6:	46bd      	mov	sp, r7
 801c6f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c6fc:	200018c4 	.word	0x200018c4
 801c700:	01e84800 	.word	0x01e84800

0801c704 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b082      	sub	sp, #8
 801c708:	af00      	add	r7, sp, #0
 801c70a:	4603      	mov	r3, r0
 801c70c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c70e:	79fa      	ldrb	r2, [r7, #7]
 801c710:	4b09      	ldr	r3, [pc, #36]	; (801c738 <SUBGRF_SetPacketType+0x34>)
 801c712:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c714:	79fb      	ldrb	r3, [r7, #7]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d104      	bne.n	801c724 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c71a:	2100      	movs	r1, #0
 801c71c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c720:	f000 fafe 	bl	801cd20 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c724:	1dfb      	adds	r3, r7, #7
 801c726:	2201      	movs	r2, #1
 801c728:	4619      	mov	r1, r3
 801c72a:	208a      	movs	r0, #138	; 0x8a
 801c72c:	f000 fba8 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c730:	bf00      	nop
 801c732:	3708      	adds	r7, #8
 801c734:	46bd      	mov	sp, r7
 801c736:	bd80      	pop	{r7, pc}
 801c738:	200018bd 	.word	0x200018bd

0801c73c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c73c:	b480      	push	{r7}
 801c73e:	af00      	add	r7, sp, #0
    return PacketType;
 801c740:	4b02      	ldr	r3, [pc, #8]	; (801c74c <SUBGRF_GetPacketType+0x10>)
 801c742:	781b      	ldrb	r3, [r3, #0]
}
 801c744:	4618      	mov	r0, r3
 801c746:	46bd      	mov	sp, r7
 801c748:	bc80      	pop	{r7}
 801c74a:	4770      	bx	lr
 801c74c:	200018bd 	.word	0x200018bd

0801c750 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c750:	b580      	push	{r7, lr}
 801c752:	b084      	sub	sp, #16
 801c754:	af00      	add	r7, sp, #0
 801c756:	4603      	mov	r3, r0
 801c758:	71fb      	strb	r3, [r7, #7]
 801c75a:	460b      	mov	r3, r1
 801c75c:	71bb      	strb	r3, [r7, #6]
 801c75e:	4613      	mov	r3, r2
 801c760:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c762:	79fb      	ldrb	r3, [r7, #7]
 801c764:	2b01      	cmp	r3, #1
 801c766:	d149      	bne.n	801c7fc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c768:	2000      	movs	r0, #0
 801c76a:	f7f1 fb07 	bl	800dd7c <RBI_GetRFOMaxPowerConfig>
 801c76e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c770:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c774:	68fa      	ldr	r2, [r7, #12]
 801c776:	429a      	cmp	r2, r3
 801c778:	da01      	bge.n	801c77e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	2b0e      	cmp	r3, #14
 801c782:	d10e      	bne.n	801c7a2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c784:	2301      	movs	r3, #1
 801c786:	2201      	movs	r2, #1
 801c788:	2100      	movs	r1, #0
 801c78a:	2004      	movs	r0, #4
 801c78c:	f7ff fef6 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c790:	79ba      	ldrb	r2, [r7, #6]
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	b2db      	uxtb	r3, r3
 801c796:	1ad3      	subs	r3, r2, r3
 801c798:	b2db      	uxtb	r3, r3
 801c79a:	330e      	adds	r3, #14
 801c79c:	b2db      	uxtb	r3, r3
 801c79e:	71bb      	strb	r3, [r7, #6]
 801c7a0:	e01f      	b.n	801c7e2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	2b0a      	cmp	r3, #10
 801c7a6:	d10e      	bne.n	801c7c6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c7a8:	2301      	movs	r3, #1
 801c7aa:	2201      	movs	r2, #1
 801c7ac:	2100      	movs	r1, #0
 801c7ae:	2001      	movs	r0, #1
 801c7b0:	f7ff fee4 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c7b4:	79ba      	ldrb	r2, [r7, #6]
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	b2db      	uxtb	r3, r3
 801c7ba:	1ad3      	subs	r3, r2, r3
 801c7bc:	b2db      	uxtb	r3, r3
 801c7be:	330d      	adds	r3, #13
 801c7c0:	b2db      	uxtb	r3, r3
 801c7c2:	71bb      	strb	r3, [r7, #6]
 801c7c4:	e00d      	b.n	801c7e2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	2201      	movs	r2, #1
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	2007      	movs	r0, #7
 801c7ce:	f7ff fed5 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7d2:	79ba      	ldrb	r2, [r7, #6]
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	b2db      	uxtb	r3, r3
 801c7d8:	1ad3      	subs	r3, r2, r3
 801c7da:	b2db      	uxtb	r3, r3
 801c7dc:	330e      	adds	r3, #14
 801c7de:	b2db      	uxtb	r3, r3
 801c7e0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c7e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c7e6:	f113 0f11 	cmn.w	r3, #17
 801c7ea:	da01      	bge.n	801c7f0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c7ec:	23ef      	movs	r3, #239	; 0xef
 801c7ee:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c7f0:	2118      	movs	r1, #24
 801c7f2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c7f6:	f000 fa93 	bl	801cd20 <SUBGRF_WriteRegister>
 801c7fa:	e067      	b.n	801c8cc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c7fc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c800:	f000 faa2 	bl	801cd48 <SUBGRF_ReadRegister>
 801c804:	4603      	mov	r3, r0
 801c806:	f043 031e 	orr.w	r3, r3, #30
 801c80a:	b2db      	uxtb	r3, r3
 801c80c:	4619      	mov	r1, r3
 801c80e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c812:	f000 fa85 	bl	801cd20 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c816:	2001      	movs	r0, #1
 801c818:	f7f1 fab0 	bl	800dd7c <RBI_GetRFOMaxPowerConfig>
 801c81c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c81e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c822:	68fa      	ldr	r2, [r7, #12]
 801c824:	429a      	cmp	r2, r3
 801c826:	da01      	bge.n	801c82c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	2b14      	cmp	r3, #20
 801c830:	d10e      	bne.n	801c850 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c832:	2301      	movs	r3, #1
 801c834:	2200      	movs	r2, #0
 801c836:	2105      	movs	r1, #5
 801c838:	2003      	movs	r0, #3
 801c83a:	f7ff fe9f 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c83e:	79ba      	ldrb	r2, [r7, #6]
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	b2db      	uxtb	r3, r3
 801c844:	1ad3      	subs	r3, r2, r3
 801c846:	b2db      	uxtb	r3, r3
 801c848:	3316      	adds	r3, #22
 801c84a:	b2db      	uxtb	r3, r3
 801c84c:	71bb      	strb	r3, [r7, #6]
 801c84e:	e031      	b.n	801c8b4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	2b11      	cmp	r3, #17
 801c854:	d10e      	bne.n	801c874 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c856:	2301      	movs	r3, #1
 801c858:	2200      	movs	r2, #0
 801c85a:	2103      	movs	r1, #3
 801c85c:	2002      	movs	r0, #2
 801c85e:	f7ff fe8d 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c862:	79ba      	ldrb	r2, [r7, #6]
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	b2db      	uxtb	r3, r3
 801c868:	1ad3      	subs	r3, r2, r3
 801c86a:	b2db      	uxtb	r3, r3
 801c86c:	3316      	adds	r3, #22
 801c86e:	b2db      	uxtb	r3, r3
 801c870:	71bb      	strb	r3, [r7, #6]
 801c872:	e01f      	b.n	801c8b4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	2b0e      	cmp	r3, #14
 801c878:	d10e      	bne.n	801c898 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c87a:	2301      	movs	r3, #1
 801c87c:	2200      	movs	r2, #0
 801c87e:	2102      	movs	r1, #2
 801c880:	2002      	movs	r0, #2
 801c882:	f7ff fe7b 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c886:	79ba      	ldrb	r2, [r7, #6]
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	b2db      	uxtb	r3, r3
 801c88c:	1ad3      	subs	r3, r2, r3
 801c88e:	b2db      	uxtb	r3, r3
 801c890:	330e      	adds	r3, #14
 801c892:	b2db      	uxtb	r3, r3
 801c894:	71bb      	strb	r3, [r7, #6]
 801c896:	e00d      	b.n	801c8b4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c898:	2301      	movs	r3, #1
 801c89a:	2200      	movs	r2, #0
 801c89c:	2107      	movs	r1, #7
 801c89e:	2004      	movs	r0, #4
 801c8a0:	f7ff fe6c 	bl	801c57c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c8a4:	79ba      	ldrb	r2, [r7, #6]
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	b2db      	uxtb	r3, r3
 801c8aa:	1ad3      	subs	r3, r2, r3
 801c8ac:	b2db      	uxtb	r3, r3
 801c8ae:	3316      	adds	r3, #22
 801c8b0:	b2db      	uxtb	r3, r3
 801c8b2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c8b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c8b8:	f113 0f09 	cmn.w	r3, #9
 801c8bc:	da01      	bge.n	801c8c2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c8be:	23f7      	movs	r3, #247	; 0xf7
 801c8c0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c8c2:	2138      	movs	r1, #56	; 0x38
 801c8c4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c8c8:	f000 fa2a 	bl	801cd20 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c8cc:	79bb      	ldrb	r3, [r7, #6]
 801c8ce:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c8d0:	797b      	ldrb	r3, [r7, #5]
 801c8d2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c8d4:	f107 0308 	add.w	r3, r7, #8
 801c8d8:	2202      	movs	r2, #2
 801c8da:	4619      	mov	r1, r3
 801c8dc:	208e      	movs	r0, #142	; 0x8e
 801c8de:	f000 facf 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801c8e2:	bf00      	nop
 801c8e4:	3710      	adds	r7, #16
 801c8e6:	46bd      	mov	sp, r7
 801c8e8:	bd80      	pop	{r7, pc}
	...

0801c8ec <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c8ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c8f0:	b086      	sub	sp, #24
 801c8f2:	af00      	add	r7, sp, #0
 801c8f4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c8fa:	4a61      	ldr	r2, [pc, #388]	; (801ca80 <SUBGRF_SetModulationParams+0x194>)
 801c8fc:	f107 0308 	add.w	r3, r7, #8
 801c900:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c904:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	781a      	ldrb	r2, [r3, #0]
 801c90c:	4b5d      	ldr	r3, [pc, #372]	; (801ca84 <SUBGRF_SetModulationParams+0x198>)
 801c90e:	781b      	ldrb	r3, [r3, #0]
 801c910:	429a      	cmp	r2, r3
 801c912:	d004      	beq.n	801c91e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	4618      	mov	r0, r3
 801c91a:	f7ff fef3 	bl	801c704 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	781b      	ldrb	r3, [r3, #0]
 801c922:	2b03      	cmp	r3, #3
 801c924:	f200 80a5 	bhi.w	801ca72 <SUBGRF_SetModulationParams+0x186>
 801c928:	a201      	add	r2, pc, #4	; (adr r2, 801c930 <SUBGRF_SetModulationParams+0x44>)
 801c92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c92e:	bf00      	nop
 801c930:	0801c941 	.word	0x0801c941
 801c934:	0801ca01 	.word	0x0801ca01
 801c938:	0801c9c3 	.word	0x0801c9c3
 801c93c:	0801ca2f 	.word	0x0801ca2f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c940:	2308      	movs	r3, #8
 801c942:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	685b      	ldr	r3, [r3, #4]
 801c948:	4a4f      	ldr	r2, [pc, #316]	; (801ca88 <SUBGRF_SetModulationParams+0x19c>)
 801c94a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c94e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c950:	697b      	ldr	r3, [r7, #20]
 801c952:	0c1b      	lsrs	r3, r3, #16
 801c954:	b2db      	uxtb	r3, r3
 801c956:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c958:	697b      	ldr	r3, [r7, #20]
 801c95a:	0a1b      	lsrs	r3, r3, #8
 801c95c:	b2db      	uxtb	r3, r3
 801c95e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c960:	697b      	ldr	r3, [r7, #20]
 801c962:	b2db      	uxtb	r3, r3
 801c964:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	7b1b      	ldrb	r3, [r3, #12]
 801c96a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	7b5b      	ldrb	r3, [r3, #13]
 801c970:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	689b      	ldr	r3, [r3, #8]
 801c976:	2200      	movs	r2, #0
 801c978:	461c      	mov	r4, r3
 801c97a:	4615      	mov	r5, r2
 801c97c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c980:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c984:	4a41      	ldr	r2, [pc, #260]	; (801ca8c <SUBGRF_SetModulationParams+0x1a0>)
 801c986:	f04f 0300 	mov.w	r3, #0
 801c98a:	4640      	mov	r0, r8
 801c98c:	4649      	mov	r1, r9
 801c98e:	f7e4 f9fd 	bl	8000d8c <__aeabi_uldivmod>
 801c992:	4602      	mov	r2, r0
 801c994:	460b      	mov	r3, r1
 801c996:	4613      	mov	r3, r2
 801c998:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c99a:	697b      	ldr	r3, [r7, #20]
 801c99c:	0c1b      	lsrs	r3, r3, #16
 801c99e:	b2db      	uxtb	r3, r3
 801c9a0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c9a2:	697b      	ldr	r3, [r7, #20]
 801c9a4:	0a1b      	lsrs	r3, r3, #8
 801c9a6:	b2db      	uxtb	r3, r3
 801c9a8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c9aa:	697b      	ldr	r3, [r7, #20]
 801c9ac:	b2db      	uxtb	r3, r3
 801c9ae:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9b0:	7cfb      	ldrb	r3, [r7, #19]
 801c9b2:	b29a      	uxth	r2, r3
 801c9b4:	f107 0308 	add.w	r3, r7, #8
 801c9b8:	4619      	mov	r1, r3
 801c9ba:	208b      	movs	r0, #139	; 0x8b
 801c9bc:	f000 fa60 	bl	801ce80 <SUBGRF_WriteCommand>
        break;
 801c9c0:	e058      	b.n	801ca74 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c9c2:	2304      	movs	r3, #4
 801c9c4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	691b      	ldr	r3, [r3, #16]
 801c9ca:	4a2f      	ldr	r2, [pc, #188]	; (801ca88 <SUBGRF_SetModulationParams+0x19c>)
 801c9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9d0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c9d2:	697b      	ldr	r3, [r7, #20]
 801c9d4:	0c1b      	lsrs	r3, r3, #16
 801c9d6:	b2db      	uxtb	r3, r3
 801c9d8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c9da:	697b      	ldr	r3, [r7, #20]
 801c9dc:	0a1b      	lsrs	r3, r3, #8
 801c9de:	b2db      	uxtb	r3, r3
 801c9e0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c9e2:	697b      	ldr	r3, [r7, #20]
 801c9e4:	b2db      	uxtb	r3, r3
 801c9e6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	7d1b      	ldrb	r3, [r3, #20]
 801c9ec:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9ee:	7cfb      	ldrb	r3, [r7, #19]
 801c9f0:	b29a      	uxth	r2, r3
 801c9f2:	f107 0308 	add.w	r3, r7, #8
 801c9f6:	4619      	mov	r1, r3
 801c9f8:	208b      	movs	r0, #139	; 0x8b
 801c9fa:	f000 fa41 	bl	801ce80 <SUBGRF_WriteCommand>
        break;
 801c9fe:	e039      	b.n	801ca74 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ca00:	2304      	movs	r3, #4
 801ca02:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	7e1b      	ldrb	r3, [r3, #24]
 801ca08:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	7e5b      	ldrb	r3, [r3, #25]
 801ca0e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	7e9b      	ldrb	r3, [r3, #26]
 801ca14:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	7edb      	ldrb	r3, [r3, #27]
 801ca1a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca1c:	7cfb      	ldrb	r3, [r7, #19]
 801ca1e:	b29a      	uxth	r2, r3
 801ca20:	f107 0308 	add.w	r3, r7, #8
 801ca24:	4619      	mov	r1, r3
 801ca26:	208b      	movs	r0, #139	; 0x8b
 801ca28:	f000 fa2a 	bl	801ce80 <SUBGRF_WriteCommand>

        break;
 801ca2c:	e022      	b.n	801ca74 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ca2e:	2305      	movs	r3, #5
 801ca30:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	685b      	ldr	r3, [r3, #4]
 801ca36:	4a14      	ldr	r2, [pc, #80]	; (801ca88 <SUBGRF_SetModulationParams+0x19c>)
 801ca38:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca3c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	0c1b      	lsrs	r3, r3, #16
 801ca42:	b2db      	uxtb	r3, r3
 801ca44:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca46:	697b      	ldr	r3, [r7, #20]
 801ca48:	0a1b      	lsrs	r3, r3, #8
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	b2db      	uxtb	r3, r3
 801ca52:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	7b1b      	ldrb	r3, [r3, #12]
 801ca58:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	7b5b      	ldrb	r3, [r3, #13]
 801ca5e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca60:	7cfb      	ldrb	r3, [r7, #19]
 801ca62:	b29a      	uxth	r2, r3
 801ca64:	f107 0308 	add.w	r3, r7, #8
 801ca68:	4619      	mov	r1, r3
 801ca6a:	208b      	movs	r0, #139	; 0x8b
 801ca6c:	f000 fa08 	bl	801ce80 <SUBGRF_WriteCommand>
        break;
 801ca70:	e000      	b.n	801ca74 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ca72:	bf00      	nop
    }
}
 801ca74:	bf00      	nop
 801ca76:	3718      	adds	r7, #24
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ca7e:	bf00      	nop
 801ca80:	0801f4ac 	.word	0x0801f4ac
 801ca84:	200018bd 	.word	0x200018bd
 801ca88:	3d090000 	.word	0x3d090000
 801ca8c:	01e84800 	.word	0x01e84800

0801ca90 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b086      	sub	sp, #24
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ca98:	2300      	movs	r3, #0
 801ca9a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ca9c:	4a48      	ldr	r2, [pc, #288]	; (801cbc0 <SUBGRF_SetPacketParams+0x130>)
 801ca9e:	f107 030c 	add.w	r3, r7, #12
 801caa2:	ca07      	ldmia	r2, {r0, r1, r2}
 801caa4:	c303      	stmia	r3!, {r0, r1}
 801caa6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	781a      	ldrb	r2, [r3, #0]
 801caac:	4b45      	ldr	r3, [pc, #276]	; (801cbc4 <SUBGRF_SetPacketParams+0x134>)
 801caae:	781b      	ldrb	r3, [r3, #0]
 801cab0:	429a      	cmp	r2, r3
 801cab2:	d004      	beq.n	801cabe <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	781b      	ldrb	r3, [r3, #0]
 801cab8:	4618      	mov	r0, r3
 801caba:	f7ff fe23 	bl	801c704 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	781b      	ldrb	r3, [r3, #0]
 801cac2:	2b03      	cmp	r3, #3
 801cac4:	d878      	bhi.n	801cbb8 <SUBGRF_SetPacketParams+0x128>
 801cac6:	a201      	add	r2, pc, #4	; (adr r2, 801cacc <SUBGRF_SetPacketParams+0x3c>)
 801cac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cacc:	0801cadd 	.word	0x0801cadd
 801cad0:	0801cb6d 	.word	0x0801cb6d
 801cad4:	0801cb61 	.word	0x0801cb61
 801cad8:	0801cadd 	.word	0x0801cadd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	7a5b      	ldrb	r3, [r3, #9]
 801cae0:	2bf1      	cmp	r3, #241	; 0xf1
 801cae2:	d10a      	bne.n	801cafa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cae4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cae8:	f7ff faaa 	bl	801c040 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801caec:	f248 0005 	movw	r0, #32773	; 0x8005
 801caf0:	f7ff fac6 	bl	801c080 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801caf4:	2302      	movs	r3, #2
 801caf6:	75bb      	strb	r3, [r7, #22]
 801caf8:	e011      	b.n	801cb1e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	7a5b      	ldrb	r3, [r3, #9]
 801cafe:	2bf2      	cmp	r3, #242	; 0xf2
 801cb00:	d10a      	bne.n	801cb18 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801cb02:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801cb06:	f7ff fa9b 	bl	801c040 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cb0a:	f241 0021 	movw	r0, #4129	; 0x1021
 801cb0e:	f7ff fab7 	bl	801c080 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cb12:	2306      	movs	r3, #6
 801cb14:	75bb      	strb	r3, [r7, #22]
 801cb16:	e002      	b.n	801cb1e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	7a5b      	ldrb	r3, [r3, #9]
 801cb1c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cb1e:	2309      	movs	r3, #9
 801cb20:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	885b      	ldrh	r3, [r3, #2]
 801cb26:	0a1b      	lsrs	r3, r3, #8
 801cb28:	b29b      	uxth	r3, r3
 801cb2a:	b2db      	uxtb	r3, r3
 801cb2c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	885b      	ldrh	r3, [r3, #2]
 801cb32:	b2db      	uxtb	r3, r3
 801cb34:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	791b      	ldrb	r3, [r3, #4]
 801cb3a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	795b      	ldrb	r3, [r3, #5]
 801cb40:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	799b      	ldrb	r3, [r3, #6]
 801cb46:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	79db      	ldrb	r3, [r3, #7]
 801cb4c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	7a1b      	ldrb	r3, [r3, #8]
 801cb52:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cb54:	7dbb      	ldrb	r3, [r7, #22]
 801cb56:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	7a9b      	ldrb	r3, [r3, #10]
 801cb5c:	753b      	strb	r3, [r7, #20]
        break;
 801cb5e:	e022      	b.n	801cba6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cb60:	2301      	movs	r3, #1
 801cb62:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	7b1b      	ldrb	r3, [r3, #12]
 801cb68:	733b      	strb	r3, [r7, #12]
        break;
 801cb6a:	e01c      	b.n	801cba6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cb6c:	2306      	movs	r3, #6
 801cb6e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	89db      	ldrh	r3, [r3, #14]
 801cb74:	0a1b      	lsrs	r3, r3, #8
 801cb76:	b29b      	uxth	r3, r3
 801cb78:	b2db      	uxtb	r3, r3
 801cb7a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	89db      	ldrh	r3, [r3, #14]
 801cb80:	b2db      	uxtb	r3, r3
 801cb82:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	7c1a      	ldrb	r2, [r3, #16]
 801cb88:	4b0f      	ldr	r3, [pc, #60]	; (801cbc8 <SUBGRF_SetPacketParams+0x138>)
 801cb8a:	4611      	mov	r1, r2
 801cb8c:	7019      	strb	r1, [r3, #0]
 801cb8e:	4613      	mov	r3, r2
 801cb90:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	7c5b      	ldrb	r3, [r3, #17]
 801cb96:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	7c9b      	ldrb	r3, [r3, #18]
 801cb9c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	7cdb      	ldrb	r3, [r3, #19]
 801cba2:	747b      	strb	r3, [r7, #17]
        break;
 801cba4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cba6:	7dfb      	ldrb	r3, [r7, #23]
 801cba8:	b29a      	uxth	r2, r3
 801cbaa:	f107 030c 	add.w	r3, r7, #12
 801cbae:	4619      	mov	r1, r3
 801cbb0:	208c      	movs	r0, #140	; 0x8c
 801cbb2:	f000 f965 	bl	801ce80 <SUBGRF_WriteCommand>
 801cbb6:	e000      	b.n	801cbba <SUBGRF_SetPacketParams+0x12a>
        return;
 801cbb8:	bf00      	nop
}
 801cbba:	3718      	adds	r7, #24
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	bd80      	pop	{r7, pc}
 801cbc0:	0801f4b4 	.word	0x0801f4b4
 801cbc4:	200018bd 	.word	0x200018bd
 801cbc8:	200018be 	.word	0x200018be

0801cbcc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b084      	sub	sp, #16
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	460a      	mov	r2, r1
 801cbd6:	71fb      	strb	r3, [r7, #7]
 801cbd8:	4613      	mov	r3, r2
 801cbda:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cbdc:	79fb      	ldrb	r3, [r7, #7]
 801cbde:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cbe0:	79bb      	ldrb	r3, [r7, #6]
 801cbe2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cbe4:	f107 030c 	add.w	r3, r7, #12
 801cbe8:	2202      	movs	r2, #2
 801cbea:	4619      	mov	r1, r3
 801cbec:	208f      	movs	r0, #143	; 0x8f
 801cbee:	f000 f947 	bl	801ce80 <SUBGRF_WriteCommand>
}
 801cbf2:	bf00      	nop
 801cbf4:	3710      	adds	r7, #16
 801cbf6:	46bd      	mov	sp, r7
 801cbf8:	bd80      	pop	{r7, pc}

0801cbfa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cbfa:	b580      	push	{r7, lr}
 801cbfc:	b082      	sub	sp, #8
 801cbfe:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cc00:	2300      	movs	r3, #0
 801cc02:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cc04:	1d3b      	adds	r3, r7, #4
 801cc06:	2201      	movs	r2, #1
 801cc08:	4619      	mov	r1, r3
 801cc0a:	2015      	movs	r0, #21
 801cc0c:	f000 f95a 	bl	801cec4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cc10:	793b      	ldrb	r3, [r7, #4]
 801cc12:	425b      	negs	r3, r3
 801cc14:	105b      	asrs	r3, r3, #1
 801cc16:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cc18:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	3708      	adds	r7, #8
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bd80      	pop	{r7, pc}

0801cc24 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cc24:	b580      	push	{r7, lr}
 801cc26:	b084      	sub	sp, #16
 801cc28:	af00      	add	r7, sp, #0
 801cc2a:	6078      	str	r0, [r7, #4]
 801cc2c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cc2e:	f107 030c 	add.w	r3, r7, #12
 801cc32:	2202      	movs	r2, #2
 801cc34:	4619      	mov	r1, r3
 801cc36:	2013      	movs	r0, #19
 801cc38:	f000 f944 	bl	801cec4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cc3c:	f7ff fd7e 	bl	801c73c <SUBGRF_GetPacketType>
 801cc40:	4603      	mov	r3, r0
 801cc42:	2b01      	cmp	r3, #1
 801cc44:	d10d      	bne.n	801cc62 <SUBGRF_GetRxBufferStatus+0x3e>
 801cc46:	4b0c      	ldr	r3, [pc, #48]	; (801cc78 <SUBGRF_GetRxBufferStatus+0x54>)
 801cc48:	781b      	ldrb	r3, [r3, #0]
 801cc4a:	b2db      	uxtb	r3, r3
 801cc4c:	2b01      	cmp	r3, #1
 801cc4e:	d108      	bne.n	801cc62 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cc50:	f240 7002 	movw	r0, #1794	; 0x702
 801cc54:	f000 f878 	bl	801cd48 <SUBGRF_ReadRegister>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	461a      	mov	r2, r3
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	701a      	strb	r2, [r3, #0]
 801cc60:	e002      	b.n	801cc68 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cc62:	7b3a      	ldrb	r2, [r7, #12]
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cc68:	7b7a      	ldrb	r2, [r7, #13]
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	701a      	strb	r2, [r3, #0]
}
 801cc6e:	bf00      	nop
 801cc70:	3710      	adds	r7, #16
 801cc72:	46bd      	mov	sp, r7
 801cc74:	bd80      	pop	{r7, pc}
 801cc76:	bf00      	nop
 801cc78:	200018be 	.word	0x200018be

0801cc7c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b084      	sub	sp, #16
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cc84:	f107 030c 	add.w	r3, r7, #12
 801cc88:	2203      	movs	r2, #3
 801cc8a:	4619      	mov	r1, r3
 801cc8c:	2014      	movs	r0, #20
 801cc8e:	f000 f919 	bl	801cec4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cc92:	f7ff fd53 	bl	801c73c <SUBGRF_GetPacketType>
 801cc96:	4603      	mov	r3, r0
 801cc98:	461a      	mov	r2, r3
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d002      	beq.n	801ccac <SUBGRF_GetPacketStatus+0x30>
 801cca6:	2b01      	cmp	r3, #1
 801cca8:	d013      	beq.n	801ccd2 <SUBGRF_GetPacketStatus+0x56>
 801ccaa:	e02a      	b.n	801cd02 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801ccac:	7b3a      	ldrb	r2, [r7, #12]
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ccb2:	7b7b      	ldrb	r3, [r7, #13]
 801ccb4:	425b      	negs	r3, r3
 801ccb6:	105b      	asrs	r3, r3, #1
 801ccb8:	b25a      	sxtb	r2, r3
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ccbe:	7bbb      	ldrb	r3, [r7, #14]
 801ccc0:	425b      	negs	r3, r3
 801ccc2:	105b      	asrs	r3, r3, #1
 801ccc4:	b25a      	sxtb	r2, r3
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	2200      	movs	r2, #0
 801ccce:	609a      	str	r2, [r3, #8]
            break;
 801ccd0:	e020      	b.n	801cd14 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ccd2:	7b3b      	ldrb	r3, [r7, #12]
 801ccd4:	425b      	negs	r3, r3
 801ccd6:	105b      	asrs	r3, r3, #1
 801ccd8:	b25a      	sxtb	r2, r3
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ccde:	7b7b      	ldrb	r3, [r7, #13]
 801cce0:	b25b      	sxtb	r3, r3
 801cce2:	3302      	adds	r3, #2
 801cce4:	109b      	asrs	r3, r3, #2
 801cce6:	b25a      	sxtb	r2, r3
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801ccec:	7bbb      	ldrb	r3, [r7, #14]
 801ccee:	425b      	negs	r3, r3
 801ccf0:	105b      	asrs	r3, r3, #1
 801ccf2:	b25a      	sxtb	r2, r3
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801ccf8:	4b08      	ldr	r3, [pc, #32]	; (801cd1c <SUBGRF_GetPacketStatus+0xa0>)
 801ccfa:	681a      	ldr	r2, [r3, #0]
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	611a      	str	r2, [r3, #16]
            break;
 801cd00:	e008      	b.n	801cd14 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801cd02:	2214      	movs	r2, #20
 801cd04:	2100      	movs	r1, #0
 801cd06:	6878      	ldr	r0, [r7, #4]
 801cd08:	f000 fc03 	bl	801d512 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	220f      	movs	r2, #15
 801cd10:	701a      	strb	r2, [r3, #0]
            break;
 801cd12:	bf00      	nop
    }
}
 801cd14:	bf00      	nop
 801cd16:	3710      	adds	r7, #16
 801cd18:	46bd      	mov	sp, r7
 801cd1a:	bd80      	pop	{r7, pc}
 801cd1c:	200018c0 	.word	0x200018c0

0801cd20 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b082      	sub	sp, #8
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	4603      	mov	r3, r0
 801cd28:	460a      	mov	r2, r1
 801cd2a:	80fb      	strh	r3, [r7, #6]
 801cd2c:	4613      	mov	r3, r2
 801cd2e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cd30:	1d7a      	adds	r2, r7, #5
 801cd32:	88f9      	ldrh	r1, [r7, #6]
 801cd34:	2301      	movs	r3, #1
 801cd36:	4803      	ldr	r0, [pc, #12]	; (801cd44 <SUBGRF_WriteRegister+0x24>)
 801cd38:	f7ed f8be 	bl	8009eb8 <HAL_SUBGHZ_WriteRegisters>
}
 801cd3c:	bf00      	nop
 801cd3e:	3708      	adds	r7, #8
 801cd40:	46bd      	mov	sp, r7
 801cd42:	bd80      	pop	{r7, pc}
 801cd44:	200003a0 	.word	0x200003a0

0801cd48 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	b084      	sub	sp, #16
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	4603      	mov	r3, r0
 801cd50:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cd52:	f107 020f 	add.w	r2, r7, #15
 801cd56:	88f9      	ldrh	r1, [r7, #6]
 801cd58:	2301      	movs	r3, #1
 801cd5a:	4804      	ldr	r0, [pc, #16]	; (801cd6c <SUBGRF_ReadRegister+0x24>)
 801cd5c:	f7ed f90b 	bl	8009f76 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cd60:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd62:	4618      	mov	r0, r3
 801cd64:	3710      	adds	r7, #16
 801cd66:	46bd      	mov	sp, r7
 801cd68:	bd80      	pop	{r7, pc}
 801cd6a:	bf00      	nop
 801cd6c:	200003a0 	.word	0x200003a0

0801cd70 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b086      	sub	sp, #24
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	4603      	mov	r3, r0
 801cd78:	6039      	str	r1, [r7, #0]
 801cd7a:	80fb      	strh	r3, [r7, #6]
 801cd7c:	4613      	mov	r3, r2
 801cd7e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd80:	f3ef 8310 	mrs	r3, PRIMASK
 801cd84:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cd88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd8a:	b672      	cpsid	i
}
 801cd8c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cd8e:	88bb      	ldrh	r3, [r7, #4]
 801cd90:	88f9      	ldrh	r1, [r7, #6]
 801cd92:	683a      	ldr	r2, [r7, #0]
 801cd94:	4806      	ldr	r0, [pc, #24]	; (801cdb0 <SUBGRF_WriteRegisters+0x40>)
 801cd96:	f7ed f88f 	bl	8009eb8 <HAL_SUBGHZ_WriteRegisters>
 801cd9a:	697b      	ldr	r3, [r7, #20]
 801cd9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd9e:	693b      	ldr	r3, [r7, #16]
 801cda0:	f383 8810 	msr	PRIMASK, r3
}
 801cda4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cda6:	bf00      	nop
 801cda8:	3718      	adds	r7, #24
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	bd80      	pop	{r7, pc}
 801cdae:	bf00      	nop
 801cdb0:	200003a0 	.word	0x200003a0

0801cdb4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b086      	sub	sp, #24
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	4603      	mov	r3, r0
 801cdbc:	6039      	str	r1, [r7, #0]
 801cdbe:	80fb      	strh	r3, [r7, #6]
 801cdc0:	4613      	mov	r3, r2
 801cdc2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdc4:	f3ef 8310 	mrs	r3, PRIMASK
 801cdc8:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdce:	b672      	cpsid	i
}
 801cdd0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801cdd2:	88bb      	ldrh	r3, [r7, #4]
 801cdd4:	88f9      	ldrh	r1, [r7, #6]
 801cdd6:	683a      	ldr	r2, [r7, #0]
 801cdd8:	4806      	ldr	r0, [pc, #24]	; (801cdf4 <SUBGRF_ReadRegisters+0x40>)
 801cdda:	f7ed f8cc 	bl	8009f76 <HAL_SUBGHZ_ReadRegisters>
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cde2:	693b      	ldr	r3, [r7, #16]
 801cde4:	f383 8810 	msr	PRIMASK, r3
}
 801cde8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cdea:	bf00      	nop
 801cdec:	3718      	adds	r7, #24
 801cdee:	46bd      	mov	sp, r7
 801cdf0:	bd80      	pop	{r7, pc}
 801cdf2:	bf00      	nop
 801cdf4:	200003a0 	.word	0x200003a0

0801cdf8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b086      	sub	sp, #24
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	4603      	mov	r3, r0
 801ce00:	6039      	str	r1, [r7, #0]
 801ce02:	71fb      	strb	r3, [r7, #7]
 801ce04:	4613      	mov	r3, r2
 801ce06:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce08:	f3ef 8310 	mrs	r3, PRIMASK
 801ce0c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce12:	b672      	cpsid	i
}
 801ce14:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ce16:	79bb      	ldrb	r3, [r7, #6]
 801ce18:	b29b      	uxth	r3, r3
 801ce1a:	79f9      	ldrb	r1, [r7, #7]
 801ce1c:	683a      	ldr	r2, [r7, #0]
 801ce1e:	4806      	ldr	r0, [pc, #24]	; (801ce38 <SUBGRF_WriteBuffer+0x40>)
 801ce20:	f7ed f9bd 	bl	800a19e <HAL_SUBGHZ_WriteBuffer>
 801ce24:	697b      	ldr	r3, [r7, #20]
 801ce26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce28:	693b      	ldr	r3, [r7, #16]
 801ce2a:	f383 8810 	msr	PRIMASK, r3
}
 801ce2e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce30:	bf00      	nop
 801ce32:	3718      	adds	r7, #24
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd80      	pop	{r7, pc}
 801ce38:	200003a0 	.word	0x200003a0

0801ce3c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce3c:	b580      	push	{r7, lr}
 801ce3e:	b086      	sub	sp, #24
 801ce40:	af00      	add	r7, sp, #0
 801ce42:	4603      	mov	r3, r0
 801ce44:	6039      	str	r1, [r7, #0]
 801ce46:	71fb      	strb	r3, [r7, #7]
 801ce48:	4613      	mov	r3, r2
 801ce4a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce4c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce50:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce56:	b672      	cpsid	i
}
 801ce58:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ce5a:	79bb      	ldrb	r3, [r7, #6]
 801ce5c:	b29b      	uxth	r3, r3
 801ce5e:	79f9      	ldrb	r1, [r7, #7]
 801ce60:	683a      	ldr	r2, [r7, #0]
 801ce62:	4806      	ldr	r0, [pc, #24]	; (801ce7c <SUBGRF_ReadBuffer+0x40>)
 801ce64:	f7ed f9ee 	bl	800a244 <HAL_SUBGHZ_ReadBuffer>
 801ce68:	697b      	ldr	r3, [r7, #20]
 801ce6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce6c:	693b      	ldr	r3, [r7, #16]
 801ce6e:	f383 8810 	msr	PRIMASK, r3
}
 801ce72:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce74:	bf00      	nop
 801ce76:	3718      	adds	r7, #24
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bd80      	pop	{r7, pc}
 801ce7c:	200003a0 	.word	0x200003a0

0801ce80 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b086      	sub	sp, #24
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	4603      	mov	r3, r0
 801ce88:	6039      	str	r1, [r7, #0]
 801ce8a:	71fb      	strb	r3, [r7, #7]
 801ce8c:	4613      	mov	r3, r2
 801ce8e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce90:	f3ef 8310 	mrs	r3, PRIMASK
 801ce94:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce96:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce9a:	b672      	cpsid	i
}
 801ce9c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ce9e:	88bb      	ldrh	r3, [r7, #4]
 801cea0:	79f9      	ldrb	r1, [r7, #7]
 801cea2:	683a      	ldr	r2, [r7, #0]
 801cea4:	4806      	ldr	r0, [pc, #24]	; (801cec0 <SUBGRF_WriteCommand+0x40>)
 801cea6:	f7ed f8c7 	bl	800a038 <HAL_SUBGHZ_ExecSetCmd>
 801ceaa:	697b      	ldr	r3, [r7, #20]
 801ceac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ceae:	693b      	ldr	r3, [r7, #16]
 801ceb0:	f383 8810 	msr	PRIMASK, r3
}
 801ceb4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ceb6:	bf00      	nop
 801ceb8:	3718      	adds	r7, #24
 801ceba:	46bd      	mov	sp, r7
 801cebc:	bd80      	pop	{r7, pc}
 801cebe:	bf00      	nop
 801cec0:	200003a0 	.word	0x200003a0

0801cec4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b086      	sub	sp, #24
 801cec8:	af00      	add	r7, sp, #0
 801ceca:	4603      	mov	r3, r0
 801cecc:	6039      	str	r1, [r7, #0]
 801cece:	71fb      	strb	r3, [r7, #7]
 801ced0:	4613      	mov	r3, r2
 801ced2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ced4:	f3ef 8310 	mrs	r3, PRIMASK
 801ced8:	60fb      	str	r3, [r7, #12]
  return(result);
 801ceda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cedc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cede:	b672      	cpsid	i
}
 801cee0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801cee2:	88bb      	ldrh	r3, [r7, #4]
 801cee4:	79f9      	ldrb	r1, [r7, #7]
 801cee6:	683a      	ldr	r2, [r7, #0]
 801cee8:	4806      	ldr	r0, [pc, #24]	; (801cf04 <SUBGRF_ReadCommand+0x40>)
 801ceea:	f7ed f904 	bl	800a0f6 <HAL_SUBGHZ_ExecGetCmd>
 801ceee:	697b      	ldr	r3, [r7, #20]
 801cef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cef2:	693b      	ldr	r3, [r7, #16]
 801cef4:	f383 8810 	msr	PRIMASK, r3
}
 801cef8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cefa:	bf00      	nop
 801cefc:	3718      	adds	r7, #24
 801cefe:	46bd      	mov	sp, r7
 801cf00:	bd80      	pop	{r7, pc}
 801cf02:	bf00      	nop
 801cf04:	200003a0 	.word	0x200003a0

0801cf08 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b084      	sub	sp, #16
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	4603      	mov	r3, r0
 801cf10:	460a      	mov	r2, r1
 801cf12:	71fb      	strb	r3, [r7, #7]
 801cf14:	4613      	mov	r3, r2
 801cf16:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801cf18:	2301      	movs	r3, #1
 801cf1a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801cf1c:	79bb      	ldrb	r3, [r7, #6]
 801cf1e:	2b01      	cmp	r3, #1
 801cf20:	d10d      	bne.n	801cf3e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801cf22:	79fb      	ldrb	r3, [r7, #7]
 801cf24:	2b01      	cmp	r3, #1
 801cf26:	d104      	bne.n	801cf32 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801cf28:	2302      	movs	r3, #2
 801cf2a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cf2c:	2004      	movs	r0, #4
 801cf2e:	f000 f8ef 	bl	801d110 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cf32:	79fb      	ldrb	r3, [r7, #7]
 801cf34:	2b02      	cmp	r3, #2
 801cf36:	d107      	bne.n	801cf48 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cf38:	2303      	movs	r3, #3
 801cf3a:	73fb      	strb	r3, [r7, #15]
 801cf3c:	e004      	b.n	801cf48 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801cf3e:	79bb      	ldrb	r3, [r7, #6]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d101      	bne.n	801cf48 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cf44:	2301      	movs	r3, #1
 801cf46:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cf48:	7bfb      	ldrb	r3, [r7, #15]
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f7f0 fef3 	bl	800dd36 <RBI_ConfigRFSwitch>
}
 801cf50:	bf00      	nop
 801cf52:	3710      	adds	r7, #16
 801cf54:	46bd      	mov	sp, r7
 801cf56:	bd80      	pop	{r7, pc}

0801cf58 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b084      	sub	sp, #16
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	4603      	mov	r3, r0
 801cf60:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cf62:	2301      	movs	r3, #1
 801cf64:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cf66:	f7f0 fef4 	bl	800dd52 <RBI_GetTxConfig>
 801cf6a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cf6c:	68bb      	ldr	r3, [r7, #8]
 801cf6e:	2b02      	cmp	r3, #2
 801cf70:	d016      	beq.n	801cfa0 <SUBGRF_SetRfTxPower+0x48>
 801cf72:	68bb      	ldr	r3, [r7, #8]
 801cf74:	2b02      	cmp	r3, #2
 801cf76:	dc16      	bgt.n	801cfa6 <SUBGRF_SetRfTxPower+0x4e>
 801cf78:	68bb      	ldr	r3, [r7, #8]
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d003      	beq.n	801cf86 <SUBGRF_SetRfTxPower+0x2e>
 801cf7e:	68bb      	ldr	r3, [r7, #8]
 801cf80:	2b01      	cmp	r3, #1
 801cf82:	d00a      	beq.n	801cf9a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cf84:	e00f      	b.n	801cfa6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cf86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf8a:	2b0f      	cmp	r3, #15
 801cf8c:	dd02      	ble.n	801cf94 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cf8e:	2302      	movs	r3, #2
 801cf90:	73fb      	strb	r3, [r7, #15]
            break;
 801cf92:	e009      	b.n	801cfa8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cf94:	2301      	movs	r3, #1
 801cf96:	73fb      	strb	r3, [r7, #15]
            break;
 801cf98:	e006      	b.n	801cfa8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cf9a:	2301      	movs	r3, #1
 801cf9c:	73fb      	strb	r3, [r7, #15]
            break;
 801cf9e:	e003      	b.n	801cfa8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cfa0:	2302      	movs	r3, #2
 801cfa2:	73fb      	strb	r3, [r7, #15]
            break;
 801cfa4:	e000      	b.n	801cfa8 <SUBGRF_SetRfTxPower+0x50>
            break;
 801cfa6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cfa8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cfac:	7bfb      	ldrb	r3, [r7, #15]
 801cfae:	2202      	movs	r2, #2
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	f7ff fbcd 	bl	801c750 <SUBGRF_SetTxParams>

    return paSelect;
 801cfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfb8:	4618      	mov	r0, r3
 801cfba:	3710      	adds	r7, #16
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd80      	pop	{r7, pc}

0801cfc0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cfc0:	b480      	push	{r7}
 801cfc2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cfc4:	2301      	movs	r3, #1
}
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	bc80      	pop	{r7}
 801cfcc:	4770      	bx	lr
	...

0801cfd0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b082      	sub	sp, #8
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cfd8:	4b03      	ldr	r3, [pc, #12]	; (801cfe8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	2001      	movs	r0, #1
 801cfde:	4798      	blx	r3
}
 801cfe0:	bf00      	nop
 801cfe2:	3708      	adds	r7, #8
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bd80      	pop	{r7, pc}
 801cfe8:	200018c8 	.word	0x200018c8

0801cfec <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b082      	sub	sp, #8
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801cff4:	4b03      	ldr	r3, [pc, #12]	; (801d004 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	2002      	movs	r0, #2
 801cffa:	4798      	blx	r3
}
 801cffc:	bf00      	nop
 801cffe:	3708      	adds	r7, #8
 801d000:	46bd      	mov	sp, r7
 801d002:	bd80      	pop	{r7, pc}
 801d004:	200018c8 	.word	0x200018c8

0801d008 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b082      	sub	sp, #8
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d010:	4b03      	ldr	r3, [pc, #12]	; (801d020 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	2040      	movs	r0, #64	; 0x40
 801d016:	4798      	blx	r3
}
 801d018:	bf00      	nop
 801d01a:	3708      	adds	r7, #8
 801d01c:	46bd      	mov	sp, r7
 801d01e:	bd80      	pop	{r7, pc}
 801d020:	200018c8 	.word	0x200018c8

0801d024 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b082      	sub	sp, #8
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
 801d02c:	460b      	mov	r3, r1
 801d02e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d030:	78fb      	ldrb	r3, [r7, #3]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d002      	beq.n	801d03c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d036:	2b01      	cmp	r3, #1
 801d038:	d005      	beq.n	801d046 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d03a:	e00a      	b.n	801d052 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d03c:	4b07      	ldr	r3, [pc, #28]	; (801d05c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	2080      	movs	r0, #128	; 0x80
 801d042:	4798      	blx	r3
            break;
 801d044:	e005      	b.n	801d052 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d046:	4b05      	ldr	r3, [pc, #20]	; (801d05c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d04e:	4798      	blx	r3
            break;
 801d050:	bf00      	nop
    }
}
 801d052:	bf00      	nop
 801d054:	3708      	adds	r7, #8
 801d056:	46bd      	mov	sp, r7
 801d058:	bd80      	pop	{r7, pc}
 801d05a:	bf00      	nop
 801d05c:	200018c8 	.word	0x200018c8

0801d060 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b082      	sub	sp, #8
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d068:	4b04      	ldr	r3, [pc, #16]	; (801d07c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d070:	4798      	blx	r3
}
 801d072:	bf00      	nop
 801d074:	3708      	adds	r7, #8
 801d076:	46bd      	mov	sp, r7
 801d078:	bd80      	pop	{r7, pc}
 801d07a:	bf00      	nop
 801d07c:	200018c8 	.word	0x200018c8

0801d080 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b082      	sub	sp, #8
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d088:	4b03      	ldr	r3, [pc, #12]	; (801d098 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	2020      	movs	r0, #32
 801d08e:	4798      	blx	r3
}
 801d090:	bf00      	nop
 801d092:	3708      	adds	r7, #8
 801d094:	46bd      	mov	sp, r7
 801d096:	bd80      	pop	{r7, pc}
 801d098:	200018c8 	.word	0x200018c8

0801d09c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b082      	sub	sp, #8
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d0a4:	4b03      	ldr	r3, [pc, #12]	; (801d0b4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	2004      	movs	r0, #4
 801d0aa:	4798      	blx	r3
}
 801d0ac:	bf00      	nop
 801d0ae:	3708      	adds	r7, #8
 801d0b0:	46bd      	mov	sp, r7
 801d0b2:	bd80      	pop	{r7, pc}
 801d0b4:	200018c8 	.word	0x200018c8

0801d0b8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	b082      	sub	sp, #8
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d0c0:	4b03      	ldr	r3, [pc, #12]	; (801d0d0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	2008      	movs	r0, #8
 801d0c6:	4798      	blx	r3
}
 801d0c8:	bf00      	nop
 801d0ca:	3708      	adds	r7, #8
 801d0cc:	46bd      	mov	sp, r7
 801d0ce:	bd80      	pop	{r7, pc}
 801d0d0:	200018c8 	.word	0x200018c8

0801d0d4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b082      	sub	sp, #8
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d0dc:	4b03      	ldr	r3, [pc, #12]	; (801d0ec <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	2010      	movs	r0, #16
 801d0e2:	4798      	blx	r3
}
 801d0e4:	bf00      	nop
 801d0e6:	3708      	adds	r7, #8
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	200018c8 	.word	0x200018c8

0801d0f0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b082      	sub	sp, #8
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d0f8:	4b04      	ldr	r3, [pc, #16]	; (801d10c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d100:	4798      	blx	r3
}
 801d102:	bf00      	nop
 801d104:	3708      	adds	r7, #8
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	200018c8 	.word	0x200018c8

0801d110 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b084      	sub	sp, #16
 801d114:	af00      	add	r7, sp, #0
 801d116:	4603      	mov	r3, r0
 801d118:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d11a:	f7f0 fe28 	bl	800dd6e <RBI_IsDCDC>
 801d11e:	4603      	mov	r3, r0
 801d120:	2b01      	cmp	r3, #1
 801d122:	d112      	bne.n	801d14a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d124:	f640 1023 	movw	r0, #2339	; 0x923
 801d128:	f7ff fe0e 	bl	801cd48 <SUBGRF_ReadRegister>
 801d12c:	4603      	mov	r3, r0
 801d12e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d130:	7bfb      	ldrb	r3, [r7, #15]
 801d132:	f023 0306 	bic.w	r3, r3, #6
 801d136:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d138:	7bfa      	ldrb	r2, [r7, #15]
 801d13a:	79fb      	ldrb	r3, [r7, #7]
 801d13c:	4313      	orrs	r3, r2
 801d13e:	b2db      	uxtb	r3, r3
 801d140:	4619      	mov	r1, r3
 801d142:	f640 1023 	movw	r0, #2339	; 0x923
 801d146:	f7ff fdeb 	bl	801cd20 <SUBGRF_WriteRegister>
  }
}
 801d14a:	bf00      	nop
 801d14c:	3710      	adds	r7, #16
 801d14e:	46bd      	mov	sp, r7
 801d150:	bd80      	pop	{r7, pc}
	...

0801d154 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d154:	b480      	push	{r7}
 801d156:	b085      	sub	sp, #20
 801d158:	af00      	add	r7, sp, #0
 801d15a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d101      	bne.n	801d166 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d162:	231f      	movs	r3, #31
 801d164:	e016      	b.n	801d194 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d166:	2300      	movs	r3, #0
 801d168:	73fb      	strb	r3, [r7, #15]
 801d16a:	e00f      	b.n	801d18c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d16c:	7bfb      	ldrb	r3, [r7, #15]
 801d16e:	4a0c      	ldr	r2, [pc, #48]	; (801d1a0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d174:	687a      	ldr	r2, [r7, #4]
 801d176:	429a      	cmp	r2, r3
 801d178:	d205      	bcs.n	801d186 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d17a:	7bfb      	ldrb	r3, [r7, #15]
 801d17c:	4a08      	ldr	r2, [pc, #32]	; (801d1a0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d17e:	00db      	lsls	r3, r3, #3
 801d180:	4413      	add	r3, r2
 801d182:	791b      	ldrb	r3, [r3, #4]
 801d184:	e006      	b.n	801d194 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d186:	7bfb      	ldrb	r3, [r7, #15]
 801d188:	3301      	adds	r3, #1
 801d18a:	73fb      	strb	r3, [r7, #15]
 801d18c:	7bfb      	ldrb	r3, [r7, #15]
 801d18e:	2b15      	cmp	r3, #21
 801d190:	d9ec      	bls.n	801d16c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d192:	e7fe      	b.n	801d192 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d194:	4618      	mov	r0, r3
 801d196:	3714      	adds	r7, #20
 801d198:	46bd      	mov	sp, r7
 801d19a:	bc80      	pop	{r7}
 801d19c:	4770      	bx	lr
 801d19e:	bf00      	nop
 801d1a0:	0801faa4 	.word	0x0801faa4

0801d1a4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d1a4:	b580      	push	{r7, lr}
 801d1a6:	b08a      	sub	sp, #40	; 0x28
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	6078      	str	r0, [r7, #4]
 801d1ac:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d1ae:	4b35      	ldr	r3, [pc, #212]	; (801d284 <SUBGRF_GetCFO+0xe0>)
 801d1b0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d1b2:	f640 0007 	movw	r0, #2055	; 0x807
 801d1b6:	f7ff fdc7 	bl	801cd48 <SUBGRF_ReadRegister>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d1be:	7ffb      	ldrb	r3, [r7, #31]
 801d1c0:	08db      	lsrs	r3, r3, #3
 801d1c2:	b2db      	uxtb	r3, r3
 801d1c4:	f003 0303 	and.w	r3, r3, #3
 801d1c8:	3328      	adds	r3, #40	; 0x28
 801d1ca:	443b      	add	r3, r7
 801d1cc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d1d0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d1d2:	7ffb      	ldrb	r3, [r7, #31]
 801d1d4:	f003 0307 	and.w	r3, r3, #7
 801d1d8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d1da:	7fba      	ldrb	r2, [r7, #30]
 801d1dc:	7f7b      	ldrb	r3, [r7, #29]
 801d1de:	3301      	adds	r3, #1
 801d1e0:	fa02 f303 	lsl.w	r3, r2, r3
 801d1e4:	461a      	mov	r2, r3
 801d1e6:	4b28      	ldr	r3, [pc, #160]	; (801d288 <SUBGRF_GetCFO+0xe4>)
 801d1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1ec:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d1ee:	69ba      	ldr	r2, [r7, #24]
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801d1f6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d202:	697a      	ldr	r2, [r7, #20]
 801d204:	fb02 f303 	mul.w	r3, r2, r3
 801d208:	2b07      	cmp	r3, #7
 801d20a:	d802      	bhi.n	801d212 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d20c:	2302      	movs	r3, #2
 801d20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d216:	697a      	ldr	r2, [r7, #20]
 801d218:	fb02 f303 	mul.w	r3, r2, r3
 801d21c:	2b03      	cmp	r3, #3
 801d21e:	d802      	bhi.n	801d226 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d220:	2304      	movs	r3, #4
 801d222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d226:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d22a:	69bb      	ldr	r3, [r7, #24]
 801d22c:	fb02 f303 	mul.w	r3, r2, r3
 801d230:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d232:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d236:	f7ff fd87 	bl	801cd48 <SUBGRF_ReadRegister>
 801d23a:	4603      	mov	r3, r0
 801d23c:	021b      	lsls	r3, r3, #8
 801d23e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d242:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d244:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d248:	f7ff fd7e 	bl	801cd48 <SUBGRF_ReadRegister>
 801d24c:	4603      	mov	r3, r0
 801d24e:	461a      	mov	r2, r3
 801d250:	6a3b      	ldr	r3, [r7, #32]
 801d252:	4313      	orrs	r3, r2
 801d254:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d256:	6a3b      	ldr	r3, [r7, #32]
 801d258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d005      	beq.n	801d26c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d260:	6a3b      	ldr	r3, [r7, #32]
 801d262:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d266:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d26a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d26c:	693b      	ldr	r3, [r7, #16]
 801d26e:	095b      	lsrs	r3, r3, #5
 801d270:	6a3a      	ldr	r2, [r7, #32]
 801d272:	fb02 f303 	mul.w	r3, r2, r3
 801d276:	11da      	asrs	r2, r3, #7
 801d278:	683b      	ldr	r3, [r7, #0]
 801d27a:	601a      	str	r2, [r3, #0]
}
 801d27c:	bf00      	nop
 801d27e:	3728      	adds	r7, #40	; 0x28
 801d280:	46bd      	mov	sp, r7
 801d282:	bd80      	pop	{r7, pc}
 801d284:	0c0a0804 	.word	0x0c0a0804
 801d288:	01e84800 	.word	0x01e84800

0801d28c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d28c:	b480      	push	{r7}
 801d28e:	b087      	sub	sp, #28
 801d290:	af00      	add	r7, sp, #0
 801d292:	4603      	mov	r3, r0
 801d294:	60b9      	str	r1, [r7, #8]
 801d296:	607a      	str	r2, [r7, #4]
 801d298:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d29a:	2300      	movs	r3, #0
 801d29c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d29e:	f04f 33ff 	mov.w	r3, #4294967295
 801d2a2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2a4:	697b      	ldr	r3, [r7, #20]
}
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	371c      	adds	r7, #28
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bc80      	pop	{r7}
 801d2ae:	4770      	bx	lr

0801d2b0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d2b0:	b480      	push	{r7}
 801d2b2:	b087      	sub	sp, #28
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	4603      	mov	r3, r0
 801d2b8:	60b9      	str	r1, [r7, #8]
 801d2ba:	607a      	str	r2, [r7, #4]
 801d2bc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d2be:	2300      	movs	r3, #0
 801d2c0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d2c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2c8:	697b      	ldr	r3, [r7, #20]
}
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	371c      	adds	r7, #28
 801d2ce:	46bd      	mov	sp, r7
 801d2d0:	bc80      	pop	{r7}
 801d2d2:	4770      	bx	lr

0801d2d4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d2d4:	b480      	push	{r7}
 801d2d6:	b085      	sub	sp, #20
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	60f8      	str	r0, [r7, #12]
 801d2dc:	60b9      	str	r1, [r7, #8]
 801d2de:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d2e0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	3714      	adds	r7, #20
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bc80      	pop	{r7}
 801d2ec:	4770      	bx	lr

0801d2ee <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d2ee:	b480      	push	{r7}
 801d2f0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d2f2:	bf00      	nop
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	bc80      	pop	{r7}
 801d2f8:	4770      	bx	lr

0801d2fa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d2fa:	b480      	push	{r7}
 801d2fc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d2fe:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d300:	4618      	mov	r0, r3
 801d302:	46bd      	mov	sp, r7
 801d304:	bc80      	pop	{r7}
 801d306:	4770      	bx	lr

0801d308 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d308:	b480      	push	{r7}
 801d30a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d30c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d30e:	4618      	mov	r0, r3
 801d310:	46bd      	mov	sp, r7
 801d312:	bc80      	pop	{r7}
 801d314:	4770      	bx	lr

0801d316 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d316:	b480      	push	{r7}
 801d318:	b083      	sub	sp, #12
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	4603      	mov	r3, r0
 801d31e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d320:	bf00      	nop
 801d322:	370c      	adds	r7, #12
 801d324:	46bd      	mov	sp, r7
 801d326:	bc80      	pop	{r7}
 801d328:	4770      	bx	lr

0801d32a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d32a:	b480      	push	{r7}
 801d32c:	b087      	sub	sp, #28
 801d32e:	af00      	add	r7, sp, #0
 801d330:	60f8      	str	r0, [r7, #12]
 801d332:	460b      	mov	r3, r1
 801d334:	607a      	str	r2, [r7, #4]
 801d336:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d338:	f04f 33ff 	mov.w	r3, #4294967295
 801d33c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d33e:	697b      	ldr	r3, [r7, #20]
}
 801d340:	4618      	mov	r0, r3
 801d342:	371c      	adds	r7, #28
 801d344:	46bd      	mov	sp, r7
 801d346:	bc80      	pop	{r7}
 801d348:	4770      	bx	lr

0801d34a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d34a:	b480      	push	{r7}
 801d34c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d34e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d352:	4618      	mov	r0, r3
 801d354:	46bd      	mov	sp, r7
 801d356:	bc80      	pop	{r7}
 801d358:	4770      	bx	lr

0801d35a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d35a:	b480      	push	{r7}
 801d35c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d35e:	bf00      	nop
 801d360:	46bd      	mov	sp, r7
 801d362:	bc80      	pop	{r7}
 801d364:	4770      	bx	lr

0801d366 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d366:	b480      	push	{r7}
 801d368:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d36a:	bf00      	nop
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bc80      	pop	{r7}
 801d370:	4770      	bx	lr

0801d372 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d372:	b480      	push	{r7}
 801d374:	b083      	sub	sp, #12
 801d376:	af00      	add	r7, sp, #0
 801d378:	4603      	mov	r3, r0
 801d37a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d37c:	bf00      	nop
 801d37e:	370c      	adds	r7, #12
 801d380:	46bd      	mov	sp, r7
 801d382:	bc80      	pop	{r7}
 801d384:	4770      	bx	lr
	...

0801d388 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d388:	b480      	push	{r7}
 801d38a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d38c:	4b04      	ldr	r3, [pc, #16]	; (801d3a0 <UTIL_LPM_Init+0x18>)
 801d38e:	2200      	movs	r2, #0
 801d390:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d392:	4b04      	ldr	r3, [pc, #16]	; (801d3a4 <UTIL_LPM_Init+0x1c>)
 801d394:	2200      	movs	r2, #0
 801d396:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d398:	bf00      	nop
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bc80      	pop	{r7}
 801d39e:	4770      	bx	lr
 801d3a0:	200018cc 	.word	0x200018cc
 801d3a4:	200018d0 	.word	0x200018d0

0801d3a8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d3a8:	b480      	push	{r7}
 801d3aa:	b087      	sub	sp, #28
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	6078      	str	r0, [r7, #4]
 801d3b0:	460b      	mov	r3, r1
 801d3b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3b4:	f3ef 8310 	mrs	r3, PRIMASK
 801d3b8:	613b      	str	r3, [r7, #16]
  return(result);
 801d3ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d3bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3be:	b672      	cpsid	i
}
 801d3c0:	bf00      	nop
  
  switch( state )
 801d3c2:	78fb      	ldrb	r3, [r7, #3]
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	d008      	beq.n	801d3da <UTIL_LPM_SetStopMode+0x32>
 801d3c8:	2b01      	cmp	r3, #1
 801d3ca:	d10e      	bne.n	801d3ea <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d3cc:	4b0d      	ldr	r3, [pc, #52]	; (801d404 <UTIL_LPM_SetStopMode+0x5c>)
 801d3ce:	681a      	ldr	r2, [r3, #0]
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	4313      	orrs	r3, r2
 801d3d4:	4a0b      	ldr	r2, [pc, #44]	; (801d404 <UTIL_LPM_SetStopMode+0x5c>)
 801d3d6:	6013      	str	r3, [r2, #0]
      break;
 801d3d8:	e008      	b.n	801d3ec <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	43da      	mvns	r2, r3
 801d3de:	4b09      	ldr	r3, [pc, #36]	; (801d404 <UTIL_LPM_SetStopMode+0x5c>)
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	4013      	ands	r3, r2
 801d3e4:	4a07      	ldr	r2, [pc, #28]	; (801d404 <UTIL_LPM_SetStopMode+0x5c>)
 801d3e6:	6013      	str	r3, [r2, #0]
      break;
 801d3e8:	e000      	b.n	801d3ec <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d3ea:	bf00      	nop
 801d3ec:	697b      	ldr	r3, [r7, #20]
 801d3ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	f383 8810 	msr	PRIMASK, r3
}
 801d3f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d3f8:	bf00      	nop
 801d3fa:	371c      	adds	r7, #28
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	bc80      	pop	{r7}
 801d400:	4770      	bx	lr
 801d402:	bf00      	nop
 801d404:	200018cc 	.word	0x200018cc

0801d408 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d408:	b480      	push	{r7}
 801d40a:	b087      	sub	sp, #28
 801d40c:	af00      	add	r7, sp, #0
 801d40e:	6078      	str	r0, [r7, #4]
 801d410:	460b      	mov	r3, r1
 801d412:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d414:	f3ef 8310 	mrs	r3, PRIMASK
 801d418:	613b      	str	r3, [r7, #16]
  return(result);
 801d41a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d41c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d41e:	b672      	cpsid	i
}
 801d420:	bf00      	nop
  
  switch(state)
 801d422:	78fb      	ldrb	r3, [r7, #3]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d008      	beq.n	801d43a <UTIL_LPM_SetOffMode+0x32>
 801d428:	2b01      	cmp	r3, #1
 801d42a:	d10e      	bne.n	801d44a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d42c:	4b0d      	ldr	r3, [pc, #52]	; (801d464 <UTIL_LPM_SetOffMode+0x5c>)
 801d42e:	681a      	ldr	r2, [r3, #0]
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	4313      	orrs	r3, r2
 801d434:	4a0b      	ldr	r2, [pc, #44]	; (801d464 <UTIL_LPM_SetOffMode+0x5c>)
 801d436:	6013      	str	r3, [r2, #0]
      break;
 801d438:	e008      	b.n	801d44c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	43da      	mvns	r2, r3
 801d43e:	4b09      	ldr	r3, [pc, #36]	; (801d464 <UTIL_LPM_SetOffMode+0x5c>)
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	4013      	ands	r3, r2
 801d444:	4a07      	ldr	r2, [pc, #28]	; (801d464 <UTIL_LPM_SetOffMode+0x5c>)
 801d446:	6013      	str	r3, [r2, #0]
      break;
 801d448:	e000      	b.n	801d44c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d44a:	bf00      	nop
 801d44c:	697b      	ldr	r3, [r7, #20]
 801d44e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	f383 8810 	msr	PRIMASK, r3
}
 801d456:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d458:	bf00      	nop
 801d45a:	371c      	adds	r7, #28
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bc80      	pop	{r7}
 801d460:	4770      	bx	lr
 801d462:	bf00      	nop
 801d464:	200018d0 	.word	0x200018d0

0801d468 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d468:	b580      	push	{r7, lr}
 801d46a:	b084      	sub	sp, #16
 801d46c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d46e:	f3ef 8310 	mrs	r3, PRIMASK
 801d472:	60bb      	str	r3, [r7, #8]
  return(result);
 801d474:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d478:	b672      	cpsid	i
}
 801d47a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d47c:	4b12      	ldr	r3, [pc, #72]	; (801d4c8 <UTIL_LPM_EnterLowPower+0x60>)
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d006      	beq.n	801d492 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d484:	4b11      	ldr	r3, [pc, #68]	; (801d4cc <UTIL_LPM_EnterLowPower+0x64>)
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d48a:	4b10      	ldr	r3, [pc, #64]	; (801d4cc <UTIL_LPM_EnterLowPower+0x64>)
 801d48c:	685b      	ldr	r3, [r3, #4]
 801d48e:	4798      	blx	r3
 801d490:	e010      	b.n	801d4b4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d492:	4b0f      	ldr	r3, [pc, #60]	; (801d4d0 <UTIL_LPM_EnterLowPower+0x68>)
 801d494:	681b      	ldr	r3, [r3, #0]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d006      	beq.n	801d4a8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d49a:	4b0c      	ldr	r3, [pc, #48]	; (801d4cc <UTIL_LPM_EnterLowPower+0x64>)
 801d49c:	689b      	ldr	r3, [r3, #8]
 801d49e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d4a0:	4b0a      	ldr	r3, [pc, #40]	; (801d4cc <UTIL_LPM_EnterLowPower+0x64>)
 801d4a2:	68db      	ldr	r3, [r3, #12]
 801d4a4:	4798      	blx	r3
 801d4a6:	e005      	b.n	801d4b4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d4a8:	4b08      	ldr	r3, [pc, #32]	; (801d4cc <UTIL_LPM_EnterLowPower+0x64>)
 801d4aa:	691b      	ldr	r3, [r3, #16]
 801d4ac:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d4ae:	4b07      	ldr	r3, [pc, #28]	; (801d4cc <UTIL_LPM_EnterLowPower+0x64>)
 801d4b0:	695b      	ldr	r3, [r3, #20]
 801d4b2:	4798      	blx	r3
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	f383 8810 	msr	PRIMASK, r3
}
 801d4be:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d4c0:	bf00      	nop
 801d4c2:	3710      	adds	r7, #16
 801d4c4:	46bd      	mov	sp, r7
 801d4c6:	bd80      	pop	{r7, pc}
 801d4c8:	200018cc 	.word	0x200018cc
 801d4cc:	0801f518 	.word	0x0801f518
 801d4d0:	200018d0 	.word	0x200018d0

0801d4d4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d4d4:	b480      	push	{r7}
 801d4d6:	b087      	sub	sp, #28
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	60f8      	str	r0, [r7, #12]
 801d4dc:	60b9      	str	r1, [r7, #8]
 801d4de:	4613      	mov	r3, r2
 801d4e0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d4e6:	68bb      	ldr	r3, [r7, #8]
 801d4e8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d4ea:	e007      	b.n	801d4fc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d4ec:	693a      	ldr	r2, [r7, #16]
 801d4ee:	1c53      	adds	r3, r2, #1
 801d4f0:	613b      	str	r3, [r7, #16]
 801d4f2:	697b      	ldr	r3, [r7, #20]
 801d4f4:	1c59      	adds	r1, r3, #1
 801d4f6:	6179      	str	r1, [r7, #20]
 801d4f8:	7812      	ldrb	r2, [r2, #0]
 801d4fa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d4fc:	88fb      	ldrh	r3, [r7, #6]
 801d4fe:	1e5a      	subs	r2, r3, #1
 801d500:	80fa      	strh	r2, [r7, #6]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d1f2      	bne.n	801d4ec <UTIL_MEM_cpy_8+0x18>
    }
}
 801d506:	bf00      	nop
 801d508:	bf00      	nop
 801d50a:	371c      	adds	r7, #28
 801d50c:	46bd      	mov	sp, r7
 801d50e:	bc80      	pop	{r7}
 801d510:	4770      	bx	lr

0801d512 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d512:	b480      	push	{r7}
 801d514:	b085      	sub	sp, #20
 801d516:	af00      	add	r7, sp, #0
 801d518:	6078      	str	r0, [r7, #4]
 801d51a:	460b      	mov	r3, r1
 801d51c:	70fb      	strb	r3, [r7, #3]
 801d51e:	4613      	mov	r3, r2
 801d520:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d526:	e004      	b.n	801d532 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	1c5a      	adds	r2, r3, #1
 801d52c:	60fa      	str	r2, [r7, #12]
 801d52e:	78fa      	ldrb	r2, [r7, #3]
 801d530:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d532:	883b      	ldrh	r3, [r7, #0]
 801d534:	1e5a      	subs	r2, r3, #1
 801d536:	803a      	strh	r2, [r7, #0]
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d1f5      	bne.n	801d528 <UTIL_MEM_set_8+0x16>
  }
}
 801d53c:	bf00      	nop
 801d53e:	bf00      	nop
 801d540:	3714      	adds	r7, #20
 801d542:	46bd      	mov	sp, r7
 801d544:	bc80      	pop	{r7}
 801d546:	4770      	bx	lr

0801d548 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d548:	b082      	sub	sp, #8
 801d54a:	b480      	push	{r7}
 801d54c:	b087      	sub	sp, #28
 801d54e:	af00      	add	r7, sp, #0
 801d550:	60f8      	str	r0, [r7, #12]
 801d552:	1d38      	adds	r0, r7, #4
 801d554:	e880 0006 	stmia.w	r0, {r1, r2}
 801d558:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d55a:	2300      	movs	r3, #0
 801d55c:	613b      	str	r3, [r7, #16]
 801d55e:	2300      	movs	r3, #0
 801d560:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d562:	687a      	ldr	r2, [r7, #4]
 801d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d566:	4413      	add	r3, r2
 801d568:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d56a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d56e:	b29a      	uxth	r2, r3
 801d570:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d574:	b29b      	uxth	r3, r3
 801d576:	4413      	add	r3, r2
 801d578:	b29b      	uxth	r3, r3
 801d57a:	b21b      	sxth	r3, r3
 801d57c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d57e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d586:	db0a      	blt.n	801d59e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d588:	693b      	ldr	r3, [r7, #16]
 801d58a:	3301      	adds	r3, #1
 801d58c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d58e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d592:	b29b      	uxth	r3, r3
 801d594:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d598:	b29b      	uxth	r3, r3
 801d59a:	b21b      	sxth	r3, r3
 801d59c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	461a      	mov	r2, r3
 801d5a2:	f107 0310 	add.w	r3, r7, #16
 801d5a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d5ae:	68f8      	ldr	r0, [r7, #12]
 801d5b0:	371c      	adds	r7, #28
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bc80      	pop	{r7}
 801d5b6:	b002      	add	sp, #8
 801d5b8:	4770      	bx	lr

0801d5ba <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d5ba:	b082      	sub	sp, #8
 801d5bc:	b480      	push	{r7}
 801d5be:	b087      	sub	sp, #28
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	60f8      	str	r0, [r7, #12]
 801d5c4:	1d38      	adds	r0, r7, #4
 801d5c6:	e880 0006 	stmia.w	r0, {r1, r2}
 801d5ca:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	613b      	str	r3, [r7, #16]
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d5d4:	687a      	ldr	r2, [r7, #4]
 801d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5d8:	1ad3      	subs	r3, r2, r3
 801d5da:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d5dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d5e0:	b29a      	uxth	r2, r3
 801d5e2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d5e6:	b29b      	uxth	r3, r3
 801d5e8:	1ad3      	subs	r3, r2, r3
 801d5ea:	b29b      	uxth	r3, r3
 801d5ec:	b21b      	sxth	r3, r3
 801d5ee:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d5f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	da0a      	bge.n	801d60e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d5f8:	693b      	ldr	r3, [r7, #16]
 801d5fa:	3b01      	subs	r3, #1
 801d5fc:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d5fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d602:	b29b      	uxth	r3, r3
 801d604:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d608:	b29b      	uxth	r3, r3
 801d60a:	b21b      	sxth	r3, r3
 801d60c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	461a      	mov	r2, r3
 801d612:	f107 0310 	add.w	r3, r7, #16
 801d616:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d61a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d61e:	68f8      	ldr	r0, [r7, #12]
 801d620:	371c      	adds	r7, #28
 801d622:	46bd      	mov	sp, r7
 801d624:	bc80      	pop	{r7}
 801d626:	b002      	add	sp, #8
 801d628:	4770      	bx	lr
	...

0801d62c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b088      	sub	sp, #32
 801d630:	af02      	add	r7, sp, #8
 801d632:	463b      	mov	r3, r7
 801d634:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d638:	2300      	movs	r3, #0
 801d63a:	60bb      	str	r3, [r7, #8]
 801d63c:	2300      	movs	r3, #0
 801d63e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d640:	4b10      	ldr	r3, [pc, #64]	; (801d684 <SysTimeSet+0x58>)
 801d642:	691b      	ldr	r3, [r3, #16]
 801d644:	f107 0208 	add.w	r2, r7, #8
 801d648:	3204      	adds	r2, #4
 801d64a:	4610      	mov	r0, r2
 801d64c:	4798      	blx	r3
 801d64e:	4603      	mov	r3, r0
 801d650:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d652:	f107 0010 	add.w	r0, r7, #16
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	9300      	str	r3, [sp, #0]
 801d65a:	68bb      	ldr	r3, [r7, #8]
 801d65c:	463a      	mov	r2, r7
 801d65e:	ca06      	ldmia	r2, {r1, r2}
 801d660:	f7ff ffab 	bl	801d5ba <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d664:	4b07      	ldr	r3, [pc, #28]	; (801d684 <SysTimeSet+0x58>)
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	693a      	ldr	r2, [r7, #16]
 801d66a:	4610      	mov	r0, r2
 801d66c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d66e:	4b05      	ldr	r3, [pc, #20]	; (801d684 <SysTimeSet+0x58>)
 801d670:	689b      	ldr	r3, [r3, #8]
 801d672:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d676:	4610      	mov	r0, r2
 801d678:	4798      	blx	r3
}
 801d67a:	bf00      	nop
 801d67c:	3718      	adds	r7, #24
 801d67e:	46bd      	mov	sp, r7
 801d680:	bd80      	pop	{r7, pc}
 801d682:	bf00      	nop
 801d684:	0801f5fc 	.word	0x0801f5fc

0801d688 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d688:	b580      	push	{r7, lr}
 801d68a:	b08a      	sub	sp, #40	; 0x28
 801d68c:	af02      	add	r7, sp, #8
 801d68e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d690:	2300      	movs	r3, #0
 801d692:	61bb      	str	r3, [r7, #24]
 801d694:	2300      	movs	r3, #0
 801d696:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d698:	2300      	movs	r3, #0
 801d69a:	613b      	str	r3, [r7, #16]
 801d69c:	2300      	movs	r3, #0
 801d69e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d6a0:	4b14      	ldr	r3, [pc, #80]	; (801d6f4 <SysTimeGet+0x6c>)
 801d6a2:	691b      	ldr	r3, [r3, #16]
 801d6a4:	f107 0218 	add.w	r2, r7, #24
 801d6a8:	3204      	adds	r2, #4
 801d6aa:	4610      	mov	r0, r2
 801d6ac:	4798      	blx	r3
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d6b2:	4b10      	ldr	r3, [pc, #64]	; (801d6f4 <SysTimeGet+0x6c>)
 801d6b4:	68db      	ldr	r3, [r3, #12]
 801d6b6:	4798      	blx	r3
 801d6b8:	4603      	mov	r3, r0
 801d6ba:	b21b      	sxth	r3, r3
 801d6bc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d6be:	4b0d      	ldr	r3, [pc, #52]	; (801d6f4 <SysTimeGet+0x6c>)
 801d6c0:	685b      	ldr	r3, [r3, #4]
 801d6c2:	4798      	blx	r3
 801d6c4:	4603      	mov	r3, r0
 801d6c6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d6c8:	f107 0010 	add.w	r0, r7, #16
 801d6cc:	69fb      	ldr	r3, [r7, #28]
 801d6ce:	9300      	str	r3, [sp, #0]
 801d6d0:	69bb      	ldr	r3, [r7, #24]
 801d6d2:	f107 0208 	add.w	r2, r7, #8
 801d6d6:	ca06      	ldmia	r2, {r1, r2}
 801d6d8:	f7ff ff36 	bl	801d548 <SysTimeAdd>

  return sysTime;
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	461a      	mov	r2, r3
 801d6e0:	f107 0310 	add.w	r3, r7, #16
 801d6e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d6e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d6ec:	6878      	ldr	r0, [r7, #4]
 801d6ee:	3720      	adds	r7, #32
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	bd80      	pop	{r7, pc}
 801d6f4:	0801f5fc 	.word	0x0801f5fc

0801d6f8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d6f8:	b580      	push	{r7, lr}
 801d6fa:	b084      	sub	sp, #16
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d700:	2300      	movs	r3, #0
 801d702:	60bb      	str	r3, [r7, #8]
 801d704:	2300      	movs	r3, #0
 801d706:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d708:	4b0a      	ldr	r3, [pc, #40]	; (801d734 <SysTimeGetMcuTime+0x3c>)
 801d70a:	691b      	ldr	r3, [r3, #16]
 801d70c:	f107 0208 	add.w	r2, r7, #8
 801d710:	3204      	adds	r2, #4
 801d712:	4610      	mov	r0, r2
 801d714:	4798      	blx	r3
 801d716:	4603      	mov	r3, r0
 801d718:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	461a      	mov	r2, r3
 801d71e:	f107 0308 	add.w	r3, r7, #8
 801d722:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d726:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d72a:	6878      	ldr	r0, [r7, #4]
 801d72c:	3710      	adds	r7, #16
 801d72e:	46bd      	mov	sp, r7
 801d730:	bd80      	pop	{r7, pc}
 801d732:	bf00      	nop
 801d734:	0801f5fc 	.word	0x0801f5fc

0801d738 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b088      	sub	sp, #32
 801d73c:	af02      	add	r7, sp, #8
 801d73e:	463b      	mov	r3, r7
 801d740:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d744:	4b0f      	ldr	r3, [pc, #60]	; (801d784 <SysTimeToMs+0x4c>)
 801d746:	68db      	ldr	r3, [r3, #12]
 801d748:	4798      	blx	r3
 801d74a:	4603      	mov	r3, r0
 801d74c:	b21b      	sxth	r3, r3
 801d74e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d750:	4b0c      	ldr	r3, [pc, #48]	; (801d784 <SysTimeToMs+0x4c>)
 801d752:	685b      	ldr	r3, [r3, #4]
 801d754:	4798      	blx	r3
 801d756:	4603      	mov	r3, r0
 801d758:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d75a:	f107 0008 	add.w	r0, r7, #8
 801d75e:	697b      	ldr	r3, [r7, #20]
 801d760:	9300      	str	r3, [sp, #0]
 801d762:	693b      	ldr	r3, [r7, #16]
 801d764:	463a      	mov	r2, r7
 801d766:	ca06      	ldmia	r2, {r1, r2}
 801d768:	f7ff ff27 	bl	801d5ba <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d76c:	68bb      	ldr	r3, [r7, #8]
 801d76e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d772:	fb02 f303 	mul.w	r3, r2, r3
 801d776:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d77a:	4413      	add	r3, r2
}
 801d77c:	4618      	mov	r0, r3
 801d77e:	3718      	adds	r7, #24
 801d780:	46bd      	mov	sp, r7
 801d782:	bd80      	pop	{r7, pc}
 801d784:	0801f5fc 	.word	0x0801f5fc

0801d788 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b08a      	sub	sp, #40	; 0x28
 801d78c:	af02      	add	r7, sp, #8
 801d78e:	6078      	str	r0, [r7, #4]
 801d790:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d792:	683b      	ldr	r3, [r7, #0]
 801d794:	4a19      	ldr	r2, [pc, #100]	; (801d7fc <SysTimeFromMs+0x74>)
 801d796:	fba2 2303 	umull	r2, r3, r2, r3
 801d79a:	099b      	lsrs	r3, r3, #6
 801d79c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d79e:	69fb      	ldr	r3, [r7, #28]
 801d7a0:	617b      	str	r3, [r7, #20]
 801d7a2:	683b      	ldr	r3, [r7, #0]
 801d7a4:	b29a      	uxth	r2, r3
 801d7a6:	69fb      	ldr	r3, [r7, #28]
 801d7a8:	b29b      	uxth	r3, r3
 801d7aa:	4619      	mov	r1, r3
 801d7ac:	0149      	lsls	r1, r1, #5
 801d7ae:	1ac9      	subs	r1, r1, r3
 801d7b0:	0089      	lsls	r1, r1, #2
 801d7b2:	440b      	add	r3, r1
 801d7b4:	00db      	lsls	r3, r3, #3
 801d7b6:	b29b      	uxth	r3, r3
 801d7b8:	1ad3      	subs	r3, r2, r3
 801d7ba:	b29b      	uxth	r3, r3
 801d7bc:	b21b      	sxth	r3, r3
 801d7be:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d7c0:	f107 030c 	add.w	r3, r7, #12
 801d7c4:	2200      	movs	r2, #0
 801d7c6:	601a      	str	r2, [r3, #0]
 801d7c8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d7ca:	4b0d      	ldr	r3, [pc, #52]	; (801d800 <SysTimeFromMs+0x78>)
 801d7cc:	68db      	ldr	r3, [r3, #12]
 801d7ce:	4798      	blx	r3
 801d7d0:	4603      	mov	r3, r0
 801d7d2:	b21b      	sxth	r3, r3
 801d7d4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d7d6:	4b0a      	ldr	r3, [pc, #40]	; (801d800 <SysTimeFromMs+0x78>)
 801d7d8:	685b      	ldr	r3, [r3, #4]
 801d7da:	4798      	blx	r3
 801d7dc:	4603      	mov	r3, r0
 801d7de:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d7e0:	6878      	ldr	r0, [r7, #4]
 801d7e2:	693b      	ldr	r3, [r7, #16]
 801d7e4:	9300      	str	r3, [sp, #0]
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	f107 0214 	add.w	r2, r7, #20
 801d7ec:	ca06      	ldmia	r2, {r1, r2}
 801d7ee:	f7ff feab 	bl	801d548 <SysTimeAdd>
}
 801d7f2:	6878      	ldr	r0, [r7, #4]
 801d7f4:	3720      	adds	r7, #32
 801d7f6:	46bd      	mov	sp, r7
 801d7f8:	bd80      	pop	{r7, pc}
 801d7fa:	bf00      	nop
 801d7fc:	10624dd3 	.word	0x10624dd3
 801d800:	0801f5fc 	.word	0x0801f5fc

0801d804 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d804:	b480      	push	{r7}
 801d806:	b085      	sub	sp, #20
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d80c:	2300      	movs	r3, #0
 801d80e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d810:	e00e      	b.n	801d830 <ee_skip_atoi+0x2c>
 801d812:	68fa      	ldr	r2, [r7, #12]
 801d814:	4613      	mov	r3, r2
 801d816:	009b      	lsls	r3, r3, #2
 801d818:	4413      	add	r3, r2
 801d81a:	005b      	lsls	r3, r3, #1
 801d81c:	4618      	mov	r0, r3
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	1c59      	adds	r1, r3, #1
 801d824:	687a      	ldr	r2, [r7, #4]
 801d826:	6011      	str	r1, [r2, #0]
 801d828:	781b      	ldrb	r3, [r3, #0]
 801d82a:	4403      	add	r3, r0
 801d82c:	3b30      	subs	r3, #48	; 0x30
 801d82e:	60fb      	str	r3, [r7, #12]
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	781b      	ldrb	r3, [r3, #0]
 801d836:	2b2f      	cmp	r3, #47	; 0x2f
 801d838:	d904      	bls.n	801d844 <ee_skip_atoi+0x40>
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	2b39      	cmp	r3, #57	; 0x39
 801d842:	d9e6      	bls.n	801d812 <ee_skip_atoi+0xe>
  return i;
 801d844:	68fb      	ldr	r3, [r7, #12]
}
 801d846:	4618      	mov	r0, r3
 801d848:	3714      	adds	r7, #20
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bc80      	pop	{r7}
 801d84e:	4770      	bx	lr

0801d850 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d850:	b480      	push	{r7}
 801d852:	b099      	sub	sp, #100	; 0x64
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	607a      	str	r2, [r7, #4]
 801d85c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d85e:	4b71      	ldr	r3, [pc, #452]	; (801da24 <ee_number+0x1d4>)
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d002      	beq.n	801d874 <ee_number+0x24>
 801d86e:	4b6e      	ldr	r3, [pc, #440]	; (801da28 <ee_number+0x1d8>)
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d874:	683b      	ldr	r3, [r7, #0]
 801d876:	2b01      	cmp	r3, #1
 801d878:	dd02      	ble.n	801d880 <ee_number+0x30>
 801d87a:	683b      	ldr	r3, [r7, #0]
 801d87c:	2b24      	cmp	r3, #36	; 0x24
 801d87e:	dd01      	ble.n	801d884 <ee_number+0x34>
 801d880:	2300      	movs	r3, #0
 801d882:	e0ca      	b.n	801da1a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d886:	f003 0301 	and.w	r3, r3, #1
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d001      	beq.n	801d892 <ee_number+0x42>
 801d88e:	2330      	movs	r3, #48	; 0x30
 801d890:	e000      	b.n	801d894 <ee_number+0x44>
 801d892:	2320      	movs	r3, #32
 801d894:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d898:	2300      	movs	r3, #0
 801d89a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d89e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8a0:	f003 0302 	and.w	r3, r3, #2
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d00b      	beq.n	801d8c0 <ee_number+0x70>
  {
    if (num < 0)
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	da08      	bge.n	801d8c0 <ee_number+0x70>
    {
      sign = '-';
 801d8ae:	232d      	movs	r3, #45	; 0x2d
 801d8b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	425b      	negs	r3, r3
 801d8b8:	607b      	str	r3, [r7, #4]
      size--;
 801d8ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8bc:	3b01      	subs	r3, #1
 801d8be:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d11e      	bne.n	801d908 <ee_number+0xb8>
    tmp[i++] = '0';
 801d8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8cc:	1c5a      	adds	r2, r3, #1
 801d8ce:	657a      	str	r2, [r7, #84]	; 0x54
 801d8d0:	3360      	adds	r3, #96	; 0x60
 801d8d2:	443b      	add	r3, r7
 801d8d4:	2230      	movs	r2, #48	; 0x30
 801d8d6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d8da:	e018      	b.n	801d90e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	683a      	ldr	r2, [r7, #0]
 801d8e0:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8e4:	fb01 f202 	mul.w	r2, r1, r2
 801d8e8:	1a9b      	subs	r3, r3, r2
 801d8ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d8ec:	441a      	add	r2, r3
 801d8ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8f0:	1c59      	adds	r1, r3, #1
 801d8f2:	6579      	str	r1, [r7, #84]	; 0x54
 801d8f4:	7812      	ldrb	r2, [r2, #0]
 801d8f6:	3360      	adds	r3, #96	; 0x60
 801d8f8:	443b      	add	r3, r7
 801d8fa:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d8fe:	687a      	ldr	r2, [r7, #4]
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	fbb2 f3f3 	udiv	r3, r2, r3
 801d906:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d1e6      	bne.n	801d8dc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d90e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d912:	429a      	cmp	r2, r3
 801d914:	dd01      	ble.n	801d91a <ee_number+0xca>
 801d916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d918:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d91a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d91e:	1ad3      	subs	r3, r2, r3
 801d920:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d924:	f003 0301 	and.w	r3, r3, #1
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d112      	bne.n	801d952 <ee_number+0x102>
 801d92c:	e00c      	b.n	801d948 <ee_number+0xf8>
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	1c5a      	adds	r2, r3, #1
 801d932:	60fa      	str	r2, [r7, #12]
 801d934:	2220      	movs	r2, #32
 801d936:	701a      	strb	r2, [r3, #0]
 801d938:	68bb      	ldr	r3, [r7, #8]
 801d93a:	3b01      	subs	r3, #1
 801d93c:	60bb      	str	r3, [r7, #8]
 801d93e:	68bb      	ldr	r3, [r7, #8]
 801d940:	2b00      	cmp	r3, #0
 801d942:	d101      	bne.n	801d948 <ee_number+0xf8>
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	e068      	b.n	801da1a <ee_number+0x1ca>
 801d948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d94a:	1e5a      	subs	r2, r3, #1
 801d94c:	66ba      	str	r2, [r7, #104]	; 0x68
 801d94e:	2b00      	cmp	r3, #0
 801d950:	dced      	bgt.n	801d92e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d956:	2b00      	cmp	r3, #0
 801d958:	d01b      	beq.n	801d992 <ee_number+0x142>
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	1c5a      	adds	r2, r3, #1
 801d95e:	60fa      	str	r2, [r7, #12]
 801d960:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d964:	701a      	strb	r2, [r3, #0]
 801d966:	68bb      	ldr	r3, [r7, #8]
 801d968:	3b01      	subs	r3, #1
 801d96a:	60bb      	str	r3, [r7, #8]
 801d96c:	68bb      	ldr	r3, [r7, #8]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d10f      	bne.n	801d992 <ee_number+0x142>
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	e051      	b.n	801da1a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	1c5a      	adds	r2, r3, #1
 801d97a:	60fa      	str	r2, [r7, #12]
 801d97c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d980:	701a      	strb	r2, [r3, #0]
 801d982:	68bb      	ldr	r3, [r7, #8]
 801d984:	3b01      	subs	r3, #1
 801d986:	60bb      	str	r3, [r7, #8]
 801d988:	68bb      	ldr	r3, [r7, #8]
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d101      	bne.n	801d992 <ee_number+0x142>
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	e043      	b.n	801da1a <ee_number+0x1ca>
 801d992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d994:	1e5a      	subs	r2, r3, #1
 801d996:	66ba      	str	r2, [r7, #104]	; 0x68
 801d998:	2b00      	cmp	r3, #0
 801d99a:	dcec      	bgt.n	801d976 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d99c:	e00c      	b.n	801d9b8 <ee_number+0x168>
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	1c5a      	adds	r2, r3, #1
 801d9a2:	60fa      	str	r2, [r7, #12]
 801d9a4:	2230      	movs	r2, #48	; 0x30
 801d9a6:	701a      	strb	r2, [r3, #0]
 801d9a8:	68bb      	ldr	r3, [r7, #8]
 801d9aa:	3b01      	subs	r3, #1
 801d9ac:	60bb      	str	r3, [r7, #8]
 801d9ae:	68bb      	ldr	r3, [r7, #8]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d101      	bne.n	801d9b8 <ee_number+0x168>
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	e030      	b.n	801da1a <ee_number+0x1ca>
 801d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9ba:	1e5a      	subs	r2, r3, #1
 801d9bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d9be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9c0:	429a      	cmp	r2, r3
 801d9c2:	dbec      	blt.n	801d99e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d9c4:	e010      	b.n	801d9e8 <ee_number+0x198>
 801d9c6:	68fb      	ldr	r3, [r7, #12]
 801d9c8:	1c5a      	adds	r2, r3, #1
 801d9ca:	60fa      	str	r2, [r7, #12]
 801d9cc:	f107 0110 	add.w	r1, r7, #16
 801d9d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9d2:	440a      	add	r2, r1
 801d9d4:	7812      	ldrb	r2, [r2, #0]
 801d9d6:	701a      	strb	r2, [r3, #0]
 801d9d8:	68bb      	ldr	r3, [r7, #8]
 801d9da:	3b01      	subs	r3, #1
 801d9dc:	60bb      	str	r3, [r7, #8]
 801d9de:	68bb      	ldr	r3, [r7, #8]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d101      	bne.n	801d9e8 <ee_number+0x198>
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	e018      	b.n	801da1a <ee_number+0x1ca>
 801d9e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9ea:	1e5a      	subs	r2, r3, #1
 801d9ec:	657a      	str	r2, [r7, #84]	; 0x54
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	dce9      	bgt.n	801d9c6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d9f2:	e00c      	b.n	801da0e <ee_number+0x1be>
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	1c5a      	adds	r2, r3, #1
 801d9f8:	60fa      	str	r2, [r7, #12]
 801d9fa:	2220      	movs	r2, #32
 801d9fc:	701a      	strb	r2, [r3, #0]
 801d9fe:	68bb      	ldr	r3, [r7, #8]
 801da00:	3b01      	subs	r3, #1
 801da02:	60bb      	str	r3, [r7, #8]
 801da04:	68bb      	ldr	r3, [r7, #8]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d101      	bne.n	801da0e <ee_number+0x1be>
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	e005      	b.n	801da1a <ee_number+0x1ca>
 801da0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da10:	1e5a      	subs	r2, r3, #1
 801da12:	66ba      	str	r2, [r7, #104]	; 0x68
 801da14:	2b00      	cmp	r3, #0
 801da16:	dced      	bgt.n	801d9f4 <ee_number+0x1a4>

  return str;
 801da18:	68fb      	ldr	r3, [r7, #12]
}
 801da1a:	4618      	mov	r0, r3
 801da1c:	3764      	adds	r7, #100	; 0x64
 801da1e:	46bd      	mov	sp, r7
 801da20:	bc80      	pop	{r7}
 801da22:	4770      	bx	lr
 801da24:	20000158 	.word	0x20000158
 801da28:	2000015c 	.word	0x2000015c

0801da2c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b092      	sub	sp, #72	; 0x48
 801da30:	af04      	add	r7, sp, #16
 801da32:	60f8      	str	r0, [r7, #12]
 801da34:	60b9      	str	r1, [r7, #8]
 801da36:	607a      	str	r2, [r7, #4]
 801da38:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801da3a:	68bb      	ldr	r3, [r7, #8]
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	dc01      	bgt.n	801da44 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801da40:	2300      	movs	r3, #0
 801da42:	e13e      	b.n	801dcc2 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da48:	e128      	b.n	801dc9c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801da4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	1ad2      	subs	r2, r2, r3
 801da50:	68bb      	ldr	r3, [r7, #8]
 801da52:	3b01      	subs	r3, #1
 801da54:	429a      	cmp	r2, r3
 801da56:	f280 812e 	bge.w	801dcb6 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	781b      	ldrb	r3, [r3, #0]
 801da5e:	2b25      	cmp	r3, #37	; 0x25
 801da60:	d006      	beq.n	801da70 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801da62:	687a      	ldr	r2, [r7, #4]
 801da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da66:	1c59      	adds	r1, r3, #1
 801da68:	62f9      	str	r1, [r7, #44]	; 0x2c
 801da6a:	7812      	ldrb	r2, [r2, #0]
 801da6c:	701a      	strb	r2, [r3, #0]
      continue;
 801da6e:	e112      	b.n	801dc96 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801da70:	2300      	movs	r3, #0
 801da72:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	3301      	adds	r3, #1
 801da78:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	781b      	ldrb	r3, [r3, #0]
 801da7e:	2b30      	cmp	r3, #48	; 0x30
 801da80:	d103      	bne.n	801da8a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801da82:	6a3b      	ldr	r3, [r7, #32]
 801da84:	f043 0301 	orr.w	r3, r3, #1
 801da88:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801da8a:	f04f 33ff 	mov.w	r3, #4294967295
 801da8e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	781b      	ldrb	r3, [r3, #0]
 801da94:	2b2f      	cmp	r3, #47	; 0x2f
 801da96:	d908      	bls.n	801daaa <tiny_vsnprintf_like+0x7e>
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	781b      	ldrb	r3, [r3, #0]
 801da9c:	2b39      	cmp	r3, #57	; 0x39
 801da9e:	d804      	bhi.n	801daaa <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801daa0:	1d3b      	adds	r3, r7, #4
 801daa2:	4618      	mov	r0, r3
 801daa4:	f7ff feae 	bl	801d804 <ee_skip_atoi>
 801daa8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801daaa:	f04f 33ff 	mov.w	r3, #4294967295
 801daae:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801dab0:	f04f 33ff 	mov.w	r3, #4294967295
 801dab4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801dab6:	230a      	movs	r3, #10
 801dab8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	781b      	ldrb	r3, [r3, #0]
 801dabe:	3b58      	subs	r3, #88	; 0x58
 801dac0:	2b20      	cmp	r3, #32
 801dac2:	f200 8094 	bhi.w	801dbee <tiny_vsnprintf_like+0x1c2>
 801dac6:	a201      	add	r2, pc, #4	; (adr r2, 801dacc <tiny_vsnprintf_like+0xa0>)
 801dac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dacc:	0801dbd7 	.word	0x0801dbd7
 801dad0:	0801dbef 	.word	0x0801dbef
 801dad4:	0801dbef 	.word	0x0801dbef
 801dad8:	0801dbef 	.word	0x0801dbef
 801dadc:	0801dbef 	.word	0x0801dbef
 801dae0:	0801dbef 	.word	0x0801dbef
 801dae4:	0801dbef 	.word	0x0801dbef
 801dae8:	0801dbef 	.word	0x0801dbef
 801daec:	0801dbef 	.word	0x0801dbef
 801daf0:	0801dbef 	.word	0x0801dbef
 801daf4:	0801dbef 	.word	0x0801dbef
 801daf8:	0801db5b 	.word	0x0801db5b
 801dafc:	0801dbe5 	.word	0x0801dbe5
 801db00:	0801dbef 	.word	0x0801dbef
 801db04:	0801dbef 	.word	0x0801dbef
 801db08:	0801dbef 	.word	0x0801dbef
 801db0c:	0801dbef 	.word	0x0801dbef
 801db10:	0801dbe5 	.word	0x0801dbe5
 801db14:	0801dbef 	.word	0x0801dbef
 801db18:	0801dbef 	.word	0x0801dbef
 801db1c:	0801dbef 	.word	0x0801dbef
 801db20:	0801dbef 	.word	0x0801dbef
 801db24:	0801dbef 	.word	0x0801dbef
 801db28:	0801dbef 	.word	0x0801dbef
 801db2c:	0801dbef 	.word	0x0801dbef
 801db30:	0801dbef 	.word	0x0801dbef
 801db34:	0801dbef 	.word	0x0801dbef
 801db38:	0801db7b 	.word	0x0801db7b
 801db3c:	0801dbef 	.word	0x0801dbef
 801db40:	0801dc3b 	.word	0x0801dc3b
 801db44:	0801dbef 	.word	0x0801dbef
 801db48:	0801dbef 	.word	0x0801dbef
 801db4c:	0801dbdf 	.word	0x0801dbdf
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db52:	1c5a      	adds	r2, r3, #1
 801db54:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db56:	2220      	movs	r2, #32
 801db58:	701a      	strb	r2, [r3, #0]
 801db5a:	69fb      	ldr	r3, [r7, #28]
 801db5c:	3b01      	subs	r3, #1
 801db5e:	61fb      	str	r3, [r7, #28]
 801db60:	69fb      	ldr	r3, [r7, #28]
 801db62:	2b00      	cmp	r3, #0
 801db64:	dcf4      	bgt.n	801db50 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	1d1a      	adds	r2, r3, #4
 801db6a:	603a      	str	r2, [r7, #0]
 801db6c:	6819      	ldr	r1, [r3, #0]
 801db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db70:	1c5a      	adds	r2, r3, #1
 801db72:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db74:	b2ca      	uxtb	r2, r1
 801db76:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801db78:	e08d      	b.n	801dc96 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801db7a:	683b      	ldr	r3, [r7, #0]
 801db7c:	1d1a      	adds	r2, r3, #4
 801db7e:	603a      	str	r2, [r7, #0]
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db86:	2b00      	cmp	r3, #0
 801db88:	d101      	bne.n	801db8e <tiny_vsnprintf_like+0x162>
 801db8a:	4b50      	ldr	r3, [pc, #320]	; (801dccc <tiny_vsnprintf_like+0x2a0>)
 801db8c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801db8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db90:	f7e2 faf2 	bl	8000178 <strlen>
 801db94:	4603      	mov	r3, r0
 801db96:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801db98:	e004      	b.n	801dba4 <tiny_vsnprintf_like+0x178>
 801db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db9c:	1c5a      	adds	r2, r3, #1
 801db9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dba0:	2220      	movs	r2, #32
 801dba2:	701a      	strb	r2, [r3, #0]
 801dba4:	69fb      	ldr	r3, [r7, #28]
 801dba6:	1e5a      	subs	r2, r3, #1
 801dba8:	61fa      	str	r2, [r7, #28]
 801dbaa:	693a      	ldr	r2, [r7, #16]
 801dbac:	429a      	cmp	r2, r3
 801dbae:	dbf4      	blt.n	801db9a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbb4:	e00a      	b.n	801dbcc <tiny_vsnprintf_like+0x1a0>
 801dbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbb8:	1c53      	adds	r3, r2, #1
 801dbba:	627b      	str	r3, [r7, #36]	; 0x24
 801dbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbbe:	1c59      	adds	r1, r3, #1
 801dbc0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dbc2:	7812      	ldrb	r2, [r2, #0]
 801dbc4:	701a      	strb	r2, [r3, #0]
 801dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbc8:	3301      	adds	r3, #1
 801dbca:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbce:	693b      	ldr	r3, [r7, #16]
 801dbd0:	429a      	cmp	r2, r3
 801dbd2:	dbf0      	blt.n	801dbb6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801dbd4:	e05f      	b.n	801dc96 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801dbd6:	6a3b      	ldr	r3, [r7, #32]
 801dbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbdc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801dbde:	2310      	movs	r3, #16
 801dbe0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801dbe2:	e02b      	b.n	801dc3c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801dbe4:	6a3b      	ldr	r3, [r7, #32]
 801dbe6:	f043 0302 	orr.w	r3, r3, #2
 801dbea:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801dbec:	e025      	b.n	801dc3a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	781b      	ldrb	r3, [r3, #0]
 801dbf2:	2b25      	cmp	r3, #37	; 0x25
 801dbf4:	d004      	beq.n	801dc00 <tiny_vsnprintf_like+0x1d4>
 801dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbf8:	1c5a      	adds	r2, r3, #1
 801dbfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dbfc:	2225      	movs	r2, #37	; 0x25
 801dbfe:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801dc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	1ad2      	subs	r2, r2, r3
 801dc06:	68bb      	ldr	r3, [r7, #8]
 801dc08:	3b01      	subs	r3, #1
 801dc0a:	429a      	cmp	r2, r3
 801dc0c:	da16      	bge.n	801dc3c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	781b      	ldrb	r3, [r3, #0]
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d006      	beq.n	801dc24 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dc16:	687a      	ldr	r2, [r7, #4]
 801dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc1a:	1c59      	adds	r1, r3, #1
 801dc1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dc1e:	7812      	ldrb	r2, [r2, #0]
 801dc20:	701a      	strb	r2, [r3, #0]
 801dc22:	e002      	b.n	801dc2a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	3b01      	subs	r3, #1
 801dc28:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801dc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	1ad2      	subs	r2, r2, r3
 801dc30:	68bb      	ldr	r3, [r7, #8]
 801dc32:	3b01      	subs	r3, #1
 801dc34:	429a      	cmp	r2, r3
 801dc36:	db2d      	blt.n	801dc94 <tiny_vsnprintf_like+0x268>
 801dc38:	e000      	b.n	801dc3c <tiny_vsnprintf_like+0x210>
        break;
 801dc3a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dc3c:	697b      	ldr	r3, [r7, #20]
 801dc3e:	2b6c      	cmp	r3, #108	; 0x6c
 801dc40:	d105      	bne.n	801dc4e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dc42:	683b      	ldr	r3, [r7, #0]
 801dc44:	1d1a      	adds	r2, r3, #4
 801dc46:	603a      	str	r2, [r7, #0]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	637b      	str	r3, [r7, #52]	; 0x34
 801dc4c:	e00f      	b.n	801dc6e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801dc4e:	6a3b      	ldr	r3, [r7, #32]
 801dc50:	f003 0302 	and.w	r3, r3, #2
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d005      	beq.n	801dc64 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	1d1a      	adds	r2, r3, #4
 801dc5c:	603a      	str	r2, [r7, #0]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	637b      	str	r3, [r7, #52]	; 0x34
 801dc62:	e004      	b.n	801dc6e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801dc64:	683b      	ldr	r3, [r7, #0]
 801dc66:	1d1a      	adds	r2, r3, #4
 801dc68:	603a      	str	r2, [r7, #0]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	1e5a      	subs	r2, r3, #1
 801dc72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	1acb      	subs	r3, r1, r3
 801dc78:	1ad1      	subs	r1, r2, r3
 801dc7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc7c:	6a3b      	ldr	r3, [r7, #32]
 801dc7e:	9302      	str	r3, [sp, #8]
 801dc80:	69bb      	ldr	r3, [r7, #24]
 801dc82:	9301      	str	r3, [sp, #4]
 801dc84:	69fb      	ldr	r3, [r7, #28]
 801dc86:	9300      	str	r3, [sp, #0]
 801dc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dc8c:	f7ff fde0 	bl	801d850 <ee_number>
 801dc90:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dc92:	e000      	b.n	801dc96 <tiny_vsnprintf_like+0x26a>
        continue;
 801dc94:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	3301      	adds	r3, #1
 801dc9a:	607b      	str	r3, [r7, #4]
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	781b      	ldrb	r3, [r3, #0]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	f47f aed2 	bne.w	801da4a <tiny_vsnprintf_like+0x1e>
 801dca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	1ad2      	subs	r2, r2, r3
 801dcac:	68bb      	ldr	r3, [r7, #8]
 801dcae:	3b01      	subs	r3, #1
 801dcb0:	429a      	cmp	r2, r3
 801dcb2:	f6bf aeca 	bge.w	801da4a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcb8:	2200      	movs	r2, #0
 801dcba:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dcbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	1ad3      	subs	r3, r2, r3
}
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	3738      	adds	r7, #56	; 0x38
 801dcc6:	46bd      	mov	sp, r7
 801dcc8:	bd80      	pop	{r7, pc}
 801dcca:	bf00      	nop
 801dccc:	0801f510 	.word	0x0801f510

0801dcd0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b090      	sub	sp, #64	; 0x40
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dcd8:	4b73      	ldr	r3, [pc, #460]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dcde:	4b72      	ldr	r3, [pc, #456]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801dce0:	681a      	ldr	r2, [r3, #0]
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	4013      	ands	r3, r2
 801dce6:	4a70      	ldr	r2, [pc, #448]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801dce8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dcea:	4b70      	ldr	r3, [pc, #448]	; (801deac <UTIL_SEQ_Run+0x1dc>)
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dcf0:	4b6f      	ldr	r3, [pc, #444]	; (801deb0 <UTIL_SEQ_Run+0x1e0>)
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dcf6:	4b6f      	ldr	r3, [pc, #444]	; (801deb4 <UTIL_SEQ_Run+0x1e4>)
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dcfc:	4b6e      	ldr	r3, [pc, #440]	; (801deb8 <UTIL_SEQ_Run+0x1e8>)
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dd02:	e08d      	b.n	801de20 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dd04:	2300      	movs	r3, #0
 801dd06:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd08:	e002      	b.n	801dd10 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd0c:	3301      	adds	r3, #1
 801dd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd10:	4a6a      	ldr	r2, [pc, #424]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd1a:	401a      	ands	r2, r3
 801dd1c:	4b62      	ldr	r3, [pc, #392]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	4013      	ands	r3, r2
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d0f1      	beq.n	801dd0a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dd26:	4a65      	ldr	r2, [pc, #404]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd2a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd30:	401a      	ands	r2, r3
 801dd32:	4b5d      	ldr	r3, [pc, #372]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	4013      	ands	r3, r2
 801dd38:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dd3a:	4a60      	ldr	r2, [pc, #384]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd3e:	00db      	lsls	r3, r3, #3
 801dd40:	4413      	add	r3, r2
 801dd42:	685a      	ldr	r2, [r3, #4]
 801dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd46:	4013      	ands	r3, r2
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d106      	bne.n	801dd5a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dd4c:	4a5b      	ldr	r2, [pc, #364]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd50:	00db      	lsls	r3, r3, #3
 801dd52:	4413      	add	r3, r2
 801dd54:	f04f 32ff 	mov.w	r2, #4294967295
 801dd58:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dd5a:	4a58      	ldr	r2, [pc, #352]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd5e:	00db      	lsls	r3, r3, #3
 801dd60:	4413      	add	r3, r2
 801dd62:	685a      	ldr	r2, [r3, #4]
 801dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd66:	4013      	ands	r3, r2
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f000 f907 	bl	801df7c <SEQ_BitPosition>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	461a      	mov	r2, r3
 801dd72:	4b53      	ldr	r3, [pc, #332]	; (801dec0 <UTIL_SEQ_Run+0x1f0>)
 801dd74:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dd76:	4a51      	ldr	r2, [pc, #324]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd7a:	00db      	lsls	r3, r3, #3
 801dd7c:	4413      	add	r3, r2
 801dd7e:	685a      	ldr	r2, [r3, #4]
 801dd80:	4b4f      	ldr	r3, [pc, #316]	; (801dec0 <UTIL_SEQ_Run+0x1f0>)
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	2101      	movs	r1, #1
 801dd86:	fa01 f303 	lsl.w	r3, r1, r3
 801dd8a:	43db      	mvns	r3, r3
 801dd8c:	401a      	ands	r2, r3
 801dd8e:	494b      	ldr	r1, [pc, #300]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd92:	00db      	lsls	r3, r3, #3
 801dd94:	440b      	add	r3, r1
 801dd96:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd98:	f3ef 8310 	mrs	r3, PRIMASK
 801dd9c:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd9e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801dda0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801dda2:	b672      	cpsid	i
}
 801dda4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801dda6:	4b46      	ldr	r3, [pc, #280]	; (801dec0 <UTIL_SEQ_Run+0x1f0>)
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	2201      	movs	r2, #1
 801ddac:	fa02 f303 	lsl.w	r3, r2, r3
 801ddb0:	43da      	mvns	r2, r3
 801ddb2:	4b3e      	ldr	r3, [pc, #248]	; (801deac <UTIL_SEQ_Run+0x1dc>)
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	4013      	ands	r3, r2
 801ddb8:	4a3c      	ldr	r2, [pc, #240]	; (801deac <UTIL_SEQ_Run+0x1dc>)
 801ddba:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ddbc:	2301      	movs	r3, #1
 801ddbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddc0:	e013      	b.n	801ddea <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ddc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddc4:	3b01      	subs	r3, #1
 801ddc6:	4a3d      	ldr	r2, [pc, #244]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801ddc8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ddcc:	4b3c      	ldr	r3, [pc, #240]	; (801dec0 <UTIL_SEQ_Run+0x1f0>)
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	2201      	movs	r2, #1
 801ddd2:	fa02 f303 	lsl.w	r3, r2, r3
 801ddd6:	43da      	mvns	r2, r3
 801ddd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddda:	3b01      	subs	r3, #1
 801dddc:	400a      	ands	r2, r1
 801ddde:	4937      	ldr	r1, [pc, #220]	; (801debc <UTIL_SEQ_Run+0x1ec>)
 801dde0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801dde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dde6:	3b01      	subs	r3, #1
 801dde8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d1e8      	bne.n	801ddc2 <UTIL_SEQ_Run+0xf2>
 801ddf0:	6a3b      	ldr	r3, [r7, #32]
 801ddf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddf4:	697b      	ldr	r3, [r7, #20]
 801ddf6:	f383 8810 	msr	PRIMASK, r3
}
 801ddfa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ddfc:	4b30      	ldr	r3, [pc, #192]	; (801dec0 <UTIL_SEQ_Run+0x1f0>)
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	4a30      	ldr	r2, [pc, #192]	; (801dec4 <UTIL_SEQ_Run+0x1f4>)
 801de02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de06:	4798      	blx	r3

    local_taskset = TaskSet;
 801de08:	4b28      	ldr	r3, [pc, #160]	; (801deac <UTIL_SEQ_Run+0x1dc>)
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801de0e:	4b28      	ldr	r3, [pc, #160]	; (801deb0 <UTIL_SEQ_Run+0x1e0>)
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801de14:	4b27      	ldr	r3, [pc, #156]	; (801deb4 <UTIL_SEQ_Run+0x1e4>)
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801de1a:	4b27      	ldr	r3, [pc, #156]	; (801deb8 <UTIL_SEQ_Run+0x1e8>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801de20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de24:	401a      	ands	r2, r3
 801de26:	4b20      	ldr	r3, [pc, #128]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	4013      	ands	r3, r2
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d005      	beq.n	801de3c <UTIL_SEQ_Run+0x16c>
 801de30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de34:	4013      	ands	r3, r2
 801de36:	2b00      	cmp	r3, #0
 801de38:	f43f af64 	beq.w	801dd04 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801de3c:	4b20      	ldr	r3, [pc, #128]	; (801dec0 <UTIL_SEQ_Run+0x1f0>)
 801de3e:	f04f 32ff 	mov.w	r2, #4294967295
 801de42:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801de44:	f000 f88e 	bl	801df64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de48:	f3ef 8310 	mrs	r3, PRIMASK
 801de4c:	613b      	str	r3, [r7, #16]
  return(result);
 801de4e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801de50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de52:	b672      	cpsid	i
}
 801de54:	bf00      	nop
  local_taskset = TaskSet;
 801de56:	4b15      	ldr	r3, [pc, #84]	; (801deac <UTIL_SEQ_Run+0x1dc>)
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801de5c:	4b14      	ldr	r3, [pc, #80]	; (801deb0 <UTIL_SEQ_Run+0x1e0>)
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801de62:	4b14      	ldr	r3, [pc, #80]	; (801deb4 <UTIL_SEQ_Run+0x1e4>)
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801de68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de6c:	401a      	ands	r2, r3
 801de6e:	4b0e      	ldr	r3, [pc, #56]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	4013      	ands	r3, r2
 801de74:	2b00      	cmp	r3, #0
 801de76:	d107      	bne.n	801de88 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801de78:	4b0f      	ldr	r3, [pc, #60]	; (801deb8 <UTIL_SEQ_Run+0x1e8>)
 801de7a:	681a      	ldr	r2, [r3, #0]
 801de7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de7e:	4013      	ands	r3, r2
 801de80:	2b00      	cmp	r3, #0
 801de82:	d101      	bne.n	801de88 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801de84:	f7e4 fda6 	bl	80029d4 <UTIL_SEQ_Idle>
 801de88:	69fb      	ldr	r3, [r7, #28]
 801de8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	f383 8810 	msr	PRIMASK, r3
}
 801de92:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801de94:	f000 f86c 	bl	801df70 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801de98:	4a03      	ldr	r2, [pc, #12]	; (801dea8 <UTIL_SEQ_Run+0x1d8>)
 801de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de9c:	6013      	str	r3, [r2, #0]

  return;
 801de9e:	bf00      	nop
}
 801dea0:	3740      	adds	r7, #64	; 0x40
 801dea2:	46bd      	mov	sp, r7
 801dea4:	bd80      	pop	{r7, pc}
 801dea6:	bf00      	nop
 801dea8:	20000164 	.word	0x20000164
 801deac:	200018d4 	.word	0x200018d4
 801deb0:	200018d8 	.word	0x200018d8
 801deb4:	20000160 	.word	0x20000160
 801deb8:	200018dc 	.word	0x200018dc
 801debc:	200018f4 	.word	0x200018f4
 801dec0:	200018e0 	.word	0x200018e0
 801dec4:	200018e4 	.word	0x200018e4

0801dec8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801dec8:	b580      	push	{r7, lr}
 801deca:	b088      	sub	sp, #32
 801decc:	af00      	add	r7, sp, #0
 801dece:	60f8      	str	r0, [r7, #12]
 801ded0:	60b9      	str	r1, [r7, #8]
 801ded2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ded4:	f3ef 8310 	mrs	r3, PRIMASK
 801ded8:	617b      	str	r3, [r7, #20]
  return(result);
 801deda:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801dedc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801dede:	b672      	cpsid	i
}
 801dee0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801dee2:	68f8      	ldr	r0, [r7, #12]
 801dee4:	f000 f84a 	bl	801df7c <SEQ_BitPosition>
 801dee8:	4603      	mov	r3, r0
 801deea:	4619      	mov	r1, r3
 801deec:	4a06      	ldr	r2, [pc, #24]	; (801df08 <UTIL_SEQ_RegTask+0x40>)
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801def4:	69fb      	ldr	r3, [r7, #28]
 801def6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801def8:	69bb      	ldr	r3, [r7, #24]
 801defa:	f383 8810 	msr	PRIMASK, r3
}
 801defe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801df00:	bf00      	nop
}
 801df02:	3720      	adds	r7, #32
 801df04:	46bd      	mov	sp, r7
 801df06:	bd80      	pop	{r7, pc}
 801df08:	200018e4 	.word	0x200018e4

0801df0c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801df0c:	b480      	push	{r7}
 801df0e:	b087      	sub	sp, #28
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
 801df14:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df16:	f3ef 8310 	mrs	r3, PRIMASK
 801df1a:	60fb      	str	r3, [r7, #12]
  return(result);
 801df1c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801df1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801df20:	b672      	cpsid	i
}
 801df22:	bf00      	nop

  TaskSet |= TaskId_bm;
 801df24:	4b0d      	ldr	r3, [pc, #52]	; (801df5c <UTIL_SEQ_SetTask+0x50>)
 801df26:	681a      	ldr	r2, [r3, #0]
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	4313      	orrs	r3, r2
 801df2c:	4a0b      	ldr	r2, [pc, #44]	; (801df5c <UTIL_SEQ_SetTask+0x50>)
 801df2e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801df30:	4a0b      	ldr	r2, [pc, #44]	; (801df60 <UTIL_SEQ_SetTask+0x54>)
 801df32:	683b      	ldr	r3, [r7, #0]
 801df34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	431a      	orrs	r2, r3
 801df3c:	4908      	ldr	r1, [pc, #32]	; (801df60 <UTIL_SEQ_SetTask+0x54>)
 801df3e:	683b      	ldr	r3, [r7, #0]
 801df40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801df44:	697b      	ldr	r3, [r7, #20]
 801df46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df48:	693b      	ldr	r3, [r7, #16]
 801df4a:	f383 8810 	msr	PRIMASK, r3
}
 801df4e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801df50:	bf00      	nop
}
 801df52:	371c      	adds	r7, #28
 801df54:	46bd      	mov	sp, r7
 801df56:	bc80      	pop	{r7}
 801df58:	4770      	bx	lr
 801df5a:	bf00      	nop
 801df5c:	200018d4 	.word	0x200018d4
 801df60:	200018f4 	.word	0x200018f4

0801df64 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801df64:	b480      	push	{r7}
 801df66:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df68:	bf00      	nop
}
 801df6a:	46bd      	mov	sp, r7
 801df6c:	bc80      	pop	{r7}
 801df6e:	4770      	bx	lr

0801df70 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801df70:	b480      	push	{r7}
 801df72:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df74:	bf00      	nop
}
 801df76:	46bd      	mov	sp, r7
 801df78:	bc80      	pop	{r7}
 801df7a:	4770      	bx	lr

0801df7c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801df7c:	b480      	push	{r7}
 801df7e:	b085      	sub	sp, #20
 801df80:	af00      	add	r7, sp, #0
 801df82:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801df84:	2300      	movs	r3, #0
 801df86:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801df8c:	68bb      	ldr	r3, [r7, #8]
 801df8e:	0c1b      	lsrs	r3, r3, #16
 801df90:	041b      	lsls	r3, r3, #16
 801df92:	2b00      	cmp	r3, #0
 801df94:	d104      	bne.n	801dfa0 <SEQ_BitPosition+0x24>
 801df96:	2310      	movs	r3, #16
 801df98:	73fb      	strb	r3, [r7, #15]
 801df9a:	68bb      	ldr	r3, [r7, #8]
 801df9c:	041b      	lsls	r3, r3, #16
 801df9e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801dfa0:	68bb      	ldr	r3, [r7, #8]
 801dfa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d105      	bne.n	801dfb6 <SEQ_BitPosition+0x3a>
 801dfaa:	7bfb      	ldrb	r3, [r7, #15]
 801dfac:	3308      	adds	r3, #8
 801dfae:	73fb      	strb	r3, [r7, #15]
 801dfb0:	68bb      	ldr	r3, [r7, #8]
 801dfb2:	021b      	lsls	r3, r3, #8
 801dfb4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801dfb6:	68bb      	ldr	r3, [r7, #8]
 801dfb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d105      	bne.n	801dfcc <SEQ_BitPosition+0x50>
 801dfc0:	7bfb      	ldrb	r3, [r7, #15]
 801dfc2:	3304      	adds	r3, #4
 801dfc4:	73fb      	strb	r3, [r7, #15]
 801dfc6:	68bb      	ldr	r3, [r7, #8]
 801dfc8:	011b      	lsls	r3, r3, #4
 801dfca:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801dfcc:	68bb      	ldr	r3, [r7, #8]
 801dfce:	0f1b      	lsrs	r3, r3, #28
 801dfd0:	4a06      	ldr	r2, [pc, #24]	; (801dfec <SEQ_BitPosition+0x70>)
 801dfd2:	5cd2      	ldrb	r2, [r2, r3]
 801dfd4:	7bfb      	ldrb	r3, [r7, #15]
 801dfd6:	4413      	add	r3, r2
 801dfd8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801dfda:	7bfb      	ldrb	r3, [r7, #15]
 801dfdc:	f1c3 031f 	rsb	r3, r3, #31
 801dfe0:	b2db      	uxtb	r3, r3
}
 801dfe2:	4618      	mov	r0, r3
 801dfe4:	3714      	adds	r7, #20
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	bc80      	pop	{r7}
 801dfea:	4770      	bx	lr
 801dfec:	0801fb54 	.word	0x0801fb54

0801dff0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801dff0:	b580      	push	{r7, lr}
 801dff2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801dff4:	4b04      	ldr	r3, [pc, #16]	; (801e008 <UTIL_TIMER_Init+0x18>)
 801dff6:	2200      	movs	r2, #0
 801dff8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801dffa:	4b04      	ldr	r3, [pc, #16]	; (801e00c <UTIL_TIMER_Init+0x1c>)
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	4798      	blx	r3
 801e000:	4603      	mov	r3, r0
}
 801e002:	4618      	mov	r0, r3
 801e004:	bd80      	pop	{r7, pc}
 801e006:	bf00      	nop
 801e008:	200018fc 	.word	0x200018fc
 801e00c:	0801f5d0 	.word	0x0801f5d0

0801e010 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	b084      	sub	sp, #16
 801e014:	af00      	add	r7, sp, #0
 801e016:	60f8      	str	r0, [r7, #12]
 801e018:	60b9      	str	r1, [r7, #8]
 801e01a:	603b      	str	r3, [r7, #0]
 801e01c:	4613      	mov	r3, r2
 801e01e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	2b00      	cmp	r3, #0
 801e024:	d023      	beq.n	801e06e <UTIL_TIMER_Create+0x5e>
 801e026:	683b      	ldr	r3, [r7, #0]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d020      	beq.n	801e06e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	2200      	movs	r2, #0
 801e030:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e032:	4b11      	ldr	r3, [pc, #68]	; (801e078 <UTIL_TIMER_Create+0x68>)
 801e034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e036:	68b8      	ldr	r0, [r7, #8]
 801e038:	4798      	blx	r3
 801e03a:	4602      	mov	r2, r0
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	2200      	movs	r2, #0
 801e044:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	2200      	movs	r2, #0
 801e04a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	2200      	movs	r2, #0
 801e050:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	683a      	ldr	r2, [r7, #0]
 801e056:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	69ba      	ldr	r2, [r7, #24]
 801e05c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	79fa      	ldrb	r2, [r7, #7]
 801e062:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	2200      	movs	r2, #0
 801e068:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e06a:	2300      	movs	r3, #0
 801e06c:	e000      	b.n	801e070 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e06e:	2301      	movs	r3, #1
  }
}
 801e070:	4618      	mov	r0, r3
 801e072:	3710      	adds	r7, #16
 801e074:	46bd      	mov	sp, r7
 801e076:	bd80      	pop	{r7, pc}
 801e078:	0801f5d0 	.word	0x0801f5d0

0801e07c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b08a      	sub	sp, #40	; 0x28
 801e080:	af00      	add	r7, sp, #0
 801e082:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e084:	2300      	movs	r3, #0
 801e086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d056      	beq.n	801e13e <UTIL_TIMER_Start+0xc2>
 801e090:	6878      	ldr	r0, [r7, #4]
 801e092:	f000 f9a9 	bl	801e3e8 <TimerExists>
 801e096:	4603      	mov	r3, r0
 801e098:	f083 0301 	eor.w	r3, r3, #1
 801e09c:	b2db      	uxtb	r3, r3
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d04d      	beq.n	801e13e <UTIL_TIMER_Start+0xc2>
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	7a5b      	ldrb	r3, [r3, #9]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d149      	bne.n	801e13e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0aa:	f3ef 8310 	mrs	r3, PRIMASK
 801e0ae:	613b      	str	r3, [r7, #16]
  return(result);
 801e0b0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e0b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0b4:	b672      	cpsid	i
}
 801e0b6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	685b      	ldr	r3, [r3, #4]
 801e0bc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e0be:	4b24      	ldr	r3, [pc, #144]	; (801e150 <UTIL_TIMER_Start+0xd4>)
 801e0c0:	6a1b      	ldr	r3, [r3, #32]
 801e0c2:	4798      	blx	r3
 801e0c4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e0c6:	6a3a      	ldr	r2, [r7, #32]
 801e0c8:	69bb      	ldr	r3, [r7, #24]
 801e0ca:	429a      	cmp	r2, r3
 801e0cc:	d201      	bcs.n	801e0d2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e0ce:	69bb      	ldr	r3, [r7, #24]
 801e0d0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	6a3a      	ldr	r2, [r7, #32]
 801e0d6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	2200      	movs	r2, #0
 801e0dc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	2201      	movs	r2, #1
 801e0e2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	2200      	movs	r2, #0
 801e0e8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e0ea:	4b1a      	ldr	r3, [pc, #104]	; (801e154 <UTIL_TIMER_Start+0xd8>)
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d106      	bne.n	801e100 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e0f2:	4b17      	ldr	r3, [pc, #92]	; (801e150 <UTIL_TIMER_Start+0xd4>)
 801e0f4:	691b      	ldr	r3, [r3, #16]
 801e0f6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e0f8:	6878      	ldr	r0, [r7, #4]
 801e0fa:	f000 f9eb 	bl	801e4d4 <TimerInsertNewHeadTimer>
 801e0fe:	e017      	b.n	801e130 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e100:	4b13      	ldr	r3, [pc, #76]	; (801e150 <UTIL_TIMER_Start+0xd4>)
 801e102:	699b      	ldr	r3, [r3, #24]
 801e104:	4798      	blx	r3
 801e106:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	681a      	ldr	r2, [r3, #0]
 801e10c:	697b      	ldr	r3, [r7, #20]
 801e10e:	441a      	add	r2, r3
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	681a      	ldr	r2, [r3, #0]
 801e118:	4b0e      	ldr	r3, [pc, #56]	; (801e154 <UTIL_TIMER_Start+0xd8>)
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	429a      	cmp	r2, r3
 801e120:	d203      	bcs.n	801e12a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e122:	6878      	ldr	r0, [r7, #4]
 801e124:	f000 f9d6 	bl	801e4d4 <TimerInsertNewHeadTimer>
 801e128:	e002      	b.n	801e130 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e12a:	6878      	ldr	r0, [r7, #4]
 801e12c:	f000 f9a2 	bl	801e474 <TimerInsertTimer>
 801e130:	69fb      	ldr	r3, [r7, #28]
 801e132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	f383 8810 	msr	PRIMASK, r3
}
 801e13a:	bf00      	nop
  {
 801e13c:	e002      	b.n	801e144 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e13e:	2301      	movs	r3, #1
 801e140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e148:	4618      	mov	r0, r3
 801e14a:	3728      	adds	r7, #40	; 0x28
 801e14c:	46bd      	mov	sp, r7
 801e14e:	bd80      	pop	{r7, pc}
 801e150:	0801f5d0 	.word	0x0801f5d0
 801e154:	200018fc 	.word	0x200018fc

0801e158 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e158:	b580      	push	{r7, lr}
 801e15a:	b088      	sub	sp, #32
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e160:	2300      	movs	r3, #0
 801e162:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	2b00      	cmp	r3, #0
 801e168:	d05b      	beq.n	801e222 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e16a:	f3ef 8310 	mrs	r3, PRIMASK
 801e16e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e170:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e174:	b672      	cpsid	i
}
 801e176:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e178:	4b2d      	ldr	r3, [pc, #180]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e17e:	4b2c      	ldr	r3, [pc, #176]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	2201      	movs	r2, #1
 801e188:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e18a:	4b29      	ldr	r3, [pc, #164]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d041      	beq.n	801e216 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	2200      	movs	r2, #0
 801e196:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e198:	4b25      	ldr	r3, [pc, #148]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	687a      	ldr	r2, [r7, #4]
 801e19e:	429a      	cmp	r2, r3
 801e1a0:	d134      	bne.n	801e20c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e1a2:	4b23      	ldr	r3, [pc, #140]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e1a4:	681b      	ldr	r3, [r3, #0]
 801e1a6:	2200      	movs	r2, #0
 801e1a8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e1aa:	4b21      	ldr	r3, [pc, #132]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	695b      	ldr	r3, [r3, #20]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d00a      	beq.n	801e1ca <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e1b4:	4b1e      	ldr	r3, [pc, #120]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	695b      	ldr	r3, [r3, #20]
 801e1ba:	4a1d      	ldr	r2, [pc, #116]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e1bc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e1be:	4b1c      	ldr	r3, [pc, #112]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f000 f92c 	bl	801e420 <TimerSetTimeout>
 801e1c8:	e023      	b.n	801e212 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e1ca:	4b1a      	ldr	r3, [pc, #104]	; (801e234 <UTIL_TIMER_Stop+0xdc>)
 801e1cc:	68db      	ldr	r3, [r3, #12]
 801e1ce:	4798      	blx	r3
            TimerListHead = NULL;
 801e1d0:	4b17      	ldr	r3, [pc, #92]	; (801e230 <UTIL_TIMER_Stop+0xd8>)
 801e1d2:	2200      	movs	r2, #0
 801e1d4:	601a      	str	r2, [r3, #0]
 801e1d6:	e01c      	b.n	801e212 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e1d8:	697a      	ldr	r2, [r7, #20]
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	429a      	cmp	r2, r3
 801e1de:	d110      	bne.n	801e202 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e1e0:	697b      	ldr	r3, [r7, #20]
 801e1e2:	695b      	ldr	r3, [r3, #20]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d006      	beq.n	801e1f6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e1e8:	697b      	ldr	r3, [r7, #20]
 801e1ea:	695b      	ldr	r3, [r3, #20]
 801e1ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1ee:	69bb      	ldr	r3, [r7, #24]
 801e1f0:	697a      	ldr	r2, [r7, #20]
 801e1f2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e1f4:	e00d      	b.n	801e212 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1fa:	69bb      	ldr	r3, [r7, #24]
 801e1fc:	697a      	ldr	r2, [r7, #20]
 801e1fe:	615a      	str	r2, [r3, #20]
            break;
 801e200:	e007      	b.n	801e212 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e202:	697b      	ldr	r3, [r7, #20]
 801e204:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e206:	697b      	ldr	r3, [r7, #20]
 801e208:	695b      	ldr	r3, [r3, #20]
 801e20a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e20c:	697b      	ldr	r3, [r7, #20]
 801e20e:	2b00      	cmp	r3, #0
 801e210:	d1e2      	bne.n	801e1d8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e212:	2300      	movs	r3, #0
 801e214:	77fb      	strb	r3, [r7, #31]
 801e216:	693b      	ldr	r3, [r7, #16]
 801e218:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e21a:	68bb      	ldr	r3, [r7, #8]
 801e21c:	f383 8810 	msr	PRIMASK, r3
}
 801e220:	e001      	b.n	801e226 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e222:	2301      	movs	r3, #1
 801e224:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e226:	7ffb      	ldrb	r3, [r7, #31]
}
 801e228:	4618      	mov	r0, r3
 801e22a:	3720      	adds	r7, #32
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd80      	pop	{r7, pc}
 801e230:	200018fc 	.word	0x200018fc
 801e234:	0801f5d0 	.word	0x0801f5d0

0801e238 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e238:	b580      	push	{r7, lr}
 801e23a:	b084      	sub	sp, #16
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	6078      	str	r0, [r7, #4]
 801e240:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e242:	2300      	movs	r3, #0
 801e244:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d102      	bne.n	801e252 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e24c:	2301      	movs	r3, #1
 801e24e:	73fb      	strb	r3, [r7, #15]
 801e250:	e014      	b.n	801e27c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e252:	4b0d      	ldr	r3, [pc, #52]	; (801e288 <UTIL_TIMER_SetPeriod+0x50>)
 801e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e256:	6838      	ldr	r0, [r7, #0]
 801e258:	4798      	blx	r3
 801e25a:	4602      	mov	r2, r0
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e260:	6878      	ldr	r0, [r7, #4]
 801e262:	f000 f8c1 	bl	801e3e8 <TimerExists>
 801e266:	4603      	mov	r3, r0
 801e268:	2b00      	cmp	r3, #0
 801e26a:	d007      	beq.n	801e27c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e26c:	6878      	ldr	r0, [r7, #4]
 801e26e:	f7ff ff73 	bl	801e158 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e272:	6878      	ldr	r0, [r7, #4]
 801e274:	f7ff ff02 	bl	801e07c <UTIL_TIMER_Start>
 801e278:	4603      	mov	r3, r0
 801e27a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e27c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e27e:	4618      	mov	r0, r3
 801e280:	3710      	adds	r7, #16
 801e282:	46bd      	mov	sp, r7
 801e284:	bd80      	pop	{r7, pc}
 801e286:	bf00      	nop
 801e288:	0801f5d0 	.word	0x0801f5d0

0801e28c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e28c:	b590      	push	{r4, r7, lr}
 801e28e:	b089      	sub	sp, #36	; 0x24
 801e290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e292:	f3ef 8310 	mrs	r3, PRIMASK
 801e296:	60bb      	str	r3, [r7, #8]
  return(result);
 801e298:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e29a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e29c:	b672      	cpsid	i
}
 801e29e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e2a0:	4b38      	ldr	r3, [pc, #224]	; (801e384 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2a2:	695b      	ldr	r3, [r3, #20]
 801e2a4:	4798      	blx	r3
 801e2a6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e2a8:	4b36      	ldr	r3, [pc, #216]	; (801e384 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2aa:	691b      	ldr	r3, [r3, #16]
 801e2ac:	4798      	blx	r3
 801e2ae:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e2b0:	693a      	ldr	r2, [r7, #16]
 801e2b2:	697b      	ldr	r3, [r7, #20]
 801e2b4:	1ad3      	subs	r3, r2, r3
 801e2b6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e2b8:	4b33      	ldr	r3, [pc, #204]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d037      	beq.n	801e330 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e2c0:	4b31      	ldr	r3, [pc, #196]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e2c6:	69fb      	ldr	r3, [r7, #28]
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	68fa      	ldr	r2, [r7, #12]
 801e2cc:	429a      	cmp	r2, r3
 801e2ce:	d206      	bcs.n	801e2de <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e2d0:	69fb      	ldr	r3, [r7, #28]
 801e2d2:	681a      	ldr	r2, [r3, #0]
 801e2d4:	68fb      	ldr	r3, [r7, #12]
 801e2d6:	1ad2      	subs	r2, r2, r3
 801e2d8:	69fb      	ldr	r3, [r7, #28]
 801e2da:	601a      	str	r2, [r3, #0]
 801e2dc:	e002      	b.n	801e2e4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e2de:	69fb      	ldr	r3, [r7, #28]
 801e2e0:	2200      	movs	r2, #0
 801e2e2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e2e4:	69fb      	ldr	r3, [r7, #28]
 801e2e6:	695b      	ldr	r3, [r3, #20]
 801e2e8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e2ea:	69fb      	ldr	r3, [r7, #28]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d1ea      	bne.n	801e2c6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e2f0:	e01e      	b.n	801e330 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e2f2:	4b25      	ldr	r3, [pc, #148]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e2f8:	4b23      	ldr	r3, [pc, #140]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	695b      	ldr	r3, [r3, #20]
 801e2fe:	4a22      	ldr	r2, [pc, #136]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e300:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e302:	69fb      	ldr	r3, [r7, #28]
 801e304:	2200      	movs	r2, #0
 801e306:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e308:	69fb      	ldr	r3, [r7, #28]
 801e30a:	2200      	movs	r2, #0
 801e30c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e30e:	69fb      	ldr	r3, [r7, #28]
 801e310:	68db      	ldr	r3, [r3, #12]
 801e312:	69fa      	ldr	r2, [r7, #28]
 801e314:	6912      	ldr	r2, [r2, #16]
 801e316:	4610      	mov	r0, r2
 801e318:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e31a:	69fb      	ldr	r3, [r7, #28]
 801e31c:	7adb      	ldrb	r3, [r3, #11]
 801e31e:	2b01      	cmp	r3, #1
 801e320:	d106      	bne.n	801e330 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e322:	69fb      	ldr	r3, [r7, #28]
 801e324:	7a9b      	ldrb	r3, [r3, #10]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d102      	bne.n	801e330 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e32a:	69f8      	ldr	r0, [r7, #28]
 801e32c:	f7ff fea6 	bl	801e07c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e330:	4b15      	ldr	r3, [pc, #84]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d00d      	beq.n	801e354 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e338:	4b13      	ldr	r3, [pc, #76]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d0d7      	beq.n	801e2f2 <UTIL_TIMER_IRQ_Handler+0x66>
 801e342:	4b11      	ldr	r3, [pc, #68]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	681c      	ldr	r4, [r3, #0]
 801e348:	4b0e      	ldr	r3, [pc, #56]	; (801e384 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e34a:	699b      	ldr	r3, [r3, #24]
 801e34c:	4798      	blx	r3
 801e34e:	4603      	mov	r3, r0
 801e350:	429c      	cmp	r4, r3
 801e352:	d3ce      	bcc.n	801e2f2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e354:	4b0c      	ldr	r3, [pc, #48]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	2b00      	cmp	r3, #0
 801e35a:	d009      	beq.n	801e370 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e35c:	4b0a      	ldr	r3, [pc, #40]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	7a1b      	ldrb	r3, [r3, #8]
 801e362:	2b00      	cmp	r3, #0
 801e364:	d104      	bne.n	801e370 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e366:	4b08      	ldr	r3, [pc, #32]	; (801e388 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	4618      	mov	r0, r3
 801e36c:	f000 f858 	bl	801e420 <TimerSetTimeout>
 801e370:	69bb      	ldr	r3, [r7, #24]
 801e372:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	f383 8810 	msr	PRIMASK, r3
}
 801e37a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e37c:	bf00      	nop
 801e37e:	3724      	adds	r7, #36	; 0x24
 801e380:	46bd      	mov	sp, r7
 801e382:	bd90      	pop	{r4, r7, pc}
 801e384:	0801f5d0 	.word	0x0801f5d0
 801e388:	200018fc 	.word	0x200018fc

0801e38c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b082      	sub	sp, #8
 801e390:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e392:	4b06      	ldr	r3, [pc, #24]	; (801e3ac <UTIL_TIMER_GetCurrentTime+0x20>)
 801e394:	69db      	ldr	r3, [r3, #28]
 801e396:	4798      	blx	r3
 801e398:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e39a:	4b04      	ldr	r3, [pc, #16]	; (801e3ac <UTIL_TIMER_GetCurrentTime+0x20>)
 801e39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e39e:	6878      	ldr	r0, [r7, #4]
 801e3a0:	4798      	blx	r3
 801e3a2:	4603      	mov	r3, r0
}
 801e3a4:	4618      	mov	r0, r3
 801e3a6:	3708      	adds	r7, #8
 801e3a8:	46bd      	mov	sp, r7
 801e3aa:	bd80      	pop	{r7, pc}
 801e3ac:	0801f5d0 	.word	0x0801f5d0

0801e3b0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e3b0:	b580      	push	{r7, lr}
 801e3b2:	b084      	sub	sp, #16
 801e3b4:	af00      	add	r7, sp, #0
 801e3b6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e3b8:	4b0a      	ldr	r3, [pc, #40]	; (801e3e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3ba:	69db      	ldr	r3, [r3, #28]
 801e3bc:	4798      	blx	r3
 801e3be:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e3c0:	4b08      	ldr	r3, [pc, #32]	; (801e3e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3c4:	6878      	ldr	r0, [r7, #4]
 801e3c6:	4798      	blx	r3
 801e3c8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e3ca:	4b06      	ldr	r3, [pc, #24]	; (801e3e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3ce:	68f9      	ldr	r1, [r7, #12]
 801e3d0:	68ba      	ldr	r2, [r7, #8]
 801e3d2:	1a8a      	subs	r2, r1, r2
 801e3d4:	4610      	mov	r0, r2
 801e3d6:	4798      	blx	r3
 801e3d8:	4603      	mov	r3, r0
}
 801e3da:	4618      	mov	r0, r3
 801e3dc:	3710      	adds	r7, #16
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	bd80      	pop	{r7, pc}
 801e3e2:	bf00      	nop
 801e3e4:	0801f5d0 	.word	0x0801f5d0

0801e3e8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e3e8:	b480      	push	{r7}
 801e3ea:	b085      	sub	sp, #20
 801e3ec:	af00      	add	r7, sp, #0
 801e3ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e3f0:	4b0a      	ldr	r3, [pc, #40]	; (801e41c <TimerExists+0x34>)
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e3f6:	e008      	b.n	801e40a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e3f8:	68fa      	ldr	r2, [r7, #12]
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	d101      	bne.n	801e404 <TimerExists+0x1c>
    {
      return true;
 801e400:	2301      	movs	r3, #1
 801e402:	e006      	b.n	801e412 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	695b      	ldr	r3, [r3, #20]
 801e408:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d1f3      	bne.n	801e3f8 <TimerExists+0x10>
  }
  return false;
 801e410:	2300      	movs	r3, #0
}
 801e412:	4618      	mov	r0, r3
 801e414:	3714      	adds	r7, #20
 801e416:	46bd      	mov	sp, r7
 801e418:	bc80      	pop	{r7}
 801e41a:	4770      	bx	lr
 801e41c:	200018fc 	.word	0x200018fc

0801e420 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e420:	b590      	push	{r4, r7, lr}
 801e422:	b085      	sub	sp, #20
 801e424:	af00      	add	r7, sp, #0
 801e426:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e428:	4b11      	ldr	r3, [pc, #68]	; (801e470 <TimerSetTimeout+0x50>)
 801e42a:	6a1b      	ldr	r3, [r3, #32]
 801e42c:	4798      	blx	r3
 801e42e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	2201      	movs	r2, #1
 801e434:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	681c      	ldr	r4, [r3, #0]
 801e43a:	4b0d      	ldr	r3, [pc, #52]	; (801e470 <TimerSetTimeout+0x50>)
 801e43c:	699b      	ldr	r3, [r3, #24]
 801e43e:	4798      	blx	r3
 801e440:	4602      	mov	r2, r0
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	4413      	add	r3, r2
 801e446:	429c      	cmp	r4, r3
 801e448:	d207      	bcs.n	801e45a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e44a:	4b09      	ldr	r3, [pc, #36]	; (801e470 <TimerSetTimeout+0x50>)
 801e44c:	699b      	ldr	r3, [r3, #24]
 801e44e:	4798      	blx	r3
 801e450:	4602      	mov	r2, r0
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	441a      	add	r2, r3
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e45a:	4b05      	ldr	r3, [pc, #20]	; (801e470 <TimerSetTimeout+0x50>)
 801e45c:	689b      	ldr	r3, [r3, #8]
 801e45e:	687a      	ldr	r2, [r7, #4]
 801e460:	6812      	ldr	r2, [r2, #0]
 801e462:	4610      	mov	r0, r2
 801e464:	4798      	blx	r3
}
 801e466:	bf00      	nop
 801e468:	3714      	adds	r7, #20
 801e46a:	46bd      	mov	sp, r7
 801e46c:	bd90      	pop	{r4, r7, pc}
 801e46e:	bf00      	nop
 801e470:	0801f5d0 	.word	0x0801f5d0

0801e474 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e474:	b480      	push	{r7}
 801e476:	b085      	sub	sp, #20
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e47c:	4b14      	ldr	r3, [pc, #80]	; (801e4d0 <TimerInsertTimer+0x5c>)
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e482:	4b13      	ldr	r3, [pc, #76]	; (801e4d0 <TimerInsertTimer+0x5c>)
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	695b      	ldr	r3, [r3, #20]
 801e488:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e48a:	e012      	b.n	801e4b2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	681a      	ldr	r2, [r3, #0]
 801e490:	68bb      	ldr	r3, [r7, #8]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	429a      	cmp	r2, r3
 801e496:	d905      	bls.n	801e4a4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e498:	68bb      	ldr	r3, [r7, #8]
 801e49a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	695b      	ldr	r3, [r3, #20]
 801e4a0:	60bb      	str	r3, [r7, #8]
 801e4a2:	e006      	b.n	801e4b2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	687a      	ldr	r2, [r7, #4]
 801e4a8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	68ba      	ldr	r2, [r7, #8]
 801e4ae:	615a      	str	r2, [r3, #20]
        return;
 801e4b0:	e009      	b.n	801e4c6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	695b      	ldr	r3, [r3, #20]
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d1e8      	bne.n	801e48c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	687a      	ldr	r2, [r7, #4]
 801e4be:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	2200      	movs	r2, #0
 801e4c4:	615a      	str	r2, [r3, #20]
}
 801e4c6:	3714      	adds	r7, #20
 801e4c8:	46bd      	mov	sp, r7
 801e4ca:	bc80      	pop	{r7}
 801e4cc:	4770      	bx	lr
 801e4ce:	bf00      	nop
 801e4d0:	200018fc 	.word	0x200018fc

0801e4d4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e4d4:	b580      	push	{r7, lr}
 801e4d6:	b084      	sub	sp, #16
 801e4d8:	af00      	add	r7, sp, #0
 801e4da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e4dc:	4b0b      	ldr	r3, [pc, #44]	; (801e50c <TimerInsertNewHeadTimer+0x38>)
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d002      	beq.n	801e4ee <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	2200      	movs	r2, #0
 801e4ec:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	68fa      	ldr	r2, [r7, #12]
 801e4f2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e4f4:	4a05      	ldr	r2, [pc, #20]	; (801e50c <TimerInsertNewHeadTimer+0x38>)
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e4fa:	4b04      	ldr	r3, [pc, #16]	; (801e50c <TimerInsertNewHeadTimer+0x38>)
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	4618      	mov	r0, r3
 801e500:	f7ff ff8e 	bl	801e420 <TimerSetTimeout>
}
 801e504:	bf00      	nop
 801e506:	3710      	adds	r7, #16
 801e508:	46bd      	mov	sp, r7
 801e50a:	bd80      	pop	{r7, pc}
 801e50c:	200018fc 	.word	0x200018fc

0801e510 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e510:	b580      	push	{r7, lr}
 801e512:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e514:	2218      	movs	r2, #24
 801e516:	2100      	movs	r1, #0
 801e518:	4807      	ldr	r0, [pc, #28]	; (801e538 <UTIL_ADV_TRACE_Init+0x28>)
 801e51a:	f7fe fffa 	bl	801d512 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e51e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e522:	2100      	movs	r1, #0
 801e524:	4805      	ldr	r0, [pc, #20]	; (801e53c <UTIL_ADV_TRACE_Init+0x2c>)
 801e526:	f7fe fff4 	bl	801d512 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e52a:	4b05      	ldr	r3, [pc, #20]	; (801e540 <UTIL_ADV_TRACE_Init+0x30>)
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	4805      	ldr	r0, [pc, #20]	; (801e544 <UTIL_ADV_TRACE_Init+0x34>)
 801e530:	4798      	blx	r3
 801e532:	4603      	mov	r3, r0
}
 801e534:	4618      	mov	r0, r3
 801e536:	bd80      	pop	{r7, pc}
 801e538:	20001900 	.word	0x20001900
 801e53c:	20001918 	.word	0x20001918
 801e540:	0801f610 	.word	0x0801f610
 801e544:	0801e7b1 	.word	0x0801e7b1

0801e548 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e548:	b480      	push	{r7}
 801e54a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e54c:	4b06      	ldr	r3, [pc, #24]	; (801e568 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e54e:	8a5a      	ldrh	r2, [r3, #18]
 801e550:	4b05      	ldr	r3, [pc, #20]	; (801e568 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e552:	8a1b      	ldrh	r3, [r3, #16]
 801e554:	429a      	cmp	r2, r3
 801e556:	d101      	bne.n	801e55c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e558:	2301      	movs	r3, #1
 801e55a:	e000      	b.n	801e55e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e55c:	2300      	movs	r3, #0
}
 801e55e:	4618      	mov	r0, r3
 801e560:	46bd      	mov	sp, r7
 801e562:	bc80      	pop	{r7}
 801e564:	4770      	bx	lr
 801e566:	bf00      	nop
 801e568:	20001900 	.word	0x20001900

0801e56c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e56c:	b408      	push	{r3}
 801e56e:	b580      	push	{r7, lr}
 801e570:	b08d      	sub	sp, #52	; 0x34
 801e572:	af00      	add	r7, sp, #0
 801e574:	60f8      	str	r0, [r7, #12]
 801e576:	60b9      	str	r1, [r7, #8]
 801e578:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e57a:	2300      	movs	r3, #0
 801e57c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e57e:	2300      	movs	r3, #0
 801e580:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e582:	4b37      	ldr	r3, [pc, #220]	; (801e660 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e584:	7a1b      	ldrb	r3, [r3, #8]
 801e586:	461a      	mov	r2, r3
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	4293      	cmp	r3, r2
 801e58c:	d902      	bls.n	801e594 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e58e:	f06f 0304 	mvn.w	r3, #4
 801e592:	e05e      	b.n	801e652 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e594:	4b32      	ldr	r3, [pc, #200]	; (801e660 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e596:	68da      	ldr	r2, [r3, #12]
 801e598:	68bb      	ldr	r3, [r7, #8]
 801e59a:	4013      	ands	r3, r2
 801e59c:	68ba      	ldr	r2, [r7, #8]
 801e59e:	429a      	cmp	r2, r3
 801e5a0:	d002      	beq.n	801e5a8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e5a2:	f06f 0305 	mvn.w	r3, #5
 801e5a6:	e054      	b.n	801e652 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e5a8:	4b2d      	ldr	r3, [pc, #180]	; (801e660 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5aa:	685b      	ldr	r3, [r3, #4]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d00a      	beq.n	801e5c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d007      	beq.n	801e5c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e5b6:	4b2a      	ldr	r3, [pc, #168]	; (801e660 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5b8:	685b      	ldr	r3, [r3, #4]
 801e5ba:	f107 0116 	add.w	r1, r7, #22
 801e5be:	f107 0218 	add.w	r2, r7, #24
 801e5c2:	4610      	mov	r0, r2
 801e5c4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e5c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5ca:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5d4:	4823      	ldr	r0, [pc, #140]	; (801e664 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e5d6:	f7ff fa29 	bl	801da2c <tiny_vsnprintf_like>
 801e5da:	4603      	mov	r3, r0
 801e5dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e5de:	f000 f9f1 	bl	801e9c4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e5e2:	8afa      	ldrh	r2, [r7, #22]
 801e5e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e5e6:	4413      	add	r3, r2
 801e5e8:	b29b      	uxth	r3, r3
 801e5ea:	f107 0214 	add.w	r2, r7, #20
 801e5ee:	4611      	mov	r1, r2
 801e5f0:	4618      	mov	r0, r3
 801e5f2:	f000 f969 	bl	801e8c8 <TRACE_AllocateBufer>
 801e5f6:	4603      	mov	r3, r0
 801e5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5fc:	d025      	beq.n	801e64a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e5fe:	2300      	movs	r3, #0
 801e600:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e602:	e00e      	b.n	801e622 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e606:	8aba      	ldrh	r2, [r7, #20]
 801e608:	3330      	adds	r3, #48	; 0x30
 801e60a:	443b      	add	r3, r7
 801e60c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e610:	4b15      	ldr	r3, [pc, #84]	; (801e668 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e612:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e614:	8abb      	ldrh	r3, [r7, #20]
 801e616:	3301      	adds	r3, #1
 801e618:	b29b      	uxth	r3, r3
 801e61a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e61c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e61e:	3301      	adds	r3, #1
 801e620:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e622:	8afb      	ldrh	r3, [r7, #22]
 801e624:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e626:	429a      	cmp	r2, r3
 801e628:	d3ec      	bcc.n	801e604 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e62a:	8abb      	ldrh	r3, [r7, #20]
 801e62c:	461a      	mov	r2, r3
 801e62e:	4b0e      	ldr	r3, [pc, #56]	; (801e668 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e630:	18d0      	adds	r0, r2, r3
 801e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e636:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e63a:	f7ff f9f7 	bl	801da2c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e63e:	f000 f9df 	bl	801ea00 <TRACE_UnLock>

    return TRACE_Send();
 801e642:	f000 f831 	bl	801e6a8 <TRACE_Send>
 801e646:	4603      	mov	r3, r0
 801e648:	e003      	b.n	801e652 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e64a:	f000 f9d9 	bl	801ea00 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e64e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e652:	4618      	mov	r0, r3
 801e654:	3734      	adds	r7, #52	; 0x34
 801e656:	46bd      	mov	sp, r7
 801e658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e65c:	b001      	add	sp, #4
 801e65e:	4770      	bx	lr
 801e660:	20001900 	.word	0x20001900
 801e664:	20001d18 	.word	0x20001d18
 801e668:	20001918 	.word	0x20001918

0801e66c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e66c:	b480      	push	{r7}
 801e66e:	b083      	sub	sp, #12
 801e670:	af00      	add	r7, sp, #0
 801e672:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e674:	4a03      	ldr	r2, [pc, #12]	; (801e684 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	6053      	str	r3, [r2, #4]
}
 801e67a:	bf00      	nop
 801e67c:	370c      	adds	r7, #12
 801e67e:	46bd      	mov	sp, r7
 801e680:	bc80      	pop	{r7}
 801e682:	4770      	bx	lr
 801e684:	20001900 	.word	0x20001900

0801e688 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e688:	b480      	push	{r7}
 801e68a:	b083      	sub	sp, #12
 801e68c:	af00      	add	r7, sp, #0
 801e68e:	4603      	mov	r3, r0
 801e690:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e692:	4a04      	ldr	r2, [pc, #16]	; (801e6a4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e694:	79fb      	ldrb	r3, [r7, #7]
 801e696:	7213      	strb	r3, [r2, #8]
}
 801e698:	bf00      	nop
 801e69a:	370c      	adds	r7, #12
 801e69c:	46bd      	mov	sp, r7
 801e69e:	bc80      	pop	{r7}
 801e6a0:	4770      	bx	lr
 801e6a2:	bf00      	nop
 801e6a4:	20001900 	.word	0x20001900

0801e6a8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e6a8:	b580      	push	{r7, lr}
 801e6aa:	b088      	sub	sp, #32
 801e6ac:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e6ae:	2300      	movs	r3, #0
 801e6b0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6b6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6ba:	613b      	str	r3, [r7, #16]
  return(result);
 801e6bc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e6be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6c0:	b672      	cpsid	i
}
 801e6c2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e6c4:	f000 f9ba 	bl	801ea3c <TRACE_IsLocked>
 801e6c8:	4603      	mov	r3, r0
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	d15d      	bne.n	801e78a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e6ce:	f000 f979 	bl	801e9c4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e6d2:	4b34      	ldr	r3, [pc, #208]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6d4:	8a1a      	ldrh	r2, [r3, #16]
 801e6d6:	4b33      	ldr	r3, [pc, #204]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6d8:	8a5b      	ldrh	r3, [r3, #18]
 801e6da:	429a      	cmp	r2, r3
 801e6dc:	d04d      	beq.n	801e77a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e6de:	4b31      	ldr	r3, [pc, #196]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6e0:	789b      	ldrb	r3, [r3, #2]
 801e6e2:	2b01      	cmp	r3, #1
 801e6e4:	d117      	bne.n	801e716 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e6e6:	4b2f      	ldr	r3, [pc, #188]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6e8:	881a      	ldrh	r2, [r3, #0]
 801e6ea:	4b2e      	ldr	r3, [pc, #184]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6ec:	8a1b      	ldrh	r3, [r3, #16]
 801e6ee:	1ad3      	subs	r3, r2, r3
 801e6f0:	b29a      	uxth	r2, r3
 801e6f2:	4b2c      	ldr	r3, [pc, #176]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6f4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e6f6:	4b2b      	ldr	r3, [pc, #172]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6f8:	2202      	movs	r2, #2
 801e6fa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e6fc:	4b29      	ldr	r3, [pc, #164]	; (801e7a4 <TRACE_Send+0xfc>)
 801e6fe:	2200      	movs	r2, #0
 801e700:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e702:	4b28      	ldr	r3, [pc, #160]	; (801e7a4 <TRACE_Send+0xfc>)
 801e704:	8a9b      	ldrh	r3, [r3, #20]
 801e706:	2b00      	cmp	r3, #0
 801e708:	d105      	bne.n	801e716 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e70a:	4b26      	ldr	r3, [pc, #152]	; (801e7a4 <TRACE_Send+0xfc>)
 801e70c:	2200      	movs	r2, #0
 801e70e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e710:	4b24      	ldr	r3, [pc, #144]	; (801e7a4 <TRACE_Send+0xfc>)
 801e712:	2200      	movs	r2, #0
 801e714:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e716:	4b23      	ldr	r3, [pc, #140]	; (801e7a4 <TRACE_Send+0xfc>)
 801e718:	789b      	ldrb	r3, [r3, #2]
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d115      	bne.n	801e74a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e71e:	4b21      	ldr	r3, [pc, #132]	; (801e7a4 <TRACE_Send+0xfc>)
 801e720:	8a5a      	ldrh	r2, [r3, #18]
 801e722:	4b20      	ldr	r3, [pc, #128]	; (801e7a4 <TRACE_Send+0xfc>)
 801e724:	8a1b      	ldrh	r3, [r3, #16]
 801e726:	429a      	cmp	r2, r3
 801e728:	d908      	bls.n	801e73c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e72a:	4b1e      	ldr	r3, [pc, #120]	; (801e7a4 <TRACE_Send+0xfc>)
 801e72c:	8a5a      	ldrh	r2, [r3, #18]
 801e72e:	4b1d      	ldr	r3, [pc, #116]	; (801e7a4 <TRACE_Send+0xfc>)
 801e730:	8a1b      	ldrh	r3, [r3, #16]
 801e732:	1ad3      	subs	r3, r2, r3
 801e734:	b29a      	uxth	r2, r3
 801e736:	4b1b      	ldr	r3, [pc, #108]	; (801e7a4 <TRACE_Send+0xfc>)
 801e738:	829a      	strh	r2, [r3, #20]
 801e73a:	e006      	b.n	801e74a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e73c:	4b19      	ldr	r3, [pc, #100]	; (801e7a4 <TRACE_Send+0xfc>)
 801e73e:	8a1b      	ldrh	r3, [r3, #16]
 801e740:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e744:	b29a      	uxth	r2, r3
 801e746:	4b17      	ldr	r3, [pc, #92]	; (801e7a4 <TRACE_Send+0xfc>)
 801e748:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e74a:	4b16      	ldr	r3, [pc, #88]	; (801e7a4 <TRACE_Send+0xfc>)
 801e74c:	8a1b      	ldrh	r3, [r3, #16]
 801e74e:	461a      	mov	r2, r3
 801e750:	4b15      	ldr	r3, [pc, #84]	; (801e7a8 <TRACE_Send+0x100>)
 801e752:	4413      	add	r3, r2
 801e754:	61bb      	str	r3, [r7, #24]
 801e756:	697b      	ldr	r3, [r7, #20]
 801e758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e75a:	68fb      	ldr	r3, [r7, #12]
 801e75c:	f383 8810 	msr	PRIMASK, r3
}
 801e760:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e762:	f7e4 fa3d 	bl	8002be0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e766:	4b11      	ldr	r3, [pc, #68]	; (801e7ac <TRACE_Send+0x104>)
 801e768:	68db      	ldr	r3, [r3, #12]
 801e76a:	4a0e      	ldr	r2, [pc, #56]	; (801e7a4 <TRACE_Send+0xfc>)
 801e76c:	8a92      	ldrh	r2, [r2, #20]
 801e76e:	4611      	mov	r1, r2
 801e770:	69b8      	ldr	r0, [r7, #24]
 801e772:	4798      	blx	r3
 801e774:	4603      	mov	r3, r0
 801e776:	77fb      	strb	r3, [r7, #31]
 801e778:	e00d      	b.n	801e796 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e77a:	f000 f941 	bl	801ea00 <TRACE_UnLock>
 801e77e:	697b      	ldr	r3, [r7, #20]
 801e780:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e782:	68bb      	ldr	r3, [r7, #8]
 801e784:	f383 8810 	msr	PRIMASK, r3
}
 801e788:	e005      	b.n	801e796 <TRACE_Send+0xee>
 801e78a:	697b      	ldr	r3, [r7, #20]
 801e78c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	f383 8810 	msr	PRIMASK, r3
}
 801e794:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e796:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e79a:	4618      	mov	r0, r3
 801e79c:	3720      	adds	r7, #32
 801e79e:	46bd      	mov	sp, r7
 801e7a0:	bd80      	pop	{r7, pc}
 801e7a2:	bf00      	nop
 801e7a4:	20001900 	.word	0x20001900
 801e7a8:	20001918 	.word	0x20001918
 801e7ac:	0801f610 	.word	0x0801f610

0801e7b0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e7b0:	b580      	push	{r7, lr}
 801e7b2:	b088      	sub	sp, #32
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e7b8:	2300      	movs	r3, #0
 801e7ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7bc:	f3ef 8310 	mrs	r3, PRIMASK
 801e7c0:	617b      	str	r3, [r7, #20]
  return(result);
 801e7c2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e7c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7c6:	b672      	cpsid	i
}
 801e7c8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e7ca:	4b3c      	ldr	r3, [pc, #240]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7cc:	789b      	ldrb	r3, [r3, #2]
 801e7ce:	2b02      	cmp	r3, #2
 801e7d0:	d106      	bne.n	801e7e0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7d2:	4b3a      	ldr	r3, [pc, #232]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7d4:	2200      	movs	r2, #0
 801e7d6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7d8:	4b38      	ldr	r3, [pc, #224]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7da:	2200      	movs	r2, #0
 801e7dc:	821a      	strh	r2, [r3, #16]
 801e7de:	e00a      	b.n	801e7f6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e7e0:	4b36      	ldr	r3, [pc, #216]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7e2:	8a1a      	ldrh	r2, [r3, #16]
 801e7e4:	4b35      	ldr	r3, [pc, #212]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7e6:	8a9b      	ldrh	r3, [r3, #20]
 801e7e8:	4413      	add	r3, r2
 801e7ea:	b29b      	uxth	r3, r3
 801e7ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e7f0:	b29a      	uxth	r2, r3
 801e7f2:	4b32      	ldr	r3, [pc, #200]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7f4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e7f6:	4b31      	ldr	r3, [pc, #196]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7f8:	8a1a      	ldrh	r2, [r3, #16]
 801e7fa:	4b30      	ldr	r3, [pc, #192]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e7fc:	8a5b      	ldrh	r3, [r3, #18]
 801e7fe:	429a      	cmp	r2, r3
 801e800:	d04d      	beq.n	801e89e <TRACE_TxCpltCallback+0xee>
 801e802:	4b2e      	ldr	r3, [pc, #184]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e804:	8adb      	ldrh	r3, [r3, #22]
 801e806:	2b01      	cmp	r3, #1
 801e808:	d149      	bne.n	801e89e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e80a:	4b2c      	ldr	r3, [pc, #176]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e80c:	789b      	ldrb	r3, [r3, #2]
 801e80e:	2b01      	cmp	r3, #1
 801e810:	d117      	bne.n	801e842 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e812:	4b2a      	ldr	r3, [pc, #168]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e814:	881a      	ldrh	r2, [r3, #0]
 801e816:	4b29      	ldr	r3, [pc, #164]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e818:	8a1b      	ldrh	r3, [r3, #16]
 801e81a:	1ad3      	subs	r3, r2, r3
 801e81c:	b29a      	uxth	r2, r3
 801e81e:	4b27      	ldr	r3, [pc, #156]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e820:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e822:	4b26      	ldr	r3, [pc, #152]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e824:	2202      	movs	r2, #2
 801e826:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e828:	4b24      	ldr	r3, [pc, #144]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e82a:	2200      	movs	r2, #0
 801e82c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e82e:	4b23      	ldr	r3, [pc, #140]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e830:	8a9b      	ldrh	r3, [r3, #20]
 801e832:	2b00      	cmp	r3, #0
 801e834:	d105      	bne.n	801e842 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e836:	4b21      	ldr	r3, [pc, #132]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e838:	2200      	movs	r2, #0
 801e83a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e83c:	4b1f      	ldr	r3, [pc, #124]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e83e:	2200      	movs	r2, #0
 801e840:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e842:	4b1e      	ldr	r3, [pc, #120]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e844:	789b      	ldrb	r3, [r3, #2]
 801e846:	2b00      	cmp	r3, #0
 801e848:	d115      	bne.n	801e876 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e84a:	4b1c      	ldr	r3, [pc, #112]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e84c:	8a5a      	ldrh	r2, [r3, #18]
 801e84e:	4b1b      	ldr	r3, [pc, #108]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e850:	8a1b      	ldrh	r3, [r3, #16]
 801e852:	429a      	cmp	r2, r3
 801e854:	d908      	bls.n	801e868 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e856:	4b19      	ldr	r3, [pc, #100]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e858:	8a5a      	ldrh	r2, [r3, #18]
 801e85a:	4b18      	ldr	r3, [pc, #96]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e85c:	8a1b      	ldrh	r3, [r3, #16]
 801e85e:	1ad3      	subs	r3, r2, r3
 801e860:	b29a      	uxth	r2, r3
 801e862:	4b16      	ldr	r3, [pc, #88]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e864:	829a      	strh	r2, [r3, #20]
 801e866:	e006      	b.n	801e876 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e868:	4b14      	ldr	r3, [pc, #80]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e86a:	8a1b      	ldrh	r3, [r3, #16]
 801e86c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e870:	b29a      	uxth	r2, r3
 801e872:	4b12      	ldr	r3, [pc, #72]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e874:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e876:	4b11      	ldr	r3, [pc, #68]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e878:	8a1b      	ldrh	r3, [r3, #16]
 801e87a:	461a      	mov	r2, r3
 801e87c:	4b10      	ldr	r3, [pc, #64]	; (801e8c0 <TRACE_TxCpltCallback+0x110>)
 801e87e:	4413      	add	r3, r2
 801e880:	61fb      	str	r3, [r7, #28]
 801e882:	69bb      	ldr	r3, [r7, #24]
 801e884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e886:	693b      	ldr	r3, [r7, #16]
 801e888:	f383 8810 	msr	PRIMASK, r3
}
 801e88c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e88e:	4b0d      	ldr	r3, [pc, #52]	; (801e8c4 <TRACE_TxCpltCallback+0x114>)
 801e890:	68db      	ldr	r3, [r3, #12]
 801e892:	4a0a      	ldr	r2, [pc, #40]	; (801e8bc <TRACE_TxCpltCallback+0x10c>)
 801e894:	8a92      	ldrh	r2, [r2, #20]
 801e896:	4611      	mov	r1, r2
 801e898:	69f8      	ldr	r0, [r7, #28]
 801e89a:	4798      	blx	r3
 801e89c:	e00a      	b.n	801e8b4 <TRACE_TxCpltCallback+0x104>
 801e89e:	69bb      	ldr	r3, [r7, #24]
 801e8a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	f383 8810 	msr	PRIMASK, r3
}
 801e8a8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e8aa:	f7e4 f9a1 	bl	8002bf0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e8ae:	f000 f8a7 	bl	801ea00 <TRACE_UnLock>
  }
}
 801e8b2:	bf00      	nop
 801e8b4:	bf00      	nop
 801e8b6:	3720      	adds	r7, #32
 801e8b8:	46bd      	mov	sp, r7
 801e8ba:	bd80      	pop	{r7, pc}
 801e8bc:	20001900 	.word	0x20001900
 801e8c0:	20001918 	.word	0x20001918
 801e8c4:	0801f610 	.word	0x0801f610

0801e8c8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e8c8:	b480      	push	{r7}
 801e8ca:	b087      	sub	sp, #28
 801e8cc:	af00      	add	r7, sp, #0
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	6039      	str	r1, [r7, #0]
 801e8d2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8d8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8da:	f3ef 8310 	mrs	r3, PRIMASK
 801e8de:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8e0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e8e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8e4:	b672      	cpsid	i
}
 801e8e6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e8e8:	4b35      	ldr	r3, [pc, #212]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e8ea:	8a5a      	ldrh	r2, [r3, #18]
 801e8ec:	4b34      	ldr	r3, [pc, #208]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e8ee:	8a1b      	ldrh	r3, [r3, #16]
 801e8f0:	429a      	cmp	r2, r3
 801e8f2:	d11b      	bne.n	801e92c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e8f4:	4b32      	ldr	r3, [pc, #200]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e8f6:	8a5b      	ldrh	r3, [r3, #18]
 801e8f8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e8fc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e8fe:	88fa      	ldrh	r2, [r7, #6]
 801e900:	8afb      	ldrh	r3, [r7, #22]
 801e902:	429a      	cmp	r2, r3
 801e904:	d33a      	bcc.n	801e97c <TRACE_AllocateBufer+0xb4>
 801e906:	4b2e      	ldr	r3, [pc, #184]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e908:	8a1b      	ldrh	r3, [r3, #16]
 801e90a:	88fa      	ldrh	r2, [r7, #6]
 801e90c:	429a      	cmp	r2, r3
 801e90e:	d235      	bcs.n	801e97c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e910:	4b2b      	ldr	r3, [pc, #172]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e912:	2201      	movs	r2, #1
 801e914:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e916:	4b2a      	ldr	r3, [pc, #168]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e918:	8a5a      	ldrh	r2, [r3, #18]
 801e91a:	4b29      	ldr	r3, [pc, #164]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e91c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e91e:	4b28      	ldr	r3, [pc, #160]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e920:	8a1b      	ldrh	r3, [r3, #16]
 801e922:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e924:	4b26      	ldr	r3, [pc, #152]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e926:	2200      	movs	r2, #0
 801e928:	825a      	strh	r2, [r3, #18]
 801e92a:	e027      	b.n	801e97c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e92c:	4b24      	ldr	r3, [pc, #144]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e92e:	8a5a      	ldrh	r2, [r3, #18]
 801e930:	4b23      	ldr	r3, [pc, #140]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e932:	8a1b      	ldrh	r3, [r3, #16]
 801e934:	429a      	cmp	r2, r3
 801e936:	d91b      	bls.n	801e970 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e938:	4b21      	ldr	r3, [pc, #132]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e93a:	8a5b      	ldrh	r3, [r3, #18]
 801e93c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e940:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e942:	88fa      	ldrh	r2, [r7, #6]
 801e944:	8afb      	ldrh	r3, [r7, #22]
 801e946:	429a      	cmp	r2, r3
 801e948:	d318      	bcc.n	801e97c <TRACE_AllocateBufer+0xb4>
 801e94a:	4b1d      	ldr	r3, [pc, #116]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e94c:	8a1b      	ldrh	r3, [r3, #16]
 801e94e:	88fa      	ldrh	r2, [r7, #6]
 801e950:	429a      	cmp	r2, r3
 801e952:	d213      	bcs.n	801e97c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e954:	4b1a      	ldr	r3, [pc, #104]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e956:	2201      	movs	r2, #1
 801e958:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e95a:	4b19      	ldr	r3, [pc, #100]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e95c:	8a5a      	ldrh	r2, [r3, #18]
 801e95e:	4b18      	ldr	r3, [pc, #96]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e960:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e962:	4b17      	ldr	r3, [pc, #92]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e964:	8a1b      	ldrh	r3, [r3, #16]
 801e966:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e968:	4b15      	ldr	r3, [pc, #84]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e96a:	2200      	movs	r2, #0
 801e96c:	825a      	strh	r2, [r3, #18]
 801e96e:	e005      	b.n	801e97c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e970:	4b13      	ldr	r3, [pc, #76]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e972:	8a1a      	ldrh	r2, [r3, #16]
 801e974:	4b12      	ldr	r3, [pc, #72]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e976:	8a5b      	ldrh	r3, [r3, #18]
 801e978:	1ad3      	subs	r3, r2, r3
 801e97a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e97c:	8afa      	ldrh	r2, [r7, #22]
 801e97e:	88fb      	ldrh	r3, [r7, #6]
 801e980:	429a      	cmp	r2, r3
 801e982:	d90f      	bls.n	801e9a4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e984:	4b0e      	ldr	r3, [pc, #56]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e986:	8a5a      	ldrh	r2, [r3, #18]
 801e988:	683b      	ldr	r3, [r7, #0]
 801e98a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e98c:	4b0c      	ldr	r3, [pc, #48]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e98e:	8a5a      	ldrh	r2, [r3, #18]
 801e990:	88fb      	ldrh	r3, [r7, #6]
 801e992:	4413      	add	r3, r2
 801e994:	b29b      	uxth	r3, r3
 801e996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e99a:	b29a      	uxth	r2, r3
 801e99c:	4b08      	ldr	r3, [pc, #32]	; (801e9c0 <TRACE_AllocateBufer+0xf8>)
 801e99e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	82bb      	strh	r3, [r7, #20]
 801e9a4:	693b      	ldr	r3, [r7, #16]
 801e9a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9a8:	68bb      	ldr	r3, [r7, #8]
 801e9aa:	f383 8810 	msr	PRIMASK, r3
}
 801e9ae:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e9b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e9b4:	4618      	mov	r0, r3
 801e9b6:	371c      	adds	r7, #28
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bc80      	pop	{r7}
 801e9bc:	4770      	bx	lr
 801e9be:	bf00      	nop
 801e9c0:	20001900 	.word	0x20001900

0801e9c4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e9c4:	b480      	push	{r7}
 801e9c6:	b085      	sub	sp, #20
 801e9c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9ca:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ce:	607b      	str	r3, [r7, #4]
  return(result);
 801e9d0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9d4:	b672      	cpsid	i
}
 801e9d6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e9d8:	4b08      	ldr	r3, [pc, #32]	; (801e9fc <TRACE_Lock+0x38>)
 801e9da:	8adb      	ldrh	r3, [r3, #22]
 801e9dc:	3301      	adds	r3, #1
 801e9de:	b29a      	uxth	r2, r3
 801e9e0:	4b06      	ldr	r3, [pc, #24]	; (801e9fc <TRACE_Lock+0x38>)
 801e9e2:	82da      	strh	r2, [r3, #22]
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9e8:	68bb      	ldr	r3, [r7, #8]
 801e9ea:	f383 8810 	msr	PRIMASK, r3
}
 801e9ee:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e9f0:	bf00      	nop
 801e9f2:	3714      	adds	r7, #20
 801e9f4:	46bd      	mov	sp, r7
 801e9f6:	bc80      	pop	{r7}
 801e9f8:	4770      	bx	lr
 801e9fa:	bf00      	nop
 801e9fc:	20001900 	.word	0x20001900

0801ea00 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ea00:	b480      	push	{r7}
 801ea02:	b085      	sub	sp, #20
 801ea04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea06:	f3ef 8310 	mrs	r3, PRIMASK
 801ea0a:	607b      	str	r3, [r7, #4]
  return(result);
 801ea0c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea10:	b672      	cpsid	i
}
 801ea12:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ea14:	4b08      	ldr	r3, [pc, #32]	; (801ea38 <TRACE_UnLock+0x38>)
 801ea16:	8adb      	ldrh	r3, [r3, #22]
 801ea18:	3b01      	subs	r3, #1
 801ea1a:	b29a      	uxth	r2, r3
 801ea1c:	4b06      	ldr	r3, [pc, #24]	; (801ea38 <TRACE_UnLock+0x38>)
 801ea1e:	82da      	strh	r2, [r3, #22]
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea24:	68bb      	ldr	r3, [r7, #8]
 801ea26:	f383 8810 	msr	PRIMASK, r3
}
 801ea2a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea2c:	bf00      	nop
 801ea2e:	3714      	adds	r7, #20
 801ea30:	46bd      	mov	sp, r7
 801ea32:	bc80      	pop	{r7}
 801ea34:	4770      	bx	lr
 801ea36:	bf00      	nop
 801ea38:	20001900 	.word	0x20001900

0801ea3c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ea3c:	b480      	push	{r7}
 801ea3e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ea40:	4b05      	ldr	r3, [pc, #20]	; (801ea58 <TRACE_IsLocked+0x1c>)
 801ea42:	8adb      	ldrh	r3, [r3, #22]
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	bf14      	ite	ne
 801ea48:	2301      	movne	r3, #1
 801ea4a:	2300      	moveq	r3, #0
 801ea4c:	b2db      	uxtb	r3, r3
}
 801ea4e:	4618      	mov	r0, r3
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bc80      	pop	{r7}
 801ea54:	4770      	bx	lr
 801ea56:	bf00      	nop
 801ea58:	20001900 	.word	0x20001900

0801ea5c <memset>:
 801ea5c:	4402      	add	r2, r0
 801ea5e:	4603      	mov	r3, r0
 801ea60:	4293      	cmp	r3, r2
 801ea62:	d100      	bne.n	801ea66 <memset+0xa>
 801ea64:	4770      	bx	lr
 801ea66:	f803 1b01 	strb.w	r1, [r3], #1
 801ea6a:	e7f9      	b.n	801ea60 <memset+0x4>

0801ea6c <__libc_init_array>:
 801ea6c:	b570      	push	{r4, r5, r6, lr}
 801ea6e:	4d0d      	ldr	r5, [pc, #52]	; (801eaa4 <__libc_init_array+0x38>)
 801ea70:	4c0d      	ldr	r4, [pc, #52]	; (801eaa8 <__libc_init_array+0x3c>)
 801ea72:	1b64      	subs	r4, r4, r5
 801ea74:	10a4      	asrs	r4, r4, #2
 801ea76:	2600      	movs	r6, #0
 801ea78:	42a6      	cmp	r6, r4
 801ea7a:	d109      	bne.n	801ea90 <__libc_init_array+0x24>
 801ea7c:	4d0b      	ldr	r5, [pc, #44]	; (801eaac <__libc_init_array+0x40>)
 801ea7e:	4c0c      	ldr	r4, [pc, #48]	; (801eab0 <__libc_init_array+0x44>)
 801ea80:	f000 f8fe 	bl	801ec80 <_init>
 801ea84:	1b64      	subs	r4, r4, r5
 801ea86:	10a4      	asrs	r4, r4, #2
 801ea88:	2600      	movs	r6, #0
 801ea8a:	42a6      	cmp	r6, r4
 801ea8c:	d105      	bne.n	801ea9a <__libc_init_array+0x2e>
 801ea8e:	bd70      	pop	{r4, r5, r6, pc}
 801ea90:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea94:	4798      	blx	r3
 801ea96:	3601      	adds	r6, #1
 801ea98:	e7ee      	b.n	801ea78 <__libc_init_array+0xc>
 801ea9a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea9e:	4798      	blx	r3
 801eaa0:	3601      	adds	r6, #1
 801eaa2:	e7f2      	b.n	801ea8a <__libc_init_array+0x1e>
 801eaa4:	0801fc44 	.word	0x0801fc44
 801eaa8:	0801fc44 	.word	0x0801fc44
 801eaac:	0801fc44 	.word	0x0801fc44
 801eab0:	0801fc4c 	.word	0x0801fc4c

0801eab4 <__retarget_lock_acquire_recursive>:
 801eab4:	4770      	bx	lr

0801eab6 <__retarget_lock_release_recursive>:
 801eab6:	4770      	bx	lr

0801eab8 <register_fini>:
 801eab8:	4b02      	ldr	r3, [pc, #8]	; (801eac4 <register_fini+0xc>)
 801eaba:	b113      	cbz	r3, 801eac2 <register_fini+0xa>
 801eabc:	4802      	ldr	r0, [pc, #8]	; (801eac8 <register_fini+0x10>)
 801eabe:	f000 b805 	b.w	801eacc <atexit>
 801eac2:	4770      	bx	lr
 801eac4:	00000000 	.word	0x00000000
 801eac8:	0801ead9 	.word	0x0801ead9

0801eacc <atexit>:
 801eacc:	2300      	movs	r3, #0
 801eace:	4601      	mov	r1, r0
 801ead0:	461a      	mov	r2, r3
 801ead2:	4618      	mov	r0, r3
 801ead4:	f000 b814 	b.w	801eb00 <__register_exitproc>

0801ead8 <__libc_fini_array>:
 801ead8:	b538      	push	{r3, r4, r5, lr}
 801eada:	4d07      	ldr	r5, [pc, #28]	; (801eaf8 <__libc_fini_array+0x20>)
 801eadc:	4c07      	ldr	r4, [pc, #28]	; (801eafc <__libc_fini_array+0x24>)
 801eade:	1b64      	subs	r4, r4, r5
 801eae0:	10a4      	asrs	r4, r4, #2
 801eae2:	b91c      	cbnz	r4, 801eaec <__libc_fini_array+0x14>
 801eae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eae8:	f000 b8d0 	b.w	801ec8c <_fini>
 801eaec:	3c01      	subs	r4, #1
 801eaee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801eaf2:	4798      	blx	r3
 801eaf4:	e7f5      	b.n	801eae2 <__libc_fini_array+0xa>
 801eaf6:	bf00      	nop
 801eaf8:	0801fc4c 	.word	0x0801fc4c
 801eafc:	0801fc50 	.word	0x0801fc50

0801eb00 <__register_exitproc>:
 801eb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb04:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801eb74 <__register_exitproc+0x74>
 801eb08:	4606      	mov	r6, r0
 801eb0a:	f8da 0000 	ldr.w	r0, [sl]
 801eb0e:	4698      	mov	r8, r3
 801eb10:	460f      	mov	r7, r1
 801eb12:	4691      	mov	r9, r2
 801eb14:	f7ff ffce 	bl	801eab4 <__retarget_lock_acquire_recursive>
 801eb18:	4b17      	ldr	r3, [pc, #92]	; (801eb78 <__register_exitproc+0x78>)
 801eb1a:	681c      	ldr	r4, [r3, #0]
 801eb1c:	b90c      	cbnz	r4, 801eb22 <__register_exitproc+0x22>
 801eb1e:	4c17      	ldr	r4, [pc, #92]	; (801eb7c <__register_exitproc+0x7c>)
 801eb20:	601c      	str	r4, [r3, #0]
 801eb22:	6865      	ldr	r5, [r4, #4]
 801eb24:	f8da 0000 	ldr.w	r0, [sl]
 801eb28:	2d1f      	cmp	r5, #31
 801eb2a:	dd05      	ble.n	801eb38 <__register_exitproc+0x38>
 801eb2c:	f7ff ffc3 	bl	801eab6 <__retarget_lock_release_recursive>
 801eb30:	f04f 30ff 	mov.w	r0, #4294967295
 801eb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb38:	b19e      	cbz	r6, 801eb62 <__register_exitproc+0x62>
 801eb3a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eb3e:	2201      	movs	r2, #1
 801eb40:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eb44:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eb48:	40aa      	lsls	r2, r5
 801eb4a:	4313      	orrs	r3, r2
 801eb4c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eb50:	2e02      	cmp	r6, #2
 801eb52:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eb56:	bf02      	ittt	eq
 801eb58:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801eb5c:	4313      	orreq	r3, r2
 801eb5e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801eb62:	1c6b      	adds	r3, r5, #1
 801eb64:	3502      	adds	r5, #2
 801eb66:	6063      	str	r3, [r4, #4]
 801eb68:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eb6c:	f7ff ffa3 	bl	801eab6 <__retarget_lock_release_recursive>
 801eb70:	2000      	movs	r0, #0
 801eb72:	e7df      	b.n	801eb34 <__register_exitproc+0x34>
 801eb74:	20000168 	.word	0x20000168
 801eb78:	20001f1c 	.word	0x20001f1c
 801eb7c:	20001f20 	.word	0x20001f20

0801eb80 <floor>:
 801eb80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb88:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801eb8c:	2e13      	cmp	r6, #19
 801eb8e:	460b      	mov	r3, r1
 801eb90:	4607      	mov	r7, r0
 801eb92:	460c      	mov	r4, r1
 801eb94:	4605      	mov	r5, r0
 801eb96:	dc32      	bgt.n	801ebfe <floor+0x7e>
 801eb98:	2e00      	cmp	r6, #0
 801eb9a:	da14      	bge.n	801ebc6 <floor+0x46>
 801eb9c:	a334      	add	r3, pc, #208	; (adr r3, 801ec70 <floor+0xf0>)
 801eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba2:	f7e1 faf7 	bl	8000194 <__adddf3>
 801eba6:	2200      	movs	r2, #0
 801eba8:	2300      	movs	r3, #0
 801ebaa:	f7e1 ff39 	bl	8000a20 <__aeabi_dcmpgt>
 801ebae:	b138      	cbz	r0, 801ebc0 <floor+0x40>
 801ebb0:	2c00      	cmp	r4, #0
 801ebb2:	da56      	bge.n	801ec62 <floor+0xe2>
 801ebb4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801ebb8:	4325      	orrs	r5, r4
 801ebba:	d055      	beq.n	801ec68 <floor+0xe8>
 801ebbc:	4c2e      	ldr	r4, [pc, #184]	; (801ec78 <floor+0xf8>)
 801ebbe:	2500      	movs	r5, #0
 801ebc0:	4623      	mov	r3, r4
 801ebc2:	462f      	mov	r7, r5
 801ebc4:	e025      	b.n	801ec12 <floor+0x92>
 801ebc6:	4a2d      	ldr	r2, [pc, #180]	; (801ec7c <floor+0xfc>)
 801ebc8:	fa42 f806 	asr.w	r8, r2, r6
 801ebcc:	ea01 0208 	and.w	r2, r1, r8
 801ebd0:	4302      	orrs	r2, r0
 801ebd2:	d01e      	beq.n	801ec12 <floor+0x92>
 801ebd4:	a326      	add	r3, pc, #152	; (adr r3, 801ec70 <floor+0xf0>)
 801ebd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebda:	f7e1 fadb 	bl	8000194 <__adddf3>
 801ebde:	2200      	movs	r2, #0
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	f7e1 ff1d 	bl	8000a20 <__aeabi_dcmpgt>
 801ebe6:	2800      	cmp	r0, #0
 801ebe8:	d0ea      	beq.n	801ebc0 <floor+0x40>
 801ebea:	2c00      	cmp	r4, #0
 801ebec:	bfbe      	ittt	lt
 801ebee:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ebf2:	4133      	asrlt	r3, r6
 801ebf4:	18e4      	addlt	r4, r4, r3
 801ebf6:	ea24 0408 	bic.w	r4, r4, r8
 801ebfa:	2500      	movs	r5, #0
 801ebfc:	e7e0      	b.n	801ebc0 <floor+0x40>
 801ebfe:	2e33      	cmp	r6, #51	; 0x33
 801ec00:	dd0b      	ble.n	801ec1a <floor+0x9a>
 801ec02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ec06:	d104      	bne.n	801ec12 <floor+0x92>
 801ec08:	4602      	mov	r2, r0
 801ec0a:	f7e1 fac3 	bl	8000194 <__adddf3>
 801ec0e:	4607      	mov	r7, r0
 801ec10:	460b      	mov	r3, r1
 801ec12:	4638      	mov	r0, r7
 801ec14:	4619      	mov	r1, r3
 801ec16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ec1e:	f04f 38ff 	mov.w	r8, #4294967295
 801ec22:	fa28 f802 	lsr.w	r8, r8, r2
 801ec26:	ea10 0f08 	tst.w	r0, r8
 801ec2a:	d0f2      	beq.n	801ec12 <floor+0x92>
 801ec2c:	a310      	add	r3, pc, #64	; (adr r3, 801ec70 <floor+0xf0>)
 801ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec32:	f7e1 faaf 	bl	8000194 <__adddf3>
 801ec36:	2200      	movs	r2, #0
 801ec38:	2300      	movs	r3, #0
 801ec3a:	f7e1 fef1 	bl	8000a20 <__aeabi_dcmpgt>
 801ec3e:	2800      	cmp	r0, #0
 801ec40:	d0be      	beq.n	801ebc0 <floor+0x40>
 801ec42:	2c00      	cmp	r4, #0
 801ec44:	da0a      	bge.n	801ec5c <floor+0xdc>
 801ec46:	2e14      	cmp	r6, #20
 801ec48:	d101      	bne.n	801ec4e <floor+0xce>
 801ec4a:	3401      	adds	r4, #1
 801ec4c:	e006      	b.n	801ec5c <floor+0xdc>
 801ec4e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec52:	2301      	movs	r3, #1
 801ec54:	40b3      	lsls	r3, r6
 801ec56:	441d      	add	r5, r3
 801ec58:	42af      	cmp	r7, r5
 801ec5a:	d8f6      	bhi.n	801ec4a <floor+0xca>
 801ec5c:	ea25 0508 	bic.w	r5, r5, r8
 801ec60:	e7ae      	b.n	801ebc0 <floor+0x40>
 801ec62:	2500      	movs	r5, #0
 801ec64:	462c      	mov	r4, r5
 801ec66:	e7ab      	b.n	801ebc0 <floor+0x40>
 801ec68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ec6c:	e7a8      	b.n	801ebc0 <floor+0x40>
 801ec6e:	bf00      	nop
 801ec70:	8800759c 	.word	0x8800759c
 801ec74:	7e37e43c 	.word	0x7e37e43c
 801ec78:	bff00000 	.word	0xbff00000
 801ec7c:	000fffff 	.word	0x000fffff

0801ec80 <_init>:
 801ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec82:	bf00      	nop
 801ec84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec86:	bc08      	pop	{r3}
 801ec88:	469e      	mov	lr, r3
 801ec8a:	4770      	bx	lr

0801ec8c <_fini>:
 801ec8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec8e:	bf00      	nop
 801ec90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec92:	bc08      	pop	{r3}
 801ec94:	469e      	mov	lr, r3
 801ec96:	4770      	bx	lr
