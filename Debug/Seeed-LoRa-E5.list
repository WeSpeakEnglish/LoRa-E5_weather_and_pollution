
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb88  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  0801ecc0  0801ecc0  0002ecc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801fb88  0801fb88  0002fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc48  0801fc48  000305a4  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc48  0801fc48  0002fc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc50  0801fc50  000305a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fc50  0801fc50  0002fc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc58  0801fc58  0002fc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000005a4  20000000  0801fc5c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000024e8  200005a4  08020200  000305a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a8c  08020200  00032a8c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000305a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004f329  00000000  00000000  000305ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b5a0  00000000  00000000  0007f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e60  00000000  00000000  0008ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000039c8  00000000  00000000  0008ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b11a  00000000  00000000  000926c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004a03e  00000000  00000000  000bd7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9011  00000000  00000000  00107818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e0829  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010524  00000000  00000000  001e087c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200005a4 	.word	0x200005a4
 8000154:	00000000 	.word	0x00000000
 8000158:	0801eca8 	.word	0x0801eca8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200005a8 	.word	0x200005a8
 8000174:	0801eca8 	.word	0x0801eca8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b974 	b.w	800108c <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14d      	bne.n	8000e68 <__udivmoddi4+0xac>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d968      	bls.n	8000ea4 <__udivmoddi4+0xe8>
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	b152      	cbz	r2, 8000dee <__udivmoddi4+0x32>
 8000dd8:	fa01 f302 	lsl.w	r3, r1, r2
 8000ddc:	f1c2 0120 	rsb	r1, r2, #32
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	ea41 0803 	orr.w	r8, r1, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000df2:	0c21      	lsrs	r1, r4, #16
 8000df4:	fbb8 fef5 	udiv	lr, r8, r5
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fb05 831e 	mls	r3, r5, lr, r8
 8000e00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e04:	fb0e f107 	mul.w	r1, lr, r7
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x68>
 8000e0c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e10:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e14:	f080 811e 	bcs.w	8001054 <__udivmoddi4+0x298>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	f240 811b 	bls.w	8001054 <__udivmoddi4+0x298>
 8000e1e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e2c:	fb05 3310 	mls	r3, r5, r0, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb00 f707 	mul.w	r7, r0, r7
 8000e38:	42a7      	cmp	r7, r4
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x96>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e44:	f080 8108 	bcs.w	8001058 <__udivmoddi4+0x29c>
 8000e48:	42a7      	cmp	r7, r4
 8000e4a:	f240 8105 	bls.w	8001058 <__udivmoddi4+0x29c>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	1be4      	subs	r4, r4, r7
 8000e54:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e58:	2100      	movs	r1, #0
 8000e5a:	b11e      	cbz	r6, 8000e64 <__udivmoddi4+0xa8>
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e9c6 4300 	strd	r4, r3, [r6]
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0xc2>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	f000 80ee 	beq.w	800104e <__udivmoddi4+0x292>
 8000e72:	2100      	movs	r1, #0
 8000e74:	e9c6 0500 	strd	r0, r5, [r6]
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	fab3 f183 	clz	r1, r3
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d14a      	bne.n	8000f1c <__udivmoddi4+0x160>
 8000e86:	42ab      	cmp	r3, r5
 8000e88:	d302      	bcc.n	8000e90 <__udivmoddi4+0xd4>
 8000e8a:	4282      	cmp	r2, r0
 8000e8c:	f200 80f9 	bhi.w	8001082 <__udivmoddi4+0x2c6>
 8000e90:	1a84      	subs	r4, r0, r2
 8000e92:	eb65 0303 	sbc.w	r3, r5, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	4698      	mov	r8, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d0e2      	beq.n	8000e64 <__udivmoddi4+0xa8>
 8000e9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ea2:	e7df      	b.n	8000e64 <__udivmoddi4+0xa8>
 8000ea4:	b902      	cbnz	r2, 8000ea8 <__udivmoddi4+0xec>
 8000ea6:	deff      	udf	#255	; 0xff
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	f040 8091 	bne.w	8000fd4 <__udivmoddi4+0x218>
 8000eb2:	eba1 050c 	sub.w	r5, r1, ip
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ec4:	fb07 5013 	mls	r0, r7, r3, r5
 8000ec8:	0c25      	lsrs	r5, r4, #16
 8000eca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ece:	fb0e f003 	mul.w	r0, lr, r3
 8000ed2:	42a8      	cmp	r0, r5
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x12c>
 8000ed6:	eb1c 0505 	adds.w	r5, ip, r5
 8000eda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x12a>
 8000ee0:	42a8      	cmp	r0, r5
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	1a2d      	subs	r5, r5, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ef0:	fb07 5510 	mls	r5, r7, r0, r5
 8000ef4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x156>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x154>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2ca>
 8000f10:	4628      	mov	r0, r5
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f1a:	e79e      	b.n	8000e5a <__udivmoddi4+0x9e>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f2e:	fa05 f301 	lsl.w	r3, r5, r1
 8000f32:	431c      	orrs	r4, r3
 8000f34:	40fd      	lsrs	r5, r7
 8000f36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f42:	0c20      	lsrs	r0, r4, #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fb09 5518 	mls	r5, r9, r8, r5
 8000f4c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f50:	fb08 f00e 	mul.w	r0, r8, lr
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b8>
 8000f5c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2bc>
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2bc>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4465      	add	r5, ip
 8000f74:	1a2d      	subs	r5, r5, r0
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f7c:	fb09 5510 	mls	r5, r9, r0, r5
 8000f80:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f88:	45ae      	cmp	lr, r5
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1e2>
 8000f8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2b4>
 8000f96:	45ae      	cmp	lr, r5
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2b4>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4465      	add	r5, ip
 8000f9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fa6:	eba5 050e 	sub.w	r5, r5, lr
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46a6      	mov	lr, r4
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x2a4>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x2a0>
 8000fb4:	b15e      	cbz	r6, 8000fce <__udivmoddi4+0x212>
 8000fb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fba:	eb65 050e 	sbc.w	r5, r5, lr
 8000fbe:	fa05 f707 	lsl.w	r7, r5, r7
 8000fc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc6:	40cd      	lsrs	r5, r1
 8000fc8:	431f      	orrs	r7, r3
 8000fca:	e9c6 7500 	strd	r7, r5, [r6]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c2 0320 	rsb	r3, r2, #32
 8000fd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe0:	fa25 f303 	lsr.w	r3, r5, r3
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	430d      	orrs	r5, r1
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ff4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ff8:	0c2b      	lsrs	r3, r5, #16
 8000ffa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ffe:	fb01 f00e 	mul.w	r0, r1, lr
 8001002:	4298      	cmp	r0, r3
 8001004:	fa04 f402 	lsl.w	r4, r4, r2
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x260>
 800100a:	eb1c 0303 	adds.w	r3, ip, r3
 800100e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b8>
 8001014:	4298      	cmp	r0, r3
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b8>
 8001018:	3902      	subs	r1, #2
 800101a:	4463      	add	r3, ip
 800101c:	1a1b      	subs	r3, r3, r0
 800101e:	b2ad      	uxth	r5, r5
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3310 	mls	r3, r7, r0, r3
 8001028:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800102c:	fb00 f30e 	mul.w	r3, r0, lr
 8001030:	42ab      	cmp	r3, r5
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x28a>
 8001034:	eb1c 0505 	adds.w	r5, ip, r5
 8001038:	f100 38ff 	add.w	r8, r0, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2b0>
 800103e:	42ab      	cmp	r3, r5
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2b0>
 8001042:	3802      	subs	r0, #2
 8001044:	4465      	add	r5, ip
 8001046:	1aed      	subs	r5, r5, r3
 8001048:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0x104>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e707      	b.n	8000e64 <__udivmoddi4+0xa8>
 8001054:	4686      	mov	lr, r0
 8001056:	e6e5      	b.n	8000e24 <__udivmoddi4+0x68>
 8001058:	4618      	mov	r0, r3
 800105a:	e6fa      	b.n	8000e52 <__udivmoddi4+0x96>
 800105c:	454b      	cmp	r3, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f8>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001068:	3801      	subs	r0, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f8>
 800106c:	4640      	mov	r0, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x28a>
 8001070:	4620      	mov	r0, r4
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1e2>
 8001074:	4641      	mov	r1, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x260>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b8>
 800107c:	3b02      	subs	r3, #2
 800107e:	4465      	add	r5, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x12c>
 8001082:	4608      	mov	r0, r1
 8001084:	e709      	b.n	8000e9a <__udivmoddi4+0xde>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x156>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <CS_Select+0x14>)
 800109c:	f005 f8e4 	bl	8006268 <HAL_GPIO_WritePin>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	48000400 	.word	0x48000400

080010a8 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4802      	ldr	r0, [pc, #8]	; (80010bc <CS_UnSelect+0x14>)
 80010b4:	f005 f8d8 	bl	8006268 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	48000400 	.word	0x48000400

080010c0 <CE_Enable>:


void CE_Enable (void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <CE_Enable+0x14>)
 80010cc:	f005 f8cc 	bl	8006268 <HAL_GPIO_WritePin>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	48000400 	.word	0x48000400

080010d8 <CE_Disable>:

void CE_Disable (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e2:	4802      	ldr	r0, [pc, #8]	; (80010ec <CE_Disable+0x14>)
 80010e4:	f005 f8c0 	bl	8006268 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	48000400 	.word	0x48000400

080010f0 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	460a      	mov	r2, r1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f043 0320 	orr.w	r3, r3, #32
 8001106:	b2db      	uxtb	r3, r3
 8001108:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800110e:	f7ff ffbf 	bl	8001090 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001112:	f7ff ffc9 	bl	80010a8 <CS_UnSelect>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	b2db      	uxtb	r3, r3
 8001136:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001138:	f7ff ffaa 	bl	8001090 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800113c:	f107 0114 	add.w	r1, r7, #20
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	2201      	movs	r2, #1
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <nrf24_WriteRegMulti+0x48>)
 8001146:	f007 fe41 	bl	8008dcc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	b29a      	uxth	r2, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <nrf24_WriteRegMulti+0x48>)
 8001156:	f007 fe39 	bl	8008dcc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800115a:	f7ff ffa5 	bl	80010a8 <CS_UnSelect>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000780 	.word	0x20000780

0800116c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800117a:	f7ff ff89 	bl	8001090 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800117e:	1df9      	adds	r1, r7, #7
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	2201      	movs	r2, #1
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <nrf24_ReadReg+0x3c>)
 8001186:	f007 fe21 	bl	8008dcc <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800118a:	f107 010f 	add.w	r1, r7, #15
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	2201      	movs	r2, #1
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <nrf24_ReadReg+0x3c>)
 8001194:	f007 ffaa 	bl	80090ec <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001198:	f7ff ff86 	bl	80010a8 <CS_UnSelect>

	return data;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000780 	.word	0x20000780

080011ac <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011ba:	f7ff ff69 	bl	8001090 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011be:	f107 010f 	add.w	r1, r7, #15
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	2201      	movs	r2, #1
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <nrf24_ReadReg_Multi+0x3c>)
 80011c8:	f007 fe00 	bl	8008dcc <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <nrf24_ReadReg_Multi+0x3c>)
 80011d8:	f007 ff88 	bl	80090ec <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011dc:	f7ff ff64 	bl	80010a8 <CS_UnSelect>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000780 	.word	0x20000780

080011ec <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011f6:	f7ff ff4b 	bl	8001090 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80011fa:	1df9      	adds	r1, r7, #7
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	2201      	movs	r2, #1
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <nrfsendCmd+0x28>)
 8001202:	f007 fde3 	bl	8008dcc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001206:	f7ff ff4f 	bl	80010a8 <CS_UnSelect>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000780 	.word	0x20000780

08001218 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b07      	cmp	r3, #7
 8001226:	d104      	bne.n	8001232 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8001228:	2100      	movs	r1, #0
 800122a:	2007      	movs	r0, #7
 800122c:	f7ff ff60 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001230:	e090      	b.n	8001354 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b17      	cmp	r3, #23
 8001236:	d104      	bne.n	8001242 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001238:	2111      	movs	r1, #17
 800123a:	2017      	movs	r0, #23
 800123c:	f7ff ff58 	bl	80010f0 <nrf24_WriteReg>
}
 8001240:	e088      	b.n	8001354 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001242:	2108      	movs	r1, #8
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff53 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800124a:	213f      	movs	r1, #63	; 0x3f
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ff4f 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001252:	2103      	movs	r1, #3
 8001254:	2002      	movs	r0, #2
 8001256:	f7ff ff4b 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800125a:	2103      	movs	r1, #3
 800125c:	2003      	movs	r0, #3
 800125e:	f7ff ff47 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8001262:	2103      	movs	r1, #3
 8001264:	2004      	movs	r0, #4
 8001266:	f7ff ff43 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800126a:	2102      	movs	r1, #2
 800126c:	2005      	movs	r0, #5
 800126e:	f7ff ff3f 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001272:	210e      	movs	r1, #14
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff ff3b 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800127a:	2100      	movs	r1, #0
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff ff37 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001282:	2100      	movs	r1, #0
 8001284:	2008      	movs	r0, #8
 8001286:	f7ff ff33 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800128a:	2100      	movs	r1, #0
 800128c:	2009      	movs	r0, #9
 800128e:	f7ff ff2f 	bl	80010f0 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <nrf24_reset+0x144>)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129c:	6018      	str	r0, [r3, #0]
 800129e:	3304      	adds	r3, #4
 80012a0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2205      	movs	r2, #5
 80012a8:	4619      	mov	r1, r3
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff ff38 	bl	8001120 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80012b0:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <nrf24_reset+0x148>)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ba:	6018      	str	r0, [r3, #0]
 80012bc:	3304      	adds	r3, #4
 80012be:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2205      	movs	r2, #5
 80012c6:	4619      	mov	r1, r3
 80012c8:	200b      	movs	r0, #11
 80012ca:	f7ff ff29 	bl	8001120 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80012ce:	21c3      	movs	r1, #195	; 0xc3
 80012d0:	200c      	movs	r0, #12
 80012d2:	f7ff ff0d 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012d6:	21c4      	movs	r1, #196	; 0xc4
 80012d8:	200d      	movs	r0, #13
 80012da:	f7ff ff09 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012de:	21c5      	movs	r1, #197	; 0xc5
 80012e0:	200e      	movs	r0, #14
 80012e2:	f7ff ff05 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012e6:	21c6      	movs	r1, #198	; 0xc6
 80012e8:	200f      	movs	r0, #15
 80012ea:	f7ff ff01 	bl	80010f0 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <nrf24_reset+0x144>)
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f8:	6018      	str	r0, [r3, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2205      	movs	r2, #5
 8001304:	4619      	mov	r1, r3
 8001306:	2010      	movs	r0, #16
 8001308:	f7ff ff0a 	bl	8001120 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	2011      	movs	r0, #17
 8001310:	f7ff feee 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001314:	2100      	movs	r1, #0
 8001316:	2012      	movs	r0, #18
 8001318:	f7ff feea 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	2013      	movs	r0, #19
 8001320:	f7ff fee6 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001324:	2100      	movs	r1, #0
 8001326:	2014      	movs	r0, #20
 8001328:	f7ff fee2 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800132c:	2100      	movs	r1, #0
 800132e:	2015      	movs	r0, #21
 8001330:	f7ff fede 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	2016      	movs	r0, #22
 8001338:	f7ff feda 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800133c:	2111      	movs	r1, #17
 800133e:	2017      	movs	r0, #23
 8001340:	f7ff fed6 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	201c      	movs	r0, #28
 8001348:	f7ff fed2 	bl	80010f0 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	201d      	movs	r0, #29
 8001350:	f7ff fece 	bl	80010f0 <nrf24_WriteReg>
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0801ecc0 	.word	0x0801ecc0
 8001360:	0801ecc8 	.word	0x0801ecc8

08001364 <NRF24_Init>:




void NRF24_Init (void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001368:	f7ff feb6 	bl	80010d8 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff ff53 	bl	8001218 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff febb 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800137a:	2100      	movs	r1, #0
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff feb7 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001382:	2100      	movs	r1, #0
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff feb3 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800138a:	2103      	movs	r1, #3
 800138c:	2003      	movs	r0, #3
 800138e:	f7ff feaf 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001392:	2100      	movs	r1, #0
 8001394:	2004      	movs	r0, #4
 8001396:	f7ff feab 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800139a:	2100      	movs	r1, #0
 800139c:	2005      	movs	r0, #5
 800139e:	f7ff fea7 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80013a2:	210e      	movs	r1, #14
 80013a4:	2006      	movs	r0, #6
 80013a6:	f7ff fea3 	bl	80010f0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013aa:	f7ff fe89 	bl	80010c0 <CE_Enable>

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80013be:	f7ff fe8b 	bl	80010d8 <CE_Disable>

	nrf24_reset (STATUS);
 80013c2:	2007      	movs	r0, #7
 80013c4:	f7ff ff28 	bl	8001218 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	4619      	mov	r1, r3
 80013cc:	2005      	movs	r0, #5
 80013ce:	f7ff fe8f 	bl	80010f0 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff feca 	bl	800116c <nrf24_ReadReg>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	4619      	mov	r1, r3
 80013e8:	2002      	movs	r0, #2
 80013ea:	f7ff fe81 	bl	80010f0 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ee:	2205      	movs	r2, #5
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	200b      	movs	r0, #11
 80013f4:	f7ff fe94 	bl	8001120 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013f8:	21ee      	movs	r1, #238	; 0xee
 80013fa:	200c      	movs	r0, #12
 80013fc:	f7ff fe78 	bl	80010f0 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8001400:	2120      	movs	r1, #32
 8001402:	2013      	movs	r0, #19
 8001404:	f7ff fe74 	bl	80010f0 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff feaf 	bl	800116c <nrf24_ReadReg>
 800140e:	4603      	mov	r3, r0
 8001410:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	f043 0303 	orr.w	r3, r3, #3
 8001418:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	4619      	mov	r1, r3
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff fe66 	bl	80010f0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001424:	f7ff fe4c 	bl	80010c0 <CE_Enable>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001438:	2007      	movs	r0, #7
 800143a:	f7ff fe97 	bl	800116c <nrf24_ReadReg>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00b      	beq.n	8001464 <isDataAvailable+0x34>
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	2007      	movs	r0, #7
 800145c:	f7ff fe48 	bl	80010f0 <nrf24_WriteReg>

		return 1;
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <isDataAvailable+0x36>
	}

	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 800147c:	f7ff fe08 	bl	8001090 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8001480:	2361      	movs	r3, #97	; 0x61
 8001482:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001484:	f107 010f 	add.w	r1, r7, #15
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	2201      	movs	r2, #1
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <NRF24_Receive+0x50>)
 800148e:	f007 fc9d 	bl	8008dcc <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	2220      	movs	r2, #32
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <NRF24_Receive+0x50>)
 800149c:	f007 fe26 	bl	80090ec <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80014a0:	f7ff fe02 	bl	80010a8 <CS_UnSelect>

	HAL_Delay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 fbd5 	bl	8002c54 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80014aa:	23e2      	movs	r3, #226	; 0xe2
 80014ac:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe9b 	bl	80011ec <nrfsendCmd>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000780 	.word	0x20000780

080014c4 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e00c      	b.n	80014ec <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	b2d9      	uxtb	r1, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	18d4      	adds	r4, r2, r3
 80014dc:	4608      	mov	r0, r1
 80014de:	f7ff fe45 	bl	800116c <nrf24_ReadReg>
 80014e2:	4603      	mov	r3, r0
 80014e4:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	ddef      	ble.n	80014d2 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	330a      	adds	r3, #10
 80014f6:	2205      	movs	r2, #5
 80014f8:	4619      	mov	r1, r3
 80014fa:	200a      	movs	r0, #10
 80014fc:	f7ff fe56 	bl	80011ac <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	330f      	adds	r3, #15
 8001504:	2205      	movs	r2, #5
 8001506:	4619      	mov	r1, r3
 8001508:	200b      	movs	r0, #11
 800150a:	f7ff fe4f 	bl	80011ac <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f103 0414 	add.w	r4, r3, #20
 8001514:	200c      	movs	r0, #12
 8001516:	f7ff fe29 	bl	800116c <nrf24_ReadReg>
 800151a:	4603      	mov	r3, r0
 800151c:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f103 0415 	add.w	r4, r3, #21
 8001524:	200d      	movs	r0, #13
 8001526:	f7ff fe21 	bl	800116c <nrf24_ReadReg>
 800152a:	4603      	mov	r3, r0
 800152c:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f103 0416 	add.w	r4, r3, #22
 8001534:	200e      	movs	r0, #14
 8001536:	f7ff fe19 	bl	800116c <nrf24_ReadReg>
 800153a:	4603      	mov	r3, r0
 800153c:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f103 0417 	add.w	r4, r3, #23
 8001544:	200f      	movs	r0, #15
 8001546:	f7ff fe11 	bl	800116c <nrf24_ReadReg>
 800154a:	4603      	mov	r3, r0
 800154c:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3318      	adds	r3, #24
 8001552:	2205      	movs	r2, #5
 8001554:	4619      	mov	r1, r3
 8001556:	200a      	movs	r0, #10
 8001558:	f7ff fe28 	bl	80011ac <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 800155c:	231d      	movs	r3, #29
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	e00e      	b.n	8001580 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3b0c      	subs	r3, #12
 8001568:	b2d9      	uxtb	r1, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	18d4      	adds	r4, r2, r3
 8001570:	4608      	mov	r0, r1
 8001572:	f7ff fdfb 	bl	800116c <nrf24_ReadReg>
 8001576:	4603      	mov	r3, r0
 8001578:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b25      	cmp	r3, #37	; 0x25
 8001584:	dded      	ble.n	8001562 <NRF24_ReadAll+0x9e>
	}

}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800159e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015b4:	68fb      	ldr	r3, [r7, #12]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80015c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d6:	4013      	ands	r3, r2
 80015d8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <MX_ADC_Init+0x94>)
 80015ea:	4a24      	ldr	r2, [pc, #144]	; (800167c <MX_ADC_Init+0x98>)
 80015ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_ADC_Init+0x94>)
 80015f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <MX_ADC_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_ADC_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_ADC_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_ADC_Init+0x94>)
 800160a:	2204      	movs	r2, #4
 800160c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_ADC_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_ADC_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_ADC_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_ADC_Init+0x94>)
 8001622:	2201      	movs	r2, #1
 8001624:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_ADC_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_ADC_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_ADC_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_ADC_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <MX_ADC_Init+0x94>)
 8001644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_ADC_Init+0x94>)
 800164c:	2207      	movs	r2, #7
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_ADC_Init+0x94>)
 8001652:	2207      	movs	r2, #7
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_ADC_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_ADC_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_ADC_Init+0x94>)
 8001666:	f002 fce7 	bl	8004038 <HAL_ADC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001670:	f000 fe2a 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200005c0 	.word	0x200005c0
 800167c:	40012400 	.word	0x40012400

08001680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_ADC_MspInit+0x24>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d103      	bne.n	800169a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001696:	f7ff ff7b 	bl	8001590 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40012400 	.word	0x40012400

080016a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <HAL_ADC_MspDeInit+0x24>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d103      	bne.n	80016c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80016ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016be:	f7ff ff7f 	bl	80015c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012400 	.word	0x40012400

080016d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <SYS_InitMeasurement+0x14>)
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <SYS_InitMeasurement+0x18>)
 80016d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	200005c0 	.word	0x200005c0
 80016e8:	40012400 	.word	0x40012400

080016ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80016fa:	4813      	ldr	r0, [pc, #76]	; (8001748 <SYS_GetBatteryLevel+0x5c>)
 80016fc:	f000 f82a 	bl	8001754 <ADC_ReadChannels>
 8001700:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	80fb      	strh	r3, [r7, #6]
 800170c:	e016      	b.n	800173c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <SYS_GetBatteryLevel+0x60>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001716:	4293      	cmp	r3, r2
 8001718:	d00b      	beq.n	8001732 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <SYS_GetBatteryLevel+0x60>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001724:	fb03 f202 	mul.w	r2, r3, r2
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	80fb      	strh	r3, [r7, #6]
 8001730:	e004      	b.n	800173c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001732:	4a07      	ldr	r2, [pc, #28]	; (8001750 <SYS_GetBatteryLevel+0x64>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800173c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	b4002000 	.word	0xb4002000
 800174c:	1fff75aa 	.word	0x1fff75aa
 8001750:	004c08d8 	.word	0x004c08d8

08001754 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800176c:	f7ff ff3a 	bl	80015e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <ADC_ReadChannels+0x88>)
 8001772:	f003 fa90 	bl	8004c96 <HAL_ADCEx_Calibration_Start>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800177c:	f000 fda4 	bl	80022c8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4619      	mov	r1, r3
 8001792:	4812      	ldr	r0, [pc, #72]	; (80017dc <ADC_ReadChannels+0x88>)
 8001794:	f002 ff9c 	bl	80046d0 <HAL_ADC_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800179e:	f000 fd93 	bl	80022c8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <ADC_ReadChannels+0x88>)
 80017a4:	f002 fe78 	bl	8004498 <HAL_ADC_Start>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80017ae:	f000 fd8b 	bl	80022c8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80017b2:	f04f 31ff 	mov.w	r1, #4294967295
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <ADC_ReadChannels+0x88>)
 80017b8:	f002 fee6 	bl	8004588 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <ADC_ReadChannels+0x88>)
 80017be:	f002 feb1 	bl	8004524 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <ADC_ReadChannels+0x88>)
 80017c4:	f002 ff77 	bl	80046b6 <HAL_ADC_GetValue>
 80017c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <ADC_ReadChannels+0x88>)
 80017cc:	f002 fde8 	bl	80043a0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80017d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200005c0 	.word	0x200005c0

080017e0 <LL_AHB1_GRP1_EnableClock>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001814:	2004      	movs	r0, #4
 8001816:	f7ff ffe3 	bl	80017e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff ffe0 	bl	80017e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2102      	movs	r1, #2
 8001824:	200b      	movs	r0, #11
 8001826:	f003 fbdc 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800182a:	200b      	movs	r0, #11
 800182c:	f003 fbf3 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	200c      	movs	r0, #12
 8001836:	f003 fbd4 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800183a:	200c      	movs	r0, #12
 800183c:	f003 fbeb 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	200d      	movs	r0, #13
 8001846:	f003 fbcc 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800184a:	200d      	movs	r0, #13
 800184c:	f003 fbe3 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	203d      	movs	r0, #61	; 0x3d
 8001856:	f003 fbc4 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800185a:	203d      	movs	r0, #61	; 0x3d
 800185c:	f003 fbdb 	bl	8005016 <HAL_NVIC_EnableIRQ>

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001870:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001874:	d101      	bne.n	800187a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800187a:	2300      	movs	r3, #0
#endif
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	58004000 	.word	0x58004000

08001888 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80018a0:	4b56      	ldr	r3, [pc, #344]	; (80019fc <FLASH_IF_Write+0x174>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0299      	lsls	r1, r3, #10
 80018a6:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <FLASH_IF_Write+0x178>)
 80018a8:	400b      	ands	r3, r1
 80018aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	0adb      	lsrs	r3, r3, #11
 80018b6:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80018c2:	3b01      	subs	r3, #1
 80018c4:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <FLASH_IF_Write+0x174>)
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	0291      	lsls	r1, r2, #10
 80018ca:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <FLASH_IF_Write+0x178>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80018d2:	fb01 f202 	mul.w	r2, r1, r2
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	0adb      	lsrs	r3, r3, #11
 80018da:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <FLASH_IF_Write+0x7a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d104      	bne.n	8001902 <FLASH_IF_Write+0x7a>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001902:	f06f 0304 	mvn.w	r3, #4
 8001906:	e074      	b.n	80019f2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <FLASH_IF_Write+0x17c>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da02      	bge.n	8001916 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001910:	f06f 0303 	mvn.w	r3, #3
 8001914:	e06d      	b.n	80019f2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	d005      	beq.n	800192a <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001924:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e05b      	b.n	80019e8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f8f8 	bl	8001b2a <FLASH_IF_IsEmpty>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d037      	beq.n	80019b0 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001946:	f06f 0304 	mvn.w	r3, #4
 800194a:	e052      	b.n	80019f2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001958:	4619      	mov	r1, r3
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f01b fdc6 	bl	801d4ec <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	6a39      	ldr	r1, [r7, #32]
 800196c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800196e:	b292      	uxth	r2, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f01b fdbb 	bl	801d4ec <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001976:	2200      	movs	r2, #0
 8001978:	2101      	movs	r1, #1
 800197a:	69f8      	ldr	r0, [r7, #28]
 800197c:	f000 f865 	bl	8001a4a <FLASH_IF_EraseByPages>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001986:	f06f 0301 	mvn.w	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 800198c:	e030      	b.n	80019f0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001994:	02db      	lsls	r3, r3, #11
 8001996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f88a 	bl	8001ab6 <FLASH_IF_Write_Buffer>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80019a8:	f06f 0302 	mvn.w	r3, #2
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80019ae:	e01f      	b.n	80019f0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b4:	4619      	mov	r1, r3
 80019b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019b8:	f000 f87d 	bl	8001ab6 <FLASH_IF_Write_Buffer>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80019c2:	f06f 0302 	mvn.w	r3, #2
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80019c8:	e012      	b.n	80019f0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80019ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	4413      	add	r3, r2
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80019d2:	6a3a      	ldr	r2, [r7, #32]
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	4413      	add	r3, r2
 80019d8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d99f      	bls.n	8001930 <FLASH_IF_Write+0xa8>
  }

  return status;
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3730      	adds	r7, #48	; 0x30
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	1fff75e0 	.word	0x1fff75e0
 8001a00:	03fffc00 	.word	0x03fffc00
 8001a04:	58004000 	.word	0x58004000

08001a08 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001a14:	e00b      	b.n	8001a2e <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001a16:	bf00      	nop
 8001a18:	f7ff ff24 	bl	8001864 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1fa      	bne.n	8001a18 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f003 ff8d 	bl	8005948 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a38:	4299      	cmp	r1, r3
 8001a3a:	bf08      	it	eq
 8001a3c:	4290      	cmpeq	r0, r2
 8001a3e:	d1ea      	bne.n	8001a16 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001a40:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b08a      	sub	sp, #40	; 0x28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	460b      	mov	r3, r1
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001a6a:	f107 0318 	add.w	r3, r7, #24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 f908 	bl	8005c84 <HAL_FLASHEx_Erase_IT>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a7a:	e00a      	b.n	8001a92 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001a7c:	f107 0214 	add.w	r2, r7, #20
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 f8a4 	bl	8005bd4 <HAL_FLASHEx_Erase>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <FLASH_IF_EraseByPages+0x62>
 8001a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d101      	bne.n	8001aa6 <FLASH_IF_EraseByPages+0x5c>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e003      	b.n	8001aae <FLASH_IF_EraseByPages+0x64>
 8001aa6:	f06f 0301 	mvn.w	r3, #1
 8001aaa:	e000      	b.n	8001aae <FLASH_IF_EraseByPages+0x64>
 8001aac:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	; 0x28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	e020      	b.n	8001b12 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f01b fd07 	bl	801d4ec <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001ade:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae6:	bf08      	it	eq
 8001ae8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001aec:	d005      	beq.n	8001afa <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001aee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff ff88 	bl	8001a08 <FLASH_IF_Write64>
 8001af8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3308      	adds	r3, #8
 8001afe:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3308      	adds	r3, #8
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	08db      	lsrs	r3, r3, #3
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3d9      	bcc.n	8001ad0 <FLASH_IF_Write_Buffer+0x1a>
 8001b1c:	e000      	b.n	8001b20 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001b1e:	bf00      	nop
    }
  }

  return status;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001b34:	e00a      	b.n	8001b4c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d001      	beq.n	8001b46 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e039      	b.n	8001bba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	e010      	b.n	8001b82 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f103 0208 	add.w	r2, r3, #8
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	bf08      	it	eq
 8001b72:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001b76:	d001      	beq.n	8001b7c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e01e      	b.n	8001bba <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3e9      	bcc.n	8001b60 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001b9a:	e00a      	b.n	8001bb2 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2bff      	cmp	r3, #255	; 0xff
 8001ba6:	d001      	beq.n	8001bac <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e006      	b.n	8001bba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f1      	bne.n	8001b9c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001bb8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff ffdb 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7ff ffd8 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c14:	2004      	movs	r0, #4
 8001c16:	f7ff ffd5 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001c20:	4825      	ldr	r0, [pc, #148]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c22:	f004 fb21 	bl	8006268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4823      	ldr	r0, [pc, #140]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c2c:	f004 fb1c 	bl	8006268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f240 2131 	movw	r1, #561	; 0x231
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f004 fb15 	bl	8006268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001c3e:	2338      	movs	r3, #56	; 0x38
 8001c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c54:	f004 f8da 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001c58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c70:	f004 f8cc 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001c74:	2331      	movs	r3, #49	; 0x31
 8001c76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8c:	f004 f8be 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c96:	2311      	movs	r3, #17
 8001c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001caa:	f004 f8af 	bl	8005e0c <HAL_GPIO_Init>

}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	48000400 	.word	0x48000400

08001cbc <LL_AHB2_GRP1_EnableClock>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <LL_APB1_GRP1_EnableClock>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d10:	68fb      	ldr	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <MX_I2C2_Init+0x78>)
 8001d24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <MX_I2C2_Init+0x7c>)
 8001d2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d56:	480e      	ldr	r0, [pc, #56]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d58:	f004 fab6 	bl	80062c8 <HAL_I2C_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d62:	f000 fab1 	bl	80022c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d66:	2100      	movs	r1, #0
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d6a:	f004 ff9d 	bl	8006ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d74:	f000 faa8 	bl	80022c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_I2C2_Init+0x74>)
 8001d7c:	f004 ffde 	bl	8006d3c <HAL_I2CEx_ConfigDigitalFilter>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f000 fa9f 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000624 	.word	0x20000624
 8001d94:	40005800 	.word	0x40005800
 8001d98:	00707cbb 	.word	0x00707cbb

08001d9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b096      	sub	sp, #88	; 0x58
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2238      	movs	r2, #56	; 0x38
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f01c fe81 	bl	801eac4 <memset>
  if(i2cHandle->Instance==I2C2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_I2C_MspInit+0xb0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d13b      	bne.n	8001e44 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dd0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f006 fa84 	bl	80082e8 <HAL_RCCEx_PeriphCLKConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001de6:	f000 fa6f 	bl	80022c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff ff66 	bl	8001cbc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7ff ff63 	bl	8001cbc <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e04:	2301      	movs	r3, #1
 8001e06:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f003 fff9 	bl	8005e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	2312      	movs	r3, #18
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <HAL_I2C_MspInit+0xb4>)
 8001e38:	f003 ffe8 	bl	8005e0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e3c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e40:	f7ff ff54 	bl	8001cec <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e44:	bf00      	nop
 8001e46:	3758      	adds	r7, #88	; 0x58
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40005800 	.word	0x40005800
 8001e50:	48000400 	.word	0x48000400

08001e54 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f023 0218 	bic.w	r2, r3, #24
 8001e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e86:	f001 fee9 	bl	8003c5c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e8a:	f000 f8ff 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8e:	f7ff feb1 	bl	8001bf4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001e92:	f00b fad7 	bl	800d444 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001e96:	f001 fb05 	bl	80034a4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001e9a:	f7ff ff3f 	bl	8001d1c <MX_I2C2_Init>
  MX_TIM16_Init();
 8001e9e:	f000 ff5b 	bl	8002d58 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001ea2:	f000 ff8d 	bl	8002dc0 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001ea6:	f000 fb73 	bl	8002590 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001eaa:	4b65      	ldr	r3, [pc, #404]	; (8002040 <main+0x1c0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8001eb0:	f7ff fa58 	bl	8001364 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	4863      	ldr	r0, [pc, #396]	; (8002044 <main+0x1c4>)
 8001eb8:	f7ff fa7b 	bl	80013b2 <NRF24_RxMode>

 //  NRF24_TxMode(TxAddress, 10);

   NRF24_ReadAll(data);
 8001ebc:	4862      	ldr	r0, [pc, #392]	; (8002048 <main+0x1c8>)
 8001ebe:	f7ff fb01 	bl	80014c4 <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8001ec2:	f000 fa0d 	bl	80022e0 <F1_QueueIni>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4960      	ldr	r1, [pc, #384]	; (800204c <main+0x1cc>)
 8001eca:	4861      	ldr	r0, [pc, #388]	; (8002050 <main+0x1d0>)
 8001ecc:	f00b f9ef 	bl	800d2ae <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <main+0x1d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <main+0x1d4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f004 f9bd 	bl	8006268 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001eee:	485a      	ldr	r0, [pc, #360]	; (8002058 <main+0x1d8>)
 8001ef0:	f008 fc92 	bl	800a818 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001ef4:	2364      	movs	r3, #100	; 0x64
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <main+0x1dc>)
 8001efc:	2188      	movs	r1, #136	; 0x88
 8001efe:	4858      	ldr	r0, [pc, #352]	; (8002060 <main+0x1e0>)
 8001f00:	f004 fa72 	bl	80063e8 <HAL_I2C_Master_Transmit>
	MeasurePM_sens();
 8001f04:	f000 f96e 	bl	80021e4 <MeasurePM_sens>

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001f08:	f00b faa4 	bl	800d454 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001f0c:	f000 fa2c 	bl	8002368 <F1_pull>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4798      	blx	r3




    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001f14:	2364      	movs	r3, #100	; 0x64
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2306      	movs	r3, #6
 8001f1a:	4a52      	ldr	r2, [pc, #328]	; (8002064 <main+0x1e4>)
 8001f1c:	2188      	movs	r1, #136	; 0x88
 8001f1e:	4850      	ldr	r0, [pc, #320]	; (8002060 <main+0x1e0>)
 8001f20:	f004 fb56 	bl	80065d0 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <main+0x1e4>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <main+0x1e4>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <main+0x1e8>)
 8001f3a:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001f3c:	4b49      	ldr	r3, [pc, #292]	; (8002064 <main+0x1e4>)
 8001f3e:	78db      	ldrb	r3, [r3, #3]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <main+0x1e4>)
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b46      	ldr	r3, [pc, #280]	; (800206c <main+0x1ec>)
 8001f52:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001f54:	4b44      	ldr	r3, [pc, #272]	; (8002068 <main+0x1e8>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fe99 	bl	8000c90 <__aeabi_ui2f>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa75 	bl	8000450 <__aeabi_f2d>
 8001f66:	a332      	add	r3, pc, #200	; (adr r3, 8002030 <main+0x1b0>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fac8 	bl	8000500 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	a32f      	add	r3, pc, #188	; (adr r3, 8002038 <main+0x1b8>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fbe9 	bl	8000754 <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4b38      	ldr	r3, [pc, #224]	; (8002070 <main+0x1f0>)
 8001f90:	f7fe f8fe 	bl	8000190 <__aeabi_dsub>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fd72 	bl	8000a84 <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a34      	ldr	r2, [pc, #208]	; (8002074 <main+0x1f4>)
 8001fa4:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <main+0x1ec>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe70 	bl	8000c90 <__aeabi_ui2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fa4c 	bl	8000450 <__aeabi_f2d>
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <main+0x1f8>)
 8001fbe:	f7fe fa9f 	bl	8000500 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	a31b      	add	r3, pc, #108	; (adr r3, 8002038 <main+0x1b8>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fbc0 	bl	8000754 <__aeabi_ddiv>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <main+0x1fc>)
 8001fe2:	f7fe f8d5 	bl	8000190 <__aeabi_dsub>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fd49 	bl	8000a84 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <main+0x200>)
 8001ff6:	6013      	str	r3, [r2, #0]


    if (isDataAvailable(2) == 1)
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7ff fa19 	bl	8001430 <isDataAvailable>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10d      	bne.n	8002020 <main+0x1a0>
   	  {
   		  NRF24_Receive(RxData);
 8002004:	481f      	ldr	r0, [pc, #124]	; (8002084 <main+0x204>)
 8002006:	f7ff fa33 	bl	8001470 <NRF24_Receive>
   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 800200a:	481e      	ldr	r0, [pc, #120]	; (8002084 <main+0x204>)
 800200c:	f7fe f8b4 	bl	8000178 <strlen>
 8002010:	4603      	mov	r3, r0
 8002012:	b29a      	uxth	r2, r3
 8002014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002018:	491a      	ldr	r1, [pc, #104]	; (8002084 <main+0x204>)
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <main+0x1d0>)
 800201c:	f008 fe7a 	bl	800ad14 <HAL_UART_Transmit>
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8002020:	2120      	movs	r1, #32
 8002022:	4819      	ldr	r0, [pc, #100]	; (8002088 <main+0x208>)
 8002024:	f004 f937 	bl	8006296 <HAL_GPIO_TogglePin>
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8002028:	e764      	b.n	8001ef4 <main+0x74>
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w
 8002030:	00000000 	.word	0x00000000
 8002034:	4065e000 	.word	0x4065e000
 8002038:	00000000 	.word	0x00000000
 800203c:	40efffe0 	.word	0x40efffe0
 8002040:	20000010 	.word	0x20000010
 8002044:	20000004 	.word	0x20000004
 8002048:	200006c0 	.word	0x200006c0
 800204c:	20000670 	.word	0x20000670
 8002050:	2000092c 	.word	0x2000092c
 8002054:	20000a7c 	.word	0x20000a7c
 8002058:	200007fc 	.word	0x200007fc
 800205c:	20000009 	.word	0x20000009
 8002060:	20000624 	.word	0x20000624
 8002064:	200006f4 	.word	0x200006f4
 8002068:	200006fa 	.word	0x200006fa
 800206c:	200006fc 	.word	0x200006fc
 8002070:	40468000 	.word	0x40468000
 8002074:	20000694 	.word	0x20000694
 8002078:	405f4000 	.word	0x405f4000
 800207c:	40180000 	.word	0x40180000
 8002080:	20000698 	.word	0x20000698
 8002084:	200006a0 	.word	0x200006a0
 8002088:	48000400 	.word	0x48000400

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b09a      	sub	sp, #104	; 0x68
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	2248      	movs	r2, #72	; 0x48
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f01c fd12 	bl	801eac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	f107 0308 	add.w	r3, r7, #8
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020b2:	f004 fe8f 	bl	8006dd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fecc 	bl	8001e54 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <SystemClock_Config+0xb8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <SystemClock_Config+0xb8>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <SystemClock_Config+0xb8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020d8:	2307      	movs	r3, #7
 80020da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80020dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020e2:	2381      	movs	r3, #129	; 0x81
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ec:	2340      	movs	r3, #64	; 0x40
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	f107 0320 	add.w	r3, r7, #32
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f9b5 	bl	800746c <HAL_RCC_OscConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002108:	f000 f8de 	bl	80022c8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800210c:	234f      	movs	r3, #79	; 0x4f
 800210e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002110:	2302      	movs	r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f005 fd3a 	bl	8007ba4 <HAL_RCC_ClockConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002136:	f000 f8c7 	bl	80022c8 <Error_Handler>
  }
}
 800213a:	bf00      	nop
 800213c:	3768      	adds	r7, #104	; 0x68
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58000400 	.word	0x58000400

08002148 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_UARTEx_RxEventCallback+0x60>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11e      	bne.n	800219c <HAL_UARTEx_RxEventCallback+0x54>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_UARTEx_RxEventCallback+0x64>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b42      	cmp	r3, #66	; 0x42
 8002164:	d117      	bne.n	8002196 <HAL_UARTEx_RxEventCallback+0x4e>
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_UARTEx_RxEventCallback+0x64>)
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	2b4d      	cmp	r3, #77	; 0x4d
 800216c:	d113      	bne.n	8002196 <HAL_UARTEx_RxEventCallback+0x4e>
		//memcpy(mainBuffer,aRXBufferUser,Size);
		if((aRXBufferUser[30]<<8) + aRXBufferUser[31])
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_UARTEx_RxEventCallback+0x64>)
 8002170:	7f9b      	ldrb	r3, [r3, #30]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_UARTEx_RxEventCallback+0x64>)
 8002176:	7fd2      	ldrb	r2, [r2, #31]
 8002178:	4413      	add	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_UARTEx_RxEventCallback+0x4e>
			PM2_5 = aRXBufferUser[6]*256+aRXBufferUser[7];
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_UARTEx_RxEventCallback+0x64>)
 8002180:	799b      	ldrb	r3, [r3, #6]
 8002182:	b29b      	uxth	r3, r3
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_UARTEx_RxEventCallback+0x64>)
 800218a:	79db      	ldrb	r3, [r3, #7]
 800218c:	b29b      	uxth	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_UARTEx_RxEventCallback+0x68>)
 8002194:	801a      	strh	r2, [r3, #0]


		}
		UART2_SET =1;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]

	}
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40004400 	.word	0x40004400
 80021ac:	20000670 	.word	0x20000670
 80021b0:	20000690 	.word	0x20000690
 80021b4:	20000010 	.word	0x20000010

080021b8 <EnablePM_sens>:

void EnablePM_sens(void){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f004 f84f 	bl	8006268 <HAL_GPIO_WritePin>

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}

080021ce <DisablePM_sens>:

void DisablePM_sens(void){
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021dc:	f004 f844 	bl	8006268 <HAL_GPIO_WritePin>


}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <MeasurePM_sens>:

void MeasurePM_sens(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

	if(PM_measure_flag){
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MeasurePM_sens+0x30>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <MeasurePM_sens+0x2c>
	       UART2_SET = 0;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MeasurePM_sens+0x34>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
	       HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80021f6:	2220      	movs	r2, #32
 80021f8:	4908      	ldr	r1, [pc, #32]	; (800221c <MeasurePM_sens+0x38>)
 80021fa:	4809      	ldr	r0, [pc, #36]	; (8002220 <MeasurePM_sens+0x3c>)
 80021fc:	f00b f857 	bl	800d2ae <HAL_UARTEx_ReceiveToIdle_DMA>
		   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MeasurePM_sens+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MeasurePM_sens+0x40>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	601a      	str	r2, [r3, #0]


	     }
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000000 	.word	0x20000000
 8002218:	20000010 	.word	0x20000010
 800221c:	20000670 	.word	0x20000670
 8002220:	2000092c 	.word	0x2000092c
 8002224:	20000a7c 	.word	0x20000a7c

08002228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d134      	bne.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
   {
	  counter++;
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002240:	6013      	str	r3, [r2, #0]
      switch(counter){
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800224a:	d014      	beq.n	8002276 <HAL_TIM_PeriodElapsedCallback+0x4e>
 800224c:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8002250:	dc17      	bgt.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8002252:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002256:	d003      	beq.n	8002260 <HAL_TIM_PeriodElapsedCallback+0x38>
 8002258:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800225c:	d004      	beq.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x40>
 800225e:	e010      	b.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 820:
    	  F1_push(EnablePM_sens);
 8002260:	4814      	ldr	r0, [pc, #80]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002262:	f000 f84d 	bl	8002300 <F1_push>

    	  break;
 8002266:	e00c      	b.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 840:
     	  PM_measure_flag = 1;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
    	  F1_push(MeasurePM_sens);
 800226e:	4813      	ldr	r0, [pc, #76]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002270:	f000 f846 	bl	8002300 <F1_push>
    	  break;
 8002274:	e005      	b.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 860:
    	  F1_push(DisablePM_sens);
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002278:	f000 f842 	bl	8002300 <F1_push>
    	  PM_measure_flag = 0;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
      }

      counter %= 900;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002288:	fb82 1203 	smull	r1, r2, r2, r3
 800228c:	441a      	add	r2, r3
 800228e:	1251      	asrs	r1, r2, #9
 8002290:	17da      	asrs	r2, r3, #31
 8002292:	1a8a      	subs	r2, r1, r2
 8002294:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002298:	fb01 f202 	mul.w	r2, r1, r2
 800229c:	1a9a      	subs	r2, r3, r2
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022a0:	601a      	str	r2, [r3, #0]
   }
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200007fc 	.word	0x200007fc
 80022b0:	2000069c 	.word	0x2000069c
 80022b4:	080021b9 	.word	0x080021b9
 80022b8:	20000000 	.word	0x20000000
 80022bc:	080021e5 	.word	0x080021e5
 80022c0:	080021cf 	.word	0x080021cf
 80022c4:	91a2b3c5 	.word	0x91a2b3c5

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <Error_Handler+0x8>

080022d2 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
	...

080022e0 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  F1_last = 0;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <F1_QueueIni+0x18>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <F1_QueueIni+0x1c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000700 	.word	0x20000700
 80022fc:	20000704 	.word	0x20000704

08002300 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <F1_push+0x5c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	425a      	negs	r2, r3
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	f002 020f 	and.w	r2, r2, #15
 8002318:	bf58      	it	pl
 800231a:	4253      	negpl	r3, r2
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <F1_push+0x60>)
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <F1_push+0x28>
 8002324:	2301      	movs	r3, #1
 8002326:	e014      	b.n	8002352 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <F1_push+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	490b      	ldr	r1, [pc, #44]	; (800235c <F1_push+0x5c>)
 8002330:	600a      	str	r2, [r1, #0]
 8002332:	490c      	ldr	r1, [pc, #48]	; (8002364 <F1_push+0x64>)
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <F1_push+0x5c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	425a      	negs	r2, r3
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	f002 020f 	and.w	r2, r2, #15
 8002348:	bf58      	it	pl
 800234a:	4253      	negpl	r3, r2
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <F1_push+0x5c>)
 800234e:	6013      	str	r3, [r2, #0]
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000700 	.word	0x20000700
 8002360:	20000704 	.word	0x20000704
 8002364:	20000708 	.word	0x20000708

08002368 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <F1_pull+0x4c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <F1_pull+0x50>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d101      	bne.n	800237e <F1_pull+0x16>
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <F1_pull+0x54>)
 800237c:	e014      	b.n	80023a8 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <F1_pull+0x50>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <F1_pull+0x50>)
 8002386:	600a      	str	r2, [r1, #0]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <F1_pull+0x58>)
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <F1_pull+0x50>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	425a      	negs	r2, r3
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	f002 020f 	and.w	r2, r2, #15
 800239e:	bf58      	it	pl
 80023a0:	4253      	negpl	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <F1_pull+0x50>)
 80023a4:	6013      	str	r3, [r2, #0]
  return pullVar;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000700 	.word	0x20000700
 80023b8:	20000704 	.word	0x20000704
 80023bc:	080022d3 	.word	0x080022d3
 80023c0:	20000708 	.word	0x20000708

080023c4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <LL_APB1_GRP1_EnableClock>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002408:	68fb      	ldr	r3, [r7, #12]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	222c      	movs	r2, #44	; 0x2c
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f01c fb4f 	bl	801eac4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <MX_RTC_Init+0xa0>)
 800242a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <MX_RTC_Init+0x9c>)
 800242e:	221f      	movs	r2, #31
 8002430:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_RTC_Init+0x9c>)
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800244a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_RTC_Init+0x9c>)
 800244e:	2200      	movs	r2, #0
 8002450:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_RTC_Init+0x9c>)
 8002454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800245a:	4815      	ldr	r0, [pc, #84]	; (80024b0 <MX_RTC_Init+0x9c>)
 800245c:	f006 f85e 	bl	800851c <HAL_RTC_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002466:	f7ff ff2f 	bl	80022c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800246a:	4811      	ldr	r0, [pc, #68]	; (80024b0 <MX_RTC_Init+0x9c>)
 800246c:	f006 fb4c 	bl	8008b08 <HAL_RTCEx_SetSSRU_IT>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002476:	f7ff ff27 	bl	80022c8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002486:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800248a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800248c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_RTC_Init+0x9c>)
 800249a:	f006 f8b9 	bl	8008610 <HAL_RTC_SetAlarm_IT>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80024a4:	f7ff ff10 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	3730      	adds	r7, #48	; 0x30
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000748 	.word	0x20000748
 80024b4:	40002800 	.word	0x40002800

080024b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	2238      	movs	r2, #56	; 0x38
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f01c fafb 	bl	801eac4 <memset>
  if(rtcHandle->Instance==RTC)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_RTC_MspInit+0x74>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d125      	bne.n	8002524 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	4618      	mov	r0, r3
 80024ea:	f005 fefd 	bl	80082e8 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80024f4:	f7ff fee8 	bl	80022c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024f8:	f7ff ff64 	bl	80023c4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80024fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002500:	f7ff ff70 	bl	80023e4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2002      	movs	r0, #2
 800250a:	f002 fd6a 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800250e:	2002      	movs	r0, #2
 8002510:	f002 fd81 	bl	8005016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	202a      	movs	r0, #42	; 0x2a
 800251a:	f002 fd62 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800251e:	202a      	movs	r0, #42	; 0x2a
 8002520:	f002 fd79 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002524:	bf00      	nop
 8002526:	3740      	adds	r7, #64	; 0x40
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40002800 	.word	0x40002800

08002530 <LL_AHB2_GRP1_EnableClock>:
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800253e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4313      	orrs	r3, r2
 8002546:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_APB1_GRP1_EnableClock>:
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_SPI2_Init+0x74>)
 8002596:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <MX_SPI2_Init+0x78>)
 8002598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_SPI2_Init+0x74>)
 800259c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_SPI2_Init+0x74>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_SPI2_Init+0x74>)
 80025aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_SPI2_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <MX_SPI2_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_SPI2_Init+0x74>)
 80025be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_SPI2_Init+0x74>)
 80025c6:	2218      	movs	r2, #24
 80025c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_SPI2_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_SPI2_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_SPI2_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_SPI2_Init+0x74>)
 80025de:	2207      	movs	r2, #7
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_SPI2_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_SPI2_Init+0x74>)
 80025ea:	2208      	movs	r2, #8
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_SPI2_Init+0x74>)
 80025f0:	f006 fb18 	bl	8008c24 <HAL_SPI_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025fa:	f7ff fe65 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000780 	.word	0x20000780
 8002608:	40003800 	.word	0x40003800

0800260c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b096      	sub	sp, #88	; 0x58
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	2238      	movs	r2, #56	; 0x38
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f01c fa49 	bl	801eac4 <memset>
  if(spiHandle->Instance==SPI2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_SPI_MspInit+0xb0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d13b      	bne.n	80026b4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800263c:	2310      	movs	r3, #16
 800263e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	4618      	mov	r0, r3
 800264c:	f005 fe4c 	bl	80082e8 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002656:	f7ff fe37 	bl	80022c8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800265a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800265e:	f7ff ff7f 	bl	8002560 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2002      	movs	r0, #2
 8002664:	f7ff ff64 	bl	8002530 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff ff61 	bl	8002530 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800266e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002680:	2305      	movs	r3, #5
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002688:	4619      	mov	r1, r3
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <HAL_SPI_MspInit+0xb4>)
 800268c:	f003 fbbe 	bl	8005e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a2:	2305      	movs	r3, #5
 80026a4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b0:	f003 fbac 	bl	8005e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80026b4:	bf00      	nop
 80026b6:	3758      	adds	r7, #88	; 0x58
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40003800 	.word	0x40003800
 80026c0:	48000400 	.word	0x48000400

080026c4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	58000400 	.word	0x58000400

080026dc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80026f8:	f001 fad0 	bl	8003c9c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80026fc:	f7ff ffe2 	bl	80026c4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002700:	2001      	movs	r0, #1
 8002702:	f004 fbf9 	bl	8006ef8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}

0800270a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800270e:	f001 fad3 	bl	8003cb8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002712:	f001 f941 	bl	8003998 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}

0800271a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800271e:	f001 fabd 	bl	8003c9c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002722:	2101      	movs	r1, #1
 8002724:	2000      	movs	r0, #0
 8002726:	f004 fb63 	bl	8006df0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}

0800272e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002732:	f001 fac1 	bl	8003cb8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800274a:	e7fe      	b.n	800274a <NMI_Handler+0x4>

0800274c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <HardFault_Handler+0x4>

08002752 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <MemManage_Handler+0x4>

08002758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <BusFault_Handler+0x4>

0800275e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <UsageFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800279a:	f006 f9f1 	bl	8008b80 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000748 	.word	0x20000748

080027a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <DMA1_Channel1_IRQHandler+0x10>)
 80027ae:	f002 fec9 	bl	8005544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200009bc 	.word	0x200009bc

080027bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <DMA1_Channel2_IRQHandler+0x10>)
 80027c2:	f002 febf 	bl	8005544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000a1c 	.word	0x20000a1c

080027d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <DMA1_Channel3_IRQHandler+0x10>)
 80027d6:	f002 feb5 	bl	8005544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000a7c 	.word	0x20000a7c

080027e4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <TIM16_IRQHandler+0x18>)
 80027ea:	f008 f861 	bl	800a8b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <TIM16_IRQHandler+0x1c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a02      	ldr	r2, [pc, #8]	; (8002800 <TIM16_IRQHandler+0x1c>)
 80027f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200007fc 	.word	0x200007fc
 8002800:	200007e4 	.word	0x200007e4

08002804 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <TIM17_IRQHandler+0x18>)
 800280a:	f008 f851 	bl	800a8b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <TIM17_IRQHandler+0x1c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	4a02      	ldr	r2, [pc, #8]	; (8002820 <TIM17_IRQHandler+0x1c>)
 8002816:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000848 	.word	0x20000848
 8002820:	200007e8 	.word	0x200007e8

08002824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <USART1_IRQHandler+0x10>)
 800282a:	f008 fbf1 	bl	800b010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000089c 	.word	0x2000089c

08002838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <USART2_IRQHandler+0x10>)
 800283e:	f008 fbe7 	bl	800b010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000092c 	.word	0x2000092c

0800284c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <RTC_Alarm_IRQHandler+0x10>)
 8002852:	f006 f845 	bl	80088e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000748 	.word	0x20000748

08002860 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002866:	f007 fde1 	bl	800a42c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200007ec 	.word	0x200007ec

08002874 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <DMAMUX1_OVR_IRQHandler+0x10>)
 800287a:	f003 f813 	bl	80058a4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000a1c 	.word	0x20000a1c

08002888 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4313      	orrs	r3, r2
 800289e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <MX_SUBGHZ_Init+0x20>)
 80028be:	2208      	movs	r2, #8
 80028c0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <MX_SUBGHZ_Init+0x20>)
 80028c4:	f007 fb36 	bl	8009f34 <HAL_SUBGHZ_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80028ce:	f7ff fcfb 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200007ec 	.word	0x200007ec

080028dc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7ff ffcf 	bl	8002888 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2032      	movs	r0, #50	; 0x32
 80028f0:	f002 fb77 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80028f4:	2032      	movs	r0, #50	; 0x32
 80028f6:	f002 fb8e 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800292c:	4b02      	ldr	r3, [pc, #8]	; (8002938 <LL_FLASH_GetUDN+0x10>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	1fff7580 	.word	0x1fff7580

0800293c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <LL_FLASH_GetDeviceID+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	1fff7584 	.word	0x1fff7584

08002954 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <LL_FLASH_GetSTCompanyID+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0a1b      	lsrs	r3, r3, #8
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	1fff7584 	.word	0x1fff7584

0800296c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002970:	2000      	movs	r0, #0
 8002972:	f7ff ffc6 	bl	8002902 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002976:	f01b fb4b 	bl	801e010 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <SystemApp_Init+0x50>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002980:	f000 f988 	bl	8002c94 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002984:	f01b fdd4 	bl	801e530 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <SystemApp_Init+0x54>)
 800298a:	f01b fe7f 	bl	801e68c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <SystemApp_Init+0x58>)
 8002990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002994:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002996:	2002      	movs	r0, #2
 8002998:	f01b fe86 	bl	801e6a8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800299c:	f7fe fe98 	bl	80016d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80029a0:	f000 f9b0 	bl	8002d04 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80029a4:	f01a fcfc 	bl	801d3a0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029a8:	2101      	movs	r1, #1
 80029aa:	2001      	movs	r0, #1
 80029ac:	f01a fd38 	bl	801d420 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029b0:	2101      	movs	r1, #1
 80029b2:	2001      	movs	r0, #1
 80029b4:	f01a fd04 	bl	801d3c0 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200007f8 	.word	0x200007f8
 80029c0:	08002b8d 	.word	0x08002b8d
 80029c4:	58004000 	.word	0x58004000

080029c8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80029cc:	f01a fd58 	bl	801d480 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80029de:	f7fe fe85 	bl	80016ec <SYS_GetBatteryLevel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d902      	bls.n	80029f6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80029f0:	23fe      	movs	r3, #254	; 0xfe
 80029f2:	71fb      	strb	r3, [r7, #7]
 80029f4:	e014      	b.n	8002a20 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80029f6:	88bb      	ldrh	r3, [r7, #4]
 80029f8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80029fc:	d202      	bcs.n	8002a04 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	71fb      	strb	r3, [r7, #7]
 8002a02:	e00d      	b.n	8002a20 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002a04:	88bb      	ldrh	r3, [r7, #4]
 8002a06:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	01db      	lsls	r3, r3, #7
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <GetBatteryLevel+0x58>)
 8002a18:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1c:	09db      	lsrs	r3, r3, #7
 8002a1e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002a20:	79fb      	ldrb	r3, [r7, #7]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	1b4e81b5 	.word	0x1b4e81b5

08002a30 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f937 	bl	8002cb0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f97b 	bl	8000d40 <__aeabi_f2iz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002a4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002a5a:	b590      	push	{r4, r7, lr}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002a66:	f7ff ff5f 	bl	8002928 <LL_FLASH_GetUDN>
 8002a6a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d138      	bne.n	8002ae6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002a74:	f001 f92e 	bl	8003cd4 <HAL_GetUIDw0>
 8002a78:	4604      	mov	r4, r0
 8002a7a:	f001 f93f 	bl	8003cfc <HAL_GetUIDw2>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4423      	add	r3, r4
 8002a82:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002a84:	f001 f930 	bl	8003ce8 <HAL_GetUIDw1>
 8002a88:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	0e1a      	lsrs	r2, r3, #24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3307      	adds	r3, #7
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	0c1a      	lsrs	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3306      	adds	r3, #6
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	0a1a      	lsrs	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3305      	adds	r3, #5
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	0e1a      	lsrs	r2, r3, #24
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3303      	adds	r3, #3
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	0c1a      	lsrs	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3302      	adds	r3, #2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	0a1a      	lsrs	r2, r3, #8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002ae4:	e031      	b.n	8002b4a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3307      	adds	r3, #7
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	0a1a      	lsrs	r2, r3, #8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3306      	adds	r3, #6
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	0c1a      	lsrs	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3305      	adds	r3, #5
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0e1a      	lsrs	r2, r3, #24
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002b14:	f7ff ff12 	bl	800293c <LL_FLASH_GetDeviceID>
 8002b18:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002b24:	f7ff ff16 	bl	8002954 <LL_FLASH_GetSTCompanyID>
 8002b28:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	0a1a      	lsrs	r2, r3, #8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	701a      	strb	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}

08002b52 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8002b52:	b590      	push	{r4, r7, lr}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002b5c:	f7ff fee4 	bl	8002928 <LL_FLASH_GetUDN>
 8002b60:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d10b      	bne.n	8002b82 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002b6a:	f001 f8b3 	bl	8003cd4 <HAL_GetUIDw0>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	f001 f8ba 	bl	8003ce8 <HAL_GetUIDw1>
 8002b74:	4603      	mov	r3, r0
 8002b76:	405c      	eors	r4, r3
 8002b78:	f001 f8c0 	bl	8003cfc <HAL_GetUIDw2>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4063      	eors	r3, r4
 8002b80:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002b82:	687b      	ldr	r3, [r7, #4]

}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f01a fd80 	bl	801d6a0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <TimestampNow+0x3c>)
 8002baa:	2110      	movs	r1, #16
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f81d 	bl	8002bec <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd fae0 	bl	8000178 <strlen>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	0801ecd0 	.word	0x0801ecd0

08002bcc <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	f01a fbf4 	bl	801d3c0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002be0:	2100      	movs	r1, #0
 8002be2:	2002      	movs	r0, #2
 8002be4:	f01a fbec 	bl	801d3c0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}

08002bec <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002bec:	b40c      	push	{r2, r3}
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002bf8:	f107 031c 	add.w	r3, r7, #28
 8002bfc:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f01a ff1d 	bl	801da44 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c14:	b002      	add	sp, #8
 8002c16:	4770      	bx	lr

08002c18 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_GetTick+0x24>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002c3e:	f000 f9dd 	bl	8002ffc <TIMER_IF_GetTimerValue>
 8002c42:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002c44:	687b      	ldr	r3, [r7, #4]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200007f8 	.word	0x200007f8

08002c54 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fa53 	bl	800310a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c7a:	4905      	ldr	r1, [pc, #20]	; (8002c90 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	58000800 	.word	0x58000800

08002c94 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002c98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c9c:	f7ff ffe6 	bl	8002c6c <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002ca0:	f001 f836 	bl	8003d10 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002ca4:	f001 f83a 	bl	8003d1c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002ca8:	f001 f83e 	bl	8003d28 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <EnvSensors_Read+0x40>)
 8002cba:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <EnvSensors_Read+0x44>)
 8002cbe:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <EnvSensors_Read+0x48>)
 8002cc2:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <EnvSensors_Read+0x4c>)
 8002cda:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <EnvSensors_Read+0x50>)
 8002ce0:	611a      	str	r2, [r3, #16]

  return 0;
 8002ce2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	42480000 	.word	0x42480000
 8002cf4:	41900000 	.word	0x41900000
 8002cf8:	447a0000 	.word	0x447a0000
 8002cfc:	003e090d 	.word	0x003e090d
 8002d00:	000503ab 	.word	0x000503ab

08002d04 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002d0e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <LL_APB2_GRP1_EnableClock>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4013      	ands	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
	...

08002d58 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d5e:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <MX_TIM16_Init+0x64>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d72:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002d76:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d8a:	480b      	ldr	r0, [pc, #44]	; (8002db8 <MX_TIM16_Init+0x60>)
 8002d8c:	f007 fcec 	bl	800a768 <HAL_TIM_Base_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002d96:	f7ff fa97 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002d9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d9e:	f7ff ffc2 	bl	8002d26 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	201c      	movs	r0, #28
 8002da8:	f002 f91b 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002dac:	201c      	movs	r0, #28
 8002dae:	f002 f932 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200007fc 	.word	0x200007fc
 8002dbc:	40014400 	.word	0x40014400

08002dc0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002dc6:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <MX_TIM17_Init+0x60>)
 8002dc8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ddc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002df0:	480a      	ldr	r0, [pc, #40]	; (8002e1c <MX_TIM17_Init+0x5c>)
 8002df2:	f007 fcb9 	bl	800a768 <HAL_TIM_Base_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002dfc:	f7ff fa64 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002e00:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e04:	f7ff ff8f 	bl	8002d26 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	201d      	movs	r0, #29
 8002e0e:	f002 f8e8 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e12:	201d      	movs	r0, #29
 8002e14:	f002 f8ff 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000848 	.word	0x20000848
 8002e20:	40014800 	.word	0x40014800

08002e24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_TIM_Base_MspInit+0x58>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10c      	bne.n	8002e50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e3a:	f7ff ff74 	bl	8002d26 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	201c      	movs	r0, #28
 8002e44:	f002 f8cd 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002e48:	201c      	movs	r0, #28
 8002e4a:	f002 f8e4 	bl	8005016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002e4e:	e010      	b.n	8002e72 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <HAL_TIM_Base_MspInit+0x5c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10b      	bne.n	8002e72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e5e:	f7ff ff62 	bl	8002d26 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	201d      	movs	r0, #29
 8002e68:	f002 f8bb 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e6c:	201d      	movs	r0, #29
 8002e6e:	f002 f8d2 	bl	8005016 <HAL_NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
	...

08002e9c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <TIMER_IF_Init+0x5c>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01b      	beq.n	8002eec <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <TIMER_IF_Init+0x60>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ebc:	f7ff faaa 	bl	8002414 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002ec0:	f000 f856 	bl	8002f70 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec8:	480c      	ldr	r0, [pc, #48]	; (8002efc <TIMER_IF_Init+0x60>)
 8002eca:	f005 fcad 	bl	8008828 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <TIMER_IF_Init+0x60>)
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002ed6:	4809      	ldr	r0, [pc, #36]	; (8002efc <TIMER_IF_Init+0x60>)
 8002ed8:	f005 fde4 	bl	8008aa4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f000 f9d3 	bl	8003288 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002ee2:	f000 f85f 	bl	8002fa4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <TIMER_IF_Init+0x5c>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002eec:	79fb      	ldrb	r3, [r7, #7]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000894 	.word	0x20000894
 8002efc:	20000748 	.word	0x20000748

08002f00 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08e      	sub	sp, #56	; 0x38
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	222c      	movs	r2, #44	; 0x2c
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f01b fdd4 	bl	801eac4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002f1c:	f000 f828 	bl	8002f70 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <TIMER_IF_StartTimer+0x68>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002f38:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f3c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4807      	ldr	r0, [pc, #28]	; (8002f6c <TIMER_IF_StartTimer+0x6c>)
 8002f4e:	f005 fb5f 	bl	8008610 <HAL_RTC_SetAlarm_IT>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002f58:	f7ff f9b6 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3738      	adds	r7, #56	; 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000898 	.word	0x20000898
 8002f6c:	20000748 	.word	0x20000748

08002f70 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <TIMER_IF_StopTimer+0x2c>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f84:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <TIMER_IF_StopTimer+0x30>)
 8002f86:	f005 fc4f 	bl	8008828 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <TIMER_IF_StopTimer+0x30>)
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002f92:	79fb      	ldrb	r3, [r7, #7]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40002800 	.word	0x40002800
 8002fa0:	20000748 	.word	0x20000748

08002fa4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002fa8:	f000 f98e 	bl	80032c8 <GetTimerTicks>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <TIMER_IF_SetTimerContext+0x18>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002fb2:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <TIMER_IF_SetTimerContext+0x18>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000898 	.word	0x20000898

08002fc0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <TIMER_IF_GetTimerContext+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000898 	.word	0x20000898

08002fd4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002fde:	f000 f973 	bl	80032c8 <GetTimerTicks>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002fec:	687b      	ldr	r3, [r7, #4]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000898 	.word	0x20000898

08002ffc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <TIMER_IF_GetTimerValue+0x24>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800300e:	f000 f95b 	bl	80032c8 <GetTimerTicks>
 8003012:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000894 	.word	0x20000894

08003024 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800302e:	2303      	movs	r3, #3
 8003030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800303e:	b5b0      	push	{r4, r5, r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003046:	2100      	movs	r1, #0
 8003048:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	2000      	movs	r0, #0
 800304e:	460a      	mov	r2, r1
 8003050:	4603      	mov	r3, r0
 8003052:	0d95      	lsrs	r5, r2, #22
 8003054:	0294      	lsls	r4, r2, #10
 8003056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f7fd fe93 	bl	8000d8c <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4613      	mov	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bdb0      	pop	{r4, r5, r7, pc}

08003078 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8003078:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003082:	2100      	movs	r1, #0
 8003084:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	2000      	movs	r0, #0
 800308a:	460c      	mov	r4, r1
 800308c:	4605      	mov	r5, r0
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f04f 0a00 	mov.w	sl, #0
 8003096:	f04f 0b00 	mov.w	fp, #0
 800309a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800309e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80030a2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80030a6:	4650      	mov	r0, sl
 80030a8:	4659      	mov	r1, fp
 80030aa:	1b02      	subs	r2, r0, r4
 80030ac:	eb61 0305 	sbc.w	r3, r1, r5
 80030b0:	f04f 0000 	mov.w	r0, #0
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	0099      	lsls	r1, r3, #2
 80030ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80030be:	0090      	lsls	r0, r2, #2
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	eb12 0804 	adds.w	r8, r2, r4
 80030c8:	eb43 0905 	adc.w	r9, r3, r5
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e0:	4690      	mov	r8, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	4640      	mov	r0, r8
 80030e6:	4649      	mov	r1, r9
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	0a82      	lsrs	r2, r0, #10
 80030f2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80030f6:	0a8b      	lsrs	r3, r1, #10
 80030f8:	4613      	mov	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003108:	4770      	bx	lr

0800310a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ff93 	bl	800303e <TIMER_IF_Convert_ms2Tick>
 8003118:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800311a:	f000 f8d5 	bl	80032c8 <GetTimerTicks>
 800311e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003120:	e000      	b.n	8003124 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8003122:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003124:	f000 f8d0 	bl	80032c8 <GetTimerTicks>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d8f6      	bhi.n	8003122 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8003146:	f01b f8b1 	bl	801e2ac <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800315a:	f000 f8a5 	bl	80032a8 <TIMER_IF_BkUp_Read_MSBticks>
 800315e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f88f 	bl	8003288 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8003172:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003180:	f000 f8a2 	bl	80032c8 <GetTimerTicks>
 8003184:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8003186:	f000 f88f 	bl	80032a8 <TIMER_IF_BkUp_Read_MSBticks>
 800318a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	2200      	movs	r2, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	60fa      	str	r2, [r7, #12]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	000b      	movs	r3, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a4:	2000      	movs	r0, #0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4605      	mov	r5, r0
 80031aa:	eb12 0804 	adds.w	r8, r2, r4
 80031ae:	eb43 0905 	adc.w	r9, r3, r5
 80031b2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80031b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	0a82      	lsrs	r2, r0, #10
 80031c4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80031c8:	0a8b      	lsrs	r3, r1, #10
 80031ca:	4613      	mov	r3, r2
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2200      	movs	r2, #0
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80031dc:	f04f 0b00 	mov.w	fp, #0
 80031e0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff46 	bl	8003078 <TIMER_IF_Convert_Tick2ms>
 80031ec:	4603      	mov	r3, r0
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3730      	adds	r7, #48	; 0x30
 80031fa:	46bd      	mov	sp, r7
 80031fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003200 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	2100      	movs	r1, #0
 800320c:	4803      	ldr	r0, [pc, #12]	; (800321c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800320e:	f005 fcdb 	bl	8008bc8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000748 	.word	0x20000748

08003220 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	2101      	movs	r1, #1
 800322c:	4803      	ldr	r0, [pc, #12]	; (800323c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800322e:	f005 fccb 	bl	8008bc8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000748 	.word	0x20000748

08003240 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800324a:	2100      	movs	r1, #0
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800324e:	f005 fcd3 	bl	8008bf8 <HAL_RTCEx_BKUPRead>
 8003252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003254:	687b      	ldr	r3, [r7, #4]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000748 	.word	0x20000748

08003264 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800326e:	2101      	movs	r1, #1
 8003270:	4804      	ldr	r0, [pc, #16]	; (8003284 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8003272:	f005 fcc1 	bl	8008bf8 <HAL_RTCEx_BKUPRead>
 8003276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000748 	.word	0x20000748

08003288 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	2102      	movs	r1, #2
 8003294:	4803      	ldr	r0, [pc, #12]	; (80032a4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8003296:	f005 fc97 	bl	8008bc8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000748 	.word	0x20000748

080032a8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80032ae:	2102      	movs	r1, #2
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80032b2:	f005 fca1 	bl	8008bf8 <HAL_RTCEx_BKUPRead>
 80032b6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80032b8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000748 	.word	0x20000748

080032c8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80032ce:	480b      	ldr	r0, [pc, #44]	; (80032fc <GetTimerTicks+0x34>)
 80032d0:	f7ff fdd8 	bl	8002e84 <LL_RTC_TIME_GetSubSecond>
 80032d4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80032d6:	e003      	b.n	80032e0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <GetTimerTicks+0x34>)
 80032da:	f7ff fdd3 	bl	8002e84 <LL_RTC_TIME_GetSubSecond>
 80032de:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80032e0:	4806      	ldr	r0, [pc, #24]	; (80032fc <GetTimerTicks+0x34>)
 80032e2:	f7ff fdcf 	bl	8002e84 <LL_RTC_TIME_GetSubSecond>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d1f4      	bne.n	80032d8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40002800 	.word	0x40002800

08003300 <LL_AHB2_GRP1_EnableClock>:
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <LL_APB1_GRP1_EnableClock>:
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800333e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4313      	orrs	r3, r2
 8003346:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003354:	68fb      	ldr	r3, [r7, #12]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <LL_APB1_GRP1_DisableClock>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	43db      	mvns	r3, r3
 8003372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003376:	4013      	ands	r3, r2
 8003378:	658b      	str	r3, [r1, #88]	; 0x58
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <LL_APB2_GRP1_EnableClock>:
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4313      	orrs	r3, r2
 800339a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <LL_APB2_GRP1_DisableClock>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ca:	4013      	ands	r3, r2
 80033cc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_SYSCFG_EnableFastModePlus>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000

080033fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003400:	4b26      	ldr	r3, [pc, #152]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003402:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <MX_USART1_UART_Init+0xa4>)
 8003404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800340c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <MX_USART1_UART_Init+0xa0>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_USART1_UART_Init+0xa0>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <MX_USART1_UART_Init+0xa0>)
 800343a:	2200      	movs	r2, #0
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <MX_USART1_UART_Init+0xa0>)
 800344e:	2200      	movs	r2, #0
 8003450:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003452:	4812      	ldr	r0, [pc, #72]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003454:	f007 fc0e 	bl	800ac74 <HAL_UART_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 800345e:	f7fe ff33 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003462:	2100      	movs	r1, #0
 8003464:	480d      	ldr	r0, [pc, #52]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003466:	f009 fea6 	bl	800d1b6 <HAL_UARTEx_SetTxFifoThreshold>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003470:	f7fe ff2a 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003474:	2100      	movs	r1, #0
 8003476:	4809      	ldr	r0, [pc, #36]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003478:	f009 fedb 	bl	800d232 <HAL_UARTEx_SetRxFifoThreshold>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003482:	f7fe ff21 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_USART1_UART_Init+0xa0>)
 8003488:	f009 fe22 	bl	800d0d0 <HAL_UARTEx_EnableFifoMode>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003492:	f7fe ff19 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000089c 	.word	0x2000089c
 80034a0:	40013800 	.word	0x40013800

080034a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <MX_USART2_UART_Init+0x98>)
 80034ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034b6:	4b20      	ldr	r3, [pc, #128]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034ca:	220c      	movs	r2, #12
 80034cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034da:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034ee:	4812      	ldr	r0, [pc, #72]	; (8003538 <MX_USART2_UART_Init+0x94>)
 80034f0:	f007 fbc0 	bl	800ac74 <HAL_UART_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80034fa:	f7fe fee5 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034fe:	2100      	movs	r1, #0
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <MX_USART2_UART_Init+0x94>)
 8003502:	f009 fe58 	bl	800d1b6 <HAL_UARTEx_SetTxFifoThreshold>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800350c:	f7fe fedc 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003510:	2100      	movs	r1, #0
 8003512:	4809      	ldr	r0, [pc, #36]	; (8003538 <MX_USART2_UART_Init+0x94>)
 8003514:	f009 fe8d 	bl	800d232 <HAL_UARTEx_SetRxFifoThreshold>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800351e:	f7fe fed3 	bl	80022c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003522:	4805      	ldr	r0, [pc, #20]	; (8003538 <MX_USART2_UART_Init+0x94>)
 8003524:	f009 fe0f 	bl	800d146 <HAL_UARTEx_DisableFifoMode>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800352e:	f7fe fecb 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	2000092c 	.word	0x2000092c
 800353c:	40004400 	.word	0x40004400

08003540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09a      	sub	sp, #104	; 0x68
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003558:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	2238      	movs	r2, #56	; 0x38
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f01b faa8 	bl	801eac4 <memset>
  if(uartHandle->Instance==USART1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a83      	ldr	r2, [pc, #524]	; (8003788 <HAL_UART_MspInit+0x248>)
 800357a:	4293      	cmp	r3, r2
 800357c:	f040 80a3 	bne.w	80036c6 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003580:	2301      	movs	r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003584:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003588:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4618      	mov	r0, r3
 8003590:	f004 feaa 	bl	80082e8 <HAL_RCCEx_PeriphCLKConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800359a:	f7fe fe95 	bl	80022c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800359e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035a2:	f7ff feef 	bl	8003384 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a6:	2002      	movs	r0, #2
 80035a8:	f7ff feaa 	bl	8003300 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80035ac:	23c0      	movs	r3, #192	; 0xc0
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b4:	2301      	movs	r3, #1
 80035b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80035b8:	2301      	movs	r3, #1
 80035ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035bc:	2307      	movs	r3, #7
 80035be:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035c4:	4619      	mov	r1, r3
 80035c6:	4871      	ldr	r0, [pc, #452]	; (800378c <HAL_UART_MspInit+0x24c>)
 80035c8:	f002 fc20 	bl	8005e0c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80035cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035d0:	f7ff ff02 	bl	80033d8 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80035d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035d8:	f7ff fefe 	bl	80033d8 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80035dc:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_UART_MspInit+0x250>)
 80035de:	4a6d      	ldr	r2, [pc, #436]	; (8003794 <HAL_UART_MspInit+0x254>)
 80035e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80035e2:	4b6b      	ldr	r3, [pc, #428]	; (8003790 <HAL_UART_MspInit+0x250>)
 80035e4:	2212      	movs	r2, #18
 80035e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e8:	4b69      	ldr	r3, [pc, #420]	; (8003790 <HAL_UART_MspInit+0x250>)
 80035ea:	2210      	movs	r2, #16
 80035ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ee:	4b68      	ldr	r3, [pc, #416]	; (8003790 <HAL_UART_MspInit+0x250>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_UART_MspInit+0x250>)
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_UART_MspInit+0x250>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_UART_MspInit+0x250>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_UART_MspInit+0x250>)
 8003608:	2200      	movs	r2, #0
 800360a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800360c:	4b60      	ldr	r3, [pc, #384]	; (8003790 <HAL_UART_MspInit+0x250>)
 800360e:	2200      	movs	r2, #0
 8003610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003612:	485f      	ldr	r0, [pc, #380]	; (8003790 <HAL_UART_MspInit+0x250>)
 8003614:	f001 fd1c 	bl	8005050 <HAL_DMA_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800361e:	f7fe fe53 	bl	80022c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a5a      	ldr	r2, [pc, #360]	; (8003790 <HAL_UART_MspInit+0x250>)
 8003626:	679a      	str	r2, [r3, #120]	; 0x78
 8003628:	4a59      	ldr	r2, [pc, #356]	; (8003790 <HAL_UART_MspInit+0x250>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003630:	4a5a      	ldr	r2, [pc, #360]	; (800379c <HAL_UART_MspInit+0x25c>)
 8003632:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003634:	4b58      	ldr	r3, [pc, #352]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003636:	2211      	movs	r2, #17
 8003638:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363a:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_UART_MspInit+0x258>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003640:	4b55      	ldr	r3, [pc, #340]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364c:	4b52      	ldr	r3, [pc, #328]	; (8003798 <HAL_UART_MspInit+0x258>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003652:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003658:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <HAL_UART_MspInit+0x258>)
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003664:	484c      	ldr	r0, [pc, #304]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003666:	f001 fcf3 	bl	8005050 <HAL_DMA_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003670:	f7fe fe2a 	bl	80022c8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003674:	2300      	movs	r3, #0
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003678:	2300      	movs	r3, #0
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003688:	2301      	movs	r3, #1
 800368a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800368c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003690:	4619      	mov	r1, r3
 8003692:	4841      	ldr	r0, [pc, #260]	; (8003798 <HAL_UART_MspInit+0x258>)
 8003694:	f002 f8c6 	bl	8005824 <HAL_DMAEx_ConfigMuxSync>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800369e:	f7fe fe13 	bl	80022c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_UART_MspInit+0x258>)
 80036a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80036a8:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_UART_MspInit+0x258>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2102      	movs	r1, #2
 80036b2:	2024      	movs	r0, #36	; 0x24
 80036b4:	f001 fc95 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036b8:	2024      	movs	r0, #36	; 0x24
 80036ba:	f001 fcac 	bl	8005016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036be:	200c      	movs	r0, #12
 80036c0:	f001 fca9 	bl	8005016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036c4:	e05c      	b.n	8003780 <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_UART_MspInit+0x260>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d157      	bne.n	8003780 <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036d0:	2302      	movs	r3, #2
 80036d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036d4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80036d8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fe02 	bl	80082e8 <HAL_RCCEx_PeriphCLKConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 80036ea:	f7fe fded 	bl	80022c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80036f2:	f7ff fe1d 	bl	8003330 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	2001      	movs	r0, #1
 80036f8:	f7ff fe02 	bl	8003300 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80036fc:	230c      	movs	r3, #12
 80036fe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003704:	2301      	movs	r3, #1
 8003706:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003708:	2301      	movs	r3, #1
 800370a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800370c:	2307      	movs	r3, #7
 800370e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003714:	4619      	mov	r1, r3
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371a:	f002 fb77 	bl	8005e0c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800371e:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_UART_MspInit+0x268>)
 8003722:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003726:	2213      	movs	r2, #19
 8003728:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <HAL_UART_MspInit+0x264>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003730:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_UART_MspInit+0x264>)
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_UART_MspInit+0x264>)
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003750:	2200      	movs	r2, #0
 8003752:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003754:	4813      	ldr	r0, [pc, #76]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003756:	f001 fc7b 	bl	8005050 <HAL_DMA_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8003760:	f7fe fdb2 	bl	80022c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_UART_MspInit+0x264>)
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c
 800376a:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <HAL_UART_MspInit+0x264>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2025      	movs	r0, #37	; 0x25
 8003776:	f001 fc34 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800377a:	2025      	movs	r0, #37	; 0x25
 800377c:	f001 fc4b 	bl	8005016 <HAL_NVIC_EnableIRQ>
}
 8003780:	bf00      	nop
 8003782:	3768      	adds	r7, #104	; 0x68
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40013800 	.word	0x40013800
 800378c:	48000400 	.word	0x48000400
 8003790:	200009bc 	.word	0x200009bc
 8003794:	40020008 	.word	0x40020008
 8003798:	20000a1c 	.word	0x20000a1c
 800379c:	4002001c 	.word	0x4002001c
 80037a0:	40004400 	.word	0x40004400
 80037a4:	20000a7c 	.word	0x20000a7c
 80037a8:	40020030 	.word	0x40020030

080037ac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_UART_MspDeInit+0x74>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d115      	bne.n	80037ea <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80037c2:	f7ff fdf7 	bl	80033b4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80037c6:	21c0      	movs	r1, #192	; 0xc0
 80037c8:	4816      	ldr	r0, [pc, #88]	; (8003824 <HAL_UART_MspDeInit+0x78>)
 80037ca:	f002 fc7f 	bl	80060cc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fce4 	bl	80051a0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fcdf 	bl	80051a0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80037e2:	2024      	movs	r0, #36	; 0x24
 80037e4:	f001 fc25 	bl	8005032 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80037e8:	e015      	b.n	8003816 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_UART_MspDeInit+0x7c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d110      	bne.n	8003816 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80037f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80037f8:	f7ff fdb2 	bl	8003360 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80037fc:	210c      	movs	r1, #12
 80037fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003802:	f002 fc63 	bl	80060cc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fcc8 	bl	80051a0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003810:	2025      	movs	r0, #37	; 0x25
 8003812:	f001 fc0e 	bl	8005032 <HAL_NVIC_DisableIRQ>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40013800 	.word	0x40013800
 8003824:	48000400 	.word	0x48000400
 8003828:	40004400 	.word	0x40004400

0800382c <LL_APB2_GRP1_ForceReset>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4313      	orrs	r3, r2
 8003842:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <LL_APB2_GRP1_ReleaseReset>:
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	43db      	mvns	r3, r3
 8003860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003864:	4013      	ands	r3, r2
 8003866:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
	...

08003874 <LL_EXTI_EnableIT_0_31>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <LL_EXTI_EnableIT_0_31+0x24>)
 800387e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003882:	4905      	ldr	r1, [pc, #20]	; (8003898 <LL_EXTI_EnableIT_0_31+0x24>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58000800 	.word	0x58000800

0800389c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <vcom_Init+0x28>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80038aa:	f7fd ffb1 	bl	8001810 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80038ae:	f7ff fda5 	bl	80033fc <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80038b2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80038b6:	f7ff ffdd 	bl	8003874 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80038ba:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000ae0 	.word	0x20000ae0

080038c8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80038cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038d0:	f7ff ffac 	bl	800382c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80038d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038d8:	f7ff ffb9 	bl	800384e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <vcom_DeInit+0x28>)
 80038de:	f7ff ff65 	bl	80037ac <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80038e2:	200f      	movs	r0, #15
 80038e4:	f001 fba5 	bl	8005032 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80038e8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000089c 	.word	0x2000089c

080038f4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	461a      	mov	r2, r3
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <vcom_Trace_DMA+0x24>)
 8003908:	f007 faf0 	bl	800aeec <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800390c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000089c 	.word	0x2000089c

0800391c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <vcom_ReceiveInit+0x70>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800392a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800392e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003938:	4815      	ldr	r0, [pc, #84]	; (8003990 <vcom_ReceiveInit+0x74>)
 800393a:	f009 fb3c 	bl	800cfb6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800393e:	bf00      	nop
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <vcom_ReceiveInit+0x74>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d0f7      	beq.n	8003940 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003950:	bf00      	nop
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <vcom_ReceiveInit+0x74>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003960:	d1f7      	bne.n	8003952 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <vcom_ReceiveInit+0x74>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <vcom_ReceiveInit+0x74>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003970:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003972:	4807      	ldr	r0, [pc, #28]	; (8003990 <vcom_ReceiveInit+0x74>)
 8003974:	f009 fb7a 	bl	800d06c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003978:	2201      	movs	r2, #1
 800397a:	4906      	ldr	r1, [pc, #24]	; (8003994 <vcom_ReceiveInit+0x78>)
 800397c:	4804      	ldr	r0, [pc, #16]	; (8003990 <vcom_ReceiveInit+0x74>)
 800397e:	f007 fa5f 	bl	800ae40 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003982:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000ae4 	.word	0x20000ae4
 8003990:	2000089c 	.word	0x2000089c
 8003994:	20000adc 	.word	0x20000adc

08003998 <vcom_Resume>:

void vcom_Resume(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800399c:	4808      	ldr	r0, [pc, #32]	; (80039c0 <vcom_Resume+0x28>)
 800399e:	f007 f969 	bl	800ac74 <HAL_UART_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <vcom_Resume+0x14>
  {
    Error_Handler();
 80039a8:	f7fe fc8e 	bl	80022c8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80039ac:	4805      	ldr	r0, [pc, #20]	; (80039c4 <vcom_Resume+0x2c>)
 80039ae:	f001 fb4f 	bl	8005050 <HAL_DMA_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <vcom_Resume+0x24>
  {
    Error_Handler();
 80039b8:	f7fe fc86 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000089c 	.word	0x2000089c
 80039c4:	200009bc 	.word	0x200009bc

080039c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_UART_TxCpltCallback+0x24>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d103      	bne.n	80039e2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_UART_TxCpltCallback+0x28>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40013800 	.word	0x40013800
 80039f0:	20000ae0 	.word	0x20000ae0

080039f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_UART_RxCpltCallback+0x5c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d113      	bne.n	8003a2e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_UART_RxCpltCallback+0x60>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_UART_RxCpltCallback+0x30>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_UART_RxCpltCallback+0x60>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2101      	movs	r1, #1
 8003a20:	480d      	ldr	r0, [pc, #52]	; (8003a58 <HAL_UART_RxCpltCallback+0x64>)
 8003a22:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003a24:	2201      	movs	r2, #1
 8003a26:	490c      	ldr	r1, [pc, #48]	; (8003a58 <HAL_UART_RxCpltCallback+0x64>)
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f007 fa09 	bl	800ae40 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <HAL_UART_RxCpltCallback+0x68>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d106      	bne.n	8003a46 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_UART_RxCpltCallback+0x6c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_UART_RxCpltCallback+0x70>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40013800 	.word	0x40013800
 8003a54:	20000ae4 	.word	0x20000ae4
 8003a58:	20000adc 	.word	0x20000adc
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	2000092c 	.word	0x2000092c
 8003a64:	20000010 	.word	0x20000010

08003a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a6c:	f7ff f955 	bl	8002d1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a70:	480c      	ldr	r0, [pc, #48]	; (8003aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a72:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <LoopForever+0xe>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a78:	e002      	b.n	8003a80 <LoopCopyDataInit>

08003a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7e:	3304      	adds	r3, #4

08003a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a84:	d3f9      	bcc.n	8003a7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <LoopForever+0x16>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a8c:	e001      	b.n	8003a92 <LoopFillZerobss>

08003a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a90:	3204      	adds	r2, #4

08003a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a94:	d3fb      	bcc.n	8003a8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a96:	f01a fff1 	bl	801ea7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a9a:	f7fe f9f1 	bl	8001e80 <main>

08003a9e <LoopForever>:

LoopForever:
    b LoopForever
 8003a9e:	e7fe      	b.n	8003a9e <LoopForever>
  ldr   r0, =_estack
 8003aa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa8:	200005a4 	.word	0x200005a4
  ldr r2, =_sidata
 8003aac:	0801fc5c 	.word	0x0801fc5c
  ldr r2, =_sbss
 8003ab0:	200005a4 	.word	0x200005a4
  ldr r4, =_ebss
 8003ab4:	20002a8c 	.word	0x20002a8c

08003ab8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ab8:	e7fe      	b.n	8003ab8 <ADC_IRQHandler>

08003aba <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003ace:	2310      	movs	r3, #16
 8003ad0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ada:	2303      	movs	r3, #3
 8003adc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae6:	f002 f991 	bl	8005e0c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003aea:	2320      	movs	r3, #32
 8003aec:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af6:	f002 f989 	bl	8005e0c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003afa:	2200      	movs	r2, #0
 8003afc:	2120      	movs	r1, #32
 8003afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b02:	f002 fbb1 	bl	8006268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b06:	2200      	movs	r2, #0
 8003b08:	2110      	movs	r1, #16
 8003b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0e:	f002 fbab 	bl	8006268 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d83f      	bhi.n	8003bac <BSP_RADIO_ConfigRFSwitch+0x90>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b45 	.word	0x08003b45
 8003b38:	08003b5f 	.word	0x08003b5f
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003b93 	.word	0x08003b93
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2110      	movs	r1, #16
 8003b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4c:	f002 fb8c 	bl	8006268 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2120      	movs	r1, #32
 8003b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b58:	f002 fb86 	bl	8006268 <HAL_GPIO_WritePin>
      break;      
 8003b5c:	e027      	b.n	8003bae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2110      	movs	r1, #16
 8003b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b66:	f002 fb7f 	bl	8006268 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2120      	movs	r1, #32
 8003b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b72:	f002 fb79 	bl	8006268 <HAL_GPIO_WritePin>
      break;
 8003b76:	e01a      	b.n	8003bae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b80:	f002 fb72 	bl	8006268 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b84:	2201      	movs	r2, #1
 8003b86:	2120      	movs	r1, #32
 8003b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8c:	f002 fb6c 	bl	8006268 <HAL_GPIO_WritePin>
      break;
 8003b90:	e00d      	b.n	8003bae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b92:	2200      	movs	r2, #0
 8003b94:	2110      	movs	r1, #16
 8003b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9a:	f002 fb65 	bl	8006268 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba6:	f002 fb5f 	bl	8006268 <HAL_GPIO_WritePin>
      break;
 8003baa:	e000      	b.n	8003bae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003bac:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003bbc:	2302      	movs	r3, #2
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003bd8:	2301      	movs	r3, #1
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003bf2:	230f      	movs	r3, #15
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e001      	b.n	8003bfc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003bf8:	2316      	movs	r3, #22
 8003bfa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6053      	str	r3, [r2, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	e0042000 	.word	0xe0042000

08003c24 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	6053      	str	r3, [r2, #4]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	e0042000 	.word	0xe0042000

08003c40 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6053      	str	r3, [r2, #4]
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	e0042000 	.word	0xe0042000

08003c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c66:	2003      	movs	r0, #3
 8003c68:	f001 f9b0 	bl	8004fcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c6c:	f004 f95e 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <HAL_Init+0x3c>)
 8003c74:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c76:	200f      	movs	r0, #15
 8003c78:	f7fe ffce 	bl	8002c18 <HAL_InitTick>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	71fb      	strb	r3, [r7, #7]
 8003c86:	e001      	b.n	8003c8c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c88:	f7fe fd57 	bl	800273a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	2000000c 	.word	0x2000000c

08003c9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <HAL_SuspendTick+0x18>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a03      	ldr	r2, [pc, #12]	; (8003cb4 <HAL_SuspendTick+0x18>)
 8003ca6:	f023 0302 	bic.w	r3, r3, #2
 8003caa:	6013      	str	r3, [r2, #0]
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	e000e010 	.word	0xe000e010

08003cb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_ResumeTick+0x18>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a03      	ldr	r2, [pc, #12]	; (8003cd0 <HAL_ResumeTick+0x18>)
 8003cc2:	f043 0302 	orr.w	r3, r3, #2
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <HAL_GetUIDw0+0x10>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	1fff7590 	.word	0x1fff7590

08003ce8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <HAL_GetUIDw1+0x10>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	1fff7594 	.word	0x1fff7594

08003cfc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003d00:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <HAL_GetUIDw2+0x10>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	1fff7598 	.word	0x1fff7598

08003d10 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003d14:	f7ff ff78 	bl	8003c08 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003d20:	f7ff ff80 	bl	8003c24 <LL_DBGMCU_EnableDBGStopMode>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003d2c:	f7ff ff88 	bl	8003c40 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	601a      	str	r2, [r3, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2107      	movs	r1, #7
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	401a      	ands	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2107      	movs	r1, #7
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	210f      	movs	r1, #15
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	401a      	ands	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	f003 010f 	and.w	r1, r3, #15
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	0219      	lsls	r1, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	400b      	ands	r3, r1
 8003eae:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ed6:	f023 0317 	bic.w	r3, r3, #23
 8003eda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003efc:	f023 0317 	bic.w	r3, r3, #23
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6093      	str	r3, [r2, #8]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f22:	d101      	bne.n	8003f28 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f44:	f023 0317 	bic.w	r3, r3, #23
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f6a:	f023 0317 	bic.w	r3, r3, #23
 8003f6e:	f043 0202 	orr.w	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <LL_ADC_IsEnabled+0x18>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <LL_ADC_IsEnabled+0x1a>
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d101      	bne.n	8003fbc <LL_ADC_IsDisableOngoing+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <LL_ADC_IsDisableOngoing+0x1a>
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fd8:	f023 0317 	bic.w	r3, r3, #23
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ffe:	f023 0317 	bic.w	r3, r3, #23
 8004002:	f043 0210 	orr.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d101      	bne.n	800402c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e19e      	b.n	8004398 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fd fb09 	bl	8001680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff44 	bl	8003f0e <LL_ADC_IsInternalRegulatorEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d115      	bne.n	80040b8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff18 	bl	8003ec6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004096:	4b99      	ldr	r3, [pc, #612]	; (80042fc <HAL_ADC_Init+0x2c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	4a98      	ldr	r2, [pc, #608]	; (8004300 <HAL_ADC_Init+0x2c8>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	3301      	adds	r3, #1
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff26 	bl	8003f0e <LL_ADC_IsInternalRegulatorEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f043 0210 	orr.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff93 	bl	8004014 <LL_ADC_REG_IsConversionOngoing>
 80040ee:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 8144 	bne.w	8004386 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 8140 	bne.w	8004386 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800410e:	f043 0202 	orr.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff30 	bl	8003f80 <LL_ADC_IsEnabled>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 80a7 	bne.w	8004276 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7e1b      	ldrb	r3, [r3, #24]
 8004130:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004132:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7e5b      	ldrb	r3, [r3, #25]
 8004138:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800413a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7e9b      	ldrb	r3, [r3, #26]
 8004140:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004142:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004148:	2a00      	cmp	r2, #0
 800414a:	d002      	beq.n	8004152 <HAL_ADC_Init+0x11a>
 800414c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004150:	e000      	b.n	8004154 <HAL_ADC_Init+0x11c>
 8004152:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004154:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800415a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da04      	bge.n	800416e <HAL_ADC_Init+0x136>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800416c:	e001      	b.n	8004172 <HAL_ADC_Init+0x13a>
 800416e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8004172:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800417a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800417c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d114      	bne.n	80041b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e9b      	ldrb	r3, [r3, #26]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e00b      	b.n	80041b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041cc:	4313      	orrs	r3, r2
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80041de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	69b9      	ldr	r1, [r7, #24]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041f8:	4313      	orrs	r3, r2
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d111      	bne.n	800422e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004216:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800421c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004222:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	4b33      	ldr	r3, [pc, #204]	; (8004304 <HAL_ADC_Init+0x2cc>)
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	6979      	ldr	r1, [r7, #20]
 800423e:	430b      	orrs	r3, r1
 8004240:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800424a:	d014      	beq.n	8004276 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d00f      	beq.n	8004276 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800425a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425e:	d00a      	beq.n	8004276 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_ADC_Init+0x2d0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004270:	4925      	ldr	r1, [pc, #148]	; (8004308 <HAL_ADC_Init+0x2d0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	461a      	mov	r2, r3
 8004280:	2100      	movs	r1, #0
 8004282:	f7ff fd76 	bl	8003d72 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	461a      	mov	r2, r3
 8004290:	491e      	ldr	r1, [pc, #120]	; (800430c <HAL_ADC_Init+0x2d4>)
 8004292:	f7ff fd6e 	bl	8003d72 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f062 020f 	orn	r2, r2, #15
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
 80042ae:	e042      	b.n	8004336 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b8:	d13d      	bne.n	8004336 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	e00c      	b.n	80042da <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2b0f      	cmp	r3, #15
 80042d2:	d006      	beq.n	80042e2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3301      	adds	r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d9ef      	bls.n	80042c0 <HAL_ADC_Init+0x288>
 80042e0:	e000      	b.n	80042e4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80042e2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d112      	bne.n	8004310 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f062 020f 	orn	r2, r2, #15
 80042f8:	629a      	str	r2, [r3, #40]	; 0x28
 80042fa:	e01c      	b.n	8004336 <HAL_ADC_Init+0x2fe>
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	053e2d63 	.word	0x053e2d63
 8004304:	1ffffc02 	.word	0x1ffffc02
 8004308:	40012708 	.word	0x40012708
 800430c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	3b01      	subs	r3, #1
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f003 031c 	and.w	r3, r3, #28
 8004322:	f06f 020f 	mvn.w	r2, #15
 8004326:	fa02 f103 	lsl.w	r1, r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fd36 	bl	8003dae <LL_ADC_GetSamplingTimeCommonChannels>
 8004342:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004348:	429a      	cmp	r2, r3
 800434a:	d10b      	bne.n	8004364 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	f043 0201 	orr.w	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004362:	e018      	b.n	8004396 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f023 0312 	bic.w	r3, r3, #18
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004384:	e007      	b.n	8004396 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004396:	7ffb      	ldrb	r3, [r7, #31]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e06a      	b.n	8004488 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f043 0202 	orr.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fabe 	bl	8004940 <ADC_ConversionStop>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fb82 	bl	8004ad8 <ADC_Disable>
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fd7f 	bl	8003eec <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80043fc:	f023 0303 	bic.w	r3, r3, #3
 8004400:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f240 329f 	movw	r2, #927	; 0x39f
 800440a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_ADC_DeInit+0xf0>)
 8004418:	400b      	ands	r3, r1
 800441a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800442a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0207 	bic.w	r2, r2, #7
 800443a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800444a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_ADC_DeInit+0xf4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <HAL_ADC_DeInit+0xf4>)
 8004460:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004464:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd f91e 	bl	80016a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	833e0200 	.word	0x833e0200
 8004494:	40012708 	.word	0x40012708

08004498 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fdb5 	bl	8004014 <LL_ADC_REG_IsConversionOngoing>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d132      	bne.n	8004516 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_ADC_Start+0x26>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e02e      	b.n	800451c <HAL_ADC_Start+0x84>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa80 	bl	80049cc <ADC_Enable>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11a      	bne.n	800450c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	221c      	movs	r2, #28
 80044f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fd5f 	bl	8003fc8 <LL_ADC_REG_StartConversion>
 800450a:	e006      	b.n	800451a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004514:	e001      	b.n	800451a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_ADC_Stop+0x16>
 8004536:	2302      	movs	r3, #2
 8004538:	e022      	b.n	8004580 <HAL_ADC_Stop+0x5c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9fc 	bl	8004940 <ADC_ConversionStop>
 8004548:	4603      	mov	r3, r0
 800454a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d111      	bne.n	8004576 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fac0 	bl	8004ad8 <ADC_Disable>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b08      	cmp	r3, #8
 8004598:	d102      	bne.n	80045a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800459a:	2308      	movs	r3, #8
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e010      	b.n	80045c2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e077      	b.n	80046ae <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80045be:	2304      	movs	r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80045c2:	f7fe fb33 	bl	8002c2c <HAL_GetTick>
 80045c6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80045c8:	e021      	b.n	800460e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d01d      	beq.n	800460e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80045d2:	f7fe fb2b 	bl	8002c2c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <HAL_ADC_PollForConversion+0x60>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d112      	bne.n	800460e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e04f      	b.n	80046ae <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0d6      	beq.n	80045ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fbd6 	bl	8003dde <LL_ADC_REG_IsTriggerSourceSWStart>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d031      	beq.n	800469c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7e9b      	ldrb	r3, [r3, #26]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d12d      	bne.n	800469c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b08      	cmp	r3, #8
 800464c:	d126      	bne.n	800469c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fcde 	bl	8004014 <LL_ADC_REG_IsConversionOngoing>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d112      	bne.n	8004684 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 020c 	bic.w	r2, r2, #12
 800466c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	659a      	str	r2, [r3, #88]	; 0x58
 8004682:	e00b      	b.n	800469c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	f043 0201 	orr.w	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7e1b      	ldrb	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	220c      	movs	r2, #12
 80046aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x28>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e110      	b.n	800491a <HAL_ADC_ConfigChannel+0x24a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fc85 	bl	8004014 <LL_ADC_REG_IsConversionOngoing>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f040 80f7 	bne.w	8004900 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	f000 80b1 	beq.w	800487e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004724:	d004      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800472a:	4a7e      	ldr	r2, [pc, #504]	; (8004924 <HAL_ADC_ConfigChannel+0x254>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d108      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7ff fb82 	bl	8003e44 <LL_ADC_REG_SetSequencerChAdd>
 8004740:	e041      	b.n	80047c6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	210f      	movs	r1, #15
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	401a      	ands	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <HAL_ADC_ConfigChannel+0xa0>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	0e9b      	lsrs	r3, r3, #26
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	e011      	b.n	8004794 <HAL_ADC_ConfigChannel+0xc4>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004788:	2320      	movs	r3, #32
 800478a:	e003      	b.n	8004794 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	6849      	ldr	r1, [r1, #4]
 8004798:	f001 011f 	and.w	r1, r1, #31
 800479c:	408b      	lsls	r3, r1
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d808      	bhi.n	80047c6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f7ff fb1e 	bl	8003e02 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7ff fb5b 	bl	8003e8e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f280 8097 	bge.w	8004910 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047e2:	4851      	ldr	r0, [pc, #324]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 80047e4:	f7ff fab8 	bl	8003d58 <LL_ADC_GetCommonPathInternalCh>
 80047e8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a4f      	ldr	r2, [pc, #316]	; (800492c <HAL_ADC_ConfigChannel+0x25c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11b      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004804:	4619      	mov	r1, r3
 8004806:	4848      	ldr	r0, [pc, #288]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 8004808:	f7ff fa94 	bl	8003d34 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800480c:	4b48      	ldr	r3, [pc, #288]	; (8004930 <HAL_ADC_ConfigChannel+0x260>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	4a48      	ldr	r2, [pc, #288]	; (8004934 <HAL_ADC_ConfigChannel+0x264>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	4613      	mov	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004826:	e002      	b.n	800482e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3b01      	subs	r3, #1
 800482c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f9      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004834:	e06c      	b.n	8004910 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3f      	ldr	r2, [pc, #252]	; (8004938 <HAL_ADC_ConfigChannel+0x268>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10c      	bne.n	800485a <HAL_ADC_ConfigChannel+0x18a>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d107      	bne.n	800485a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004850:	4619      	mov	r1, r3
 8004852:	4835      	ldr	r0, [pc, #212]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 8004854:	f7ff fa6e 	bl	8003d34 <LL_ADC_SetCommonPathInternalCh>
 8004858:	e05a      	b.n	8004910 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a37      	ldr	r2, [pc, #220]	; (800493c <HAL_ADC_ConfigChannel+0x26c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d155      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d150      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004874:	4619      	mov	r1, r3
 8004876:	482c      	ldr	r0, [pc, #176]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 8004878:	f7ff fa5c 	bl	8003d34 <LL_ADC_SetCommonPathInternalCh>
 800487c:	e048      	b.n	8004910 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004886:	d004      	beq.n	8004892 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <HAL_ADC_ConfigChannel+0x254>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d107      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7ff fae3 	bl	8003e68 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da32      	bge.n	8004910 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048aa:	481f      	ldr	r0, [pc, #124]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 80048ac:	f7ff fa54 	bl	8003d58 <LL_ADC_GetCommonPathInternalCh>
 80048b0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1d      	ldr	r2, [pc, #116]	; (800492c <HAL_ADC_ConfigChannel+0x25c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d107      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048c2:	4619      	mov	r1, r3
 80048c4:	4818      	ldr	r0, [pc, #96]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 80048c6:	f7ff fa35 	bl	8003d34 <LL_ADC_SetCommonPathInternalCh>
 80048ca:	e021      	b.n	8004910 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_ADC_ConfigChannel+0x268>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d107      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048dc:	4619      	mov	r1, r3
 80048de:	4812      	ldr	r0, [pc, #72]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 80048e0:	f7ff fa28 	bl	8003d34 <LL_ADC_SetCommonPathInternalCh>
 80048e4:	e014      	b.n	8004910 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a14      	ldr	r2, [pc, #80]	; (800493c <HAL_ADC_ConfigChannel+0x26c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10f      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80048f6:	4619      	mov	r1, r3
 80048f8:	480b      	ldr	r0, [pc, #44]	; (8004928 <HAL_ADC_ConfigChannel+0x258>)
 80048fa:	f7ff fa1b 	bl	8003d34 <LL_ADC_SetCommonPathInternalCh>
 80048fe:	e007      	b.n	8004910 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004918:	7ffb      	ldrb	r3, [r7, #31]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	80000004 	.word	0x80000004
 8004928:	40012708 	.word	0x40012708
 800492c:	b0001000 	.word	0xb0001000
 8004930:	2000000c 	.word	0x2000000c
 8004934:	053e2d63 	.word	0x053e2d63
 8004938:	b8004000 	.word	0xb8004000
 800493c:	b4002000 	.word	0xb4002000

08004940 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fb61 	bl	8004014 <LL_ADC_REG_IsConversionOngoing>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d033      	beq.n	80049c0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fb21 	bl	8003fa4 <LL_ADC_IsDisableOngoing>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fb3e 	bl	8003fee <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004972:	f7fe f95b 	bl	8002c2c <HAL_GetTick>
 8004976:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004978:	e01b      	b.n	80049b2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800497a:	f7fe f957 	bl	8002c2c <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d914      	bls.n	80049b2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	f043 0210 	orr.w	r2, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e007      	b.n	80049c2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1dc      	bne.n	800497a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff facf 	bl	8003f80 <LL_ADC_IsEnabled>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d169      	bne.n	8004abc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <ADC_Enable+0xfc>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	f043 0210 	orr.w	r2, r3, #16
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e055      	b.n	8004abe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fa8c 	bl	8003f34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a1c:	482b      	ldr	r0, [pc, #172]	; (8004acc <ADC_Enable+0x100>)
 8004a1e:	f7ff f99b 	bl	8003d58 <LL_ADC_GetCommonPathInternalCh>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00f      	beq.n	8004a4c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a2c:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <ADC_Enable+0x104>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	4a28      	ldr	r2, [pc, #160]	; (8004ad4 <ADC_Enable+0x108>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a3e:	e002      	b.n	8004a46 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f9      	bne.n	8004a40 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7e5b      	ldrb	r3, [r3, #25]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d033      	beq.n	8004abc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a54:	f7fe f8ea 	bl	8002c2c <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a5a:	e028      	b.n	8004aae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fa8d 	bl	8003f80 <LL_ADC_IsEnabled>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fa5f 	bl	8003f34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a76:	f7fe f8d9 	bl	8002c2c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d914      	bls.n	8004aae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d00d      	beq.n	8004aae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	f043 0210 	orr.w	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e007      	b.n	8004abe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d1cf      	bne.n	8004a5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	80000017 	.word	0x80000017
 8004acc:	40012708 	.word	0x40012708
 8004ad0:	2000000c 	.word	0x2000000c
 8004ad4:	053e2d63 	.word	0x053e2d63

08004ad8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fa5d 	bl	8003fa4 <LL_ADC_IsDisableOngoing>
 8004aea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fa45 	bl	8003f80 <LL_ADC_IsEnabled>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d047      	beq.n	8004b8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d144      	bne.n	8004b8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0305 	and.w	r3, r3, #5
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10c      	bne.n	8004b2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff fa20 	bl	8003f5a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b22:	f7fe f883 	bl	8002c2c <HAL_GetTick>
 8004b26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b28:	e029      	b.n	8004b7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e023      	b.n	8004b8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b46:	f7fe f871 	bl	8002c2c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d914      	bls.n	8004b7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	f043 0210 	orr.w	r2, r3, #16
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e007      	b.n	8004b8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1dc      	bne.n	8004b46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <LL_ADC_SetCalibrationFactor>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ba6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <LL_ADC_GetCalibrationFactor>:
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <LL_ADC_Enable>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bea:	f023 0317 	bic.w	r3, r3, #23
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <LL_ADC_Disable>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	f023 0317 	bic.w	r3, r3, #23
 8004c14:	f043 0202 	orr.w	r2, r3, #2
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <LL_ADC_IsEnabled>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <LL_ADC_IsEnabled+0x18>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_ADC_IsEnabled+0x1a>
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <LL_ADC_StartCalibration>:
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c5a:	f023 0317 	bic.w	r3, r3, #23
 8004c5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d101      	bne.n	8004c8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b088      	sub	sp, #32
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADCEx_Calibration_Start+0x1e>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0b9      	b.n	8004e28 <HAL_ADCEx_Calibration_Start+0x192>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff0b 	bl	8004ad8 <ADC_Disable>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff ffab 	bl	8004c26 <LL_ADC_IsEnabled>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 809d 	bne.w	8004e12 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ce0:	f043 0202 	orr.w	r2, r3, #2
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	f248 0303 	movw	r3, #32771	; 0x8003
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d04:	f023 0303 	bic.w	r3, r3, #3
 8004d08:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e02e      	b.n	8004d6e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff98 	bl	8004c4a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d1a:	e014      	b.n	8004d46 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004d28:	d30d      	bcc.n	8004d46 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f023 0312 	bic.w	r3, r3, #18
 8004d32:	f043 0210 	orr.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e070      	b.n	8004e28 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff ff90 	bl	8004c70 <LL_ADC_IsCalibrationOnGoing>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e2      	bne.n	8004d1c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ff2f 	bl	8004bbe <LL_ADC_GetCalibrationFactor>
 8004d60:	4602      	mov	r2, r0
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4413      	add	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2b07      	cmp	r3, #7
 8004d72:	d9cd      	bls.n	8004d10 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff ff29 	bl	8004bda <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff01 	bl	8004b96 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff ff31 	bl	8004c00 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d9e:	f7fd ff45 	bl	8002c2c <HAL_GetTick>
 8004da2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004da4:	e01c      	b.n	8004de0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004da6:	f7fd ff41 	bl	8002c2c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d915      	bls.n	8004de0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff34 	bl	8004c26 <LL_ADC_IsEnabled>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	f043 0210 	orr.w	r2, r3, #16
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	f043 0201 	orr.w	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e023      	b.n	8004e28 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff1e 	bl	8004c26 <LL_ADC_IsEnabled>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1da      	bne.n	8004da6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68d9      	ldr	r1, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e04:	f023 0303 	bic.w	r3, r3, #3
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e10:	e005      	b.n	8004e1e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	f043 0210 	orr.w	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <__NVIC_SetPriorityGrouping+0x44>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e62:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <__NVIC_SetPriorityGrouping+0x44>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	60d3      	str	r3, [r2, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <__NVIC_GetPriorityGrouping+0x18>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f003 0307 	and.w	r3, r3, #7
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db0b      	blt.n	8004ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	f003 021f 	and.w	r2, r3, #31
 8004eac:	4906      	ldr	r1, [pc, #24]	; (8004ec8 <__NVIC_EnableIRQ+0x34>)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	e000e100 	.word	0xe000e100

08004ecc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db12      	blt.n	8004f04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	490a      	ldr	r1, [pc, #40]	; (8004f10 <__NVIC_DisableIRQ+0x44>)
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2001      	movs	r0, #1
 8004eee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef2:	3320      	adds	r3, #32
 8004ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ef8:	f3bf 8f4f 	dsb	sy
}
 8004efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004efe:	f3bf 8f6f 	isb	sy
}
 8004f02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e100 	.word	0xe000e100

08004f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db0a      	blt.n	8004f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	490c      	ldr	r1, [pc, #48]	; (8004f60 <__NVIC_SetPriority+0x4c>)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	440b      	add	r3, r1
 8004f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f3c:	e00a      	b.n	8004f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4908      	ldr	r1, [pc, #32]	; (8004f64 <__NVIC_SetPriority+0x50>)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	440b      	add	r3, r1
 8004f52:	761a      	strb	r2, [r3, #24]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e100 	.word	0xe000e100
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f1c3 0307 	rsb	r3, r3, #7
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf28      	it	cs
 8004f86:	2304      	movcs	r3, #4
 8004f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d902      	bls.n	8004f98 <NVIC_EncodePriority+0x30>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3b03      	subs	r3, #3
 8004f96:	e000      	b.n	8004f9a <NVIC_EncodePriority+0x32>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	401a      	ands	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	43d9      	mvns	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc0:	4313      	orrs	r3, r2
         );
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	; 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff2b 	bl	8004e30 <__NVIC_SetPriorityGrouping>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	4603      	mov	r3, r0
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ff0:	f7ff ff42 	bl	8004e78 <__NVIC_GetPriorityGrouping>
 8004ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff ffb4 	bl	8004f68 <NVIC_EncodePriority>
 8005000:	4602      	mov	r2, r0
 8005002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff83 	bl	8004f14 <__NVIC_SetPriority>
}
 800500e:	bf00      	nop
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	4603      	mov	r3, r0
 800501e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff35 	bl	8004e94 <__NVIC_EnableIRQ>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff43 	bl	8004ecc <__NVIC_DisableIRQ>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e08e      	b.n	8005180 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_DMA_Init+0x138>)
 800506a:	429a      	cmp	r2, r3
 800506c:	d80f      	bhi.n	800508e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	4b45      	ldr	r3, [pc, #276]	; (800518c <HAL_DMA_Init+0x13c>)
 8005076:	4413      	add	r3, r2
 8005078:	4a45      	ldr	r2, [pc, #276]	; (8005190 <HAL_DMA_Init+0x140>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	009a      	lsls	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a42      	ldr	r2, [pc, #264]	; (8005194 <HAL_DMA_Init+0x144>)
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
 800508c:	e00e      	b.n	80050ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	4b40      	ldr	r3, [pc, #256]	; (8005198 <HAL_DMA_Init+0x148>)
 8005096:	4413      	add	r3, r2
 8005098:	4a3d      	ldr	r2, [pc, #244]	; (8005190 <HAL_DMA_Init+0x140>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	009a      	lsls	r2, r3, #2
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a3c      	ldr	r2, [pc, #240]	; (800519c <HAL_DMA_Init+0x14c>)
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb24 	bl	800574c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510c:	d102      	bne.n	8005114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005120:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800512a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d010      	beq.n	8005156 <HAL_DMA_Init+0x106>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d80c      	bhi.n	8005156 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fb4d 	bl	80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	e008      	b.n	8005168 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40020407 	.word	0x40020407
 800518c:	bffdfff8 	.word	0xbffdfff8
 8005190:	cccccccd 	.word	0xcccccccd
 8005194:	40020000 	.word	0x40020000
 8005198:	bffdfbf8 	.word	0xbffdfbf8
 800519c:	40020400 	.word	0x40020400

080051a0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07b      	b.n	80052aa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b3a      	ldr	r3, [pc, #232]	; (80052b4 <HAL_DMA_DeInit+0x114>)
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d80f      	bhi.n	80051ee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b38      	ldr	r3, [pc, #224]	; (80052b8 <HAL_DMA_DeInit+0x118>)
 80051d6:	4413      	add	r3, r2
 80051d8:	4a38      	ldr	r2, [pc, #224]	; (80052bc <HAL_DMA_DeInit+0x11c>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	009a      	lsls	r2, r3, #2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <HAL_DMA_DeInit+0x120>)
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
 80051ec:	e00e      	b.n	800520c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b33      	ldr	r3, [pc, #204]	; (80052c4 <HAL_DMA_DeInit+0x124>)
 80051f6:	4413      	add	r3, r2
 80051f8:	4a30      	ldr	r2, [pc, #192]	; (80052bc <HAL_DMA_DeInit+0x11c>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	009a      	lsls	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <HAL_DMA_DeInit+0x128>)
 800520a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	f003 021c 	and.w	r2, r3, #28
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	2101      	movs	r1, #1
 8005222:	fa01 f202 	lsl.w	r2, r1, r2
 8005226:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa8f 	bl	800574c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800523e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00f      	beq.n	8005268 <HAL_DMA_DeInit+0xc8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d80b      	bhi.n	8005268 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fac3 	bl	80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005266:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40020407 	.word	0x40020407
 80052b8:	bffdfff8 	.word	0xbffdfff8
 80052bc:	cccccccd 	.word	0xcccccccd
 80052c0:	40020000 	.word	0x40020000
 80052c4:	bffdfbf8 	.word	0xbffdfbf8
 80052c8:	40020400 	.word	0x40020400

080052cc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_DMA_Start_IT+0x20>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e069      	b.n	80053c0 <HAL_DMA_Start_IT+0xf4>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d155      	bne.n	80053ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f9d3 	bl	80056d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 020e 	orr.w	r2, r2, #14
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e00f      	b.n	8005364 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0204 	bic.w	r2, r2, #4
 8005352:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 020a 	orr.w	r2, r2, #10
 8005362:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005380:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005398:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e008      	b.n	80053be <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e04f      	b.n	800547a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d008      	beq.n	80053f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2204      	movs	r2, #4
 80053ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e040      	b.n	800547a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 020e 	bic.w	r2, r2, #14
 8005406:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005416:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542c:	f003 021c 	and.w	r2, r3, #28
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
 800543a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005444:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800545c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005466:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr

08005484 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d005      	beq.n	80054a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
 80054a6:	e047      	b.n	8005538 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 020e 	bic.w	r2, r2, #14
 80054b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	f003 021c 	and.w	r2, r3, #28
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800550c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005516:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
    }
  }
  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	f003 031c 	and.w	r3, r3, #28
 8005564:	2204      	movs	r2, #4
 8005566:	409a      	lsls	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d027      	beq.n	80055c0 <HAL_DMA_IRQHandler+0x7c>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d022      	beq.n	80055c0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559c:	f003 021c 	and.w	r2, r3, #28
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2104      	movs	r1, #4
 80055a6:	fa01 f202 	lsl.w	r2, r1, r2
 80055aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8081 	beq.w	80056b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80055be:	e07b      	b.n	80056b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	f003 031c 	and.w	r3, r3, #28
 80055c8:	2202      	movs	r2, #2
 80055ca:	409a      	lsls	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d03d      	beq.n	8005650 <HAL_DMA_IRQHandler+0x10c>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d038      	beq.n	8005650 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 020a 	bic.w	r2, r2, #10
 80055fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_DMA_IRQHandler+0x180>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d909      	bls.n	8005624 <HAL_DMA_IRQHandler+0xe0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	f003 031c 	and.w	r3, r3, #28
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <HAL_DMA_IRQHandler+0x184>)
 800561a:	2102      	movs	r1, #2
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	6053      	str	r3, [r2, #4]
 8005622:	e008      	b.n	8005636 <HAL_DMA_IRQHandler+0xf2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f003 031c 	and.w	r3, r3, #28
 800562c:	4a27      	ldr	r2, [pc, #156]	; (80056cc <HAL_DMA_IRQHandler+0x188>)
 800562e:	2102      	movs	r1, #2
 8005630:	fa01 f303 	lsl.w	r3, r1, r3
 8005634:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d038      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800564e:	e033      	b.n	80056b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005654:	f003 031c 	and.w	r3, r3, #28
 8005658:	2208      	movs	r2, #8
 800565a:	409a      	lsls	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d02a      	beq.n	80056ba <HAL_DMA_IRQHandler+0x176>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d025      	beq.n	80056ba <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 020e 	bic.w	r2, r2, #14
 800567c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	f003 021c 	and.w	r2, r3, #28
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
}
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40020080 	.word	0x40020080
 80056c8:	40020400 	.word	0x40020400
 80056cc:	40020000 	.word	0x40020000

080056d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	f003 021c 	and.w	r2, r3, #28
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f202 	lsl.w	r2, r1, r2
 800570c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b10      	cmp	r3, #16
 800571c:	d108      	bne.n	8005730 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800572e:	e007      	b.n	8005740 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
	...

0800574c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800575c:	429a      	cmp	r2, r3
 800575e:	d813      	bhi.n	8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	089b      	lsrs	r3, r3, #2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800576c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	3b08      	subs	r3, #8
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e011      	b.n	80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	009a      	lsls	r2, r3, #2
 8005790:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005792:	4413      	add	r3, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	3b08      	subs	r3, #8
 80057a0:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	3307      	adds	r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80057b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2201      	movs	r2, #1
 80057ba:	409a      	lsls	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40020407 	.word	0x40020407
 80057d0:	cccccccd 	.word	0xcccccccd
 80057d4:	4002081c 	.word	0x4002081c
 80057d8:	40020880 	.word	0x40020880

080057dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a08      	ldr	r2, [pc, #32]	; (8005820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005800:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b01      	subs	r3, #1
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2201      	movs	r2, #1
 800580c:	409a      	lsls	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	1000823f 	.word	0x1000823f
 8005820:	40020940 	.word	0x40020940

08005824 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	d12b      	bne.n	8005892 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005844:	2302      	movs	r3, #2
 8005846:	e028      	b.n	800589a <HAL_DMAEx_ConfigMuxSync+0x76>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	04db      	lsls	r3, r3, #19
 8005866:	431a      	orrs	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	431a      	orrs	r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	7a1b      	ldrb	r3, [r3, #8]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	7a5b      	ldrb	r3, [r3, #9]
 800587a:	025b      	lsls	r3, r3, #9
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005882:	430a      	orrs	r2, r1
 8005884:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e003      	b.n	800589a <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr

080058a4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d022      	beq.n	8005940 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01a      	beq.n	8005940 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005918:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005922:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
      }
    }
  }
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <HAL_FLASH_Program+0x80>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_FLASH_Program+0x1a>
 800595e:	2302      	movs	r3, #2
 8005960:	e02d      	b.n	80059be <HAL_FLASH_Program+0x76>
 8005962:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_FLASH_Program+0x80>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005968:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <HAL_FLASH_Program+0x80>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800596e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005972:	f000 f869 	bl	8005a48 <FLASH_WaitForLastOperation>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11a      	bne.n	80059b6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d105      	bne.n	8005992 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f000 f8be 	bl	8005b0c <FLASH_Program_DoubleWord>
 8005990:	e004      	b.n	800599c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	68b8      	ldr	r0, [r7, #8]
 8005998:	f000 f8de 	bl	8005b58 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800599c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a0:	f000 f852 	bl	8005a48 <FLASH_WaitForLastOperation>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_FLASH_Program+0x84>)
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	4906      	ldr	r1, [pc, #24]	; (80059cc <HAL_FLASH_Program+0x84>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059b6:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <HAL_FLASH_Program+0x80>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000ae8 	.word	0x20000ae8
 80059cc:	58004000 	.word	0x58004000

080059d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_FLASH_Unlock+0x38>)
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da0b      	bge.n	80059fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <HAL_FLASH_Unlock+0x38>)
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <HAL_FLASH_Unlock+0x3c>)
 80059e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <HAL_FLASH_Unlock+0x38>)
 80059ea:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <HAL_FLASH_Unlock+0x40>)
 80059ec:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_FLASH_Unlock+0x38>)
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da01      	bge.n	80059fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80059fa:	79fb      	ldrb	r3, [r7, #7]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	58004000 	.word	0x58004000
 8005a0c:	45670123 	.word	0x45670123
 8005a10:	cdef89ab 	.word	0xcdef89ab

08005a14 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_FLASH_Lock+0x30>)
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <HAL_FLASH_Lock+0x30>)
 8005a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a28:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_FLASH_Lock+0x30>)
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	db01      	blt.n	8005a36 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005a36:	79fb      	ldrb	r3, [r7, #7]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	58004000 	.word	0x58004000

08005a48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005a50:	f7fd f8ec 	bl	8002c2c <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a56:	e009      	b.n	8005a6c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005a58:	f7fd f8e8 	bl	8002c2c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d801      	bhi.n	8005a6c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e047      	b.n	8005afc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d0ee      	beq.n	8005a58 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005a7a:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005a96:	4013      	ands	r3, r2
 8005a98:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <FLASH_WaitForLastOperation+0x6c>
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005aae:	4915      	ldr	r1, [pc, #84]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	618b      	str	r3, [r1, #24]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <FLASH_WaitForLastOperation+0x80>
 8005abe:	4a11      	ldr	r2, [pc, #68]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ac6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00e      	beq.n	8005aec <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005ace:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <FLASH_WaitForLastOperation+0xc0>)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e011      	b.n	8005afc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005ad8:	f7fd f8a8 	bl	8002c2c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d801      	bhi.n	8005aec <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e007      	b.n	8005afc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <FLASH_WaitForLastOperation+0xbc>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005af8:	d0ee      	beq.n	8005ad8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	58004000 	.word	0x58004000
 8005b08:	20000ae8 	.word	0x20000ae8

08005b0c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b18:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <FLASH_Program_DoubleWord+0x48>)
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	4a0d      	ldr	r2, [pc, #52]	; (8005b54 <FLASH_Program_DoubleWord+0x48>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005b2a:	f3bf 8f6f 	isb	sy
}
 8005b2e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	000a      	movs	r2, r1
 8005b3e:	2300      	movs	r3, #0
 8005b40:	68f9      	ldr	r1, [r7, #12]
 8005b42:	3104      	adds	r1, #4
 8005b44:	4613      	mov	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	58004000 	.word	0x58004000

08005b58 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <FLASH_Program_Fast+0x78>)
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <FLASH_Program_Fast+0x78>)
 8005b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b78:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b80:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b84:	b672      	cpsid	i
}
 8005b86:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	3304      	adds	r3, #4
 8005b94:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	617b      	str	r3, [r7, #20]
    row_index--;
 8005b9c:	7ffb      	ldrb	r3, [r7, #31]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005ba2:	7ffb      	ldrb	r3, [r7, #31]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ef      	bne.n	8005b88 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005ba8:	bf00      	nop
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <FLASH_Program_Fast+0x78>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb6:	d0f8      	beq.n	8005baa <FLASH_Program_Fast+0x52>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f383 8810 	msr	PRIMASK, r3
}
 8005bc2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005bc4:	bf00      	nop
 8005bc6:	3724      	adds	r7, #36	; 0x24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	58004000 	.word	0x58004000

08005bd4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005bde:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <HAL_FLASHEx_Erase+0xac>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_FLASHEx_Erase+0x16>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e046      	b.n	8005c78 <HAL_FLASHEx_Erase+0xa4>
 8005bea:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <HAL_FLASHEx_Erase+0xac>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bf0:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <HAL_FLASHEx_Erase+0xac>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bfa:	f7ff ff25 	bl	8005a48 <FLASH_WaitForLastOperation>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d133      	bne.n	8005c70 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d108      	bne.n	8005c22 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005c10:	f000 f880 	bl	8005d14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c18:	f7ff ff16 	bl	8005a48 <FLASH_WaitForLastOperation>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
 8005c20:	e024      	b.n	8005c6c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	e012      	b.n	8005c58 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005c32:	68b8      	ldr	r0, [r7, #8]
 8005c34:	f000 f87e 	bl	8005d34 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c3c:	f7ff ff04 	bl	8005a48 <FLASH_WaitForLastOperation>
 8005c40:	4603      	mov	r3, r0
 8005c42:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	601a      	str	r2, [r3, #0]
          break;
 8005c50:	e00a      	b.n	8005c68 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d3e4      	bcc.n	8005c32 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005c68:	f000 f8c0 	bl	8005dec <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c6c:	f000 f87a 	bl	8005d64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_FLASHEx_Erase+0xac>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]

  return status;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000ae8 	.word	0x20000ae8

08005c84 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c8c:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_FLASHEx_Erase_IT+0x14>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e034      	b.n	8005d02 <HAL_FLASHEx_Erase_IT+0x7e>
 8005c98:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005caa:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cb0:	f7ff feca 	bl	8005a48 <FLASH_WaitForLastOperation>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	e01c      	b.n	8005d00 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005ccc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8005cd0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d105      	bne.n	8005ce6 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005ce0:	f000 f818 	bl	8005d14 <FLASH_MassErase>
 8005ce4:	e00c      	b.n	8005d00 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005cec:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4a06      	ldr	r2, [pc, #24]	; (8005d0c <HAL_FLASHEx_Erase_IT+0x88>)
 8005cf4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f81a 	bl	8005d34 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000ae8 	.word	0x20000ae8
 8005d10:	58004000 	.word	0x58004000

08005d14 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <FLASH_MassErase+0x1c>)
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <FLASH_MassErase+0x1c>)
 8005d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d22:	f043 0304 	orr.w	r3, r3, #4
 8005d26:	6153      	str	r3, [r2, #20]
#endif
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr
 8005d30:	58004000 	.word	0x58004000

08005d34 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <FLASH_PageErase+0x2c>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	4a05      	ldr	r2, [pc, #20]	; (8005d60 <FLASH_PageErase+0x2c>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	6153      	str	r3, [r2, #20]
#endif
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	58004000 	.word	0x58004000

08005d64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005d68:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d117      	bne.n	8005da4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d80:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d98:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a12      	ldr	r2, [pc, #72]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d117      	bne.n	8005de0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a06      	ldr	r2, [pc, #24]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a03      	ldr	r2, [pc, #12]	; (8005de8 <FLASH_FlushCaches+0x84>)
 8005dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dde:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005de0:	bf00      	nop
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	58004000 	.word	0x58004000

08005dec <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <FLASH_AcknowledgePageErase+0x1c>)
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <FLASH_AcknowledgePageErase+0x1c>)
 8005df6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005dfa:	f023 0302 	bic.w	r3, r3, #2
 8005dfe:	6153      	str	r3, [r2, #20]
#endif
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	58004000 	.word	0x58004000

08005e0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e1a:	e140      	b.n	800609e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2101      	movs	r1, #1
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8132 	beq.w	8006098 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d005      	beq.n	8005e4c <HAL_GPIO_Init+0x40>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d130      	bne.n	8005eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	2203      	movs	r2, #3
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4013      	ands	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e82:	2201      	movs	r2, #1
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f003 0201 	and.w	r2, r3, #1
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d017      	beq.n	8005eea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d123      	bne.n	8005f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	08da      	lsrs	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3208      	adds	r2, #8
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	220f      	movs	r2, #15
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43db      	mvns	r3, r3
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	08da      	lsrs	r2, r3, #3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3208      	adds	r2, #8
 8005f38:	6939      	ldr	r1, [r7, #16]
 8005f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	2203      	movs	r2, #3
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4013      	ands	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f003 0203 	and.w	r2, r3, #3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 808c 	beq.w	8006098 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005f80:	4a4e      	ldr	r2, [pc, #312]	; (80060bc <HAL_GPIO_Init+0x2b0>)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	089b      	lsrs	r3, r3, #2
 8005f86:	3302      	adds	r3, #2
 8005f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	2207      	movs	r2, #7
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005faa:	d00d      	beq.n	8005fc8 <HAL_GPIO_Init+0x1bc>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a44      	ldr	r2, [pc, #272]	; (80060c0 <HAL_GPIO_Init+0x2b4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d007      	beq.n	8005fc4 <HAL_GPIO_Init+0x1b8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a43      	ldr	r2, [pc, #268]	; (80060c4 <HAL_GPIO_Init+0x2b8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d101      	bne.n	8005fc0 <HAL_GPIO_Init+0x1b4>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e004      	b.n	8005fca <HAL_GPIO_Init+0x1be>
 8005fc0:	2307      	movs	r3, #7
 8005fc2:	e002      	b.n	8005fca <HAL_GPIO_Init+0x1be>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_GPIO_Init+0x1be>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	f002 0203 	and.w	r2, r2, #3
 8005fd0:	0092      	lsls	r2, r2, #2
 8005fd2:	4093      	lsls	r3, r2
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fda:	4938      	ldr	r1, [pc, #224]	; (80060bc <HAL_GPIO_Init+0x2b0>)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fe8:	4b37      	ldr	r3, [pc, #220]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800600c:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006012:	4b2d      	ldr	r3, [pc, #180]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43db      	mvns	r3, r3
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4013      	ands	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006036:	4a24      	ldr	r2, [pc, #144]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800603c:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 800603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006042:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	43db      	mvns	r3, r3
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4013      	ands	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006062:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800606a:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 800606c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006070:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	43db      	mvns	r3, r3
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4013      	ands	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006090:	4a0d      	ldr	r2, [pc, #52]	; (80060c8 <HAL_GPIO_Init+0x2bc>)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f47f aeb7 	bne.w	8005e1c <HAL_GPIO_Init+0x10>
  }
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	48000400 	.word	0x48000400
 80060c4:	48000800 	.word	0x48000800
 80060c8:	58000800 	.word	0x58000800

080060cc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80060da:	e0af      	b.n	800623c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80060dc:	2201      	movs	r2, #1
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	4013      	ands	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80a2 	beq.w	8006236 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80060f2:	4a59      	ldr	r2, [pc, #356]	; (8006258 <HAL_GPIO_DeInit+0x18c>)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	3302      	adds	r3, #2
 80060fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	2207      	movs	r2, #7
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800611a:	d00d      	beq.n	8006138 <HAL_GPIO_DeInit+0x6c>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a4f      	ldr	r2, [pc, #316]	; (800625c <HAL_GPIO_DeInit+0x190>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <HAL_GPIO_DeInit+0x68>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a4e      	ldr	r2, [pc, #312]	; (8006260 <HAL_GPIO_DeInit+0x194>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d101      	bne.n	8006130 <HAL_GPIO_DeInit+0x64>
 800612c:	2302      	movs	r3, #2
 800612e:	e004      	b.n	800613a <HAL_GPIO_DeInit+0x6e>
 8006130:	2307      	movs	r3, #7
 8006132:	e002      	b.n	800613a <HAL_GPIO_DeInit+0x6e>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_GPIO_DeInit+0x6e>
 8006138:	2300      	movs	r3, #0
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	f002 0203 	and.w	r2, r2, #3
 8006140:	0092      	lsls	r2, r2, #2
 8006142:	4093      	lsls	r3, r2
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	429a      	cmp	r2, r3
 8006148:	d136      	bne.n	80061b8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800614a:	4b46      	ldr	r3, [pc, #280]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 800614c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	43db      	mvns	r3, r3
 8006154:	4943      	ldr	r1, [pc, #268]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 8006156:	4013      	ands	r3, r2
 8006158:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800615c:	4b41      	ldr	r3, [pc, #260]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 800615e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	43db      	mvns	r3, r3
 8006166:	493f      	ldr	r1, [pc, #252]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 8006168:	4013      	ands	r3, r2
 800616a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800616e:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	43db      	mvns	r3, r3
 8006176:	493b      	ldr	r1, [pc, #236]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 8006178:	4013      	ands	r3, r2
 800617a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800617c:	4b39      	ldr	r3, [pc, #228]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	43db      	mvns	r3, r3
 8006184:	4937      	ldr	r1, [pc, #220]	; (8006264 <HAL_GPIO_DeInit+0x198>)
 8006186:	4013      	ands	r3, r2
 8006188:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	2207      	movs	r2, #7
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800619a:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <HAL_GPIO_DeInit+0x18c>)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	3302      	adds	r3, #2
 80061a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	43da      	mvns	r2, r3
 80061aa:	482b      	ldr	r0, [pc, #172]	; (8006258 <HAL_GPIO_DeInit+0x18c>)
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	089b      	lsrs	r3, r3, #2
 80061b0:	400a      	ands	r2, r1
 80061b2:	3302      	adds	r3, #2
 80061b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	2103      	movs	r1, #3
 80061c2:	fa01 f303 	lsl.w	r3, r1, r3
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	08da      	lsrs	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3208      	adds	r2, #8
 80061d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	220f      	movs	r2, #15
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	43db      	mvns	r3, r3
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	08d2      	lsrs	r2, r2, #3
 80061ec:	4019      	ands	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3208      	adds	r2, #8
 80061f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	2103      	movs	r1, #3
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	401a      	ands	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	2101      	movs	r1, #1
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	2103      	movs	r1, #3
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	401a      	ands	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	3301      	adds	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f af49 	bne.w	80060dc <HAL_GPIO_DeInit+0x10>
  }
}
 800624a:	bf00      	nop
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	48000400 	.word	0x48000400
 8006260:	48000800 	.word	0x48000800
 8006264:	58000800 	.word	0x58000800

08006268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	807b      	strh	r3, [r7, #2]
 8006274:	4613      	mov	r3, r2
 8006276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006278:	787b      	ldrb	r3, [r7, #1]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006284:	e002      	b.n	800628c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006286:	887a      	ldrh	r2, [r7, #2]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062a8:	887a      	ldrh	r2, [r7, #2]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4013      	ands	r3, r2
 80062ae:	041a      	lsls	r2, r3, #16
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	43d9      	mvns	r1, r3
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	400b      	ands	r3, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	619a      	str	r2, [r3, #24]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e081      	b.n	80063de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fd54 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006318:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006328:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d107      	bne.n	8006342 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633e:	609a      	str	r2, [r3, #8]
 8006340:	e006      	b.n	8006350 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800634e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d104      	bne.n	8006362 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006360:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006374:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006384:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69d9      	ldr	r1, [r3, #28]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1a      	ldr	r2, [r3, #32]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	461a      	mov	r2, r3
 80063f4:	460b      	mov	r3, r1
 80063f6:	817b      	strh	r3, [r7, #10]
 80063f8:	4613      	mov	r3, r2
 80063fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b20      	cmp	r3, #32
 8006406:	f040 80da 	bne.w	80065be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_I2C_Master_Transmit+0x30>
 8006414:	2302      	movs	r3, #2
 8006416:	e0d3      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1d8>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006420:	f7fc fc04 	bl	8002c2c <HAL_GetTick>
 8006424:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2319      	movs	r3, #25
 800642c:	2201      	movs	r2, #1
 800642e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f9e5 	bl	8006802 <I2C_WaitOnFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e0be      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2221      	movs	r2, #33	; 0x21
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2210      	movs	r2, #16
 800644e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	893a      	ldrh	r2, [r7, #8]
 8006462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29b      	uxth	r3, r3
 8006470:	2bff      	cmp	r3, #255	; 0xff
 8006472:	d90e      	bls.n	8006492 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647e:	b2da      	uxtb	r2, r3
 8006480:	8979      	ldrh	r1, [r7, #10]
 8006482:	4b51      	ldr	r3, [pc, #324]	; (80065c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fbdc 	bl	8006c48 <I2C_TransferConfig>
 8006490:	e06c      	b.n	800656c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	8979      	ldrh	r1, [r7, #10]
 80064a4:	4b48      	ldr	r3, [pc, #288]	; (80065c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 fbcb 	bl	8006c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80064b2:	e05b      	b.n	800656c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	6a39      	ldr	r1, [r7, #32]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f9e2 	bl	8006882 <I2C_WaitOnTXISFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e07b      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d034      	beq.n	800656c <HAL_I2C_Master_Transmit+0x184>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d130      	bne.n	800656c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	2200      	movs	r2, #0
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f974 	bl	8006802 <I2C_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e04d      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2bff      	cmp	r3, #255	; 0xff
 800652c:	d90e      	bls.n	800654c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	22ff      	movs	r2, #255	; 0xff
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	b2da      	uxtb	r2, r3
 800653a:	8979      	ldrh	r1, [r7, #10]
 800653c:	2300      	movs	r3, #0
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fb7f 	bl	8006c48 <I2C_TransferConfig>
 800654a:	e00f      	b.n	800656c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655a:	b2da      	uxtb	r2, r3
 800655c:	8979      	ldrh	r1, [r7, #10]
 800655e:	2300      	movs	r3, #0
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fb6e 	bl	8006c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d19e      	bne.n	80064b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	6a39      	ldr	r1, [r7, #32]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f9c1 	bl	8006902 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e01a      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2220      	movs	r2, #32
 8006590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_I2C_Master_Transmit+0x1e4>)
 800659e:	400b      	ands	r3, r1
 80065a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	80002000 	.word	0x80002000
 80065cc:	fe00e800 	.word	0xfe00e800

080065d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	460b      	mov	r3, r1
 80065de:	817b      	strh	r3, [r7, #10]
 80065e0:	4613      	mov	r3, r2
 80065e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	f040 80db 	bne.w	80067a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_I2C_Master_Receive+0x30>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0d4      	b.n	80067aa <HAL_I2C_Master_Receive+0x1da>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006608:	f7fc fb10 	bl	8002c2c <HAL_GetTick>
 800660c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2319      	movs	r3, #25
 8006614:	2201      	movs	r2, #1
 8006616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f8f1 	bl	8006802 <I2C_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0bf      	b.n	80067aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2222      	movs	r2, #34	; 0x22
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2210      	movs	r2, #16
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	893a      	ldrh	r2, [r7, #8]
 800664a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	2bff      	cmp	r3, #255	; 0xff
 800665a:	d90e      	bls.n	800667a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	22ff      	movs	r2, #255	; 0xff
 8006660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	b2da      	uxtb	r2, r3
 8006668:	8979      	ldrh	r1, [r7, #10]
 800666a:	4b52      	ldr	r3, [pc, #328]	; (80067b4 <HAL_I2C_Master_Receive+0x1e4>)
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fae8 	bl	8006c48 <I2C_TransferConfig>
 8006678:	e06d      	b.n	8006756 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006688:	b2da      	uxtb	r2, r3
 800668a:	8979      	ldrh	r1, [r7, #10]
 800668c:	4b49      	ldr	r3, [pc, #292]	; (80067b4 <HAL_I2C_Master_Receive+0x1e4>)
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fad7 	bl	8006c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800669a:	e05c      	b.n	8006756 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	6a39      	ldr	r1, [r7, #32]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f96b 	bl	800697c <I2C_WaitOnRXNEFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e07c      	b.n	80067aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d034      	beq.n	8006756 <HAL_I2C_Master_Receive+0x186>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d130      	bne.n	8006756 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2200      	movs	r2, #0
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f87f 	bl	8006802 <I2C_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e04d      	b.n	80067aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006712:	b29b      	uxth	r3, r3
 8006714:	2bff      	cmp	r3, #255	; 0xff
 8006716:	d90e      	bls.n	8006736 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	22ff      	movs	r2, #255	; 0xff
 800671c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006722:	b2da      	uxtb	r2, r3
 8006724:	8979      	ldrh	r1, [r7, #10]
 8006726:	2300      	movs	r3, #0
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fa8a 	bl	8006c48 <I2C_TransferConfig>
 8006734:	e00f      	b.n	8006756 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006744:	b2da      	uxtb	r2, r3
 8006746:	8979      	ldrh	r1, [r7, #10]
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa79 	bl	8006c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d19d      	bne.n	800669c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	6a39      	ldr	r1, [r7, #32]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8cc 	bl	8006902 <I2C_WaitOnSTOPFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e01a      	b.n	80067aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2220      	movs	r2, #32
 800677a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_I2C_Master_Receive+0x1e8>)
 8006788:	400b      	ands	r3, r1
 800678a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	80002400 	.word	0x80002400
 80067b8:	fe00e800 	.word	0xfe00e800

080067bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d103      	bne.n	80067da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d007      	beq.n	80067f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	619a      	str	r2, [r3, #24]
  }
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006812:	e022      	b.n	800685a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d01e      	beq.n	800685a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681c:	f7fc fa06 	bl	8002c2c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d302      	bcc.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x30>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d113      	bne.n	800685a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e00f      	b.n	800687a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	429a      	cmp	r2, r3
 8006876:	d0cd      	beq.n	8006814 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800688e:	e02c      	b.n	80068ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f8eb 	bl	8006a70 <I2C_IsErrorOccurred>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e02a      	b.n	80068fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d01e      	beq.n	80068ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ac:	f7fc f9be 	bl	8002c2c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d113      	bne.n	80068ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e007      	b.n	80068fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d1cb      	bne.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800690e:	e028      	b.n	8006962 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f8ab 	bl	8006a70 <I2C_IsErrorOccurred>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e026      	b.n	8006972 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006924:	f7fc f982 	bl	8002c2c <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d113      	bne.n	8006962 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e007      	b.n	8006972 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b20      	cmp	r3, #32
 800696e:	d1cf      	bne.n	8006910 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006988:	e064      	b.n	8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f86e 	bl	8006a70 <I2C_IsErrorOccurred>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e062      	b.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d138      	bne.n	8006a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d105      	bne.n	80069c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e04e      	b.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d107      	bne.n	80069e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2210      	movs	r2, #16
 80069da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2204      	movs	r2, #4
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
 80069e2:	e002      	b.n	80069ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2220      	movs	r2, #32
 80069f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6859      	ldr	r1, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80069fe:	400b      	ands	r3, r1
 8006a00:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e022      	b.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fc f905 	bl	8002c2c <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10f      	bne.n	8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f043 0220 	orr.w	r2, r3, #32
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e007      	b.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d193      	bne.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	fe00e800 	.word	0xfe00e800

08006a70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d075      	beq.n	8006b88 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2210      	movs	r2, #16
 8006aa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006aa4:	e056      	b.n	8006b54 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d052      	beq.n	8006b54 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aae:	f7fc f8bd 	bl	8002c2c <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <I2C_IsErrorOccurred+0x54>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d147      	bne.n	8006b54 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ace:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ad6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae6:	d12e      	bne.n	8006b46 <I2C_IsErrorOccurred+0xd6>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aee:	d02a      	beq.n	8006b46 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006af0:	7cfb      	ldrb	r3, [r7, #19]
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d027      	beq.n	8006b46 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b04:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b06:	f7fc f891 	bl	8002c2c <HAL_GetTick>
 8006b0a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b0c:	e01b      	b.n	8006b46 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b0e:	f7fc f88d 	bl	8002c2c <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b19      	cmp	r3, #25
 8006b1a:	d914      	bls.n	8006b46 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b20:	f043 0220 	orr.w	r2, r3, #32
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d1dc      	bne.n	8006b0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d003      	beq.n	8006b6a <I2C_IsErrorOccurred+0xfa>
 8006b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d09d      	beq.n	8006aa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2220      	movs	r2, #32
 8006b78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	f043 0304 	orr.w	r3, r3, #4
 8006b80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006baa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	f043 0308 	orr.w	r3, r3, #8
 8006bc2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	f043 0302 	orr.w	r3, r3, #2
 8006be4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01c      	beq.n	8006c38 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fddc 	bl	80067bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6859      	ldr	r1, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <I2C_IsErrorOccurred+0x1d4>)
 8006c10:	400b      	ands	r3, r1
 8006c12:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3728      	adds	r7, #40	; 0x28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	fe00e800 	.word	0xfe00e800

08006c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	817b      	strh	r3, [r7, #10]
 8006c56:	4613      	mov	r3, r2
 8006c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c5a:	897b      	ldrh	r3, [r7, #10]
 8006c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c60:	7a7b      	ldrb	r3, [r7, #9]
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c68:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c76:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	0d5b      	lsrs	r3, r3, #21
 8006c82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <I2C_TransferConfig+0x5c>)
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	ea02 0103 	and.w	r1, r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr
 8006ca4:	03ff63ff 	.word	0x03ff63ff

08006ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d138      	bne.n	8006d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e032      	b.n	8006d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2224      	movs	r2, #36	; 0x24
 8006cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6819      	ldr	r1, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e000      	b.n	8006d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d30:	2302      	movs	r3, #2
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d139      	bne.n	8006dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e033      	b.n	8006dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	; 0x24
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0201 	orr.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e000      	b.n	8006dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dc6:	2302      	movs	r3, #2
  }
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr
	...

08006dd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <HAL_PWR_EnableBkUpAccess+0x18>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a03      	ldr	r2, [pc, #12]	; (8006dec <HAL_PWR_EnableBkUpAccess+0x18>)
 8006dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr
 8006dec:	58000400 	.word	0x58000400

08006df0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10c      	bne.n	8006e1c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006e02:	4b13      	ldr	r3, [pc, #76]	; (8006e50 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0e:	d10d      	bne.n	8006e2c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006e10:	f000 f83c 	bl	8006e8c <HAL_PWREx_DisableLowPowerRunMode>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d008      	beq.n	8006e2c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006e1a:	e015      	b.n	8006e48 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006e28:	f000 f822 	bl	8006e70 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006e32:	f023 0304 	bic.w	r3, r3, #4
 8006e36:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006e3e:	bf30      	wfi
 8006e40:	e002      	b.n	8006e48 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006e42:	bf40      	sev
    __WFE();
 8006e44:	bf20      	wfe
    __WFE();
 8006e46:	bf20      	wfe
  }
}
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	58000400 	.word	0x58000400
 8006e54:	e000ed00 	.word	0xe000ed00

08006e58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006e5c:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <HAL_PWREx_GetVoltageRange+0x14>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr
 8006e6c:	58000400 	.word	0x58000400

08006e70 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a03      	ldr	r2, [pc, #12]	; (8006e88 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr
 8006e88:	58000400 	.word	0x58000400

08006e8c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2232      	movs	r2, #50	; 0x32
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
 8006ea8:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006eae:	0c9b      	lsrs	r3, r3, #18
 8006eb0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006eb2:	e002      	b.n	8006eba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec6:	d102      	bne.n	8006ece <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f2      	bne.n	8006eb4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006ece:	4b07      	ldr	r3, [pc, #28]	; (8006eec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eda:	d101      	bne.n	8006ee0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e000      	b.n	8006ee2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	58000400 	.word	0x58000400
 8006ef0:	2000000c 	.word	0x2000000c
 8006ef4:	431bde83 	.word	0x431bde83

08006ef8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	4a0e      	ldr	r2, [pc, #56]	; (8006f44 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006f0c:	f043 0302 	orr.w	r3, r3, #2
 8006f10:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006f12:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	4a0c      	ldr	r2, [pc, #48]	; (8006f48 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006f18:	f043 0304 	orr.w	r3, r3, #4
 8006f1c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006f24:	bf30      	wfi
 8006f26:	e002      	b.n	8006f2e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006f28:	bf40      	sev
    __WFE();
 8006f2a:	bf20      	wfe
    __WFE();
 8006f2c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	4a05      	ldr	r2, [pc, #20]	; (8006f48 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006f34:	f023 0304 	bic.w	r3, r3, #4
 8006f38:	6113      	str	r3, [r2, #16]
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr
 8006f44:	58000400 	.word	0x58000400
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d101      	bne.n	8006f62 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr
 8006f6c:	58000400 	.word	0x58000400

08006f70 <LL_RCC_HSE_EnableTcxo>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f82:	6013      	str	r3, [r2, #0]
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <LL_RCC_HSE_DisableTcxo>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f9e:	6013      	str	r3, [r2, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fba:	d101      	bne.n	8006fc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <LL_RCC_HSE_Enable>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fdc:	6013      	str	r3, [r2, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <LL_RCC_HSE_Disable>:
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff8:	6013      	str	r3, [r2, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <LL_RCC_HSE_IsReady>:
{
 8007002:	b480      	push	{r7}
 8007004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007014:	d101      	bne.n	800701a <LL_RCC_HSE_IsReady+0x18>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <LL_RCC_HSE_IsReady+0x1a>
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <LL_RCC_HSI_Enable>:
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007036:	6013      	str	r3, [r2, #0]
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <LL_RCC_HSI_Disable>:
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800704e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007052:	6013      	str	r3, [r2, #0]
}
 8007054:	bf00      	nop
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr

0800705c <LL_RCC_HSI_IsReady>:
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706e:	d101      	bne.n	8007074 <LL_RCC_HSI_IsReady+0x18>
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <LL_RCC_HSI_IsReady+0x1a>
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <LL_RCC_HSI_SetCalibTrimming>:
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	061b      	lsls	r3, r3, #24
 8007094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007098:	4313      	orrs	r3, r2
 800709a:	604b      	str	r3, [r1, #4]
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <LL_RCC_LSE_IsReady>:
{
 80070a6:	b480      	push	{r7}
 80070a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80070aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d101      	bne.n	80070be <LL_RCC_LSE_IsReady+0x18>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <LL_RCC_LSE_IsReady+0x1a>
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <LL_RCC_LSI_Enable>:
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80070cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80070e0:	bf00      	nop
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <LL_RCC_LSI_Disable>:
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80070ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007100:	bf00      	nop
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <LL_RCC_LSI_IsReady>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d101      	bne.n	8007120 <LL_RCC_LSI_IsReady+0x18>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <LL_RCC_LSI_IsReady+0x1a>
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <LL_RCC_MSI_Enable>:
{
 800712a:	b480      	push	{r7}
 800712c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800712e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	6013      	str	r3, [r2, #0]
}
 800713e:	bf00      	nop
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <LL_RCC_MSI_Disable>:
{
 8007146:	b480      	push	{r7}
 8007148:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800714a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	6013      	str	r3, [r2, #0]
}
 800715a:	bf00      	nop
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr

08007162 <LL_RCC_MSI_IsReady>:
{
 8007162:	b480      	push	{r7}
 8007164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b02      	cmp	r3, #2
 8007172:	d101      	bne.n	8007178 <LL_RCC_MSI_IsReady+0x16>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <LL_RCC_MSI_IsReady+0x18>
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr

08007182 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007182:	b480      	push	{r7}
 8007184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d101      	bne.n	8007198 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr

080071a2 <LL_RCC_MSI_GetRange>:
{
 80071a2:	b480      	push	{r7}
 80071a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80071a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071ea:	4313      	orrs	r3, r2
 80071ec:	604b      	str	r3, [r1, #4]
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr

080071f8 <LL_RCC_SetSysClkSource>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f023 0203 	bic.w	r2, r3, #3
 800720a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4313      	orrs	r3, r2
 8007212:	608b      	str	r3, [r1, #8]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr

0800721e <LL_RCC_GetSysClkSource>:
{
 800721e:	b480      	push	{r7}
 8007220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 030c 	and.w	r3, r3, #12
}
 800722c:	4618      	mov	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	bc80      	pop	{r7}
 8007232:	4770      	bx	lr

08007234 <LL_RCC_SetAHBPrescaler>:
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800723c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4313      	orrs	r3, r2
 800724e:	608b      	str	r3, [r1, #8]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <LL_RCC_SetAHB3Prescaler>:
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007266:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800726a:	f023 020f 	bic.w	r2, r3, #15
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	091b      	lsrs	r3, r3, #4
 8007272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <LL_RCC_SetAPB1Prescaler>:
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800728e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4313      	orrs	r3, r2
 80072a0:	608b      	str	r3, [r1, #8]
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <LL_RCC_SetAPB2Prescaler>:
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	608b      	str	r3, [r1, #8]
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <LL_RCC_GetAHBPrescaler>:
{
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80072d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr

080072e8 <LL_RCC_GetAHB3Prescaler>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80072ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr

08007302 <LL_RCC_GetAPB1Prescaler>:
{
 8007302:	b480      	push	{r7}
 8007304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007310:	4618      	mov	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <LL_RCC_GetAPB2Prescaler>:
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800731c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007326:	4618      	mov	r0, r3
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr

0800732e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800732e:	b480      	push	{r7}
 8007330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800733c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007340:	6013      	str	r3, [r2, #0]
}
 8007342:	bf00      	nop
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800734a:	b480      	push	{r7}
 800734c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800734e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800735c:	6013      	str	r3, [r2, #0]
}
 800735e:	bf00      	nop
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007366:	b480      	push	{r7}
 8007368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800736a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007378:	d101      	bne.n	800737e <LL_RCC_PLL_IsReady+0x18>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <LL_RCC_PLL_IsReady+0x1a>
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800738c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr

080073a0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80073a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80073b6:	b480      	push	{r7}
 80073b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80073ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80073d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f003 0303 	and.w	r3, r3, #3
}
 80073da:	4618      	mov	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80073e2:	b480      	push	{r7}
 80073e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80073e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f4:	d101      	bne.n	80073fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007418:	d101      	bne.n	800741e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800742c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800743a:	d101      	bne.n	8007440 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800744a:	b480      	push	{r7}
 800744c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800744e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800745c:	d101      	bne.n	8007462 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e38b      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800747e:	f7ff fece 	bl	800721e <LL_RCC_GetSysClkSource>
 8007482:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007484:	f7ff ffa2 	bl	80073cc <LL_RCC_PLL_GetMainSource>
 8007488:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80c9 	beq.w	800762a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <HAL_RCC_OscConfig+0x3e>
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	2b0c      	cmp	r3, #12
 80074a2:	d17b      	bne.n	800759c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d178      	bne.n	800759c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074aa:	f7ff fe5a 	bl	8007162 <LL_RCC_MSI_IsReady>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_OscConfig+0x54>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e36a      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_RCC_OscConfig+0x72>
 80074d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074dc:	e006      	b.n	80074ec <HAL_RCC_OscConfig+0x80>
 80074de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d222      	bcs.n	8007536 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fd51 	bl	8007f9c <RCC_SetFlashLatencyFromMSIRange>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e348      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800750e:	f043 0308 	orr.w	r3, r3, #8
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007526:	4313      	orrs	r3, r2
 8007528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff fe4e 	bl	80071d0 <LL_RCC_MSI_SetCalibTrimming>
 8007534:	e021      	b.n	800757a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007558:	4313      	orrs	r3, r2
 800755a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff fe35 	bl	80071d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fd16 	bl	8007f9c <RCC_SetFlashLatencyFromMSIRange>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e30d      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800757a:	f000 fcd7 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 800757e:	4603      	mov	r3, r0
 8007580:	4aa1      	ldr	r2, [pc, #644]	; (8007808 <HAL_RCC_OscConfig+0x39c>)
 8007582:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007584:	4ba1      	ldr	r3, [pc, #644]	; (800780c <HAL_RCC_OscConfig+0x3a0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f7fb fb45 	bl	8002c18 <HAL_InitTick>
 800758e:	4603      	mov	r3, r0
 8007590:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007592:	7cfb      	ldrb	r3, [r7, #19]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d047      	beq.n	8007628 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8007598:	7cfb      	ldrb	r3, [r7, #19]
 800759a:	e2fc      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02c      	beq.n	80075fe <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075a4:	f7ff fdc1 	bl	800712a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80075a8:	f7fb fb40 	bl	8002c2c <HAL_GetTick>
 80075ac:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80075b0:	f7fb fb3c 	bl	8002c2c <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e2e9      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80075c2:	f7ff fdce 	bl	8007162 <LL_RCC_MSI_IsReady>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f1      	beq.n	80075b0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d6:	f043 0308 	orr.w	r3, r3, #8
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075ee:	4313      	orrs	r3, r2
 80075f0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fdea 	bl	80071d0 <LL_RCC_MSI_SetCalibTrimming>
 80075fc:	e015      	b.n	800762a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80075fe:	f7ff fda2 	bl	8007146 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007602:	f7fb fb13 	bl	8002c2c <HAL_GetTick>
 8007606:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800760a:	f7fb fb0f 	bl	8002c2c <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e2bc      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800761c:	f7ff fda1 	bl	8007162 <LL_RCC_MSI_IsReady>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f1      	bne.n	800760a <HAL_RCC_OscConfig+0x19e>
 8007626:	e000      	b.n	800762a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007628:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d05f      	beq.n	80076f6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d005      	beq.n	8007648 <HAL_RCC_OscConfig+0x1dc>
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2b0c      	cmp	r3, #12
 8007640:	d10d      	bne.n	800765e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d10a      	bne.n	800765e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007648:	f7ff fcdb 	bl	8007002 <LL_RCC_HSE_IsReady>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d050      	beq.n	80076f4 <HAL_RCC_OscConfig+0x288>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d14c      	bne.n	80076f4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e29b      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007670:	4313      	orrs	r3, r2
 8007672:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767c:	d102      	bne.n	8007684 <HAL_RCC_OscConfig+0x218>
 800767e:	f7ff fca4 	bl	8006fca <LL_RCC_HSE_Enable>
 8007682:	e00d      	b.n	80076a0 <HAL_RCC_OscConfig+0x234>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800768c:	d104      	bne.n	8007698 <HAL_RCC_OscConfig+0x22c>
 800768e:	f7ff fc6f 	bl	8006f70 <LL_RCC_HSE_EnableTcxo>
 8007692:	f7ff fc9a 	bl	8006fca <LL_RCC_HSE_Enable>
 8007696:	e003      	b.n	80076a0 <HAL_RCC_OscConfig+0x234>
 8007698:	f7ff fca5 	bl	8006fe6 <LL_RCC_HSE_Disable>
 800769c:	f7ff fc76 	bl	8006f8c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d012      	beq.n	80076ce <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a8:	f7fb fac0 	bl	8002c2c <HAL_GetTick>
 80076ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076b0:	f7fb fabc 	bl	8002c2c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b64      	cmp	r3, #100	; 0x64
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e269      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80076c2:	f7ff fc9e 	bl	8007002 <LL_RCC_HSE_IsReady>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0f1      	beq.n	80076b0 <HAL_RCC_OscConfig+0x244>
 80076cc:	e013      	b.n	80076f6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ce:	f7fb faad 	bl	8002c2c <HAL_GetTick>
 80076d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076d6:	f7fb faa9 	bl	8002c2c <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b64      	cmp	r3, #100	; 0x64
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e256      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80076e8:	f7ff fc8b 	bl	8007002 <LL_RCC_HSE_IsReady>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f1      	bne.n	80076d6 <HAL_RCC_OscConfig+0x26a>
 80076f2:	e000      	b.n	80076f6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d04b      	beq.n	800779a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	2b04      	cmp	r3, #4
 8007706:	d005      	beq.n	8007714 <HAL_RCC_OscConfig+0x2a8>
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2b0c      	cmp	r3, #12
 800770c:	d113      	bne.n	8007736 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d110      	bne.n	8007736 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007714:	f7ff fca2 	bl	800705c <LL_RCC_HSI_IsReady>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <HAL_RCC_OscConfig+0x2be>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e235      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fca5 	bl	800707e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007734:	e031      	b.n	800779a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d019      	beq.n	8007772 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800773e:	f7ff fc71 	bl	8007024 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fb fa73 	bl	8002c2c <HAL_GetTick>
 8007746:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800774a:	f7fb fa6f 	bl	8002c2c <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e21c      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800775c:	f7ff fc7e 	bl	800705c <LL_RCC_HSI_IsReady>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f1      	beq.n	800774a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fc87 	bl	800707e <LL_RCC_HSI_SetCalibTrimming>
 8007770:	e013      	b.n	800779a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007772:	f7ff fc65 	bl	8007040 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007776:	f7fb fa59 	bl	8002c2c <HAL_GetTick>
 800777a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800777e:	f7fb fa55 	bl	8002c2c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e202      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007790:	f7ff fc64 	bl	800705c <LL_RCC_HSI_IsReady>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f1      	bne.n	800777e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d06f      	beq.n	8007886 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d057      	beq.n	800785e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d036      	beq.n	8007834 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d006      	beq.n	80077de <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e1db      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d018      	beq.n	800781a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80077e8:	f7ff fc7e 	bl	80070e8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077ec:	f7fb fa1e 	bl	8002c2c <HAL_GetTick>
 80077f0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80077f2:	e00d      	b.n	8007810 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077f4:	f7fb fa1a 	bl	8002c2c <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b11      	cmp	r3, #17
 8007800:	d906      	bls.n	8007810 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e1c7      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
 8007806:	bf00      	nop
 8007808:	2000000c 	.word	0x2000000c
 800780c:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8007810:	f7ff fc7a 	bl	8007108 <LL_RCC_LSI_IsReady>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1ec      	bne.n	80077f4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800781a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007822:	f023 0210 	bic.w	r2, r3, #16
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800782e:	4313      	orrs	r3, r2
 8007830:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007834:	f7ff fc48 	bl	80070c8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007838:	f7fb f9f8 	bl	8002c2c <HAL_GetTick>
 800783c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007840:	f7fb f9f4 	bl	8002c2c <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b11      	cmp	r3, #17
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e1a1      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007852:	f7ff fc59 	bl	8007108 <LL_RCC_LSI_IsReady>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0f1      	beq.n	8007840 <HAL_RCC_OscConfig+0x3d4>
 800785c:	e013      	b.n	8007886 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800785e:	f7ff fc43 	bl	80070e8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007862:	f7fb f9e3 	bl	8002c2c <HAL_GetTick>
 8007866:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007868:	e008      	b.n	800787c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800786a:	f7fb f9df 	bl	8002c2c <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b11      	cmp	r3, #17
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e18c      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800787c:	f7ff fc44 	bl	8007108 <LL_RCC_LSI_IsReady>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f1      	bne.n	800786a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 80d8 	beq.w	8007a44 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007894:	f7ff fb5a 	bl	8006f4c <LL_PWR_IsEnabledBkUpAccess>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d113      	bne.n	80078c6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800789e:	f7ff fa99 	bl	8006dd4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078a2:	f7fb f9c3 	bl	8002c2c <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80078a8:	e008      	b.n	80078bc <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078aa:	f7fb f9bf 	bl	8002c2c <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d901      	bls.n	80078bc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e16c      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80078bc:	f7ff fb46 	bl	8006f4c <LL_PWR_IsEnabledBkUpAccess>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f1      	beq.n	80078aa <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d07b      	beq.n	80079c6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2b85      	cmp	r3, #133	; 0x85
 80078d4:	d003      	beq.n	80078de <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b05      	cmp	r3, #5
 80078dc:	d109      	bne.n	80078f2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80078de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078ea:	f043 0304 	orr.w	r3, r3, #4
 80078ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f2:	f7fb f99b 	bl	8002c2c <HAL_GetTick>
 80078f6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800790c:	e00a      	b.n	8007924 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790e:	f7fb f98d 	bl	8002c2c <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	f241 3288 	movw	r2, #5000	; 0x1388
 800791c:	4293      	cmp	r3, r2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e138      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007924:	f7ff fbbf 	bl	80070a6 <LL_RCC_LSE_IsReady>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0ef      	beq.n	800790e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	2b81      	cmp	r3, #129	; 0x81
 8007934:	d003      	beq.n	800793e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	2b85      	cmp	r3, #133	; 0x85
 800793c:	d121      	bne.n	8007982 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793e:	f7fb f975 	bl	8002c2c <HAL_GetTick>
 8007942:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007958:	e00a      	b.n	8007970 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800795a:	f7fb f967 	bl	8002c2c <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	f241 3288 	movw	r2, #5000	; 0x1388
 8007968:	4293      	cmp	r3, r2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e112      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0ec      	beq.n	800795a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007980:	e060      	b.n	8007a44 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007982:	f7fb f953 	bl	8002c2c <HAL_GetTick>
 8007986:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800799c:	e00a      	b.n	80079b4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799e:	f7fb f945 	bl	8002c2c <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e0f0      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80079b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ec      	bne.n	800799e <HAL_RCC_OscConfig+0x532>
 80079c4:	e03e      	b.n	8007a44 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c6:	f7fb f931 	bl	8002c2c <HAL_GetTick>
 80079ca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80079cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80079e0:	e00a      	b.n	80079f8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f7fb f923 	bl	8002c2c <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e0ce      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80079f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1ec      	bne.n	80079e2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a08:	f7fb f910 	bl	8002c2c <HAL_GetTick>
 8007a0c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007a22:	e00a      	b.n	8007a3a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a24:	f7fb f902 	bl	8002c2c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e0ad      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007a3a:	f7ff fb34 	bl	80070a6 <LL_RCC_LSE_IsReady>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1ef      	bne.n	8007a24 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80a3 	beq.w	8007b94 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d076      	beq.n	8007b42 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d14b      	bne.n	8007af4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5c:	f7ff fc75 	bl	800734a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a60:	f7fb f8e4 	bl	8002c2c <HAL_GetTick>
 8007a64:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007a66:	e008      	b.n	8007a7a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a68:	f7fb f8e0 	bl	8002c2c <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b0a      	cmp	r3, #10
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e08d      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007a7a:	f7ff fc74 	bl	8007366 <LL_RCC_PLL_IsReady>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f1      	bne.n	8007a68 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	4b45      	ldr	r3, [pc, #276]	; (8007ba0 <HAL_RCC_OscConfig+0x734>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a96:	4311      	orrs	r1, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a9c:	0212      	lsls	r2, r2, #8
 8007a9e:	4311      	orrs	r1, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007aa4:	4311      	orrs	r1, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007aaa:	4311      	orrs	r1, r2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aba:	f7ff fc38 	bl	800732e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ace:	f7fb f8ad 	bl	8002c2c <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ad6:	f7fb f8a9 	bl	8002c2c <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b0a      	cmp	r3, #10
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e056      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007ae8:	f7ff fc3d 	bl	8007366 <LL_RCC_PLL_IsReady>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f1      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x66a>
 8007af2:	e04f      	b.n	8007b94 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af4:	f7ff fc29 	bl	800734a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b02:	f023 0303 	bic.w	r3, r3, #3
 8007b06:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8007b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b12:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b1a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1c:	f7fb f886 	bl	8002c2c <HAL_GetTick>
 8007b20:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b24:	f7fb f882 	bl	8002c2c <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b0a      	cmp	r3, #10
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e02f      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007b36:	f7ff fc16 	bl	8007366 <LL_RCC_PLL_IsReady>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f1      	bne.n	8007b24 <HAL_RCC_OscConfig+0x6b8>
 8007b40:	e028      	b.n	8007b94 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e023      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f003 0203 	and.w	r2, r3, #3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d115      	bne.n	8007b90 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d10e      	bne.n	8007b90 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d106      	bne.n	8007b90 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d001      	beq.n	8007b94 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3720      	adds	r7, #32
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	11c1808c 	.word	0x11c1808c

08007ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e10f      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bb8:	4b89      	ldr	r3, [pc, #548]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d91b      	bls.n	8007bfe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc6:	4b86      	ldr	r3, [pc, #536]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f023 0207 	bic.w	r2, r3, #7
 8007bce:	4984      	ldr	r1, [pc, #528]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd6:	f7fb f829 	bl	8002c2c <HAL_GetTick>
 8007bda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bdc:	e008      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bde:	f7fb f825 	bl	8002c2c <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d901      	bls.n	8007bf0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e0f3      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bf0:	4b7b      	ldr	r3, [pc, #492]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d1ef      	bne.n	8007bde <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff fb10 	bl	8007234 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c14:	f7fb f80a 	bl	8002c2c <HAL_GetTick>
 8007c18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c1c:	f7fb f806 	bl	8002c2c <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e0d4      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007c2e:	f7ff fbd8 	bl	80073e2 <LL_RCC_IsActiveFlag_HPRE>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f1      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d016      	beq.n	8007c72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fb06 	bl	800725a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c4e:	f7fa ffed 	bl	8002c2c <HAL_GetTick>
 8007c52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007c54:	e008      	b.n	8007c68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c56:	f7fa ffe9 	bl	8002c2c <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d901      	bls.n	8007c68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e0b7      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007c68:	f7ff fbcc 	bl	8007404 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f1      	beq.n	8007c56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d016      	beq.n	8007cac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff faff 	bl	8007286 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c88:	f7fa ffd0 	bl	8002c2c <HAL_GetTick>
 8007c8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c90:	f7fa ffcc 	bl	8002c2c <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e09a      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ca2:	f7ff fbc1 	bl	8007428 <LL_RCC_IsActiveFlag_PPRE1>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f1      	beq.n	8007c90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d017      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff faf4 	bl	80072ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007cc4:	f7fa ffb2 	bl	8002c2c <HAL_GetTick>
 8007cc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ccc:	f7fa ffae 	bl	8002c2c <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e07c      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007cde:	f7ff fbb4 	bl	800744a <LL_RCC_IsActiveFlag_PPRE2>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f1      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d043      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007cfc:	f7ff f981 	bl	8007002 <LL_RCC_HSE_IsReady>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d11e      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e066      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d106      	bne.n	8007d20 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007d12:	f7ff fb28 	bl	8007366 <LL_RCC_PLL_IsReady>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d113      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e05b      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007d28:	f7ff fa1b 	bl	8007162 <LL_RCC_MSI_IsReady>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d108      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e050      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007d36:	f7ff f991 	bl	800705c <LL_RCC_HSI_IsReady>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e049      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fa55 	bl	80071f8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d4e:	f7fa ff6d 	bl	8002c2c <HAL_GetTick>
 8007d52:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d54:	e00a      	b.n	8007d6c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d56:	f7fa ff69 	bl	8002c2c <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e035      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6c:	f7ff fa57 	bl	800721e <LL_RCC_GetSysClkSource>
 8007d70:	4602      	mov	r2, r0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d1ec      	bne.n	8007d56 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d7c:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d21b      	bcs.n	8007dc2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8a:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f023 0207 	bic.w	r2, r3, #7
 8007d92:	4913      	ldr	r1, [pc, #76]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9a:	f7fa ff47 	bl	8002c2c <HAL_GetTick>
 8007d9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007da0:	e008      	b.n	8007db4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007da2:	f7fa ff43 	bl	8002c2c <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e011      	b.n	8007dd8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db4:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <HAL_RCC_ClockConfig+0x23c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d1ef      	bne.n	8007da2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007dc2:	f000 f8b3 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a06      	ldr	r2, [pc, #24]	; (8007de4 <HAL_RCC_ClockConfig+0x240>)
 8007dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007dcc:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fa ff21 	bl	8002c18 <HAL_InitTick>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	58004000 	.word	0x58004000
 8007de4:	2000000c 	.word	0x2000000c
 8007de8:	20000014 	.word	0x20000014

08007dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dfa:	f7ff fa10 	bl	800721e <LL_RCC_GetSysClkSource>
 8007dfe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e00:	f7ff fae4 	bl	80073cc <LL_RCC_PLL_GetMainSource>
 8007e04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_RCC_GetSysClockFreq+0x2c>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b0c      	cmp	r3, #12
 8007e10:	d139      	bne.n	8007e86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d136      	bne.n	8007e86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007e18:	f7ff f9b3 	bl	8007182 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d115      	bne.n	8007e4e <HAL_RCC_GetSysClockFreq+0x62>
 8007e22:	f7ff f9ae 	bl	8007182 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCC_GetSysClockFreq+0x4e>
 8007e2c:	f7ff f9b9 	bl	80071a2 <LL_RCC_MSI_GetRange>
 8007e30:	4603      	mov	r3, r0
 8007e32:	0a1b      	lsrs	r3, r3, #8
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	e005      	b.n	8007e46 <HAL_RCC_GetSysClockFreq+0x5a>
 8007e3a:	f7ff f9bd 	bl	80071b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	4a36      	ldr	r2, [pc, #216]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x134>)
 8007e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4c:	e014      	b.n	8007e78 <HAL_RCC_GetSysClockFreq+0x8c>
 8007e4e:	f7ff f998 	bl	8007182 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d106      	bne.n	8007e66 <HAL_RCC_GetSysClockFreq+0x7a>
 8007e58:	f7ff f9a3 	bl	80071a2 <LL_RCC_MSI_GetRange>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	091b      	lsrs	r3, r3, #4
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	e005      	b.n	8007e72 <HAL_RCC_GetSysClockFreq+0x86>
 8007e66:	f7ff f9a7 	bl	80071b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	091b      	lsrs	r3, r3, #4
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	4a2b      	ldr	r2, [pc, #172]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x134>)
 8007e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d115      	bne.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e84:	e012      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e8c:	4b25      	ldr	r3, [pc, #148]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	e00c      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d109      	bne.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e98:	f7ff f886 	bl	8006fa8 <LL_RCC_HSE_IsEnabledDiv2>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d102      	bne.n	8007ea8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007ea2:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e001      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007ea8:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007eaa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007eac:	f7ff f9b7 	bl	800721e <LL_RCC_GetSysClkSource>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	d12f      	bne.n	8007f16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007eb6:	f7ff fa89 	bl	80073cc <LL_RCC_PLL_GetMainSource>
 8007eba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_GetSysClockFreq+0xde>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d003      	beq.n	8007ed0 <HAL_RCC_GetSysClockFreq+0xe4>
 8007ec8:	e00d      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ecc:	60fb      	str	r3, [r7, #12]
        break;
 8007ece:	e00d      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007ed0:	f7ff f86a 	bl	8006fa8 <LL_RCC_HSE_IsEnabledDiv2>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d102      	bne.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8007edc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007ede:	e005      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007ee0:	4b11      	ldr	r3, [pc, #68]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007ee2:	60fb      	str	r3, [r7, #12]
        break;
 8007ee4:	e002      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	60fb      	str	r3, [r7, #12]
        break;
 8007eea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007eec:	f7ff fa4c 	bl	8007388 <LL_RCC_PLL_GetN>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	fb03 f402 	mul.w	r4, r3, r2
 8007ef8:	f7ff fa5d 	bl	80073b6 <LL_RCC_PLL_GetDivider>
 8007efc:	4603      	mov	r3, r0
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	3301      	adds	r3, #1
 8007f02:	fbb4 f4f3 	udiv	r4, r4, r3
 8007f06:	f7ff fa4b 	bl	80073a0 <LL_RCC_PLL_GetR>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	0f5b      	lsrs	r3, r3, #29
 8007f0e:	3301      	adds	r3, #1
 8007f10:	fbb4 f3f3 	udiv	r3, r4, r3
 8007f14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007f16:	697b      	ldr	r3, [r7, #20]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}
 8007f20:	0801f63c 	.word	0x0801f63c
 8007f24:	00f42400 	.word	0x00f42400
 8007f28:	01e84800 	.word	0x01e84800

08007f2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f2c:	b598      	push	{r3, r4, r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007f30:	f7ff ff5c 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8007f34:	4604      	mov	r4, r0
 8007f36:	f7ff f9cc 	bl	80072d2 <LL_RCC_GetAHBPrescaler>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	091b      	lsrs	r3, r3, #4
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	4a03      	ldr	r2, [pc, #12]	; (8007f50 <HAL_RCC_GetHCLKFreq+0x24>)
 8007f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	bd98      	pop	{r3, r4, r7, pc}
 8007f50:	0801f5dc 	.word	0x0801f5dc

08007f54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f54:	b598      	push	{r3, r4, r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007f58:	f7ff ffe8 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	f7ff f9d0 	bl	8007302 <LL_RCC_GetAPB1Prescaler>
 8007f62:	4603      	mov	r3, r0
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	4a03      	ldr	r2, [pc, #12]	; (8007f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	bd98      	pop	{r3, r4, r7, pc}
 8007f74:	0801f61c 	.word	0x0801f61c

08007f78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f78:	b598      	push	{r3, r4, r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007f7c:	f7ff ffd6 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 8007f80:	4604      	mov	r4, r0
 8007f82:	f7ff f9c9 	bl	8007318 <LL_RCC_GetAPB2Prescaler>
 8007f86:	4603      	mov	r3, r0
 8007f88:	0adb      	lsrs	r3, r3, #11
 8007f8a:	4a03      	ldr	r2, [pc, #12]	; (8007f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	bd98      	pop	{r3, r4, r7, pc}
 8007f98:	0801f61c 	.word	0x0801f61c

08007f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	091b      	lsrs	r3, r3, #4
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	4a10      	ldr	r2, [pc, #64]	; (8007ff0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007fb4:	f7ff f998 	bl	80072e8 <LL_RCC_GetAHB3Prescaler>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	091b      	lsrs	r3, r3, #4
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	4a0c      	ldr	r2, [pc, #48]	; (8007ff4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	0c9c      	lsrs	r4, r3, #18
 8007fd8:	f7fe ff3e 	bl	8006e58 <HAL_PWREx_GetVoltageRange>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 f80b 	bl	8007ffc <RCC_SetFlashLatency>
 8007fe6:	4603      	mov	r3, r0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd90      	pop	{r4, r7, pc}
 8007ff0:	0801f63c 	.word	0x0801f63c
 8007ff4:	0801f5dc 	.word	0x0801f5dc
 8007ff8:	431bde83 	.word	0x431bde83

08007ffc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08e      	sub	sp, #56	; 0x38
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8008006:	4a3a      	ldr	r2, [pc, #232]	; (80080f0 <RCC_SetFlashLatency+0xf4>)
 8008008:	f107 0320 	add.w	r3, r7, #32
 800800c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	3304      	adds	r3, #4
 8008014:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8008016:	4a37      	ldr	r2, [pc, #220]	; (80080f4 <RCC_SetFlashLatency+0xf8>)
 8008018:	f107 0318 	add.w	r3, r7, #24
 800801c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008020:	6018      	str	r0, [r3, #0]
 8008022:	3304      	adds	r3, #4
 8008024:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8008026:	4a34      	ldr	r2, [pc, #208]	; (80080f8 <RCC_SetFlashLatency+0xfc>)
 8008028:	f107 030c 	add.w	r3, r7, #12
 800802c:	ca07      	ldmia	r2, {r0, r1, r2}
 800802e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008032:	2300      	movs	r3, #0
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803c:	d11b      	bne.n	8008076 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800803e:	2300      	movs	r3, #0
 8008040:	633b      	str	r3, [r7, #48]	; 0x30
 8008042:	e014      	b.n	800806e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	3338      	adds	r3, #56	; 0x38
 800804a:	443b      	add	r3, r7
 800804c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4293      	cmp	r3, r2
 8008056:	d807      	bhi.n	8008068 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	3338      	adds	r3, #56	; 0x38
 800805e:	443b      	add	r3, r7
 8008060:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008066:	e021      	b.n	80080ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	3301      	adds	r3, #1
 800806c:	633b      	str	r3, [r7, #48]	; 0x30
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	2b02      	cmp	r3, #2
 8008072:	d9e7      	bls.n	8008044 <RCC_SetFlashLatency+0x48>
 8008074:	e01a      	b.n	80080ac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008076:	2300      	movs	r3, #0
 8008078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800807a:	e014      	b.n	80080a6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	3338      	adds	r3, #56	; 0x38
 8008082:	443b      	add	r3, r7
 8008084:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008088:	461a      	mov	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4293      	cmp	r3, r2
 800808e:	d807      	bhi.n	80080a0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	3338      	adds	r3, #56	; 0x38
 8008096:	443b      	add	r3, r7
 8008098:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800809e:	e005      	b.n	80080ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	3301      	adds	r3, #1
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d9e7      	bls.n	800807c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80080ac:	4b13      	ldr	r3, [pc, #76]	; (80080fc <RCC_SetFlashLatency+0x100>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f023 0207 	bic.w	r2, r3, #7
 80080b4:	4911      	ldr	r1, [pc, #68]	; (80080fc <RCC_SetFlashLatency+0x100>)
 80080b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b8:	4313      	orrs	r3, r2
 80080ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080bc:	f7fa fdb6 	bl	8002c2c <HAL_GetTick>
 80080c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80080c2:	e008      	b.n	80080d6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80080c4:	f7fa fdb2 	bl	8002c2c <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e007      	b.n	80080e6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <RCC_SetFlashLatency+0x100>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d1ef      	bne.n	80080c4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3738      	adds	r7, #56	; 0x38
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	0801ecdc 	.word	0x0801ecdc
 80080f4:	0801ece4 	.word	0x0801ece4
 80080f8:	0801ecec 	.word	0x0801ecec
 80080fc:	58004000 	.word	0x58004000

08008100 <LL_RCC_LSE_IsReady>:
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b02      	cmp	r3, #2
 8008112:	d101      	bne.n	8008118 <LL_RCC_LSE_IsReady+0x18>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <LL_RCC_LSE_IsReady+0x1a>
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr

08008122 <LL_RCC_SetUSARTClockSource>:
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800812a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800812e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	43db      	mvns	r3, r3
 8008138:	401a      	ands	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <LL_RCC_SetI2SClockSource>:
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800815a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr

0800817c <LL_RCC_SetLPUARTClockSource>:
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4313      	orrs	r3, r2
 8008198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <LL_RCC_SetI2CClockSource>:
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80081ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80081be:	43db      	mvns	r3, r3
 80081c0:	401a      	ands	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80081ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <LL_RCC_SetLPTIMClockSource>:
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80081e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	43db      	mvns	r3, r3
 80081f6:	401a      	ands	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008200:	4313      	orrs	r3, r2
 8008202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <LL_RCC_SetRNGClockSource>:
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800821c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008220:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4313      	orrs	r3, r2
 800822c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <LL_RCC_SetADCClockSource>:
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800824e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr

08008264 <LL_RCC_SetRTCClockSource>:
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800826c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4313      	orrs	r3, r2
 8008280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <LL_RCC_GetRTCClockSource>:
{
 800828e:	b480      	push	{r7}
 8008290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800829e:	4618      	mov	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr

080082a6 <LL_RCC_ForceBackupDomainReset>:
{
 80082a6:	b480      	push	{r7}
 80082a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80082aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80082be:	bf00      	nop
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bc80      	pop	{r7}
 80082c4:	4770      	bx	lr

080082c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80082c6:	b480      	push	{r7}
 80082c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80082ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80082de:	bf00      	nop
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr
	...

080082e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80082f4:	2300      	movs	r3, #0
 80082f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80082f8:	2300      	movs	r3, #0
 80082fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d058      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008308:	f7fe fd64 	bl	8006dd4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800830c:	f7fa fc8e 	bl	8002c2c <HAL_GetTick>
 8008310:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008312:	e009      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008314:	f7fa fc8a 	bl	8002c2c <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d902      	bls.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	74fb      	strb	r3, [r7, #19]
        break;
 8008326:	e006      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008328:	4b7b      	ldr	r3, [pc, #492]	; (8008518 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008334:	d1ee      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008336:	7cfb      	ldrb	r3, [r7, #19]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d13c      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800833c:	f7ff ffa7 	bl	800828e <LL_RCC_GetRTCClockSource>
 8008340:	4602      	mov	r2, r0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008346:	429a      	cmp	r2, r3
 8008348:	d00f      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800834a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008356:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008358:	f7ff ffa5 	bl	80082a6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800835c:	f7ff ffb3 	bl	80082c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d014      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7fa fc5a 	bl	8002c2c <HAL_GetTick>
 8008378:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800837a:	e00b      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800837c:	f7fa fc56 	bl	8002c2c <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	f241 3288 	movw	r2, #5000	; 0x1388
 800838a:	4293      	cmp	r3, r2
 800838c:	d902      	bls.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	74fb      	strb	r3, [r7, #19]
            break;
 8008392:	e004      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008394:	f7ff feb4 	bl	8008100 <LL_RCC_LSE_IsReady>
 8008398:	4603      	mov	r3, r0
 800839a:	2b01      	cmp	r3, #1
 800839c:	d1ee      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800839e:	7cfb      	ldrb	r3, [r7, #19]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d105      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff ff5b 	bl	8008264 <LL_RCC_SetRTCClockSource>
 80083ae:	e004      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083b0:	7cfb      	ldrb	r3, [r7, #19]
 80083b2:	74bb      	strb	r3, [r7, #18]
 80083b4:	e001      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b6:	7cfb      	ldrb	r3, [r7, #19]
 80083b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fea9 	bl	8008122 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fe9e 	bl	8008122 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fec0 	bl	800817c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fee6 	bl	80081de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fedb 	bl	80081de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff fed0 	bl	80081de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fea9 	bl	80081a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fe9e 	bl	80081a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fe93 	bl	80081a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	d011      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fe5e 	bl	8008152 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849e:	d107      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80084a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fea5 	bl	8008210 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d107      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80084ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d011      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff fea3 	bl	800823a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084fc:	d107      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80084fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800850e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	58000400 	.word	0x58000400

0800851c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d068      	beq.n	8008600 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7f9 ffb8 	bl	80024b8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008550:	4b2e      	ldr	r3, [pc, #184]	; (800860c <HAL_RTC_Init+0xf0>)
 8008552:	22ca      	movs	r2, #202	; 0xca
 8008554:	625a      	str	r2, [r3, #36]	; 0x24
 8008556:	4b2d      	ldr	r3, [pc, #180]	; (800860c <HAL_RTC_Init+0xf0>)
 8008558:	2253      	movs	r2, #83	; 0x53
 800855a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa0f 	bl	8008980 <RTC_EnterInitMode>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d13f      	bne.n	80085ec <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800856c:	4b27      	ldr	r3, [pc, #156]	; (800860c <HAL_RTC_Init+0xf0>)
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	4a26      	ldr	r2, [pc, #152]	; (800860c <HAL_RTC_Init+0xf0>)
 8008572:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800857c:	4b23      	ldr	r3, [pc, #140]	; (800860c <HAL_RTC_Init+0xf0>)
 800857e:	699a      	ldr	r2, [r3, #24]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6859      	ldr	r1, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	4319      	orrs	r1, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	430b      	orrs	r3, r1
 8008590:	491e      	ldr	r1, [pc, #120]	; (800860c <HAL_RTC_Init+0xf0>)
 8008592:	4313      	orrs	r3, r2
 8008594:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	491a      	ldr	r1, [pc, #104]	; (800860c <HAL_RTC_Init+0xf0>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80085a6:	4b19      	ldr	r3, [pc, #100]	; (800860c <HAL_RTC_Init+0xf0>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	430b      	orrs	r3, r1
 80085b8:	4914      	ldr	r1, [pc, #80]	; (800860c <HAL_RTC_Init+0xf0>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa12 	bl	80089e8 <RTC_ExitInitMode>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10e      	bne.n	80085ec <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80085ce:	4b0f      	ldr	r3, [pc, #60]	; (800860c <HAL_RTC_Init+0xf0>)
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a19      	ldr	r1, [r3, #32]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	4319      	orrs	r1, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	430b      	orrs	r3, r1
 80085e6:	4909      	ldr	r1, [pc, #36]	; (800860c <HAL_RTC_Init+0xf0>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ec:	4b07      	ldr	r3, [pc, #28]	; (800860c <HAL_RTC_Init+0xf0>)
 80085ee:	22ff      	movs	r2, #255	; 0xff
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40002800 	.word	0x40002800

08008610 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <HAL_RTC_SetAlarm_IT+0x1e>
 800862a:	2302      	movs	r3, #2
 800862c:	e0f3      	b.n	8008816 <HAL_RTC_SetAlarm_IT+0x206>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800863e:	4b78      	ldr	r3, [pc, #480]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008646:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864e:	d06a      	beq.n	8008726 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d13a      	bne.n	80086cc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008656:	4b72      	ldr	r3, [pc, #456]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2200      	movs	r2, #0
 8008666:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f9f5 	bl	8008a64 <RTC_ByteToBcd2>
 800867a:	4603      	mov	r3, r0
 800867c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f9ee 	bl	8008a64 <RTC_ByteToBcd2>
 8008688:	4603      	mov	r3, r0
 800868a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800868c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	789b      	ldrb	r3, [r3, #2]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f9e6 	bl	8008a64 <RTC_ByteToBcd2>
 8008698:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800869a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	78db      	ldrb	r3, [r3, #3]
 80086a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80086a4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f9d8 	bl	8008a64 <RTC_ByteToBcd2>
 80086b4:	4603      	mov	r3, r0
 80086b6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80086b8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80086c0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e02c      	b.n	8008726 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80086d4:	d00d      	beq.n	80086f2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086de:	d008      	beq.n	80086f2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80086e0:	4b4f      	ldr	r3, [pc, #316]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086fe:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008704:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	78db      	ldrb	r3, [r3, #3]
 800870a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800870c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008714:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008716:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800871c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008726:	4b3e      	ldr	r3, [pc, #248]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008728:	22ca      	movs	r2, #202	; 0xca
 800872a:	625a      	str	r2, [r3, #36]	; 0x24
 800872c:	4b3c      	ldr	r3, [pc, #240]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800872e:	2253      	movs	r2, #83	; 0x53
 8008730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800873a:	d12c      	bne.n	8008796 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800873c:	4b38      	ldr	r3, [pc, #224]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	4a37      	ldr	r2, [pc, #220]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008742:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008746:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008748:	4b35      	ldr	r3, [pc, #212]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800874a:	2201      	movs	r2, #1
 800874c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008754:	d107      	bne.n	8008766 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4930      	ldr	r1, [pc, #192]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008760:	4313      	orrs	r3, r2
 8008762:	644b      	str	r3, [r1, #68]	; 0x44
 8008764:	e006      	b.n	8008774 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008766:	4a2e      	ldr	r2, [pc, #184]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800876c:	4a2c      	ldr	r2, [pc, #176]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008774:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008780:	f043 0201 	orr.w	r2, r3, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	4a24      	ldr	r2, [pc, #144]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800878e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008792:	6193      	str	r3, [r2, #24]
 8008794:	e02b      	b.n	80087ee <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008796:	4b22      	ldr	r3, [pc, #136]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	4a21      	ldr	r2, [pc, #132]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 800879c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80087a0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80087a2:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087a4:	2202      	movs	r2, #2
 80087a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ae:	d107      	bne.n	80087c0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	699a      	ldr	r2, [r3, #24]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	4919      	ldr	r1, [pc, #100]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80087be:	e006      	b.n	80087ce <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80087c0:	4a17      	ldr	r2, [pc, #92]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80087c6:	4a16      	ldr	r2, [pc, #88]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80087ce:	4a14      	ldr	r2, [pc, #80]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	f043 0202 	orr.w	r2, r3, #2
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80087e2:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	4a0e      	ldr	r2, [pc, #56]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 80087e8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80087ec:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <HAL_RTC_SetAlarm_IT+0x214>)
 80087f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f4:	4a0b      	ldr	r2, [pc, #44]	; (8008824 <HAL_RTC_SetAlarm_IT+0x214>)
 80087f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <HAL_RTC_SetAlarm_IT+0x210>)
 8008800:	22ff      	movs	r2, #255	; 0xff
 8008802:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	bd90      	pop	{r4, r7, pc}
 800881e:	bf00      	nop
 8008820:	40002800 	.word	0x40002800
 8008824:	58000800 	.word	0x58000800

08008828 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_RTC_DeactivateAlarm+0x18>
 800883c:	2302      	movs	r3, #2
 800883e:	e048      	b.n	80088d2 <HAL_RTC_DeactivateAlarm+0xaa>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008850:	4b22      	ldr	r3, [pc, #136]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008852:	22ca      	movs	r2, #202	; 0xca
 8008854:	625a      	str	r2, [r3, #36]	; 0x24
 8008856:	4b21      	ldr	r3, [pc, #132]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008858:	2253      	movs	r2, #83	; 0x53
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008862:	d115      	bne.n	8008890 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008864:	4b1d      	ldr	r3, [pc, #116]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 800886a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800886e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008870:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800887a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	f023 0201 	bic.w	r2, r3, #1
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 800888a:	2201      	movs	r2, #1
 800888c:	65da      	str	r2, [r3, #92]	; 0x5c
 800888e:	e014      	b.n	80088ba <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	4a11      	ldr	r2, [pc, #68]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008896:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800889a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 800889e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a0:	4a0e      	ldr	r2, [pc, #56]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 80088a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	f023 0202 	bic.w	r2, r3, #2
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 80088b6:	2202      	movs	r2, #2
 80088b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ba:	4b08      	ldr	r3, [pc, #32]	; (80088dc <HAL_RTC_DeactivateAlarm+0xb4>)
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	40002800 	.word	0x40002800

080088e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80088e8:	4b11      	ldr	r3, [pc, #68]	; (8008930 <HAL_RTC_AlarmIRQHandler+0x50>)
 80088ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	4013      	ands	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80088fe:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008900:	2201      	movs	r2, #1
 8008902:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7fa fc1a 	bl	800313e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008916:	2202      	movs	r2, #2
 8008918:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f94a 	bl	8008bb4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	40002800 	.word	0x40002800

08008934 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <HAL_RTC_WaitForSynchro+0x48>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	4a0e      	ldr	r2, [pc, #56]	; (800897c <HAL_RTC_WaitForSynchro+0x48>)
 8008942:	f023 0320 	bic.w	r3, r3, #32
 8008946:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008948:	f7fa f970 	bl	8002c2c <HAL_GetTick>
 800894c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800894e:	e009      	b.n	8008964 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008950:	f7fa f96c 	bl	8002c2c <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800895e:	d901      	bls.n	8008964 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e006      	b.n	8008972 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <HAL_RTC_WaitForSynchro+0x48>)
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0ef      	beq.n	8008950 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40002800 	.word	0x40002800

08008980 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800898c:	4b15      	ldr	r3, [pc, #84]	; (80089e4 <RTC_EnterInitMode+0x64>)
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d120      	bne.n	80089da <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <RTC_EnterInitMode+0x64>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a11      	ldr	r2, [pc, #68]	; (80089e4 <RTC_EnterInitMode+0x64>)
 800899e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80089a4:	f7fa f942 	bl	8002c2c <HAL_GetTick>
 80089a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80089aa:	e00d      	b.n	80089c8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80089ac:	f7fa f93e 	bl	8002c2c <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ba:	d905      	bls.n	80089c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2203      	movs	r2, #3
 80089c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <RTC_EnterInitMode+0x64>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <RTC_EnterInitMode+0x5a>
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d1e8      	bne.n	80089ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	40002800 	.word	0x40002800

080089e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80089f4:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <RTC_ExitInitMode+0x78>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	4a19      	ldr	r2, [pc, #100]	; (8008a60 <RTC_ExitInitMode+0x78>)
 80089fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008a00:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <RTC_ExitInitMode+0x78>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10c      	bne.n	8008a26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff ff91 	bl	8008934 <HAL_RTC_WaitForSynchro>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01e      	beq.n	8008a56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	73fb      	strb	r3, [r7, #15]
 8008a24:	e017      	b.n	8008a56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <RTC_ExitInitMode+0x78>)
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	4a0d      	ldr	r2, [pc, #52]	; (8008a60 <RTC_ExitInitMode+0x78>)
 8008a2c:	f023 0320 	bic.w	r3, r3, #32
 8008a30:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff ff7e 	bl	8008934 <HAL_RTC_WaitForSynchro>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2203      	movs	r2, #3
 8008a42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <RTC_ExitInitMode+0x78>)
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	4a04      	ldr	r2, [pc, #16]	; (8008a60 <RTC_ExitInitMode+0x78>)
 8008a50:	f043 0320 	orr.w	r3, r3, #32
 8008a54:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40002800 	.word	0x40002800

08008a64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008a76:	e005      	b.n	8008a84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
 8008a80:	3b0a      	subs	r3, #10
 8008a82:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d8f6      	bhi.n	8008a78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	b2db      	uxtb	r3, r3
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr
	...

08008aa4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d101      	bne.n	8008aba <HAL_RTCEx_EnableBypassShadow+0x16>
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e01f      	b.n	8008afa <HAL_RTCEx_EnableBypassShadow+0x56>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aca:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008acc:	22ca      	movs	r2, #202	; 0xca
 8008ace:	625a      	str	r2, [r3, #36]	; 0x24
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008ad2:	2253      	movs	r2, #83	; 0x53
 8008ad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008adc:	f043 0320 	orr.w	r3, r3, #32
 8008ae0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr
 8008b04:	40002800 	.word	0x40002800

08008b08 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <HAL_RTCEx_SetSSRU_IT+0x16>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e027      	b.n	8008b6e <HAL_RTCEx_SetSSRU_IT+0x66>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008b30:	22ca      	movs	r2, #202	; 0xca
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24
 8008b34:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008b36:	2253      	movs	r2, #83	; 0x53
 8008b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	4a0e      	ldr	r2, [pc, #56]	; (8008b78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b44:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b4c:	4a0b      	ldr	r2, [pc, #44]	; (8008b7c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b56:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bc80      	pop	{r7}
 8008b76:	4770      	bx	lr
 8008b78:	40002800 	.word	0x40002800
 8008b7c:	58000800 	.word	0x58000800

08008b80 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008b88:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008b96:	2240      	movs	r2, #64	; 0x40
 8008b98:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fa fad9 	bl	8003152 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40002800 	.word	0x40002800

08008bb4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr
	...

08008bc8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008bd6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4413      	add	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	601a      	str	r2, [r3, #0]
}
 8008be8:	bf00      	nop
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	4000b100 	.word	0x4000b100

08008bf8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008c02:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <HAL_RTCEx_BKUPRead+0x28>)
 8008c04:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	4000b100 	.word	0x4000b100

08008c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e0c6      	b.n	8008dc4 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d108      	bne.n	8008c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c46:	d009      	beq.n	8008c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	61da      	str	r2, [r3, #28]
 8008c4e:	e005      	b.n	8008c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7f9 fccb 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c96:	d902      	bls.n	8008c9e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e002      	b.n	8008ca4 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008cac:	d007      	beq.n	8008cbe <HAL_SPI_Init+0x9a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cb6:	d002      	beq.n	8008cbe <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d00:	ea42 0103 	orr.w	r1, r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d1c:	d11b      	bne.n	8008d56 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d2e:	d903      	bls.n	8008d38 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
 8008d36:	e002      	b.n	8008d3e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d107      	bne.n	8008d56 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	0c1b      	lsrs	r3, r3, #16
 8008d5c:	f003 0204 	and.w	r2, r3, #4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008d7c:	ea42 0103 	orr.w	r1, r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d96:	d105      	bne.n	8008da4 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	b292      	uxth	r2, r2
 8008da2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69da      	ldr	r2, [r3, #28]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_SPI_Transmit+0x22>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e17a      	b.n	80090e4 <HAL_SPI_Transmit+0x318>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008df6:	f7f9 ff19 	bl	8002c2c <HAL_GetTick>
 8008dfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008dfc:	88fb      	ldrh	r3, [r7, #6]
 8008dfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d002      	beq.n	8008e12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e10:	e15f      	b.n	80090d2 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <HAL_SPI_Transmit+0x52>
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e22:	e156      	b.n	80090d2 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2203      	movs	r2, #3
 8008e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	88fa      	ldrh	r2, [r7, #6]
 8008e42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e6e:	d10f      	bne.n	8008e90 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e8e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e98:	d10f      	bne.n	8008eba <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eb8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d007      	beq.n	8008ed8 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ee0:	d94b      	bls.n	8008f7a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <HAL_SPI_Transmit+0x124>
 8008eea:	8afb      	ldrh	r3, [r7, #22]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d13e      	bne.n	8008f6e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	881a      	ldrh	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	1c9a      	adds	r2, r3, #2
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f14:	e02b      	b.n	8008f6e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d112      	bne.n	8008f4a <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	881a      	ldrh	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	1c9a      	adds	r2, r3, #2
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f48:	e011      	b.n	8008f6e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f4a:	f7f9 fe6f 	bl	8002c2c <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d803      	bhi.n	8008f62 <HAL_SPI_Transmit+0x196>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d102      	bne.n	8008f68 <HAL_SPI_Transmit+0x19c>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f6c:	e0b1      	b.n	80090d2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1ce      	bne.n	8008f16 <HAL_SPI_Transmit+0x14a>
 8008f78:	e07c      	b.n	8009074 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_SPI_Transmit+0x1bc>
 8008f82:	8afb      	ldrh	r3, [r7, #22]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d170      	bne.n	800906a <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d912      	bls.n	8008fb8 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	881a      	ldrh	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	1c9a      	adds	r2, r3, #2
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b02      	subs	r3, #2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fb6:	e058      	b.n	800906a <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008fde:	e044      	b.n	800906a <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d12b      	bne.n	8009046 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d912      	bls.n	800901e <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	881a      	ldrh	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	1c9a      	adds	r2, r3, #2
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b02      	subs	r3, #2
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800901c:	e025      	b.n	800906a <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	330c      	adds	r3, #12
 8009028:	7812      	ldrb	r2, [r2, #0]
 800902a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009044:	e011      	b.n	800906a <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009046:	f7f9 fdf1 	bl	8002c2c <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d803      	bhi.n	800905e <HAL_SPI_Transmit+0x292>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905c:	d102      	bne.n	8009064 <HAL_SPI_Transmit+0x298>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d102      	bne.n	800906a <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009068:	e033      	b.n	80090d2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800906e:	b29b      	uxth	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1b5      	bne.n	8008fe0 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800907c:	d107      	bne.n	800908e <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800908c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fe6e 	bl	8009d74 <SPI_EndRxTxTransaction>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090ac:	2300      	movs	r3, #0
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	77fb      	strb	r3, [r7, #31]
 80090ce:	e000      	b.n	80090d2 <HAL_SPI_Transmit+0x306>
  }

error:
 80090d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80090e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	; 0x30
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	4613      	mov	r3, r2
 80090fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009112:	d112      	bne.n	800913a <HAL_SPI_Receive+0x4e>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10e      	bne.n	800913a <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2204      	movs	r2, #4
 8009120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009124:	88fa      	ldrh	r2, [r7, #6]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f9c4 	bl	80094be <HAL_SPI_TransmitReceive>
 8009136:	4603      	mov	r3, r0
 8009138:	e1bd      	b.n	80094b6 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_SPI_Receive+0x5c>
 8009144:	2302      	movs	r3, #2
 8009146:	e1b6      	b.n	80094b6 <HAL_SPI_Receive+0x3ca>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009150:	f7f9 fd6c 	bl	8002c2c <HAL_GetTick>
 8009154:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b01      	cmp	r3, #1
 8009160:	d003      	beq.n	800916a <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8009162:	2302      	movs	r3, #2
 8009164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009168:	e19b      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <HAL_SPI_Receive+0x8a>
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800917c:	e191      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2204      	movs	r2, #4
 8009182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	88fa      	ldrh	r2, [r7, #6]
 800919e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c8:	d118      	bne.n	80091fc <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091e8:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009204:	d908      	bls.n	8009218 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009214:	605a      	str	r2, [r3, #4]
 8009216:	e007      	b.n	8009228 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009226:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009230:	d10f      	bne.n	8009252 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009240:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009250:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d007      	beq.n	8009270 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009278:	d869      	bhi.n	800934e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800927a:	e031      	b.n	80092e0 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b01      	cmp	r3, #1
 8009288:	d117      	bne.n	80092ba <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f103 020c 	add.w	r2, r3, #12
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	7812      	ldrb	r2, [r2, #0]
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80092b8:	e012      	b.n	80092e0 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092ba:	f7f9 fcb7 	bl	8002c2c <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d803      	bhi.n	80092d2 <HAL_SPI_Receive+0x1e6>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d102      	bne.n	80092d8 <HAL_SPI_Receive+0x1ec>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80092de:	e0e0      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1c7      	bne.n	800927c <HAL_SPI_Receive+0x190>
 80092ec:	e035      	b.n	800935a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d115      	bne.n	8009328 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	b292      	uxth	r2, r2
 8009308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	1c9a      	adds	r2, r3, #2
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800931a:	b29b      	uxth	r3, r3
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009326:	e012      	b.n	800934e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009328:	f7f9 fc80 	bl	8002c2c <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d803      	bhi.n	8009340 <HAL_SPI_Receive+0x254>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d102      	bne.n	8009346 <HAL_SPI_Receive+0x25a>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800934c:	e0a9      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009354:	b29b      	uxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1c9      	bne.n	80092ee <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009362:	d178      	bne.n	8009456 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009372:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2201      	movs	r2, #1
 800937c:	2101      	movs	r1, #1
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fb82 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8009390:	e087      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800939a:	d907      	bls.n	80093ac <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	b292      	uxth	r2, r2
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	e008      	b.n	80093be <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f103 020c 	add.w	r2, r3, #12
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b8:	7812      	ldrb	r2, [r2, #0]
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	2101      	movs	r1, #1
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fb5d 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d009      	beq.n	80093e8 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d8:	f043 0202 	orr.w	r2, r3, #2
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80093e6:	e05c      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80093f0:	d105      	bne.n	80093fe <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	e02b      	b.n	8009456 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	330c      	adds	r3, #12
 8009404:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800940e:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009418:	d11d      	bne.n	8009456 <HAL_SPI_Receive+0x36a>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	2b02      	cmp	r3, #2
 8009420:	d119      	bne.n	8009456 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2201      	movs	r2, #1
 800942a:	2101      	movs	r1, #1
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fb2b 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800943c:	f043 0202 	orr.w	r2, r3, #2
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800944a:	e02a      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009454:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009456:	6a3a      	ldr	r2, [r7, #32]
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fc32 	bl	8009cc4 <SPI_EndRxTransaction>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b10      	cmp	r3, #16
 8009478:	d10a      	bne.n	8009490 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947e:	f043 0202 	orr.w	r2, r3, #2
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800948e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800949e:	e000      	b.n	80094a2 <HAL_SPI_Receive+0x3b6>
  }

error :
 80094a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3728      	adds	r7, #40	; 0x28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b092      	sub	sp, #72	; 0x48
 80094c2:	af02      	add	r7, sp, #8
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
 80094ca:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80094d4:	2301      	movs	r3, #1
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x2e>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e2c8      	b.n	8009a7e <HAL_SPI_TransmitReceive+0x5c0>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094f4:	f7f9 fb9a 	bl	8002c2c <HAL_GetTick>
 80094f8:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 800950a:	887b      	ldrh	r3, [r7, #2]
 800950c:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800950e:	887b      	ldrh	r3, [r7, #2]
 8009510:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009526:	2b01      	cmp	r3, #1
 8009528:	d00f      	beq.n	800954a <HAL_SPI_TransmitReceive+0x8c>
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009530:	d107      	bne.n	8009542 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <HAL_SPI_TransmitReceive+0x84>
 800953a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800953e:	2b04      	cmp	r3, #4
 8009540:	d003      	beq.n	800954a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8009542:	2302      	movs	r3, #2
 8009544:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009548:	e28f      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <HAL_SPI_TransmitReceive+0x9e>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <HAL_SPI_TransmitReceive+0x9e>
 8009556:	887b      	ldrh	r3, [r7, #2]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d103      	bne.n	8009564 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8009562:	e282      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b04      	cmp	r3, #4
 800956e:	d003      	beq.n	8009578 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2205      	movs	r2, #5
 8009574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	887a      	ldrh	r2, [r7, #2]
 8009588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	887a      	ldrh	r2, [r7, #2]
 8009590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	887a      	ldrh	r2, [r7, #2]
 800959e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	887a      	ldrh	r2, [r7, #2]
 80095a4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ba:	d10f      	bne.n	80095dc <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095da:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095e4:	d802      	bhi.n	80095ec <HAL_SPI_TransmitReceive+0x12e>
 80095e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d908      	bls.n	80095fe <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095fa:	605a      	str	r2, [r3, #4]
 80095fc:	e007      	b.n	800960e <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800960c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b40      	cmp	r3, #64	; 0x40
 800961a:	d007      	beq.n	800962c <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009634:	f240 80a4 	bls.w	8009780 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x18a>
 8009640:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009642:	2b01      	cmp	r3, #1
 8009644:	f040 808e 	bne.w	8009764 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	881a      	ldrh	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	1c9a      	adds	r2, r3, #2
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009662:	b29b      	uxth	r3, r3
 8009664:	3b01      	subs	r3, #1
 8009666:	b29a      	uxth	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800966c:	e07a      	b.n	8009764 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d13f      	bne.n	80096fc <HAL_SPI_TransmitReceive+0x23e>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d03a      	beq.n	80096fc <HAL_SPI_TransmitReceive+0x23e>
 8009686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d137      	bne.n	80096fc <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	881a      	ldrh	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	1c9a      	adds	r2, r3, #2
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d11e      	bne.n	80096fc <HAL_SPI_TransmitReceive+0x23e>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c6:	d119      	bne.n	80096fc <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10c      	bne.n	80096ec <HAL_SPI_TransmitReceive+0x22e>
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ea:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096fa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b01      	cmp	r3, #1
 8009708:	d11c      	bne.n	8009744 <HAL_SPI_TransmitReceive+0x286>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d016      	beq.n	8009744 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	b292      	uxth	r2, r2
 8009722:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009728:	1c9a      	adds	r2, r3, #2
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009740:	2301      	movs	r3, #1
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009744:	f7f9 fa72 	bl	8002c2c <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009750:	429a      	cmp	r2, r3
 8009752:	d807      	bhi.n	8009764 <HAL_SPI_TransmitReceive+0x2a6>
 8009754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d003      	beq.n	8009764 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009762:	e182      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	f47f af7f 	bne.w	800966e <HAL_SPI_TransmitReceive+0x1b0>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	f47f af78 	bne.w	800966e <HAL_SPI_TransmitReceive+0x1b0>
 800977e:	e103      	b.n	8009988 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_SPI_TransmitReceive+0x2d2>
 8009788:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800978a:	2b01      	cmp	r3, #1
 800978c:	f040 80ef 	bne.w	800996e <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b01      	cmp	r3, #1
 8009798:	d912      	bls.n	80097c0 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	881a      	ldrh	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	1c9a      	adds	r2, r3, #2
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	3b02      	subs	r3, #2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097be:	e0d6      	b.n	800996e <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	330c      	adds	r3, #12
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097e6:	e0c2      	b.n	800996e <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d158      	bne.n	80098a8 <HAL_SPI_TransmitReceive+0x3ea>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d053      	beq.n	80098a8 <HAL_SPI_TransmitReceive+0x3ea>
 8009800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009802:	2b01      	cmp	r3, #1
 8009804:	d150      	bne.n	80098a8 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b01      	cmp	r3, #1
 800980e:	d912      	bls.n	8009836 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	881a      	ldrh	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	1c9a      	adds	r2, r3, #2
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800982a:	b29b      	uxth	r3, r3
 800982c:	3b02      	subs	r3, #2
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009834:	e012      	b.n	800985c <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	330c      	adds	r3, #12
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009852:	b29b      	uxth	r3, r3
 8009854:	3b01      	subs	r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d11e      	bne.n	80098a8 <HAL_SPI_TransmitReceive+0x3ea>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009872:	d119      	bne.n	80098a8 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10c      	bne.n	8009898 <HAL_SPI_TransmitReceive+0x3da>
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d007      	beq.n	8009898 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009896:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098a6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d148      	bne.n	8009948 <HAL_SPI_TransmitReceive+0x48a>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d042      	beq.n	8009948 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d923      	bls.n	8009916 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	b292      	uxth	r2, r2
 80098da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3b02      	subs	r3, #2
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b01      	cmp	r3, #1
 8009902:	d81f      	bhi.n	8009944 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009912:	605a      	str	r2, [r3, #4]
 8009914:	e016      	b.n	8009944 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f103 020c 	add.w	r2, r3, #12
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	7812      	ldrb	r2, [r2, #0]
 8009924:	b2d2      	uxtb	r2, r2
 8009926:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009938:	b29b      	uxth	r3, r3
 800993a:	3b01      	subs	r3, #1
 800993c:	b29a      	uxth	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009944:	2301      	movs	r3, #1
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009948:	f7f9 f970 	bl	8002c2c <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009954:	429a      	cmp	r2, r3
 8009956:	d803      	bhi.n	8009960 <HAL_SPI_TransmitReceive+0x4a2>
 8009958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d102      	bne.n	8009966 <HAL_SPI_TransmitReceive+0x4a8>
 8009960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009962:	2b00      	cmp	r3, #0
 8009964:	d103      	bne.n	800996e <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800996c:	e07d      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009972:	b29b      	uxth	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	f47f af37 	bne.w	80097e8 <HAL_SPI_TransmitReceive+0x32a>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	f47f af30 	bne.w	80097e8 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009990:	d146      	bne.n	8009a20 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009998:	2201      	movs	r2, #1
 800999a:	2101      	movs	r1, #1
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f873 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ac:	f043 0202 	orr.w	r2, r3, #2
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80099ba:	e056      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80099c4:	d105      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	e026      	b.n	8009a20 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	330c      	adds	r3, #12
 80099d8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099e2:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d119      	bne.n	8009a20 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80099ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f2:	2201      	movs	r2, #1
 80099f4:	2101      	movs	r1, #1
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f846 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d009      	beq.n	8009a16 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a06:	f043 0202 	orr.w	r2, r3, #2
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8009a14:	e029      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 0310 	and.w	r3, r3, #16
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d10d      	bne.n	8009a4a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a32:	f043 0202 	orr.w	r2, r3, #2
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009a42:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f990 	bl	8009d74 <SPI_EndRxTxTransaction>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d006      	beq.n	8009a68 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	661a      	str	r2, [r3, #96]	; 0x60
 8009a66:	e000      	b.n	8009a6a <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009a7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3740      	adds	r7, #64	; 0x40
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	4613      	mov	r3, r2
 8009a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a98:	f7f9 f8c8 	bl	8002c2c <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	1a9b      	subs	r3, r3, r2
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009aa8:	f7f9 f8c0 	bl	8002c2c <HAL_GetTick>
 8009aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009aae:	4b39      	ldr	r3, [pc, #228]	; (8009b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	015b      	lsls	r3, r3, #5
 8009ab4:	0d1b      	lsrs	r3, r3, #20
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	fb02 f303 	mul.w	r3, r2, r3
 8009abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009abe:	e054      	b.n	8009b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d050      	beq.n	8009b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ac8:	f7f9 f8b0 	bl	8002c2c <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d902      	bls.n	8009ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d13d      	bne.n	8009b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009af6:	d111      	bne.n	8009b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b00:	d004      	beq.n	8009b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b0a:	d107      	bne.n	8009b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b24:	d10f      	bne.n	8009b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e017      	b.n	8009b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4013      	ands	r3, r2
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	bf0c      	ite	eq
 8009b7a:	2301      	moveq	r3, #1
 8009b7c:	2300      	movne	r3, #0
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d19b      	bne.n	8009ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2000000c 	.word	0x2000000c

08009b98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009baa:	f7f9 f83f 	bl	8002c2c <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	1a9b      	subs	r3, r3, r2
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009bba:	f7f9 f837 	bl	8002c2c <HAL_GetTick>
 8009bbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	330c      	adds	r3, #12
 8009bc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009bc8:	4b3d      	ldr	r3, [pc, #244]	; (8009cc0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	00da      	lsls	r2, r3, #3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	0d1b      	lsrs	r3, r3, #20
 8009bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009be0:	e060      	b.n	8009ca4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009be8:	d107      	bne.n	8009bfa <SPI_WaitFifoStateUntilTimeout+0x62>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d104      	bne.n	8009bfa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d050      	beq.n	8009ca4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c02:	f7f9 f813 	bl	8002c2c <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d902      	bls.n	8009c18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d13d      	bne.n	8009c94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c30:	d111      	bne.n	8009c56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c3a:	d004      	beq.n	8009c46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c44:	d107      	bne.n	8009c56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c5e:	d10f      	bne.n	8009c80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e010      	b.n	8009cb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4013      	ands	r3, r2
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d196      	bne.n	8009be2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000000c 	.word	0x2000000c

08009cc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cd8:	d111      	bne.n	8009cfe <SPI_EndRxTransaction+0x3a>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce2:	d004      	beq.n	8009cee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cec:	d107      	bne.n	8009cfe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cfc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2200      	movs	r2, #0
 8009d06:	2180      	movs	r1, #128	; 0x80
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff febd 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d007      	beq.n	8009d24 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d18:	f043 0220 	orr.w	r2, r3, #32
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e023      	b.n	8009d6c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d2c:	d11d      	bne.n	8009d6a <SPI_EndRxTransaction+0xa6>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d36:	d004      	beq.n	8009d42 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d40:	d113      	bne.n	8009d6a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff ff22 	bl	8009b98 <SPI_WaitFifoStateUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d5e:	f043 0220 	orr.w	r2, r3, #32
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e000      	b.n	8009d6c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7ff ff03 	bl	8009b98 <SPI_WaitFifoStateUntilTimeout>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d9c:	f043 0220 	orr.w	r2, r3, #32
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e027      	b.n	8009df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2200      	movs	r2, #0
 8009db0:	2180      	movs	r1, #128	; 0x80
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fe68 	bl	8009a88 <SPI_WaitFlagStateUntilTimeout>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc2:	f043 0220 	orr.w	r2, r3, #32
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e014      	b.n	8009df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7ff fedc 	bl	8009b98 <SPI_WaitFifoStateUntilTimeout>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dea:	f043 0220 	orr.w	r2, r3, #32
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e000      	b.n	8009df8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <LL_PWR_SetRadioBusyTrigger>:
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009e08:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e10:	4904      	ldr	r1, [pc, #16]	; (8009e24 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	608b      	str	r3, [r1, #8]
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	58000400 	.word	0x58000400

08009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009e2c:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e32:	4a04      	ldr	r2, [pc, #16]	; (8009e44 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e3c:	bf00      	nop
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bc80      	pop	{r7}
 8009e42:	4770      	bx	lr
 8009e44:	58000400 	.word	0x58000400

08009e48 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e52:	4a04      	ldr	r2, [pc, #16]	; (8009e64 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e5c:	bf00      	nop
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr
 8009e64:	58000400 	.word	0x58000400

08009e68 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009e6c:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e72:	619a      	str	r2, [r3, #24]
}
 8009e74:	bf00      	nop
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bc80      	pop	{r7}
 8009e7a:	4770      	bx	lr
 8009e7c:	58000400 	.word	0x58000400

08009e80 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d101      	bne.n	8009e94 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	58000400 	.word	0x58000400

08009ea4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009ea8:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	f003 0304 	and.w	r3, r3, #4
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d101      	bne.n	8009eb8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e000      	b.n	8009eba <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	58000400 	.word	0x58000400

08009ec8 <LL_RCC_RF_DisableReset>:
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ee0:	bf00      	nop
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr

08009ee8 <LL_RCC_IsRFUnderReset>:
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009efc:	d101      	bne.n	8009f02 <LL_RCC_IsRFUnderReset+0x1a>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e000      	b.n	8009f04 <LL_RCC_IsRFUnderReset+0x1c>
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bc80      	pop	{r7}
 8009f0a:	4770      	bx	lr

08009f0c <LL_EXTI_EnableIT_32_63>:
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009f14:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <LL_EXTI_EnableIT_32_63+0x24>)
 8009f16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009f1a:	4905      	ldr	r1, [pc, #20]	; (8009f30 <LL_EXTI_EnableIT_32_63+0x24>)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bc80      	pop	{r7}
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	58000800 	.word	0x58000800

08009f34 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	73fb      	strb	r3, [r7, #15]
    return status;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	e04b      	b.n	8009fe2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	799b      	ldrb	r3, [r3, #6]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7f8 fcbc 	bl	80028dc <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2202      	movs	r2, #2
 8009f68:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8009f6a:	f7ff ffad 	bl	8009ec8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009f6e:	4b1f      	ldr	r3, [pc, #124]	; (8009fec <HAL_SUBGHZ_Init+0xb8>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	1a9b      	subs	r3, r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	0cdb      	lsrs	r3, r3, #19
 8009f7c:	2264      	movs	r2, #100	; 0x64
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	609a      	str	r2, [r3, #8]
      break;
 8009f94:	e007      	b.n	8009fa6 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009f9c:	f7ff ffa4 	bl	8009ee8 <LL_RCC_IsRFUnderReset>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1ee      	bne.n	8009f84 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8009fa6:	f7ff ff3f 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009faa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009fae:	f7ff ffad 	bl	8009f0c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009fb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009fb6:	f7ff ff23 	bl	8009e00 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009fba:	f7ff ff55 	bl	8009e68 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 faad 	bl	800a528 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	719a      	strb	r2, [r3, #6]

  return status;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	2000000c 	.word	0x2000000c

08009ff0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	817b      	strh	r3, [r7, #10]
 800a000:	4613      	mov	r3, r2
 800a002:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	799b      	ldrb	r3, [r3, #6]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d14a      	bne.n	800a0a4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	795b      	ldrb	r3, [r3, #5]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d101      	bne.n	800a01a <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a016:	2302      	movs	r3, #2
 800a018:	e045      	b.n	800a0a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2201      	movs	r2, #1
 800a01e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2202      	movs	r2, #2
 800a024:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 fb4c 	bl	800a6c4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a02c:	f7ff ff0c 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a030:	210d      	movs	r1, #13
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fa98 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a038:	897b      	ldrh	r3, [r7, #10]
 800a03a:	0a1b      	lsrs	r3, r3, #8
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	4619      	mov	r1, r3
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fa90 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a048:	897b      	ldrh	r3, [r7, #10]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fa8a 	bl	800a568 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a054:	2300      	movs	r3, #0
 800a056:	82bb      	strh	r3, [r7, #20]
 800a058:	e00a      	b.n	800a070 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a05a:	8abb      	ldrh	r3, [r7, #20]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	4413      	add	r3, r2
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	4619      	mov	r1, r3
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fa7f 	bl	800a568 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a06a:	8abb      	ldrh	r3, [r7, #20]
 800a06c:	3301      	adds	r3, #1
 800a06e:	82bb      	strh	r3, [r7, #20]
 800a070:	8aba      	ldrh	r2, [r7, #20]
 800a072:	893b      	ldrh	r3, [r7, #8]
 800a074:	429a      	cmp	r2, r3
 800a076:	d3f0      	bcc.n	800a05a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a078:	f7ff fed6 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 fb45 	bl	800a70c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	75fb      	strb	r3, [r7, #23]
 800a08e:	e001      	b.n	800a094 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	715a      	strb	r2, [r3, #5]

    return status;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	e000      	b.n	800a0a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a0a4:	2302      	movs	r3, #2
  }
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b088      	sub	sp, #32
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	817b      	strh	r3, [r7, #10]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	799b      	ldrb	r3, [r3, #6]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d14a      	bne.n	800a166 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	795b      	ldrb	r3, [r3, #5]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e045      	b.n	800a168 <HAL_SUBGHZ_ReadRegisters+0xba>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 faee 	bl	800a6c4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0e8:	f7ff feae 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a0ec:	211d      	movs	r1, #29
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fa3a 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a0f4:	897b      	ldrh	r3, [r7, #10]
 800a0f6:	0a1b      	lsrs	r3, r3, #8
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fa32 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a104:	897b      	ldrh	r3, [r7, #10]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 fa2c 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a110:	2100      	movs	r1, #0
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 fa28 	bl	800a568 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a118:	2300      	movs	r3, #0
 800a11a:	82fb      	strh	r3, [r7, #22]
 800a11c:	e009      	b.n	800a132 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a11e:	69b9      	ldr	r1, [r7, #24]
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 fa77 	bl	800a614 <SUBGHZSPI_Receive>
      pData++;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	3301      	adds	r3, #1
 800a12a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a12c:	8afb      	ldrh	r3, [r7, #22]
 800a12e:	3301      	adds	r3, #1
 800a130:	82fb      	strh	r3, [r7, #22]
 800a132:	8afa      	ldrh	r2, [r7, #22]
 800a134:	893b      	ldrh	r3, [r7, #8]
 800a136:	429a      	cmp	r2, r3
 800a138:	d3f1      	bcc.n	800a11e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a13a:	f7ff fe75 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fae4 	bl	800a70c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	77fb      	strb	r3, [r7, #31]
 800a150:	e001      	b.n	800a156 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	715a      	strb	r2, [r3, #5]

    return status;
 800a162:	7ffb      	ldrb	r3, [r7, #31]
 800a164:	e000      	b.n	800a168 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a166:	2302      	movs	r3, #2
  }
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3720      	adds	r7, #32
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	461a      	mov	r2, r3
 800a17c:	460b      	mov	r3, r1
 800a17e:	72fb      	strb	r3, [r7, #11]
 800a180:	4613      	mov	r3, r2
 800a182:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	799b      	ldrb	r3, [r3, #6]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d14a      	bne.n	800a224 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	795b      	ldrb	r3, [r3, #5]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a196:	2302      	movs	r3, #2
 800a198:	e045      	b.n	800a226 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fa8f 	bl	800a6c4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	2b84      	cmp	r3, #132	; 0x84
 800a1aa:	d002      	beq.n	800a1b2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	2b94      	cmp	r3, #148	; 0x94
 800a1b0:	d103      	bne.n	800a1ba <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	711a      	strb	r2, [r3, #4]
 800a1b8:	e002      	b.n	800a1c0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a1c0:	f7ff fe42 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 f9cd 	bl	800a568 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	82bb      	strh	r3, [r7, #20]
 800a1d2:	e00a      	b.n	800a1ea <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a1d4:	8abb      	ldrh	r3, [r7, #20]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	4413      	add	r3, r2
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 f9c2 	bl	800a568 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a1e4:	8abb      	ldrh	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	82bb      	strh	r3, [r7, #20]
 800a1ea:	8aba      	ldrh	r2, [r7, #20]
 800a1ec:	893b      	ldrh	r3, [r7, #8]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d3f0      	bcc.n	800a1d4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a1f2:	f7ff fe19 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	2b84      	cmp	r3, #132	; 0x84
 800a1fa:	d002      	beq.n	800a202 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 fa85 	bl	800a70c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	75fb      	strb	r3, [r7, #23]
 800a20e:	e001      	b.n	800a214 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	715a      	strb	r2, [r3, #5]

    return status;
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	e000      	b.n	800a226 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a224:	2302      	movs	r3, #2
  }
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b088      	sub	sp, #32
 800a232:	af00      	add	r7, sp, #0
 800a234:	60f8      	str	r0, [r7, #12]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	461a      	mov	r2, r3
 800a23a:	460b      	mov	r3, r1
 800a23c:	72fb      	strb	r3, [r7, #11]
 800a23e:	4613      	mov	r3, r2
 800a240:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	799b      	ldrb	r3, [r3, #6]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d13d      	bne.n	800a2cc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	795b      	ldrb	r3, [r3, #5]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d101      	bne.n	800a25c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a258:	2302      	movs	r3, #2
 800a25a:	e038      	b.n	800a2ce <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2201      	movs	r2, #1
 800a260:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 fa2e 	bl	800a6c4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a268:	f7ff fdee 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	4619      	mov	r1, r3
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 f979 	bl	800a568 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a276:	2100      	movs	r1, #0
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f975 	bl	800a568 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a27e:	2300      	movs	r3, #0
 800a280:	82fb      	strh	r3, [r7, #22]
 800a282:	e009      	b.n	800a298 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a284:	69b9      	ldr	r1, [r7, #24]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f9c4 	bl	800a614 <SUBGHZSPI_Receive>
      pData++;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	3301      	adds	r3, #1
 800a290:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a292:	8afb      	ldrh	r3, [r7, #22]
 800a294:	3301      	adds	r3, #1
 800a296:	82fb      	strh	r3, [r7, #22]
 800a298:	8afa      	ldrh	r2, [r7, #22]
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d3f1      	bcc.n	800a284 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2a0:	f7ff fdc2 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 fa31 	bl	800a70c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	77fb      	strb	r3, [r7, #31]
 800a2b6:	e001      	b.n	800a2bc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	715a      	strb	r2, [r3, #5]

    return status;
 800a2c8:	7ffb      	ldrb	r3, [r7, #31]
 800a2ca:	e000      	b.n	800a2ce <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a2cc:	2302      	movs	r3, #2
  }
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3720      	adds	r7, #32
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b086      	sub	sp, #24
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	72fb      	strb	r3, [r7, #11]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	799b      	ldrb	r3, [r3, #6]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d13e      	bne.n	800a372 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	795b      	ldrb	r3, [r3, #5]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d101      	bne.n	800a300 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e039      	b.n	800a374 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f9dc 	bl	800a6c4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a30c:	f7ff fd9c 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a310:	210e      	movs	r1, #14
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f928 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	4619      	mov	r1, r3
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f923 	bl	800a568 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a322:	2300      	movs	r3, #0
 800a324:	82bb      	strh	r3, [r7, #20]
 800a326:	e00a      	b.n	800a33e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a328:	8abb      	ldrh	r3, [r7, #20]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4413      	add	r3, r2
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	4619      	mov	r1, r3
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f918 	bl	800a568 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a338:	8abb      	ldrh	r3, [r7, #20]
 800a33a:	3301      	adds	r3, #1
 800a33c:	82bb      	strh	r3, [r7, #20]
 800a33e:	8aba      	ldrh	r2, [r7, #20]
 800a340:	893b      	ldrh	r3, [r7, #8]
 800a342:	429a      	cmp	r2, r3
 800a344:	d3f0      	bcc.n	800a328 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a346:	f7ff fd6f 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f9de 	bl	800a70c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	75fb      	strb	r3, [r7, #23]
 800a35c:	e001      	b.n	800a362 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	715a      	strb	r2, [r3, #5]

    return status;
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	e000      	b.n	800a374 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a372:	2302      	movs	r3, #2
  }
}
 800a374:	4618      	mov	r0, r3
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	461a      	mov	r2, r3
 800a388:	460b      	mov	r3, r1
 800a38a:	72fb      	strb	r3, [r7, #11]
 800a38c:	4613      	mov	r3, r2
 800a38e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	799b      	ldrb	r3, [r3, #6]
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d141      	bne.n	800a422 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	795b      	ldrb	r3, [r3, #5]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e03c      	b.n	800a424 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f000 f987 	bl	800a6c4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a3b6:	f7ff fd47 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a3ba:	211e      	movs	r1, #30
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 f8d3 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f8ce 	bl	800a568 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 f8ca 	bl	800a568 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	82fb      	strh	r3, [r7, #22]
 800a3d8:	e009      	b.n	800a3ee <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a3da:	69b9      	ldr	r1, [r7, #24]
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 f919 	bl	800a614 <SUBGHZSPI_Receive>
      pData++;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a3e8:	8afb      	ldrh	r3, [r7, #22]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	82fb      	strh	r3, [r7, #22]
 800a3ee:	8afa      	ldrh	r2, [r7, #22]
 800a3f0:	893b      	ldrh	r3, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3f1      	bcc.n	800a3da <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a3f6:	f7ff fd17 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f986 	bl	800a70c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	77fb      	strb	r3, [r7, #31]
 800a40c:	e001      	b.n	800a412 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2201      	movs	r2, #1
 800a416:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	715a      	strb	r2, [r3, #5]

    return status;
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	e000      	b.n	800a424 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a422:	2302      	movs	r3, #2
  }
}
 800a424:	4618      	mov	r0, r3
 800a426:	3720      	adds	r7, #32
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a434:	2300      	movs	r3, #0
 800a436:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a438:	f107 020c 	add.w	r2, r7, #12
 800a43c:	2302      	movs	r3, #2
 800a43e:	2112      	movs	r1, #18
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff fef4 	bl	800a22e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a446:	7b3b      	ldrb	r3, [r7, #12]
 800a448:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a44a:	89fb      	ldrh	r3, [r7, #14]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	b21a      	sxth	r2, r3
 800a450:	7b7b      	ldrb	r3, [r7, #13]
 800a452:	b21b      	sxth	r3, r3
 800a454:	4313      	orrs	r3, r2
 800a456:	b21b      	sxth	r3, r3
 800a458:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a45a:	89fb      	ldrh	r3, [r7, #14]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f012 fdcf 	bl	801d008 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a46a:	89fb      	ldrh	r3, [r7, #14]
 800a46c:	085b      	lsrs	r3, r3, #1
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f012 fdd4 	bl	801d024 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	089b      	lsrs	r3, r3, #2
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f012 fe23 	bl	801d0d4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a48e:	89fb      	ldrh	r3, [r7, #14]
 800a490:	08db      	lsrs	r3, r3, #3
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f012 fe28 	bl	801d0f0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a4a0:	89fb      	ldrh	r3, [r7, #14]
 800a4a2:	091b      	lsrs	r3, r3, #4
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f012 fe2d 	bl	801d10c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a4b2:	89fb      	ldrh	r3, [r7, #14]
 800a4b4:	095b      	lsrs	r3, r3, #5
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f012 fdfa 	bl	801d0b8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a4c4:	89fb      	ldrh	r3, [r7, #14]
 800a4c6:	099b      	lsrs	r3, r3, #6
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f012 fdb5 	bl	801d040 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a4d6:	89fb      	ldrh	r3, [r7, #14]
 800a4d8:	09db      	lsrs	r3, r3, #7
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00e      	beq.n	800a500 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a4e2:	89fb      	ldrh	r3, [r7, #14]
 800a4e4:	0a1b      	lsrs	r3, r3, #8
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f012 fdb3 	bl	801d05c <HAL_SUBGHZ_CADStatusCallback>
 800a4f6:	e003      	b.n	800a500 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f012 fdae 	bl	801d05c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a500:	89fb      	ldrh	r3, [r7, #14]
 800a502:	0a5b      	lsrs	r3, r3, #9
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f012 fdc3 	bl	801d098 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800a512:	f107 020c 	add.w	r2, r7, #12
 800a516:	2302      	movs	r3, #2
 800a518:	2102      	movs	r1, #2
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fe28 	bl	800a170 <HAL_SUBGHZ_ExecSetCmd>
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a530:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <SUBGHZSPI_Init+0x3c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a0b      	ldr	r2, [pc, #44]	; (800a564 <SUBGHZSPI_Init+0x3c>)
 800a536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a53a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a53c:	4a09      	ldr	r2, [pc, #36]	; (800a564 <SUBGHZSPI_Init+0x3c>)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a544:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a546:	4b07      	ldr	r3, [pc, #28]	; (800a564 <SUBGHZSPI_Init+0x3c>)
 800a548:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a54c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <SUBGHZSPI_Init+0x3c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a04      	ldr	r2, [pc, #16]	; (800a564 <SUBGHZSPI_Init+0x3c>)
 800a554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a558:	6013      	str	r3, [r2, #0]
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	bc80      	pop	{r7}
 800a562:	4770      	bx	lr
 800a564:	58010000 	.word	0x58010000

0800a568 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a578:	4b23      	ldr	r3, [pc, #140]	; (800a608 <SUBGHZSPI_Transmit+0xa0>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	0cdb      	lsrs	r3, r3, #19
 800a586:	2264      	movs	r2, #100	; 0x64
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	609a      	str	r2, [r3, #8]
      break;
 800a59e:	e008      	b.n	800a5b2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a5a6:	4b19      	ldr	r3, [pc, #100]	; (800a60c <SUBGHZSPI_Transmit+0xa4>)
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d1ed      	bne.n	800a58e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a5b2:	4b17      	ldr	r3, [pc, #92]	; (800a610 <SUBGHZSPI_Transmit+0xa8>)
 800a5b4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	78fa      	ldrb	r2, [r7, #3]
 800a5ba:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a5bc:	4b12      	ldr	r3, [pc, #72]	; (800a608 <SUBGHZSPI_Transmit+0xa0>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	1a9b      	subs	r3, r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	0cdb      	lsrs	r3, r3, #19
 800a5ca:	2264      	movs	r2, #100	; 0x64
 800a5cc:	fb02 f303 	mul.w	r3, r2, r3
 800a5d0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d105      	bne.n	800a5e4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	609a      	str	r2, [r3, #8]
      break;
 800a5e2:	e008      	b.n	800a5f6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a5ea:	4b08      	ldr	r3, [pc, #32]	; (800a60c <SUBGHZSPI_Transmit+0xa4>)
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d1ed      	bne.n	800a5d2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a5f6:	4b05      	ldr	r3, [pc, #20]	; (800a60c <SUBGHZSPI_Transmit+0xa4>)
 800a5f8:	68db      	ldr	r3, [r3, #12]

  return status;
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	bc80      	pop	{r7}
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	2000000c 	.word	0x2000000c
 800a60c:	58010000 	.word	0x58010000
 800a610:	5801000c 	.word	0x5801000c

0800a614 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a622:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <SUBGHZSPI_Receive+0xa4>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	1a9b      	subs	r3, r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	0cdb      	lsrs	r3, r3, #19
 800a630:	2264      	movs	r2, #100	; 0x64
 800a632:	fb02 f303 	mul.w	r3, r2, r3
 800a636:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d105      	bne.n	800a64a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	609a      	str	r2, [r3, #8]
      break;
 800a648:	e008      	b.n	800a65c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3b01      	subs	r3, #1
 800a64e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a650:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <SUBGHZSPI_Receive+0xa8>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d1ed      	bne.n	800a638 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a65c:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <SUBGHZSPI_Receive+0xac>)
 800a65e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	22ff      	movs	r2, #255	; 0xff
 800a664:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <SUBGHZSPI_Receive+0xa4>)
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	4613      	mov	r3, r2
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	0cdb      	lsrs	r3, r3, #19
 800a674:	2264      	movs	r2, #100	; 0x64
 800a676:	fb02 f303 	mul.w	r3, r2, r3
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	609a      	str	r2, [r3, #8]
      break;
 800a68c:	e008      	b.n	800a6a0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3b01      	subs	r3, #1
 800a692:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a694:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <SUBGHZSPI_Receive+0xa8>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d1ed      	bne.n	800a67c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a6a0:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <SUBGHZSPI_Receive+0xa8>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	701a      	strb	r2, [r3, #0]

  return status;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bc80      	pop	{r7}
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	2000000c 	.word	0x2000000c
 800a6bc:	58010000 	.word	0x58010000
 800a6c0:	5801000c 	.word	0x5801000c

0800a6c4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d111      	bne.n	800a6f8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <SUBGHZ_CheckDeviceReady+0x44>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	4413      	add	r3, r2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	0c1b      	lsrs	r3, r3, #16
 800a6e2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a6e4:	f7ff fbb0 	bl	8009e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1f9      	bne.n	800a6e8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a6f4:	f7ff fb98 	bl	8009e28 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f807 	bl	800a70c <SUBGHZ_WaitOnBusy>
 800a6fe:	4603      	mov	r3, r0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	2000000c 	.word	0x2000000c

0800a70c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a718:	4b12      	ldr	r3, [pc, #72]	; (800a764 <SUBGHZ_WaitOnBusy+0x58>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	4613      	mov	r3, r2
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	4413      	add	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	0d1b      	lsrs	r3, r3, #20
 800a726:	2264      	movs	r2, #100	; 0x64
 800a728:	fb02 f303 	mul.w	r3, r2, r3
 800a72c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a72e:	f7ff fbb9 	bl	8009ea4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a732:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d105      	bne.n	800a746 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2202      	movs	r2, #2
 800a742:	609a      	str	r2, [r3, #8]
      break;
 800a744:	e009      	b.n	800a75a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b01      	subs	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a74c:	f7ff fb98 	bl	8009e80 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a750:	4602      	mov	r2, r0
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	4013      	ands	r3, r2
 800a756:	2b01      	cmp	r3, #1
 800a758:	d0e9      	beq.n	800a72e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	2000000c 	.word	0x2000000c

0800a768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e049      	b.n	800a80e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7f8 fb48 	bl	8002e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f000 f9c6 	bl	800ab38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d001      	beq.n	800a830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e036      	b.n	800a89e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68da      	ldr	r2, [r3, #12]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a16      	ldr	r2, [pc, #88]	; (800a8a8 <HAL_TIM_Base_Start_IT+0x90>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d004      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x44>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a85a:	d115      	bne.n	800a888 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689a      	ldr	r2, [r3, #8]
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <HAL_TIM_Base_Start_IT+0x94>)
 800a864:	4013      	ands	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b06      	cmp	r3, #6
 800a86c:	d015      	beq.n	800a89a <HAL_TIM_Base_Start_IT+0x82>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a874:	d011      	beq.n	800a89a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f042 0201 	orr.w	r2, r2, #1
 800a884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a886:	e008      	b.n	800a89a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f042 0201 	orr.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e000      	b.n	800a89c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a89a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bc80      	pop	{r7}
 800a8a6:	4770      	bx	lr
 800a8a8:	40012c00 	.word	0x40012c00
 800a8ac:	00010007 	.word	0x00010007

0800a8b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d122      	bne.n	800a90c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d11b      	bne.n	800a90c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f06f 0202 	mvn.w	r2, #2
 800a8dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f904 	bl	800ab00 <HAL_TIM_IC_CaptureCallback>
 800a8f8:	e005      	b.n	800a906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f8f7 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f906 	bl	800ab12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d122      	bne.n	800a960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b04      	cmp	r3, #4
 800a926:	d11b      	bne.n	800a960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0204 	mvn.w	r2, #4
 800a930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f8da 	bl	800ab00 <HAL_TIM_IC_CaptureCallback>
 800a94c:	e005      	b.n	800a95a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8cd 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f8dc 	bl	800ab12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b08      	cmp	r3, #8
 800a96c:	d122      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d11b      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0208 	mvn.w	r2, #8
 800a984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2204      	movs	r2, #4
 800a98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f8b0 	bl	800ab00 <HAL_TIM_IC_CaptureCallback>
 800a9a0:	e005      	b.n	800a9ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8a3 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f8b2 	bl	800ab12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d122      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	d11b      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0210 	mvn.w	r2, #16
 800a9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2208      	movs	r2, #8
 800a9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f886 	bl	800ab00 <HAL_TIM_IC_CaptureCallback>
 800a9f4:	e005      	b.n	800aa02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f879 	bl	800aaee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f888 	bl	800ab12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d10e      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d107      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0201 	mvn.w	r2, #1
 800aa2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7f7 fbfa 	bl	8002228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d10e      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4c:	2b80      	cmp	r3, #128	; 0x80
 800aa4e:	d107      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f8d7 	bl	800ac0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6e:	d10e      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b80      	cmp	r3, #128	; 0x80
 800aa7c:	d107      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f8c9 	bl	800ac20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa98:	2b40      	cmp	r3, #64	; 0x40
 800aa9a:	d10e      	bne.n	800aaba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa6:	2b40      	cmp	r3, #64	; 0x40
 800aaa8:	d107      	bne.n	800aaba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f835 	bl	800ab24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0320 	and.w	r3, r3, #32
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	d10e      	bne.n	800aae6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b20      	cmp	r3, #32
 800aad4:	d107      	bne.n	800aae6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f06f 0220 	mvn.w	r2, #32
 800aade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f88b 	bl	800abfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bc80      	pop	{r7}
 800aafe:	4770      	bx	lr

0800ab00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	4770      	bx	lr

0800ab12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab1a:	bf00      	nop
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bc80      	pop	{r7}
 800ab22:	4770      	bx	lr

0800ab24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr
	...

0800ab38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a29      	ldr	r2, [pc, #164]	; (800abf0 <TIM_Base_SetConfig+0xb8>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d003      	beq.n	800ab58 <TIM_Base_SetConfig+0x20>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab56:	d108      	bne.n	800ab6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a20      	ldr	r2, [pc, #128]	; (800abf0 <TIM_Base_SetConfig+0xb8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d00b      	beq.n	800ab8a <TIM_Base_SetConfig+0x52>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab78:	d007      	beq.n	800ab8a <TIM_Base_SetConfig+0x52>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a1d      	ldr	r2, [pc, #116]	; (800abf4 <TIM_Base_SetConfig+0xbc>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d003      	beq.n	800ab8a <TIM_Base_SetConfig+0x52>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a1c      	ldr	r2, [pc, #112]	; (800abf8 <TIM_Base_SetConfig+0xc0>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d108      	bne.n	800ab9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a0b      	ldr	r2, [pc, #44]	; (800abf0 <TIM_Base_SetConfig+0xb8>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <TIM_Base_SetConfig+0xa0>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a0a      	ldr	r2, [pc, #40]	; (800abf4 <TIM_Base_SetConfig+0xbc>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_Base_SetConfig+0xa0>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <TIM_Base_SetConfig+0xc0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d103      	bne.n	800abe0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	691a      	ldr	r2, [r3, #16]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	615a      	str	r2, [r3, #20]
}
 800abe6:	bf00      	nop
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	bc80      	pop	{r7}
 800abee:	4770      	bx	lr
 800abf0:	40012c00 	.word	0x40012c00
 800abf4:	40014400 	.word	0x40014400
 800abf8:	40014800 	.word	0x40014800

0800abfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bc80      	pop	{r7}
 800ac0c:	4770      	bx	lr

0800ac0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bc80      	pop	{r7}
 800ac30:	4770      	bx	lr

0800ac32 <LL_RCC_GetUSARTClockSource>:
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ac3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	401a      	ands	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	041b      	lsls	r3, r3, #16
 800ac4a:	4313      	orrs	r3, r2
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bc80      	pop	{r7}
 800ac54:	4770      	bx	lr

0800ac56 <LL_RCC_GetLPUARTClockSource>:
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ac5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4013      	ands	r3, r2
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bc80      	pop	{r7}
 800ac72:	4770      	bx	lr

0800ac74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e042      	b.n	800ad0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7f8 fc51 	bl	8003540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2224      	movs	r2, #36	; 0x24
 800aca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 0201 	bic.w	r2, r2, #1
 800acb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fcde 	bl	800b678 <UART_SetConfig>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d101      	bne.n	800acc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e022      	b.n	800ad0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 ff46 	bl	800bb60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ace2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	689a      	ldr	r2, [r3, #8]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0201 	orr.w	r2, r2, #1
 800ad02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 ffcc 	bl	800bca2 <UART_CheckIdleState>
 800ad0a:	4603      	mov	r3, r0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08a      	sub	sp, #40	; 0x28
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	4613      	mov	r3, r2
 800ad22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	f040 8083 	bne.w	800ae36 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <HAL_UART_Transmit+0x28>
 800ad36:	88fb      	ldrh	r3, [r7, #6]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e07b      	b.n	800ae38 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d101      	bne.n	800ad4e <HAL_UART_Transmit+0x3a>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e074      	b.n	800ae38 <HAL_UART_Transmit+0x124>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2221      	movs	r2, #33	; 0x21
 800ad62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad66:	f7f7 ff61 	bl	8002c2c <HAL_GetTick>
 800ad6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	88fa      	ldrh	r2, [r7, #6]
 800ad70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	88fa      	ldrh	r2, [r7, #6]
 800ad78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad84:	d108      	bne.n	800ad98 <HAL_UART_Transmit+0x84>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	61bb      	str	r3, [r7, #24]
 800ad96:	e003      	b.n	800ada0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ada8:	e02c      	b.n	800ae04 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2200      	movs	r2, #0
 800adb2:	2180      	movs	r1, #128	; 0x80
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 ffbf 	bl	800bd38 <UART_WaitOnFlagUntilTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e039      	b.n	800ae38 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10b      	bne.n	800ade2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800add8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	3302      	adds	r3, #2
 800adde:	61bb      	str	r3, [r7, #24]
 800ade0:	e007      	b.n	800adf2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	781a      	ldrb	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	3301      	adds	r3, #1
 800adf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	3b01      	subs	r3, #1
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1cc      	bne.n	800adaa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2200      	movs	r2, #0
 800ae18:	2140      	movs	r1, #64	; 0x40
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 ff8c 	bl	800bd38 <UART_WaitOnFlagUntilTimeout>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e006      	b.n	800ae38 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2220      	movs	r2, #32
 800ae2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	e000      	b.n	800ae38 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ae36:	2302      	movs	r3, #2
  }
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08a      	sub	sp, #40	; 0x28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae54:	2b20      	cmp	r3, #32
 800ae56:	d142      	bne.n	800aede <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <HAL_UART_Receive_IT+0x24>
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e03b      	b.n	800aee0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d101      	bne.n	800ae76 <HAL_UART_Receive_IT+0x36>
 800ae72:	2302      	movs	r3, #2
 800ae74:	e034      	b.n	800aee0 <HAL_UART_Receive_IT+0xa0>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a17      	ldr	r2, [pc, #92]	; (800aee8 <HAL_UART_Receive_IT+0xa8>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d01f      	beq.n	800aece <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d018      	beq.n	800aece <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeba:	623b      	str	r3, [r7, #32]
 800aebc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	69f9      	ldr	r1, [r7, #28]
 800aec0:	6a3a      	ldr	r2, [r7, #32]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e6      	bne.n	800ae9c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800aece:	88fb      	ldrh	r3, [r7, #6]
 800aed0:	461a      	mov	r2, r3
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 fff7 	bl	800bec8 <UART_Start_Receive_IT>
 800aeda:	4603      	mov	r3, r0
 800aedc:	e000      	b.n	800aee0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aede:	2302      	movs	r3, #2
  }
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3728      	adds	r7, #40	; 0x28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	40008000 	.word	0x40008000

0800aeec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	; 0x28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	4613      	mov	r3, r2
 800aef8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af00:	2b20      	cmp	r3, #32
 800af02:	d17a      	bne.n	800affa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d002      	beq.n	800af10 <HAL_UART_Transmit_DMA+0x24>
 800af0a:	88fb      	ldrh	r3, [r7, #6]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e073      	b.n	800affc <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d101      	bne.n	800af22 <HAL_UART_Transmit_DMA+0x36>
 800af1e:	2302      	movs	r3, #2
 800af20:	e06c      	b.n	800affc <HAL_UART_Transmit_DMA+0x110>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	88fa      	ldrh	r2, [r7, #6]
 800af34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	88fa      	ldrh	r2, [r7, #6]
 800af3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2221      	movs	r2, #33	; 0x21
 800af4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af54:	2b00      	cmp	r3, #0
 800af56:	d02c      	beq.n	800afb2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af5c:	4a29      	ldr	r2, [pc, #164]	; (800b004 <HAL_UART_Transmit_DMA+0x118>)
 800af5e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af64:	4a28      	ldr	r2, [pc, #160]	; (800b008 <HAL_UART_Transmit_DMA+0x11c>)
 800af66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af6c:	4a27      	ldr	r2, [pc, #156]	; (800b00c <HAL_UART_Transmit_DMA+0x120>)
 800af6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af74:	2200      	movs	r2, #0
 800af76:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af80:	4619      	mov	r1, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3328      	adds	r3, #40	; 0x28
 800af88:	461a      	mov	r2, r3
 800af8a:	88fb      	ldrh	r3, [r7, #6]
 800af8c:	f7fa f99e 	bl	80052cc <HAL_DMA_Start_IT>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00d      	beq.n	800afb2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2210      	movs	r2, #16
 800af9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e024      	b.n	800affc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2240      	movs	r2, #64	; 0x40
 800afb8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	613b      	str	r3, [r7, #16]
   return(result);
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	3308      	adds	r3, #8
 800afe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe2:	623a      	str	r2, [r7, #32]
 800afe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe6:	69f9      	ldr	r1, [r7, #28]
 800afe8:	6a3a      	ldr	r2, [r7, #32]
 800afea:	e841 2300 	strex	r3, r2, [r1]
 800afee:	61bb      	str	r3, [r7, #24]
   return(result);
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1e5      	bne.n	800afc2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e000      	b.n	800affc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800affa:	2302      	movs	r3, #2
  }
}
 800affc:	4618      	mov	r0, r3
 800affe:	3728      	adds	r7, #40	; 0x28
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	0800c3b3 	.word	0x0800c3b3
 800b008:	0800c44d 	.word	0x0800c44d
 800b00c:	0800c5c7 	.word	0x0800c5c7

0800b010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b0ba      	sub	sp, #232	; 0xe8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b03a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b03e:	4013      	ands	r3, r2
 800b040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11b      	bne.n	800b084 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d015      	beq.n	800b084 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d009      	beq.n	800b084 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 82d6 	beq.w	800b626 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
      }
      return;
 800b082:	e2d0      	b.n	800b626 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 811f 	beq.w	800b2cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b08e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b092:	4b8b      	ldr	r3, [pc, #556]	; (800b2c0 <HAL_UART_IRQHandler+0x2b0>)
 800b094:	4013      	ands	r3, r2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b09a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b09e:	4b89      	ldr	r3, [pc, #548]	; (800b2c4 <HAL_UART_IRQHandler+0x2b4>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 8112 	beq.w	800b2cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d011      	beq.n	800b0d8 <HAL_UART_IRQHandler+0xc8>
 800b0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ce:	f043 0201 	orr.w	r2, r3, #1
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0dc:	f003 0302 	and.w	r3, r3, #2
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d011      	beq.n	800b108 <HAL_UART_IRQHandler+0xf8>
 800b0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0fe:	f043 0204 	orr.w	r2, r3, #4
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d011      	beq.n	800b138 <HAL_UART_IRQHandler+0x128>
 800b114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2204      	movs	r2, #4
 800b126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b12e:	f043 0202 	orr.w	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13c:	f003 0308 	and.w	r3, r3, #8
 800b140:	2b00      	cmp	r3, #0
 800b142:	d017      	beq.n	800b174 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b148:	f003 0320 	and.w	r3, r3, #32
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d105      	bne.n	800b15c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b150:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b154:	4b5a      	ldr	r3, [pc, #360]	; (800b2c0 <HAL_UART_IRQHandler+0x2b0>)
 800b156:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2208      	movs	r2, #8
 800b162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b16a:	f043 0208 	orr.w	r2, r3, #8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d012      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x196>
 800b180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00c      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b19c:	f043 0220 	orr.w	r2, r3, #32
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 823c 	beq.w	800b62a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d013      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fa:	2b40      	cmp	r3, #64	; 0x40
 800b1fc:	d005      	beq.n	800b20a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b202:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b206:	2b00      	cmp	r3, #0
 800b208:	d04f      	beq.n	800b2aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 f86c 	bl	800c2e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d141      	bne.n	800b2a2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3308      	adds	r3, #8
 800b224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b23c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3308      	adds	r3, #8
 800b246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b24a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b24e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1d9      	bne.n	800b21e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d013      	beq.n	800b29a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b276:	4a14      	ldr	r2, [pc, #80]	; (800b2c8 <HAL_UART_IRQHandler+0x2b8>)
 800b278:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fa f900 	bl	8005484 <HAL_DMA_Abort_IT>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d017      	beq.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b294:	4610      	mov	r0, r2
 800b296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b298:	e00f      	b.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f9e2 	bl	800b664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a0:	e00b      	b.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f9de 	bl	800b664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a8:	e007      	b.n	800b2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f9da 	bl	800b664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b2b8:	e1b7      	b.n	800b62a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ba:	bf00      	nop
    return;
 800b2bc:	e1b5      	b.n	800b62a <HAL_UART_IRQHandler+0x61a>
 800b2be:	bf00      	nop
 800b2c0:	10000001 	.word	0x10000001
 800b2c4:	04000120 	.word	0x04000120
 800b2c8:	0800c647 	.word	0x0800c647

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	f040 814a 	bne.w	800b56a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2da:	f003 0310 	and.w	r3, r3, #16
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 8143 	beq.w	800b56a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 813c 	beq.w	800b56a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2210      	movs	r2, #16
 800b2f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b304:	2b40      	cmp	r3, #64	; 0x40
 800b306:	f040 80b5 	bne.w	800b474 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800b316:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 8187 	beq.w	800b62e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b32a:	429a      	cmp	r2, r3
 800b32c:	f080 817f 	bcs.w	800b62e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b336:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b00      	cmp	r3, #0
 800b348:	f040 8086 	bne.w	800b458 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	461a      	mov	r2, r3
 800b372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b37a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b386:	e841 2300 	strex	r3, r2, [r1]
 800b38a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b38e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1da      	bne.n	800b34c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3308      	adds	r3, #8
 800b39c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3a8:	f023 0301 	bic.w	r3, r3, #1
 800b3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3c6:	e841 2300 	strex	r3, r2, [r1]
 800b3ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1e1      	bne.n	800b396 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e3      	bne.n	800b3d2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b428:	f023 0310 	bic.w	r3, r3, #16
 800b42c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	461a      	mov	r2, r3
 800b436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b43a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b43c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e4      	bne.n	800b418 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b452:	4618      	mov	r0, r3
 800b454:	f7f9 ffb8 	bl	80053c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b464:	b29b      	uxth	r3, r3
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7f6 fe6b 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b472:	e0dc      	b.n	800b62e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b480:	b29b      	uxth	r3, r3
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b48e:	b29b      	uxth	r3, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 80ce 	beq.w	800b632 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800b496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f000 80c9 	beq.w	800b632 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800b4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e4      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4fe:	633a      	str	r2, [r7, #48]	; 0x30
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e1      	bne.n	800b4d6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	60fb      	str	r3, [r7, #12]
   return(result);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0310 	bic.w	r3, r3, #16
 800b53a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b548:	61fb      	str	r3, [r7, #28]
 800b54a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	69b9      	ldr	r1, [r7, #24]
 800b54e:	69fa      	ldr	r2, [r7, #28]
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	617b      	str	r3, [r7, #20]
   return(result);
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e4      	bne.n	800b526 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b55c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7f6 fdf0 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b568:	e063      	b.n	800b632 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b56e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00e      	beq.n	800b594 <HAL_UART_IRQHandler+0x584>
 800b576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d008      	beq.n	800b594 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b58a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f001 fcf7 	bl	800cf80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b592:	e051      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d014      	beq.n	800b5ca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d105      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d008      	beq.n	800b5ca <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d03a      	beq.n	800b636 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	4798      	blx	r3
    }
    return;
 800b5c8:	e035      	b.n	800b636 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d009      	beq.n	800b5ea <HAL_UART_IRQHandler+0x5da>
 800b5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 f845 	bl	800c672 <UART_EndTransmit_IT>
    return;
 800b5e8:	e026      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d009      	beq.n	800b60a <HAL_UART_IRQHandler+0x5fa>
 800b5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fcce 	bl	800cfa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b608:	e016      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b60e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b612:	2b00      	cmp	r3, #0
 800b614:	d010      	beq.n	800b638 <HAL_UART_IRQHandler+0x628>
 800b616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	da0c      	bge.n	800b638 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f001 fcb7 	bl	800cf92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b624:	e008      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
      return;
 800b626:	bf00      	nop
 800b628:	e006      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
    return;
 800b62a:	bf00      	nop
 800b62c:	e004      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
      return;
 800b62e:	bf00      	nop
 800b630:	e002      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
      return;
 800b632:	bf00      	nop
 800b634:	e000      	b.n	800b638 <HAL_UART_IRQHandler+0x628>
    return;
 800b636:	bf00      	nop
  }
}
 800b638:	37e8      	adds	r7, #232	; 0xe8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop

0800b640 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bc80      	pop	{r7}
 800b650:	4770      	bx	lr

0800b652 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	bc80      	pop	{r7}
 800b662:	4770      	bx	lr

0800b664 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr
	...

0800b678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b67c:	b08c      	sub	sp, #48	; 0x30
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	689a      	ldr	r2, [r3, #8]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	431a      	orrs	r2, r3
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	431a      	orrs	r2, r3
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	69db      	ldr	r3, [r3, #28]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	4b94      	ldr	r3, [pc, #592]	; (800b8f8 <UART_SetConfig+0x280>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	6812      	ldr	r2, [r2, #0]
 800b6ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a89      	ldr	r2, [pc, #548]	; (800b8fc <UART_SetConfig+0x284>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d004      	beq.n	800b6e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b6ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	6812      	ldr	r2, [r2, #0]
 800b6f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b702:	f023 010f 	bic.w	r1, r3, #15
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a7a      	ldr	r2, [pc, #488]	; (800b900 <UART_SetConfig+0x288>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d127      	bne.n	800b76c <UART_SetConfig+0xf4>
 800b71c:	2003      	movs	r0, #3
 800b71e:	f7ff fa88 	bl	800ac32 <LL_RCC_GetUSARTClockSource>
 800b722:	4603      	mov	r3, r0
 800b724:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d81b      	bhi.n	800b764 <UART_SetConfig+0xec>
 800b72c:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <UART_SetConfig+0xbc>)
 800b72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b732:	bf00      	nop
 800b734:	0800b745 	.word	0x0800b745
 800b738:	0800b755 	.word	0x0800b755
 800b73c:	0800b74d 	.word	0x0800b74d
 800b740:	0800b75d 	.word	0x0800b75d
 800b744:	2301      	movs	r3, #1
 800b746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b74a:	e080      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b74c:	2302      	movs	r3, #2
 800b74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b752:	e07c      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b754:	2304      	movs	r3, #4
 800b756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b75a:	e078      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b75c:	2308      	movs	r3, #8
 800b75e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b762:	e074      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b764:	2310      	movs	r3, #16
 800b766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b76a:	e070      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a64      	ldr	r2, [pc, #400]	; (800b904 <UART_SetConfig+0x28c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d138      	bne.n	800b7e8 <UART_SetConfig+0x170>
 800b776:	200c      	movs	r0, #12
 800b778:	f7ff fa5b 	bl	800ac32 <LL_RCC_GetUSARTClockSource>
 800b77c:	4603      	mov	r3, r0
 800b77e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b782:	2b0c      	cmp	r3, #12
 800b784:	d82c      	bhi.n	800b7e0 <UART_SetConfig+0x168>
 800b786:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <UART_SetConfig+0x114>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b7c1 	.word	0x0800b7c1
 800b790:	0800b7e1 	.word	0x0800b7e1
 800b794:	0800b7e1 	.word	0x0800b7e1
 800b798:	0800b7e1 	.word	0x0800b7e1
 800b79c:	0800b7d1 	.word	0x0800b7d1
 800b7a0:	0800b7e1 	.word	0x0800b7e1
 800b7a4:	0800b7e1 	.word	0x0800b7e1
 800b7a8:	0800b7e1 	.word	0x0800b7e1
 800b7ac:	0800b7c9 	.word	0x0800b7c9
 800b7b0:	0800b7e1 	.word	0x0800b7e1
 800b7b4:	0800b7e1 	.word	0x0800b7e1
 800b7b8:	0800b7e1 	.word	0x0800b7e1
 800b7bc:	0800b7d9 	.word	0x0800b7d9
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7c6:	e042      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7ce:	e03e      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7d6:	e03a      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7de:	e036      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7e6:	e032      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a43      	ldr	r2, [pc, #268]	; (800b8fc <UART_SetConfig+0x284>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d12a      	bne.n	800b848 <UART_SetConfig+0x1d0>
 800b7f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b7f6:	f7ff fa2e 	bl	800ac56 <LL_RCC_GetLPUARTClockSource>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b800:	d01a      	beq.n	800b838 <UART_SetConfig+0x1c0>
 800b802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b806:	d81b      	bhi.n	800b840 <UART_SetConfig+0x1c8>
 800b808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b80c:	d00c      	beq.n	800b828 <UART_SetConfig+0x1b0>
 800b80e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b812:	d815      	bhi.n	800b840 <UART_SetConfig+0x1c8>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <UART_SetConfig+0x1a8>
 800b818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b81c:	d008      	beq.n	800b830 <UART_SetConfig+0x1b8>
 800b81e:	e00f      	b.n	800b840 <UART_SetConfig+0x1c8>
 800b820:	2300      	movs	r3, #0
 800b822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b826:	e012      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b828:	2302      	movs	r3, #2
 800b82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b82e:	e00e      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b830:	2304      	movs	r3, #4
 800b832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b836:	e00a      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b838:	2308      	movs	r3, #8
 800b83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b83e:	e006      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b840:	2310      	movs	r3, #16
 800b842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b846:	e002      	b.n	800b84e <UART_SetConfig+0x1d6>
 800b848:	2310      	movs	r3, #16
 800b84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a2a      	ldr	r2, [pc, #168]	; (800b8fc <UART_SetConfig+0x284>)
 800b854:	4293      	cmp	r3, r2
 800b856:	f040 80a4 	bne.w	800b9a2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b85a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b85e:	2b08      	cmp	r3, #8
 800b860:	d823      	bhi.n	800b8aa <UART_SetConfig+0x232>
 800b862:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <UART_SetConfig+0x1f0>)
 800b864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b868:	0800b88d 	.word	0x0800b88d
 800b86c:	0800b8ab 	.word	0x0800b8ab
 800b870:	0800b895 	.word	0x0800b895
 800b874:	0800b8ab 	.word	0x0800b8ab
 800b878:	0800b89b 	.word	0x0800b89b
 800b87c:	0800b8ab 	.word	0x0800b8ab
 800b880:	0800b8ab 	.word	0x0800b8ab
 800b884:	0800b8ab 	.word	0x0800b8ab
 800b888:	0800b8a3 	.word	0x0800b8a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b88c:	f7fc fb62 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 800b890:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b892:	e010      	b.n	800b8b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b894:	4b1c      	ldr	r3, [pc, #112]	; (800b908 <UART_SetConfig+0x290>)
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b898:	e00d      	b.n	800b8b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b89a:	f7fc faa7 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 800b89e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8a0:	e009      	b.n	800b8b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8a8:	e005      	b.n	800b8b6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 8137 	beq.w	800bb2c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	4a12      	ldr	r2, [pc, #72]	; (800b90c <UART_SetConfig+0x294>)
 800b8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	4413      	add	r3, r2
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d305      	bcc.n	800b8ee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d910      	bls.n	800b910 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b8f4:	e11a      	b.n	800bb2c <UART_SetConfig+0x4b4>
 800b8f6:	bf00      	nop
 800b8f8:	cfff69f3 	.word	0xcfff69f3
 800b8fc:	40008000 	.word	0x40008000
 800b900:	40013800 	.word	0x40013800
 800b904:	40004400 	.word	0x40004400
 800b908:	00f42400 	.word	0x00f42400
 800b90c:	0801f6cc 	.word	0x0801f6cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	2200      	movs	r2, #0
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	60fa      	str	r2, [r7, #12]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	4a8e      	ldr	r2, [pc, #568]	; (800bb58 <UART_SetConfig+0x4e0>)
 800b91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b922:	b29b      	uxth	r3, r3
 800b924:	2200      	movs	r2, #0
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b92e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b932:	f7f5 fa2b 	bl	8000d8c <__aeabi_uldivmod>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4610      	mov	r0, r2
 800b93c:	4619      	mov	r1, r3
 800b93e:	f04f 0200 	mov.w	r2, #0
 800b942:	f04f 0300 	mov.w	r3, #0
 800b946:	020b      	lsls	r3, r1, #8
 800b948:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b94c:	0202      	lsls	r2, r0, #8
 800b94e:	6979      	ldr	r1, [r7, #20]
 800b950:	6849      	ldr	r1, [r1, #4]
 800b952:	0849      	lsrs	r1, r1, #1
 800b954:	2000      	movs	r0, #0
 800b956:	460c      	mov	r4, r1
 800b958:	4605      	mov	r5, r0
 800b95a:	eb12 0804 	adds.w	r8, r2, r4
 800b95e:	eb43 0905 	adc.w	r9, r3, r5
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	469a      	mov	sl, r3
 800b96a:	4693      	mov	fp, r2
 800b96c:	4652      	mov	r2, sl
 800b96e:	465b      	mov	r3, fp
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f5 fa0a 	bl	8000d8c <__aeabi_uldivmod>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4613      	mov	r3, r2
 800b97e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b986:	d308      	bcc.n	800b99a <UART_SetConfig+0x322>
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b98e:	d204      	bcs.n	800b99a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6a3a      	ldr	r2, [r7, #32]
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e0c8      	b.n	800bb2c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b9a0:	e0c4      	b.n	800bb2c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9aa:	d168      	bne.n	800ba7e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b9ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d828      	bhi.n	800ba06 <UART_SetConfig+0x38e>
 800b9b4:	a201      	add	r2, pc, #4	; (adr r2, 800b9bc <UART_SetConfig+0x344>)
 800b9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ba:	bf00      	nop
 800b9bc:	0800b9e1 	.word	0x0800b9e1
 800b9c0:	0800b9e9 	.word	0x0800b9e9
 800b9c4:	0800b9f1 	.word	0x0800b9f1
 800b9c8:	0800ba07 	.word	0x0800ba07
 800b9cc:	0800b9f7 	.word	0x0800b9f7
 800b9d0:	0800ba07 	.word	0x0800ba07
 800b9d4:	0800ba07 	.word	0x0800ba07
 800b9d8:	0800ba07 	.word	0x0800ba07
 800b9dc:	0800b9ff 	.word	0x0800b9ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e0:	f7fc fab8 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 800b9e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9e6:	e014      	b.n	800ba12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9e8:	f7fc fac6 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800b9ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9ee:	e010      	b.n	800ba12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9f0:	4b5a      	ldr	r3, [pc, #360]	; (800bb5c <UART_SetConfig+0x4e4>)
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9f4:	e00d      	b.n	800ba12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9f6:	f7fc f9f9 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 800b9fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9fc:	e009      	b.n	800ba12 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ba04:	e005      	b.n	800ba12 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800ba06:	2300      	movs	r3, #0
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ba10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 8089 	beq.w	800bb2c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	4a4e      	ldr	r2, [pc, #312]	; (800bb58 <UART_SetConfig+0x4e0>)
 800ba20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba24:	461a      	mov	r2, r3
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba2c:	005a      	lsls	r2, r3, #1
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	085b      	lsrs	r3, r3, #1
 800ba34:	441a      	add	r2, r3
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	2b0f      	cmp	r3, #15
 800ba46:	d916      	bls.n	800ba76 <UART_SetConfig+0x3fe>
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba4e:	d212      	bcs.n	800ba76 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f023 030f 	bic.w	r3, r3, #15
 800ba58:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	8bfb      	ldrh	r3, [r7, #30]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	8bfa      	ldrh	r2, [r7, #30]
 800ba72:	60da      	str	r2, [r3, #12]
 800ba74:	e05a      	b.n	800bb2c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ba7c:	e056      	b.n	800bb2c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba82:	2b08      	cmp	r3, #8
 800ba84:	d827      	bhi.n	800bad6 <UART_SetConfig+0x45e>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <UART_SetConfig+0x414>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800bab1 	.word	0x0800bab1
 800ba90:	0800bab9 	.word	0x0800bab9
 800ba94:	0800bac1 	.word	0x0800bac1
 800ba98:	0800bad7 	.word	0x0800bad7
 800ba9c:	0800bac7 	.word	0x0800bac7
 800baa0:	0800bad7 	.word	0x0800bad7
 800baa4:	0800bad7 	.word	0x0800bad7
 800baa8:	0800bad7 	.word	0x0800bad7
 800baac:	0800bacf 	.word	0x0800bacf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bab0:	f7fc fa50 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 800bab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bab6:	e014      	b.n	800bae2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bab8:	f7fc fa5e 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800babc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800babe:	e010      	b.n	800bae2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bac0:	4b26      	ldr	r3, [pc, #152]	; (800bb5c <UART_SetConfig+0x4e4>)
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bac4:	e00d      	b.n	800bae2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bac6:	f7fc f991 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 800baca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bacc:	e009      	b.n	800bae2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bad4:	e005      	b.n	800bae2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bae0:	bf00      	nop
    }

    if (pclk != 0U)
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d021      	beq.n	800bb2c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	4a1a      	ldr	r2, [pc, #104]	; (800bb58 <UART_SetConfig+0x4e0>)
 800baee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	085b      	lsrs	r3, r3, #1
 800bb00:	441a      	add	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	2b0f      	cmp	r3, #15
 800bb12:	d908      	bls.n	800bb26 <UART_SetConfig+0x4ae>
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1a:	d204      	bcs.n	800bb26 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6a3a      	ldr	r2, [r7, #32]
 800bb22:	60da      	str	r2, [r3, #12]
 800bb24:	e002      	b.n	800bb2c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2200      	movs	r2, #0
 800bb46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bb48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3730      	adds	r7, #48	; 0x30
 800bb50:	46bd      	mov	sp, r7
 800bb52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb56:	bf00      	nop
 800bb58:	0801f6cc 	.word	0x0801f6cc
 800bb5c:	00f42400 	.word	0x00f42400

0800bb60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00a      	beq.n	800bb8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	f003 0302 	and.w	r3, r3, #2
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd2:	f003 0308 	and.w	r3, r3, #8
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf4:	f003 0310 	and.w	r3, r3, #16
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	430a      	orrs	r2, r1
 800bc32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d01a      	beq.n	800bc76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	430a      	orrs	r2, r1
 800bc54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc5e:	d10a      	bne.n	800bc76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00a      	beq.n	800bc98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	430a      	orrs	r2, r1
 800bc96:	605a      	str	r2, [r3, #4]
  }
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr

0800bca2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b086      	sub	sp, #24
 800bca6:	af02      	add	r7, sp, #8
 800bca8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcb2:	f7f6 ffbb 	bl	8002c2c <HAL_GetTick>
 800bcb6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 0308 	and.w	r3, r3, #8
 800bcc2:	2b08      	cmp	r3, #8
 800bcc4:	d10e      	bne.n	800bce4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f82f 	bl	800bd38 <UART_WaitOnFlagUntilTimeout>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e025      	b.n	800bd30 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b04      	cmp	r3, #4
 800bcf0:	d10e      	bne.n	800bd10 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f819 	bl	800bd38 <UART_WaitOnFlagUntilTimeout>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	e00f      	b.n	800bd30 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2220      	movs	r2, #32
 800bd14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b09c      	sub	sp, #112	; 0x70
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	603b      	str	r3, [r7, #0]
 800bd44:	4613      	mov	r3, r2
 800bd46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd48:	e0a9      	b.n	800be9e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd50:	f000 80a5 	beq.w	800be9e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd54:	f7f6 ff6a 	bl	8002c2c <HAL_GetTick>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d302      	bcc.n	800bd6a <UART_WaitOnFlagUntilTimeout+0x32>
 800bd64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d140      	bne.n	800bdec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd7e:	667b      	str	r3, [r7, #100]	; 0x64
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd90:	e841 2300 	strex	r3, r2, [r1]
 800bd94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e6      	bne.n	800bd6a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3308      	adds	r3, #8
 800bda2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda6:	e853 3f00 	ldrex	r3, [r3]
 800bdaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	f023 0301 	bic.w	r3, r3, #1
 800bdb2:	663b      	str	r3, [r7, #96]	; 0x60
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3308      	adds	r3, #8
 800bdba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdbc:	64ba      	str	r2, [r7, #72]	; 0x48
 800bdbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdc4:	e841 2300 	strex	r3, r2, [r1]
 800bdc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e5      	bne.n	800bd9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2220      	movs	r2, #32
 800bddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e069      	b.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 0304 	and.w	r3, r3, #4
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d051      	beq.n	800be9e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	69db      	ldr	r3, [r3, #28]
 800be00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be08:	d149      	bne.n	800be9e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	e853 3f00 	ldrex	r3, [r3]
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be32:	637b      	str	r3, [r7, #52]	; 0x34
 800be34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be3a:	e841 2300 	strex	r3, r2, [r1]
 800be3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1e6      	bne.n	800be14 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3308      	adds	r3, #8
 800be4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	e853 3f00 	ldrex	r3, [r3]
 800be54:	613b      	str	r3, [r7, #16]
   return(result);
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	f023 0301 	bic.w	r3, r3, #1
 800be5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3308      	adds	r3, #8
 800be64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be66:	623a      	str	r2, [r7, #32]
 800be68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6a:	69f9      	ldr	r1, [r7, #28]
 800be6c:	6a3a      	ldr	r2, [r7, #32]
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	61bb      	str	r3, [r7, #24]
   return(result);
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e5      	bne.n	800be46 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2220      	movs	r2, #32
 800be7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2220      	movs	r2, #32
 800be86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2220      	movs	r2, #32
 800be8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e010      	b.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	69da      	ldr	r2, [r3, #28]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	4013      	ands	r3, r2
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	429a      	cmp	r2, r3
 800beac:	bf0c      	ite	eq
 800beae:	2301      	moveq	r3, #1
 800beb0:	2300      	movne	r3, #0
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	461a      	mov	r2, r3
 800beb6:	79fb      	ldrb	r3, [r7, #7]
 800beb8:	429a      	cmp	r2, r3
 800beba:	f43f af46 	beq.w	800bd4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3770      	adds	r7, #112	; 0x70
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bec8:	b480      	push	{r7}
 800beca:	b0a3      	sub	sp, #140	; 0x8c
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	88fa      	ldrh	r2, [r7, #6]
 800bee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	88fa      	ldrh	r2, [r7, #6]
 800bee8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befa:	d10e      	bne.n	800bf1a <UART_Start_Receive_IT+0x52>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d105      	bne.n	800bf10 <UART_Start_Receive_IT+0x48>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bf0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf0e:	e02d      	b.n	800bf6c <UART_Start_Receive_IT+0xa4>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	22ff      	movs	r2, #255	; 0xff
 800bf14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf18:	e028      	b.n	800bf6c <UART_Start_Receive_IT+0xa4>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10d      	bne.n	800bf3e <UART_Start_Receive_IT+0x76>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d104      	bne.n	800bf34 <UART_Start_Receive_IT+0x6c>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	22ff      	movs	r2, #255	; 0xff
 800bf2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf32:	e01b      	b.n	800bf6c <UART_Start_Receive_IT+0xa4>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	227f      	movs	r2, #127	; 0x7f
 800bf38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf3c:	e016      	b.n	800bf6c <UART_Start_Receive_IT+0xa4>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf46:	d10d      	bne.n	800bf64 <UART_Start_Receive_IT+0x9c>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <UART_Start_Receive_IT+0x92>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	227f      	movs	r2, #127	; 0x7f
 800bf54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf58:	e008      	b.n	800bf6c <UART_Start_Receive_IT+0xa4>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	223f      	movs	r2, #63	; 0x3f
 800bf5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf62:	e003      	b.n	800bf6c <UART_Start_Receive_IT+0xa4>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2222      	movs	r2, #34	; 0x22
 800bf78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3308      	adds	r3, #8
 800bf82:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf86:	e853 3f00 	ldrex	r3, [r3]
 800bf8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bf8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf8e:	f043 0301 	orr.w	r3, r3, #1
 800bf92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bfa0:	673a      	str	r2, [r7, #112]	; 0x70
 800bfa2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bfa6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bfa8:	e841 2300 	strex	r3, r2, [r1]
 800bfac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bfae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1e3      	bne.n	800bf7c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfbc:	d153      	bne.n	800c066 <UART_Start_Receive_IT+0x19e>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bfc4:	88fa      	ldrh	r2, [r7, #6]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d34d      	bcc.n	800c066 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd2:	d107      	bne.n	800bfe4 <UART_Start_Receive_IT+0x11c>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d103      	bne.n	800bfe4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4a4a      	ldr	r2, [pc, #296]	; (800c108 <UART_Start_Receive_IT+0x240>)
 800bfe0:	671a      	str	r2, [r3, #112]	; 0x70
 800bfe2:	e002      	b.n	800bfea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	4a49      	ldr	r2, [pc, #292]	; (800c10c <UART_Start_Receive_IT+0x244>)
 800bfe8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d01a      	beq.n	800c030 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c00e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c01c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c01e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c022:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e4      	bne.n	800bffa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3308      	adds	r3, #8
 800c036:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c046:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3308      	adds	r3, #8
 800c04e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c050:	64ba      	str	r2, [r7, #72]	; 0x48
 800c052:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c054:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c058:	e841 2300 	strex	r3, r2, [r1]
 800c05c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c05e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e5      	bne.n	800c030 <UART_Start_Receive_IT+0x168>
 800c064:	e04a      	b.n	800c0fc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c06e:	d107      	bne.n	800c080 <UART_Start_Receive_IT+0x1b8>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4a25      	ldr	r2, [pc, #148]	; (800c110 <UART_Start_Receive_IT+0x248>)
 800c07c:	671a      	str	r2, [r3, #112]	; 0x70
 800c07e:	e002      	b.n	800c086 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a24      	ldr	r2, [pc, #144]	; (800c114 <UART_Start_Receive_IT+0x24c>)
 800c084:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d019      	beq.n	800c0ca <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c0aa:	677b      	str	r3, [r7, #116]	; 0x74
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e6      	bne.n	800c096 <UART_Start_Receive_IT+0x1ce>
 800c0c8:	e018      	b.n	800c0fc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	e853 3f00 	ldrex	r3, [r3]
 800c0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	f043 0320 	orr.w	r3, r3, #32
 800c0de:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0e8:	623b      	str	r3, [r7, #32]
 800c0ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	69f9      	ldr	r1, [r7, #28]
 800c0ee:	6a3a      	ldr	r2, [r7, #32]
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e6      	bne.n	800c0ca <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	378c      	adds	r7, #140	; 0x8c
 800c102:	46bd      	mov	sp, r7
 800c104:	bc80      	pop	{r7}
 800c106:	4770      	bx	lr
 800c108:	0800cc81 	.word	0x0800cc81
 800c10c:	0800c989 	.word	0x0800c989
 800c110:	0800c829 	.word	0x0800c829
 800c114:	0800c6c9 	.word	0x0800c6c9

0800c118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b096      	sub	sp, #88	; 0x58
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	4613      	mov	r3, r2
 800c124:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	88fa      	ldrh	r2, [r7, #6]
 800c130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2222      	movs	r2, #34	; 0x22
 800c140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02c      	beq.n	800c1a6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c150:	4a42      	ldr	r2, [pc, #264]	; (800c25c <UART_Start_Receive_DMA+0x144>)
 800c152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c158:	4a41      	ldr	r2, [pc, #260]	; (800c260 <UART_Start_Receive_DMA+0x148>)
 800c15a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c160:	4a40      	ldr	r2, [pc, #256]	; (800c264 <UART_Start_Receive_DMA+0x14c>)
 800c162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c168:	2200      	movs	r2, #0
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3324      	adds	r3, #36	; 0x24
 800c176:	4619      	mov	r1, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c17c:	461a      	mov	r2, r3
 800c17e:	88fb      	ldrh	r3, [r7, #6]
 800c180:	f7f9 f8a4 	bl	80052cc <HAL_DMA_Start_IT>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00d      	beq.n	800c1a6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2210      	movs	r2, #16
 800c18e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2220      	movs	r2, #32
 800c19e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e055      	b.n	800c252 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d018      	beq.n	800c1e8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1ca:	657b      	str	r3, [r7, #84]	; 0x54
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e6      	bne.n	800c1b6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	f043 0301 	orr.w	r3, r3, #1
 800c1fe:	653b      	str	r3, [r7, #80]	; 0x50
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3308      	adds	r3, #8
 800c206:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c208:	637a      	str	r2, [r7, #52]	; 0x34
 800c20a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c20e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e5      	bne.n	800c1e8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3308      	adds	r3, #8
 800c222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	e853 3f00 	ldrex	r3, [r3]
 800c22a:	613b      	str	r3, [r7, #16]
   return(result);
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3308      	adds	r3, #8
 800c23a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c23c:	623a      	str	r2, [r7, #32]
 800c23e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	69f9      	ldr	r1, [r7, #28]
 800c242:	6a3a      	ldr	r2, [r7, #32]
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	61bb      	str	r3, [r7, #24]
   return(result);
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e5      	bne.n	800c21c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3758      	adds	r7, #88	; 0x58
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	0800c469 	.word	0x0800c469
 800c260:	0800c58f 	.word	0x0800c58f
 800c264:	0800c5c7 	.word	0x0800c5c7

0800c268 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c268:	b480      	push	{r7}
 800c26a:	b08f      	sub	sp, #60	; 0x3c
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c284:	637b      	str	r3, [r7, #52]	; 0x34
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c290:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e6      	bne.n	800c270 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c2b8:	633b      	str	r3, [r7, #48]	; 0x30
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c2:	61ba      	str	r2, [r7, #24]
 800c2c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	6979      	ldr	r1, [r7, #20]
 800c2c8:	69ba      	ldr	r2, [r7, #24]
 800c2ca:	e841 2300 	strex	r3, r2, [r1]
 800c2ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1e5      	bne.n	800c2a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2220      	movs	r2, #32
 800c2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c2de:	bf00      	nop
 800c2e0:	373c      	adds	r7, #60	; 0x3c
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bc80      	pop	{r7}
 800c2e6:	4770      	bx	lr

0800c2e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b095      	sub	sp, #84	; 0x54
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c304:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c30e:	643b      	str	r3, [r7, #64]	; 0x40
 800c310:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c312:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c316:	e841 2300 	strex	r3, r2, [r1]
 800c31a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1e6      	bne.n	800c2f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3308      	adds	r3, #8
 800c328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32a:	6a3b      	ldr	r3, [r7, #32]
 800c32c:	e853 3f00 	ldrex	r3, [r3]
 800c330:	61fb      	str	r3, [r7, #28]
   return(result);
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c338:	f023 0301 	bic.w	r3, r3, #1
 800c33c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3308      	adds	r3, #8
 800c344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c346:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c34e:	e841 2300 	strex	r3, r2, [r1]
 800c352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1e3      	bne.n	800c322 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d118      	bne.n	800c394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f023 0310 	bic.w	r3, r3, #16
 800c376:	647b      	str	r3, [r7, #68]	; 0x44
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c380:	61bb      	str	r3, [r7, #24]
 800c382:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6979      	ldr	r1, [r7, #20]
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	613b      	str	r3, [r7, #16]
   return(result);
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e6      	bne.n	800c362 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c3a8:	bf00      	nop
 800c3aa:	3754      	adds	r7, #84	; 0x54
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bc80      	pop	{r7}
 800c3b0:	4770      	bx	lr

0800c3b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b090      	sub	sp, #64	; 0x40
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0320 	and.w	r3, r3, #32
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d137      	bne.n	800c43e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3308      	adds	r3, #8
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c3e6:	6a3b      	ldr	r3, [r7, #32]
 800c3e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3f6:	633a      	str	r2, [r7, #48]	; 0x30
 800c3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fe:	e841 2300 	strex	r3, r2, [r1]
 800c402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1e5      	bne.n	800c3d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	60fb      	str	r3, [r7, #12]
   return(result);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c41e:	637b      	str	r3, [r7, #52]	; 0x34
 800c420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c428:	61fb      	str	r3, [r7, #28]
 800c42a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	69b9      	ldr	r1, [r7, #24]
 800c42e:	69fa      	ldr	r2, [r7, #28]
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	617b      	str	r3, [r7, #20]
   return(result);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e6      	bne.n	800c40a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c43c:	e002      	b.n	800c444 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c43e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c440:	f7f7 fac2 	bl	80039c8 <HAL_UART_TxCpltCallback>
}
 800c444:	bf00      	nop
 800c446:	3740      	adds	r7, #64	; 0x40
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c458:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff f8f0 	bl	800b640 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c460:	bf00      	nop
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b09c      	sub	sp, #112	; 0x70
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0320 	and.w	r3, r3, #32
 800c480:	2b00      	cmp	r3, #0
 800c482:	d171      	bne.n	800c568 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c486:	2200      	movs	r2, #0
 800c488:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c49c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4b2:	e841 2300 	strex	r3, r2, [r1]
 800c4b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1e6      	bne.n	800c48c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c8:	e853 3f00 	ldrex	r3, [r3]
 800c4cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	667b      	str	r3, [r7, #100]	; 0x64
 800c4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4de:	647a      	str	r2, [r7, #68]	; 0x44
 800c4e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4e6:	e841 2300 	strex	r3, r2, [r1]
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1e5      	bne.n	800c4be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	623b      	str	r3, [r7, #32]
   return(result);
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c508:	663b      	str	r3, [r7, #96]	; 0x60
 800c50a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3308      	adds	r3, #8
 800c510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c512:	633a      	str	r2, [r7, #48]	; 0x30
 800c514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e5      	bne.n	800c4f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c528:	2220      	movs	r2, #32
 800c52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c532:	2b01      	cmp	r3, #1
 800c534:	d118      	bne.n	800c568 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	60fb      	str	r3, [r7, #12]
   return(result);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0310 	bic.w	r3, r3, #16
 800c54a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	461a      	mov	r2, r3
 800c552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c554:	61fb      	str	r3, [r7, #28]
 800c556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	69b9      	ldr	r1, [r7, #24]
 800c55a:	69fa      	ldr	r2, [r7, #28]
 800c55c:	e841 2300 	strex	r3, r2, [r1]
 800c560:	617b      	str	r3, [r7, #20]
   return(result);
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e6      	bne.n	800c536 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d107      	bne.n	800c580 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c576:	4619      	mov	r1, r3
 800c578:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c57a:	f7f5 fde5 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c57e:	e002      	b.n	800c586 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c580:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c582:	f7f7 fa37 	bl	80039f4 <HAL_UART_RxCpltCallback>
}
 800c586:	bf00      	nop
 800c588:	3770      	adds	r7, #112	; 0x70
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d109      	bne.n	800c5b8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f7f5 fdc9 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5b6:	e002      	b.n	800c5be <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff f84a 	bl	800b652 <HAL_UART_RxHalfCpltCallback>
}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b086      	sub	sp, #24
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ee:	2b80      	cmp	r3, #128	; 0x80
 800c5f0:	d109      	bne.n	800c606 <UART_DMAError+0x40>
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b21      	cmp	r3, #33	; 0x21
 800c5f6:	d106      	bne.n	800c606 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c600:	6978      	ldr	r0, [r7, #20]
 800c602:	f7ff fe31 	bl	800c268 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c610:	2b40      	cmp	r3, #64	; 0x40
 800c612:	d109      	bne.n	800c628 <UART_DMAError+0x62>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b22      	cmp	r3, #34	; 0x22
 800c618:	d106      	bne.n	800c628 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c622:	6978      	ldr	r0, [r7, #20]
 800c624:	f7ff fe60 	bl	800c2e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c62e:	f043 0210 	orr.w	r2, r3, #16
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c638:	6978      	ldr	r0, [r7, #20]
 800c63a:	f7ff f813 	bl	800b664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c63e:	bf00      	nop
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7fe fffd 	bl	800b664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c66a:	bf00      	nop
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b088      	sub	sp, #32
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	e853 3f00 	ldrex	r3, [r3]
 800c686:	60bb      	str	r3, [r7, #8]
   return(result);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c68e:	61fb      	str	r3, [r7, #28]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	461a      	mov	r2, r3
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	61bb      	str	r3, [r7, #24]
 800c69a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69c:	6979      	ldr	r1, [r7, #20]
 800c69e:	69ba      	ldr	r2, [r7, #24]
 800c6a0:	e841 2300 	strex	r3, r2, [r1]
 800c6a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e6      	bne.n	800c67a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7f7 f984 	bl	80039c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c0:	bf00      	nop
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b096      	sub	sp, #88	; 0x58
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e0:	2b22      	cmp	r3, #34	; 0x22
 800c6e2:	f040 8095 	bne.w	800c810 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c6f4:	b2d9      	uxtb	r1, r3
 800c6f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c700:	400a      	ands	r2, r1
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c728:	b29b      	uxth	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d178      	bne.n	800c820 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	e853 3f00 	ldrex	r3, [r3]
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c742:	653b      	str	r3, [r7, #80]	; 0x50
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c74c:	647b      	str	r3, [r7, #68]	; 0x44
 800c74e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c754:	e841 2300 	strex	r3, r2, [r1]
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e6      	bne.n	800c72e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3308      	adds	r3, #8
 800c766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76a:	e853 3f00 	ldrex	r3, [r3]
 800c76e:	623b      	str	r3, [r7, #32]
   return(result);
 800c770:	6a3b      	ldr	r3, [r7, #32]
 800c772:	f023 0301 	bic.w	r3, r3, #1
 800c776:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3308      	adds	r3, #8
 800c77e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c780:	633a      	str	r2, [r7, #48]	; 0x30
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c788:	e841 2300 	strex	r3, r2, [r1]
 800c78c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e5      	bne.n	800c760 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2220      	movs	r2, #32
 800c798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d12e      	bne.n	800c808 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	e853 3f00 	ldrex	r3, [r3]
 800c7bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f023 0310 	bic.w	r3, r3, #16
 800c7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d2:	69b9      	ldr	r1, [r7, #24]
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	e841 2300 	strex	r3, r2, [r1]
 800c7da:	617b      	str	r3, [r7, #20]
   return(result);
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1e6      	bne.n	800c7b0 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	f003 0310 	and.w	r3, r3, #16
 800c7ec:	2b10      	cmp	r3, #16
 800c7ee:	d103      	bne.n	800c7f8 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2210      	movs	r2, #16
 800c7f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7f5 fca1 	bl	8002148 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c806:	e00b      	b.n	800c820 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7f7 f8f3 	bl	80039f4 <HAL_UART_RxCpltCallback>
}
 800c80e:	e007      	b.n	800c820 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	699a      	ldr	r2, [r3, #24]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f042 0208 	orr.w	r2, r2, #8
 800c81e:	619a      	str	r2, [r3, #24]
}
 800c820:	bf00      	nop
 800c822:	3758      	adds	r7, #88	; 0x58
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b096      	sub	sp, #88	; 0x58
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c836:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c840:	2b22      	cmp	r3, #34	; 0x22
 800c842:	f040 8095 	bne.w	800c970 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c854:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c856:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c85a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c85e:	4013      	ands	r3, r2
 800c860:	b29a      	uxth	r2, r3
 800c862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c864:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c86a:	1c9a      	adds	r2, r3, #2
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c876:	b29b      	uxth	r3, r3
 800c878:	3b01      	subs	r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d178      	bne.n	800c980 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c896:	e853 3f00 	ldrex	r3, [r3]
 800c89a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ac:	643b      	str	r3, [r7, #64]	; 0x40
 800c8ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8b4:	e841 2300 	strex	r3, r2, [r1]
 800c8b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1e6      	bne.n	800c88e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	e853 3f00 	ldrex	r3, [r3]
 800c8ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	f023 0301 	bic.w	r3, r3, #1
 800c8d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3308      	adds	r3, #8
 800c8de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e5      	bne.n	800c8c0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c906:	2b01      	cmp	r3, #1
 800c908:	d12e      	bne.n	800c968 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	f023 0310 	bic.w	r3, r3, #16
 800c924:	647b      	str	r3, [r7, #68]	; 0x44
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c92e:	61bb      	str	r3, [r7, #24]
 800c930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	6979      	ldr	r1, [r7, #20]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	613b      	str	r3, [r7, #16]
   return(result);
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e6      	bne.n	800c910 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b10      	cmp	r3, #16
 800c94e:	d103      	bne.n	800c958 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2210      	movs	r2, #16
 800c956:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7f5 fbf1 	bl	8002148 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c966:	e00b      	b.n	800c980 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7f7 f843 	bl	80039f4 <HAL_UART_RxCpltCallback>
}
 800c96e:	e007      	b.n	800c980 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f042 0208 	orr.w	r2, r2, #8
 800c97e:	619a      	str	r2, [r3, #24]
}
 800c980:	bf00      	nop
 800c982:	3758      	adds	r7, #88	; 0x58
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b0a6      	sub	sp, #152	; 0x98
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c996:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	69db      	ldr	r3, [r3, #28]
 800c9a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9be:	2b22      	cmp	r3, #34	; 0x22
 800c9c0:	f040 814f 	bne.w	800cc62 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9ce:	e0f6      	b.n	800cbbe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9da:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c9de:	b2d9      	uxtb	r1, r3
 800c9e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ea:	400a      	ands	r2, r1
 800c9ec:	b2d2      	uxtb	r2, r2
 800c9ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f4:	1c5a      	adds	r2, r3, #1
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	3b01      	subs	r3, #1
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca1a:	f003 0307 	and.w	r3, r3, #7
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d053      	beq.n	800caca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca26:	f003 0301 	and.w	r3, r3, #1
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d011      	beq.n	800ca52 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ca2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00b      	beq.n	800ca52 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca48:	f043 0201 	orr.w	r2, r3, #1
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d011      	beq.n	800ca82 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ca5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00b      	beq.n	800ca82 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca78:	f043 0204 	orr.w	r2, r3, #4
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca86:	f003 0304 	and.w	r3, r3, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d011      	beq.n	800cab2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ca8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00b      	beq.n	800cab2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2204      	movs	r2, #4
 800caa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caa8:	f043 0202 	orr.w	r2, r3, #2
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d006      	beq.n	800caca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7fe fdd1 	bl	800b664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d173      	bne.n	800cbbe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cadc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cade:	e853 3f00 	ldrex	r3, [r3]
 800cae2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800caf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800cafa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cafe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb00:	e841 2300 	strex	r3, r2, [r1]
 800cb04:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cb06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1e4      	bne.n	800cad6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3308      	adds	r3, #8
 800cb12:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb16:	e853 3f00 	ldrex	r3, [r3]
 800cb1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb22:	f023 0301 	bic.w	r3, r3, #1
 800cb26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cb30:	657a      	str	r2, [r7, #84]	; 0x54
 800cb32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb38:	e841 2300 	strex	r3, r2, [r1]
 800cb3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1e3      	bne.n	800cb0c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d12e      	bne.n	800cbb8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb68:	e853 3f00 	ldrex	r3, [r3]
 800cb6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	f023 0310 	bic.w	r3, r3, #16
 800cb74:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb7e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb86:	e841 2300 	strex	r3, r2, [r1]
 800cb8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1e6      	bne.n	800cb60 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	f003 0310 	and.w	r3, r3, #16
 800cb9c:	2b10      	cmp	r3, #16
 800cb9e:	d103      	bne.n	800cba8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2210      	movs	r2, #16
 800cba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7f5 fac9 	bl	8002148 <HAL_UARTEx_RxEventCallback>
 800cbb6:	e002      	b.n	800cbbe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7f6 ff1b 	bl	80039f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d006      	beq.n	800cbd4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800cbc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbca:	f003 0320 	and.w	r3, r3, #32
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f47f aefe 	bne.w	800c9d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cbde:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d045      	beq.n	800cc72 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d23e      	bcs.n	800cc72 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	e853 3f00 	ldrex	r3, [r3]
 800cc02:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc0a:	673b      	str	r3, [r7, #112]	; 0x70
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3308      	adds	r3, #8
 800cc12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc1c:	e841 2300 	strex	r3, r2, [r1]
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e5      	bne.n	800cbf4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a14      	ldr	r2, [pc, #80]	; (800cc7c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800cc2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	e853 3f00 	ldrex	r3, [r3]
 800cc3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	f043 0320 	orr.w	r3, r3, #32
 800cc42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	461a      	mov	r2, r3
 800cc4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc4c:	61bb      	str	r3, [r7, #24]
 800cc4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc50:	6979      	ldr	r1, [r7, #20]
 800cc52:	69ba      	ldr	r2, [r7, #24]
 800cc54:	e841 2300 	strex	r3, r2, [r1]
 800cc58:	613b      	str	r3, [r7, #16]
   return(result);
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1e6      	bne.n	800cc2e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc60:	e007      	b.n	800cc72 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	699a      	ldr	r2, [r3, #24]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f042 0208 	orr.w	r2, r2, #8
 800cc70:	619a      	str	r2, [r3, #24]
}
 800cc72:	bf00      	nop
 800cc74:	3798      	adds	r7, #152	; 0x98
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	0800c6c9 	.word	0x0800c6c9

0800cc80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b0a8      	sub	sp, #160	; 0xa0
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc8e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb6:	2b22      	cmp	r3, #34	; 0x22
 800ccb8:	f040 8153 	bne.w	800cf62 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccc2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccc6:	e0fa      	b.n	800cebe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ccda:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ccde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800cce2:	4013      	ands	r3, r2
 800cce4:	b29a      	uxth	r2, r3
 800cce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ccea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf0:	1c9a      	adds	r2, r3, #2
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cd12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d053      	beq.n	800cdc6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d011      	beq.n	800cd4e <UART_RxISR_16BIT_FIFOEN+0xce>
 800cd2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00b      	beq.n	800cd4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd44:	f043 0201 	orr.w	r2, r3, #1
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd52:	f003 0302 	and.w	r3, r3, #2
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d011      	beq.n	800cd7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cd5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00b      	beq.n	800cd7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd74:	f043 0204 	orr.w	r2, r3, #4
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd82:	f003 0304 	and.w	r3, r3, #4
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d011      	beq.n	800cdae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cd8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00b      	beq.n	800cdae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda4:	f043 0202 	orr.w	r2, r3, #2
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d006      	beq.n	800cdc6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7fe fc53 	bl	800b664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d175      	bne.n	800cebe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdda:	e853 3f00 	ldrex	r3, [r3]
 800cdde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cde0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cde2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cde6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdf6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdfc:	e841 2300 	strex	r3, r2, [r1]
 800ce00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ce02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1e4      	bne.n	800cdd2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce12:	e853 3f00 	ldrex	r3, [r3]
 800ce16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce1e:	f023 0301 	bic.w	r3, r3, #1
 800ce22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce30:	65ba      	str	r2, [r7, #88]	; 0x58
 800ce32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce38:	e841 2300 	strex	r3, r2, [r1]
 800ce3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e1      	bne.n	800ce08 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2220      	movs	r2, #32
 800ce48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d12e      	bne.n	800ceb8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	e853 3f00 	ldrex	r3, [r3]
 800ce6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce70:	f023 0310 	bic.w	r3, r3, #16
 800ce74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ce80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce86:	e841 2300 	strex	r3, r2, [r1]
 800ce8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1e6      	bne.n	800ce60 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	f003 0310 	and.w	r3, r3, #16
 800ce9c:	2b10      	cmp	r3, #16
 800ce9e:	d103      	bne.n	800cea8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2210      	movs	r2, #16
 800cea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7f5 f949 	bl	8002148 <HAL_UARTEx_RxEventCallback>
 800ceb6:	e002      	b.n	800cebe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7f6 fd9b 	bl	80039f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cebe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <UART_RxISR_16BIT_FIFOEN+0x254>
 800cec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ceca:	f003 0320 	and.w	r3, r3, #32
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f47f aefa 	bne.w	800ccc8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ceda:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cede:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d045      	beq.n	800cf72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ceec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d23e      	bcs.n	800cf72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3308      	adds	r3, #8
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	e853 3f00 	ldrex	r3, [r3]
 800cf02:	623b      	str	r3, [r7, #32]
   return(result);
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf0a:	677b      	str	r3, [r7, #116]	; 0x74
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3308      	adds	r3, #8
 800cf12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cf14:	633a      	str	r2, [r7, #48]	; 0x30
 800cf16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf1c:	e841 2300 	strex	r3, r2, [r1]
 800cf20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1e5      	bne.n	800cef4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a14      	ldr	r2, [pc, #80]	; (800cf7c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800cf2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f043 0320 	orr.w	r3, r3, #32
 800cf42:	673b      	str	r3, [r7, #112]	; 0x70
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf4c:	61fb      	str	r3, [r7, #28]
 800cf4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf50:	69b9      	ldr	r1, [r7, #24]
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	e841 2300 	strex	r3, r2, [r1]
 800cf58:	617b      	str	r3, [r7, #20]
   return(result);
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e6      	bne.n	800cf2e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf60:	e007      	b.n	800cf72 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f042 0208 	orr.w	r2, r2, #8
 800cf70:	619a      	str	r2, [r3, #24]
}
 800cf72:	bf00      	nop
 800cf74:	37a0      	adds	r7, #160	; 0xa0
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	0800c829 	.word	0x0800c829

0800cf80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bc80      	pop	{r7}
 800cf90:	4770      	bx	lr

0800cf92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bc80      	pop	{r7}
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bc80      	pop	{r7}
 800cfb4:	4770      	bx	lr

0800cfb6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b088      	sub	sp, #32
 800cfba:	af02      	add	r7, sp, #8
 800cfbc:	60f8      	str	r0, [r7, #12]
 800cfbe:	1d3b      	adds	r3, r7, #4
 800cfc0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d101      	bne.n	800cfd6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	e046      	b.n	800d064 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2224      	movs	r2, #36	; 0x24
 800cfe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f022 0201 	bic.w	r2, r2, #1
 800cff4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	430a      	orrs	r2, r1
 800d008:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d105      	bne.n	800d01c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800d010:	1d3b      	adds	r3, r7, #4
 800d012:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 f9a5 	bl	800d366 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f042 0201 	orr.w	r2, r2, #1
 800d02a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d02c:	f7f5 fdfe 	bl	8002c2c <HAL_GetTick>
 800d030:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f7fe fe79 	bl	800bd38 <UART_WaitOnFlagUntilTimeout>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	75fb      	strb	r3, [r7, #23]
 800d050:	e003      	b.n	800d05a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2220      	movs	r2, #32
 800d056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800d062:	7dfb      	ldrb	r3, [r7, #23]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3718      	adds	r7, #24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b089      	sub	sp, #36	; 0x24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d101      	bne.n	800d082 <HAL_UARTEx_EnableStopMode+0x16>
 800d07e:	2302      	movs	r3, #2
 800d080:	e021      	b.n	800d0c6 <HAL_UARTEx_EnableStopMode+0x5a>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2201      	movs	r2, #1
 800d086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	e853 3f00 	ldrex	r3, [r3]
 800d096:	60bb      	str	r3, [r7, #8]
   return(result);
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f043 0302 	orr.w	r3, r3, #2
 800d09e:	61fb      	str	r3, [r7, #28]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	61bb      	str	r3, [r7, #24]
 800d0aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ac:	6979      	ldr	r1, [r7, #20]
 800d0ae:	69ba      	ldr	r2, [r7, #24]
 800d0b0:	e841 2300 	strex	r3, r2, [r1]
 800d0b4:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1e6      	bne.n	800d08a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3724      	adds	r7, #36	; 0x24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bc80      	pop	{r7}
 800d0ce:	4770      	bx	lr

0800d0d0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d101      	bne.n	800d0e6 <HAL_UARTEx_EnableFifoMode+0x16>
 800d0e2:	2302      	movs	r3, #2
 800d0e4:	e02b      	b.n	800d13e <HAL_UARTEx_EnableFifoMode+0x6e>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2224      	movs	r2, #36	; 0x24
 800d0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f022 0201 	bic.w	r2, r2, #1
 800d10c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d114:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d11c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f940 	bl	800d3ac <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2220      	movs	r2, #32
 800d130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d146:	b480      	push	{r7}
 800d148:	b085      	sub	sp, #20
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d154:	2b01      	cmp	r3, #1
 800d156:	d101      	bne.n	800d15c <HAL_UARTEx_DisableFifoMode+0x16>
 800d158:	2302      	movs	r3, #2
 800d15a:	e027      	b.n	800d1ac <HAL_UARTEx_DisableFifoMode+0x66>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2224      	movs	r2, #36	; 0x24
 800d168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f022 0201 	bic.w	r2, r2, #1
 800d182:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d18a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2220      	movs	r2, #32
 800d19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bc80      	pop	{r7}
 800d1b4:	4770      	bx	lr

0800d1b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d101      	bne.n	800d1ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	e02d      	b.n	800d22a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2224      	movs	r2, #36	; 0x24
 800d1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0201 	bic.w	r2, r2, #1
 800d1f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f8ce 	bl	800d3ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d242:	2b01      	cmp	r3, #1
 800d244:	d101      	bne.n	800d24a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d246:	2302      	movs	r3, #2
 800d248:	e02d      	b.n	800d2a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2224      	movs	r2, #36	; 0x24
 800d256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0201 	bic.w	r2, r2, #1
 800d270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f890 	bl	800d3ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2220      	movs	r2, #32
 800d298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b08c      	sub	sp, #48	; 0x30
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c2:	2b20      	cmp	r3, #32
 800d2c4:	d14a      	bne.n	800d35c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d2cc:	88fb      	ldrh	r3, [r7, #6]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d101      	bne.n	800d2d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e043      	b.n	800d35e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d101      	bne.n	800d2e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	e03c      	b.n	800d35e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d2f2:	88fb      	ldrh	r3, [r7, #6]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7fe ff0d 	bl	800c118 <UART_Start_Receive_DMA>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d124      	bne.n	800d356 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d310:	2b01      	cmp	r3, #1
 800d312:	d11d      	bne.n	800d350 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2210      	movs	r2, #16
 800d31a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	e853 3f00 	ldrex	r3, [r3]
 800d328:	617b      	str	r3, [r7, #20]
   return(result);
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f043 0310 	orr.w	r3, r3, #16
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	627b      	str	r3, [r7, #36]	; 0x24
 800d33c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33e:	6a39      	ldr	r1, [r7, #32]
 800d340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d342:	e841 2300 	strex	r3, r2, [r1]
 800d346:	61fb      	str	r3, [r7, #28]
   return(result);
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1e6      	bne.n	800d31c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800d34e:	e002      	b.n	800d356 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800d356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d35a:	e000      	b.n	800d35e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d35c:	2302      	movs	r3, #2
  }
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3730      	adds	r7, #48	; 0x30
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d366:	b480      	push	{r7}
 800d368:	b085      	sub	sp, #20
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	60f8      	str	r0, [r7, #12]
 800d36e:	1d3b      	adds	r3, r7, #4
 800d370:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	f023 0210 	bic.w	r2, r3, #16
 800d37e:	893b      	ldrh	r3, [r7, #8]
 800d380:	4619      	mov	r1, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	430a      	orrs	r2, r1
 800d388:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d394:	7abb      	ldrb	r3, [r7, #10]
 800d396:	061a      	lsls	r2, r3, #24
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	605a      	str	r2, [r3, #4]
}
 800d3a0:	bf00      	nop
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bc80      	pop	{r7}
 800d3a8:	4770      	bx	lr
	...

0800d3ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d108      	bne.n	800d3ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3cc:	e031      	b.n	800d432 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3ce:	2308      	movs	r3, #8
 800d3d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3d2:	2308      	movs	r3, #8
 800d3d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	0e5b      	lsrs	r3, r3, #25
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f003 0307 	and.w	r3, r3, #7
 800d3e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	0f5b      	lsrs	r3, r3, #29
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	f003 0307 	and.w	r3, r3, #7
 800d3f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3f6:	7bbb      	ldrb	r3, [r7, #14]
 800d3f8:	7b3a      	ldrb	r2, [r7, #12]
 800d3fa:	4910      	ldr	r1, [pc, #64]	; (800d43c <UARTEx_SetNbDataToProcess+0x90>)
 800d3fc:	5c8a      	ldrb	r2, [r1, r2]
 800d3fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d402:	7b3a      	ldrb	r2, [r7, #12]
 800d404:	490e      	ldr	r1, [pc, #56]	; (800d440 <UARTEx_SetNbDataToProcess+0x94>)
 800d406:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d408:	fb93 f3f2 	sdiv	r3, r3, r2
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	7b7a      	ldrb	r2, [r7, #13]
 800d418:	4908      	ldr	r1, [pc, #32]	; (800d43c <UARTEx_SetNbDataToProcess+0x90>)
 800d41a:	5c8a      	ldrb	r2, [r1, r2]
 800d41c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d420:	7b7a      	ldrb	r2, [r7, #13]
 800d422:	4907      	ldr	r1, [pc, #28]	; (800d440 <UARTEx_SetNbDataToProcess+0x94>)
 800d424:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d426:	fb93 f3f2 	sdiv	r3, r3, r2
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d432:	bf00      	nop
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	bc80      	pop	{r7}
 800d43a:	4770      	bx	lr
 800d43c:	0801f6e4 	.word	0x0801f6e4
 800d440:	0801f6ec 	.word	0x0801f6ec

0800d444 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d448:	f7f5 fa90 	bl	800296c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d44c:	f000 f820 	bl	800d490 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d450:	bf00      	nop
 800d452:	bd80      	pop	{r7, pc}

0800d454 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d458:	f04f 30ff 	mov.w	r0, #4294967295
 800d45c:	f010 fc48 	bl	801dcf0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d460:	bf00      	nop
 800d462:	bd80      	pop	{r7, pc}

0800d464 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d464:	b480      	push	{r7}
 800d466:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d468:	f3bf 8f4f 	dsb	sy
}
 800d46c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d46e:	4b06      	ldr	r3, [pc, #24]	; (800d488 <__NVIC_SystemReset+0x24>)
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d476:	4904      	ldr	r1, [pc, #16]	; (800d488 <__NVIC_SystemReset+0x24>)
 800d478:	4b04      	ldr	r3, [pc, #16]	; (800d48c <__NVIC_SystemReset+0x28>)
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d47e:	f3bf 8f4f 	dsb	sy
}
 800d482:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <__NVIC_SystemReset+0x20>
 800d488:	e000ed00 	.word	0xe000ed00
 800d48c:	05fa0004 	.word	0x05fa0004

0800d490 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d496:	2300      	movs	r3, #0
 800d498:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d49a:	2300      	movs	r3, #0
 800d49c:	9302      	str	r3, [sp, #8]
 800d49e:	2302      	movs	r3, #2
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	4b5a      	ldr	r3, [pc, #360]	; (800d610 <LoRaWAN_Init+0x180>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	2002      	movs	r0, #2
 800d4ae:	f011 f86d 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9302      	str	r3, [sp, #8]
 800d4b6:	2304      	movs	r3, #4
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	4b55      	ldr	r3, [pc, #340]	; (800d614 <LoRaWAN_Init+0x184>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	2002      	movs	r0, #2
 800d4c6:	f011 f861 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	4b50      	ldr	r3, [pc, #320]	; (800d618 <LoRaWAN_Init+0x188>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	2002      	movs	r0, #2
 800d4de:	f011 f855 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d4e2:	1d3b      	adds	r3, r7, #4
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	f003 f8f6 	bl	80106d8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	0e1b      	lsrs	r3, r3, #24
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	0c1b      	lsrs	r3, r3, #16
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	0a1b      	lsrs	r3, r3, #8
 800d500:	b2db      	uxtb	r3, r3
 800d502:	9302      	str	r3, [sp, #8]
 800d504:	9101      	str	r1, [sp, #4]
 800d506:	9200      	str	r2, [sp, #0]
 800d508:	4b44      	ldr	r3, [pc, #272]	; (800d61c <LoRaWAN_Init+0x18c>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	2100      	movs	r1, #0
 800d50e:	2002      	movs	r0, #2
 800d510:	f011 f83c 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d514:	1d3b      	adds	r3, r7, #4
 800d516:	4619      	mov	r1, r3
 800d518:	2001      	movs	r0, #1
 800d51a:	f003 f8dd 	bl	80106d8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	0e1b      	lsrs	r3, r3, #24
 800d522:	b2db      	uxtb	r3, r3
 800d524:	461a      	mov	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	0c1b      	lsrs	r3, r3, #16
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	4619      	mov	r1, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	0a1b      	lsrs	r3, r3, #8
 800d532:	b2db      	uxtb	r3, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	b2c0      	uxtb	r0, r0
 800d538:	9003      	str	r0, [sp, #12]
 800d53a:	9302      	str	r3, [sp, #8]
 800d53c:	9101      	str	r1, [sp, #4]
 800d53e:	9200      	str	r2, [sp, #0]
 800d540:	4b37      	ldr	r3, [pc, #220]	; (800d620 <LoRaWAN_Init+0x190>)
 800d542:	2200      	movs	r2, #0
 800d544:	2100      	movs	r1, #0
 800d546:	2002      	movs	r0, #2
 800d548:	f011 f820 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d54c:	2300      	movs	r3, #0
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	4b34      	ldr	r3, [pc, #208]	; (800d624 <LoRaWAN_Init+0x194>)
 800d552:	2200      	movs	r2, #0
 800d554:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d558:	4833      	ldr	r0, [pc, #204]	; (800d628 <LoRaWAN_Init+0x198>)
 800d55a:	f010 fd69 	bl	801e030 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d55e:	2300      	movs	r3, #0
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	4b32      	ldr	r3, [pc, #200]	; (800d62c <LoRaWAN_Init+0x19c>)
 800d564:	2200      	movs	r2, #0
 800d566:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d56a:	4831      	ldr	r0, [pc, #196]	; (800d630 <LoRaWAN_Init+0x1a0>)
 800d56c:	f010 fd60 	bl	801e030 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d570:	2300      	movs	r3, #0
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	4b2f      	ldr	r3, [pc, #188]	; (800d634 <LoRaWAN_Init+0x1a4>)
 800d576:	2201      	movs	r2, #1
 800d578:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d57c:	482e      	ldr	r0, [pc, #184]	; (800d638 <LoRaWAN_Init+0x1a8>)
 800d57e:	f010 fd57 	bl	801e030 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d582:	2300      	movs	r3, #0
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	4b2d      	ldr	r3, [pc, #180]	; (800d63c <LoRaWAN_Init+0x1ac>)
 800d588:	2200      	movs	r2, #0
 800d58a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d58e:	482c      	ldr	r0, [pc, #176]	; (800d640 <LoRaWAN_Init+0x1b0>)
 800d590:	f010 fd4e 	bl	801e030 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d594:	4a2b      	ldr	r2, [pc, #172]	; (800d644 <LoRaWAN_Init+0x1b4>)
 800d596:	2100      	movs	r1, #0
 800d598:	2001      	movs	r0, #1
 800d59a:	f010 fca5 	bl	801dee8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d59e:	4a2a      	ldr	r2, [pc, #168]	; (800d648 <LoRaWAN_Init+0x1b8>)
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	2002      	movs	r0, #2
 800d5a4:	f010 fca0 	bl	801dee8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d5a8:	4a28      	ldr	r2, [pc, #160]	; (800d64c <LoRaWAN_Init+0x1bc>)
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	2004      	movs	r0, #4
 800d5ae:	f010 fc9b 	bl	801dee8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d5b2:	4a27      	ldr	r2, [pc, #156]	; (800d650 <LoRaWAN_Init+0x1c0>)
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	2008      	movs	r0, #8
 800d5b8:	f010 fc96 	bl	801dee8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d5bc:	f000 fcc6 	bl	800df4c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d5c0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800d5c4:	4823      	ldr	r0, [pc, #140]	; (800d654 <LoRaWAN_Init+0x1c4>)
 800d5c6:	f002 f991 	bl	800f8ec <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d5ca:	4823      	ldr	r0, [pc, #140]	; (800d658 <LoRaWAN_Init+0x1c8>)
 800d5cc:	f002 f9da 	bl	800f984 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d5d0:	4819      	ldr	r0, [pc, #100]	; (800d638 <LoRaWAN_Init+0x1a8>)
 800d5d2:	f010 fd63 	bl	801e09c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d5d6:	4b21      	ldr	r3, [pc, #132]	; (800d65c <LoRaWAN_Init+0x1cc>)
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	4a21      	ldr	r2, [pc, #132]	; (800d660 <LoRaWAN_Init+0x1d0>)
 800d5dc:	7812      	ldrb	r2, [r2, #0]
 800d5de:	4611      	mov	r1, r2
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f002 fb21 	bl	800fc28 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d5e6:	4b1f      	ldr	r3, [pc, #124]	; (800d664 <LoRaWAN_Init+0x1d4>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10b      	bne.n	800d606 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d5ee:	4b1e      	ldr	r3, [pc, #120]	; (800d668 <LoRaWAN_Init+0x1d8>)
 800d5f0:	6819      	ldr	r1, [r3, #0]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	4b1d      	ldr	r3, [pc, #116]	; (800d66c <LoRaWAN_Init+0x1dc>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	481d      	ldr	r0, [pc, #116]	; (800d670 <LoRaWAN_Init+0x1e0>)
 800d5fc:	f010 fd18 	bl	801e030 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d600:	481b      	ldr	r0, [pc, #108]	; (800d670 <LoRaWAN_Init+0x1e0>)
 800d602:	f010 fd4b 	bl	801e09c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d606:	bf00      	nop
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	0801ed18 	.word	0x0801ed18
 800d614:	0801ed3c 	.word	0x0801ed3c
 800d618:	0801ed5c 	.word	0x0801ed5c
 800d61c:	0801ed7c 	.word	0x0801ed7c
 800d620:	0801eda0 	.word	0x0801eda0
 800d624:	0800da45 	.word	0x0800da45
 800d628:	20000c28 	.word	0x20000c28
 800d62c:	0800da57 	.word	0x0800da57
 800d630:	20000c40 	.word	0x20000c40
 800d634:	0800da69 	.word	0x0800da69
 800d638:	20000c58 	.word	0x20000c58
 800d63c:	0800de15 	.word	0x0800de15
 800d640:	20000b1c 	.word	0x20000b1c
 800d644:	0800fc05 	.word	0x0800fc05
 800d648:	0800d7c1 	.word	0x0800d7c1
 800d64c:	0800de39 	.word	0x0800de39
 800d650:	0800dd95 	.word	0x0800dd95
 800d654:	20000034 	.word	0x20000034
 800d658:	20000080 	.word	0x20000080
 800d65c:	20000030 	.word	0x20000030
 800d660:	20000031 	.word	0x20000031
 800d664:	20000b00 	.word	0x20000b00
 800d668:	20000094 	.word	0x20000094
 800d66c:	0800da21 	.word	0x0800da21
 800d670:	20000b04 	.word	0x20000b04

0800d674 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d674:	b5b0      	push	{r4, r5, r7, lr}
 800d676:	b08a      	sub	sp, #40	; 0x28
 800d678:	af06      	add	r7, sp, #24
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 8088 	beq.w	800d79a <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d68a:	4846      	ldr	r0, [pc, #280]	; (800d7a4 <OnRxData+0x130>)
 800d68c:	f010 fd06 	bl	801e09c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d057      	beq.n	800d748 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d054      	beq.n	800d748 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d04d      	beq.n	800d748 <OnRxData+0xd4>
        {
    switch (appData->Port)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d021      	beq.n	800d6f8 <OnRxData+0x84>
 800d6b4:	2b03      	cmp	r3, #3
 800d6b6:	d149      	bne.n	800d74c <OnRxData+0xd8>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d117      	bne.n	800d6f0 <OnRxData+0x7c>
        {
          switch (appData->Buffer[0])
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d00e      	beq.n	800d6e8 <OnRxData+0x74>
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	dc12      	bgt.n	800d6f4 <OnRxData+0x80>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <OnRxData+0x64>
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d004      	beq.n	800d6e0 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d6d6:	e00d      	b.n	800d6f4 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_A);
 800d6d8:	2000      	movs	r0, #0
 800d6da:	f002 fc41 	bl	800ff60 <LmHandlerRequestClass>
              break;
 800d6de:	e00a      	b.n	800d6f6 <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_B);
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	f002 fc3d 	bl	800ff60 <LmHandlerRequestClass>
              break;
 800d6e6:	e006      	b.n	800d6f6 <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_C);
 800d6e8:	2002      	movs	r0, #2
 800d6ea:	f002 fc39 	bl	800ff60 <LmHandlerRequestClass>
              break;
 800d6ee:	e002      	b.n	800d6f6 <OnRxData+0x82>
          }
        }
 800d6f0:	bf00      	nop
 800d6f2:	e02e      	b.n	800d752 <OnRxData+0xde>
              break;
 800d6f4:	bf00      	nop
        break;
 800d6f6:	e02c      	b.n	800d752 <OnRxData+0xde>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	785b      	ldrb	r3, [r3, #1]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d127      	bne.n	800d750 <OnRxData+0xdc>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f003 0301 	and.w	r3, r3, #1
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	4b26      	ldr	r3, [pc, #152]	; (800d7a8 <OnRxData+0x134>)
 800d70e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d710:	4b25      	ldr	r3, [pc, #148]	; (800d7a8 <OnRxData+0x134>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10b      	bne.n	800d730 <OnRxData+0xbc>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d718:	4b24      	ldr	r3, [pc, #144]	; (800d7ac <OnRxData+0x138>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	2100      	movs	r1, #0
 800d71e:	2003      	movs	r0, #3
 800d720:	f010 ff34 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d724:	2201      	movs	r2, #1
 800d726:	2120      	movs	r1, #32
 800d728:	4821      	ldr	r0, [pc, #132]	; (800d7b0 <OnRxData+0x13c>)
 800d72a:	f7f8 fd9d 	bl	8006268 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d72e:	e00f      	b.n	800d750 <OnRxData+0xdc>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d730:	4b20      	ldr	r3, [pc, #128]	; (800d7b4 <OnRxData+0x140>)
 800d732:	2200      	movs	r2, #0
 800d734:	2100      	movs	r1, #0
 800d736:	2003      	movs	r0, #3
 800d738:	f010 ff28 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d73c:	2200      	movs	r2, #0
 800d73e:	2120      	movs	r1, #32
 800d740:	481b      	ldr	r0, [pc, #108]	; (800d7b0 <OnRxData+0x13c>)
 800d742:	f7f8 fd91 	bl	8006268 <HAL_GPIO_WritePin>
        break;
 800d746:	e003      	b.n	800d750 <OnRxData+0xdc>

      default:

        break;
    }
  }
 800d748:	bf00      	nop
 800d74a:	e002      	b.n	800d752 <OnRxData+0xde>
        break;
 800d74c:	bf00      	nop
 800d74e:	e000      	b.n	800d752 <OnRxData+0xde>
        break;
 800d750:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	7c1b      	ldrb	r3, [r3, #16]
 800d756:	2b05      	cmp	r3, #5
 800d758:	d81f      	bhi.n	800d79a <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	7bfa      	ldrb	r2, [r7, #15]
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d766:	460c      	mov	r4, r1
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	7c09      	ldrb	r1, [r1, #16]
 800d76c:	4608      	mov	r0, r1
 800d76e:	4912      	ldr	r1, [pc, #72]	; (800d7b8 <OnRxData+0x144>)
 800d770:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d774:	6838      	ldr	r0, [r7, #0]
 800d776:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d77a:	4605      	mov	r5, r0
 800d77c:	6838      	ldr	r0, [r7, #0]
 800d77e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d782:	9005      	str	r0, [sp, #20]
 800d784:	9504      	str	r5, [sp, #16]
 800d786:	9103      	str	r1, [sp, #12]
 800d788:	9402      	str	r4, [sp, #8]
 800d78a:	9201      	str	r2, [sp, #4]
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	4b0b      	ldr	r3, [pc, #44]	; (800d7bc <OnRxData+0x148>)
 800d790:	2200      	movs	r2, #0
 800d792:	2100      	movs	r1, #0
 800d794:	2003      	movs	r0, #3
 800d796:	f010 fef9 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d79a:	bf00      	nop
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20000c40 	.word	0x20000c40
 800d7a8:	20000c26 	.word	0x20000c26
 800d7ac:	0801edc4 	.word	0x0801edc4
 800d7b0:	48000400 	.word	0x48000400
 800d7b4:	0801edd0 	.word	0x0801edd0
 800d7b8:	20000018 	.word	0x20000018
 800d7bc:	0801eddc 	.word	0x0801eddc

0800d7c0 <SendTxData>:

static void SendTxData(void)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08c      	sub	sp, #48	; 0x30
 800d7c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d7c6:	23ff      	movs	r3, #255	; 0xff
 800d7c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d7cc:	f7f5 f902 	bl	80029d4 <GetBatteryLevel>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d7e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	4b7d      	ldr	r3, [pc, #500]	; (800d9e0 <SendTxData+0x220>)
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	2002      	movs	r0, #2
 800d7f0:	f010 fecc 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7f3 faa2 	bl	8000d40 <__aeabi_f2iz>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	b21b      	sxth	r3, r3
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	4b78      	ldr	r3, [pc, #480]	; (800d9e4 <SendTxData+0x224>)
 800d804:	2201      	movs	r2, #1
 800d806:	2100      	movs	r1, #0
 800d808:	2002      	movs	r0, #2
 800d80a:	f010 febf 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d80e:	4b76      	ldr	r3, [pc, #472]	; (800d9e8 <SendTxData+0x228>)
 800d810:	2202      	movs	r2, #2
 800d812:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800d814:	4b75      	ldr	r3, [pc, #468]	; (800d9ec <SendTxData+0x22c>)
 800d816:	881b      	ldrh	r3, [r3, #0]
 800d818:	4a75      	ldr	r2, [pc, #468]	; (800d9f0 <SendTxData+0x230>)
 800d81a:	fba2 2303 	umull	r2, r3, r2, r3
 800d81e:	095b      	lsrs	r3, r3, #5
 800d820:	b298      	uxth	r0, r3
 800d822:	4b71      	ldr	r3, [pc, #452]	; (800d9e8 <SendTxData+0x228>)
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	1c59      	adds	r1, r3, #1
 800d82a:	61f9      	str	r1, [r7, #28]
 800d82c:	4413      	add	r3, r2
 800d82e:	b2c2      	uxtb	r2, r0
 800d830:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800d832:	4b6e      	ldr	r3, [pc, #440]	; (800d9ec <SendTxData+0x22c>)
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	4a6e      	ldr	r2, [pc, #440]	; (800d9f0 <SendTxData+0x230>)
 800d838:	fba2 1203 	umull	r1, r2, r2, r3
 800d83c:	0952      	lsrs	r2, r2, #5
 800d83e:	2164      	movs	r1, #100	; 0x64
 800d840:	fb01 f202 	mul.w	r2, r1, r2
 800d844:	1a9b      	subs	r3, r3, r2
 800d846:	b298      	uxth	r0, r3
 800d848:	4b67      	ldr	r3, [pc, #412]	; (800d9e8 <SendTxData+0x228>)
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	1c59      	adds	r1, r3, #1
 800d850:	61f9      	str	r1, [r7, #28]
 800d852:	4413      	add	r3, r2
 800d854:	b2c2      	uxtb	r2, r0
 800d856:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d858:	4b66      	ldr	r3, [pc, #408]	; (800d9f4 <SendTxData+0x234>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7f2 fdf7 	bl	8000450 <__aeabi_f2d>
 800d862:	f04f 0200 	mov.w	r2, #0
 800d866:	4b64      	ldr	r3, [pc, #400]	; (800d9f8 <SendTxData+0x238>)
 800d868:	f7f2 fe4a 	bl	8000500 <__aeabi_dmul>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4610      	mov	r0, r2
 800d872:	4619      	mov	r1, r3
 800d874:	f7f3 f8de 	bl	8000a34 <__aeabi_d2iz>
 800d878:	4603      	mov	r3, r0
 800d87a:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d87c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d880:	4a5b      	ldr	r2, [pc, #364]	; (800d9f0 <SendTxData+0x230>)
 800d882:	fb82 1203 	smull	r1, r2, r2, r3
 800d886:	1152      	asrs	r2, r2, #5
 800d888:	17db      	asrs	r3, r3, #31
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	b218      	sxth	r0, r3
 800d88e:	4b56      	ldr	r3, [pc, #344]	; (800d9e8 <SendTxData+0x228>)
 800d890:	685a      	ldr	r2, [r3, #4]
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	1c59      	adds	r1, r3, #1
 800d896:	61f9      	str	r1, [r7, #28]
 800d898:	4413      	add	r3, r2
 800d89a:	b2c2      	uxtb	r2, r0
 800d89c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d89e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d8a2:	4a53      	ldr	r2, [pc, #332]	; (800d9f0 <SendTxData+0x230>)
 800d8a4:	fb82 1203 	smull	r1, r2, r2, r3
 800d8a8:	1151      	asrs	r1, r2, #5
 800d8aa:	17da      	asrs	r2, r3, #31
 800d8ac:	1a8a      	subs	r2, r1, r2
 800d8ae:	2164      	movs	r1, #100	; 0x64
 800d8b0:	fb01 f202 	mul.w	r2, r1, r2
 800d8b4:	1a9b      	subs	r3, r3, r2
 800d8b6:	b218      	sxth	r0, r3
 800d8b8:	4b4b      	ldr	r3, [pc, #300]	; (800d9e8 <SendTxData+0x228>)
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	1c59      	adds	r1, r3, #1
 800d8c0:	61f9      	str	r1, [r7, #28]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	b2c2      	uxtb	r2, r0
 800d8c6:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d8c8:	4b4c      	ldr	r3, [pc, #304]	; (800d9fc <SendTxData+0x23c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7f2 fdbf 	bl	8000450 <__aeabi_f2d>
 800d8d2:	f04f 0200 	mov.w	r2, #0
 800d8d6:	4b48      	ldr	r3, [pc, #288]	; (800d9f8 <SendTxData+0x238>)
 800d8d8:	f7f2 fe12 	bl	8000500 <__aeabi_dmul>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	f7f3 f8a6 	bl	8000a34 <__aeabi_d2iz>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d8ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d8f0:	4a3f      	ldr	r2, [pc, #252]	; (800d9f0 <SendTxData+0x230>)
 800d8f2:	fb82 1203 	smull	r1, r2, r2, r3
 800d8f6:	1152      	asrs	r2, r2, #5
 800d8f8:	17db      	asrs	r3, r3, #31
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	b218      	sxth	r0, r3
 800d8fe:	4b3a      	ldr	r3, [pc, #232]	; (800d9e8 <SendTxData+0x228>)
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	1c59      	adds	r1, r3, #1
 800d906:	61f9      	str	r1, [r7, #28]
 800d908:	4413      	add	r3, r2
 800d90a:	b2c2      	uxtb	r2, r0
 800d90c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d90e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d912:	4a37      	ldr	r2, [pc, #220]	; (800d9f0 <SendTxData+0x230>)
 800d914:	fb82 1203 	smull	r1, r2, r2, r3
 800d918:	1151      	asrs	r1, r2, #5
 800d91a:	17da      	asrs	r2, r3, #31
 800d91c:	1a8a      	subs	r2, r1, r2
 800d91e:	2164      	movs	r1, #100	; 0x64
 800d920:	fb01 f202 	mul.w	r2, r1, r2
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	b218      	sxth	r0, r3
 800d928:	4b2f      	ldr	r3, [pc, #188]	; (800d9e8 <SendTxData+0x228>)
 800d92a:	685a      	ldr	r2, [r3, #4]
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	1c59      	adds	r1, r3, #1
 800d930:	61f9      	str	r1, [r7, #28]
 800d932:	4413      	add	r3, r2
 800d934:	b2c2      	uxtb	r2, r0
 800d936:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	4b2a      	ldr	r3, [pc, #168]	; (800d9e8 <SendTxData+0x228>)
 800d93e:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d940:	4b2f      	ldr	r3, [pc, #188]	; (800da00 <SendTxData+0x240>)
 800d942:	7a5b      	ldrb	r3, [r3, #9]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <SendTxData+0x198>
 800d948:	f002 f9ee 	bl	800fd28 <LmHandlerJoinStatus>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d102      	bne.n	800d958 <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d952:	482b      	ldr	r0, [pc, #172]	; (800da00 <SendTxData+0x240>)
 800d954:	f010 fc10 	bl	801e178 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d958:	4b2a      	ldr	r3, [pc, #168]	; (800da04 <SendTxData+0x244>)
 800d95a:	78db      	ldrb	r3, [r3, #3]
 800d95c:	2200      	movs	r2, #0
 800d95e:	4619      	mov	r1, r3
 800d960:	4821      	ldr	r0, [pc, #132]	; (800d9e8 <SendTxData+0x228>)
 800d962:	f002 f9fd 	bl	800fd60 <LmHandlerSend>
 800d966:	4603      	mov	r3, r0
 800d968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d96c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d974:	4b24      	ldr	r3, [pc, #144]	; (800da08 <SendTxData+0x248>)
 800d976:	2201      	movs	r2, #1
 800d978:	2100      	movs	r1, #0
 800d97a:	2001      	movs	r0, #1
 800d97c:	f010 fe06 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800d980:	e016      	b.n	800d9b0 <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d982:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d986:	f113 0f06 	cmn.w	r3, #6
 800d98a:	d111      	bne.n	800d9b0 <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d98c:	f002 f942 	bl	800fc14 <LmHandlerGetDutyCycleWaitTime>
 800d990:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00b      	beq.n	800d9b0 <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99a:	4a1c      	ldr	r2, [pc, #112]	; (800da0c <SendTxData+0x24c>)
 800d99c:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a0:	099b      	lsrs	r3, r3, #6
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	4b1a      	ldr	r3, [pc, #104]	; (800da10 <SendTxData+0x250>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	f010 fdee 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d9b0:	4b18      	ldr	r3, [pc, #96]	; (800da14 <SendTxData+0x254>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10f      	bne.n	800d9d8 <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d9b8:	4817      	ldr	r0, [pc, #92]	; (800da18 <SendTxData+0x258>)
 800d9ba:	f010 fbdd 	bl	801e178 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d9be:	4b17      	ldr	r3, [pc, #92]	; (800da1c <SendTxData+0x25c>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	bf38      	it	cc
 800d9c8:	4613      	movcc	r3, r2
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4812      	ldr	r0, [pc, #72]	; (800da18 <SendTxData+0x258>)
 800d9ce:	f010 fc43 	bl	801e258 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d9d2:	4811      	ldr	r0, [pc, #68]	; (800da18 <SendTxData+0x258>)
 800d9d4:	f010 fb62 	bl	801e09c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d9d8:	bf00      	nop
 800d9da:	3728      	adds	r7, #40	; 0x28
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	0801ee24 	.word	0x0801ee24
 800d9e4:	0801ee30 	.word	0x0801ee30
 800d9e8:	20000098 	.word	0x20000098
 800d9ec:	20000690 	.word	0x20000690
 800d9f0:	51eb851f 	.word	0x51eb851f
 800d9f4:	20000694 	.word	0x20000694
 800d9f8:	40590000 	.word	0x40590000
 800d9fc:	20000698 	.word	0x20000698
 800da00:	20000c58 	.word	0x20000c58
 800da04:	20000080 	.word	0x20000080
 800da08:	0801ee3c 	.word	0x0801ee3c
 800da0c:	10624dd3 	.word	0x10624dd3
 800da10:	0801ee4c 	.word	0x0801ee4c
 800da14:	20000b00 	.word	0x20000b00
 800da18:	20000b04 	.word	0x20000b04
 800da1c:	20000094 	.word	0x20000094

0800da20 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800da28:	2100      	movs	r1, #0
 800da2a:	2002      	movs	r0, #2
 800da2c:	f010 fa7e 	bl	801df2c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800da30:	4803      	ldr	r0, [pc, #12]	; (800da40 <OnTxTimerEvent+0x20>)
 800da32:	f010 fb33 	bl	801e09c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800da36:	bf00      	nop
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20000b04 	.word	0x20000b04

0800da44 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	bc80      	pop	{r7}
 800da54:	4770      	bx	lr

0800da56 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800da56:	b480      	push	{r7}
 800da58:	b083      	sub	sp, #12
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800da5e:	bf00      	nop
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	bc80      	pop	{r7}
 800da66:	4770      	bx	lr

0800da68 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	bc80      	pop	{r7}
 800da78:	4770      	bx	lr
	...

0800da7c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af04      	add	r7, sp, #16
 800da82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d041      	beq.n	800db0e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d03d      	beq.n	800db0e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800da92:	4821      	ldr	r0, [pc, #132]	; (800db18 <OnTxData+0x9c>)
 800da94:	f010 fb02 	bl	801e09c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800da98:	4b20      	ldr	r3, [pc, #128]	; (800db1c <OnTxData+0xa0>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	2100      	movs	r1, #0
 800da9e:	2002      	movs	r0, #2
 800daa0:	f010 fd74 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	7c12      	ldrb	r2, [r2, #16]
 800daac:	4611      	mov	r1, r2
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800dab4:	4610      	mov	r0, r2
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800dabc:	9203      	str	r2, [sp, #12]
 800dabe:	9002      	str	r0, [sp, #8]
 800dac0:	9101      	str	r1, [sp, #4]
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	4b16      	ldr	r3, [pc, #88]	; (800db20 <OnTxData+0xa4>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	2100      	movs	r1, #0
 800daca:	2003      	movs	r0, #3
 800dacc:	f010 fd5e 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800dad0:	4b14      	ldr	r3, [pc, #80]	; (800db24 <OnTxData+0xa8>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	2100      	movs	r1, #0
 800dad6:	2003      	movs	r0, #3
 800dad8:	f010 fd58 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7a1b      	ldrb	r3, [r3, #8]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d10e      	bne.n	800db02 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	7a5b      	ldrb	r3, [r3, #9]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <OnTxData+0x74>
 800daec:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <OnTxData+0xac>)
 800daee:	e000      	b.n	800daf2 <OnTxData+0x76>
 800daf0:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <OnTxData+0xb0>)
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	4b0e      	ldr	r3, [pc, #56]	; (800db30 <OnTxData+0xb4>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	2100      	movs	r1, #0
 800dafa:	2003      	movs	r0, #3
 800dafc:	f010 fd46 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800db00:	e005      	b.n	800db0e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800db02:	4b0c      	ldr	r3, [pc, #48]	; (800db34 <OnTxData+0xb8>)
 800db04:	2200      	movs	r2, #0
 800db06:	2100      	movs	r1, #0
 800db08:	2003      	movs	r0, #3
 800db0a:	f010 fd3f 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800db0e:	bf00      	nop
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20000c28 	.word	0x20000c28
 800db1c:	0801ee6c 	.word	0x0801ee6c
 800db20:	0801eea0 	.word	0x0801eea0
 800db24:	0801eed4 	.word	0x0801eed4
 800db28:	0801eee4 	.word	0x0801eee4
 800db2c:	0801eee8 	.word	0x0801eee8
 800db30:	0801eef0 	.word	0x0801eef0
 800db34:	0801ef04 	.word	0x0801ef04

0800db38 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d035      	beq.n	800dbb2 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d11a      	bne.n	800db86 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800db50:	481a      	ldr	r0, [pc, #104]	; (800dbbc <OnJoinRequest+0x84>)
 800db52:	f010 fb11 	bl	801e178 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800db56:	4b1a      	ldr	r3, [pc, #104]	; (800dbc0 <OnJoinRequest+0x88>)
 800db58:	2200      	movs	r2, #0
 800db5a:	2100      	movs	r1, #0
 800db5c:	2002      	movs	r0, #2
 800db5e:	f010 fd15 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	799b      	ldrb	r3, [r3, #6]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d106      	bne.n	800db78 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800db6a:	4b16      	ldr	r3, [pc, #88]	; (800dbc4 <OnJoinRequest+0x8c>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	2100      	movs	r1, #0
 800db70:	2002      	movs	r0, #2
 800db72:	f010 fd0b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800db76:	e01c      	b.n	800dbb2 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800db78:	4b13      	ldr	r3, [pc, #76]	; (800dbc8 <OnJoinRequest+0x90>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	2100      	movs	r1, #0
 800db7e:	2002      	movs	r0, #2
 800db80:	f010 fd04 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800db84:	e015      	b.n	800dbb2 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800db86:	4b11      	ldr	r3, [pc, #68]	; (800dbcc <OnJoinRequest+0x94>)
 800db88:	2200      	movs	r2, #0
 800db8a:	2100      	movs	r1, #0
 800db8c:	2002      	movs	r0, #2
 800db8e:	f010 fcfd 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	799b      	ldrb	r3, [r3, #6]
 800db96:	2b02      	cmp	r3, #2
 800db98:	d10b      	bne.n	800dbb2 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800db9a:	4b0d      	ldr	r3, [pc, #52]	; (800dbd0 <OnJoinRequest+0x98>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	2100      	movs	r1, #0
 800dba0:	2002      	movs	r0, #2
 800dba2:	f010 fcf3 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800dba6:	4b0b      	ldr	r3, [pc, #44]	; (800dbd4 <OnJoinRequest+0x9c>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2101      	movs	r1, #1
 800dbac:	4618      	mov	r0, r3
 800dbae:	f002 f83b 	bl	800fc28 <LmHandlerJoin>
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	20000c58 	.word	0x20000c58
 800dbc0:	0801ef14 	.word	0x0801ef14
 800dbc4:	0801ef2c 	.word	0x0801ef2c
 800dbc8:	0801ef4c 	.word	0x0801ef4c
 800dbcc:	0801ef6c 	.word	0x0801ef6c
 800dbd0:	0801ef88 	.word	0x0801ef88
 800dbd4:	20000030 	.word	0x20000030

0800dbd8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800dbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbda:	b093      	sub	sp, #76	; 0x4c
 800dbdc:	af0c      	add	r7, sp, #48	; 0x30
 800dbde:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d056      	beq.n	800dc94 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d008      	beq.n	800dc00 <OnBeaconStatusChange+0x28>
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d049      	beq.n	800dc86 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800dbf2:	4b2b      	ldr	r3, [pc, #172]	; (800dca0 <OnBeaconStatusChange+0xc8>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	2002      	movs	r0, #2
 800dbfa:	f010 fcc7 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dbfe:	e04a      	b.n	800dc96 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	7c1b      	ldrb	r3, [r3, #16]
 800dc04:	4618      	mov	r0, r3
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dc0c:	461c      	mov	r4, r3
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800dc14:	461d      	mov	r5, r3
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	6852      	ldr	r2, [r2, #4]
 800dc1e:	6979      	ldr	r1, [r7, #20]
 800dc20:	7d49      	ldrb	r1, [r1, #21]
 800dc22:	460e      	mov	r6, r1
 800dc24:	6979      	ldr	r1, [r7, #20]
 800dc26:	7d89      	ldrb	r1, [r1, #22]
 800dc28:	6139      	str	r1, [r7, #16]
 800dc2a:	6979      	ldr	r1, [r7, #20]
 800dc2c:	7dc9      	ldrb	r1, [r1, #23]
 800dc2e:	60f9      	str	r1, [r7, #12]
 800dc30:	6979      	ldr	r1, [r7, #20]
 800dc32:	7e09      	ldrb	r1, [r1, #24]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	6979      	ldr	r1, [r7, #20]
 800dc38:	7e49      	ldrb	r1, [r1, #25]
 800dc3a:	6079      	str	r1, [r7, #4]
 800dc3c:	6979      	ldr	r1, [r7, #20]
 800dc3e:	7e89      	ldrb	r1, [r1, #26]
 800dc40:	6039      	str	r1, [r7, #0]
 800dc42:	6979      	ldr	r1, [r7, #20]
 800dc44:	7ec9      	ldrb	r1, [r1, #27]
 800dc46:	910b      	str	r1, [sp, #44]	; 0x2c
 800dc48:	f8d7 c000 	ldr.w	ip, [r7]
 800dc4c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800dc50:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800dc54:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800dc58:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800dc5c:	f8cd c020 	str.w	ip, [sp, #32]
 800dc60:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800dc64:	f8cd c01c 	str.w	ip, [sp, #28]
 800dc68:	6939      	ldr	r1, [r7, #16]
 800dc6a:	9106      	str	r1, [sp, #24]
 800dc6c:	9605      	str	r6, [sp, #20]
 800dc6e:	9204      	str	r2, [sp, #16]
 800dc70:	9303      	str	r3, [sp, #12]
 800dc72:	9502      	str	r5, [sp, #8]
 800dc74:	9401      	str	r4, [sp, #4]
 800dc76:	9000      	str	r0, [sp, #0]
 800dc78:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <OnBeaconStatusChange+0xcc>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	2002      	movs	r0, #2
 800dc80:	f010 fc84 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800dc84:	e007      	b.n	800dc96 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800dc86:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <OnBeaconStatusChange+0xd0>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	2002      	movs	r0, #2
 800dc8e:	f010 fc7d 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dc92:	e000      	b.n	800dc96 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800dc94:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800dc96:	bf00      	nop
 800dc98:	371c      	adds	r7, #28
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	0801efac 	.word	0x0801efac
 800dca4:	0801efc4 	.word	0x0801efc4
 800dca8:	0801f038 	.word	0x0801f038

0800dcac <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af02      	add	r7, sp, #8
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	4a06      	ldr	r2, [pc, #24]	; (800dcd4 <OnClassChange+0x28>)
 800dcba:	5cd3      	ldrb	r3, [r2, r3]
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <OnClassChange+0x2c>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	2002      	movs	r0, #2
 800dcc6:	f010 fc61 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800dcca:	bf00      	nop
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	0801f074 	.word	0x0801f074
 800dcd8:	0801f058 	.word	0x0801f058

0800dcdc <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800dce0:	2100      	movs	r1, #0
 800dce2:	2001      	movs	r0, #1
 800dce4:	f010 f922 	bl	801df2c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800dce8:	bf00      	nop
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800dcf4:	4a0d      	ldr	r2, [pc, #52]	; (800dd2c <OnTxPeriodicityChanged+0x40>)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800dcfa:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <OnTxPeriodicityChanged+0x40>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d103      	bne.n	800dd0a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800dd02:	4b0a      	ldr	r3, [pc, #40]	; (800dd2c <OnTxPeriodicityChanged+0x40>)
 800dd04:	f242 7210 	movw	r2, #10000	; 0x2710
 800dd08:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800dd0a:	4809      	ldr	r0, [pc, #36]	; (800dd30 <OnTxPeriodicityChanged+0x44>)
 800dd0c:	f010 fa34 	bl	801e178 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800dd10:	4b06      	ldr	r3, [pc, #24]	; (800dd2c <OnTxPeriodicityChanged+0x40>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4806      	ldr	r0, [pc, #24]	; (800dd30 <OnTxPeriodicityChanged+0x44>)
 800dd18:	f010 fa9e 	bl	801e258 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800dd1c:	4804      	ldr	r0, [pc, #16]	; (800dd30 <OnTxPeriodicityChanged+0x44>)
 800dd1e:	f010 f9bd 	bl	801e09c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800dd22:	bf00      	nop
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000094 	.word	0x20000094
 800dd30:	20000b04 	.word	0x20000b04

0800dd34 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800dd3e:	4a04      	ldr	r2, [pc, #16]	; (800dd50 <OnTxFrameCtrlChanged+0x1c>)
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800dd44:	bf00      	nop
 800dd46:	370c      	adds	r7, #12
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bc80      	pop	{r7}
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	20000080 	.word	0x20000080

0800dd54 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800dd5e:	4a04      	ldr	r2, [pc, #16]	; (800dd70 <OnPingSlotPeriodicityChanged+0x1c>)
 800dd60:	79fb      	ldrb	r3, [r7, #7]
 800dd62:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800dd64:	bf00      	nop
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bc80      	pop	{r7}
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	20000080 	.word	0x20000080

0800dd74 <OnSystemReset>:

static void OnSystemReset(void)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800dd78:	f002 fcdf 	bl	801073a <LmHandlerHalt>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <OnSystemReset+0x1c>
 800dd82:	f001 ffd1 	bl	800fd28 <LmHandlerJoinStatus>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d101      	bne.n	800dd90 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800dd8c:	f7ff fb6a 	bl	800d464 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800dd90:	bf00      	nop
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <StopJoin>:

static void StopJoin(void)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800dd98:	4817      	ldr	r0, [pc, #92]	; (800ddf8 <StopJoin+0x64>)
 800dd9a:	f010 f9ed 	bl	801e178 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800dd9e:	f002 fcbf 	bl	8010720 <LmHandlerStop>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d006      	beq.n	800ddb6 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800dda8:	4b14      	ldr	r3, [pc, #80]	; (800ddfc <StopJoin+0x68>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2100      	movs	r1, #0
 800ddae:	2002      	movs	r0, #2
 800ddb0:	f010 fbec 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800ddb4:	e01a      	b.n	800ddec <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ddb6:	4b12      	ldr	r3, [pc, #72]	; (800de00 <StopJoin+0x6c>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	2100      	movs	r1, #0
 800ddbc:	2002      	movs	r0, #2
 800ddbe:	f010 fbe5 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ddc2:	4b10      	ldr	r3, [pc, #64]	; (800de04 <StopJoin+0x70>)
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ddc8:	4b0f      	ldr	r3, [pc, #60]	; (800de08 <StopJoin+0x74>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	2100      	movs	r1, #0
 800ddce:	2002      	movs	r0, #2
 800ddd0:	f010 fbdc 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ddd4:	480d      	ldr	r0, [pc, #52]	; (800de0c <StopJoin+0x78>)
 800ddd6:	f001 fdd5 	bl	800f984 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ddda:	4b0a      	ldr	r3, [pc, #40]	; (800de04 <StopJoin+0x70>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2101      	movs	r1, #1
 800dde0:	4618      	mov	r0, r3
 800dde2:	f001 ff21 	bl	800fc28 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800dde6:	4804      	ldr	r0, [pc, #16]	; (800ddf8 <StopJoin+0x64>)
 800dde8:	f010 f958 	bl	801e09c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ddec:	4808      	ldr	r0, [pc, #32]	; (800de10 <StopJoin+0x7c>)
 800ddee:	f010 f955 	bl	801e09c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ddf2:	bf00      	nop
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000b04 	.word	0x20000b04
 800ddfc:	0801f078 	.word	0x0801f078
 800de00:	0801f098 	.word	0x0801f098
 800de04:	20000030 	.word	0x20000030
 800de08:	0801f0ac 	.word	0x0801f0ac
 800de0c:	20000080 	.word	0x20000080
 800de10:	20000b1c 	.word	0x20000b1c

0800de14 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800de1c:	4b05      	ldr	r3, [pc, #20]	; (800de34 <OnStopJoinTimerEvent+0x20>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d103      	bne.n	800de2c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800de24:	2100      	movs	r1, #0
 800de26:	2008      	movs	r0, #8
 800de28:	f010 f880 	bl	801df2c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20000030 	.word	0x20000030

0800de38 <StoreContext>:

static void StoreContext(void)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800de3e:	23ff      	movs	r3, #255	; 0xff
 800de40:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800de42:	f002 fc87 	bl	8010754 <LmHandlerNvmDataStore>
 800de46:	4603      	mov	r3, r0
 800de48:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800de4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de4e:	f113 0f08 	cmn.w	r3, #8
 800de52:	d106      	bne.n	800de62 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800de54:	4b0a      	ldr	r3, [pc, #40]	; (800de80 <StoreContext+0x48>)
 800de56:	2200      	movs	r2, #0
 800de58:	2100      	movs	r1, #0
 800de5a:	2002      	movs	r0, #2
 800de5c:	f010 fb96 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800de60:	e00a      	b.n	800de78 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800de62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6a:	d105      	bne.n	800de78 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800de6c:	4b05      	ldr	r3, [pc, #20]	; (800de84 <StoreContext+0x4c>)
 800de6e:	2200      	movs	r2, #0
 800de70:	2100      	movs	r1, #0
 800de72:	2002      	movs	r0, #2
 800de74:	f010 fb8a 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	0801f0cc 	.word	0x0801f0cc
 800de84:	0801f0e4 	.word	0x0801f0e4

0800de88 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	4603      	mov	r3, r0
 800de90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800de92:	79fb      	ldrb	r3, [r7, #7]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d106      	bne.n	800dea6 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800de98:	4b08      	ldr	r3, [pc, #32]	; (800debc <OnNvmDataChange+0x34>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	2002      	movs	r0, #2
 800dea0:	f010 fb74 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dea4:	e005      	b.n	800deb2 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dea6:	4b06      	ldr	r3, [pc, #24]	; (800dec0 <OnNvmDataChange+0x38>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	2100      	movs	r1, #0
 800deac:	2002      	movs	r0, #2
 800deae:	f010 fb6d 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 800deb2:	bf00      	nop
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	0801f0fc 	.word	0x0801f0fc
 800dec0:	0801f110 	.word	0x0801f110

0800dec4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800dece:	f7f7 fd7f 	bl	80059d0 <HAL_FLASH_Unlock>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d11c      	bne.n	800df12 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800ded8:	4b10      	ldr	r3, [pc, #64]	; (800df1c <OnStoreContextRequest+0x58>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	029a      	lsls	r2, r3, #10
 800dede:	4b10      	ldr	r3, [pc, #64]	; (800df20 <OnStoreContextRequest+0x5c>)
 800dee0:	4013      	ands	r3, r2
 800dee2:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800dee6:	fbb2 f1f3 	udiv	r1, r2, r3
 800deea:	fb01 f303 	mul.w	r3, r1, r3
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	0adb      	lsrs	r3, r3, #11
 800def2:	2200      	movs	r2, #0
 800def4:	2101      	movs	r1, #1
 800def6:	4618      	mov	r0, r3
 800def8:	f7f3 fda7 	bl	8001a4a <FLASH_IF_EraseByPages>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d105      	bne.n	800df0e <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800df02:	2300      	movs	r3, #0
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	4806      	ldr	r0, [pc, #24]	; (800df24 <OnStoreContextRequest+0x60>)
 800df0a:	f7f3 fcbd 	bl	8001888 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800df0e:	f7f7 fd81 	bl	8005a14 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800df12:	bf00      	nop
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	1fff75e0 	.word	0x1fff75e0
 800df20:	03fffc00 	.word	0x03fffc00
 800df24:	0803f000 	.word	0x0803f000

0800df28 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	b29b      	uxth	r3, r3
 800df36:	461a      	mov	r2, r3
 800df38:	4903      	ldr	r1, [pc, #12]	; (800df48 <OnRestoreContextRequest+0x20>)
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f00f fad6 	bl	801d4ec <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	0803f000 	.word	0x0803f000

0800df4c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800df50:	4b15      	ldr	r3, [pc, #84]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800df56:	4b14      	ldr	r3, [pc, #80]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df58:	2200      	movs	r2, #0
 800df5a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800df5c:	4b12      	ldr	r3, [pc, #72]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df5e:	2200      	movs	r2, #0
 800df60:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800df62:	4b11      	ldr	r3, [pc, #68]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df64:	2200      	movs	r2, #0
 800df66:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800df68:	4b0f      	ldr	r3, [pc, #60]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	f043 0320 	orr.w	r3, r3, #32
 800df70:	4a0d      	ldr	r2, [pc, #52]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df72:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800df74:	4b0c      	ldr	r3, [pc, #48]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10c      	bne.n	800df96 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800df7c:	4b0b      	ldr	r3, [pc, #44]	; (800dfac <LoraInfo_Init+0x60>)
 800df7e:	2200      	movs	r2, #0
 800df80:	2100      	movs	r1, #0
 800df82:	2000      	movs	r0, #0
 800df84:	f010 fb02 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800df88:	bf00      	nop
 800df8a:	f010 faed 	bl	801e568 <UTIL_ADV_TRACE_IsBufferEmpty>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b01      	cmp	r3, #1
 800df92:	d1fa      	bne.n	800df8a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800df94:	e7fe      	b.n	800df94 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800df96:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df98:	2200      	movs	r2, #0
 800df9a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800df9c:	4b02      	ldr	r3, [pc, #8]	; (800dfa8 <LoraInfo_Init+0x5c>)
 800df9e:	2203      	movs	r2, #3
 800dfa0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dfa2:	bf00      	nop
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20000c70 	.word	0x20000c70
 800dfac:	0801f124 	.word	0x0801f124

0800dfb0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dfb4:	4b02      	ldr	r3, [pc, #8]	; (800dfc0 <LoraInfo_GetPtr+0x10>)
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bc80      	pop	{r7}
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	20000c70 	.word	0x20000c70

0800dfc4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dfc8:	f7f5 fd77 	bl	8003aba <BSP_RADIO_Init>
 800dfcc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	4603      	mov	r3, r0
 800dfda:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dfdc:	79fb      	ldrb	r3, [r7, #7]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f5 fd9c 	bl	8003b1c <BSP_RADIO_ConfigRFSwitch>
 800dfe4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dff2:	f7f5 fde1 	bl	8003bb8 <BSP_RADIO_GetTxConfig>
 800dff6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800e000:	f7f5 fde1 	bl	8003bc6 <BSP_RADIO_IsTCXO>
 800e004:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e006:	4618      	mov	r0, r3
 800e008:	bd80      	pop	{r7, pc}

0800e00a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800e00e:	f7f5 fde1 	bl	8003bd4 <BSP_RADIO_IsDCDC>
 800e012:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800e014:	4618      	mov	r0, r3
 800e016:	bd80      	pop	{r7, pc}

0800e018 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	4618      	mov	r0, r3
 800e026:	f7f5 fddc 	bl	8003be2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800e02a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	33f1      	adds	r3, #241	; 0xf1
 800e040:	2210      	movs	r2, #16
 800e042:	2100      	movs	r1, #0
 800e044:	4618      	mov	r0, r3
 800e046:	f00b ff87 	bl	8019f58 <memset1>
    ctx->M_n = 0;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	22f0      	movs	r2, #240	; 0xf0
 800e056:	2100      	movs	r1, #0
 800e058:	4618      	mov	r0, r3
 800e05a:	f00b ff7d 	bl	8019f58 <memset1>
}
 800e05e:	bf00      	nop
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b082      	sub	sp, #8
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	461a      	mov	r2, r3
 800e074:	2110      	movs	r1, #16
 800e076:	6838      	ldr	r0, [r7, #0]
 800e078:	f000 fe5c 	bl	800ed34 <lorawan_aes_set_key>
}
 800e07c:	bf00      	nop
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b08c      	sub	sp, #48	; 0x30
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 80a1 	beq.w	800e1de <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0a2:	f1c3 0310 	rsb	r3, r3, #16
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	bf28      	it	cs
 800e0ac:	4613      	movcs	r3, r2
 800e0ae:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0bc:	4413      	add	r3, r2
 800e0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c0:	b292      	uxth	r2, r2
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f00b ff0c 	bl	8019ee2 <memcpy1>
        ctx->M_n += mlen;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	441a      	add	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e0e0:	2b0f      	cmp	r3, #15
 800e0e2:	f240 808d 	bls.w	800e200 <AES_CMAC_Update+0x17c>
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	f000 8088 	beq.w	800e200 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0f4:	e015      	b.n	800e122 <AES_CMAC_Update+0x9e>
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	4413      	add	r3, r2
 800e0fc:	33f1      	adds	r3, #241	; 0xf1
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	68f9      	ldr	r1, [r7, #12]
 800e102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e104:	440b      	add	r3, r1
 800e106:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	4053      	eors	r3, r2
 800e10e:	b2d9      	uxtb	r1, r3
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	4413      	add	r3, r2
 800e116:	33f1      	adds	r3, #241	; 0xf1
 800e118:	460a      	mov	r2, r1
 800e11a:	701a      	strb	r2, [r3, #0]
 800e11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11e:	3301      	adds	r3, #1
 800e120:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e124:	2b0f      	cmp	r3, #15
 800e126:	dde6      	ble.n	800e0f6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e12e:	f107 0314 	add.w	r3, r7, #20
 800e132:	2210      	movs	r2, #16
 800e134:	4618      	mov	r0, r3
 800e136:	f00b fed4 	bl	8019ee2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	f107 0114 	add.w	r1, r7, #20
 800e140:	f107 0314 	add.w	r3, r7, #20
 800e144:	4618      	mov	r0, r3
 800e146:	f000 fed3 	bl	800eef0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	33f1      	adds	r3, #241	; 0xf1
 800e14e:	f107 0114 	add.w	r1, r7, #20
 800e152:	2210      	movs	r2, #16
 800e154:	4618      	mov	r0, r3
 800e156:	f00b fec4 	bl	8019ee2 <memcpy1>

        data += mlen;
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	4413      	add	r3, r2
 800e160:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800e16a:	e038      	b.n	800e1de <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800e16c:	2300      	movs	r3, #0
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e170:	e013      	b.n	800e19a <AES_CMAC_Update+0x116>
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e176:	4413      	add	r3, r2
 800e178:	33f1      	adds	r3, #241	; 0xf1
 800e17a:	781a      	ldrb	r2, [r3, #0]
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	440b      	add	r3, r1
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	4053      	eors	r3, r2
 800e186:	b2d9      	uxtb	r1, r3
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18c:	4413      	add	r3, r2
 800e18e:	33f1      	adds	r3, #241	; 0xf1
 800e190:	460a      	mov	r2, r1
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	3301      	adds	r3, #1
 800e198:	62bb      	str	r3, [r7, #40]	; 0x28
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19c:	2b0f      	cmp	r3, #15
 800e19e:	dde8      	ble.n	800e172 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e1a6:	f107 0314 	add.w	r3, r7, #20
 800e1aa:	2210      	movs	r2, #16
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f00b fe98 	bl	8019ee2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	f107 0114 	add.w	r1, r7, #20
 800e1b8:	f107 0314 	add.w	r3, r7, #20
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f000 fe97 	bl	800eef0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	33f1      	adds	r3, #241	; 0xf1
 800e1c6:	f107 0114 	add.w	r1, r7, #20
 800e1ca:	2210      	movs	r2, #16
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f00b fe88 	bl	8019ee2 <memcpy1>

        data += 16;
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	3310      	adds	r3, #16
 800e1d6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	3b10      	subs	r3, #16
 800e1dc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b10      	cmp	r3, #16
 800e1e2:	d8c3      	bhi.n	800e16c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	b292      	uxth	r2, r2
 800e1ee:	68b9      	ldr	r1, [r7, #8]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f00b fe76 	bl	8019ee2 <memcpy1>
    ctx->M_n = len;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e1fe:	e000      	b.n	800e202 <AES_CMAC_Update+0x17e>
            return;
 800e200:	bf00      	nop
}
 800e202:	3730      	adds	r7, #48	; 0x30
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b092      	sub	sp, #72	; 0x48
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e212:	f107 031c 	add.w	r3, r7, #28
 800e216:	2210      	movs	r2, #16
 800e218:	2100      	movs	r1, #0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f00b fe9c 	bl	8019f58 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	f107 011c 	add.w	r1, r7, #28
 800e226:	f107 031c 	add.w	r3, r7, #28
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 fe60 	bl	800eef0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e230:	7f3b      	ldrb	r3, [r7, #28]
 800e232:	b25b      	sxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	da30      	bge.n	800e29a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800e238:	2300      	movs	r3, #0
 800e23a:	647b      	str	r3, [r7, #68]	; 0x44
 800e23c:	e01b      	b.n	800e276 <AES_CMAC_Final+0x6e>
 800e23e:	f107 021c 	add.w	r2, r7, #28
 800e242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e244:	4413      	add	r3, r2
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	005b      	lsls	r3, r3, #1
 800e24a:	b25a      	sxtb	r2, r3
 800e24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e24e:	3301      	adds	r3, #1
 800e250:	3348      	adds	r3, #72	; 0x48
 800e252:	443b      	add	r3, r7
 800e254:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e258:	09db      	lsrs	r3, r3, #7
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	b25b      	sxtb	r3, r3
 800e25e:	4313      	orrs	r3, r2
 800e260:	b25b      	sxtb	r3, r3
 800e262:	b2d9      	uxtb	r1, r3
 800e264:	f107 021c 	add.w	r2, r7, #28
 800e268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e26a:	4413      	add	r3, r2
 800e26c:	460a      	mov	r2, r1
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e272:	3301      	adds	r3, #1
 800e274:	647b      	str	r3, [r7, #68]	; 0x44
 800e276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e278:	2b0e      	cmp	r3, #14
 800e27a:	dde0      	ble.n	800e23e <AES_CMAC_Final+0x36>
 800e27c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	b2db      	uxtb	r3, r3
 800e284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800e288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e28c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e290:	43db      	mvns	r3, r3
 800e292:	b2db      	uxtb	r3, r3
 800e294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e298:	e027      	b.n	800e2ea <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800e29a:	2300      	movs	r3, #0
 800e29c:	643b      	str	r3, [r7, #64]	; 0x40
 800e29e:	e01b      	b.n	800e2d8 <AES_CMAC_Final+0xd0>
 800e2a0:	f107 021c 	add.w	r2, r7, #28
 800e2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2a6:	4413      	add	r3, r2
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	b25a      	sxtb	r2, r3
 800e2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	3348      	adds	r3, #72	; 0x48
 800e2b4:	443b      	add	r3, r7
 800e2b6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e2ba:	09db      	lsrs	r3, r3, #7
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	b25b      	sxtb	r3, r3
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	b2d9      	uxtb	r1, r3
 800e2c6:	f107 021c 	add.w	r2, r7, #28
 800e2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2cc:	4413      	add	r3, r2
 800e2ce:	460a      	mov	r2, r1
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	643b      	str	r3, [r7, #64]	; 0x40
 800e2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2da:	2b0e      	cmp	r3, #14
 800e2dc:	dde0      	ble.n	800e2a0 <AES_CMAC_Final+0x98>
 800e2de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e2e2:	005b      	lsls	r3, r3, #1
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e2f0:	2b10      	cmp	r3, #16
 800e2f2:	d11d      	bne.n	800e330 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2f8:	e016      	b.n	800e328 <AES_CMAC_Final+0x120>
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2fe:	4413      	add	r3, r2
 800e300:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	f107 011c 	add.w	r1, r7, #28
 800e30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30c:	440b      	add	r3, r1
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	4053      	eors	r3, r2
 800e312:	b2d9      	uxtb	r1, r3
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e318:	4413      	add	r3, r2
 800e31a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e31e:	460a      	mov	r2, r1
 800e320:	701a      	strb	r2, [r3, #0]
 800e322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e324:	3301      	adds	r3, #1
 800e326:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e32a:	2b0f      	cmp	r3, #15
 800e32c:	dde5      	ble.n	800e2fa <AES_CMAC_Final+0xf2>
 800e32e:	e096      	b.n	800e45e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e330:	7f3b      	ldrb	r3, [r7, #28]
 800e332:	b25b      	sxtb	r3, r3
 800e334:	2b00      	cmp	r3, #0
 800e336:	da30      	bge.n	800e39a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e338:	2300      	movs	r3, #0
 800e33a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e33c:	e01b      	b.n	800e376 <AES_CMAC_Final+0x16e>
 800e33e:	f107 021c 	add.w	r2, r7, #28
 800e342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e344:	4413      	add	r3, r2
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	005b      	lsls	r3, r3, #1
 800e34a:	b25a      	sxtb	r2, r3
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	3301      	adds	r3, #1
 800e350:	3348      	adds	r3, #72	; 0x48
 800e352:	443b      	add	r3, r7
 800e354:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e358:	09db      	lsrs	r3, r3, #7
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	b25b      	sxtb	r3, r3
 800e35e:	4313      	orrs	r3, r2
 800e360:	b25b      	sxtb	r3, r3
 800e362:	b2d9      	uxtb	r1, r3
 800e364:	f107 021c 	add.w	r2, r7, #28
 800e368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36a:	4413      	add	r3, r2
 800e36c:	460a      	mov	r2, r1
 800e36e:	701a      	strb	r2, [r3, #0]
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	3301      	adds	r3, #1
 800e374:	63bb      	str	r3, [r7, #56]	; 0x38
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	2b0e      	cmp	r3, #14
 800e37a:	dde0      	ble.n	800e33e <AES_CMAC_Final+0x136>
 800e37c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	b2db      	uxtb	r3, r3
 800e384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e388:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e38c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e390:	43db      	mvns	r3, r3
 800e392:	b2db      	uxtb	r3, r3
 800e394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e398:	e027      	b.n	800e3ea <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e39a:	2300      	movs	r3, #0
 800e39c:	637b      	str	r3, [r7, #52]	; 0x34
 800e39e:	e01b      	b.n	800e3d8 <AES_CMAC_Final+0x1d0>
 800e3a0:	f107 021c 	add.w	r2, r7, #28
 800e3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a6:	4413      	add	r3, r2
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	b25a      	sxtb	r2, r3
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	3348      	adds	r3, #72	; 0x48
 800e3b4:	443b      	add	r3, r7
 800e3b6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e3ba:	09db      	lsrs	r3, r3, #7
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	b25b      	sxtb	r3, r3
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	b25b      	sxtb	r3, r3
 800e3c4:	b2d9      	uxtb	r1, r3
 800e3c6:	f107 021c 	add.w	r2, r7, #28
 800e3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3cc:	4413      	add	r3, r2
 800e3ce:	460a      	mov	r2, r1
 800e3d0:	701a      	strb	r2, [r3, #0]
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	637b      	str	r3, [r7, #52]	; 0x34
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3da:	2b0e      	cmp	r3, #14
 800e3dc:	dde0      	ble.n	800e3a0 <AES_CMAC_Final+0x198>
 800e3de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e3f0:	683a      	ldr	r2, [r7, #0]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	2280      	movs	r2, #128	; 0x80
 800e3f6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e3fa:	e007      	b.n	800e40c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	4413      	add	r3, r2
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e420:	2b0f      	cmp	r3, #15
 800e422:	d9eb      	bls.n	800e3fc <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e424:	2300      	movs	r3, #0
 800e426:	633b      	str	r3, [r7, #48]	; 0x30
 800e428:	e016      	b.n	800e458 <AES_CMAC_Final+0x250>
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42e:	4413      	add	r3, r2
 800e430:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e434:	781a      	ldrb	r2, [r3, #0]
 800e436:	f107 011c 	add.w	r1, r7, #28
 800e43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43c:	440b      	add	r3, r1
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	4053      	eors	r3, r2
 800e442:	b2d9      	uxtb	r1, r3
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	4413      	add	r3, r2
 800e44a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e44e:	460a      	mov	r2, r1
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	3301      	adds	r3, #1
 800e456:	633b      	str	r3, [r7, #48]	; 0x30
 800e458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45a:	2b0f      	cmp	r3, #15
 800e45c:	dde5      	ble.n	800e42a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e45e:	2300      	movs	r3, #0
 800e460:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e462:	e015      	b.n	800e490 <AES_CMAC_Final+0x288>
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	4413      	add	r3, r2
 800e46a:	33f1      	adds	r3, #241	; 0xf1
 800e46c:	781a      	ldrb	r2, [r3, #0]
 800e46e:	6839      	ldr	r1, [r7, #0]
 800e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e472:	440b      	add	r3, r1
 800e474:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	4053      	eors	r3, r2
 800e47c:	b2d9      	uxtb	r1, r3
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	4413      	add	r3, r2
 800e484:	33f1      	adds	r3, #241	; 0xf1
 800e486:	460a      	mov	r2, r1
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	3301      	adds	r3, #1
 800e48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e492:	2b0f      	cmp	r3, #15
 800e494:	dde6      	ble.n	800e464 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e49c:	f107 030c 	add.w	r3, r7, #12
 800e4a0:	2210      	movs	r2, #16
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f00b fd1d 	bl	8019ee2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	f107 030c 	add.w	r3, r7, #12
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f000 fd1d 	bl	800eef0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e4b6:	f107 031c 	add.w	r3, r7, #28
 800e4ba:	2210      	movs	r2, #16
 800e4bc:	2100      	movs	r1, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f00b fd4a 	bl	8019f58 <memset1>
}
 800e4c4:	bf00      	nop
 800e4c6:	3748      	adds	r7, #72	; 0x48
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	781a      	ldrb	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	7852      	ldrb	r2, [r2, #1]
 800e4e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3302      	adds	r3, #2
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	7892      	ldrb	r2, [r2, #2]
 800e4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	3303      	adds	r3, #3
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	78d2      	ldrb	r2, [r2, #3]
 800e4fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3304      	adds	r3, #4
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	7912      	ldrb	r2, [r2, #4]
 800e504:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	3305      	adds	r3, #5
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	7952      	ldrb	r2, [r2, #5]
 800e50e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3306      	adds	r3, #6
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	7992      	ldrb	r2, [r2, #6]
 800e518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	3307      	adds	r3, #7
 800e51e:	683a      	ldr	r2, [r7, #0]
 800e520:	79d2      	ldrb	r2, [r2, #7]
 800e522:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	3308      	adds	r3, #8
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	7a12      	ldrb	r2, [r2, #8]
 800e52c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3309      	adds	r3, #9
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	7a52      	ldrb	r2, [r2, #9]
 800e536:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	330a      	adds	r3, #10
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	7a92      	ldrb	r2, [r2, #10]
 800e540:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	330b      	adds	r3, #11
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	7ad2      	ldrb	r2, [r2, #11]
 800e54a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	330c      	adds	r3, #12
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	7b12      	ldrb	r2, [r2, #12]
 800e554:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	330d      	adds	r3, #13
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	7b52      	ldrb	r2, [r2, #13]
 800e55e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	330e      	adds	r3, #14
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	7b92      	ldrb	r2, [r2, #14]
 800e568:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	330f      	adds	r3, #15
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	7bd2      	ldrb	r2, [r2, #15]
 800e572:	701a      	strb	r2, [r3, #0]
#endif
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	bc80      	pop	{r7}
 800e57c:	4770      	bx	lr

0800e57e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e57e:	b480      	push	{r7}
 800e580:	b085      	sub	sp, #20
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	4613      	mov	r3, r2
 800e58a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e58c:	e007      	b.n	800e59e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	1c53      	adds	r3, r2, #1
 800e592:	60bb      	str	r3, [r7, #8]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	1c59      	adds	r1, r3, #1
 800e598:	60f9      	str	r1, [r7, #12]
 800e59a:	7812      	ldrb	r2, [r2, #0]
 800e59c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	1e5a      	subs	r2, r3, #1
 800e5a2:	71fa      	strb	r2, [r7, #7]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1f2      	bne.n	800e58e <copy_block_nn+0x10>
}
 800e5a8:	bf00      	nop
 800e5aa:	bf00      	nop
 800e5ac:	3714      	adds	r7, #20
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bc80      	pop	{r7}
 800e5b2:	4770      	bx	lr

0800e5b4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	781a      	ldrb	r2, [r3, #0]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	4053      	eors	r3, r2
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	7819      	ldrb	r1, [r3, #0]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	781a      	ldrb	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	404a      	eors	r2, r1
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	3302      	adds	r3, #2
 800e5e8:	7819      	ldrb	r1, [r3, #0]
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	3302      	adds	r3, #2
 800e5ee:	781a      	ldrb	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	3302      	adds	r3, #2
 800e5f4:	404a      	eors	r2, r1
 800e5f6:	b2d2      	uxtb	r2, r2
 800e5f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	3303      	adds	r3, #3
 800e5fe:	7819      	ldrb	r1, [r3, #0]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	3303      	adds	r3, #3
 800e604:	781a      	ldrb	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	3303      	adds	r3, #3
 800e60a:	404a      	eors	r2, r1
 800e60c:	b2d2      	uxtb	r2, r2
 800e60e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3304      	adds	r3, #4
 800e614:	7819      	ldrb	r1, [r3, #0]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	3304      	adds	r3, #4
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3304      	adds	r3, #4
 800e620:	404a      	eors	r2, r1
 800e622:	b2d2      	uxtb	r2, r2
 800e624:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3305      	adds	r3, #5
 800e62a:	7819      	ldrb	r1, [r3, #0]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	3305      	adds	r3, #5
 800e630:	781a      	ldrb	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	3305      	adds	r3, #5
 800e636:	404a      	eors	r2, r1
 800e638:	b2d2      	uxtb	r2, r2
 800e63a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3306      	adds	r3, #6
 800e640:	7819      	ldrb	r1, [r3, #0]
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	3306      	adds	r3, #6
 800e646:	781a      	ldrb	r2, [r3, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3306      	adds	r3, #6
 800e64c:	404a      	eors	r2, r1
 800e64e:	b2d2      	uxtb	r2, r2
 800e650:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3307      	adds	r3, #7
 800e656:	7819      	ldrb	r1, [r3, #0]
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	3307      	adds	r3, #7
 800e65c:	781a      	ldrb	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3307      	adds	r3, #7
 800e662:	404a      	eors	r2, r1
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3308      	adds	r3, #8
 800e66c:	7819      	ldrb	r1, [r3, #0]
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	3308      	adds	r3, #8
 800e672:	781a      	ldrb	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3308      	adds	r3, #8
 800e678:	404a      	eors	r2, r1
 800e67a:	b2d2      	uxtb	r2, r2
 800e67c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	3309      	adds	r3, #9
 800e682:	7819      	ldrb	r1, [r3, #0]
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	3309      	adds	r3, #9
 800e688:	781a      	ldrb	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3309      	adds	r3, #9
 800e68e:	404a      	eors	r2, r1
 800e690:	b2d2      	uxtb	r2, r2
 800e692:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	330a      	adds	r3, #10
 800e698:	7819      	ldrb	r1, [r3, #0]
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	330a      	adds	r3, #10
 800e69e:	781a      	ldrb	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	330a      	adds	r3, #10
 800e6a4:	404a      	eors	r2, r1
 800e6a6:	b2d2      	uxtb	r2, r2
 800e6a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	330b      	adds	r3, #11
 800e6ae:	7819      	ldrb	r1, [r3, #0]
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	330b      	adds	r3, #11
 800e6b4:	781a      	ldrb	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	330b      	adds	r3, #11
 800e6ba:	404a      	eors	r2, r1
 800e6bc:	b2d2      	uxtb	r2, r2
 800e6be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	330c      	adds	r3, #12
 800e6c4:	7819      	ldrb	r1, [r3, #0]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	330c      	adds	r3, #12
 800e6ca:	781a      	ldrb	r2, [r3, #0]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	330c      	adds	r3, #12
 800e6d0:	404a      	eors	r2, r1
 800e6d2:	b2d2      	uxtb	r2, r2
 800e6d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	330d      	adds	r3, #13
 800e6da:	7819      	ldrb	r1, [r3, #0]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	330d      	adds	r3, #13
 800e6e0:	781a      	ldrb	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	330d      	adds	r3, #13
 800e6e6:	404a      	eors	r2, r1
 800e6e8:	b2d2      	uxtb	r2, r2
 800e6ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	330e      	adds	r3, #14
 800e6f0:	7819      	ldrb	r1, [r3, #0]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	330e      	adds	r3, #14
 800e6f6:	781a      	ldrb	r2, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	330e      	adds	r3, #14
 800e6fc:	404a      	eors	r2, r1
 800e6fe:	b2d2      	uxtb	r2, r2
 800e700:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	330f      	adds	r3, #15
 800e706:	7819      	ldrb	r1, [r3, #0]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	330f      	adds	r3, #15
 800e70c:	781a      	ldrb	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	330f      	adds	r3, #15
 800e712:	404a      	eors	r2, r1
 800e714:	b2d2      	uxtb	r2, r2
 800e716:	701a      	strb	r2, [r3, #0]
#endif
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bc80      	pop	{r7}
 800e720:	4770      	bx	lr

0800e722 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e722:	b480      	push	{r7}
 800e724:	b085      	sub	sp, #20
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	781a      	ldrb	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	4053      	eors	r3, r2
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	3301      	adds	r3, #1
 800e742:	7819      	ldrb	r1, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3301      	adds	r3, #1
 800e748:	781a      	ldrb	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	3301      	adds	r3, #1
 800e74e:	404a      	eors	r2, r1
 800e750:	b2d2      	uxtb	r2, r2
 800e752:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	3302      	adds	r3, #2
 800e758:	7819      	ldrb	r1, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	3302      	adds	r3, #2
 800e75e:	781a      	ldrb	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3302      	adds	r3, #2
 800e764:	404a      	eors	r2, r1
 800e766:	b2d2      	uxtb	r2, r2
 800e768:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	3303      	adds	r3, #3
 800e76e:	7819      	ldrb	r1, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3303      	adds	r3, #3
 800e774:	781a      	ldrb	r2, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3303      	adds	r3, #3
 800e77a:	404a      	eors	r2, r1
 800e77c:	b2d2      	uxtb	r2, r2
 800e77e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	3304      	adds	r3, #4
 800e784:	7819      	ldrb	r1, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	3304      	adds	r3, #4
 800e78a:	781a      	ldrb	r2, [r3, #0]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3304      	adds	r3, #4
 800e790:	404a      	eors	r2, r1
 800e792:	b2d2      	uxtb	r2, r2
 800e794:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	3305      	adds	r3, #5
 800e79a:	7819      	ldrb	r1, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3305      	adds	r3, #5
 800e7a0:	781a      	ldrb	r2, [r3, #0]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3305      	adds	r3, #5
 800e7a6:	404a      	eors	r2, r1
 800e7a8:	b2d2      	uxtb	r2, r2
 800e7aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	3306      	adds	r3, #6
 800e7b0:	7819      	ldrb	r1, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	3306      	adds	r3, #6
 800e7b6:	781a      	ldrb	r2, [r3, #0]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	3306      	adds	r3, #6
 800e7bc:	404a      	eors	r2, r1
 800e7be:	b2d2      	uxtb	r2, r2
 800e7c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	3307      	adds	r3, #7
 800e7c6:	7819      	ldrb	r1, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	3307      	adds	r3, #7
 800e7cc:	781a      	ldrb	r2, [r3, #0]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3307      	adds	r3, #7
 800e7d2:	404a      	eors	r2, r1
 800e7d4:	b2d2      	uxtb	r2, r2
 800e7d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	3308      	adds	r3, #8
 800e7dc:	7819      	ldrb	r1, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	781a      	ldrb	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	3308      	adds	r3, #8
 800e7e8:	404a      	eors	r2, r1
 800e7ea:	b2d2      	uxtb	r2, r2
 800e7ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	3309      	adds	r3, #9
 800e7f2:	7819      	ldrb	r1, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	3309      	adds	r3, #9
 800e7f8:	781a      	ldrb	r2, [r3, #0]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3309      	adds	r3, #9
 800e7fe:	404a      	eors	r2, r1
 800e800:	b2d2      	uxtb	r2, r2
 800e802:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	330a      	adds	r3, #10
 800e808:	7819      	ldrb	r1, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	330a      	adds	r3, #10
 800e80e:	781a      	ldrb	r2, [r3, #0]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	330a      	adds	r3, #10
 800e814:	404a      	eors	r2, r1
 800e816:	b2d2      	uxtb	r2, r2
 800e818:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	330b      	adds	r3, #11
 800e81e:	7819      	ldrb	r1, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	330b      	adds	r3, #11
 800e824:	781a      	ldrb	r2, [r3, #0]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	330b      	adds	r3, #11
 800e82a:	404a      	eors	r2, r1
 800e82c:	b2d2      	uxtb	r2, r2
 800e82e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	330c      	adds	r3, #12
 800e834:	7819      	ldrb	r1, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	330c      	adds	r3, #12
 800e83a:	781a      	ldrb	r2, [r3, #0]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	330c      	adds	r3, #12
 800e840:	404a      	eors	r2, r1
 800e842:	b2d2      	uxtb	r2, r2
 800e844:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	330d      	adds	r3, #13
 800e84a:	7819      	ldrb	r1, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	330d      	adds	r3, #13
 800e850:	781a      	ldrb	r2, [r3, #0]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	330d      	adds	r3, #13
 800e856:	404a      	eors	r2, r1
 800e858:	b2d2      	uxtb	r2, r2
 800e85a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	330e      	adds	r3, #14
 800e860:	7819      	ldrb	r1, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	330e      	adds	r3, #14
 800e866:	781a      	ldrb	r2, [r3, #0]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	330e      	adds	r3, #14
 800e86c:	404a      	eors	r2, r1
 800e86e:	b2d2      	uxtb	r2, r2
 800e870:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	330f      	adds	r3, #15
 800e876:	7819      	ldrb	r1, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	330f      	adds	r3, #15
 800e87c:	781a      	ldrb	r2, [r3, #0]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	330f      	adds	r3, #15
 800e882:	404a      	eors	r2, r1
 800e884:	b2d2      	uxtb	r2, r2
 800e886:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e888:	bf00      	nop
 800e88a:	3714      	adds	r7, #20
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bc80      	pop	{r7}
 800e890:	4770      	bx	lr

0800e892 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b082      	sub	sp, #8
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff fe88 	bl	800e5b4 <xor_block>
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	4b48      	ldr	r3, [pc, #288]	; (800e9dc <shift_sub_rows+0x130>)
 800e8bc:	5c9a      	ldrb	r2, [r3, r2]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	701a      	strb	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	4a43      	ldr	r2, [pc, #268]	; (800e9dc <shift_sub_rows+0x130>)
 800e8d0:	5c52      	ldrb	r2, [r2, r1]
 800e8d2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	4619      	mov	r1, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	4a3e      	ldr	r2, [pc, #248]	; (800e9dc <shift_sub_rows+0x130>)
 800e8e2:	5c52      	ldrb	r2, [r2, r1]
 800e8e4:	701a      	strb	r2, [r3, #0]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	330c      	adds	r3, #12
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	330c      	adds	r3, #12
 800e8f2:	4a3a      	ldr	r2, [pc, #232]	; (800e9dc <shift_sub_rows+0x130>)
 800e8f4:	5c52      	ldrb	r2, [r2, r1]
 800e8f6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	785b      	ldrb	r3, [r3, #1]
 800e8fc:	73fb      	strb	r3, [r7, #15]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3305      	adds	r3, #5
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	4619      	mov	r1, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	3301      	adds	r3, #1
 800e90a:	4a34      	ldr	r2, [pc, #208]	; (800e9dc <shift_sub_rows+0x130>)
 800e90c:	5c52      	ldrb	r2, [r2, r1]
 800e90e:	701a      	strb	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	3309      	adds	r3, #9
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	4619      	mov	r1, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3305      	adds	r3, #5
 800e91c:	4a2f      	ldr	r2, [pc, #188]	; (800e9dc <shift_sub_rows+0x130>)
 800e91e:	5c52      	ldrb	r2, [r2, r1]
 800e920:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	330d      	adds	r3, #13
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	4619      	mov	r1, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3309      	adds	r3, #9
 800e92e:	4a2b      	ldr	r2, [pc, #172]	; (800e9dc <shift_sub_rows+0x130>)
 800e930:	5c52      	ldrb	r2, [r2, r1]
 800e932:	701a      	strb	r2, [r3, #0]
 800e934:	7bfa      	ldrb	r2, [r7, #15]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	330d      	adds	r3, #13
 800e93a:	4928      	ldr	r1, [pc, #160]	; (800e9dc <shift_sub_rows+0x130>)
 800e93c:	5c8a      	ldrb	r2, [r1, r2]
 800e93e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	789b      	ldrb	r3, [r3, #2]
 800e944:	73fb      	strb	r3, [r7, #15]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	330a      	adds	r3, #10
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	4619      	mov	r1, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3302      	adds	r3, #2
 800e952:	4a22      	ldr	r2, [pc, #136]	; (800e9dc <shift_sub_rows+0x130>)
 800e954:	5c52      	ldrb	r2, [r2, r1]
 800e956:	701a      	strb	r2, [r3, #0]
 800e958:	7bfa      	ldrb	r2, [r7, #15]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	330a      	adds	r3, #10
 800e95e:	491f      	ldr	r1, [pc, #124]	; (800e9dc <shift_sub_rows+0x130>)
 800e960:	5c8a      	ldrb	r2, [r1, r2]
 800e962:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	799b      	ldrb	r3, [r3, #6]
 800e968:	73fb      	strb	r3, [r7, #15]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	330e      	adds	r3, #14
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	4619      	mov	r1, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3306      	adds	r3, #6
 800e976:	4a19      	ldr	r2, [pc, #100]	; (800e9dc <shift_sub_rows+0x130>)
 800e978:	5c52      	ldrb	r2, [r2, r1]
 800e97a:	701a      	strb	r2, [r3, #0]
 800e97c:	7bfa      	ldrb	r2, [r7, #15]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	330e      	adds	r3, #14
 800e982:	4916      	ldr	r1, [pc, #88]	; (800e9dc <shift_sub_rows+0x130>)
 800e984:	5c8a      	ldrb	r2, [r1, r2]
 800e986:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7bdb      	ldrb	r3, [r3, #15]
 800e98c:	73fb      	strb	r3, [r7, #15]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	330b      	adds	r3, #11
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	4619      	mov	r1, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	330f      	adds	r3, #15
 800e99a:	4a10      	ldr	r2, [pc, #64]	; (800e9dc <shift_sub_rows+0x130>)
 800e99c:	5c52      	ldrb	r2, [r2, r1]
 800e99e:	701a      	strb	r2, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3307      	adds	r3, #7
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	330b      	adds	r3, #11
 800e9ac:	4a0b      	ldr	r2, [pc, #44]	; (800e9dc <shift_sub_rows+0x130>)
 800e9ae:	5c52      	ldrb	r2, [r2, r1]
 800e9b0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3303      	adds	r3, #3
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	3307      	adds	r3, #7
 800e9be:	4a07      	ldr	r2, [pc, #28]	; (800e9dc <shift_sub_rows+0x130>)
 800e9c0:	5c52      	ldrb	r2, [r2, r1]
 800e9c2:	701a      	strb	r2, [r3, #0]
 800e9c4:	7bfa      	ldrb	r2, [r7, #15]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	3303      	adds	r3, #3
 800e9ca:	4904      	ldr	r1, [pc, #16]	; (800e9dc <shift_sub_rows+0x130>)
 800e9cc:	5c8a      	ldrb	r2, [r1, r2]
 800e9ce:	701a      	strb	r2, [r3, #0]
}
 800e9d0:	bf00      	nop
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bc80      	pop	{r7}
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	0801f6f4 	.word	0x0801f6f4

0800e9e0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b086      	sub	sp, #24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e9e8:	f107 0308 	add.w	r3, r7, #8
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fd6c 	bl	800e4cc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e9f4:	7a3b      	ldrb	r3, [r7, #8]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	4b9a      	ldr	r3, [pc, #616]	; (800ec64 <mix_sub_columns+0x284>)
 800e9fa:	5c9a      	ldrb	r2, [r3, r2]
 800e9fc:	7b7b      	ldrb	r3, [r7, #13]
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4b99      	ldr	r3, [pc, #612]	; (800ec68 <mix_sub_columns+0x288>)
 800ea02:	5c5b      	ldrb	r3, [r3, r1]
 800ea04:	4053      	eors	r3, r2
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	7cbb      	ldrb	r3, [r7, #18]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4b97      	ldr	r3, [pc, #604]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea0e:	5c5b      	ldrb	r3, [r3, r1]
 800ea10:	4053      	eors	r3, r2
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	4619      	mov	r1, r3
 800ea18:	4b94      	ldr	r3, [pc, #592]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea1a:	5c5b      	ldrb	r3, [r3, r1]
 800ea1c:	4053      	eors	r3, r2
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ea24:	7a3b      	ldrb	r3, [r7, #8]
 800ea26:	461a      	mov	r2, r3
 800ea28:	4b90      	ldr	r3, [pc, #576]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea2a:	5c9a      	ldrb	r2, [r3, r2]
 800ea2c:	7b7b      	ldrb	r3, [r7, #13]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	4b8c      	ldr	r3, [pc, #560]	; (800ec64 <mix_sub_columns+0x284>)
 800ea32:	5c5b      	ldrb	r3, [r3, r1]
 800ea34:	4053      	eors	r3, r2
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	7cbb      	ldrb	r3, [r7, #18]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4b8a      	ldr	r3, [pc, #552]	; (800ec68 <mix_sub_columns+0x288>)
 800ea3e:	5c5b      	ldrb	r3, [r3, r1]
 800ea40:	4053      	eors	r3, r2
 800ea42:	b2d9      	uxtb	r1, r3
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	461a      	mov	r2, r3
 800ea48:	4b88      	ldr	r3, [pc, #544]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea4a:	5c9a      	ldrb	r2, [r3, r2]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	404a      	eors	r2, r1
 800ea52:	b2d2      	uxtb	r2, r2
 800ea54:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ea56:	7a3b      	ldrb	r3, [r7, #8]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4b84      	ldr	r3, [pc, #528]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea5c:	5c9a      	ldrb	r2, [r3, r2]
 800ea5e:	7b7b      	ldrb	r3, [r7, #13]
 800ea60:	4619      	mov	r1, r3
 800ea62:	4b82      	ldr	r3, [pc, #520]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea64:	5c5b      	ldrb	r3, [r3, r1]
 800ea66:	4053      	eors	r3, r2
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	7cbb      	ldrb	r3, [r7, #18]
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4b7d      	ldr	r3, [pc, #500]	; (800ec64 <mix_sub_columns+0x284>)
 800ea70:	5c5b      	ldrb	r3, [r3, r1]
 800ea72:	4053      	eors	r3, r2
 800ea74:	b2d9      	uxtb	r1, r3
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4b7b      	ldr	r3, [pc, #492]	; (800ec68 <mix_sub_columns+0x288>)
 800ea7c:	5c9a      	ldrb	r2, [r3, r2]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	3302      	adds	r3, #2
 800ea82:	404a      	eors	r2, r1
 800ea84:	b2d2      	uxtb	r2, r2
 800ea86:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ea88:	7a3b      	ldrb	r3, [r7, #8]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	4b76      	ldr	r3, [pc, #472]	; (800ec68 <mix_sub_columns+0x288>)
 800ea8e:	5c9a      	ldrb	r2, [r3, r2]
 800ea90:	7b7b      	ldrb	r3, [r7, #13]
 800ea92:	4619      	mov	r1, r3
 800ea94:	4b75      	ldr	r3, [pc, #468]	; (800ec6c <mix_sub_columns+0x28c>)
 800ea96:	5c5b      	ldrb	r3, [r3, r1]
 800ea98:	4053      	eors	r3, r2
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	7cbb      	ldrb	r3, [r7, #18]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4b72      	ldr	r3, [pc, #456]	; (800ec6c <mix_sub_columns+0x28c>)
 800eaa2:	5c5b      	ldrb	r3, [r3, r1]
 800eaa4:	4053      	eors	r3, r2
 800eaa6:	b2d9      	uxtb	r1, r3
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	4b6d      	ldr	r3, [pc, #436]	; (800ec64 <mix_sub_columns+0x284>)
 800eaae:	5c9a      	ldrb	r2, [r3, r2]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3303      	adds	r3, #3
 800eab4:	404a      	eors	r2, r1
 800eab6:	b2d2      	uxtb	r2, r2
 800eab8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800eaba:	7b3b      	ldrb	r3, [r7, #12]
 800eabc:	461a      	mov	r2, r3
 800eabe:	4b69      	ldr	r3, [pc, #420]	; (800ec64 <mix_sub_columns+0x284>)
 800eac0:	5c9a      	ldrb	r2, [r3, r2]
 800eac2:	7c7b      	ldrb	r3, [r7, #17]
 800eac4:	4619      	mov	r1, r3
 800eac6:	4b68      	ldr	r3, [pc, #416]	; (800ec68 <mix_sub_columns+0x288>)
 800eac8:	5c5b      	ldrb	r3, [r3, r1]
 800eaca:	4053      	eors	r3, r2
 800eacc:	b2da      	uxtb	r2, r3
 800eace:	7dbb      	ldrb	r3, [r7, #22]
 800ead0:	4619      	mov	r1, r3
 800ead2:	4b66      	ldr	r3, [pc, #408]	; (800ec6c <mix_sub_columns+0x28c>)
 800ead4:	5c5b      	ldrb	r3, [r3, r1]
 800ead6:	4053      	eors	r3, r2
 800ead8:	b2d9      	uxtb	r1, r3
 800eada:	7afb      	ldrb	r3, [r7, #11]
 800eadc:	461a      	mov	r2, r3
 800eade:	4b63      	ldr	r3, [pc, #396]	; (800ec6c <mix_sub_columns+0x28c>)
 800eae0:	5c9a      	ldrb	r2, [r3, r2]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3304      	adds	r3, #4
 800eae6:	404a      	eors	r2, r1
 800eae8:	b2d2      	uxtb	r2, r2
 800eaea:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800eaec:	7b3b      	ldrb	r3, [r7, #12]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	4b5e      	ldr	r3, [pc, #376]	; (800ec6c <mix_sub_columns+0x28c>)
 800eaf2:	5c9a      	ldrb	r2, [r3, r2]
 800eaf4:	7c7b      	ldrb	r3, [r7, #17]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4b5a      	ldr	r3, [pc, #360]	; (800ec64 <mix_sub_columns+0x284>)
 800eafa:	5c5b      	ldrb	r3, [r3, r1]
 800eafc:	4053      	eors	r3, r2
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	7dbb      	ldrb	r3, [r7, #22]
 800eb02:	4619      	mov	r1, r3
 800eb04:	4b58      	ldr	r3, [pc, #352]	; (800ec68 <mix_sub_columns+0x288>)
 800eb06:	5c5b      	ldrb	r3, [r3, r1]
 800eb08:	4053      	eors	r3, r2
 800eb0a:	b2d9      	uxtb	r1, r3
 800eb0c:	7afb      	ldrb	r3, [r7, #11]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4b56      	ldr	r3, [pc, #344]	; (800ec6c <mix_sub_columns+0x28c>)
 800eb12:	5c9a      	ldrb	r2, [r3, r2]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3305      	adds	r3, #5
 800eb18:	404a      	eors	r2, r1
 800eb1a:	b2d2      	uxtb	r2, r2
 800eb1c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800eb1e:	7b3b      	ldrb	r3, [r7, #12]
 800eb20:	461a      	mov	r2, r3
 800eb22:	4b52      	ldr	r3, [pc, #328]	; (800ec6c <mix_sub_columns+0x28c>)
 800eb24:	5c9a      	ldrb	r2, [r3, r2]
 800eb26:	7c7b      	ldrb	r3, [r7, #17]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4b50      	ldr	r3, [pc, #320]	; (800ec6c <mix_sub_columns+0x28c>)
 800eb2c:	5c5b      	ldrb	r3, [r3, r1]
 800eb2e:	4053      	eors	r3, r2
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	7dbb      	ldrb	r3, [r7, #22]
 800eb34:	4619      	mov	r1, r3
 800eb36:	4b4b      	ldr	r3, [pc, #300]	; (800ec64 <mix_sub_columns+0x284>)
 800eb38:	5c5b      	ldrb	r3, [r3, r1]
 800eb3a:	4053      	eors	r3, r2
 800eb3c:	b2d9      	uxtb	r1, r3
 800eb3e:	7afb      	ldrb	r3, [r7, #11]
 800eb40:	461a      	mov	r2, r3
 800eb42:	4b49      	ldr	r3, [pc, #292]	; (800ec68 <mix_sub_columns+0x288>)
 800eb44:	5c9a      	ldrb	r2, [r3, r2]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	3306      	adds	r3, #6
 800eb4a:	404a      	eors	r2, r1
 800eb4c:	b2d2      	uxtb	r2, r2
 800eb4e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800eb50:	7b3b      	ldrb	r3, [r7, #12]
 800eb52:	461a      	mov	r2, r3
 800eb54:	4b44      	ldr	r3, [pc, #272]	; (800ec68 <mix_sub_columns+0x288>)
 800eb56:	5c9a      	ldrb	r2, [r3, r2]
 800eb58:	7c7b      	ldrb	r3, [r7, #17]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4b43      	ldr	r3, [pc, #268]	; (800ec6c <mix_sub_columns+0x28c>)
 800eb5e:	5c5b      	ldrb	r3, [r3, r1]
 800eb60:	4053      	eors	r3, r2
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	7dbb      	ldrb	r3, [r7, #22]
 800eb66:	4619      	mov	r1, r3
 800eb68:	4b40      	ldr	r3, [pc, #256]	; (800ec6c <mix_sub_columns+0x28c>)
 800eb6a:	5c5b      	ldrb	r3, [r3, r1]
 800eb6c:	4053      	eors	r3, r2
 800eb6e:	b2d9      	uxtb	r1, r3
 800eb70:	7afb      	ldrb	r3, [r7, #11]
 800eb72:	461a      	mov	r2, r3
 800eb74:	4b3b      	ldr	r3, [pc, #236]	; (800ec64 <mix_sub_columns+0x284>)
 800eb76:	5c9a      	ldrb	r2, [r3, r2]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	3307      	adds	r3, #7
 800eb7c:	404a      	eors	r2, r1
 800eb7e:	b2d2      	uxtb	r2, r2
 800eb80:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800eb82:	7c3b      	ldrb	r3, [r7, #16]
 800eb84:	461a      	mov	r2, r3
 800eb86:	4b37      	ldr	r3, [pc, #220]	; (800ec64 <mix_sub_columns+0x284>)
 800eb88:	5c9a      	ldrb	r2, [r3, r2]
 800eb8a:	7d7b      	ldrb	r3, [r7, #21]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	4b36      	ldr	r3, [pc, #216]	; (800ec68 <mix_sub_columns+0x288>)
 800eb90:	5c5b      	ldrb	r3, [r3, r1]
 800eb92:	4053      	eors	r3, r2
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	7abb      	ldrb	r3, [r7, #10]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4b34      	ldr	r3, [pc, #208]	; (800ec6c <mix_sub_columns+0x28c>)
 800eb9c:	5c5b      	ldrb	r3, [r3, r1]
 800eb9e:	4053      	eors	r3, r2
 800eba0:	b2d9      	uxtb	r1, r3
 800eba2:	7bfb      	ldrb	r3, [r7, #15]
 800eba4:	461a      	mov	r2, r3
 800eba6:	4b31      	ldr	r3, [pc, #196]	; (800ec6c <mix_sub_columns+0x28c>)
 800eba8:	5c9a      	ldrb	r2, [r3, r2]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	3308      	adds	r3, #8
 800ebae:	404a      	eors	r2, r1
 800ebb0:	b2d2      	uxtb	r2, r2
 800ebb2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ebb4:	7c3b      	ldrb	r3, [r7, #16]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	4b2c      	ldr	r3, [pc, #176]	; (800ec6c <mix_sub_columns+0x28c>)
 800ebba:	5c9a      	ldrb	r2, [r3, r2]
 800ebbc:	7d7b      	ldrb	r3, [r7, #21]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	4b28      	ldr	r3, [pc, #160]	; (800ec64 <mix_sub_columns+0x284>)
 800ebc2:	5c5b      	ldrb	r3, [r3, r1]
 800ebc4:	4053      	eors	r3, r2
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	7abb      	ldrb	r3, [r7, #10]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4b26      	ldr	r3, [pc, #152]	; (800ec68 <mix_sub_columns+0x288>)
 800ebce:	5c5b      	ldrb	r3, [r3, r1]
 800ebd0:	4053      	eors	r3, r2
 800ebd2:	b2d9      	uxtb	r1, r3
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	4b24      	ldr	r3, [pc, #144]	; (800ec6c <mix_sub_columns+0x28c>)
 800ebda:	5c9a      	ldrb	r2, [r3, r2]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	3309      	adds	r3, #9
 800ebe0:	404a      	eors	r2, r1
 800ebe2:	b2d2      	uxtb	r2, r2
 800ebe4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ebe6:	7c3b      	ldrb	r3, [r7, #16]
 800ebe8:	461a      	mov	r2, r3
 800ebea:	4b20      	ldr	r3, [pc, #128]	; (800ec6c <mix_sub_columns+0x28c>)
 800ebec:	5c9a      	ldrb	r2, [r3, r2]
 800ebee:	7d7b      	ldrb	r3, [r7, #21]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4b1e      	ldr	r3, [pc, #120]	; (800ec6c <mix_sub_columns+0x28c>)
 800ebf4:	5c5b      	ldrb	r3, [r3, r1]
 800ebf6:	4053      	eors	r3, r2
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	7abb      	ldrb	r3, [r7, #10]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4b19      	ldr	r3, [pc, #100]	; (800ec64 <mix_sub_columns+0x284>)
 800ec00:	5c5b      	ldrb	r3, [r3, r1]
 800ec02:	4053      	eors	r3, r2
 800ec04:	b2d9      	uxtb	r1, r3
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <mix_sub_columns+0x288>)
 800ec0c:	5c9a      	ldrb	r2, [r3, r2]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	330a      	adds	r3, #10
 800ec12:	404a      	eors	r2, r1
 800ec14:	b2d2      	uxtb	r2, r2
 800ec16:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ec18:	7c3b      	ldrb	r3, [r7, #16]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <mix_sub_columns+0x288>)
 800ec1e:	5c9a      	ldrb	r2, [r3, r2]
 800ec20:	7d7b      	ldrb	r3, [r7, #21]
 800ec22:	4619      	mov	r1, r3
 800ec24:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <mix_sub_columns+0x28c>)
 800ec26:	5c5b      	ldrb	r3, [r3, r1]
 800ec28:	4053      	eors	r3, r2
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	7abb      	ldrb	r3, [r7, #10]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	4b0e      	ldr	r3, [pc, #56]	; (800ec6c <mix_sub_columns+0x28c>)
 800ec32:	5c5b      	ldrb	r3, [r3, r1]
 800ec34:	4053      	eors	r3, r2
 800ec36:	b2d9      	uxtb	r1, r3
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <mix_sub_columns+0x284>)
 800ec3e:	5c9a      	ldrb	r2, [r3, r2]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	330b      	adds	r3, #11
 800ec44:	404a      	eors	r2, r1
 800ec46:	b2d2      	uxtb	r2, r2
 800ec48:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ec4a:	7d3b      	ldrb	r3, [r7, #20]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <mix_sub_columns+0x284>)
 800ec50:	5c9a      	ldrb	r2, [r3, r2]
 800ec52:	7a7b      	ldrb	r3, [r7, #9]
 800ec54:	4619      	mov	r1, r3
 800ec56:	4b04      	ldr	r3, [pc, #16]	; (800ec68 <mix_sub_columns+0x288>)
 800ec58:	5c5b      	ldrb	r3, [r3, r1]
 800ec5a:	4053      	eors	r3, r2
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	7bbb      	ldrb	r3, [r7, #14]
 800ec60:	4619      	mov	r1, r3
 800ec62:	e005      	b.n	800ec70 <mix_sub_columns+0x290>
 800ec64:	0801f7f4 	.word	0x0801f7f4
 800ec68:	0801f8f4 	.word	0x0801f8f4
 800ec6c:	0801f6f4 	.word	0x0801f6f4
 800ec70:	4b2d      	ldr	r3, [pc, #180]	; (800ed28 <mix_sub_columns+0x348>)
 800ec72:	5c5b      	ldrb	r3, [r3, r1]
 800ec74:	4053      	eors	r3, r2
 800ec76:	b2d9      	uxtb	r1, r3
 800ec78:	7cfb      	ldrb	r3, [r7, #19]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	4b2a      	ldr	r3, [pc, #168]	; (800ed28 <mix_sub_columns+0x348>)
 800ec7e:	5c9a      	ldrb	r2, [r3, r2]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	330c      	adds	r3, #12
 800ec84:	404a      	eors	r2, r1
 800ec86:	b2d2      	uxtb	r2, r2
 800ec88:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ec8a:	7d3b      	ldrb	r3, [r7, #20]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	4b26      	ldr	r3, [pc, #152]	; (800ed28 <mix_sub_columns+0x348>)
 800ec90:	5c9a      	ldrb	r2, [r3, r2]
 800ec92:	7a7b      	ldrb	r3, [r7, #9]
 800ec94:	4619      	mov	r1, r3
 800ec96:	4b25      	ldr	r3, [pc, #148]	; (800ed2c <mix_sub_columns+0x34c>)
 800ec98:	5c5b      	ldrb	r3, [r3, r1]
 800ec9a:	4053      	eors	r3, r2
 800ec9c:	b2da      	uxtb	r2, r3
 800ec9e:	7bbb      	ldrb	r3, [r7, #14]
 800eca0:	4619      	mov	r1, r3
 800eca2:	4b23      	ldr	r3, [pc, #140]	; (800ed30 <mix_sub_columns+0x350>)
 800eca4:	5c5b      	ldrb	r3, [r3, r1]
 800eca6:	4053      	eors	r3, r2
 800eca8:	b2d9      	uxtb	r1, r3
 800ecaa:	7cfb      	ldrb	r3, [r7, #19]
 800ecac:	461a      	mov	r2, r3
 800ecae:	4b1e      	ldr	r3, [pc, #120]	; (800ed28 <mix_sub_columns+0x348>)
 800ecb0:	5c9a      	ldrb	r2, [r3, r2]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	330d      	adds	r3, #13
 800ecb6:	404a      	eors	r2, r1
 800ecb8:	b2d2      	uxtb	r2, r2
 800ecba:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ecbc:	7d3b      	ldrb	r3, [r7, #20]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4b19      	ldr	r3, [pc, #100]	; (800ed28 <mix_sub_columns+0x348>)
 800ecc2:	5c9a      	ldrb	r2, [r3, r2]
 800ecc4:	7a7b      	ldrb	r3, [r7, #9]
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4b17      	ldr	r3, [pc, #92]	; (800ed28 <mix_sub_columns+0x348>)
 800ecca:	5c5b      	ldrb	r3, [r3, r1]
 800eccc:	4053      	eors	r3, r2
 800ecce:	b2da      	uxtb	r2, r3
 800ecd0:	7bbb      	ldrb	r3, [r7, #14]
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	4b15      	ldr	r3, [pc, #84]	; (800ed2c <mix_sub_columns+0x34c>)
 800ecd6:	5c5b      	ldrb	r3, [r3, r1]
 800ecd8:	4053      	eors	r3, r2
 800ecda:	b2d9      	uxtb	r1, r3
 800ecdc:	7cfb      	ldrb	r3, [r7, #19]
 800ecde:	461a      	mov	r2, r3
 800ece0:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <mix_sub_columns+0x350>)
 800ece2:	5c9a      	ldrb	r2, [r3, r2]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	330e      	adds	r3, #14
 800ece8:	404a      	eors	r2, r1
 800ecea:	b2d2      	uxtb	r2, r2
 800ecec:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ecee:	7d3b      	ldrb	r3, [r7, #20]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4b0f      	ldr	r3, [pc, #60]	; (800ed30 <mix_sub_columns+0x350>)
 800ecf4:	5c9a      	ldrb	r2, [r3, r2]
 800ecf6:	7a7b      	ldrb	r3, [r7, #9]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	4b0b      	ldr	r3, [pc, #44]	; (800ed28 <mix_sub_columns+0x348>)
 800ecfc:	5c5b      	ldrb	r3, [r3, r1]
 800ecfe:	4053      	eors	r3, r2
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	7bbb      	ldrb	r3, [r7, #14]
 800ed04:	4619      	mov	r1, r3
 800ed06:	4b08      	ldr	r3, [pc, #32]	; (800ed28 <mix_sub_columns+0x348>)
 800ed08:	5c5b      	ldrb	r3, [r3, r1]
 800ed0a:	4053      	eors	r3, r2
 800ed0c:	b2d9      	uxtb	r1, r3
 800ed0e:	7cfb      	ldrb	r3, [r7, #19]
 800ed10:	461a      	mov	r2, r3
 800ed12:	4b06      	ldr	r3, [pc, #24]	; (800ed2c <mix_sub_columns+0x34c>)
 800ed14:	5c9a      	ldrb	r2, [r3, r2]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	330f      	adds	r3, #15
 800ed1a:	404a      	eors	r2, r1
 800ed1c:	b2d2      	uxtb	r2, r2
 800ed1e:	701a      	strb	r2, [r3, #0]
  }
 800ed20:	bf00      	nop
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	0801f6f4 	.word	0x0801f6f4
 800ed2c:	0801f7f4 	.word	0x0801f7f4
 800ed30:	0801f8f4 	.word	0x0801f8f4

0800ed34 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ed42:	7afb      	ldrb	r3, [r7, #11]
 800ed44:	3b10      	subs	r3, #16
 800ed46:	2b10      	cmp	r3, #16
 800ed48:	bf8c      	ite	hi
 800ed4a:	2201      	movhi	r2, #1
 800ed4c:	2200      	movls	r2, #0
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	d10d      	bne.n	800ed70 <lorawan_aes_set_key+0x3c>
 800ed54:	2201      	movs	r2, #1
 800ed56:	fa02 f303 	lsl.w	r3, r2, r3
 800ed5a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ed5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	bf14      	ite	ne
 800ed66:	2301      	movne	r3, #1
 800ed68:	2300      	moveq	r3, #0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d105      	bne.n	800ed7c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ed78:	23ff      	movs	r3, #255	; 0xff
 800ed7a:	e0b2      	b.n	800eee2 <lorawan_aes_set_key+0x1ae>
        break;
 800ed7c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	7afa      	ldrb	r2, [r7, #11]
 800ed82:	68f9      	ldr	r1, [r7, #12]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7ff fbfa 	bl	800e57e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	331c      	adds	r3, #28
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ed94:	7c7b      	ldrb	r3, [r7, #17]
 800ed96:	091b      	lsrs	r3, r3, #4
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eda4:	7afb      	ldrb	r3, [r7, #11]
 800eda6:	75fb      	strb	r3, [r7, #23]
 800eda8:	2301      	movs	r3, #1
 800edaa:	75bb      	strb	r3, [r7, #22]
 800edac:	e093      	b.n	800eed6 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800edae:	7dfb      	ldrb	r3, [r7, #23]
 800edb0:	3b04      	subs	r3, #4
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	5cd3      	ldrb	r3, [r2, r3]
 800edb6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800edb8:	7dfb      	ldrb	r3, [r7, #23]
 800edba:	3b03      	subs	r3, #3
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	5cd3      	ldrb	r3, [r2, r3]
 800edc0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
 800edc4:	3b02      	subs	r3, #2
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	5cd3      	ldrb	r3, [r2, r3]
 800edca:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800edcc:	7dfb      	ldrb	r3, [r7, #23]
 800edce:	3b01      	subs	r3, #1
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	5cd3      	ldrb	r3, [r2, r3]
 800edd4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800edd6:	7dfb      	ldrb	r3, [r7, #23]
 800edd8:	7afa      	ldrb	r2, [r7, #11]
 800edda:	fbb3 f1f2 	udiv	r1, r3, r2
 800edde:	fb01 f202 	mul.w	r2, r1, r2
 800ede2:	1a9b      	subs	r3, r3, r2
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d127      	bne.n	800ee3a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800edea:	7d7b      	ldrb	r3, [r7, #21]
 800edec:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800edee:	7d3b      	ldrb	r3, [r7, #20]
 800edf0:	4a3e      	ldr	r2, [pc, #248]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800edf2:	5cd2      	ldrb	r2, [r2, r3]
 800edf4:	7dbb      	ldrb	r3, [r7, #22]
 800edf6:	4053      	eors	r3, r2
 800edf8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800edfa:	7cfb      	ldrb	r3, [r7, #19]
 800edfc:	4a3b      	ldr	r2, [pc, #236]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800edfe:	5cd3      	ldrb	r3, [r2, r3]
 800ee00:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ee02:	7cbb      	ldrb	r3, [r7, #18]
 800ee04:	4a39      	ldr	r2, [pc, #228]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800ee06:	5cd3      	ldrb	r3, [r2, r3]
 800ee08:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ee0a:	7c3b      	ldrb	r3, [r7, #16]
 800ee0c:	4a37      	ldr	r2, [pc, #220]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800ee0e:	5cd3      	ldrb	r3, [r2, r3]
 800ee10:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ee12:	7dbb      	ldrb	r3, [r7, #22]
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	b25a      	sxtb	r2, r3
 800ee18:	7dbb      	ldrb	r3, [r7, #22]
 800ee1a:	09db      	lsrs	r3, r3, #7
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	4619      	mov	r1, r3
 800ee20:	0049      	lsls	r1, r1, #1
 800ee22:	440b      	add	r3, r1
 800ee24:	4619      	mov	r1, r3
 800ee26:	00c8      	lsls	r0, r1, #3
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	440b      	add	r3, r1
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	b25b      	sxtb	r3, r3
 800ee32:	4053      	eors	r3, r2
 800ee34:	b25b      	sxtb	r3, r3
 800ee36:	75bb      	strb	r3, [r7, #22]
 800ee38:	e01c      	b.n	800ee74 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ee3a:	7afb      	ldrb	r3, [r7, #11]
 800ee3c:	2b18      	cmp	r3, #24
 800ee3e:	d919      	bls.n	800ee74 <lorawan_aes_set_key+0x140>
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
 800ee42:	7afa      	ldrb	r2, [r7, #11]
 800ee44:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee48:	fb01 f202 	mul.w	r2, r1, r2
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	2b10      	cmp	r3, #16
 800ee52:	d10f      	bne.n	800ee74 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800ee54:	7d7b      	ldrb	r3, [r7, #21]
 800ee56:	4a25      	ldr	r2, [pc, #148]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800ee58:	5cd3      	ldrb	r3, [r2, r3]
 800ee5a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ee5c:	7d3b      	ldrb	r3, [r7, #20]
 800ee5e:	4a23      	ldr	r2, [pc, #140]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800ee60:	5cd3      	ldrb	r3, [r2, r3]
 800ee62:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ee64:	7cfb      	ldrb	r3, [r7, #19]
 800ee66:	4a21      	ldr	r2, [pc, #132]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800ee68:	5cd3      	ldrb	r3, [r2, r3]
 800ee6a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ee6c:	7cbb      	ldrb	r3, [r7, #18]
 800ee6e:	4a1f      	ldr	r2, [pc, #124]	; (800eeec <lorawan_aes_set_key+0x1b8>)
 800ee70:	5cd3      	ldrb	r3, [r2, r3]
 800ee72:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ee74:	7dfa      	ldrb	r2, [r7, #23]
 800ee76:	7afb      	ldrb	r3, [r7, #11]
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ee7c:	7c3b      	ldrb	r3, [r7, #16]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	5cd1      	ldrb	r1, [r2, r3]
 800ee82:	7dfb      	ldrb	r3, [r7, #23]
 800ee84:	7d7a      	ldrb	r2, [r7, #21]
 800ee86:	404a      	eors	r2, r1
 800ee88:	b2d1      	uxtb	r1, r2
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ee8e:	7c3b      	ldrb	r3, [r7, #16]
 800ee90:	3301      	adds	r3, #1
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	5cd1      	ldrb	r1, [r2, r3]
 800ee96:	7dfb      	ldrb	r3, [r7, #23]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	7d3a      	ldrb	r2, [r7, #20]
 800ee9c:	404a      	eors	r2, r1
 800ee9e:	b2d1      	uxtb	r1, r2
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800eea4:	7c3b      	ldrb	r3, [r7, #16]
 800eea6:	3302      	adds	r3, #2
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	5cd1      	ldrb	r1, [r2, r3]
 800eeac:	7dfb      	ldrb	r3, [r7, #23]
 800eeae:	3302      	adds	r3, #2
 800eeb0:	7cfa      	ldrb	r2, [r7, #19]
 800eeb2:	404a      	eors	r2, r1
 800eeb4:	b2d1      	uxtb	r1, r2
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800eeba:	7c3b      	ldrb	r3, [r7, #16]
 800eebc:	3303      	adds	r3, #3
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	5cd1      	ldrb	r1, [r2, r3]
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
 800eec4:	3303      	adds	r3, #3
 800eec6:	7cba      	ldrb	r2, [r7, #18]
 800eec8:	404a      	eors	r2, r1
 800eeca:	b2d1      	uxtb	r1, r2
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eed0:	7dfb      	ldrb	r3, [r7, #23]
 800eed2:	3304      	adds	r3, #4
 800eed4:	75fb      	strb	r3, [r7, #23]
 800eed6:	7dfa      	ldrb	r2, [r7, #23]
 800eed8:	7c7b      	ldrb	r3, [r7, #17]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	f4ff af67 	bcc.w	800edae <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3718      	adds	r7, #24
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	0801f6f4 	.word	0x0801f6f4

0800eef0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b08a      	sub	sp, #40	; 0x28
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d038      	beq.n	800ef78 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	f107 0314 	add.w	r3, r7, #20
 800ef0c:	68f9      	ldr	r1, [r7, #12]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7ff fc07 	bl	800e722 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ef14:	2301      	movs	r3, #1
 800ef16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef1a:	e014      	b.n	800ef46 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ef1c:	f107 0314 	add.w	r3, r7, #20
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fd5d 	bl	800e9e0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef2c:	0112      	lsls	r2, r2, #4
 800ef2e:	441a      	add	r2, r3
 800ef30:	f107 0314 	add.w	r3, r7, #20
 800ef34:	4611      	mov	r1, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff fcab 	bl	800e892 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ef3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef40:	3301      	adds	r3, #1
 800ef42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ef4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d3e3      	bcc.n	800ef1c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ef54:	f107 0314 	add.w	r3, r7, #20
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7ff fca7 	bl	800e8ac <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef64:	0112      	lsls	r2, r2, #4
 800ef66:	441a      	add	r2, r3
 800ef68:	f107 0314 	add.w	r3, r7, #20
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	68b8      	ldr	r0, [r7, #8]
 800ef70:	f7ff fbd7 	bl	800e722 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ef74:	2300      	movs	r3, #0
 800ef76:	e000      	b.n	800ef7a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ef78:	23ff      	movs	r3, #255	; 0xff
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3728      	adds	r7, #40	; 0x28
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
	...

0800ef84 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800ef84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef86:	b09d      	sub	sp, #116	; 0x74
 800ef88:	af10      	add	r7, sp, #64	; 0x40
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ef90:	2306      	movs	r3, #6
 800ef92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ef96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ef9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef9e:	4611      	mov	r1, r2
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 f9a7 	bl	800f2f4 <SecureElementGetKeyByID>
 800efa6:	4603      	mov	r3, r0
 800efa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800efac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f040 80b0 	bne.w	800f116 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800efb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d106      	bne.n	800efcc <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800efbe:	4b58      	ldr	r3, [pc, #352]	; (800f120 <PrintKey+0x19c>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	2100      	movs	r1, #0
 800efc4:	2002      	movs	r0, #2
 800efc6:	f00f fae1 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800efca:	e056      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800efcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d106      	bne.n	800efe2 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800efd4:	4b53      	ldr	r3, [pc, #332]	; (800f124 <PrintKey+0x1a0>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	2100      	movs	r1, #0
 800efda:	2002      	movs	r0, #2
 800efdc:	f00f fad6 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800efe0:	e04b      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800efe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	d106      	bne.n	800eff8 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800efea:	4b4f      	ldr	r3, [pc, #316]	; (800f128 <PrintKey+0x1a4>)
 800efec:	2200      	movs	r2, #0
 800efee:	2100      	movs	r1, #0
 800eff0:	2002      	movs	r0, #2
 800eff2:	f00f facb 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800eff6:	e040      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800eff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800effc:	2b02      	cmp	r3, #2
 800effe:	d106      	bne.n	800f00e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800f000:	4b4a      	ldr	r3, [pc, #296]	; (800f12c <PrintKey+0x1a8>)
 800f002:	2200      	movs	r2, #0
 800f004:	2100      	movs	r1, #0
 800f006:	2002      	movs	r0, #2
 800f008:	f00f fac0 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800f00c:	e035      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800f00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f012:	2b04      	cmp	r3, #4
 800f014:	d106      	bne.n	800f024 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800f016:	4b46      	ldr	r3, [pc, #280]	; (800f130 <PrintKey+0x1ac>)
 800f018:	2200      	movs	r2, #0
 800f01a:	2100      	movs	r1, #0
 800f01c:	2002      	movs	r0, #2
 800f01e:	f00f fab5 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800f022:	e02a      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800f024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f028:	2b7f      	cmp	r3, #127	; 0x7f
 800f02a:	d106      	bne.n	800f03a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800f02c:	4b41      	ldr	r3, [pc, #260]	; (800f134 <PrintKey+0x1b0>)
 800f02e:	2200      	movs	r2, #0
 800f030:	2100      	movs	r1, #0
 800f032:	2002      	movs	r0, #2
 800f034:	f00f faaa 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800f038:	e01f      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800f03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f03e:	2b80      	cmp	r3, #128	; 0x80
 800f040:	d106      	bne.n	800f050 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800f042:	4b3d      	ldr	r3, [pc, #244]	; (800f138 <PrintKey+0x1b4>)
 800f044:	2200      	movs	r2, #0
 800f046:	2100      	movs	r1, #0
 800f048:	2002      	movs	r0, #2
 800f04a:	f00f fa9f 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800f04e:	e014      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800f050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f054:	2b81      	cmp	r3, #129	; 0x81
 800f056:	d106      	bne.n	800f066 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800f058:	4b38      	ldr	r3, [pc, #224]	; (800f13c <PrintKey+0x1b8>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	2100      	movs	r1, #0
 800f05e:	2002      	movs	r0, #2
 800f060:	f00f fa94 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 800f064:	e009      	b.n	800f07a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800f066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f06a:	2b82      	cmp	r3, #130	; 0x82
 800f06c:	d105      	bne.n	800f07a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800f06e:	4b34      	ldr	r3, [pc, #208]	; (800f140 <PrintKey+0x1bc>)
 800f070:	2200      	movs	r2, #0
 800f072:	2100      	movs	r1, #0
 800f074:	2002      	movs	r0, #2
 800f076:	f00f fa89 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	785b      	ldrb	r3, [r3, #1]
 800f07e:	4618      	mov	r0, r3
 800f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f082:	789b      	ldrb	r3, [r3, #2]
 800f084:	461c      	mov	r4, r3
 800f086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f088:	78db      	ldrb	r3, [r3, #3]
 800f08a:	461d      	mov	r5, r3
 800f08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08e:	791b      	ldrb	r3, [r3, #4]
 800f090:	461e      	mov	r6, r3
 800f092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f094:	795b      	ldrb	r3, [r3, #5]
 800f096:	623b      	str	r3, [r7, #32]
 800f098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09a:	799b      	ldrb	r3, [r3, #6]
 800f09c:	61fb      	str	r3, [r7, #28]
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	79db      	ldrb	r3, [r3, #7]
 800f0a2:	61bb      	str	r3, [r7, #24]
 800f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a6:	7a1b      	ldrb	r3, [r3, #8]
 800f0a8:	617b      	str	r3, [r7, #20]
 800f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ac:	7a5b      	ldrb	r3, [r3, #9]
 800f0ae:	613b      	str	r3, [r7, #16]
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	7a9b      	ldrb	r3, [r3, #10]
 800f0b4:	60fb      	str	r3, [r7, #12]
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b8:	7adb      	ldrb	r3, [r3, #11]
 800f0ba:	60bb      	str	r3, [r7, #8]
 800f0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0be:	7b1b      	ldrb	r3, [r3, #12]
 800f0c0:	607b      	str	r3, [r7, #4]
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	7b5b      	ldrb	r3, [r3, #13]
 800f0c6:	603b      	str	r3, [r7, #0]
 800f0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ca:	7b9b      	ldrb	r3, [r3, #14]
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	7bdb      	ldrb	r3, [r3, #15]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d6:	7c1b      	ldrb	r3, [r3, #16]
 800f0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0da:	920e      	str	r2, [sp, #56]	; 0x38
 800f0dc:	910d      	str	r1, [sp, #52]	; 0x34
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	920c      	str	r2, [sp, #48]	; 0x30
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f0e6:	68ba      	ldr	r2, [r7, #8]
 800f0e8:	920a      	str	r2, [sp, #40]	; 0x28
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	9208      	str	r2, [sp, #32]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	9207      	str	r2, [sp, #28]
 800f0f6:	69ba      	ldr	r2, [r7, #24]
 800f0f8:	9206      	str	r2, [sp, #24]
 800f0fa:	69fa      	ldr	r2, [r7, #28]
 800f0fc:	9205      	str	r2, [sp, #20]
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	9304      	str	r3, [sp, #16]
 800f102:	9603      	str	r6, [sp, #12]
 800f104:	9502      	str	r5, [sp, #8]
 800f106:	9401      	str	r4, [sp, #4]
 800f108:	9000      	str	r0, [sp, #0]
 800f10a:	4b0e      	ldr	r3, [pc, #56]	; (800f144 <PrintKey+0x1c0>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	2100      	movs	r1, #0
 800f110:	2002      	movs	r0, #2
 800f112:	f00f fa3b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800f116:	bf00      	nop
 800f118:	3734      	adds	r7, #52	; 0x34
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f11e:	bf00      	nop
 800f120:	0801f174 	.word	0x0801f174
 800f124:	0801f18c 	.word	0x0801f18c
 800f128:	0801f1a4 	.word	0x0801f1a4
 800f12c:	0801f1bc 	.word	0x0801f1bc
 800f130:	0801f1d4 	.word	0x0801f1d4
 800f134:	0801f1ec 	.word	0x0801f1ec
 800f138:	0801f204 	.word	0x0801f204
 800f13c:	0801f21c 	.word	0x0801f21c
 800f140:	0801f234 	.word	0x0801f234
 800f144:	0801f24c 	.word	0x0801f24c

0800f148 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	4603      	mov	r3, r0
 800f150:	6039      	str	r1, [r7, #0]
 800f152:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f154:	2300      	movs	r3, #0
 800f156:	73fb      	strb	r3, [r7, #15]
 800f158:	e01a      	b.n	800f190 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f15a:	4b12      	ldr	r3, [pc, #72]	; (800f1a4 <GetKeyByID+0x5c>)
 800f15c:	6819      	ldr	r1, [r3, #0]
 800f15e:	7bfa      	ldrb	r2, [r7, #15]
 800f160:	4613      	mov	r3, r2
 800f162:	011b      	lsls	r3, r3, #4
 800f164:	4413      	add	r3, r2
 800f166:	440b      	add	r3, r1
 800f168:	3310      	adds	r3, #16
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	79fa      	ldrb	r2, [r7, #7]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d10b      	bne.n	800f18a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f172:	4b0c      	ldr	r3, [pc, #48]	; (800f1a4 <GetKeyByID+0x5c>)
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	7bfa      	ldrb	r2, [r7, #15]
 800f178:	4613      	mov	r3, r2
 800f17a:	011b      	lsls	r3, r3, #4
 800f17c:	4413      	add	r3, r2
 800f17e:	3310      	adds	r3, #16
 800f180:	18ca      	adds	r2, r1, r3
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f186:	2300      	movs	r3, #0
 800f188:	e006      	b.n	800f198 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	3301      	adds	r3, #1
 800f18e:	73fb      	strb	r3, [r7, #15]
 800f190:	7bfb      	ldrb	r3, [r7, #15]
 800f192:	2b09      	cmp	r3, #9
 800f194:	d9e1      	bls.n	800f15a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f196:	2303      	movs	r3, #3
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bc80      	pop	{r7}
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	20000c80 	.word	0x20000c80

0800f1a8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	b0d1      	sub	sp, #324	; 0x144
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800f1b2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800f1b6:	6020      	str	r0, [r4, #0]
 800f1b8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800f1bc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f1c0:	6001      	str	r1, [r0, #0]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f1c8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f1cc:	801a      	strh	r2, [r3, #0]
 800f1ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f1d2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800f1d6:	460a      	mov	r2, r1
 800f1d8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800f1da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f1de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <ComputeCmac+0x48>
 800f1e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	e05c      	b.n	800f2ae <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800f1f4:	f107 0314 	add.w	r3, r7, #20
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fe ff1b 	bl	800e034 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800f1fe:	f107 0210 	add.w	r2, r7, #16
 800f202:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f206:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff ff9a 	bl	800f148 <GetKeyByID>
 800f214:	4603      	mov	r3, r0
 800f216:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f21a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d143      	bne.n	800f2aa <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800f222:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	1c5a      	adds	r2, r3, #1
 800f22e:	f107 0314 	add.w	r3, r7, #20
 800f232:	4611      	mov	r1, r2
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe ff16 	bl	800e066 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800f23a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f23e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d009      	beq.n	800f25c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800f248:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f24c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800f250:	f107 0014 	add.w	r0, r7, #20
 800f254:	2210      	movs	r2, #16
 800f256:	6819      	ldr	r1, [r3, #0]
 800f258:	f7fe ff14 	bl	800e084 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f25c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f260:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f264:	881a      	ldrh	r2, [r3, #0]
 800f266:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f26a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f26e:	f107 0014 	add.w	r0, r7, #20
 800f272:	6819      	ldr	r1, [r3, #0]
 800f274:	f7fe ff06 	bl	800e084 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f278:	f107 0214 	add.w	r2, r7, #20
 800f27c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f280:	4611      	mov	r1, r2
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe ffc0 	bl	800e208 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f288:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f28c:	061a      	lsls	r2, r3, #24
 800f28e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f292:	041b      	lsls	r3, r3, #16
 800f294:	431a      	orrs	r2, r3
 800f296:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f29a:	021b      	lsls	r3, r3, #8
 800f29c:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800f29e:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800f2a2:	431a      	orrs	r2, r3
 800f2a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f2a8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f2aa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd90      	pop	{r4, r7, pc}

0800f2b8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	e00a      	b.n	800f2e2 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800f2cc:	4a07      	ldr	r2, [pc, #28]	; (800f2ec <SecureElementInit+0x34>)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800f2d2:	4b06      	ldr	r3, [pc, #24]	; (800f2ec <SecureElementInit+0x34>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	22c0      	movs	r2, #192	; 0xc0
 800f2d8:	4905      	ldr	r1, [pc, #20]	; (800f2f0 <SecureElementInit+0x38>)
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f00a fe01 	bl	8019ee2 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20000c80 	.word	0x20000c80
 800f2f0:	0801fb88 	.word	0x0801fb88

0800f2f4 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	6039      	str	r1, [r7, #0]
 800f2fe:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f300:	2300      	movs	r3, #0
 800f302:	73fb      	strb	r3, [r7, #15]
 800f304:	e01a      	b.n	800f33c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800f306:	4b12      	ldr	r3, [pc, #72]	; (800f350 <SecureElementGetKeyByID+0x5c>)
 800f308:	6819      	ldr	r1, [r3, #0]
 800f30a:	7bfa      	ldrb	r2, [r7, #15]
 800f30c:	4613      	mov	r3, r2
 800f30e:	011b      	lsls	r3, r3, #4
 800f310:	4413      	add	r3, r2
 800f312:	440b      	add	r3, r1
 800f314:	3310      	adds	r3, #16
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	79fa      	ldrb	r2, [r7, #7]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d10b      	bne.n	800f336 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800f31e:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <SecureElementGetKeyByID+0x5c>)
 800f320:	6819      	ldr	r1, [r3, #0]
 800f322:	7bfa      	ldrb	r2, [r7, #15]
 800f324:	4613      	mov	r3, r2
 800f326:	011b      	lsls	r3, r3, #4
 800f328:	4413      	add	r3, r2
 800f32a:	3310      	adds	r3, #16
 800f32c:	18ca      	adds	r2, r1, r3
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f332:	2300      	movs	r3, #0
 800f334:	e006      	b.n	800f344 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800f336:	7bfb      	ldrb	r3, [r7, #15]
 800f338:	3301      	adds	r3, #1
 800f33a:	73fb      	strb	r3, [r7, #15]
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
 800f33e:	2b09      	cmp	r3, #9
 800f340:	d9e1      	bls.n	800f306 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f342:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800f344:	4618      	mov	r0, r3
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	bc80      	pop	{r7}
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	20000c80 	.word	0x20000c80

0800f354 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f356:	b08b      	sub	sp, #44	; 0x2c
 800f358:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800f35a:	4b3f      	ldr	r3, [pc, #252]	; (800f458 <SecureElementPrintKeys+0x104>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	2100      	movs	r1, #0
 800f360:	2002      	movs	r0, #2
 800f362:	f00f f913 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800f366:	2000      	movs	r0, #0
 800f368:	f7ff fe0c 	bl	800ef84 <PrintKey>
    PrintKey(NWK_KEY);
 800f36c:	2001      	movs	r0, #1
 800f36e:	f7ff fe09 	bl	800ef84 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800f372:	4b3a      	ldr	r3, [pc, #232]	; (800f45c <SecureElementPrintKeys+0x108>)
 800f374:	2200      	movs	r2, #0
 800f376:	2100      	movs	r1, #0
 800f378:	2002      	movs	r0, #2
 800f37a:	f00f f907 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800f37e:	2003      	movs	r0, #3
 800f380:	f7ff fe00 	bl	800ef84 <PrintKey>
    PrintKey(NWK_S_KEY);
 800f384:	2002      	movs	r0, #2
 800f386:	f7ff fdfd 	bl	800ef84 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800f38a:	4b35      	ldr	r3, [pc, #212]	; (800f460 <SecureElementPrintKeys+0x10c>)
 800f38c:	2200      	movs	r2, #0
 800f38e:	2100      	movs	r1, #0
 800f390:	2002      	movs	r0, #2
 800f392:	f00f f8fb 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f396:	4b33      	ldr	r3, [pc, #204]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	461a      	mov	r2, r3
 800f39e:	4b31      	ldr	r3, [pc, #196]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	785b      	ldrb	r3, [r3, #1]
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	4b2f      	ldr	r3, [pc, #188]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	789b      	ldrb	r3, [r3, #2]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	4b2d      	ldr	r3, [pc, #180]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	78db      	ldrb	r3, [r3, #3]
 800f3b4:	461c      	mov	r4, r3
 800f3b6:	4b2b      	ldr	r3, [pc, #172]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	791b      	ldrb	r3, [r3, #4]
 800f3bc:	461d      	mov	r5, r3
 800f3be:	4b29      	ldr	r3, [pc, #164]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	795b      	ldrb	r3, [r3, #5]
 800f3c4:	461e      	mov	r6, r3
 800f3c6:	4b27      	ldr	r3, [pc, #156]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	799b      	ldrb	r3, [r3, #6]
 800f3cc:	607b      	str	r3, [r7, #4]
 800f3ce:	4b25      	ldr	r3, [pc, #148]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	79db      	ldrb	r3, [r3, #7]
 800f3d4:	9307      	str	r3, [sp, #28]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	9306      	str	r3, [sp, #24]
 800f3da:	9605      	str	r6, [sp, #20]
 800f3dc:	9504      	str	r5, [sp, #16]
 800f3de:	9403      	str	r4, [sp, #12]
 800f3e0:	9002      	str	r0, [sp, #8]
 800f3e2:	9101      	str	r1, [sp, #4]
 800f3e4:	9200      	str	r2, [sp, #0]
 800f3e6:	4b20      	ldr	r3, [pc, #128]	; (800f468 <SecureElementPrintKeys+0x114>)
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	2002      	movs	r0, #2
 800f3ee:	f00f f8cd 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f3f2:	4b1c      	ldr	r3, [pc, #112]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	7a1b      	ldrb	r3, [r3, #8]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	4b1a      	ldr	r3, [pc, #104]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	7a5b      	ldrb	r3, [r3, #9]
 800f400:	4619      	mov	r1, r3
 800f402:	4b18      	ldr	r3, [pc, #96]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	7a9b      	ldrb	r3, [r3, #10]
 800f408:	4618      	mov	r0, r3
 800f40a:	4b16      	ldr	r3, [pc, #88]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	7adb      	ldrb	r3, [r3, #11]
 800f410:	461c      	mov	r4, r3
 800f412:	4b14      	ldr	r3, [pc, #80]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	7b1b      	ldrb	r3, [r3, #12]
 800f418:	461d      	mov	r5, r3
 800f41a:	4b12      	ldr	r3, [pc, #72]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	7b5b      	ldrb	r3, [r3, #13]
 800f420:	461e      	mov	r6, r3
 800f422:	4b10      	ldr	r3, [pc, #64]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	7b9b      	ldrb	r3, [r3, #14]
 800f428:	607b      	str	r3, [r7, #4]
 800f42a:	4b0e      	ldr	r3, [pc, #56]	; (800f464 <SecureElementPrintKeys+0x110>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	7bdb      	ldrb	r3, [r3, #15]
 800f430:	9307      	str	r3, [sp, #28]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	9306      	str	r3, [sp, #24]
 800f436:	9605      	str	r6, [sp, #20]
 800f438:	9504      	str	r5, [sp, #16]
 800f43a:	9403      	str	r4, [sp, #12]
 800f43c:	9002      	str	r0, [sp, #8]
 800f43e:	9101      	str	r1, [sp, #4]
 800f440:	9200      	str	r2, [sp, #0]
 800f442:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <SecureElementPrintKeys+0x118>)
 800f444:	2200      	movs	r2, #0
 800f446:	2100      	movs	r1, #0
 800f448:	2002      	movs	r0, #2
 800f44a:	f00f f89f 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800f44e:	2300      	movs	r3, #0
}
 800f450:	4618      	mov	r0, r3
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f458:	0801f2a0 	.word	0x0801f2a0
 800f45c:	0801f2b8 	.word	0x0801f2b8
 800f460:	0801f2d0 	.word	0x0801f2d0
 800f464:	20000c80 	.word	0x20000c80
 800f468:	0801f2e8 	.word	0x0801f2e8
 800f46c:	0801f328 	.word	0x0801f328

0800f470 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800f474:	2004      	movs	r0, #4
 800f476:	f7ff fd85 	bl	800ef84 <PrintKey>
    PrintKey(MC_KE_KEY);
 800f47a:	207f      	movs	r0, #127	; 0x7f
 800f47c:	f7ff fd82 	bl	800ef84 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800f480:	2002      	movs	r0, #2
 800f482:	f7ff fd7f 	bl	800ef84 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800f486:	2003      	movs	r0, #3
 800f488:	f7ff fd7c 	bl	800ef84 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	bd80      	pop	{r7, pc}
	...

0800f494 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	6039      	str	r1, [r7, #0]
 800f49e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d101      	bne.n	800f4aa <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	e04c      	b.n	800f544 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	77fb      	strb	r3, [r7, #31]
 800f4ae:	e045      	b.n	800f53c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f4b0:	4b26      	ldr	r3, [pc, #152]	; (800f54c <SecureElementSetKey+0xb8>)
 800f4b2:	6819      	ldr	r1, [r3, #0]
 800f4b4:	7ffa      	ldrb	r2, [r7, #31]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	011b      	lsls	r3, r3, #4
 800f4ba:	4413      	add	r3, r2
 800f4bc:	440b      	add	r3, r1
 800f4be:	3310      	adds	r3, #16
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	79fa      	ldrb	r2, [r7, #7]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d136      	bne.n	800f536 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	2b80      	cmp	r3, #128	; 0x80
 800f4cc:	d123      	bne.n	800f516 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800f4ce:	2306      	movs	r3, #6
 800f4d0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	f107 0310 	add.w	r3, r7, #16
 800f4da:	2200      	movs	r2, #0
 800f4dc:	601a      	str	r2, [r3, #0]
 800f4de:	605a      	str	r2, [r3, #4]
 800f4e0:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f4e2:	f107 030c 	add.w	r3, r7, #12
 800f4e6:	227f      	movs	r2, #127	; 0x7f
 800f4e8:	2110      	movs	r1, #16
 800f4ea:	6838      	ldr	r0, [r7, #0]
 800f4ec:	f000 f87d 	bl	800f5ea <SecureElementAesEncrypt>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f4f4:	4b15      	ldr	r3, [pc, #84]	; (800f54c <SecureElementSetKey+0xb8>)
 800f4f6:	6819      	ldr	r1, [r3, #0]
 800f4f8:	7ffa      	ldrb	r2, [r7, #31]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	011b      	lsls	r3, r3, #4
 800f4fe:	4413      	add	r3, r2
 800f500:	3310      	adds	r3, #16
 800f502:	440b      	add	r3, r1
 800f504:	3301      	adds	r3, #1
 800f506:	f107 010c 	add.w	r1, r7, #12
 800f50a:	2210      	movs	r2, #16
 800f50c:	4618      	mov	r0, r3
 800f50e:	f00a fce8 	bl	8019ee2 <memcpy1>
                return retval;
 800f512:	7fbb      	ldrb	r3, [r7, #30]
 800f514:	e016      	b.n	800f544 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f516:	4b0d      	ldr	r3, [pc, #52]	; (800f54c <SecureElementSetKey+0xb8>)
 800f518:	6819      	ldr	r1, [r3, #0]
 800f51a:	7ffa      	ldrb	r2, [r7, #31]
 800f51c:	4613      	mov	r3, r2
 800f51e:	011b      	lsls	r3, r3, #4
 800f520:	4413      	add	r3, r2
 800f522:	3310      	adds	r3, #16
 800f524:	440b      	add	r3, r1
 800f526:	3301      	adds	r3, #1
 800f528:	2210      	movs	r2, #16
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f00a fcd8 	bl	8019ee2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f532:	2300      	movs	r3, #0
 800f534:	e006      	b.n	800f544 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f536:	7ffb      	ldrb	r3, [r7, #31]
 800f538:	3301      	adds	r3, #1
 800f53a:	77fb      	strb	r3, [r7, #31]
 800f53c:	7ffb      	ldrb	r3, [r7, #31]
 800f53e:	2b09      	cmp	r3, #9
 800f540:	d9b6      	bls.n	800f4b0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f542:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f544:	4618      	mov	r0, r3
 800f546:	3720      	adds	r7, #32
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20000c80 	.word	0x20000c80

0800f550 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	4611      	mov	r1, r2
 800f55c:	461a      	mov	r2, r3
 800f55e:	460b      	mov	r3, r1
 800f560:	80fb      	strh	r3, [r7, #6]
 800f562:	4613      	mov	r3, r2
 800f564:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800f566:	797b      	ldrb	r3, [r7, #5]
 800f568:	2b7e      	cmp	r3, #126	; 0x7e
 800f56a:	d901      	bls.n	800f570 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f56c:	2303      	movs	r3, #3
 800f56e:	e009      	b.n	800f584 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f570:	7979      	ldrb	r1, [r7, #5]
 800f572:	88fa      	ldrh	r2, [r7, #6]
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	460b      	mov	r3, r1
 800f57a:	68b9      	ldr	r1, [r7, #8]
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f7ff fe13 	bl	800f1a8 <ComputeCmac>
 800f582:	4603      	mov	r3, r0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b088      	sub	sp, #32
 800f590:	af02      	add	r7, sp, #8
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	607a      	str	r2, [r7, #4]
 800f596:	461a      	mov	r2, r3
 800f598:	460b      	mov	r3, r1
 800f59a:	817b      	strh	r3, [r7, #10]
 800f59c:	4613      	mov	r3, r2
 800f59e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e01b      	b.n	800f5e2 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f5aa:	2306      	movs	r3, #6
 800f5ac:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f5b2:	7a79      	ldrb	r1, [r7, #9]
 800f5b4:	897a      	ldrh	r2, [r7, #10]
 800f5b6:	f107 0310 	add.w	r3, r7, #16
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	460b      	mov	r3, r1
 800f5be:	68f9      	ldr	r1, [r7, #12]
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	f7ff fdf1 	bl	800f1a8 <ComputeCmac>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f5ca:	7dfb      	ldrb	r3, [r7, #23]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d001      	beq.n	800f5d4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800f5d0:	7dfb      	ldrb	r3, [r7, #23]
 800f5d2:	e006      	b.n	800f5e2 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d001      	beq.n	800f5e0 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3718      	adds	r7, #24
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b0c2      	sub	sp, #264	; 0x108
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	60f8      	str	r0, [r7, #12]
 800f5f2:	4608      	mov	r0, r1
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f5fa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f5fe:	6013      	str	r3, [r2, #0]
 800f600:	4603      	mov	r3, r0
 800f602:	817b      	strh	r3, [r7, #10]
 800f604:	460b      	mov	r3, r1
 800f606:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d006      	beq.n	800f61c <SecureElementAesEncrypt+0x32>
 800f60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d101      	bne.n	800f620 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f61c:	2302      	movs	r3, #2
 800f61e:	e046      	b.n	800f6ae <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f620:	897b      	ldrh	r3, [r7, #10]
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	b29b      	uxth	r3, r3
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f62c:	2305      	movs	r3, #5
 800f62e:	e03e      	b.n	800f6ae <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f630:	f107 0314 	add.w	r3, r7, #20
 800f634:	22f0      	movs	r2, #240	; 0xf0
 800f636:	2100      	movs	r1, #0
 800f638:	4618      	mov	r0, r3
 800f63a:	f00a fc8d 	bl	8019f58 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f63e:	f107 0210 	add.w	r2, r7, #16
 800f642:	7a7b      	ldrb	r3, [r7, #9]
 800f644:	4611      	mov	r1, r2
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fd7e 	bl	800f148 <GetKeyByID>
 800f64c:	4603      	mov	r3, r0
 800f64e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f652:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f656:	2b00      	cmp	r3, #0
 800f658:	d127      	bne.n	800f6aa <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	3301      	adds	r3, #1
 800f65e:	f107 0214 	add.w	r2, r7, #20
 800f662:	2110      	movs	r1, #16
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fb65 	bl	800ed34 <lorawan_aes_set_key>

        uint8_t block = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f670:	e018      	b.n	800f6a4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800f672:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	18d0      	adds	r0, r2, r3
 800f67a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f67e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f682:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f686:	6812      	ldr	r2, [r2, #0]
 800f688:	4413      	add	r3, r2
 800f68a:	f107 0214 	add.w	r2, r7, #20
 800f68e:	4619      	mov	r1, r3
 800f690:	f7ff fc2e 	bl	800eef0 <lorawan_aes_encrypt>
            block = block + 16;
 800f694:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f698:	3310      	adds	r3, #16
 800f69a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f69e:	897b      	ldrh	r3, [r7, #10]
 800f6a0:	3b10      	subs	r3, #16
 800f6a2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800f6a4:	897b      	ldrh	r3, [r7, #10]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1e3      	bne.n	800f672 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f6aa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b088      	sub	sp, #32
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	70fb      	strb	r3, [r7, #3]
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6ce:	2302      	movs	r3, #2
 800f6d0:	e02e      	b.n	800f730 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f6d2:	2306      	movs	r3, #6
 800f6d4:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f6d6:	78bb      	ldrb	r3, [r7, #2]
 800f6d8:	2b7f      	cmp	r3, #127	; 0x7f
 800f6da:	d104      	bne.n	800f6e6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f6dc:	78fb      	ldrb	r3, [r7, #3]
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d001      	beq.n	800f6e6 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f6e2:	2303      	movs	r3, #3
 800f6e4:	e024      	b.n	800f730 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	f107 0310 	add.w	r3, r7, #16
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	605a      	str	r2, [r3, #4]
 800f6f4:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f6f6:	f107 030c 	add.w	r3, r7, #12
 800f6fa:	78fa      	ldrb	r2, [r7, #3]
 800f6fc:	2110      	movs	r1, #16
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7ff ff73 	bl	800f5ea <SecureElementAesEncrypt>
 800f704:	4603      	mov	r3, r0
 800f706:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f708:	7ffb      	ldrb	r3, [r7, #31]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f70e:	7ffb      	ldrb	r3, [r7, #31]
 800f710:	e00e      	b.n	800f730 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f712:	f107 020c 	add.w	r2, r7, #12
 800f716:	78bb      	ldrb	r3, [r7, #2]
 800f718:	4611      	mov	r1, r2
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7ff feba 	bl	800f494 <SecureElementSetKey>
 800f720:	4603      	mov	r3, r0
 800f722:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f724:	7ffb      	ldrb	r3, [r7, #31]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d001      	beq.n	800f72e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f72a:	7ffb      	ldrb	r3, [r7, #31]
 800f72c:	e000      	b.n	800f730 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f72e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f730:	4618      	mov	r0, r3
 800f732:	3720      	adds	r7, #32
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60b9      	str	r1, [r7, #8]
 800f740:	607b      	str	r3, [r7, #4]
 800f742:	4603      	mov	r3, r0
 800f744:	73fb      	strb	r3, [r7, #15]
 800f746:	4613      	mov	r3, r2
 800f748:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d005      	beq.n	800f75c <SecureElementProcessJoinAccept+0x24>
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <SecureElementProcessJoinAccept+0x24>
 800f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d101      	bne.n	800f760 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f75c:	2302      	movs	r3, #2
 800f75e:	e064      	b.n	800f82a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f760:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f764:	2b21      	cmp	r3, #33	; 0x21
 800f766:	d901      	bls.n	800f76c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f768:	2305      	movs	r3, #5
 800f76a:	e05e      	b.n	800f82a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f76c:	2301      	movs	r3, #1
 800f76e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f770:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f774:	b29b      	uxth	r3, r3
 800f776:	461a      	mov	r2, r3
 800f778:	6879      	ldr	r1, [r7, #4]
 800f77a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f77c:	f00a fbb1 	bl	8019ee2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	1c58      	adds	r0, r3, #1
 800f784:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	3b01      	subs	r3, #1
 800f78c:	b299      	uxth	r1, r3
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	3301      	adds	r3, #1
 800f792:	7dfa      	ldrb	r2, [r7, #23]
 800f794:	f7ff ff29 	bl	800f5ea <SecureElementAesEncrypt>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d001      	beq.n	800f7a2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f79e:	2307      	movs	r3, #7
 800f7a0:	e043      	b.n	800f82a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	330b      	adds	r3, #11
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	09db      	lsrs	r3, r3, #7
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f7b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f7b8:	3b04      	subs	r3, #4
 800f7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7bc:	4413      	add	r3, r2
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f7c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f7c6:	3b03      	subs	r3, #3
 800f7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7ca:	4413      	add	r3, r2
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	021b      	lsls	r3, r3, #8
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f7d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f7da:	3b02      	subs	r3, #2
 800f7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7de:	4413      	add	r3, r2
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	041b      	lsls	r3, r3, #16
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f7ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f2:	4413      	add	r3, r2
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	061b      	lsls	r3, r3, #24
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10e      	bne.n	800f824 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	3b04      	subs	r3, #4
 800f80e:	b299      	uxth	r1, r3
 800f810:	2301      	movs	r3, #1
 800f812:	693a      	ldr	r2, [r7, #16]
 800f814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f816:	f7ff feb9 	bl	800f58c <SecureElementVerifyAesCmac>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d003      	beq.n	800f828 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f820:	2301      	movs	r3, #1
 800f822:	e002      	b.n	800f82a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f824:	2304      	movs	r3, #4
 800f826:	e000      	b.n	800f82a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3718      	adds	r7, #24
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
	...

0800f834 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d101      	bne.n	800f846 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f842:	2302      	movs	r3, #2
 800f844:	e006      	b.n	800f854 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f846:	4b05      	ldr	r3, [pc, #20]	; (800f85c <SecureElementRandomNumber+0x28>)
 800f848:	695b      	ldr	r3, [r3, #20]
 800f84a:	4798      	blx	r3
 800f84c:	4602      	mov	r2, r0
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	0801fa3c 	.word	0x0801fa3c

0800f860 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d101      	bne.n	800f872 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f86e:	2302      	movs	r3, #2
 800f870:	e007      	b.n	800f882 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f872:	4b06      	ldr	r3, [pc, #24]	; (800f88c <SecureElementSetDevEui+0x2c>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2208      	movs	r2, #8
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f00a fb31 	bl	8019ee2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20000c80 	.word	0x20000c80

0800f890 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f890:	b480      	push	{r7}
 800f892:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800f894:	4b02      	ldr	r3, [pc, #8]	; (800f8a0 <SecureElementGetDevEui+0x10>)
 800f896:	681b      	ldr	r3, [r3, #0]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bc80      	pop	{r7}
 800f89e:	4770      	bx	lr
 800f8a0:	20000c80 	.word	0x20000c80

0800f8a4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f8b2:	2302      	movs	r3, #2
 800f8b4:	e008      	b.n	800f8c8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f8b6:	4b06      	ldr	r3, [pc, #24]	; (800f8d0 <SecureElementSetJoinEui+0x2c>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	2208      	movs	r2, #8
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f00a fb0e 	bl	8019ee2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	20000c80 	.word	0x20000c80

0800f8d4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800f8d8:	4b03      	ldr	r3, [pc, #12]	; (800f8e8 <SecureElementGetJoinEui+0x14>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	3308      	adds	r3, #8
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bc80      	pop	{r7}
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	20000c80 	.word	0x20000c80

0800f8ec <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f8f6:	4a1a      	ldr	r2, [pc, #104]	; (800f960 <LmHandlerInit+0x74>)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f8fc:	4b19      	ldr	r3, [pc, #100]	; (800f964 <LmHandlerInit+0x78>)
 800f8fe:	4a1a      	ldr	r2, [pc, #104]	; (800f968 <LmHandlerInit+0x7c>)
 800f900:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f902:	4b18      	ldr	r3, [pc, #96]	; (800f964 <LmHandlerInit+0x78>)
 800f904:	4a19      	ldr	r2, [pc, #100]	; (800f96c <LmHandlerInit+0x80>)
 800f906:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f908:	4b16      	ldr	r3, [pc, #88]	; (800f964 <LmHandlerInit+0x78>)
 800f90a:	4a19      	ldr	r2, [pc, #100]	; (800f970 <LmHandlerInit+0x84>)
 800f90c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f90e:	4b15      	ldr	r3, [pc, #84]	; (800f964 <LmHandlerInit+0x78>)
 800f910:	4a18      	ldr	r2, [pc, #96]	; (800f974 <LmHandlerInit+0x88>)
 800f912:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f914:	4b12      	ldr	r3, [pc, #72]	; (800f960 <LmHandlerInit+0x74>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a17      	ldr	r2, [pc, #92]	; (800f978 <LmHandlerInit+0x8c>)
 800f91c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f91e:	4b10      	ldr	r3, [pc, #64]	; (800f960 <LmHandlerInit+0x74>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	4a14      	ldr	r2, [pc, #80]	; (800f978 <LmHandlerInit+0x8c>)
 800f926:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f928:	4b0d      	ldr	r3, [pc, #52]	; (800f960 <LmHandlerInit+0x74>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	4a12      	ldr	r2, [pc, #72]	; (800f978 <LmHandlerInit+0x8c>)
 800f930:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f932:	4b11      	ldr	r3, [pc, #68]	; (800f978 <LmHandlerInit+0x8c>)
 800f934:	4a11      	ldr	r2, [pc, #68]	; (800f97c <LmHandlerInit+0x90>)
 800f936:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f938:	4b09      	ldr	r3, [pc, #36]	; (800f960 <LmHandlerInit+0x74>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	699b      	ldr	r3, [r3, #24]
 800f93e:	4a0e      	ldr	r2, [pc, #56]	; (800f978 <LmHandlerInit+0x8c>)
 800f940:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800f942:	490f      	ldr	r1, [pc, #60]	; (800f980 <LmHandlerInit+0x94>)
 800f944:	2000      	movs	r0, #0
 800f946:	f000 fd8f 	bl	8010468 <LmHandlerPackageRegister>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f950:	f04f 33ff 	mov.w	r3, #4294967295
 800f954:	e000      	b.n	800f958 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	20000cac 	.word	0x20000cac
 800f964:	20000cb0 	.word	0x20000cb0
 800f968:	08010135 	.word	0x08010135
 800f96c:	0801019d 	.word	0x0801019d
 800f970:	08010279 	.word	0x08010279
 800f974:	08010395 	.word	0x08010395
 800f978:	20000cc0 	.word	0x20000cc0
 800f97c:	08010805 	.word	0x08010805
 800f980:	200000b8 	.word	0x200000b8

0800f984 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b094      	sub	sp, #80	; 0x50
 800f988:	af04      	add	r7, sp, #16
 800f98a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800f98c:	2214      	movs	r2, #20
 800f98e:	6879      	ldr	r1, [r7, #4]
 800f990:	488f      	ldr	r0, [pc, #572]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800f992:	f00d fdab 	bl	801d4ec <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f996:	f7fe fb0b 	bl	800dfb0 <LoraInfo_GetPtr>
 800f99a:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800f99c:	4b8c      	ldr	r3, [pc, #560]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	4093      	lsls	r3, r2
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800f9b2:	4b88      	ldr	r3, [pc, #544]	; (800fbd4 <LmHandlerConfigure+0x250>)
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f00e fde7 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800f9be:	e7fe      	b.n	800f9be <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800f9c0:	4b83      	ldr	r3, [pc, #524]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	4984      	ldr	r1, [pc, #528]	; (800fbd8 <LmHandlerConfigure+0x254>)
 800f9c8:	4884      	ldr	r0, [pc, #528]	; (800fbdc <LmHandlerConfigure+0x258>)
 800f9ca:	f004 fc01 	bl	80141d0 <LoRaMacInitialization>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d002      	beq.n	800f9da <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d8:	e0f5      	b.n	800fbc6 <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800f9da:	2326      	movs	r3, #38	; 0x26
 800f9dc:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f9de:	f107 0318 	add.w	r3, r7, #24
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f005 f918 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d103      	bne.n	800f9f6 <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800f9ee:	4b7c      	ldr	r3, [pc, #496]	; (800fbe0 <LmHandlerConfigure+0x25c>)
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	701a      	strb	r2, [r3, #0]
 800f9f4:	e02a      	b.n	800fa4c <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800f9f6:	2327      	movs	r3, #39	; 0x27
 800f9f8:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800f9fa:	4b7a      	ldr	r3, [pc, #488]	; (800fbe4 <LmHandlerConfigure+0x260>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00c      	beq.n	800fa1e <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fa04:	f107 0318 	add.w	r3, r7, #24
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f004 ff7f 	bl	801490c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800fa0e:	4b75      	ldr	r3, [pc, #468]	; (800fbe4 <LmHandlerConfigure+0x260>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	69fa      	ldr	r2, [r7, #28]
 800fa16:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800fa1a:	4610      	mov	r0, r2
 800fa1c:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800fa1e:	2326      	movs	r3, #38	; 0x26
 800fa20:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800fa22:	f107 0318 	add.w	r3, r7, #24
 800fa26:	4618      	mov	r0, r3
 800fa28:	f005 f8f6 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10c      	bne.n	800fa4c <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa32:	2301      	movs	r3, #1
 800fa34:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fa36:	f107 0318 	add.w	r3, r7, #24
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f004 ff66 	bl	801490c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800fa40:	7f3b      	ldrb	r3, [r7, #28]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d002      	beq.n	800fa4c <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800fa46:	4b66      	ldr	r3, [pc, #408]	; (800fbe0 <LmHandlerConfigure+0x25c>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800fa4c:	4b64      	ldr	r3, [pc, #400]	; (800fbe0 <LmHandlerConfigure+0x25c>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d02a      	beq.n	800faaa <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800fa54:	4b63      	ldr	r3, [pc, #396]	; (800fbe4 <LmHandlerConfigure+0x260>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	69db      	ldr	r3, [r3, #28]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d004      	beq.n	800fa68 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800fa5e:	4b61      	ldr	r3, [pc, #388]	; (800fbe4 <LmHandlerConfigure+0x260>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	69db      	ldr	r3, [r3, #28]
 800fa64:	2000      	movs	r0, #0
 800fa66:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800fa68:	2306      	movs	r3, #6
 800fa6a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800fa6c:	f107 0318 	add.w	r3, r7, #24
 800fa70:	4618      	mov	r0, r3
 800fa72:	f004 ff4b 	bl	801490c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	4a5b      	ldr	r2, [pc, #364]	; (800fbe8 <LmHandlerConfigure+0x264>)
 800fa7a:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800fa7c:	2326      	movs	r3, #38	; 0x26
 800fa7e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800fa80:	f107 0318 	add.w	r3, r7, #24
 800fa84:	4618      	mov	r0, r3
 800fa86:	f004 ff41 	bl	801490c <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fa90:	4b4f      	ldr	r3, [pc, #316]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fa92:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800fa9a:	4b4d      	ldr	r3, [pc, #308]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fa9c:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800faa4:	4b4a      	ldr	r3, [pc, #296]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800faa6:	709a      	strb	r2, [r3, #2]
 800faa8:	e019      	b.n	800fade <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800faaa:	2305      	movs	r3, #5
 800faac:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800faae:	2300      	movs	r3, #0
 800fab0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800fab2:	f107 0318 	add.w	r3, r7, #24
 800fab6:	4618      	mov	r0, r3
 800fab8:	f005 f8ae 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800fabc:	4b49      	ldr	r3, [pc, #292]	; (800fbe4 <LmHandlerConfigure+0x260>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	4798      	blx	r3
 800fac4:	4603      	mov	r3, r0
 800fac6:	4a48      	ldr	r2, [pc, #288]	; (800fbe8 <LmHandlerConfigure+0x264>)
 800fac8:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800faca:	2306      	movs	r3, #6
 800facc:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800face:	4b46      	ldr	r3, [pc, #280]	; (800fbe8 <LmHandlerConfigure+0x264>)
 800fad0:	695b      	ldr	r3, [r3, #20]
 800fad2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800fad4:	f107 0318 	add.w	r3, r7, #24
 800fad8:	4618      	mov	r0, r3
 800fada:	f005 f89d 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800fade:	2302      	movs	r3, #2
 800fae0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800fae2:	f107 0318 	add.w	r3, r7, #24
 800fae6:	4618      	mov	r0, r3
 800fae8:	f004 ff10 	bl	801490c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	2208      	movs	r2, #8
 800faf0:	4619      	mov	r1, r3
 800faf2:	483d      	ldr	r0, [pc, #244]	; (800fbe8 <LmHandlerConfigure+0x264>)
 800faf4:	f00a f9f5 	bl	8019ee2 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800faf8:	2303      	movs	r3, #3
 800fafa:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800fafc:	f107 0318 	add.w	r3, r7, #24
 800fb00:	4618      	mov	r0, r3
 800fb02:	f004 ff03 	bl	801490c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	2208      	movs	r2, #8
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4837      	ldr	r0, [pc, #220]	; (800fbec <LmHandlerConfigure+0x268>)
 800fb0e:	f00a f9e8 	bl	8019ee2 <memcpy1>

    SecureElementPrintKeys();
 800fb12:	f7ff fc1f 	bl	800f354 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fb16:	4b36      	ldr	r3, [pc, #216]	; (800fbf0 <LmHandlerConfigure+0x26c>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4b35      	ldr	r3, [pc, #212]	; (800fbf4 <LmHandlerConfigure+0x270>)
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	4619      	mov	r1, r3
 800fb22:	4b35      	ldr	r3, [pc, #212]	; (800fbf8 <LmHandlerConfigure+0x274>)
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	4618      	mov	r0, r3
 800fb28:	4b34      	ldr	r3, [pc, #208]	; (800fbfc <LmHandlerConfigure+0x278>)
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	9303      	str	r3, [sp, #12]
 800fb2e:	9002      	str	r0, [sp, #8]
 800fb30:	9101      	str	r1, [sp, #4]
 800fb32:	9200      	str	r2, [sp, #0]
 800fb34:	4b32      	ldr	r3, [pc, #200]	; (800fc00 <LmHandlerConfigure+0x27c>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	2100      	movs	r1, #0
 800fb3a:	2002      	movs	r0, #2
 800fb3c:	f00e fd26 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800fb40:	230f      	movs	r3, #15
 800fb42:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800fb44:	2301      	movs	r3, #1
 800fb46:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800fb48:	f107 0318 	add.w	r3, r7, #24
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f005 f863 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800fb52:	2310      	movs	r3, #16
 800fb54:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800fb56:	2300      	movs	r3, #0
 800fb58:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800fb5a:	f107 0318 	add.w	r3, r7, #24
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f005 f85a 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800fb64:	2304      	movs	r3, #4
 800fb66:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800fb68:	4b19      	ldr	r3, [pc, #100]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fb6a:	789b      	ldrb	r3, [r3, #2]
 800fb6c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800fb6e:	f107 0318 	add.w	r3, r7, #24
 800fb72:	4618      	mov	r0, r3
 800fb74:	f005 f850 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800fb78:	2337      	movs	r3, #55	; 0x37
 800fb7a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800fb7c:	4b14      	ldr	r3, [pc, #80]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800fb82:	f107 0318 	add.w	r3, r7, #24
 800fb86:	4618      	mov	r0, r3
 800fb88:	f005 f846 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800fb8c:	230f      	movs	r3, #15
 800fb8e:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800fb90:	4b0f      	ldr	r3, [pc, #60]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	f107 0210 	add.w	r2, r7, #16
 800fb98:	4611      	mov	r1, r2
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f007 fe8e 	bl	80178bc <RegionGetPhyParam>
 800fba0:	4603      	mov	r3, r0
 800fba2:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	bf14      	ite	ne
 800fbaa:	2301      	movne	r3, #1
 800fbac:	2300      	moveq	r3, #0
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	4b07      	ldr	r3, [pc, #28]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fbb2:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800fbb4:	2014      	movs	r0, #20
 800fbb6:	f000 faa5 	bl	8010104 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800fbba:	4b05      	ldr	r3, [pc, #20]	; (800fbd0 <LmHandlerConfigure+0x24c>)
 800fbbc:	799b      	ldrb	r3, [r3, #6]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f005 fdba 	bl	8015738 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3740      	adds	r7, #64	; 0x40
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	20000c98 	.word	0x20000c98
 800fbd4:	0801f368 	.word	0x0801f368
 800fbd8:	20000cc0 	.word	0x20000cc0
 800fbdc:	20000cb0 	.word	0x20000cb0
 800fbe0:	20000dca 	.word	0x20000dca
 800fbe4:	20000cac 	.word	0x20000cac
 800fbe8:	200000a0 	.word	0x200000a0
 800fbec:	200000a8 	.word	0x200000a8
 800fbf0:	200000b7 	.word	0x200000b7
 800fbf4:	200000b6 	.word	0x200000b6
 800fbf8:	200000b5 	.word	0x200000b5
 800fbfc:	200000b4 	.word	0x200000b4
 800fc00:	0801f3b4 	.word	0x0801f3b4

0800fc04 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800fc08:	f002 fab4 	bl	8012174 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800fc0c:	f000 fd30 	bl	8010670 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800fc10:	bf00      	nop
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800fc14:	b480      	push	{r7}
 800fc16:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800fc18:	4b02      	ldr	r3, [pc, #8]	; (800fc24 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bc80      	pop	{r7}
 800fc22:	4770      	bx	lr
 800fc24:	20000cd4 	.word	0x20000cd4

0800fc28 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b090      	sub	sp, #64	; 0x40
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	4603      	mov	r3, r0
 800fc30:	460a      	mov	r2, r1
 800fc32:	71fb      	strb	r3, [r7, #7]
 800fc34:	4613      	mov	r3, r2
 800fc36:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800fc3e:	4b35      	ldr	r3, [pc, #212]	; (800fd14 <LmHandlerJoin+0xec>)
 800fc40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800fc4a:	79fb      	ldrb	r3, [r7, #7]
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	d110      	bne.n	800fc72 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fc50:	2302      	movs	r3, #2
 800fc52:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800fc56:	4b30      	ldr	r3, [pc, #192]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fc58:	2202      	movs	r2, #2
 800fc5a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800fc5c:	4a2e      	ldr	r2, [pc, #184]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fc5e:	79bb      	ldrb	r3, [r7, #6]
 800fc60:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800fc62:	f004 fd69 	bl	8014738 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800fc66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f005 fb2e 	bl	80152cc <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800fc70:	e04b      	b.n	800fd0a <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fc72:	2301      	movs	r3, #1
 800fc74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800fc78:	4b27      	ldr	r3, [pc, #156]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800fc7e:	4b25      	ldr	r3, [pc, #148]	; (800fd14 <LmHandlerJoin+0xec>)
 800fc80:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fc84:	4b24      	ldr	r3, [pc, #144]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fc86:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fc88:	4b23      	ldr	r3, [pc, #140]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800fc8e:	4a22      	ldr	r2, [pc, #136]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fc90:	79bb      	ldrb	r3, [r7, #6]
 800fc92:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800fc94:	4b21      	ldr	r3, [pc, #132]	; (800fd1c <LmHandlerJoin+0xf4>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f083 0301 	eor.w	r3, r3, #1
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d01e      	beq.n	800fce0 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800fca2:	231e      	movs	r3, #30
 800fca4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800fca6:	4b1b      	ldr	r3, [pc, #108]	; (800fd14 <LmHandlerJoin+0xec>)
 800fca8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fcac:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fcae:	f107 0308 	add.w	r3, r7, #8
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f004 ffb0 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800fcb8:	231f      	movs	r3, #31
 800fcba:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800fcbc:	4b15      	ldr	r3, [pc, #84]	; (800fd14 <LmHandlerJoin+0xec>)
 800fcbe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fcc2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fcc4:	f107 0308 	add.w	r3, r7, #8
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f004 ffa5 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800fcce:	2328      	movs	r3, #40	; 0x28
 800fcd0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800fcd2:	4b13      	ldr	r3, [pc, #76]	; (800fd20 <LmHandlerJoin+0xf8>)
 800fcd4:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800fcd6:	f107 0308 	add.w	r3, r7, #8
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f004 ff9c 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800fce0:	f004 fd2a 	bl	8014738 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fce4:	2301      	movs	r3, #1
 800fce6:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fce8:	2301      	movs	r3, #1
 800fcea:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800fcec:	f107 0308 	add.w	r3, r7, #8
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f004 ff91 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fcf6:	4b0b      	ldr	r3, [pc, #44]	; (800fd24 <LmHandlerJoin+0xfc>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfc:	4806      	ldr	r0, [pc, #24]	; (800fd18 <LmHandlerJoin+0xf0>)
 800fcfe:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800fd00:	4b04      	ldr	r3, [pc, #16]	; (800fd14 <LmHandlerJoin+0xec>)
 800fd02:	785b      	ldrb	r3, [r3, #1]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f000 f92b 	bl	800ff60 <LmHandlerRequestClass>
}
 800fd0a:	bf00      	nop
 800fd0c:	3740      	adds	r7, #64	; 0x40
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	20000c98 	.word	0x20000c98
 800fd18:	200000c4 	.word	0x200000c4
 800fd1c:	20000dca 	.word	0x20000dca
 800fd20:	01000300 	.word	0x01000300
 800fd24:	20000cac 	.word	0x20000cac

0800fd28 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b08a      	sub	sp, #40	; 0x28
 800fd2c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800fd32:	463b      	mov	r3, r7
 800fd34:	4618      	mov	r0, r3
 800fd36:	f004 fde9 	bl	801490c <LoRaMacMibGetRequestConfirm>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800fd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d106      	bne.n	800fd56 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fd48:	793b      	ldrb	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d101      	bne.n	800fd52 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	e002      	b.n	800fd58 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800fd52:	2301      	movs	r3, #1
 800fd54:	e000      	b.n	800fd58 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800fd56:	2300      	movs	r3, #0
    }
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3728      	adds	r7, #40	; 0x28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	; 0x28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	70fb      	strb	r3, [r7, #3]
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fd70:	23ff      	movs	r3, #255	; 0xff
 800fd72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800fd76:	f001 ff8b 	bl	8011c90 <LoRaMacIsBusy>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd80:	f06f 0301 	mvn.w	r3, #1
 800fd84:	e0b6      	b.n	800fef4 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fd86:	f7ff ffcf 	bl	800fd28 <LmHandlerJoinStatus>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d00a      	beq.n	800fda6 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800fd90:	4b5a      	ldr	r3, [pc, #360]	; (800fefc <LmHandlerSend+0x19c>)
 800fd92:	799b      	ldrb	r3, [r3, #6]
 800fd94:	4a59      	ldr	r2, [pc, #356]	; (800fefc <LmHandlerSend+0x19c>)
 800fd96:	79d2      	ldrb	r2, [r2, #7]
 800fd98:	4611      	mov	r1, r2
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7ff ff44 	bl	800fc28 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fda0:	f06f 0302 	mvn.w	r3, #2
 800fda4:	e0a6      	b.n	800fef4 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fda6:	4b56      	ldr	r3, [pc, #344]	; (800ff00 <LmHandlerSend+0x1a0>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	4798      	blx	r3
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00d      	beq.n	800fdd0 <LmHandlerSend+0x70>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	781a      	ldrb	r2, [r3, #0]
 800fdb8:	4b51      	ldr	r3, [pc, #324]	; (800ff00 <LmHandlerSend+0x1a0>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d006      	beq.n	800fdd0 <LmHandlerSend+0x70>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d002      	beq.n	800fdd0 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fdca:	f06f 0303 	mvn.w	r3, #3
 800fdce:	e091      	b.n	800fef4 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fdd0:	4a4c      	ldr	r2, [pc, #304]	; (800ff04 <LmHandlerSend+0x1a4>)
 800fdd2:	78fb      	ldrb	r3, [r7, #3]
 800fdd4:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fdd6:	78fb      	ldrb	r3, [r7, #3]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	bf14      	ite	ne
 800fddc:	2301      	movne	r3, #1
 800fdde:	2300      	moveq	r3, #0
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fde4:	4b48      	ldr	r3, [pc, #288]	; (800ff08 <LmHandlerSend+0x1a8>)
 800fde6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fdea:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	785b      	ldrb	r3, [r3, #1]
 800fdf0:	f107 020c 	add.w	r2, r7, #12
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f004 fd00 	bl	80147fc <LoRaMacQueryTxPossible>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d009      	beq.n	800fe16 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fe02:	2300      	movs	r3, #0
 800fe04:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fe06:	2300      	movs	r3, #0
 800fe08:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fe0e:	23f9      	movs	r3, #249	; 0xf9
 800fe10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe14:	e009      	b.n	800fe2a <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	785b      	ldrb	r3, [r3, #1]
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fe2a:	4b36      	ldr	r3, [pc, #216]	; (800ff04 <LmHandlerSend+0x1a4>)
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	3310      	adds	r3, #16
 800fe30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe34:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fe38:	4b33      	ldr	r3, [pc, #204]	; (800ff08 <LmHandlerSend+0x1a8>)
 800fe3a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fe3e:	4b31      	ldr	r3, [pc, #196]	; (800ff04 <LmHandlerSend+0x1a4>)
 800fe40:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800fe42:	78ba      	ldrb	r2, [r7, #2]
 800fe44:	f107 0310 	add.w	r3, r7, #16
 800fe48:	4611      	mov	r1, r2
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f005 fb7e 	bl	801554c <LoRaMacMcpsRequest>
 800fe50:	4603      	mov	r3, r0
 800fe52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fe56:	6a3b      	ldr	r3, [r7, #32]
 800fe58:	4a2c      	ldr	r2, [pc, #176]	; (800ff0c <LmHandlerSend+0x1ac>)
 800fe5a:	6013      	str	r3, [r2, #0]

    switch (status)
 800fe5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe60:	2b11      	cmp	r3, #17
 800fe62:	d840      	bhi.n	800fee6 <LmHandlerSend+0x186>
 800fe64:	a201      	add	r2, pc, #4	; (adr r2, 800fe6c <LmHandlerSend+0x10c>)
 800fe66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6a:	bf00      	nop
 800fe6c:	0800feb5 	.word	0x0800feb5
 800fe70:	0800fec7 	.word	0x0800fec7
 800fe74:	0800fee7 	.word	0x0800fee7
 800fe78:	0800fee7 	.word	0x0800fee7
 800fe7c:	0800fee7 	.word	0x0800fee7
 800fe80:	0800fee7 	.word	0x0800fee7
 800fe84:	0800fee7 	.word	0x0800fee7
 800fe88:	0800fecf 	.word	0x0800fecf
 800fe8c:	0800fee7 	.word	0x0800fee7
 800fe90:	0800fee7 	.word	0x0800fee7
 800fe94:	0800fee7 	.word	0x0800fee7
 800fe98:	0800fedf 	.word	0x0800fedf
 800fe9c:	0800fee7 	.word	0x0800fee7
 800fea0:	0800fee7 	.word	0x0800fee7
 800fea4:	0800fec7 	.word	0x0800fec7
 800fea8:	0800fec7 	.word	0x0800fec7
 800feac:	0800fec7 	.word	0x0800fec7
 800feb0:	0800fed7 	.word	0x0800fed7
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800feb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800feb8:	f113 0f07 	cmn.w	r3, #7
 800febc:	d017      	beq.n	800feee <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800febe:	2300      	movs	r3, #0
 800fec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fec4:	e013      	b.n	800feee <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fec6:	23fe      	movs	r3, #254	; 0xfe
 800fec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fecc:	e010      	b.n	800fef0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fece:	23fd      	movs	r3, #253	; 0xfd
 800fed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fed4:	e00c      	b.n	800fef0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fed6:	23fb      	movs	r3, #251	; 0xfb
 800fed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fedc:	e008      	b.n	800fef0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fede:	23fa      	movs	r3, #250	; 0xfa
 800fee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fee4:	e004      	b.n	800fef0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fee6:	23ff      	movs	r3, #255	; 0xff
 800fee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800feec:	e000      	b.n	800fef0 <LmHandlerSend+0x190>
            break;
 800feee:	bf00      	nop
    }

    return lmhStatus;
 800fef0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3728      	adds	r7, #40	; 0x28
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	200000c4 	.word	0x200000c4
 800ff00:	20000c84 	.word	0x20000c84
 800ff04:	200000cc 	.word	0x200000cc
 800ff08:	20000c98 	.word	0x20000c98
 800ff0c:	20000cd4 	.word	0x20000cd4

0800ff10 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b086      	sub	sp, #24
 800ff14:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ff16:	230a      	movs	r3, #10
 800ff18:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ff1a:	463b      	mov	r3, r7
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f005 f9d5 	bl	80152cc <LoRaMacMlmeRequest>
 800ff22:	4603      	mov	r3, r0
 800ff24:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	4a06      	ldr	r2, [pc, #24]	; (800ff44 <LmHandlerDeviceTimeReq+0x34>)
 800ff2a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d101      	bne.n	800ff36 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ff32:	2300      	movs	r3, #0
 800ff34:	e001      	b.n	800ff3a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ff36:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	20000cd4 	.word	0x20000cd4

0800ff48 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	4603      	mov	r3, r0
 800ff50:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ff52:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bc80      	pop	{r7}
 800ff5e:	4770      	bx	lr

0800ff60 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b08c      	sub	sp, #48	; 0x30
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	4603      	mov	r3, r0
 800ff68:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800ff70:	f001 fe8e 	bl	8011c90 <LoRaMacIsBusy>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d002      	beq.n	800ff80 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ff7a:	f06f 0301 	mvn.w	r3, #1
 800ff7e:	e073      	b.n	8010068 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800ff80:	f7ff fed2 	bl	800fd28 <LmHandlerJoinStatus>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d002      	beq.n	800ff90 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ff8a:	f06f 0302 	mvn.w	r3, #2
 800ff8e:	e06b      	b.n	8010068 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ff90:	2300      	movs	r3, #0
 800ff92:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ff94:	f107 0308 	add.w	r3, r7, #8
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f004 fcb7 	bl	801490c <LoRaMacMibGetRequestConfirm>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	e05e      	b.n	8010068 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800ffaa:	7b3b      	ldrb	r3, [r7, #12]
 800ffac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800ffb0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d04d      	beq.n	8010056 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800ffba:	79fb      	ldrb	r3, [r7, #7]
 800ffbc:	2b02      	cmp	r3, #2
 800ffbe:	d028      	beq.n	8010012 <LmHandlerRequestClass+0xb2>
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	dc4a      	bgt.n	801005a <LmHandlerRequestClass+0xfa>
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d002      	beq.n	800ffce <LmHandlerRequestClass+0x6e>
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d01e      	beq.n	801000a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800ffcc:	e045      	b.n	801005a <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800ffce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d043      	beq.n	801005e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ffda:	f107 0308 	add.w	r3, r7, #8
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f004 fe1a 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d10b      	bne.n	8010002 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ffea:	4b21      	ldr	r3, [pc, #132]	; (8010070 <LmHandlerRequestClass+0x110>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d034      	beq.n	801005e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800fff4:	4b1e      	ldr	r3, [pc, #120]	; (8010070 <LmHandlerRequestClass+0x110>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fffa:	79fa      	ldrb	r2, [r7, #7]
 800fffc:	4610      	mov	r0, r2
 800fffe:	4798      	blx	r3
            break;
 8010000:	e02d      	b.n	801005e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8010002:	23ff      	movs	r3, #255	; 0xff
 8010004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010008:	e029      	b.n	801005e <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 801000a:	23ff      	movs	r3, #255	; 0xff
 801000c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010010:	e028      	b.n	8010064 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 8010012:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010016:	2b00      	cmp	r3, #0
 8010018:	d003      	beq.n	8010022 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 801001a:	23ff      	movs	r3, #255	; 0xff
 801001c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010020:	e01f      	b.n	8010062 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8010026:	f107 0308 	add.w	r3, r7, #8
 801002a:	4618      	mov	r0, r3
 801002c:	f004 fdf4 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
 8010030:	4603      	mov	r3, r0
 8010032:	2b00      	cmp	r3, #0
 8010034:	d10b      	bne.n	801004e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8010036:	4b0e      	ldr	r3, [pc, #56]	; (8010070 <LmHandlerRequestClass+0x110>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801003c:	2b00      	cmp	r3, #0
 801003e:	d010      	beq.n	8010062 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8010040:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <LmHandlerRequestClass+0x110>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010046:	79fa      	ldrb	r2, [r7, #7]
 8010048:	4610      	mov	r0, r2
 801004a:	4798      	blx	r3
            break;
 801004c:	e009      	b.n	8010062 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 801004e:	23ff      	movs	r3, #255	; 0xff
 8010050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010054:	e005      	b.n	8010062 <LmHandlerRequestClass+0x102>
        }
    }
 8010056:	bf00      	nop
 8010058:	e004      	b.n	8010064 <LmHandlerRequestClass+0x104>
            break;
 801005a:	bf00      	nop
 801005c:	e002      	b.n	8010064 <LmHandlerRequestClass+0x104>
            break;
 801005e:	bf00      	nop
 8010060:	e000      	b.n	8010064 <LmHandlerRequestClass+0x104>
            break;
 8010062:	bf00      	nop
    return errorStatus;
 8010064:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010068:	4618      	mov	r0, r3
 801006a:	3730      	adds	r7, #48	; 0x30
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	20000cac 	.word	0x20000cac

08010074 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b08c      	sub	sp, #48	; 0x30
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010082:	f04f 33ff 	mov.w	r3, #4294967295
 8010086:	e010      	b.n	80100aa <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010088:	2300      	movs	r3, #0
 801008a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 801008c:	f107 030c 	add.w	r3, r7, #12
 8010090:	4618      	mov	r0, r3
 8010092:	f004 fc3b 	bl	801490c <LoRaMacMibGetRequestConfirm>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801009c:	f04f 33ff 	mov.w	r3, #4294967295
 80100a0:	e003      	b.n	80100aa <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 80100a2:	7c3a      	ldrb	r2, [r7, #16]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3730      	adds	r7, #48	; 0x30
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
	...

080100b4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08c      	sub	sp, #48	; 0x30
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d102      	bne.n	80100c8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80100c2:	f04f 33ff 	mov.w	r3, #4294967295
 80100c6:	e016      	b.n	80100f6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 80100c8:	231f      	movs	r3, #31
 80100ca:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80100cc:	f107 030c 	add.w	r3, r7, #12
 80100d0:	4618      	mov	r0, r3
 80100d2:	f004 fc1b 	bl	801490c <LoRaMacMibGetRequestConfirm>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80100dc:	f04f 33ff 	mov.w	r3, #4294967295
 80100e0:	e009      	b.n	80100f6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 80100e2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f993 2000 	ldrsb.w	r2, [r3]
 80100f0:	4b03      	ldr	r3, [pc, #12]	; (8010100 <LmHandlerGetTxDatarate+0x4c>)
 80100f2:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3730      	adds	r7, #48	; 0x30
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	20000c98 	.word	0x20000c98

08010104 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08c      	sub	sp, #48	; 0x30
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 801010c:	2322      	movs	r3, #34	; 0x22
 801010e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010114:	f107 030c 	add.w	r3, r7, #12
 8010118:	4618      	mov	r0, r3
 801011a:	f004 fd7d 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d002      	beq.n	801012a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8010124:	f04f 33ff 	mov.w	r3, #4294967295
 8010128:	e000      	b.n	801012c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3730      	adds	r7, #48	; 0x30
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 801013c:	4b15      	ldr	r3, [pc, #84]	; (8010194 <McpsConfirm+0x60>)
 801013e:	2201      	movs	r2, #1
 8010140:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	785a      	ldrb	r2, [r3, #1]
 8010146:	4b13      	ldr	r3, [pc, #76]	; (8010194 <McpsConfirm+0x60>)
 8010148:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	789b      	ldrb	r3, [r3, #2]
 801014e:	b25a      	sxtb	r2, r3
 8010150:	4b10      	ldr	r3, [pc, #64]	; (8010194 <McpsConfirm+0x60>)
 8010152:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	4a0e      	ldr	r2, [pc, #56]	; (8010194 <McpsConfirm+0x60>)
 801015a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8010162:	4b0c      	ldr	r3, [pc, #48]	; (8010194 <McpsConfirm+0x60>)
 8010164:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	b2da      	uxtb	r2, r3
 801016c:	4b09      	ldr	r3, [pc, #36]	; (8010194 <McpsConfirm+0x60>)
 801016e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	791b      	ldrb	r3, [r3, #4]
 8010174:	461a      	mov	r2, r3
 8010176:	4b07      	ldr	r3, [pc, #28]	; (8010194 <McpsConfirm+0x60>)
 8010178:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 801017a:	4b07      	ldr	r3, [pc, #28]	; (8010198 <McpsConfirm+0x64>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010180:	4804      	ldr	r0, [pc, #16]	; (8010194 <McpsConfirm+0x60>)
 8010182:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8010184:	6879      	ldr	r1, [r7, #4]
 8010186:	2000      	movs	r0, #0
 8010188:	f000 f9de 	bl	8010548 <LmHandlerPackagesNotify>
}
 801018c:	bf00      	nop
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	200000cc 	.word	0x200000cc
 8010198:	20000cac 	.word	0x20000cac

0801019c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 80101a6:	2300      	movs	r3, #0
 80101a8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 80101aa:	4b31      	ldr	r3, [pc, #196]	; (8010270 <McpsIndication+0xd4>)
 80101ac:	2201      	movs	r2, #1
 80101ae:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	785a      	ldrb	r2, [r3, #1]
 80101b4:	4b2e      	ldr	r3, [pc, #184]	; (8010270 <McpsIndication+0xd4>)
 80101b6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80101b8:	4b2d      	ldr	r3, [pc, #180]	; (8010270 <McpsIndication+0xd4>)
 80101ba:	785b      	ldrb	r3, [r3, #1]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d153      	bne.n	8010268 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	b25a      	sxtb	r2, r3
 80101c6:	4b2a      	ldr	r3, [pc, #168]	; (8010270 <McpsIndication+0xd4>)
 80101c8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80101d0:	b25a      	sxtb	r2, r3
 80101d2:	4b27      	ldr	r3, [pc, #156]	; (8010270 <McpsIndication+0xd4>)
 80101d4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80101dc:	4b24      	ldr	r3, [pc, #144]	; (8010270 <McpsIndication+0xd4>)
 80101de:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	78da      	ldrb	r2, [r3, #3]
 80101e4:	4b22      	ldr	r3, [pc, #136]	; (8010270 <McpsIndication+0xd4>)
 80101e6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	691b      	ldr	r3, [r3, #16]
 80101ec:	4a20      	ldr	r2, [pc, #128]	; (8010270 <McpsIndication+0xd4>)
 80101ee:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	78db      	ldrb	r3, [r3, #3]
 80101f4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	7b1b      	ldrb	r3, [r3, #12]
 80101fa:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8010202:	4b1c      	ldr	r3, [pc, #112]	; (8010274 <McpsIndication+0xd8>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010208:	f107 0218 	add.w	r2, r7, #24
 801020c:	4918      	ldr	r1, [pc, #96]	; (8010270 <McpsIndication+0xd4>)
 801020e:	4610      	mov	r0, r2
 8010210:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8010212:	4b18      	ldr	r3, [pc, #96]	; (8010274 <McpsIndication+0xd8>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010218:	2b00      	cmp	r3, #0
 801021a:	d007      	beq.n	801022c <McpsIndication+0x90>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	7e1b      	ldrb	r3, [r3, #24]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d003      	beq.n	801022c <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8010224:	4b13      	ldr	r3, [pc, #76]	; (8010274 <McpsIndication+0xd8>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801022a:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 801022c:	6879      	ldr	r1, [r7, #4]
 801022e:	2001      	movs	r0, #1
 8010230:	f000 f98a 	bl	8010548 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8010234:	f107 0317 	add.w	r3, r7, #23
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff ff1b 	bl	8010074 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	795b      	ldrb	r3, [r3, #5]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d111      	bne.n	801026a <McpsIndication+0xce>
 8010246:	7dfb      	ldrb	r3, [r7, #23]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10e      	bne.n	801026a <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 801024c:	2300      	movs	r3, #0
 801024e:	733b      	strb	r3, [r7, #12]
 8010250:	2300      	movs	r3, #0
 8010252:	737b      	strb	r3, [r7, #13]
 8010254:	2300      	movs	r3, #0
 8010256:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 8010258:	f107 030c 	add.w	r3, r7, #12
 801025c:	2201      	movs	r2, #1
 801025e:	2100      	movs	r1, #0
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fd7d 	bl	800fd60 <LmHandlerSend>
 8010266:	e000      	b.n	801026a <McpsIndication+0xce>
        return;
 8010268:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 801026a:	3720      	adds	r7, #32
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	200000e8 	.word	0x200000e8
 8010274:	20000cac 	.word	0x20000cac

08010278 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b08c      	sub	sp, #48	; 0x30
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8010280:	4b3d      	ldr	r3, [pc, #244]	; (8010378 <MlmeConfirm+0x100>)
 8010282:	2200      	movs	r2, #0
 8010284:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	785a      	ldrb	r2, [r3, #1]
 801028a:	4b3b      	ldr	r3, [pc, #236]	; (8010378 <MlmeConfirm+0x100>)
 801028c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 801028e:	4b3b      	ldr	r3, [pc, #236]	; (801037c <MlmeConfirm+0x104>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010294:	4838      	ldr	r0, [pc, #224]	; (8010378 <MlmeConfirm+0x100>)
 8010296:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	2002      	movs	r0, #2
 801029c:	f000 f954 	bl	8010548 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	3b01      	subs	r3, #1
 80102a6:	2b0c      	cmp	r3, #12
 80102a8:	d85e      	bhi.n	8010368 <MlmeConfirm+0xf0>
 80102aa:	a201      	add	r2, pc, #4	; (adr r2, 80102b0 <MlmeConfirm+0x38>)
 80102ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102b0:	080102e5 	.word	0x080102e5
 80102b4:	08010369 	.word	0x08010369
 80102b8:	08010369 	.word	0x08010369
 80102bc:	08010337 	.word	0x08010337
 80102c0:	08010369 	.word	0x08010369
 80102c4:	08010369 	.word	0x08010369
 80102c8:	08010369 	.word	0x08010369
 80102cc:	08010369 	.word	0x08010369
 80102d0:	08010369 	.word	0x08010369
 80102d4:	08010369 	.word	0x08010369
 80102d8:	08010369 	.word	0x08010369
 80102dc:	0801034f 	.word	0x0801034f
 80102e0:	08010369 	.word	0x08010369
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 80102e4:	2306      	movs	r3, #6
 80102e6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80102e8:	f107 030c 	add.w	r3, r7, #12
 80102ec:	4618      	mov	r0, r3
 80102ee:	f004 fb0d 	bl	801490c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	4a22      	ldr	r2, [pc, #136]	; (8010380 <MlmeConfirm+0x108>)
 80102f6:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80102f8:	4822      	ldr	r0, [pc, #136]	; (8010384 <MlmeConfirm+0x10c>)
 80102fa:	f7ff fedb 	bl	80100b4 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	785b      	ldrb	r3, [r3, #1]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d108      	bne.n	8010318 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010306:	4b20      	ldr	r3, [pc, #128]	; (8010388 <MlmeConfirm+0x110>)
 8010308:	2200      	movs	r2, #0
 801030a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 801030c:	4b1f      	ldr	r3, [pc, #124]	; (801038c <MlmeConfirm+0x114>)
 801030e:	785b      	ldrb	r3, [r3, #1]
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff fe25 	bl	800ff60 <LmHandlerRequestClass>
 8010316:	e002      	b.n	801031e <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8010318:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <MlmeConfirm+0x110>)
 801031a:	22ff      	movs	r2, #255	; 0xff
 801031c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 801031e:	4b17      	ldr	r3, [pc, #92]	; (801037c <MlmeConfirm+0x104>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	4818      	ldr	r0, [pc, #96]	; (8010388 <MlmeConfirm+0x110>)
 8010326:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	785b      	ldrb	r3, [r3, #1]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d11d      	bne.n	801036c <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 8010330:	f7ff f89e 	bl	800f470 <SecureElementPrintSessionKeys>
            }
        }
        break;
 8010334:	e01a      	b.n	801036c <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 8010336:	4b16      	ldr	r3, [pc, #88]	; (8010390 <MlmeConfirm+0x118>)
 8010338:	2201      	movs	r2, #1
 801033a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	7a1a      	ldrb	r2, [r3, #8]
 8010340:	4b13      	ldr	r3, [pc, #76]	; (8010390 <MlmeConfirm+0x118>)
 8010342:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	7a5a      	ldrb	r2, [r3, #9]
 8010348:	4b11      	ldr	r3, [pc, #68]	; (8010390 <MlmeConfirm+0x118>)
 801034a:	74da      	strb	r2, [r3, #19]
        }
        break;
 801034c:	e00f      	b.n	801036e <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	785b      	ldrb	r3, [r3, #1]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d105      	bne.n	8010362 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010356:	4b0d      	ldr	r3, [pc, #52]	; (801038c <MlmeConfirm+0x114>)
 8010358:	7b1b      	ldrb	r3, [r3, #12]
 801035a:	4618      	mov	r0, r3
 801035c:	f7ff fdf4 	bl	800ff48 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 8010360:	e005      	b.n	801036e <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 8010362:	f7ff fdd5 	bl	800ff10 <LmHandlerDeviceTimeReq>
        break;
 8010366:	e002      	b.n	801036e <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 8010368:	bf00      	nop
 801036a:	e000      	b.n	801036e <MlmeConfirm+0xf6>
        break;
 801036c:	bf00      	nop
    }
}
 801036e:	bf00      	nop
 8010370:	3730      	adds	r7, #48	; 0x30
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	200000cc 	.word	0x200000cc
 801037c:	20000cac 	.word	0x20000cac
 8010380:	200000a0 	.word	0x200000a0
 8010384:	200000c8 	.word	0x200000c8
 8010388:	200000c4 	.word	0x200000c4
 801038c:	20000c98 	.word	0x20000c98
 8010390:	200000e8 	.word	0x200000e8

08010394 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801039e:	4b2f      	ldr	r3, [pc, #188]	; (801045c <MlmeIndication+0xc8>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	785a      	ldrb	r2, [r3, #1]
 80103a8:	4b2c      	ldr	r3, [pc, #176]	; (801045c <MlmeIndication+0xc8>)
 80103aa:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	789b      	ldrb	r3, [r3, #2]
 80103b0:	b25a      	sxtb	r2, r3
 80103b2:	4b2a      	ldr	r3, [pc, #168]	; (801045c <MlmeIndication+0xc8>)
 80103b4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103bc:	b25a      	sxtb	r2, r3
 80103be:	4b27      	ldr	r3, [pc, #156]	; (801045c <MlmeIndication+0xc8>)
 80103c0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80103c8:	4b24      	ldr	r3, [pc, #144]	; (801045c <MlmeIndication+0xc8>)
 80103ca:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	78da      	ldrb	r2, [r3, #3]
 80103d0:	4b22      	ldr	r3, [pc, #136]	; (801045c <MlmeIndication+0xc8>)
 80103d2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	4a20      	ldr	r2, [pc, #128]	; (801045c <MlmeIndication+0xc8>)
 80103da:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	2b0b      	cmp	r3, #11
 80103e2:	d009      	beq.n	80103f8 <MlmeIndication+0x64>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	2b0f      	cmp	r3, #15
 80103ea:	d005      	beq.n	80103f8 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80103ec:	4b1c      	ldr	r3, [pc, #112]	; (8010460 <MlmeIndication+0xcc>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f2:	491a      	ldr	r1, [pc, #104]	; (801045c <MlmeIndication+0xc8>)
 80103f4:	2000      	movs	r0, #0
 80103f6:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80103f8:	6879      	ldr	r1, [r7, #4]
 80103fa:	2003      	movs	r0, #3
 80103fc:	f000 f8a4 	bl	8010548 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	2b0f      	cmp	r3, #15
 8010406:	d01e      	beq.n	8010446 <MlmeIndication+0xb2>
 8010408:	2b0f      	cmp	r3, #15
 801040a:	dc1e      	bgt.n	801044a <MlmeIndication+0xb6>
 801040c:	2b07      	cmp	r3, #7
 801040e:	d002      	beq.n	8010416 <MlmeIndication+0x82>
 8010410:	2b0b      	cmp	r3, #11
 8010412:	d01c      	beq.n	801044e <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 8010414:	e019      	b.n	801044a <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 8010416:	2300      	movs	r3, #0
 8010418:	723b      	strb	r3, [r7, #8]
 801041a:	2300      	movs	r3, #0
 801041c:	727b      	strb	r3, [r7, #9]
 801041e:	2300      	movs	r3, #0
 8010420:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8010422:	4b10      	ldr	r3, [pc, #64]	; (8010464 <MlmeIndication+0xd0>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	4798      	blx	r3
 801042a:	4603      	mov	r3, r0
 801042c:	f083 0301 	eor.w	r3, r3, #1
 8010430:	b2db      	uxtb	r3, r3
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00d      	beq.n	8010452 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8010436:	f107 0308 	add.w	r3, r7, #8
 801043a:	2201      	movs	r2, #1
 801043c:	2100      	movs	r1, #0
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fc8e 	bl	800fd60 <LmHandlerSend>
        break;
 8010444:	e005      	b.n	8010452 <MlmeIndication+0xbe>
        break;
 8010446:	bf00      	nop
 8010448:	e004      	b.n	8010454 <MlmeIndication+0xc0>
        break;
 801044a:	bf00      	nop
 801044c:	e002      	b.n	8010454 <MlmeIndication+0xc0>
        break;
 801044e:	bf00      	nop
 8010450:	e000      	b.n	8010454 <MlmeIndication+0xc0>
        break;
 8010452:	bf00      	nop
    }
}
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	200000e8 	.word	0x200000e8
 8010460:	20000cac 	.word	0x20000cac
 8010464:	20000c84 	.word	0x20000c84

08010468 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b084      	sub	sp, #16
 801046c:	af00      	add	r7, sp, #0
 801046e:	4603      	mov	r3, r0
 8010470:	6039      	str	r1, [r7, #0]
 8010472:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8010474:	2300      	movs	r3, #0
 8010476:	60fb      	str	r3, [r7, #12]
    switch( id )
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d103      	bne.n	8010486 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 801047e:	f000 f9db 	bl	8010838 <LmhpCompliancePackageFactory>
 8010482:	60f8      	str	r0, [r7, #12]
            break;
 8010484:	e000      	b.n	8010488 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 8010486:	bf00      	nop
        }
    }
    if( package != NULL )
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d02b      	beq.n	80104e6 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	4918      	ldr	r1, [pc, #96]	; (80104f4 <LmHandlerPackageRegister+0x8c>)
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010498:	79fb      	ldrb	r3, [r7, #7]
 801049a:	4a16      	ldr	r2, [pc, #88]	; (80104f4 <LmHandlerPackageRegister+0x8c>)
 801049c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a0:	4a15      	ldr	r2, [pc, #84]	; (80104f8 <LmHandlerPackageRegister+0x90>)
 80104a2:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80104a4:	79fb      	ldrb	r3, [r7, #7]
 80104a6:	4a13      	ldr	r2, [pc, #76]	; (80104f4 <LmHandlerPackageRegister+0x8c>)
 80104a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104ac:	4a13      	ldr	r2, [pc, #76]	; (80104fc <LmHandlerPackageRegister+0x94>)
 80104ae:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80104b0:	79fb      	ldrb	r3, [r7, #7]
 80104b2:	4a10      	ldr	r2, [pc, #64]	; (80104f4 <LmHandlerPackageRegister+0x8c>)
 80104b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b8:	4a11      	ldr	r2, [pc, #68]	; (8010500 <LmHandlerPackageRegister+0x98>)
 80104ba:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80104bc:	4b11      	ldr	r3, [pc, #68]	; (8010504 <LmHandlerPackageRegister+0x9c>)
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	490c      	ldr	r1, [pc, #48]	; (80104f4 <LmHandlerPackageRegister+0x8c>)
 80104c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80104c8:	6992      	ldr	r2, [r2, #24]
 80104ca:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80104cc:	79fb      	ldrb	r3, [r7, #7]
 80104ce:	4a09      	ldr	r2, [pc, #36]	; (80104f4 <LmHandlerPackageRegister+0x8c>)
 80104d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4a0c      	ldr	r2, [pc, #48]	; (8010508 <LmHandlerPackageRegister+0xa0>)
 80104d8:	6851      	ldr	r1, [r2, #4]
 80104da:	4a0b      	ldr	r2, [pc, #44]	; (8010508 <LmHandlerPackageRegister+0xa0>)
 80104dc:	7852      	ldrb	r2, [r2, #1]
 80104de:	6838      	ldr	r0, [r7, #0]
 80104e0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80104e2:	2300      	movs	r3, #0
 80104e4:	e001      	b.n	80104ea <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80104e6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	20000c84 	.word	0x20000c84
 80104f8:	0800fc29 	.word	0x0800fc29
 80104fc:	0800fd61 	.word	0x0800fd61
 8010500:	0800ff11 	.word	0x0800ff11
 8010504:	20000cac 	.word	0x20000cac
 8010508:	200000fc 	.word	0x200000fc

0801050c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	4603      	mov	r3, r0
 8010514:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8010516:	79fb      	ldrb	r3, [r7, #7]
 8010518:	2b04      	cmp	r3, #4
 801051a:	d80e      	bhi.n	801053a <LmHandlerPackageIsInitialized+0x2e>
 801051c:	79fb      	ldrb	r3, [r7, #7]
 801051e:	4a09      	ldr	r2, [pc, #36]	; (8010544 <LmHandlerPackageIsInitialized+0x38>)
 8010520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d007      	beq.n	801053a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	4a05      	ldr	r2, [pc, #20]	; (8010544 <LmHandlerPackageIsInitialized+0x38>)
 801052e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	4798      	blx	r3
 8010536:	4603      	mov	r3, r0
 8010538:	e000      	b.n	801053c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 801053a:	2300      	movs	r3, #0
    }
}
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	20000c84 	.word	0x20000c84

08010548 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	6039      	str	r1, [r7, #0]
 8010552:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010554:	2300      	movs	r3, #0
 8010556:	73fb      	strb	r3, [r7, #15]
 8010558:	e07e      	b.n	8010658 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 801055a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801055e:	4a43      	ldr	r2, [pc, #268]	; (801066c <LmHandlerPackagesNotify+0x124>)
 8010560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d066      	beq.n	8010636 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 8010568:	79fb      	ldrb	r3, [r7, #7]
 801056a:	2b03      	cmp	r3, #3
 801056c:	d865      	bhi.n	801063a <LmHandlerPackagesNotify+0xf2>
 801056e:	a201      	add	r2, pc, #4	; (adr r2, 8010574 <LmHandlerPackagesNotify+0x2c>)
 8010570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010574:	08010585 	.word	0x08010585
 8010578:	080105a7 	.word	0x080105a7
 801057c:	080105f3 	.word	0x080105f3
 8010580:	08010615 	.word	0x08010615
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8010584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010588:	4a38      	ldr	r2, [pc, #224]	; (801066c <LmHandlerPackagesNotify+0x124>)
 801058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801058e:	699b      	ldr	r3, [r3, #24]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d054      	beq.n	801063e <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8010594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010598:	4a34      	ldr	r2, [pc, #208]	; (801066c <LmHandlerPackagesNotify+0x124>)
 801059a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801059e:	699b      	ldr	r3, [r3, #24]
 80105a0:	6838      	ldr	r0, [r7, #0]
 80105a2:	4798      	blx	r3
                    }
                    break;
 80105a4:	e04b      	b.n	801063e <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80105a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105aa:	4a30      	ldr	r2, [pc, #192]	; (801066c <LmHandlerPackagesNotify+0x124>)
 80105ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105b0:	69db      	ldr	r3, [r3, #28]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d045      	beq.n	8010642 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80105b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ba:	4a2c      	ldr	r2, [pc, #176]	; (801066c <LmHandlerPackagesNotify+0x124>)
 80105bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105c0:	781a      	ldrb	r2, [r3, #0]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d00a      	beq.n	80105e0 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80105ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d137      	bne.n	8010642 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 80105d2:	4b26      	ldr	r3, [pc, #152]	; (801066c <LmHandlerPackagesNotify+0x124>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	4798      	blx	r3
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d030      	beq.n	8010642 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 80105e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105e4:	4a21      	ldr	r2, [pc, #132]	; (801066c <LmHandlerPackagesNotify+0x124>)
 80105e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105ea:	69db      	ldr	r3, [r3, #28]
 80105ec:	6838      	ldr	r0, [r7, #0]
 80105ee:	4798      	blx	r3
                    }
                    break;
 80105f0:	e027      	b.n	8010642 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80105f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105f6:	4a1d      	ldr	r2, [pc, #116]	; (801066c <LmHandlerPackagesNotify+0x124>)
 80105f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105fc:	6a1b      	ldr	r3, [r3, #32]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d021      	beq.n	8010646 <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8010602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010606:	4a19      	ldr	r2, [pc, #100]	; (801066c <LmHandlerPackagesNotify+0x124>)
 8010608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	6838      	ldr	r0, [r7, #0]
 8010610:	4798      	blx	r3
                    }
                    break;
 8010612:	e018      	b.n	8010646 <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8010614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010618:	4a14      	ldr	r2, [pc, #80]	; (801066c <LmHandlerPackagesNotify+0x124>)
 801061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010620:	2b00      	cmp	r3, #0
 8010622:	d012      	beq.n	801064a <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8010624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010628:	4a10      	ldr	r2, [pc, #64]	; (801066c <LmHandlerPackagesNotify+0x124>)
 801062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010630:	6838      	ldr	r0, [r7, #0]
 8010632:	4798      	blx	r3
                    }
                    break;
 8010634:	e009      	b.n	801064a <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 8010636:	bf00      	nop
 8010638:	e008      	b.n	801064c <LmHandlerPackagesNotify+0x104>
                    break;
 801063a:	bf00      	nop
 801063c:	e006      	b.n	801064c <LmHandlerPackagesNotify+0x104>
                    break;
 801063e:	bf00      	nop
 8010640:	e004      	b.n	801064c <LmHandlerPackagesNotify+0x104>
                    break;
 8010642:	bf00      	nop
 8010644:	e002      	b.n	801064c <LmHandlerPackagesNotify+0x104>
                    break;
 8010646:	bf00      	nop
 8010648:	e000      	b.n	801064c <LmHandlerPackagesNotify+0x104>
                    break;
 801064a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801064c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010650:	b2db      	uxtb	r3, r3
 8010652:	3301      	adds	r3, #1
 8010654:	b2db      	uxtb	r3, r3
 8010656:	73fb      	strb	r3, [r7, #15]
 8010658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801065c:	2b04      	cmp	r3, #4
 801065e:	f77f af7c 	ble.w	801055a <LmHandlerPackagesNotify+0x12>
    }
}
 8010662:	bf00      	nop
 8010664:	bf00      	nop
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	20000c84 	.word	0x20000c84

08010670 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010676:	2300      	movs	r3, #0
 8010678:	71fb      	strb	r3, [r7, #7]
 801067a:	e022      	b.n	80106c2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 801067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010680:	4a14      	ldr	r2, [pc, #80]	; (80106d4 <LmHandlerPackagesProcess+0x64>)
 8010682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d015      	beq.n	80106b6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 801068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801068e:	4a11      	ldr	r2, [pc, #68]	; (80106d4 <LmHandlerPackagesProcess+0x64>)
 8010690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010694:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00d      	beq.n	80106b6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	4618      	mov	r0, r3
 801069e:	f7ff ff35 	bl	801050c <LmHandlerPackageIsInitialized>
 80106a2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d006      	beq.n	80106b6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 80106a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106ac:	4a09      	ldr	r2, [pc, #36]	; (80106d4 <LmHandlerPackagesProcess+0x64>)
 80106ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80106b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	3301      	adds	r3, #1
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	71fb      	strb	r3, [r7, #7]
 80106c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106c6:	2b04      	cmp	r3, #4
 80106c8:	ddd8      	ble.n	801067c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80106ca:	bf00      	nop
 80106cc:	bf00      	nop
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	20000c84 	.word	0x20000c84

080106d8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	4603      	mov	r3, r0
 80106e0:	6039      	str	r1, [r7, #0]
 80106e2:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d102      	bne.n	80106f0 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 80106ea:	f04f 33ff 	mov.w	r3, #4294967295
 80106ee:	e00e      	b.n	801070e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 80106f0:	79fb      	ldrb	r3, [r7, #7]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d002      	beq.n	80106fc <LmHandlerGetVersion+0x24>
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d004      	beq.n	8010704 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 80106fa:	e007      	b.n	801070c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	4a06      	ldr	r2, [pc, #24]	; (8010718 <LmHandlerGetVersion+0x40>)
 8010700:	601a      	str	r2, [r3, #0]
            break;
 8010702:	e003      	b.n	801070c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	4a05      	ldr	r2, [pc, #20]	; (801071c <LmHandlerGetVersion+0x44>)
 8010708:	601a      	str	r2, [r3, #0]
            break;
 801070a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 801070c:	2300      	movs	r3, #0
}
 801070e:	4618      	mov	r0, r3
 8010710:	370c      	adds	r7, #12
 8010712:	46bd      	mov	sp, r7
 8010714:	bc80      	pop	{r7}
 8010716:	4770      	bx	lr
 8010718:	01000300 	.word	0x01000300
 801071c:	01010003 	.word	0x01010003

08010720 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8010724:	f005 f826 	bl	8015774 <LoRaMacDeInitialization>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d101      	bne.n	8010732 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801072e:	2300      	movs	r3, #0
 8010730:	e001      	b.n	8010736 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010732:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010736:	4618      	mov	r0, r3
 8010738:	bd80      	pop	{r7, pc}

0801073a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 801073e:	f004 f825 	bl	801478c <LoRaMacHalt>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d101      	bne.n	801074c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010748:	2300      	movs	r3, #0
 801074a:	e001      	b.n	8010750 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801074c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010750:	4618      	mov	r0, r3
 8010752:	bd80      	pop	{r7, pc}

08010754 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b08e      	sub	sp, #56	; 0x38
 8010758:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 801075a:	2300      	movs	r3, #0
 801075c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8010764:	f7ff ffe9 	bl	801073a <LmHandlerHalt>
 8010768:	4603      	mov	r3, r0
 801076a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 801076e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010772:	2b00      	cmp	r3, #0
 8010774:	d12f      	bne.n	80107d6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 8010776:	f000 f84f 	bl	8010818 <NvmDataMgmtStoreBegin>
 801077a:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 801077c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077e:	f113 0f02 	cmn.w	r3, #2
 8010782:	d103      	bne.n	801078c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8010784:	23f8      	movs	r3, #248	; 0xf8
 8010786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801078a:	e01c      	b.n	80107c6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 801078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <LmHandlerNvmDataStore+0x48>
 8010792:	4b1b      	ldr	r3, [pc, #108]	; (8010800 <LmHandlerNvmDataStore+0xac>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	695b      	ldr	r3, [r3, #20]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d103      	bne.n	80107a4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 801079c:	23ff      	movs	r3, #255	; 0xff
 801079e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107a2:	e010      	b.n	80107c6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 80107a4:	2326      	movs	r3, #38	; 0x26
 80107a6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 80107a8:	1d3b      	adds	r3, r7, #4
 80107aa:	4618      	mov	r0, r3
 80107ac:	f004 f8ae 	bl	801490c <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 80107b4:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 80107b8:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 80107ba:	4b11      	ldr	r3, [pc, #68]	; (8010800 <LmHandlerNvmDataStore+0xac>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	695b      	ldr	r3, [r3, #20]
 80107c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107c4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80107c6:	f000 f82f 	bl	8010828 <NvmDataMgmtStoreEnd>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80107d0:	23ff      	movs	r3, #255	; 0xff
 80107d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 80107d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d109      	bne.n	80107f2 <LmHandlerNvmDataStore+0x9e>
 80107de:	4b08      	ldr	r3, [pc, #32]	; (8010800 <LmHandlerNvmDataStore+0xac>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	69db      	ldr	r3, [r3, #28]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d004      	beq.n	80107f2 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80107e8:	4b05      	ldr	r3, [pc, #20]	; (8010800 <LmHandlerNvmDataStore+0xac>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	2001      	movs	r0, #1
 80107f0:	4798      	blx	r3
    }

    return lmhStatus;
 80107f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3738      	adds	r7, #56	; 0x38
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20000cac 	.word	0x20000cac

08010804 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	4603      	mov	r3, r0
 801080c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801080e:	bf00      	nop
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	bc80      	pop	{r7}
 8010816:	4770      	bx	lr

08010818 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010818:	b480      	push	{r7}
 801081a:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 801081c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010820:	4618      	mov	r0, r3
 8010822:	46bd      	mov	sp, r7
 8010824:	bc80      	pop	{r7}
 8010826:	4770      	bx	lr

08010828 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010828:	b480      	push	{r7}
 801082a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 801082c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010830:	4618      	mov	r0, r3
 8010832:	46bd      	mov	sp, r7
 8010834:	bc80      	pop	{r7}
 8010836:	4770      	bx	lr

08010838 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010838:	b480      	push	{r7}
 801083a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <LmhpCompliancePackageFactory+0x10>)
}
 801083e:	4618      	mov	r0, r3
 8010840:	46bd      	mov	sp, r7
 8010842:	bc80      	pop	{r7}
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	20000104 	.word	0x20000104

0801084c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	4613      	mov	r3, r2
 8010858:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00f      	beq.n	8010880 <LmhpComplianceInit+0x34>
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00c      	beq.n	8010880 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8010866:	4a0c      	ldr	r2, [pc, #48]	; (8010898 <LmhpComplianceInit+0x4c>)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 801086c:	4a0b      	ldr	r2, [pc, #44]	; (801089c <LmhpComplianceInit+0x50>)
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010872:	4a0a      	ldr	r2, [pc, #40]	; (801089c <LmhpComplianceInit+0x50>)
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010878:	4b08      	ldr	r3, [pc, #32]	; (801089c <LmhpComplianceInit+0x50>)
 801087a:	2201      	movs	r2, #1
 801087c:	701a      	strb	r2, [r3, #0]
 801087e:	e006      	b.n	801088e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010880:	4b05      	ldr	r3, [pc, #20]	; (8010898 <LmhpComplianceInit+0x4c>)
 8010882:	2200      	movs	r2, #0
 8010884:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010886:	4b05      	ldr	r3, [pc, #20]	; (801089c <LmhpComplianceInit+0x50>)
 8010888:	2200      	movs	r2, #0
 801088a:	701a      	strb	r2, [r3, #0]
    }
}
 801088c:	bf00      	nop
 801088e:	bf00      	nop
 8010890:	3714      	adds	r7, #20
 8010892:	46bd      	mov	sp, r7
 8010894:	bc80      	pop	{r7}
 8010896:	4770      	bx	lr
 8010898:	20000df8 	.word	0x20000df8
 801089c:	20000de4 	.word	0x20000de4

080108a0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80108a0:	b480      	push	{r7}
 80108a2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80108a4:	4b02      	ldr	r3, [pc, #8]	; (80108b0 <LmhpComplianceIsInitialized+0x10>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bc80      	pop	{r7}
 80108ae:	4770      	bx	lr
 80108b0:	20000de4 	.word	0x20000de4

080108b4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80108b4:	b480      	push	{r7}
 80108b6:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80108b8:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <LmhpComplianceIsRunning+0x24>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	f083 0301 	eor.w	r3, r3, #1
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80108c6:	2300      	movs	r3, #0
 80108c8:	e001      	b.n	80108ce <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80108ca:	4b03      	ldr	r3, [pc, #12]	; (80108d8 <LmhpComplianceIsRunning+0x24>)
 80108cc:	785b      	ldrb	r3, [r3, #1]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bc80      	pop	{r7}
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	20000de4 	.word	0x20000de4

080108dc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 80108e4:	4b0f      	ldr	r3, [pc, #60]	; (8010924 <LmhpComplianceOnMcpsConfirm+0x48>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f083 0301 	eor.w	r3, r3, #1
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d112      	bne.n	8010918 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80108f2:	4b0c      	ldr	r3, [pc, #48]	; (8010924 <LmhpComplianceOnMcpsConfirm+0x48>)
 80108f4:	785b      	ldrb	r3, [r3, #1]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d00f      	beq.n	801091a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d10b      	bne.n	801091a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010906:	2b00      	cmp	r3, #0
 8010908:	d007      	beq.n	801091a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801090a:	4b06      	ldr	r3, [pc, #24]	; (8010924 <LmhpComplianceOnMcpsConfirm+0x48>)
 801090c:	899b      	ldrh	r3, [r3, #12]
 801090e:	3301      	adds	r3, #1
 8010910:	b29a      	uxth	r2, r3
 8010912:	4b04      	ldr	r3, [pc, #16]	; (8010924 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010914:	819a      	strh	r2, [r3, #12]
 8010916:	e000      	b.n	801091a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010918:	bf00      	nop
    }
}
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	bc80      	pop	{r7}
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	20000de4 	.word	0x20000de4

08010928 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010930:	4b12      	ldr	r3, [pc, #72]	; (801097c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	f083 0301 	eor.w	r3, r3, #1
 8010938:	b2db      	uxtb	r3, r3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d116      	bne.n	801096c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 801093e:	4b0f      	ldr	r3, [pc, #60]	; (801097c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010940:	785b      	ldrb	r3, [r3, #1]
 8010942:	f083 0301 	eor.w	r3, r3, #1
 8010946:	b2db      	uxtb	r3, r3
 8010948:	2b00      	cmp	r3, #0
 801094a:	d111      	bne.n	8010970 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b04      	cmp	r3, #4
 8010952:	d10e      	bne.n	8010972 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010954:	4b09      	ldr	r3, [pc, #36]	; (801097c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010956:	2201      	movs	r2, #1
 8010958:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7a1a      	ldrb	r2, [r3, #8]
 801095e:	4b07      	ldr	r3, [pc, #28]	; (801097c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010960:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	7a5a      	ldrb	r2, [r3, #9]
 8010966:	4b05      	ldr	r3, [pc, #20]	; (801097c <LmhpComplianceOnMlmeConfirm+0x54>)
 8010968:	741a      	strb	r2, [r3, #16]
 801096a:	e002      	b.n	8010972 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 801096c:	bf00      	nop
 801096e:	e000      	b.n	8010972 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010970:	bf00      	nop
    }
}
 8010972:	370c      	adds	r7, #12
 8010974:	46bd      	mov	sp, r7
 8010976:	bc80      	pop	{r7}
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	20000de4 	.word	0x20000de4

08010980 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010986:	4b33      	ldr	r3, [pc, #204]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	f083 0301 	eor.w	r3, r3, #1
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010994:	f04f 33ff 	mov.w	r3, #4294967295
 8010998:	e057      	b.n	8010a4a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 801099a:	4b2e      	ldr	r3, [pc, #184]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 801099c:	785b      	ldrb	r3, [r3, #1]
 801099e:	f083 0301 	eor.w	r3, r3, #1
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d001      	beq.n	80109ac <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80109a8:	2300      	movs	r3, #0
 80109aa:	e04e      	b.n	8010a4a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 80109ac:	4b29      	ldr	r3, [pc, #164]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109ae:	7b9b      	ldrb	r3, [r3, #14]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d019      	beq.n	80109e8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80109b4:	4b27      	ldr	r3, [pc, #156]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80109ba:	4b26      	ldr	r3, [pc, #152]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109bc:	2203      	movs	r2, #3
 80109be:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80109c0:	4b24      	ldr	r3, [pc, #144]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	2205      	movs	r2, #5
 80109c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80109c8:	4b22      	ldr	r3, [pc, #136]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	3301      	adds	r3, #1
 80109ce:	4a21      	ldr	r2, [pc, #132]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109d0:	7bd2      	ldrb	r2, [r2, #15]
 80109d2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80109d4:	4b1f      	ldr	r3, [pc, #124]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	3302      	adds	r3, #2
 80109da:	4a1e      	ldr	r2, [pc, #120]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109dc:	7c12      	ldrb	r2, [r2, #16]
 80109de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80109e0:	4b1c      	ldr	r3, [pc, #112]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109e2:	2201      	movs	r2, #1
 80109e4:	709a      	strb	r2, [r3, #2]
 80109e6:	e01c      	b.n	8010a22 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80109e8:	4b1a      	ldr	r3, [pc, #104]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109ea:	789b      	ldrb	r3, [r3, #2]
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d005      	beq.n	80109fc <LmhpComplianceTxProcess+0x7c>
 80109f0:	2b04      	cmp	r3, #4
 80109f2:	d116      	bne.n	8010a22 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 80109f4:	4b17      	ldr	r3, [pc, #92]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109f6:	2201      	movs	r2, #1
 80109f8:	709a      	strb	r2, [r3, #2]
            break;
 80109fa:	e012      	b.n	8010a22 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 80109fc:	4b15      	ldr	r3, [pc, #84]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 80109fe:	2202      	movs	r2, #2
 8010a00:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010a02:	4b14      	ldr	r3, [pc, #80]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a04:	899b      	ldrh	r3, [r3, #12]
 8010a06:	0a1b      	lsrs	r3, r3, #8
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	4b12      	ldr	r3, [pc, #72]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	b2d2      	uxtb	r2, r2
 8010a10:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010a12:	4b10      	ldr	r3, [pc, #64]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a14:	899a      	ldrh	r2, [r3, #12]
 8010a16:	4b0f      	ldr	r3, [pc, #60]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a18:	689b      	ldr	r3, [r3, #8]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	b2d2      	uxtb	r2, r2
 8010a1e:	701a      	strb	r2, [r3, #0]
            break;
 8010a20:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010a22:	23e0      	movs	r3, #224	; 0xe0
 8010a24:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8010a26:	4b0b      	ldr	r3, [pc, #44]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a28:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8010a2a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010a2c:	4b09      	ldr	r3, [pc, #36]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a2e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8010a30:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8010a32:	4809      	ldr	r0, [pc, #36]	; (8010a58 <LmhpComplianceTxProcess+0xd8>)
 8010a34:	f00d fb32 	bl	801e09c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8010a38:	4b08      	ldr	r3, [pc, #32]	; (8010a5c <LmhpComplianceTxProcess+0xdc>)
 8010a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a3c:	4a05      	ldr	r2, [pc, #20]	; (8010a54 <LmhpComplianceTxProcess+0xd4>)
 8010a3e:	78d2      	ldrb	r2, [r2, #3]
 8010a40:	4611      	mov	r1, r2
 8010a42:	4638      	mov	r0, r7
 8010a44:	2201      	movs	r2, #1
 8010a46:	4798      	blx	r3
 8010a48:	4603      	mov	r3, r0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	20000de4 	.word	0x20000de4
 8010a58:	20000dcc 	.word	0x20000dcc
 8010a5c:	20000104 	.word	0x20000104

08010a60 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b0a2      	sub	sp, #136	; 0x88
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010a68:	4ba3      	ldr	r3, [pc, #652]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	f083 0301 	eor.w	r3, r3, #1
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f040 81c2 	bne.w	8010dfc <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	7b5b      	ldrb	r3, [r3, #13]
 8010a7c:	f083 0301 	eor.w	r3, r3, #1
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	f040 81bc 	bne.w	8010e00 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010a88:	4b9b      	ldr	r3, [pc, #620]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010a8a:	785b      	ldrb	r3, [r3, #1]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00c      	beq.n	8010aaa <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	7b9b      	ldrb	r3, [r3, #14]
 8010a94:	f083 0301 	eor.w	r3, r3, #1
 8010a98:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d005      	beq.n	8010aaa <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010a9e:	4b96      	ldr	r3, [pc, #600]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010aa0:	899b      	ldrh	r3, [r3, #12]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	4b94      	ldr	r3, [pc, #592]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010aa8:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	78db      	ldrb	r3, [r3, #3]
 8010aae:	2be0      	cmp	r3, #224	; 0xe0
 8010ab0:	f040 81a8 	bne.w	8010e04 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010ab4:	4b90      	ldr	r3, [pc, #576]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010ab6:	785b      	ldrb	r3, [r3, #1]
 8010ab8:	f083 0301 	eor.w	r3, r3, #1
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d060      	beq.n	8010b84 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	7b1b      	ldrb	r3, [r3, #12]
 8010ac6:	2b04      	cmp	r3, #4
 8010ac8:	f040 81a1 	bne.w	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	689b      	ldr	r3, [r3, #8]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	f040 819b 	bne.w	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	3301      	adds	r3, #1
 8010ade:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	f040 8194 	bne.w	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	3302      	adds	r3, #2
 8010aec:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	f040 818d 	bne.w	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	3303      	adds	r3, #3
 8010afa:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	f040 8186 	bne.w	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 8010b02:	4b7d      	ldr	r3, [pc, #500]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010b08:	4b7b      	ldr	r3, [pc, #492]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b0a:	22e0      	movs	r2, #224	; 0xe0
 8010b0c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010b0e:	4b7a      	ldr	r3, [pc, #488]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b10:	2202      	movs	r2, #2
 8010b12:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010b14:	4b78      	ldr	r3, [pc, #480]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8010b1a:	4b77      	ldr	r3, [pc, #476]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010b20:	4b75      	ldr	r3, [pc, #468]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8010b26:	4b74      	ldr	r3, [pc, #464]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8010b2c:	4b72      	ldr	r3, [pc, #456]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b2e:	2201      	movs	r2, #1
 8010b30:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8010b32:	4b71      	ldr	r3, [pc, #452]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b34:	2201      	movs	r2, #1
 8010b36:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 8010b38:	2304      	movs	r3, #4
 8010b3a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b40:	f107 0308 	add.w	r3, r7, #8
 8010b44:	4618      	mov	r0, r3
 8010b46:	f004 f867 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	f004 fdf4 	bl	8015738 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010b50:	4b6a      	ldr	r3, [pc, #424]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d003      	beq.n	8010b62 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8010b5a:	4b68      	ldr	r3, [pc, #416]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8010b62:	2300      	movs	r3, #0
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	4b66      	ldr	r3, [pc, #408]	; (8010d00 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8010b6e:	4865      	ldr	r0, [pc, #404]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010b70:	f00d fa5e 	bl	801e030 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010b74:	f241 3188 	movw	r1, #5000	; 0x1388
 8010b78:	4862      	ldr	r0, [pc, #392]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010b7a:	f00d fb6d 	bl	801e258 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 8010b7e:	f7ff feff 	bl	8010980 <LmhpComplianceTxProcess>
 8010b82:	e144      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	4b5b      	ldr	r3, [pc, #364]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b8c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8010b8e:	4b5a      	ldr	r3, [pc, #360]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b90:	789b      	ldrb	r3, [r3, #2]
 8010b92:	2b0a      	cmp	r3, #10
 8010b94:	f200 8138 	bhi.w	8010e08 <LmhpComplianceOnMcpsIndication+0x3a8>
 8010b98:	a201      	add	r2, pc, #4	; (adr r2, 8010ba0 <LmhpComplianceOnMcpsIndication+0x140>)
 8010b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b9e:	bf00      	nop
 8010ba0:	08010bcd 	.word	0x08010bcd
 8010ba4:	08010c17 	.word	0x08010c17
 8010ba8:	08010c1f 	.word	0x08010c1f
 8010bac:	08010c2d 	.word	0x08010c2d
 8010bb0:	08010c3b 	.word	0x08010c3b
 8010bb4:	08010c93 	.word	0x08010c93
 8010bb8:	08010ca5 	.word	0x08010ca5
 8010bbc:	08010d0d 	.word	0x08010d0d
 8010bc0:	08010db5 	.word	0x08010db5
 8010bc4:	08010dc7 	.word	0x08010dc7
 8010bc8:	08010de1 	.word	0x08010de1
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 8010bcc:	484d      	ldr	r0, [pc, #308]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010bce:	f00d fad3 	bl	801e178 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010bd2:	4b49      	ldr	r3, [pc, #292]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010bd8:	4b47      	ldr	r3, [pc, #284]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010bda:	2200      	movs	r2, #0
 8010bdc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 8010bde:	2304      	movs	r3, #4
 8010be0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010be2:	4b46      	ldr	r3, [pc, #280]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010bea:	f107 0308 	add.w	r3, r7, #8
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f004 f812 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010bf4:	4b41      	ldr	r3, [pc, #260]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	785b      	ldrb	r3, [r3, #1]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f004 fd9c 	bl	8015738 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010c00:	4b3e      	ldr	r3, [pc, #248]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	f000 8100 	beq.w	8010e0c <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010c0c:	4b3b      	ldr	r3, [pc, #236]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	689b      	ldr	r3, [r3, #8]
 8010c12:	4798      	blx	r3
                }
            }
            break;
 8010c14:	e0fa      	b.n	8010e0c <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 8010c16:	4b38      	ldr	r3, [pc, #224]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c18:	2202      	movs	r2, #2
 8010c1a:	719a      	strb	r2, [r3, #6]
            break;
 8010c1c:	e0f7      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 8010c1e:	4b36      	ldr	r3, [pc, #216]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c20:	2201      	movs	r2, #1
 8010c22:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010c24:	4b34      	ldr	r3, [pc, #208]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c26:	2201      	movs	r2, #1
 8010c28:	709a      	strb	r2, [r3, #2]
            break;
 8010c2a:	e0f0      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 8010c2c:	4b32      	ldr	r3, [pc, #200]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010c32:	4b31      	ldr	r3, [pc, #196]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c34:	2201      	movs	r2, #1
 8010c36:	709a      	strb	r2, [r3, #2]
            break;
 8010c38:	e0e9      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	7b1a      	ldrb	r2, [r3, #12]
 8010c3e:	4b2e      	ldr	r3, [pc, #184]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c40:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8010c42:	4b2d      	ldr	r3, [pc, #180]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c44:	689b      	ldr	r3, [r3, #8]
 8010c46:	2204      	movs	r2, #4
 8010c48:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010c50:	e012      	b.n	8010c78 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	689a      	ldr	r2, [r3, #8]
 8010c56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c5a:	4413      	add	r3, r2
 8010c5c:	781a      	ldrb	r2, [r3, #0]
 8010c5e:	4b26      	ldr	r3, [pc, #152]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c60:	6899      	ldr	r1, [r3, #8]
 8010c62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c66:	440b      	add	r3, r1
 8010c68:	3201      	adds	r2, #1
 8010c6a:	b2d2      	uxtb	r2, r2
 8010c6c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010c6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c72:	3301      	adds	r3, #1
 8010c74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010c78:	4b1f      	ldr	r3, [pc, #124]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c7a:	795a      	ldrb	r2, [r3, #5]
 8010c7c:	4b1e      	ldr	r3, [pc, #120]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c7e:	799b      	ldrb	r3, [r3, #6]
 8010c80:	4293      	cmp	r3, r2
 8010c82:	bf28      	it	cs
 8010c84:	4613      	movcs	r3, r2
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d3e0      	bcc.n	8010c52 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8010c90:	e0bd      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8010c92:	2304      	movs	r3, #4
 8010c94:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 8010c98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f004 fb15 	bl	80152cc <LoRaMacMlmeRequest>
            }
            break;
 8010ca2:	e0b4      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8010ca4:	4817      	ldr	r0, [pc, #92]	; (8010d04 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010ca6:	f00d fa67 	bl	801e178 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010caa:	4b13      	ldr	r3, [pc, #76]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010cb0:	4b11      	ldr	r3, [pc, #68]	; (8010cf8 <LmhpComplianceOnMcpsIndication+0x298>)
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 8010cb6:	2304      	movs	r3, #4
 8010cb8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010cba:	4b10      	ldr	r3, [pc, #64]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010cc2:	f107 0308 	add.w	r3, r7, #8
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f003 ffa6 	bl	8014c18 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010ccc:	4b0b      	ldr	r3, [pc, #44]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	785b      	ldrb	r3, [r3, #1]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f004 fd30 	bl	8015738 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010cd8:	4b08      	ldr	r3, [pc, #32]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	689b      	ldr	r3, [r3, #8]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d003      	beq.n	8010cea <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010ce2:	4b06      	ldr	r3, [pc, #24]	; (8010cfc <LmhpComplianceOnMcpsIndication+0x29c>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010cea:	4b07      	ldr	r3, [pc, #28]	; (8010d08 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cee:	2101      	movs	r1, #1
 8010cf0:	2002      	movs	r0, #2
 8010cf2:	4798      	blx	r3
            }
            break;
 8010cf4:	e08b      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
 8010cf6:	bf00      	nop
 8010cf8:	20000de4 	.word	0x20000de4
 8010cfc:	20000df8 	.word	0x20000df8
 8010d00:	08010e25 	.word	0x08010e25
 8010d04:	20000dcc 	.word	0x20000dcc
 8010d08:	20000104 	.word	0x20000104
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	7b1b      	ldrb	r3, [r3, #12]
 8010d10:	2b03      	cmp	r3, #3
 8010d12:	d113      	bne.n	8010d3c <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010d14:	2305      	movs	r3, #5
 8010d16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	689b      	ldr	r3, [r3, #8]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	021b      	lsls	r3, r3, #8
 8010d24:	b21a      	sxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	3302      	adds	r3, #2
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	b21b      	sxth	r3, r3
 8010d30:	4313      	orrs	r3, r2
 8010d32:	b21b      	sxth	r3, r3
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010d3a:	e032      	b.n	8010da2 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	7b1b      	ldrb	r3, [r3, #12]
 8010d40:	2b07      	cmp	r3, #7
 8010d42:	d12e      	bne.n	8010da2 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8010d44:	2306      	movs	r3, #6
 8010d46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	689b      	ldr	r3, [r3, #8]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	021b      	lsls	r3, r3, #8
 8010d54:	b21a      	sxth	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	3302      	adds	r3, #2
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	b21b      	sxth	r3, r3
 8010d60:	4313      	orrs	r3, r2
 8010d62:	b21b      	sxth	r3, r3
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	3303      	adds	r3, #3
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	041a      	lsls	r2, r3, #16
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	3304      	adds	r3, #4
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	021b      	lsls	r3, r3, #8
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	6892      	ldr	r2, [r2, #8]
 8010d84:	3205      	adds	r2, #5
 8010d86:	7812      	ldrb	r2, [r2, #0]
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	2364      	movs	r3, #100	; 0x64
 8010d8e:	fb02 f303 	mul.w	r3, r2, r3
 8010d92:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	3306      	adds	r3, #6
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	b25b      	sxtb	r3, r3
 8010d9e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8010da2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010da6:	4618      	mov	r0, r3
 8010da8:	f004 fa90 	bl	80152cc <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8010dac:	4b19      	ldr	r3, [pc, #100]	; (8010e14 <LmhpComplianceOnMcpsIndication+0x3b4>)
 8010dae:	2201      	movs	r2, #1
 8010db0:	709a      	strb	r2, [r3, #2]
            }
            break;
 8010db2:	e02c      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8010db4:	230a      	movs	r3, #10
 8010db6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 8010dba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f004 fa84 	bl	80152cc <LoRaMacMlmeRequest>
            }
            break;
 8010dc4:	e023      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010dd4:	f107 0308 	add.w	r3, r7, #8
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f003 ff1d 	bl	8014c18 <LoRaMacMibSetRequestConfirm>
            }
            break;
 8010dde:	e016      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010de0:	230d      	movs	r3, #13
 8010de2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	785b      	ldrb	r3, [r3, #1]
 8010dec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 8010df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010df4:	4618      	mov	r0, r3
 8010df6:	f004 fa69 	bl	80152cc <LoRaMacMlmeRequest>
            }
            break;
 8010dfa:	e008      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010dfc:	bf00      	nop
 8010dfe:	e006      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010e00:	bf00      	nop
 8010e02:	e004      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 8010e04:	bf00      	nop
 8010e06:	e002      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 8010e08:	bf00      	nop
 8010e0a:	e000      	b.n	8010e0e <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 8010e0c:	bf00      	nop
        }
    }
}
 8010e0e:	3780      	adds	r7, #128	; 0x80
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	20000de4 	.word	0x20000de4

08010e18 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010e18:	b480      	push	{r7}
 8010e1a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010e1c:	bf00      	nop
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bc80      	pop	{r7}
 8010e22:	4770      	bx	lr

08010e24 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010e2c:	f7ff fda8 	bl	8010980 <LmhpComplianceTxProcess>
}
 8010e30:	bf00      	nop
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8010e38:	b590      	push	{r4, r7, lr}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010e3e:	f00d fab5 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 8010e42:	4603      	mov	r3, r0
 8010e44:	4a16      	ldr	r2, [pc, #88]	; (8010ea0 <OnRadioTxDone+0x68>)
 8010e46:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010e48:	4c16      	ldr	r4, [pc, #88]	; (8010ea4 <OnRadioTxDone+0x6c>)
 8010e4a:	463b      	mov	r3, r7
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f00c fc27 	bl	801d6a0 <SysTimeGet>
 8010e52:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010e56:	463a      	mov	r2, r7
 8010e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e5c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010e60:	4a11      	ldr	r2, [pc, #68]	; (8010ea8 <OnRadioTxDone+0x70>)
 8010e62:	7813      	ldrb	r3, [r2, #0]
 8010e64:	f043 0310 	orr.w	r3, r3, #16
 8010e68:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010e6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ea4 <OnRadioTxDone+0x6c>)
 8010e6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00a      	beq.n	8010e8a <OnRadioTxDone+0x52>
 8010e74:	4b0b      	ldr	r3, [pc, #44]	; (8010ea4 <OnRadioTxDone+0x6c>)
 8010e76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010e7a:	691b      	ldr	r3, [r3, #16]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d004      	beq.n	8010e8a <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010e80:	4b08      	ldr	r3, [pc, #32]	; (8010ea4 <OnRadioTxDone+0x6c>)
 8010e82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010e8a:	4b08      	ldr	r3, [pc, #32]	; (8010eac <OnRadioTxDone+0x74>)
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	2100      	movs	r1, #0
 8010e90:	2002      	movs	r0, #2
 8010e92:	f00d fb7b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010e96:	bf00      	nop
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd90      	pop	{r4, r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	2000215c 	.word	0x2000215c
 8010ea4:	20000dfc 	.word	0x20000dfc
 8010ea8:	20002158 	.word	0x20002158
 8010eac:	0801f3e0 	.word	0x0801f3e0

08010eb0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	4608      	mov	r0, r1
 8010eba:	4611      	mov	r1, r2
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	817b      	strh	r3, [r7, #10]
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	813b      	strh	r3, [r7, #8]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010eca:	f00d fa6f 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	4a16      	ldr	r2, [pc, #88]	; (8010f2c <OnRadioRxDone+0x7c>)
 8010ed2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010ed4:	4a15      	ldr	r2, [pc, #84]	; (8010f2c <OnRadioRxDone+0x7c>)
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010eda:	4a14      	ldr	r2, [pc, #80]	; (8010f2c <OnRadioRxDone+0x7c>)
 8010edc:	897b      	ldrh	r3, [r7, #10]
 8010ede:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010ee0:	4a12      	ldr	r2, [pc, #72]	; (8010f2c <OnRadioRxDone+0x7c>)
 8010ee2:	893b      	ldrh	r3, [r7, #8]
 8010ee4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010ee6:	4a11      	ldr	r2, [pc, #68]	; (8010f2c <OnRadioRxDone+0x7c>)
 8010ee8:	79fb      	ldrb	r3, [r7, #7]
 8010eea:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010eec:	4a10      	ldr	r2, [pc, #64]	; (8010f30 <OnRadioRxDone+0x80>)
 8010eee:	7813      	ldrb	r3, [r2, #0]
 8010ef0:	f043 0308 	orr.w	r3, r3, #8
 8010ef4:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010ef6:	4b0f      	ldr	r3, [pc, #60]	; (8010f34 <OnRadioRxDone+0x84>)
 8010ef8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00a      	beq.n	8010f16 <OnRadioRxDone+0x66>
 8010f00:	4b0c      	ldr	r3, [pc, #48]	; (8010f34 <OnRadioRxDone+0x84>)
 8010f02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d004      	beq.n	8010f16 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010f0c:	4b09      	ldr	r3, [pc, #36]	; (8010f34 <OnRadioRxDone+0x84>)
 8010f0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f12:	691b      	ldr	r3, [r3, #16]
 8010f14:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010f16:	4b08      	ldr	r3, [pc, #32]	; (8010f38 <OnRadioRxDone+0x88>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	2002      	movs	r0, #2
 8010f1e:	f00d fb35 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010f22:	bf00      	nop
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	20002160 	.word	0x20002160
 8010f30:	20002158 	.word	0x20002158
 8010f34:	20000dfc 	.word	0x20000dfc
 8010f38:	0801f3f0 	.word	0x0801f3f0

08010f3c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010f40:	4a0e      	ldr	r2, [pc, #56]	; (8010f7c <OnRadioTxTimeout+0x40>)
 8010f42:	7813      	ldrb	r3, [r2, #0]
 8010f44:	f043 0304 	orr.w	r3, r3, #4
 8010f48:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010f4a:	4b0d      	ldr	r3, [pc, #52]	; (8010f80 <OnRadioTxTimeout+0x44>)
 8010f4c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00a      	beq.n	8010f6a <OnRadioTxTimeout+0x2e>
 8010f54:	4b0a      	ldr	r3, [pc, #40]	; (8010f80 <OnRadioTxTimeout+0x44>)
 8010f56:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f5a:	691b      	ldr	r3, [r3, #16]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d004      	beq.n	8010f6a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010f60:	4b07      	ldr	r3, [pc, #28]	; (8010f80 <OnRadioTxTimeout+0x44>)
 8010f62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010f6a:	4b06      	ldr	r3, [pc, #24]	; (8010f84 <OnRadioTxTimeout+0x48>)
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	2100      	movs	r1, #0
 8010f70:	2002      	movs	r0, #2
 8010f72:	f00d fb0b 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010f76:	bf00      	nop
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	20002158 	.word	0x20002158
 8010f80:	20000dfc 	.word	0x20000dfc
 8010f84:	0801f400 	.word	0x0801f400

08010f88 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010f8c:	4a0b      	ldr	r2, [pc, #44]	; (8010fbc <OnRadioRxError+0x34>)
 8010f8e:	7813      	ldrb	r3, [r2, #0]
 8010f90:	f043 0302 	orr.w	r3, r3, #2
 8010f94:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010f96:	4b0a      	ldr	r3, [pc, #40]	; (8010fc0 <OnRadioRxError+0x38>)
 8010f98:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00a      	beq.n	8010fb6 <OnRadioRxError+0x2e>
 8010fa0:	4b07      	ldr	r3, [pc, #28]	; (8010fc0 <OnRadioRxError+0x38>)
 8010fa2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fa6:	691b      	ldr	r3, [r3, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d004      	beq.n	8010fb6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <OnRadioRxError+0x38>)
 8010fae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fb2:	691b      	ldr	r3, [r3, #16]
 8010fb4:	4798      	blx	r3
    }
}
 8010fb6:	bf00      	nop
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	20002158 	.word	0x20002158
 8010fc0:	20000dfc 	.word	0x20000dfc

08010fc4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010fc8:	4a0e      	ldr	r2, [pc, #56]	; (8011004 <OnRadioRxTimeout+0x40>)
 8010fca:	7813      	ldrb	r3, [r2, #0]
 8010fcc:	f043 0301 	orr.w	r3, r3, #1
 8010fd0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010fd2:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <OnRadioRxTimeout+0x44>)
 8010fd4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00a      	beq.n	8010ff2 <OnRadioRxTimeout+0x2e>
 8010fdc:	4b0a      	ldr	r3, [pc, #40]	; (8011008 <OnRadioRxTimeout+0x44>)
 8010fde:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fe2:	691b      	ldr	r3, [r3, #16]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d004      	beq.n	8010ff2 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010fe8:	4b07      	ldr	r3, [pc, #28]	; (8011008 <OnRadioRxTimeout+0x44>)
 8010fea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fee:	691b      	ldr	r3, [r3, #16]
 8010ff0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010ff2:	4b06      	ldr	r3, [pc, #24]	; (801100c <OnRadioRxTimeout+0x48>)
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	2002      	movs	r0, #2
 8010ffa:	f00d fac7 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8010ffe:	bf00      	nop
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	20002158 	.word	0x20002158
 8011008:	20000dfc 	.word	0x20000dfc
 801100c:	0801f410 	.word	0x0801f410

08011010 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8011010:	b480      	push	{r7}
 8011012:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011014:	4b08      	ldr	r3, [pc, #32]	; (8011038 <UpdateRxSlotIdleState+0x28>)
 8011016:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801101a:	2b02      	cmp	r3, #2
 801101c:	d004      	beq.n	8011028 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 801101e:	4b07      	ldr	r3, [pc, #28]	; (801103c <UpdateRxSlotIdleState+0x2c>)
 8011020:	2206      	movs	r2, #6
 8011022:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8011026:	e003      	b.n	8011030 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011028:	4b04      	ldr	r3, [pc, #16]	; (801103c <UpdateRxSlotIdleState+0x2c>)
 801102a:	2202      	movs	r2, #2
 801102c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 8011030:	bf00      	nop
 8011032:	46bd      	mov	sp, r7
 8011034:	bc80      	pop	{r7}
 8011036:	4770      	bx	lr
 8011038:	20001308 	.word	0x20001308
 801103c:	20000dfc 	.word	0x20000dfc

08011040 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b08e      	sub	sp, #56	; 0x38
 8011044:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011046:	4b44      	ldr	r3, [pc, #272]	; (8011158 <ProcessRadioTxDone+0x118>)
 8011048:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801104c:	2b02      	cmp	r3, #2
 801104e:	d002      	beq.n	8011056 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8011050:	4b42      	ldr	r3, [pc, #264]	; (801115c <ProcessRadioTxDone+0x11c>)
 8011052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011054:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8011056:	4b42      	ldr	r3, [pc, #264]	; (8011160 <ProcessRadioTxDone+0x120>)
 8011058:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 801105c:	4619      	mov	r1, r3
 801105e:	4841      	ldr	r0, [pc, #260]	; (8011164 <ProcessRadioTxDone+0x124>)
 8011060:	f00d f8fa 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8011064:	483f      	ldr	r0, [pc, #252]	; (8011164 <ProcessRadioTxDone+0x124>)
 8011066:	f00d f819 	bl	801e09c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 801106a:	4b3d      	ldr	r3, [pc, #244]	; (8011160 <ProcessRadioTxDone+0x120>)
 801106c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011070:	4619      	mov	r1, r3
 8011072:	483d      	ldr	r0, [pc, #244]	; (8011168 <ProcessRadioTxDone+0x128>)
 8011074:	f00d f8f0 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8011078:	483b      	ldr	r0, [pc, #236]	; (8011168 <ProcessRadioTxDone+0x128>)
 801107a:	f00d f80f 	bl	801e09c <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 801107e:	4b36      	ldr	r3, [pc, #216]	; (8011158 <ProcessRadioTxDone+0x118>)
 8011080:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011084:	2b02      	cmp	r3, #2
 8011086:	d004      	beq.n	8011092 <ProcessRadioTxDone+0x52>
 8011088:	4b35      	ldr	r3, [pc, #212]	; (8011160 <ProcessRadioTxDone+0x120>)
 801108a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801108e:	2b00      	cmp	r3, #0
 8011090:	d019      	beq.n	80110c6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8011092:	2316      	movs	r3, #22
 8011094:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011098:	4b2f      	ldr	r3, [pc, #188]	; (8011158 <ProcessRadioTxDone+0x118>)
 801109a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801109e:	f107 0220 	add.w	r2, r7, #32
 80110a2:	4611      	mov	r1, r2
 80110a4:	4618      	mov	r0, r3
 80110a6:	f006 fc09 	bl	80178bc <RegionGetPhyParam>
 80110aa:	4603      	mov	r3, r0
 80110ac:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80110ae:	4b2c      	ldr	r3, [pc, #176]	; (8011160 <ProcessRadioTxDone+0x120>)
 80110b0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	4413      	add	r3, r2
 80110b8:	4619      	mov	r1, r3
 80110ba:	482c      	ldr	r0, [pc, #176]	; (801116c <ProcessRadioTxDone+0x12c>)
 80110bc:	f00d f8cc 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80110c0:	482a      	ldr	r0, [pc, #168]	; (801116c <ProcessRadioTxDone+0x12c>)
 80110c2:	f00c ffeb 	bl	801e09c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80110c6:	4b2a      	ldr	r3, [pc, #168]	; (8011170 <ProcessRadioTxDone+0x130>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a23      	ldr	r2, [pc, #140]	; (8011158 <ProcessRadioTxDone+0x118>)
 80110cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80110ce:	4b24      	ldr	r3, [pc, #144]	; (8011160 <ProcessRadioTxDone+0x120>)
 80110d0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80110d4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80110d6:	4b26      	ldr	r3, [pc, #152]	; (8011170 <ProcessRadioTxDone+0x130>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80110dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110e0:	4618      	mov	r0, r3
 80110e2:	f00c fb15 	bl	801d710 <SysTimeGetMcuTime>
 80110e6:	4638      	mov	r0, r7
 80110e8:	4b1b      	ldr	r3, [pc, #108]	; (8011158 <ProcessRadioTxDone+0x118>)
 80110ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80110ee:	9200      	str	r2, [sp, #0]
 80110f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80110f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80110f8:	ca06      	ldmia	r2, {r1, r2}
 80110fa:	f00c fa6a 	bl	801d5d2 <SysTimeSub>
 80110fe:	f107 0314 	add.w	r3, r7, #20
 8011102:	463a      	mov	r2, r7
 8011104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011108:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 801110c:	4b14      	ldr	r3, [pc, #80]	; (8011160 <ProcessRadioTxDone+0x120>)
 801110e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011112:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8011114:	2301      	movs	r3, #1
 8011116:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011118:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <ProcessRadioTxDone+0x118>)
 801111a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 8011122:	2300      	movs	r3, #0
 8011124:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8011126:	4b0c      	ldr	r3, [pc, #48]	; (8011158 <ProcessRadioTxDone+0x118>)
 8011128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801112c:	f107 0208 	add.w	r2, r7, #8
 8011130:	4611      	mov	r1, r2
 8011132:	4618      	mov	r0, r3
 8011134:	f006 fbda 	bl	80178ec <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8011138:	4b09      	ldr	r3, [pc, #36]	; (8011160 <ProcessRadioTxDone+0x120>)
 801113a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801113e:	f083 0301 	eor.w	r3, r3, #1
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d003      	beq.n	8011150 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011148:	4b05      	ldr	r3, [pc, #20]	; (8011160 <ProcessRadioTxDone+0x120>)
 801114a:	2200      	movs	r2, #0
 801114c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 8011150:	bf00      	nop
 8011152:	3730      	adds	r7, #48	; 0x30
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	20001308 	.word	0x20001308
 801115c:	0801fa3c 	.word	0x0801fa3c
 8011160:	20000dfc 	.word	0x20000dfc
 8011164:	2000117c 	.word	0x2000117c
 8011168:	20001194 	.word	0x20001194
 801116c:	200011f4 	.word	0x200011f4
 8011170:	2000215c 	.word	0x2000215c

08011174 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8011178:	4b10      	ldr	r3, [pc, #64]	; (80111bc <PrepareRxDoneAbort+0x48>)
 801117a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801117e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011182:	4a0e      	ldr	r2, [pc, #56]	; (80111bc <PrepareRxDoneAbort+0x48>)
 8011184:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8011188:	4b0c      	ldr	r3, [pc, #48]	; (80111bc <PrepareRxDoneAbort+0x48>)
 801118a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801118e:	2b00      	cmp	r3, #0
 8011190:	d002      	beq.n	8011198 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8011192:	2000      	movs	r0, #0
 8011194:	f001 f8f2 	bl	801237c <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8011198:	4a08      	ldr	r2, [pc, #32]	; (80111bc <PrepareRxDoneAbort+0x48>)
 801119a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801119e:	f043 0302 	orr.w	r3, r3, #2
 80111a2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 80111a6:	4a05      	ldr	r2, [pc, #20]	; (80111bc <PrepareRxDoneAbort+0x48>)
 80111a8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80111ac:	f043 0320 	orr.w	r3, r3, #32
 80111b0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 80111b4:	f7ff ff2c 	bl	8011010 <UpdateRxSlotIdleState>
}
 80111b8:	bf00      	nop
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	20000dfc 	.word	0x20000dfc

080111c0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 80111c0:	b5b0      	push	{r4, r5, r7, lr}
 80111c2:	b0a6      	sub	sp, #152	; 0x98
 80111c4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80111c6:	2313      	movs	r3, #19
 80111c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80111cc:	4bb9      	ldr	r3, [pc, #740]	; (80114b4 <ProcessRadioRxDone+0x2f4>)
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 80111d2:	4bb8      	ldr	r3, [pc, #736]	; (80114b4 <ProcessRadioRxDone+0x2f4>)
 80111d4:	891b      	ldrh	r3, [r3, #8]
 80111d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 80111da:	4bb6      	ldr	r3, [pc, #728]	; (80114b4 <ProcessRadioRxDone+0x2f4>)
 80111dc:	895b      	ldrh	r3, [r3, #10]
 80111de:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 80111e2:	4bb4      	ldr	r3, [pc, #720]	; (80114b4 <ProcessRadioRxDone+0x2f4>)
 80111e4:	7b1b      	ldrb	r3, [r3, #12]
 80111e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 80111f0:	2300      	movs	r3, #0
 80111f2:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80111f4:	4bb0      	ldr	r3, [pc, #704]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80111f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80111fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8011204:	2301      	movs	r3, #1
 8011206:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 801120a:	4bac      	ldr	r3, [pc, #688]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801120c:	2200      	movs	r2, #0
 801120e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8011212:	4aaa      	ldr	r2, [pc, #680]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011214:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011218:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 801121c:	4aa7      	ldr	r2, [pc, #668]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801121e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011222:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8011226:	4ba5      	ldr	r3, [pc, #660]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011228:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 801122c:	4ba3      	ldr	r3, [pc, #652]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801122e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8011232:	4ba2      	ldr	r3, [pc, #648]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011234:	2200      	movs	r2, #0
 8011236:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 801123a:	4ba0      	ldr	r3, [pc, #640]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801123c:	2200      	movs	r2, #0
 801123e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8011242:	4b9e      	ldr	r3, [pc, #632]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011244:	2200      	movs	r2, #0
 8011246:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 801124a:	4b9c      	ldr	r3, [pc, #624]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801124c:	2200      	movs	r2, #0
 801124e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8011252:	4b9a      	ldr	r3, [pc, #616]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011254:	2200      	movs	r2, #0
 8011256:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 801125a:	4b98      	ldr	r3, [pc, #608]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801125c:	2200      	movs	r2, #0
 801125e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8011262:	4b96      	ldr	r3, [pc, #600]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011264:	2200      	movs	r2, #0
 8011266:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 801126a:	4b94      	ldr	r3, [pc, #592]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801126c:	2200      	movs	r2, #0
 801126e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011272:	4b92      	ldr	r3, [pc, #584]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011274:	2200      	movs	r2, #0
 8011276:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 801127a:	4b90      	ldr	r3, [pc, #576]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801127c:	2200      	movs	r2, #0
 801127e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011282:	4b8e      	ldr	r3, [pc, #568]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011284:	2200      	movs	r2, #0
 8011286:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 801128a:	4b8d      	ldr	r3, [pc, #564]	; (80114c0 <ProcessRadioRxDone+0x300>)
 801128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128e:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011290:	488c      	ldr	r0, [pc, #560]	; (80114c4 <ProcessRadioRxDone+0x304>)
 8011292:	f00c ff71 	bl	801e178 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8011296:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801129a:	4619      	mov	r1, r3
 801129c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801129e:	f004 fbaa 	bl	80159f6 <LoRaMacClassBRxBeacon>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d00a      	beq.n	80112be <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80112a8:	4a84      	ldr	r2, [pc, #528]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 80112aa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80112ae:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80112b2:	4a82      	ldr	r2, [pc, #520]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 80112b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112b8:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 80112bc:	e3c7      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80112be:	4b7e      	ldr	r3, [pc, #504]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80112c0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d11e      	bne.n	8011306 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80112c8:	f004 fba8 	bl	8015a1c <LoRaMacClassBIsPingExpected>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d00a      	beq.n	80112e8 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80112d2:	2000      	movs	r0, #0
 80112d4:	f004 fb59 	bl	801598a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80112d8:	2000      	movs	r0, #0
 80112da:	f004 fb7a 	bl	80159d2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80112de:	4b77      	ldr	r3, [pc, #476]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 80112e0:	2204      	movs	r2, #4
 80112e2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80112e6:	e00e      	b.n	8011306 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80112e8:	f004 fb9f 	bl	8015a2a <LoRaMacClassBIsMulticastExpected>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d009      	beq.n	8011306 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80112f2:	2000      	movs	r0, #0
 80112f4:	f004 fb53 	bl	801599e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80112f8:	2000      	movs	r0, #0
 80112fa:	f004 fb73 	bl	80159e4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80112fe:	4b6f      	ldr	r3, [pc, #444]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 8011300:	2205      	movs	r2, #5
 8011302:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011306:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801130a:	1c5a      	adds	r2, r3, #1
 801130c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 8011310:	461a      	mov	r2, r3
 8011312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011314:	4413      	add	r3, r2
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 801131c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011320:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011324:	b2db      	uxtb	r3, r3
 8011326:	3b01      	subs	r3, #1
 8011328:	2b06      	cmp	r3, #6
 801132a:	f200 836a 	bhi.w	8011a02 <ProcessRadioRxDone+0x842>
 801132e:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <ProcessRadioRxDone+0x174>)
 8011330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011334:	08011351 	.word	0x08011351
 8011338:	08011a03 	.word	0x08011a03
 801133c:	080114d1 	.word	0x080114d1
 8011340:	08011a03 	.word	0x08011a03
 8011344:	080114c9 	.word	0x080114c9
 8011348:	08011a03 	.word	0x08011a03
 801134c:	080119a9 	.word	0x080119a9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011350:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011354:	2b10      	cmp	r3, #16
 8011356:	d806      	bhi.n	8011366 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011358:	4b58      	ldr	r3, [pc, #352]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801135a:	2201      	movs	r2, #1
 801135c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011360:	f7ff ff08 	bl	8011174 <PrepareRxDoneAbort>
                return;
 8011364:	e373      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 8011366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011368:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 801136a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801136e:	b2db      	uxtb	r3, r3
 8011370:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011372:	4b51      	ldr	r3, [pc, #324]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011374:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011378:	2b00      	cmp	r3, #0
 801137a:	d006      	beq.n	801138a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801137c:	4b4f      	ldr	r3, [pc, #316]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 801137e:	2201      	movs	r2, #1
 8011380:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011384:	f7ff fef6 	bl	8011174 <PrepareRxDoneAbort>
                return;
 8011388:	e361      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 801138a:	f7fe faa3 	bl	800f8d4 <SecureElementGetJoinEui>
 801138e:	4601      	mov	r1, r0
 8011390:	f107 0308 	add.w	r3, r7, #8
 8011394:	461a      	mov	r2, r3
 8011396:	20ff      	movs	r0, #255	; 0xff
 8011398:	f005 fd14 	bl	8016dc4 <LoRaMacCryptoHandleJoinAccept>
 801139c:	4603      	mov	r3, r0
 801139e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80113a2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d172      	bne.n	8011490 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80113aa:	7c7b      	ldrb	r3, [r7, #17]
 80113ac:	461a      	mov	r2, r3
 80113ae:	4b42      	ldr	r3, [pc, #264]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113b0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80113b4:	4b40      	ldr	r3, [pc, #256]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113b6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80113ba:	7cbb      	ldrb	r3, [r7, #18]
 80113bc:	021b      	lsls	r3, r3, #8
 80113be:	4313      	orrs	r3, r2
 80113c0:	4a3d      	ldr	r2, [pc, #244]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113c2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80113c6:	4b3c      	ldr	r3, [pc, #240]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113c8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80113cc:	7cfb      	ldrb	r3, [r7, #19]
 80113ce:	041b      	lsls	r3, r3, #16
 80113d0:	4313      	orrs	r3, r2
 80113d2:	4a39      	ldr	r2, [pc, #228]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113d4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	4a37      	ldr	r2, [pc, #220]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113dc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80113e0:	7e3b      	ldrb	r3, [r7, #24]
 80113e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	461a      	mov	r2, r3
 80113ea:	4b33      	ldr	r3, [pc, #204]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113ec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80113f0:	7e3b      	ldrb	r3, [r7, #24]
 80113f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	461a      	mov	r2, r3
 80113fa:	4b2f      	ldr	r3, [pc, #188]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 80113fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011400:	7e3b      	ldrb	r3, [r7, #24]
 8011402:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011406:	b2db      	uxtb	r3, r3
 8011408:	461a      	mov	r2, r3
 801140a:	4b2b      	ldr	r3, [pc, #172]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 801140c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011410:	7e7b      	ldrb	r3, [r7, #25]
 8011412:	461a      	mov	r2, r3
 8011414:	4b28      	ldr	r3, [pc, #160]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011416:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011418:	4b27      	ldr	r3, [pc, #156]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 801141a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801141c:	2b00      	cmp	r3, #0
 801141e:	d102      	bne.n	8011426 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011420:	4b25      	ldr	r3, [pc, #148]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011422:	2201      	movs	r2, #1
 8011424:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011426:	4b24      	ldr	r3, [pc, #144]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801142a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801142e:	fb02 f303 	mul.w	r3, r2, r3
 8011432:	4a21      	ldr	r2, [pc, #132]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011434:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011436:	4b20      	ldr	r3, [pc, #128]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801143a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801143e:	4a1e      	ldr	r2, [pc, #120]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011440:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011442:	4b1d      	ldr	r3, [pc, #116]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011444:	2200      	movs	r2, #0
 8011446:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801144a:	f107 0308 	add.w	r3, r7, #8
 801144e:	3312      	adds	r3, #18
 8011450:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011452:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011456:	b2db      	uxtb	r3, r3
 8011458:	3b11      	subs	r3, #17
 801145a:	b2db      	uxtb	r3, r3
 801145c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011460:	4b15      	ldr	r3, [pc, #84]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011466:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801146a:	4611      	mov	r1, r2
 801146c:	4618      	mov	r0, r3
 801146e:	f006 fa77 	bl	8017960 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011472:	4b11      	ldr	r3, [pc, #68]	; (80114b8 <ProcessRadioRxDone+0x2f8>)
 8011474:	2202      	movs	r2, #2
 8011476:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801147a:	2001      	movs	r0, #1
 801147c:	f004 ff9a 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00e      	beq.n	80114a4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8011486:	2101      	movs	r1, #1
 8011488:	2000      	movs	r0, #0
 801148a:	f004 ff07 	bl	801629c <LoRaMacConfirmQueueSetStatus>
 801148e:	e009      	b.n	80114a4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011490:	2001      	movs	r0, #1
 8011492:	f004 ff8f 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d003      	beq.n	80114a4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 801149c:	2101      	movs	r1, #1
 801149e:	2007      	movs	r0, #7
 80114a0:	f004 fefc 	bl	801629c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 80114a4:	4a05      	ldr	r2, [pc, #20]	; (80114bc <ProcessRadioRxDone+0x2fc>)
 80114a6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80114aa:	f043 0308 	orr.w	r3, r3, #8
 80114ae:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 80114b2:	e2ad      	b.n	8011a10 <ProcessRadioRxDone+0x850>
 80114b4:	20002160 	.word	0x20002160
 80114b8:	20001308 	.word	0x20001308
 80114bc:	20000dfc 	.word	0x20000dfc
 80114c0:	0801fa3c 	.word	0x0801fa3c
 80114c4:	20001194 	.word	0x20001194
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80114c8:	4bb0      	ldr	r3, [pc, #704]	; (801178c <ProcessRadioRxDone+0x5cc>)
 80114ca:	2201      	movs	r2, #1
 80114cc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80114d0:	4baf      	ldr	r3, [pc, #700]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80114d2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80114d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80114da:	4bac      	ldr	r3, [pc, #688]	; (801178c <ProcessRadioRxDone+0x5cc>)
 80114dc:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80114e0:	b25b      	sxtb	r3, r3
 80114e2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80114e6:	230d      	movs	r3, #13
 80114e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80114ec:	4ba8      	ldr	r3, [pc, #672]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80114ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d002      	beq.n	80114fc <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80114f6:	230e      	movs	r3, #14
 80114f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114fc:	4ba4      	ldr	r3, [pc, #656]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80114fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011502:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011506:	4611      	mov	r1, r2
 8011508:	4618      	mov	r0, r3
 801150a:	f006 f9d7 	bl	80178bc <RegionGetPhyParam>
 801150e:	4603      	mov	r3, r0
 8011510:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011512:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011516:	3b0d      	subs	r3, #13
 8011518:	b29b      	uxth	r3, r3
 801151a:	b21b      	sxth	r3, r3
 801151c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011520:	b21a      	sxth	r2, r3
 8011522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011524:	b21b      	sxth	r3, r3
 8011526:	429a      	cmp	r2, r3
 8011528:	dc03      	bgt.n	8011532 <ProcessRadioRxDone+0x372>
 801152a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801152e:	2b0b      	cmp	r3, #11
 8011530:	d806      	bhi.n	8011540 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011532:	4b96      	ldr	r3, [pc, #600]	; (801178c <ProcessRadioRxDone+0x5cc>)
 8011534:	2201      	movs	r2, #1
 8011536:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 801153a:	f7ff fe1b 	bl	8011174 <PrepareRxDoneAbort>
                return;
 801153e:	e286      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 8011540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011542:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8011544:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801154e:	4b91      	ldr	r3, [pc, #580]	; (8011794 <ProcessRadioRxDone+0x5d4>)
 8011550:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011552:	23ff      	movs	r3, #255	; 0xff
 8011554:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801155c:	4618      	mov	r0, r3
 801155e:	f005 ff30 	bl	80173c2 <LoRaMacParserData>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d006      	beq.n	8011576 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011568:	4b88      	ldr	r3, [pc, #544]	; (801178c <ProcessRadioRxDone+0x5cc>)
 801156a:	2201      	movs	r2, #1
 801156c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011570:	f7ff fe00 	bl	8011174 <PrepareRxDoneAbort>
                return;
 8011574:	e26b      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	4a84      	ldr	r2, [pc, #528]	; (801178c <ProcessRadioRxDone+0x5cc>)
 801157a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801157e:	1cba      	adds	r2, r7, #2
 8011580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011584:	4611      	mov	r1, r2
 8011586:	4618      	mov	r0, r3
 8011588:	f002 fc9e 	bl	8013ec8 <DetermineFrameType>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d006      	beq.n	80115a0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011592:	4b7e      	ldr	r3, [pc, #504]	; (801178c <ProcessRadioRxDone+0x5cc>)
 8011594:	2201      	movs	r2, #1
 8011596:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 801159a:	f7ff fdeb 	bl	8011174 <PrepareRxDoneAbort>
                return;
 801159e:	e256      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 80115a0:	2300      	movs	r3, #0
 80115a2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80115aa:	2300      	movs	r3, #0
 80115ac:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80115b0:	e049      	b.n	8011646 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80115b2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115b6:	4a76      	ldr	r2, [pc, #472]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80115b8:	212c      	movs	r1, #44	; 0x2c
 80115ba:	fb01 f303 	mul.w	r3, r1, r3
 80115be:	4413      	add	r3, r2
 80115c0:	33dc      	adds	r3, #220	; 0xdc
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d138      	bne.n	801163c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80115ca:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115ce:	4a70      	ldr	r2, [pc, #448]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80115d0:	212c      	movs	r1, #44	; 0x2c
 80115d2:	fb01 f303 	mul.w	r3, r1, r3
 80115d6:	4413      	add	r3, r2
 80115d8:	33da      	adds	r3, #218	; 0xda
 80115da:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d02d      	beq.n	801163c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 80115e0:	2301      	movs	r3, #1
 80115e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80115e6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115ea:	4a69      	ldr	r2, [pc, #420]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80115ec:	212c      	movs	r1, #44	; 0x2c
 80115ee:	fb01 f303 	mul.w	r3, r1, r3
 80115f2:	4413      	add	r3, r2
 80115f4:	33db      	adds	r3, #219	; 0xdb
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80115fc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011600:	4a63      	ldr	r2, [pc, #396]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 8011602:	212c      	movs	r1, #44	; 0x2c
 8011604:	fb01 f303 	mul.w	r3, r1, r3
 8011608:	4413      	add	r3, r2
 801160a:	33f8      	adds	r3, #248	; 0xf8
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011612:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011616:	4a5e      	ldr	r2, [pc, #376]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 8011618:	212c      	movs	r1, #44	; 0x2c
 801161a:	fb01 f303 	mul.w	r3, r1, r3
 801161e:	4413      	add	r3, r2
 8011620:	33dc      	adds	r3, #220	; 0xdc
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011628:	4b59      	ldr	r3, [pc, #356]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 801162a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801162e:	2b02      	cmp	r3, #2
 8011630:	d10e      	bne.n	8011650 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011632:	4b56      	ldr	r3, [pc, #344]	; (801178c <ProcessRadioRxDone+0x5cc>)
 8011634:	2203      	movs	r2, #3
 8011636:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 801163a:	e009      	b.n	8011650 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801163c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011640:	3301      	adds	r3, #1
 8011642:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8011646:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801164a:	2b00      	cmp	r3, #0
 801164c:	d0b1      	beq.n	80115b2 <ProcessRadioRxDone+0x3f2>
 801164e:	e000      	b.n	8011652 <ProcessRadioRxDone+0x492>
                    break;
 8011650:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011652:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011656:	2b01      	cmp	r3, #1
 8011658:	d117      	bne.n	801168a <ProcessRadioRxDone+0x4ca>
 801165a:	78bb      	ldrb	r3, [r7, #2]
 801165c:	2b03      	cmp	r3, #3
 801165e:	d10d      	bne.n	801167c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011660:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011664:	f003 0320 	and.w	r3, r3, #32
 8011668:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801166e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011676:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011678:	2b00      	cmp	r3, #0
 801167a:	d006      	beq.n	801168a <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801167c:	4b43      	ldr	r3, [pc, #268]	; (801178c <ProcessRadioRxDone+0x5cc>)
 801167e:	2201      	movs	r2, #1
 8011680:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8011684:	f7ff fd76 	bl	8011174 <PrepareRxDoneAbort>
                return;
 8011688:	e1e1      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 801168a:	2315      	movs	r3, #21
 801168c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011690:	4b3f      	ldr	r3, [pc, #252]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 8011692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011696:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801169a:	4611      	mov	r1, r2
 801169c:	4618      	mov	r0, r3
 801169e:	f006 f90d 	bl	80178bc <RegionGetPhyParam>
 80116a2:	4603      	mov	r3, r0
 80116a4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80116a6:	78b9      	ldrb	r1, [r7, #2]
 80116a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	4d38      	ldr	r5, [pc, #224]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80116ae:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80116b2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 80116b6:	1d3a      	adds	r2, r7, #4
 80116b8:	9202      	str	r2, [sp, #8]
 80116ba:	1cfa      	adds	r2, r7, #3
 80116bc:	9201      	str	r2, [sp, #4]
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80116c4:	4622      	mov	r2, r4
 80116c6:	f000 fe8f 	bl	80123e8 <GetFCntDown>
 80116ca:	4603      	mov	r3, r0
 80116cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80116d0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d035      	beq.n	8011744 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80116d8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80116dc:	2b07      	cmp	r3, #7
 80116de:	d119      	bne.n	8011714 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80116e0:	4b2a      	ldr	r3, [pc, #168]	; (801178c <ProcessRadioRxDone+0x5cc>)
 80116e2:	2208      	movs	r2, #8
 80116e4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80116e8:	4b29      	ldr	r3, [pc, #164]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 80116ea:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d11d      	bne.n	801172e <ProcessRadioRxDone+0x56e>
 80116f2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80116f6:	f023 031f 	bic.w	r3, r3, #31
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	2ba0      	cmp	r3, #160	; 0xa0
 80116fe:	d116      	bne.n	801172e <ProcessRadioRxDone+0x56e>
 8011700:	4b23      	ldr	r3, [pc, #140]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 8011702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011706:	429a      	cmp	r2, r3
 8011708:	d111      	bne.n	801172e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801170a:	4b21      	ldr	r3, [pc, #132]	; (8011790 <ProcessRadioRxDone+0x5d0>)
 801170c:	2201      	movs	r2, #1
 801170e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011712:	e00c      	b.n	801172e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011714:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011718:	2b08      	cmp	r3, #8
 801171a:	d104      	bne.n	8011726 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 801171c:	4b1b      	ldr	r3, [pc, #108]	; (801178c <ProcessRadioRxDone+0x5cc>)
 801171e:	220a      	movs	r2, #10
 8011720:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011724:	e003      	b.n	801172e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011726:	4b19      	ldr	r3, [pc, #100]	; (801178c <ProcessRadioRxDone+0x5cc>)
 8011728:	2201      	movs	r2, #1
 801172a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4a16      	ldr	r2, [pc, #88]	; (801178c <ProcessRadioRxDone+0x5cc>)
 8011732:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a14      	ldr	r2, [pc, #80]	; (801178c <ProcessRadioRxDone+0x5cc>)
 801173a:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 801173e:	f7ff fd19 	bl	8011174 <PrepareRxDoneAbort>
                return;
 8011742:	e184      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011744:	78fa      	ldrb	r2, [r7, #3]
 8011746:	6879      	ldr	r1, [r7, #4]
 8011748:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 801174c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	460b      	mov	r3, r1
 8011754:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011758:	f005 fc80 	bl	801705c <LoRaMacCryptoUnsecureMessage>
 801175c:	4603      	mov	r3, r0
 801175e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011762:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011766:	2b00      	cmp	r3, #0
 8011768:	d016      	beq.n	8011798 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801176a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801176e:	2b02      	cmp	r3, #2
 8011770:	d104      	bne.n	801177c <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011772:	4b06      	ldr	r3, [pc, #24]	; (801178c <ProcessRadioRxDone+0x5cc>)
 8011774:	220b      	movs	r2, #11
 8011776:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 801177a:	e003      	b.n	8011784 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801177c:	4b03      	ldr	r3, [pc, #12]	; (801178c <ProcessRadioRxDone+0x5cc>)
 801177e:	220c      	movs	r2, #12
 8011780:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 8011784:	f7ff fcf6 	bl	8011174 <PrepareRxDoneAbort>
                return;
 8011788:	e161      	b.n	8011a4e <ProcessRadioRxDone+0x88e>
 801178a:	bf00      	nop
 801178c:	20000dfc 	.word	0x20000dfc
 8011790:	20001308 	.word	0x20001308
 8011794:	20001034 	.word	0x20001034
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011798:	4bae      	ldr	r3, [pc, #696]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801179a:	2200      	movs	r2, #0
 801179c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 80117a0:	4aac      	ldr	r2, [pc, #688]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80117a6:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80117aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80117ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	461a      	mov	r2, r3
 80117b6:	4ba7      	ldr	r3, [pc, #668]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117b8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 80117bc:	4ba5      	ldr	r3, [pc, #660]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117be:	2200      	movs	r2, #0
 80117c0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 80117c4:	4ba3      	ldr	r3, [pc, #652]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117c6:	2200      	movs	r2, #0
 80117c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4aa1      	ldr	r2, [pc, #644]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117d0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a9f      	ldr	r2, [pc, #636]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117d8:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80117dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80117e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	bf14      	ite	ne
 80117ea:	2301      	movne	r3, #1
 80117ec:	2300      	moveq	r3, #0
 80117ee:	b2da      	uxtb	r2, r3
 80117f0:	4b98      	ldr	r3, [pc, #608]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117f2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117f6:	4b97      	ldr	r3, [pc, #604]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80117f8:	2200      	movs	r2, #0
 80117fa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80117fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011802:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011806:	b2db      	uxtb	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	bf14      	ite	ne
 801180c:	2301      	movne	r3, #1
 801180e:	2300      	moveq	r3, #0
 8011810:	b2da      	uxtb	r2, r3
 8011812:	4b90      	ldr	r3, [pc, #576]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011814:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011818:	4b8e      	ldr	r3, [pc, #568]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801181a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801181e:	2b00      	cmp	r3, #0
 8011820:	d004      	beq.n	801182c <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011822:	4b8c      	ldr	r3, [pc, #560]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011824:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011828:	2b01      	cmp	r3, #1
 801182a:	d102      	bne.n	8011832 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801182c:	4b8a      	ldr	r3, [pc, #552]	; (8011a58 <ProcessRadioRxDone+0x898>)
 801182e:	2200      	movs	r2, #0
 8011830:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011832:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8011836:	2b01      	cmp	r3, #1
 8011838:	d104      	bne.n	8011844 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801183a:	4b86      	ldr	r3, [pc, #536]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801183c:	2202      	movs	r2, #2
 801183e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011842:	e01f      	b.n	8011884 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011844:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011848:	f023 031f 	bic.w	r3, r3, #31
 801184c:	b2db      	uxtb	r3, r3
 801184e:	2ba0      	cmp	r3, #160	; 0xa0
 8011850:	d110      	bne.n	8011874 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011852:	4b81      	ldr	r3, [pc, #516]	; (8011a58 <ProcessRadioRxDone+0x898>)
 8011854:	2201      	movs	r2, #1
 8011856:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801185a:	4b7f      	ldr	r3, [pc, #508]	; (8011a58 <ProcessRadioRxDone+0x898>)
 801185c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011860:	2b00      	cmp	r3, #0
 8011862:	d102      	bne.n	801186a <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011866:	4a7c      	ldr	r2, [pc, #496]	; (8011a58 <ProcessRadioRxDone+0x898>)
 8011868:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801186a:	4b7a      	ldr	r3, [pc, #488]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801186c:	2201      	movs	r2, #1
 801186e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011872:	e007      	b.n	8011884 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011874:	4b78      	ldr	r3, [pc, #480]	; (8011a58 <ProcessRadioRxDone+0x898>)
 8011876:	2200      	movs	r2, #0
 8011878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801187c:	4b75      	ldr	r3, [pc, #468]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801187e:	2200      	movs	r2, #0
 8011880:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011884:	4b73      	ldr	r3, [pc, #460]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011886:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801188a:	4a72      	ldr	r2, [pc, #456]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801188c:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8011890:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8011894:	4618      	mov	r0, r3
 8011896:	f001 fee9 	bl	801366c <RemoveMacCommands>

            switch( fType )
 801189a:	78bb      	ldrb	r3, [r7, #2]
 801189c:	2b03      	cmp	r3, #3
 801189e:	d874      	bhi.n	801198a <ProcessRadioRxDone+0x7ca>
 80118a0:	a201      	add	r2, pc, #4	; (adr r2, 80118a8 <ProcessRadioRxDone+0x6e8>)
 80118a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a6:	bf00      	nop
 80118a8:	080118b9 	.word	0x080118b9
 80118ac:	08011909 	.word	0x08011909
 80118b0:	0801193f 	.word	0x0801193f
 80118b4:	08011965 	.word	0x08011965
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80118b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80118bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	461c      	mov	r4, r3
 80118c4:	4b63      	ldr	r3, [pc, #396]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80118c6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80118ca:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 80118ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80118d2:	f102 0010 	add.w	r0, r2, #16
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	460b      	mov	r3, r1
 80118da:	4622      	mov	r2, r4
 80118dc:	2100      	movs	r1, #0
 80118de:	f000 fee5 	bl	80126ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80118e2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80118e6:	4b5b      	ldr	r3, [pc, #364]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80118e8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80118ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118ee:	4a59      	ldr	r2, [pc, #356]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80118f0:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80118f4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80118f8:	4b56      	ldr	r3, [pc, #344]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80118fa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80118fe:	4b55      	ldr	r3, [pc, #340]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011900:	2201      	movs	r2, #1
 8011902:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8011906:	e047      	b.n	8011998 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011908:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801190c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011910:	b2db      	uxtb	r3, r3
 8011912:	461c      	mov	r4, r3
 8011914:	4b4f      	ldr	r3, [pc, #316]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011916:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801191a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 801191e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011922:	f102 0010 	add.w	r0, r2, #16
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	460b      	mov	r3, r1
 801192a:	4622      	mov	r2, r4
 801192c:	2100      	movs	r1, #0
 801192e:	f000 febd 	bl	80126ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011932:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011936:	4b47      	ldr	r3, [pc, #284]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011938:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 801193c:	e02c      	b.n	8011998 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 801193e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011940:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011944:	4b43      	ldr	r3, [pc, #268]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011946:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801194a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	460b      	mov	r3, r1
 8011952:	2100      	movs	r1, #0
 8011954:	f000 feaa 	bl	80126ac <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011958:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801195c:	4b3d      	ldr	r3, [pc, #244]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801195e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011962:	e019      	b.n	8011998 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011964:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011968:	4b3a      	ldr	r3, [pc, #232]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801196a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011970:	4a38      	ldr	r2, [pc, #224]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011972:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011976:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801197a:	4b36      	ldr	r3, [pc, #216]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801197c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011980:	4b34      	ldr	r3, [pc, #208]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011982:	2201      	movs	r2, #1
 8011984:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8011988:	e006      	b.n	8011998 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801198a:	4b32      	ldr	r3, [pc, #200]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801198c:	2201      	movs	r2, #1
 801198e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8011992:	f7ff fbef 	bl	8011174 <PrepareRxDoneAbort>
                    break;
 8011996:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011998:	4a2e      	ldr	r2, [pc, #184]	; (8011a54 <ProcessRadioRxDone+0x894>)
 801199a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801199e:	f043 0302 	orr.w	r3, r3, #2
 80119a2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 80119a6:	e033      	b.n	8011a10 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80119a8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80119ae:	18d1      	adds	r1, r2, r3
 80119b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	b29b      	uxth	r3, r3
 80119be:	461a      	mov	r2, r3
 80119c0:	4826      	ldr	r0, [pc, #152]	; (8011a5c <ProcessRadioRxDone+0x89c>)
 80119c2:	f008 fa8e 	bl	8019ee2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80119c6:	4b23      	ldr	r3, [pc, #140]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80119c8:	2203      	movs	r2, #3
 80119ca:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80119ce:	4b21      	ldr	r3, [pc, #132]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80119d6:	4b1f      	ldr	r3, [pc, #124]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80119d8:	4a20      	ldr	r2, [pc, #128]	; (8011a5c <ProcessRadioRxDone+0x89c>)
 80119da:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80119de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	4b19      	ldr	r3, [pc, #100]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80119ee:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80119f2:	4a18      	ldr	r2, [pc, #96]	; (8011a54 <ProcessRadioRxDone+0x894>)
 80119f4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8011a00:	e006      	b.n	8011a10 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a02:	4b14      	ldr	r3, [pc, #80]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011a04:	2201      	movs	r2, #1
 8011a06:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8011a0a:	f7ff fbb3 	bl	8011174 <PrepareRxDoneAbort>
            break;
 8011a0e:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011a10:	4b10      	ldr	r3, [pc, #64]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011a12:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d008      	beq.n	8011a2c <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011a1a:	4b0e      	ldr	r3, [pc, #56]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011a1c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00b      	beq.n	8011a3c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011a24:	2000      	movs	r0, #0
 8011a26:	f000 fca9 	bl	801237c <OnAckTimeoutTimerEvent>
 8011a2a:	e007      	b.n	8011a3c <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011a2c:	4b0a      	ldr	r3, [pc, #40]	; (8011a58 <ProcessRadioRxDone+0x898>)
 8011a2e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d102      	bne.n	8011a3c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011a36:	2000      	movs	r0, #0
 8011a38:	f000 fca0 	bl	801237c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011a3c:	4a05      	ldr	r2, [pc, #20]	; (8011a54 <ProcessRadioRxDone+0x894>)
 8011a3e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011a42:	f043 0320 	orr.w	r3, r3, #32
 8011a46:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011a4a:	f7ff fae1 	bl	8011010 <UpdateRxSlotIdleState>
}
 8011a4e:	3788      	adds	r7, #136	; 0x88
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bdb0      	pop	{r4, r5, r7, pc}
 8011a54:	20000dfc 	.word	0x20000dfc
 8011a58:	20001308 	.word	0x20001308
 8011a5c:	20001034 	.word	0x20001034

08011a60 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011a64:	4b11      	ldr	r3, [pc, #68]	; (8011aac <ProcessRadioTxTimeout+0x4c>)
 8011a66:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011a6a:	2b02      	cmp	r3, #2
 8011a6c:	d002      	beq.n	8011a74 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011a6e:	4b10      	ldr	r3, [pc, #64]	; (8011ab0 <ProcessRadioTxTimeout+0x50>)
 8011a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a72:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011a74:	f7ff facc 	bl	8011010 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011a78:	4b0e      	ldr	r3, [pc, #56]	; (8011ab4 <ProcessRadioTxTimeout+0x54>)
 8011a7a:	2202      	movs	r2, #2
 8011a7c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011a80:	2002      	movs	r0, #2
 8011a82:	f004 fc63 	bl	801634c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011a86:	4b0b      	ldr	r3, [pc, #44]	; (8011ab4 <ProcessRadioTxTimeout+0x54>)
 8011a88:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d003      	beq.n	8011a98 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8011a90:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <ProcessRadioTxTimeout+0x54>)
 8011a92:	2201      	movs	r2, #1
 8011a94:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011a98:	4a06      	ldr	r2, [pc, #24]	; (8011ab4 <ProcessRadioTxTimeout+0x54>)
 8011a9a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011a9e:	f043 0320 	orr.w	r3, r3, #32
 8011aa2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 8011aa6:	bf00      	nop
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	20001308 	.word	0x20001308
 8011ab0:	0801fa3c 	.word	0x0801fa3c
 8011ab4:	20000dfc 	.word	0x20000dfc

08011ab8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	4603      	mov	r3, r0
 8011ac0:	460a      	mov	r2, r1
 8011ac2:	71fb      	strb	r3, [r7, #7]
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011acc:	4b40      	ldr	r3, [pc, #256]	; (8011bd0 <HandleRadioRxErrorTimeout+0x118>)
 8011ace:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011ad2:	2b02      	cmp	r3, #2
 8011ad4:	d002      	beq.n	8011adc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011ad6:	4b3f      	ldr	r3, [pc, #252]	; (8011bd4 <HandleRadioRxErrorTimeout+0x11c>)
 8011ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ada:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011adc:	f003 ff97 	bl	8015a0e <LoRaMacClassBIsBeaconExpected>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d007      	beq.n	8011af6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011ae6:	2002      	movs	r0, #2
 8011ae8:	f003 ff45 	bl	8015976 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011aec:	2000      	movs	r0, #0
 8011aee:	f003 ff67 	bl	80159c0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011af2:	2301      	movs	r3, #1
 8011af4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011af6:	4b36      	ldr	r3, [pc, #216]	; (8011bd0 <HandleRadioRxErrorTimeout+0x118>)
 8011af8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d119      	bne.n	8011b34 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011b00:	f003 ff8c 	bl	8015a1c <LoRaMacClassBIsPingExpected>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d007      	beq.n	8011b1a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	f003 ff3d 	bl	801598a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011b10:	2000      	movs	r0, #0
 8011b12:	f003 ff5e 	bl	80159d2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8011b16:	2301      	movs	r3, #1
 8011b18:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b1a:	f003 ff86 	bl	8015a2a <LoRaMacClassBIsMulticastExpected>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d007      	beq.n	8011b34 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011b24:	2000      	movs	r0, #0
 8011b26:	f003 ff3a 	bl	801599e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011b2a:	2000      	movs	r0, #0
 8011b2c:	f003 ff5a 	bl	80159e4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011b30:	2301      	movs	r3, #1
 8011b32:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
 8011b36:	f083 0301 	eor.w	r3, r3, #1
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d040      	beq.n	8011bc2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011b40:	4b25      	ldr	r3, [pc, #148]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b42:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d122      	bne.n	8011b90 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011b4a:	4b23      	ldr	r3, [pc, #140]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b4c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d003      	beq.n	8011b5c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011b54:	4a20      	ldr	r2, [pc, #128]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b56:	79fb      	ldrb	r3, [r7, #7]
 8011b58:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011b5c:	79fb      	ldrb	r3, [r7, #7]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f004 fbf4 	bl	801634c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011b64:	4b1a      	ldr	r3, [pc, #104]	; (8011bd0 <HandleRadioRxErrorTimeout+0x118>)
 8011b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f00c fc31 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	4b19      	ldr	r3, [pc, #100]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b72:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d323      	bcc.n	8011bc2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011b7a:	4818      	ldr	r0, [pc, #96]	; (8011bdc <HandleRadioRxErrorTimeout+0x124>)
 8011b7c:	f00c fafc 	bl	801e178 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011b80:	4a15      	ldr	r2, [pc, #84]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b82:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011b86:	f043 0320 	orr.w	r3, r3, #32
 8011b8a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8011b8e:	e018      	b.n	8011bc2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011b90:	4b11      	ldr	r3, [pc, #68]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b92:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d003      	beq.n	8011ba2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011b9a:	4a0f      	ldr	r2, [pc, #60]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011b9c:	79bb      	ldrb	r3, [r7, #6]
 8011b9e:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011ba2:	79bb      	ldrb	r3, [r7, #6]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f004 fbd1 	bl	801634c <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011baa:	4b09      	ldr	r3, [pc, #36]	; (8011bd0 <HandleRadioRxErrorTimeout+0x118>)
 8011bac:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011bb0:	2b02      	cmp	r3, #2
 8011bb2:	d006      	beq.n	8011bc2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011bb4:	4a08      	ldr	r2, [pc, #32]	; (8011bd8 <HandleRadioRxErrorTimeout+0x120>)
 8011bb6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011bba:	f043 0320 	orr.w	r3, r3, #32
 8011bbe:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011bc2:	f7ff fa25 	bl	8011010 <UpdateRxSlotIdleState>
}
 8011bc6:	bf00      	nop
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	20001308 	.word	0x20001308
 8011bd4:	0801fa3c 	.word	0x0801fa3c
 8011bd8:	20000dfc 	.word	0x20000dfc
 8011bdc:	20001194 	.word	0x20001194

08011be0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011be4:	2106      	movs	r1, #6
 8011be6:	2005      	movs	r0, #5
 8011be8:	f7ff ff66 	bl	8011ab8 <HandleRadioRxErrorTimeout>
}
 8011bec:	bf00      	nop
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	2003      	movs	r0, #3
 8011bf8:	f7ff ff5e 	bl	8011ab8 <HandleRadioRxErrorTimeout>
}
 8011bfc:	bf00      	nop
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c06:	f3ef 8310 	mrs	r3, PRIMASK
 8011c0a:	607b      	str	r3, [r7, #4]
  return(result);
 8011c0c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011c0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011c10:	b672      	cpsid	i
}
 8011c12:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011c14:	4b1d      	ldr	r3, [pc, #116]	; (8011c8c <LoRaMacHandleIrqEvents+0x8c>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011c1a:	4b1c      	ldr	r3, [pc, #112]	; (8011c8c <LoRaMacHandleIrqEvents+0x8c>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	601a      	str	r2, [r3, #0]
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	f383 8810 	msr	PRIMASK, r3
}
 8011c2a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d027      	beq.n	8011c82 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011c32:	783b      	ldrb	r3, [r7, #0]
 8011c34:	f003 0310 	and.w	r3, r3, #16
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d001      	beq.n	8011c42 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011c3e:	f7ff f9ff 	bl	8011040 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011c42:	783b      	ldrb	r3, [r7, #0]
 8011c44:	f003 0308 	and.w	r3, r3, #8
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d001      	beq.n	8011c52 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011c4e:	f7ff fab7 	bl	80111c0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011c52:	783b      	ldrb	r3, [r7, #0]
 8011c54:	f003 0304 	and.w	r3, r3, #4
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011c5e:	f7ff feff 	bl	8011a60 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011c62:	783b      	ldrb	r3, [r7, #0]
 8011c64:	f003 0302 	and.w	r3, r3, #2
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d001      	beq.n	8011c72 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011c6e:	f7ff ffb7 	bl	8011be0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011c72:	783b      	ldrb	r3, [r7, #0]
 8011c74:	f003 0301 	and.w	r3, r3, #1
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d001      	beq.n	8011c82 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011c7e:	f7ff ffb7 	bl	8011bf0 <ProcessRadioRxTimeout>
        }
    }
}
 8011c82:	bf00      	nop
 8011c84:	3710      	adds	r7, #16
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	20002158 	.word	0x20002158

08011c90 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011c90:	b480      	push	{r7}
 8011c92:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011c94:	4b08      	ldr	r3, [pc, #32]	; (8011cb8 <LoRaMacIsBusy+0x28>)
 8011c96:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d106      	bne.n	8011cac <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011c9e:	4b06      	ldr	r3, [pc, #24]	; (8011cb8 <LoRaMacIsBusy+0x28>)
 8011ca0:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d101      	bne.n	8011cac <LoRaMacIsBusy+0x1c>
    {
        return false;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	e000      	b.n	8011cae <LoRaMacIsBusy+0x1e>
    }
    return true;
 8011cac:	2301      	movs	r3, #1
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bc80      	pop	{r7}
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	20000dfc 	.word	0x20000dfc

08011cbc <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011cc6:	4a04      	ldr	r2, [pc, #16]	; (8011cd8 <LoRaMacEnableRequests+0x1c>)
 8011cc8:	79fb      	ldrb	r3, [r7, #7]
 8011cca:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 8011cce:	bf00      	nop
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bc80      	pop	{r7}
 8011cd6:	4770      	bx	lr
 8011cd8:	20000dfc 	.word	0x20000dfc

08011cdc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011ce2:	4b2c      	ldr	r3, [pc, #176]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011ce4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011ce8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011cea:	4b2a      	ldr	r3, [pc, #168]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011cec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d14a      	bne.n	8011d8a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011cf4:	4b27      	ldr	r3, [pc, #156]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011cf6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d006      	beq.n	8011d12 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011d04:	4a23      	ldr	r2, [pc, #140]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011d06:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011d0a:	f36f 0300 	bfc	r3, #0, #1
 8011d0e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d12:	4b20      	ldr	r3, [pc, #128]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011d14:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011d18:	f003 0304 	and.w	r3, r3, #4
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d006      	beq.n	8011d30 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011d22:	4a1c      	ldr	r2, [pc, #112]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011d24:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011d28:	f36f 0382 	bfc	r3, #2, #1
 8011d2c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011d30:	2001      	movs	r0, #1
 8011d32:	f7ff ffc3 	bl	8011cbc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011d36:	793b      	ldrb	r3, [r7, #4]
 8011d38:	f003 0301 	and.w	r3, r3, #1
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d005      	beq.n	8011d4e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011d42:	4b14      	ldr	r3, [pc, #80]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011d44:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4813      	ldr	r0, [pc, #76]	; (8011d98 <LoRaMacHandleRequestEvents+0xbc>)
 8011d4c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011d4e:	793b      	ldrb	r3, [r7, #4]
 8011d50:	f003 0304 	and.w	r3, r3, #4
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00e      	beq.n	8011d78 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011d5a:	4810      	ldr	r0, [pc, #64]	; (8011d9c <LoRaMacHandleRequestEvents+0xc0>)
 8011d5c:	f004 fb44 	bl	80163e8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011d60:	f004 fb8e 	bl	8016480 <LoRaMacConfirmQueueGetCnt>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d006      	beq.n	8011d78 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011d6a:	4a0a      	ldr	r2, [pc, #40]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011d6c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011d70:	f043 0304 	orr.w	r3, r3, #4
 8011d74:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011d78:	f003 fe75 	bl	8015a66 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011d7c:	4a05      	ldr	r2, [pc, #20]	; (8011d94 <LoRaMacHandleRequestEvents+0xb8>)
 8011d7e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011d82:	f36f 1345 	bfc	r3, #5, #1
 8011d86:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 8011d8a:	bf00      	nop
 8011d8c:	3708      	adds	r7, #8
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	20000dfc 	.word	0x20000dfc
 8011d98:	20001234 	.word	0x20001234
 8011d9c:	20001248 	.word	0x20001248

08011da0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8011da6:	4b07      	ldr	r3, [pc, #28]	; (8011dc4 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 8011da8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d105      	bne.n	8011dbc <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8011db0:	2300      	movs	r3, #0
 8011db2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8011db4:	1dfb      	adds	r3, r7, #7
 8011db6:	4618      	mov	r0, r3
 8011db8:	f004 f8fc 	bl	8015fb4 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 8011dbc:	bf00      	nop
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	20000dfc 	.word	0x20000dfc

08011dc8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011dcc:	4b16      	ldr	r3, [pc, #88]	; (8011e28 <LoRaMacHandleIndicationEvents+0x60>)
 8011dce:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011dd2:	f003 0308 	and.w	r3, r3, #8
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d00d      	beq.n	8011df8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011ddc:	4a12      	ldr	r2, [pc, #72]	; (8011e28 <LoRaMacHandleIndicationEvents+0x60>)
 8011dde:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011de2:	f36f 03c3 	bfc	r3, #3, #1
 8011de6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011dea:	4b0f      	ldr	r3, [pc, #60]	; (8011e28 <LoRaMacHandleIndicationEvents+0x60>)
 8011dec:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	490e      	ldr	r1, [pc, #56]	; (8011e2c <LoRaMacHandleIndicationEvents+0x64>)
 8011df4:	480e      	ldr	r0, [pc, #56]	; (8011e30 <LoRaMacHandleIndicationEvents+0x68>)
 8011df6:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011df8:	4b0b      	ldr	r3, [pc, #44]	; (8011e28 <LoRaMacHandleIndicationEvents+0x60>)
 8011dfa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011dfe:	f003 0302 	and.w	r3, r3, #2
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00d      	beq.n	8011e24 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011e08:	4a07      	ldr	r2, [pc, #28]	; (8011e28 <LoRaMacHandleIndicationEvents+0x60>)
 8011e0a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011e0e:	f36f 0341 	bfc	r3, #1, #1
 8011e12:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011e16:	4b04      	ldr	r3, [pc, #16]	; (8011e28 <LoRaMacHandleIndicationEvents+0x60>)
 8011e18:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4903      	ldr	r1, [pc, #12]	; (8011e2c <LoRaMacHandleIndicationEvents+0x64>)
 8011e20:	4804      	ldr	r0, [pc, #16]	; (8011e34 <LoRaMacHandleIndicationEvents+0x6c>)
 8011e22:	4798      	blx	r3
    }
}
 8011e24:	bf00      	nop
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	20000dfc 	.word	0x20000dfc
 8011e2c:	2000127c 	.word	0x2000127c
 8011e30:	2000125c 	.word	0x2000125c
 8011e34:	20001218 	.word	0x20001218

08011e38 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011e3e:	4b32      	ldr	r3, [pc, #200]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e40:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011e44:	f003 0301 	and.w	r3, r3, #1
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d058      	beq.n	8011f00 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011e52:	2300      	movs	r3, #0
 8011e54:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011e56:	4b2c      	ldr	r3, [pc, #176]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e58:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d004      	beq.n	8011e6a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011e60:	4b29      	ldr	r3, [pc, #164]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e62:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	d104      	bne.n	8011e74 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011e6a:	f002 f87b 	bl	8013f64 <CheckRetransUnconfirmedUplink>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	71fb      	strb	r3, [r7, #7]
 8011e72:	e020      	b.n	8011eb6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011e74:	4b24      	ldr	r3, [pc, #144]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e76:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d11b      	bne.n	8011eb6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011e7e:	4b22      	ldr	r3, [pc, #136]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011e80:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d014      	beq.n	8011eb2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011e88:	f002 f898 	bl	8013fbc <CheckRetransConfirmedUplink>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011e90:	4b1e      	ldr	r3, [pc, #120]	; (8011f0c <LoRaMacHandleMcpsRequest+0xd4>)
 8011e92:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10d      	bne.n	8011eb6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011e9a:	79fb      	ldrb	r3, [r7, #7]
 8011e9c:	f083 0301 	eor.w	r3, r3, #1
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d002      	beq.n	8011eac <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011ea6:	f002 f905 	bl	80140b4 <AckTimeoutRetriesProcess>
 8011eaa:	e004      	b.n	8011eb6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011eac:	f002 f940 	bl	8014130 <AckTimeoutRetriesFinalize>
 8011eb0:	e001      	b.n	8011eb6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011eb6:	79fb      	ldrb	r3, [r7, #7]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d00d      	beq.n	8011ed8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011ebc:	4814      	ldr	r0, [pc, #80]	; (8011f10 <LoRaMacHandleMcpsRequest+0xd8>)
 8011ebe:	f00c f95b 	bl	801e178 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011ec2:	4b11      	ldr	r3, [pc, #68]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ec4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ec8:	f023 0320 	bic.w	r3, r3, #32
 8011ecc:	4a0e      	ldr	r2, [pc, #56]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ece:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011ed2:	f002 f895 	bl	8014000 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011ed6:	e013      	b.n	8011f00 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011ed8:	79bb      	ldrb	r3, [r7, #6]
 8011eda:	f083 0301 	eor.w	r3, r3, #1
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00d      	beq.n	8011f00 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011ee4:	4a08      	ldr	r2, [pc, #32]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ee6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011eea:	f36f 1345 	bfc	r3, #5, #1
 8011eee:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8011efa:	2000      	movs	r0, #0
 8011efc:	f000 f994 	bl	8012228 <OnTxDelayedTimerEvent>
}
 8011f00:	bf00      	nop
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	20000dfc 	.word	0x20000dfc
 8011f0c:	20001308 	.word	0x20001308
 8011f10:	20001164 	.word	0x20001164

08011f14 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011f18:	4b1b      	ldr	r3, [pc, #108]	; (8011f88 <LoRaMacHandleMlmeRequest+0x74>)
 8011f1a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011f1e:	f003 0304 	and.w	r3, r3, #4
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d02c      	beq.n	8011f82 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011f28:	2001      	movs	r0, #1
 8011f2a:	f004 fa43 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d012      	beq.n	8011f5a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011f34:	2001      	movs	r0, #1
 8011f36:	f004 f9df 	bl	80162f8 <LoRaMacConfirmQueueGetStatus>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d103      	bne.n	8011f48 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011f40:	4b11      	ldr	r3, [pc, #68]	; (8011f88 <LoRaMacHandleMlmeRequest+0x74>)
 8011f42:	2200      	movs	r2, #0
 8011f44:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011f48:	4b0f      	ldr	r3, [pc, #60]	; (8011f88 <LoRaMacHandleMlmeRequest+0x74>)
 8011f4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f4e:	f023 0302 	bic.w	r3, r3, #2
 8011f52:	4a0d      	ldr	r2, [pc, #52]	; (8011f88 <LoRaMacHandleMlmeRequest+0x74>)
 8011f54:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011f58:	e013      	b.n	8011f82 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011f5a:	2005      	movs	r0, #5
 8011f5c:	f004 fa2a 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d105      	bne.n	8011f72 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011f66:	2006      	movs	r0, #6
 8011f68:	f004 fa24 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8011f6c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d007      	beq.n	8011f82 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011f72:	4b05      	ldr	r3, [pc, #20]	; (8011f88 <LoRaMacHandleMlmeRequest+0x74>)
 8011f74:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f78:	f023 0302 	bic.w	r3, r3, #2
 8011f7c:	4a02      	ldr	r2, [pc, #8]	; (8011f88 <LoRaMacHandleMlmeRequest+0x74>)
 8011f7e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011f82:	bf00      	nop
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	20000dfc 	.word	0x20000dfc

08011f8c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011f90:	200c      	movs	r0, #12
 8011f92:	f004 fa0f 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d019      	beq.n	8011fd0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011f9c:	4b0e      	ldr	r3, [pc, #56]	; (8011fd8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011f9e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011fa2:	f003 0301 	and.w	r3, r3, #1
 8011fa6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d111      	bne.n	8011fd0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011fac:	4b0a      	ldr	r3, [pc, #40]	; (8011fd8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011fae:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8011fb2:	f003 0304 	and.w	r3, r3, #4
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d009      	beq.n	8011fd0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011fbc:	4b06      	ldr	r3, [pc, #24]	; (8011fd8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011fbe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fc2:	f023 0302 	bic.w	r3, r3, #2
 8011fc6:	4a04      	ldr	r2, [pc, #16]	; (8011fd8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011fc8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	e000      	b.n	8011fd2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	20000dfc 	.word	0x20000dfc

08011fdc <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011fdc:	b480      	push	{r7}
 8011fde:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011fe0:	4b0d      	ldr	r3, [pc, #52]	; (8012018 <LoRaMacCheckForRxAbort+0x3c>)
 8011fe2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00f      	beq.n	801200e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011fee:	4b0a      	ldr	r3, [pc, #40]	; (8012018 <LoRaMacCheckForRxAbort+0x3c>)
 8011ff0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ff8:	4a07      	ldr	r2, [pc, #28]	; (8012018 <LoRaMacCheckForRxAbort+0x3c>)
 8011ffa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ffe:	4b06      	ldr	r3, [pc, #24]	; (8012018 <LoRaMacCheckForRxAbort+0x3c>)
 8012000:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012004:	f023 0302 	bic.w	r3, r3, #2
 8012008:	4a03      	ldr	r2, [pc, #12]	; (8012018 <LoRaMacCheckForRxAbort+0x3c>)
 801200a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801200e:	bf00      	nop
 8012010:	46bd      	mov	sp, r7
 8012012:	bc80      	pop	{r7}
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop
 8012018:	20000dfc 	.word	0x20000dfc

0801201c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8012024:	2300      	movs	r3, #0
 8012026:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8012028:	2300      	movs	r3, #0
 801202a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801202c:	4b50      	ldr	r3, [pc, #320]	; (8012170 <LoRaMacHandleNvm+0x154>)
 801202e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012032:	2b00      	cmp	r3, #0
 8012034:	f040 8098 	bne.w	8012168 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2124      	movs	r1, #36	; 0x24
 801203c:	4618      	mov	r0, r3
 801203e:	f007 ffa5 	bl	8019f8c <Crc32>
 8012042:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012048:	68ba      	ldr	r2, [r7, #8]
 801204a:	429a      	cmp	r2, r3
 801204c:	d006      	beq.n	801205c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8012054:	89fb      	ldrh	r3, [r7, #14]
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	3328      	adds	r3, #40	; 0x28
 8012060:	2114      	movs	r1, #20
 8012062:	4618      	mov	r0, r3
 8012064:	f007 ff92 	bl	8019f8c <Crc32>
 8012068:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801206e:	68ba      	ldr	r2, [r7, #8]
 8012070:	429a      	cmp	r2, r3
 8012072:	d006      	beq.n	8012082 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801207a:	89fb      	ldrh	r3, [r7, #14]
 801207c:	f043 0302 	orr.w	r3, r3, #2
 8012080:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	3340      	adds	r3, #64	; 0x40
 8012086:	21dc      	movs	r1, #220	; 0xdc
 8012088:	4618      	mov	r0, r3
 801208a:	f007 ff7f 	bl	8019f8c <Crc32>
 801208e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	429a      	cmp	r2, r3
 801209a:	d007      	beq.n	80120ac <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	68ba      	ldr	r2, [r7, #8]
 80120a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80120a4:	89fb      	ldrh	r3, [r7, #14]
 80120a6:	f043 0304 	orr.w	r3, r3, #4
 80120aa:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80120b2:	21bc      	movs	r1, #188	; 0xbc
 80120b4:	4618      	mov	r0, r3
 80120b6:	f007 ff69 	bl	8019f8c <Crc32>
 80120ba:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80120c2:	68ba      	ldr	r2, [r7, #8]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d007      	beq.n	80120d8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	68ba      	ldr	r2, [r7, #8]
 80120cc:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80120d0:	89fb      	ldrh	r3, [r7, #14]
 80120d2:	f043 0308 	orr.w	r3, r3, #8
 80120d6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80120de:	2190      	movs	r1, #144	; 0x90
 80120e0:	4618      	mov	r0, r3
 80120e2:	f007 ff53 	bl	8019f8c <Crc32>
 80120e6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80120ee:	68ba      	ldr	r2, [r7, #8]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d007      	beq.n	8012104 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	68ba      	ldr	r2, [r7, #8]
 80120f8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80120fc:	89fb      	ldrh	r3, [r7, #14]
 80120fe:	f043 0310 	orr.w	r3, r3, #16
 8012102:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801210a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 801210e:	4618      	mov	r0, r3
 8012110:	f007 ff3c 	bl	8019f8c <Crc32>
 8012114:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	429a      	cmp	r2, r3
 8012120:	d007      	beq.n	8012132 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	68ba      	ldr	r2, [r7, #8]
 8012126:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801212a:	89fb      	ldrh	r3, [r7, #14]
 801212c:	f043 0320 	orr.w	r3, r3, #32
 8012130:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8012138:	2114      	movs	r1, #20
 801213a:	4618      	mov	r0, r3
 801213c:	f007 ff26 	bl	8019f8c <Crc32>
 8012140:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	429a      	cmp	r2, r3
 801214c:	d007      	beq.n	801215e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8012156:	89fb      	ldrh	r3, [r7, #14]
 8012158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801215c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801215e:	89fb      	ldrh	r3, [r7, #14]
 8012160:	4618      	mov	r0, r3
 8012162:	f001 ff89 	bl	8014078 <CallNvmDataChangeCallback>
 8012166:	e000      	b.n	801216a <LoRaMacHandleNvm+0x14e>
        return;
 8012168:	bf00      	nop
}
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	20000dfc 	.word	0x20000dfc

08012174 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801217a:	2300      	movs	r3, #0
 801217c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801217e:	f7ff fd3f 	bl	8011c00 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012182:	f003 fcd4 	bl	8015b2e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012186:	4b26      	ldr	r3, [pc, #152]	; (8012220 <LoRaMacProcess+0xac>)
 8012188:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801218c:	f003 0320 	and.w	r3, r3, #32
 8012190:	b2db      	uxtb	r3, r3
 8012192:	2b00      	cmp	r3, #0
 8012194:	d025      	beq.n	80121e2 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012196:	2000      	movs	r0, #0
 8012198:	f7ff fd90 	bl	8011cbc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801219c:	f7ff ff1e 	bl	8011fdc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80121a0:	f001 fffa 	bl	8014198 <IsRequestPending>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d006      	beq.n	80121b8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80121aa:	f7ff feef 	bl	8011f8c <LoRaMacCheckForBeaconAcquisition>
 80121ae:	4603      	mov	r3, r0
 80121b0:	461a      	mov	r2, r3
 80121b2:	79fb      	ldrb	r3, [r7, #7]
 80121b4:	4313      	orrs	r3, r2
 80121b6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80121b8:	79fb      	ldrb	r3, [r7, #7]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d103      	bne.n	80121c6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80121be:	f7ff fea9 	bl	8011f14 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80121c2:	f7ff fe39 	bl	8011e38 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80121c6:	f7ff fd89 	bl	8011cdc <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80121ca:	f7ff fde9 	bl	8011da0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80121ce:	2001      	movs	r0, #1
 80121d0:	f7ff fd74 	bl	8011cbc <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80121d4:	4a12      	ldr	r2, [pc, #72]	; (8012220 <LoRaMacProcess+0xac>)
 80121d6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80121da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121de:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 80121e2:	f7ff fdf1 	bl	8011dc8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80121e6:	4b0e      	ldr	r3, [pc, #56]	; (8012220 <LoRaMacProcess+0xac>)
 80121e8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80121ec:	2b02      	cmp	r3, #2
 80121ee:	d101      	bne.n	80121f4 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 80121f0:	f001 fb7e 	bl	80138f0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80121f4:	4b0a      	ldr	r3, [pc, #40]	; (8012220 <LoRaMacProcess+0xac>)
 80121f6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80121fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	d009      	beq.n	8012218 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8012204:	4a06      	ldr	r2, [pc, #24]	; (8012220 <LoRaMacProcess+0xac>)
 8012206:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801220a:	f36f 1386 	bfc	r3, #6, #1
 801220e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8012212:	4804      	ldr	r0, [pc, #16]	; (8012224 <LoRaMacProcess+0xb0>)
 8012214:	f7ff ff02 	bl	801201c <LoRaMacHandleNvm>
    }
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	20000dfc 	.word	0x20000dfc
 8012224:	20001308 	.word	0x20001308

08012228 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012230:	4817      	ldr	r0, [pc, #92]	; (8012290 <OnTxDelayedTimerEvent+0x68>)
 8012232:	f00b ffa1 	bl	801e178 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8012236:	4b17      	ldr	r3, [pc, #92]	; (8012294 <OnTxDelayedTimerEvent+0x6c>)
 8012238:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801223c:	f023 0320 	bic.w	r3, r3, #32
 8012240:	4a14      	ldr	r2, [pc, #80]	; (8012294 <OnTxDelayedTimerEvent+0x6c>)
 8012242:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8012246:	2001      	movs	r0, #1
 8012248:	f001 f8e6 	bl	8013418 <ScheduleTx>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	d018      	beq.n	8012284 <OnTxDelayedTimerEvent+0x5c>
 8012252:	2b0b      	cmp	r3, #11
 8012254:	d016      	beq.n	8012284 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012256:	4b10      	ldr	r3, [pc, #64]	; (8012298 <OnTxDelayedTimerEvent+0x70>)
 8012258:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801225c:	b2da      	uxtb	r2, r3
 801225e:	4b0d      	ldr	r3, [pc, #52]	; (8012294 <OnTxDelayedTimerEvent+0x6c>)
 8012260:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012264:	4b0b      	ldr	r3, [pc, #44]	; (8012294 <OnTxDelayedTimerEvent+0x6c>)
 8012266:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801226a:	4b0a      	ldr	r3, [pc, #40]	; (8012294 <OnTxDelayedTimerEvent+0x6c>)
 801226c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012270:	4b08      	ldr	r3, [pc, #32]	; (8012294 <OnTxDelayedTimerEvent+0x6c>)
 8012272:	2209      	movs	r2, #9
 8012274:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8012278:	2009      	movs	r0, #9
 801227a:	f004 f867 	bl	801634c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801227e:	f001 febf 	bl	8014000 <StopRetransmission>
            break;
 8012282:	e000      	b.n	8012286 <OnTxDelayedTimerEvent+0x5e>
            break;
 8012284:	bf00      	nop
        }
    }
}
 8012286:	bf00      	nop
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20001164 	.word	0x20001164
 8012294:	20000dfc 	.word	0x20000dfc
 8012298:	20001308 	.word	0x20001308

0801229c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80122a4:	4b14      	ldr	r3, [pc, #80]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122a6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80122aa:	4b13      	ldr	r3, [pc, #76]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122ac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80122b0:	4b12      	ldr	r3, [pc, #72]	; (80122fc <OnRxWindow1TimerEvent+0x60>)
 80122b2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80122b6:	b25a      	sxtb	r2, r3
 80122b8:	4b0f      	ldr	r3, [pc, #60]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122ba:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122be:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <OnRxWindow1TimerEvent+0x60>)
 80122c0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80122c4:	4b0c      	ldr	r3, [pc, #48]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122c6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80122ca:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <OnRxWindow1TimerEvent+0x60>)
 80122cc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80122d0:	4b09      	ldr	r3, [pc, #36]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122d2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80122d6:	4b08      	ldr	r3, [pc, #32]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122d8:	2200      	movs	r2, #0
 80122da:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80122de:	4b06      	ldr	r3, [pc, #24]	; (80122f8 <OnRxWindow1TimerEvent+0x5c>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80122e6:	4906      	ldr	r1, [pc, #24]	; (8012300 <OnRxWindow1TimerEvent+0x64>)
 80122e8:	4806      	ldr	r0, [pc, #24]	; (8012304 <OnRxWindow1TimerEvent+0x68>)
 80122ea:	f001 facd 	bl	8013888 <RxWindowSetup>
}
 80122ee:	bf00      	nop
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	20000dfc 	.word	0x20000dfc
 80122fc:	20001308 	.word	0x20001308
 8012300:	200011b4 	.word	0x200011b4
 8012304:	2000117c 	.word	0x2000117c

08012308 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012310:	4b16      	ldr	r3, [pc, #88]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 8012312:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012316:	2b00      	cmp	r3, #0
 8012318:	d023      	beq.n	8012362 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801231a:	4b14      	ldr	r3, [pc, #80]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 801231c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012320:	4b12      	ldr	r3, [pc, #72]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 8012322:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012326:	4b12      	ldr	r3, [pc, #72]	; (8012370 <OnRxWindow2TimerEvent+0x68>)
 8012328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801232a:	4a10      	ldr	r2, [pc, #64]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 801232c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012330:	4b0f      	ldr	r3, [pc, #60]	; (8012370 <OnRxWindow2TimerEvent+0x68>)
 8012332:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012336:	4b0d      	ldr	r3, [pc, #52]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 8012338:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801233c:	4b0c      	ldr	r3, [pc, #48]	; (8012370 <OnRxWindow2TimerEvent+0x68>)
 801233e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012342:	4b0a      	ldr	r3, [pc, #40]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 8012344:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012348:	4b08      	ldr	r3, [pc, #32]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 801234a:	2200      	movs	r2, #0
 801234c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012350:	4b06      	ldr	r3, [pc, #24]	; (801236c <OnRxWindow2TimerEvent+0x64>)
 8012352:	2201      	movs	r2, #1
 8012354:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8012358:	4906      	ldr	r1, [pc, #24]	; (8012374 <OnRxWindow2TimerEvent+0x6c>)
 801235a:	4807      	ldr	r0, [pc, #28]	; (8012378 <OnRxWindow2TimerEvent+0x70>)
 801235c:	f001 fa94 	bl	8013888 <RxWindowSetup>
 8012360:	e000      	b.n	8012364 <OnRxWindow2TimerEvent+0x5c>
        return;
 8012362:	bf00      	nop
}
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	20000dfc 	.word	0x20000dfc
 8012370:	20001308 	.word	0x20001308
 8012374:	200011c8 	.word	0x200011c8
 8012378:	20001194 	.word	0x20001194

0801237c <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012384:	4815      	ldr	r0, [pc, #84]	; (80123dc <OnAckTimeoutTimerEvent+0x60>)
 8012386:	f00b fef7 	bl	801e178 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801238a:	4b15      	ldr	r3, [pc, #84]	; (80123e0 <OnAckTimeoutTimerEvent+0x64>)
 801238c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8012390:	2b00      	cmp	r3, #0
 8012392:	d003      	beq.n	801239c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8012394:	4b12      	ldr	r3, [pc, #72]	; (80123e0 <OnAckTimeoutTimerEvent+0x64>)
 8012396:	2201      	movs	r2, #1
 8012398:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801239c:	4b11      	ldr	r3, [pc, #68]	; (80123e4 <OnAckTimeoutTimerEvent+0x68>)
 801239e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	d106      	bne.n	80123b4 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80123a6:	4a0e      	ldr	r2, [pc, #56]	; (80123e0 <OnAckTimeoutTimerEvent+0x64>)
 80123a8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80123ac:	f043 0320 	orr.w	r3, r3, #32
 80123b0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80123b4:	4b0a      	ldr	r3, [pc, #40]	; (80123e0 <OnAckTimeoutTimerEvent+0x64>)
 80123b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00a      	beq.n	80123d4 <OnAckTimeoutTimerEvent+0x58>
 80123be:	4b08      	ldr	r3, [pc, #32]	; (80123e0 <OnAckTimeoutTimerEvent+0x64>)
 80123c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123c4:	691b      	ldr	r3, [r3, #16]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d004      	beq.n	80123d4 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80123ca:	4b05      	ldr	r3, [pc, #20]	; (80123e0 <OnAckTimeoutTimerEvent+0x64>)
 80123cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123d0:	691b      	ldr	r3, [r3, #16]
 80123d2:	4798      	blx	r3
    }
}
 80123d4:	bf00      	nop
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	200011f4 	.word	0x200011f4
 80123e0:	20000dfc 	.word	0x20000dfc
 80123e4:	20001308 	.word	0x20001308

080123e8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60ba      	str	r2, [r7, #8]
 80123f0:	607b      	str	r3, [r7, #4]
 80123f2:	4603      	mov	r3, r0
 80123f4:	73fb      	strb	r3, [r7, #15]
 80123f6:	460b      	mov	r3, r1
 80123f8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d005      	beq.n	801240c <GetFCntDown+0x24>
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d002      	beq.n	801240c <GetFCntDown+0x24>
 8012406:	6a3b      	ldr	r3, [r7, #32]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d101      	bne.n	8012410 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801240c:	230a      	movs	r3, #10
 801240e:	e029      	b.n	8012464 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012410:	7bfb      	ldrb	r3, [r7, #15]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d016      	beq.n	8012444 <GetFCntDown+0x5c>
 8012416:	2b01      	cmp	r3, #1
 8012418:	d118      	bne.n	801244c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801241a:	79bb      	ldrb	r3, [r7, #6]
 801241c:	2b01      	cmp	r3, #1
 801241e:	d10d      	bne.n	801243c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d002      	beq.n	801242c <GetFCntDown+0x44>
 8012426:	7bbb      	ldrb	r3, [r7, #14]
 8012428:	2b03      	cmp	r3, #3
 801242a:	d103      	bne.n	8012434 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	2202      	movs	r2, #2
 8012430:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012432:	e00d      	b.n	8012450 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	2201      	movs	r2, #1
 8012438:	701a      	strb	r2, [r3, #0]
            break;
 801243a:	e009      	b.n	8012450 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	2203      	movs	r2, #3
 8012440:	701a      	strb	r2, [r3, #0]
            break;
 8012442:	e005      	b.n	8012450 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	2204      	movs	r2, #4
 8012448:	701a      	strb	r2, [r3, #0]
            break;
 801244a:	e001      	b.n	8012450 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801244c:	2305      	movs	r3, #5
 801244e:	e009      	b.n	8012464 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	7818      	ldrb	r0, [r3, #0]
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	89db      	ldrh	r3, [r3, #14]
 8012458:	461a      	mov	r2, r3
 801245a:	8b39      	ldrh	r1, [r7, #24]
 801245c:	6a3b      	ldr	r3, [r7, #32]
 801245e:	f004 fb9f 	bl	8016ba0 <LoRaMacCryptoGetFCntDown>
 8012462:	4603      	mov	r3, r0
}
 8012464:	4618      	mov	r0, r3
 8012466:	3710      	adds	r7, #16
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801246c:	b5b0      	push	{r4, r5, r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	4603      	mov	r3, r0
 8012474:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012476:	2303      	movs	r3, #3
 8012478:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801247a:	4b61      	ldr	r3, [pc, #388]	; (8012600 <SwitchClass+0x194>)
 801247c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012480:	2b02      	cmp	r3, #2
 8012482:	f000 80a5 	beq.w	80125d0 <SwitchClass+0x164>
 8012486:	2b02      	cmp	r3, #2
 8012488:	f300 80b4 	bgt.w	80125f4 <SwitchClass+0x188>
 801248c:	2b00      	cmp	r3, #0
 801248e:	d003      	beq.n	8012498 <SwitchClass+0x2c>
 8012490:	2b01      	cmp	r3, #1
 8012492:	f000 808f 	beq.w	80125b4 <SwitchClass+0x148>
 8012496:	e0ad      	b.n	80125f4 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012498:	79fb      	ldrb	r3, [r7, #7]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d107      	bne.n	80124ae <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801249e:	4b58      	ldr	r3, [pc, #352]	; (8012600 <SwitchClass+0x194>)
 80124a0:	4a57      	ldr	r2, [pc, #348]	; (8012600 <SwitchClass+0x194>)
 80124a2:	336c      	adds	r3, #108	; 0x6c
 80124a4:	3264      	adds	r2, #100	; 0x64
 80124a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124aa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80124ae:	79fb      	ldrb	r3, [r7, #7]
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d10c      	bne.n	80124ce <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80124b4:	79fb      	ldrb	r3, [r7, #7]
 80124b6:	4618      	mov	r0, r3
 80124b8:	f003 fadb 	bl	8015a72 <LoRaMacClassBSwitchClass>
 80124bc:	4603      	mov	r3, r0
 80124be:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80124c0:	7bfb      	ldrb	r3, [r7, #15]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d103      	bne.n	80124ce <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80124c6:	4a4e      	ldr	r2, [pc, #312]	; (8012600 <SwitchClass+0x194>)
 80124c8:	79fb      	ldrb	r3, [r7, #7]
 80124ca:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 80124ce:	79fb      	ldrb	r3, [r7, #7]
 80124d0:	2b02      	cmp	r3, #2
 80124d2:	f040 808a 	bne.w	80125ea <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80124d6:	4a4a      	ldr	r2, [pc, #296]	; (8012600 <SwitchClass+0x194>)
 80124d8:	79fb      	ldrb	r3, [r7, #7]
 80124da:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80124de:	4a49      	ldr	r2, [pc, #292]	; (8012604 <SwitchClass+0x198>)
 80124e0:	4b48      	ldr	r3, [pc, #288]	; (8012604 <SwitchClass+0x198>)
 80124e2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80124e6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80124ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124ee:	682b      	ldr	r3, [r5, #0]
 80124f0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80124f2:	4b44      	ldr	r3, [pc, #272]	; (8012604 <SwitchClass+0x198>)
 80124f4:	2202      	movs	r2, #2
 80124f6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80124fa:	2300      	movs	r3, #0
 80124fc:	73bb      	strb	r3, [r7, #14]
 80124fe:	e049      	b.n	8012594 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8012500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012504:	4a3e      	ldr	r2, [pc, #248]	; (8012600 <SwitchClass+0x194>)
 8012506:	212c      	movs	r1, #44	; 0x2c
 8012508:	fb01 f303 	mul.w	r3, r1, r3
 801250c:	4413      	add	r3, r2
 801250e:	33da      	adds	r3, #218	; 0xda
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d038      	beq.n	8012588 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8012516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801251a:	4a39      	ldr	r2, [pc, #228]	; (8012600 <SwitchClass+0x194>)
 801251c:	212c      	movs	r1, #44	; 0x2c
 801251e:	fb01 f303 	mul.w	r3, r1, r3
 8012522:	4413      	add	r3, r2
 8012524:	33f0      	adds	r3, #240	; 0xf0
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a35      	ldr	r2, [pc, #212]	; (8012600 <SwitchClass+0x194>)
 801252a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 801252c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012530:	4a33      	ldr	r2, [pc, #204]	; (8012600 <SwitchClass+0x194>)
 8012532:	212c      	movs	r1, #44	; 0x2c
 8012534:	fb01 f303 	mul.w	r3, r1, r3
 8012538:	4413      	add	r3, r2
 801253a:	33f4      	adds	r3, #244	; 0xf4
 801253c:	f993 3000 	ldrsb.w	r3, [r3]
 8012540:	b2da      	uxtb	r2, r3
 8012542:	4b2f      	ldr	r3, [pc, #188]	; (8012600 <SwitchClass+0x194>)
 8012544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012548:	4b2e      	ldr	r3, [pc, #184]	; (8012604 <SwitchClass+0x198>)
 801254a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801254e:	4b2d      	ldr	r3, [pc, #180]	; (8012604 <SwitchClass+0x198>)
 8012550:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012554:	4b2a      	ldr	r3, [pc, #168]	; (8012600 <SwitchClass+0x194>)
 8012556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012558:	4a2a      	ldr	r2, [pc, #168]	; (8012604 <SwitchClass+0x198>)
 801255a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801255e:	4b28      	ldr	r3, [pc, #160]	; (8012600 <SwitchClass+0x194>)
 8012560:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012564:	4b27      	ldr	r3, [pc, #156]	; (8012604 <SwitchClass+0x198>)
 8012566:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801256a:	4b25      	ldr	r3, [pc, #148]	; (8012600 <SwitchClass+0x194>)
 801256c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012570:	4b24      	ldr	r3, [pc, #144]	; (8012604 <SwitchClass+0x198>)
 8012572:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8012576:	4b23      	ldr	r3, [pc, #140]	; (8012604 <SwitchClass+0x198>)
 8012578:	2203      	movs	r2, #3
 801257a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 801257e:	4b21      	ldr	r3, [pc, #132]	; (8012604 <SwitchClass+0x198>)
 8012580:	2201      	movs	r2, #1
 8012582:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8012586:	e009      	b.n	801259c <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801258c:	b2db      	uxtb	r3, r3
 801258e:	3301      	adds	r3, #1
 8012590:	b2db      	uxtb	r3, r3
 8012592:	73bb      	strb	r3, [r7, #14]
 8012594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012598:	2b00      	cmp	r3, #0
 801259a:	ddb1      	ble.n	8012500 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 801259c:	4b19      	ldr	r3, [pc, #100]	; (8012604 <SwitchClass+0x198>)
 801259e:	2200      	movs	r2, #0
 80125a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80125a4:	4b18      	ldr	r3, [pc, #96]	; (8012608 <SwitchClass+0x19c>)
 80125a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80125aa:	f001 f9a1 	bl	80138f0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80125ae:	2300      	movs	r3, #0
 80125b0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80125b2:	e01a      	b.n	80125ea <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f003 fa5b 	bl	8015a72 <LoRaMacClassBSwitchClass>
 80125bc:	4603      	mov	r3, r0
 80125be:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80125c0:	7bfb      	ldrb	r3, [r7, #15]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d113      	bne.n	80125ee <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80125c6:	4a0e      	ldr	r2, [pc, #56]	; (8012600 <SwitchClass+0x194>)
 80125c8:	79fb      	ldrb	r3, [r7, #7]
 80125ca:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 80125ce:	e00e      	b.n	80125ee <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80125d0:	79fb      	ldrb	r3, [r7, #7]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10d      	bne.n	80125f2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80125d6:	4a0a      	ldr	r2, [pc, #40]	; (8012600 <SwitchClass+0x194>)
 80125d8:	79fb      	ldrb	r3, [r7, #7]
 80125da:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80125de:	4b0a      	ldr	r3, [pc, #40]	; (8012608 <SwitchClass+0x19c>)
 80125e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80125e4:	2300      	movs	r3, #0
 80125e6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80125e8:	e003      	b.n	80125f2 <SwitchClass+0x186>
            break;
 80125ea:	bf00      	nop
 80125ec:	e002      	b.n	80125f4 <SwitchClass+0x188>
            break;
 80125ee:	bf00      	nop
 80125f0:	e000      	b.n	80125f4 <SwitchClass+0x188>
            break;
 80125f2:	bf00      	nop
        }
    }

    return status;
 80125f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bdb0      	pop	{r4, r5, r7, pc}
 80125fe:	bf00      	nop
 8012600:	20001308 	.word	0x20001308
 8012604:	20000dfc 	.word	0x20000dfc
 8012608:	0801fa3c 	.word	0x0801fa3c

0801260c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b086      	sub	sp, #24
 8012610:	af00      	add	r7, sp, #0
 8012612:	4603      	mov	r3, r0
 8012614:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012616:	4b10      	ldr	r3, [pc, #64]	; (8012658 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012618:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801261c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801261e:	79fb      	ldrb	r3, [r7, #7]
 8012620:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012622:	230d      	movs	r3, #13
 8012624:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012626:	4b0c      	ldr	r3, [pc, #48]	; (8012658 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012628:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801262c:	2b00      	cmp	r3, #0
 801262e:	d001      	beq.n	8012634 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012630:	230e      	movs	r3, #14
 8012632:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012634:	4b08      	ldr	r3, [pc, #32]	; (8012658 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801263a:	f107 0210 	add.w	r2, r7, #16
 801263e:	4611      	mov	r1, r2
 8012640:	4618      	mov	r0, r3
 8012642:	f005 f93b 	bl	80178bc <RegionGetPhyParam>
 8012646:	4603      	mov	r3, r0
 8012648:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	b2db      	uxtb	r3, r3
}
 801264e:	4618      	mov	r0, r3
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	20001308 	.word	0x20001308

0801265c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	4603      	mov	r3, r0
 8012664:	71fb      	strb	r3, [r7, #7]
 8012666:	460b      	mov	r3, r1
 8012668:	71bb      	strb	r3, [r7, #6]
 801266a:	4613      	mov	r3, r2
 801266c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8012672:	2300      	movs	r3, #0
 8012674:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012676:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801267a:	4618      	mov	r0, r3
 801267c:	f7ff ffc6 	bl	801260c <GetMaxAppPayloadWithoutFOptsLength>
 8012680:	4603      	mov	r3, r0
 8012682:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8012684:	79fb      	ldrb	r3, [r7, #7]
 8012686:	b29a      	uxth	r2, r3
 8012688:	797b      	ldrb	r3, [r7, #5]
 801268a:	b29b      	uxth	r3, r3
 801268c:	4413      	add	r3, r2
 801268e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012690:	89ba      	ldrh	r2, [r7, #12]
 8012692:	89fb      	ldrh	r3, [r7, #14]
 8012694:	429a      	cmp	r2, r3
 8012696:	d804      	bhi.n	80126a2 <ValidatePayloadLength+0x46>
 8012698:	89bb      	ldrh	r3, [r7, #12]
 801269a:	2bff      	cmp	r3, #255	; 0xff
 801269c:	d801      	bhi.n	80126a2 <ValidatePayloadLength+0x46>
    {
        return true;
 801269e:	2301      	movs	r3, #1
 80126a0:	e000      	b.n	80126a4 <ValidatePayloadLength+0x48>
    }
    return false;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b0a5      	sub	sp, #148	; 0x94
 80126b0:	af02      	add	r7, sp, #8
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	4608      	mov	r0, r1
 80126b6:	4611      	mov	r1, r2
 80126b8:	461a      	mov	r2, r3
 80126ba:	4603      	mov	r3, r0
 80126bc:	70fb      	strb	r3, [r7, #3]
 80126be:	460b      	mov	r3, r1
 80126c0:	70bb      	strb	r3, [r7, #2]
 80126c2:	4613      	mov	r3, r2
 80126c4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80126cc:	2300      	movs	r3, #0
 80126ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80126d2:	2300      	movs	r3, #0
 80126d4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80126d8:	f000 bc6d 	b.w	8012fb6 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80126dc:	78fb      	ldrb	r3, [r7, #3]
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	4413      	add	r3, r2
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	4618      	mov	r0, r3
 80126e6:	f003 fc8d 	bl	8016004 <LoRaMacCommandsGetCmdSize>
 80126ea:	4603      	mov	r3, r0
 80126ec:	461a      	mov	r2, r3
 80126ee:	78fb      	ldrb	r3, [r7, #3]
 80126f0:	441a      	add	r2, r3
 80126f2:	78bb      	ldrb	r3, [r7, #2]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	f300 8464 	bgt.w	8012fc2 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80126fa:	78fb      	ldrb	r3, [r7, #3]
 80126fc:	1c5a      	adds	r2, r3, #1
 80126fe:	70fa      	strb	r2, [r7, #3]
 8012700:	461a      	mov	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4413      	add	r3, r2
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	3b02      	subs	r3, #2
 801270a:	2b11      	cmp	r3, #17
 801270c:	f200 845b 	bhi.w	8012fc6 <ProcessMacCommands+0x91a>
 8012710:	a201      	add	r2, pc, #4	; (adr r2, 8012718 <ProcessMacCommands+0x6c>)
 8012712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012716:	bf00      	nop
 8012718:	08012761 	.word	0x08012761
 801271c:	080127a3 	.word	0x080127a3
 8012720:	080128bf 	.word	0x080128bf
 8012724:	080128fd 	.word	0x080128fd
 8012728:	080129e9 	.word	0x080129e9
 801272c:	08012a45 	.word	0x08012a45
 8012730:	08012b01 	.word	0x08012b01
 8012734:	08012b57 	.word	0x08012b57
 8012738:	08012c3b 	.word	0x08012c3b
 801273c:	08012fc7 	.word	0x08012fc7
 8012740:	08012fc7 	.word	0x08012fc7
 8012744:	08012ce1 	.word	0x08012ce1
 8012748:	08012fc7 	.word	0x08012fc7
 801274c:	08012fc7 	.word	0x08012fc7
 8012750:	08012df7 	.word	0x08012df7
 8012754:	08012e2b 	.word	0x08012e2b
 8012758:	08012ebb 	.word	0x08012ebb
 801275c:	08012f31 	.word	0x08012f31
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012760:	2004      	movs	r0, #4
 8012762:	f003 fe27 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	f000 8424 	beq.w	8012fb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801276e:	2104      	movs	r1, #4
 8012770:	2000      	movs	r0, #0
 8012772:	f003 fd93 	bl	801629c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012776:	78fb      	ldrb	r3, [r7, #3]
 8012778:	1c5a      	adds	r2, r3, #1
 801277a:	70fa      	strb	r2, [r7, #3]
 801277c:	461a      	mov	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4413      	add	r3, r2
 8012782:	781a      	ldrb	r2, [r3, #0]
 8012784:	4bac      	ldr	r3, [pc, #688]	; (8012a38 <ProcessMacCommands+0x38c>)
 8012786:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801278a:	78fb      	ldrb	r3, [r7, #3]
 801278c:	1c5a      	adds	r2, r3, #1
 801278e:	70fa      	strb	r2, [r7, #3]
 8012790:	461a      	mov	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4413      	add	r3, r2
 8012796:	781a      	ldrb	r2, [r3, #0]
 8012798:	4ba7      	ldr	r3, [pc, #668]	; (8012a38 <ProcessMacCommands+0x38c>)
 801279a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 801279e:	f000 bc0a 	b.w	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80127a2:	2300      	movs	r3, #0
 80127a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80127a8:	2300      	movs	r3, #0
 80127aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80127ae:	2300      	movs	r3, #0
 80127b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80127b4:	2300      	movs	r3, #0
 80127b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80127ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80127be:	f083 0301 	eor.w	r3, r3, #1
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d078      	beq.n	80128ba <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80127c8:	2301      	movs	r3, #1
 80127ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80127ce:	78fb      	ldrb	r3, [r7, #3]
 80127d0:	3b01      	subs	r3, #1
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	4413      	add	r3, r2
 80127d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80127d8:	78ba      	ldrb	r2, [r7, #2]
 80127da:	78fb      	ldrb	r3, [r7, #3]
 80127dc:	1ad3      	subs	r3, r2, r3
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	3301      	adds	r3, #1
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80127e8:	4b94      	ldr	r3, [pc, #592]	; (8012a3c <ProcessMacCommands+0x390>)
 80127ea:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80127ee:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80127f2:	4b92      	ldr	r3, [pc, #584]	; (8012a3c <ProcessMacCommands+0x390>)
 80127f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80127f8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80127fc:	4b8f      	ldr	r3, [pc, #572]	; (8012a3c <ProcessMacCommands+0x390>)
 80127fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012802:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012806:	4b8d      	ldr	r3, [pc, #564]	; (8012a3c <ProcessMacCommands+0x390>)
 8012808:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801280c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012810:	4b8a      	ldr	r3, [pc, #552]	; (8012a3c <ProcessMacCommands+0x390>)
 8012812:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012816:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801281a:	4b88      	ldr	r3, [pc, #544]	; (8012a3c <ProcessMacCommands+0x390>)
 801281c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012820:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012822:	4b86      	ldr	r3, [pc, #536]	; (8012a3c <ProcessMacCommands+0x390>)
 8012824:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012828:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801282c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012830:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012838:	9301      	str	r3, [sp, #4]
 801283a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	4623      	mov	r3, r4
 8012842:	f005 f8f8 	bl	8017a36 <RegionLinkAdrReq>
 8012846:	4603      	mov	r3, r0
 8012848:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801284c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012850:	f003 0307 	and.w	r3, r3, #7
 8012854:	2b07      	cmp	r3, #7
 8012856:	d10e      	bne.n	8012876 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012858:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801285c:	4b77      	ldr	r3, [pc, #476]	; (8012a3c <ProcessMacCommands+0x390>)
 801285e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012862:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012866:	4b75      	ldr	r3, [pc, #468]	; (8012a3c <ProcessMacCommands+0x390>)
 8012868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801286c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012870:	4b72      	ldr	r3, [pc, #456]	; (8012a3c <ProcessMacCommands+0x390>)
 8012872:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012876:	2300      	movs	r3, #0
 8012878:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801287c:	e00b      	b.n	8012896 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801287e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012882:	2201      	movs	r2, #1
 8012884:	4619      	mov	r1, r3
 8012886:	2003      	movs	r0, #3
 8012888:	f003 fa6c 	bl	8015d64 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801288c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012890:	3301      	adds	r3, #1
 8012892:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012896:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801289a:	4a69      	ldr	r2, [pc, #420]	; (8012a40 <ProcessMacCommands+0x394>)
 801289c:	fba2 2303 	umull	r2, r3, r2, r3
 80128a0:	089b      	lsrs	r3, r3, #2
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d3e8      	bcc.n	801287e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80128ac:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80128b0:	78fb      	ldrb	r3, [r7, #3]
 80128b2:	4413      	add	r3, r2
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	3b01      	subs	r3, #1
 80128b8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80128ba:	bf00      	nop
 80128bc:	e37b      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80128be:	78fb      	ldrb	r3, [r7, #3]
 80128c0:	1c5a      	adds	r2, r3, #1
 80128c2:	70fa      	strb	r2, [r7, #3]
 80128c4:	461a      	mov	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4413      	add	r3, r2
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	f003 030f 	and.w	r3, r3, #15
 80128d0:	b2da      	uxtb	r2, r3
 80128d2:	4b5a      	ldr	r3, [pc, #360]	; (8012a3c <ProcessMacCommands+0x390>)
 80128d4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80128d8:	4b58      	ldr	r3, [pc, #352]	; (8012a3c <ProcessMacCommands+0x390>)
 80128da:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80128de:	461a      	mov	r2, r3
 80128e0:	2301      	movs	r3, #1
 80128e2:	4093      	lsls	r3, r2
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	4b55      	ldr	r3, [pc, #340]	; (8012a3c <ProcessMacCommands+0x390>)
 80128e8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80128ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128f0:	2200      	movs	r2, #0
 80128f2:	4619      	mov	r1, r3
 80128f4:	2004      	movs	r0, #4
 80128f6:	f003 fa35 	bl	8015d64 <LoRaMacCommandsAddCmd>
                break;
 80128fa:	e35c      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80128fc:	2307      	movs	r3, #7
 80128fe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012902:	78fb      	ldrb	r3, [r7, #3]
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	4413      	add	r3, r2
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	091b      	lsrs	r3, r3, #4
 801290c:	b2db      	uxtb	r3, r3
 801290e:	b25b      	sxtb	r3, r3
 8012910:	f003 0307 	and.w	r3, r3, #7
 8012914:	b25b      	sxtb	r3, r3
 8012916:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801291a:	78fb      	ldrb	r3, [r7, #3]
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	4413      	add	r3, r2
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	b25b      	sxtb	r3, r3
 8012924:	f003 030f 	and.w	r3, r3, #15
 8012928:	b25b      	sxtb	r3, r3
 801292a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801292e:	78fb      	ldrb	r3, [r7, #3]
 8012930:	3301      	adds	r3, #1
 8012932:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012934:	78fb      	ldrb	r3, [r7, #3]
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	70fa      	strb	r2, [r7, #3]
 801293a:	461a      	mov	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	4413      	add	r3, r2
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012944:	78fb      	ldrb	r3, [r7, #3]
 8012946:	1c5a      	adds	r2, r3, #1
 8012948:	70fa      	strb	r2, [r7, #3]
 801294a:	461a      	mov	r2, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	4413      	add	r3, r2
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	021a      	lsls	r2, r3, #8
 8012954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012956:	4313      	orrs	r3, r2
 8012958:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801295a:	78fb      	ldrb	r3, [r7, #3]
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	70fa      	strb	r2, [r7, #3]
 8012960:	461a      	mov	r2, r3
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4413      	add	r3, r2
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	041a      	lsls	r2, r3, #16
 801296a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801296c:	4313      	orrs	r3, r2
 801296e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012972:	2264      	movs	r2, #100	; 0x64
 8012974:	fb02 f303 	mul.w	r3, r2, r3
 8012978:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801297a:	4b30      	ldr	r3, [pc, #192]	; (8012a3c <ProcessMacCommands+0x390>)
 801297c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012980:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012984:	4611      	mov	r1, r2
 8012986:	4618      	mov	r0, r3
 8012988:	f005 f86f 	bl	8017a6a <RegionRxParamSetupReq>
 801298c:	4603      	mov	r3, r0
 801298e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012992:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012996:	f003 0307 	and.w	r3, r3, #7
 801299a:	2b07      	cmp	r3, #7
 801299c:	d117      	bne.n	80129ce <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801299e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80129a2:	b2da      	uxtb	r2, r3
 80129a4:	4b25      	ldr	r3, [pc, #148]	; (8012a3c <ProcessMacCommands+0x390>)
 80129a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80129aa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	4b22      	ldr	r3, [pc, #136]	; (8012a3c <ProcessMacCommands+0x390>)
 80129b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80129b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b8:	4a20      	ldr	r2, [pc, #128]	; (8012a3c <ProcessMacCommands+0x390>)
 80129ba:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80129bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129be:	4a1f      	ldr	r2, [pc, #124]	; (8012a3c <ProcessMacCommands+0x390>)
 80129c0:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80129c2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80129c6:	b2da      	uxtb	r2, r3
 80129c8:	4b1c      	ldr	r3, [pc, #112]	; (8012a3c <ProcessMacCommands+0x390>)
 80129ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 80129ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80129d2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80129d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80129da:	2201      	movs	r2, #1
 80129dc:	4619      	mov	r1, r3
 80129de:	2005      	movs	r0, #5
 80129e0:	f003 f9c0 	bl	8015d64 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80129e4:	bf00      	nop
 80129e6:	e2e6      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80129e8:	23ff      	movs	r3, #255	; 0xff
 80129ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80129ee:	4b12      	ldr	r3, [pc, #72]	; (8012a38 <ProcessMacCommands+0x38c>)
 80129f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00d      	beq.n	8012a14 <ProcessMacCommands+0x368>
 80129f8:	4b0f      	ldr	r3, [pc, #60]	; (8012a38 <ProcessMacCommands+0x38c>)
 80129fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d007      	beq.n	8012a14 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012a04:	4b0c      	ldr	r3, [pc, #48]	; (8012a38 <ProcessMacCommands+0x38c>)
 8012a06:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	4798      	blx	r3
 8012a0e:	4603      	mov	r3, r0
 8012a10:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012a14:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012a18:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012a1c:	787b      	ldrb	r3, [r7, #1]
 8012a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012a28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a2c:	2202      	movs	r2, #2
 8012a2e:	4619      	mov	r1, r3
 8012a30:	2006      	movs	r0, #6
 8012a32:	f003 f997 	bl	8015d64 <LoRaMacCommandsAddCmd>
                break;
 8012a36:	e2be      	b.n	8012fb6 <ProcessMacCommands+0x90a>
 8012a38:	20000dfc 	.word	0x20000dfc
 8012a3c:	20001308 	.word	0x20001308
 8012a40:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012a44:	2303      	movs	r3, #3
 8012a46:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012a4a:	78fb      	ldrb	r3, [r7, #3]
 8012a4c:	1c5a      	adds	r2, r3, #1
 8012a4e:	70fa      	strb	r2, [r7, #3]
 8012a50:	461a      	mov	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	4413      	add	r3, r2
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	b25b      	sxtb	r3, r3
 8012a5a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012a5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012a62:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012a64:	78fb      	ldrb	r3, [r7, #3]
 8012a66:	1c5a      	adds	r2, r3, #1
 8012a68:	70fa      	strb	r2, [r7, #3]
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4413      	add	r3, r2
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a74:	78fb      	ldrb	r3, [r7, #3]
 8012a76:	1c5a      	adds	r2, r3, #1
 8012a78:	70fa      	strb	r2, [r7, #3]
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	4413      	add	r3, r2
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	021a      	lsls	r2, r3, #8
 8012a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a86:	4313      	orrs	r3, r2
 8012a88:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012a8a:	78fb      	ldrb	r3, [r7, #3]
 8012a8c:	1c5a      	adds	r2, r3, #1
 8012a8e:	70fa      	strb	r2, [r7, #3]
 8012a90:	461a      	mov	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	4413      	add	r3, r2
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	041a      	lsls	r2, r3, #16
 8012a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa2:	2264      	movs	r2, #100	; 0x64
 8012aa4:	fb02 f303 	mul.w	r3, r2, r3
 8012aa8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012aae:	78fb      	ldrb	r3, [r7, #3]
 8012ab0:	1c5a      	adds	r2, r3, #1
 8012ab2:	70fa      	strb	r2, [r7, #3]
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4413      	add	r3, r2
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	b25b      	sxtb	r3, r3
 8012abe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012ac2:	4b85      	ldr	r3, [pc, #532]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ac8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012acc:	4611      	mov	r1, r2
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f004 ffde 	bl	8017a90 <RegionNewChannelReq>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012adc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ae0:	b25b      	sxtb	r3, r3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	db0a      	blt.n	8012afc <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012ae6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012aea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012aee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012af2:	2201      	movs	r2, #1
 8012af4:	4619      	mov	r1, r3
 8012af6:	2007      	movs	r0, #7
 8012af8:	f003 f934 	bl	8015d64 <LoRaMacCommandsAddCmd>
                }
                break;
 8012afc:	bf00      	nop
 8012afe:	e25a      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012b00:	78fb      	ldrb	r3, [r7, #3]
 8012b02:	1c5a      	adds	r2, r3, #1
 8012b04:	70fa      	strb	r2, [r7, #3]
 8012b06:	461a      	mov	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	f003 030f 	and.w	r3, r3, #15
 8012b12:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012b16:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d104      	bne.n	8012b28 <ProcessMacCommands+0x47c>
                {
                    delay++;
 8012b1e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b22:	3301      	adds	r3, #1
 8012b24:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012b28:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012b30:	fb02 f303 	mul.w	r3, r2, r3
 8012b34:	461a      	mov	r2, r3
 8012b36:	4b68      	ldr	r3, [pc, #416]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012b38:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012b3a:	4b67      	ldr	r3, [pc, #412]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b3e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012b42:	4a65      	ldr	r2, [pc, #404]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012b44:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012b46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	2008      	movs	r0, #8
 8012b50:	f003 f908 	bl	8015d64 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8012b54:	e22f      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012b56:	78fb      	ldrb	r3, [r7, #3]
 8012b58:	1c5a      	adds	r2, r3, #1
 8012b5a:	70fa      	strb	r2, [r7, #3]
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4413      	add	r3, r2
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012b74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b78:	f003 0320 	and.w	r3, r3, #32
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d002      	beq.n	8012b86 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012b80:	2301      	movs	r3, #1
 8012b82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012b86:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b8a:	f003 0310 	and.w	r3, r3, #16
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d002      	beq.n	8012b98 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012b92:	2301      	movs	r3, #1
 8012b94:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012b98:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b9c:	f003 030f 	and.w	r3, r3, #15
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012ba6:	4b4c      	ldr	r3, [pc, #304]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012bb0:	4611      	mov	r1, r2
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f004 ff7f 	bl	8017ab6 <RegionTxParamSetupReq>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bbe:	d03a      	beq.n	8012c36 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012bc0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012bc4:	4b44      	ldr	r3, [pc, #272]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012bc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012bca:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012bce:	4b42      	ldr	r3, [pc, #264]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012bd0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012bd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012bd8:	461a      	mov	r2, r3
 8012bda:	4b40      	ldr	r3, [pc, #256]	; (8012cdc <ProcessMacCommands+0x630>)
 8012bdc:	5c9b      	ldrb	r3, [r3, r2]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ee f856 	bl	8000c90 <__aeabi_ui2f>
 8012be4:	4603      	mov	r3, r0
 8012be6:	4a3c      	ldr	r2, [pc, #240]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012be8:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012bea:	2302      	movs	r3, #2
 8012bec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bf0:	4b39      	ldr	r3, [pc, #228]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012bf2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012bf6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bfa:	4b37      	ldr	r3, [pc, #220]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c00:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012c04:	4611      	mov	r1, r2
 8012c06:	4618      	mov	r0, r3
 8012c08:	f004 fe58 	bl	80178bc <RegionGetPhyParam>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c12:	b25a      	sxtb	r2, r3
 8012c14:	4b30      	ldr	r3, [pc, #192]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012c16:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	bfb8      	it	lt
 8012c1e:	4613      	movlt	r3, r2
 8012c20:	b25a      	sxtb	r2, r3
 8012c22:	4b2d      	ldr	r3, [pc, #180]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012c28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	4619      	mov	r1, r3
 8012c30:	2009      	movs	r0, #9
 8012c32:	f003 f897 	bl	8015d64 <LoRaMacCommandsAddCmd>
                }
                break;
 8012c36:	bf00      	nop
 8012c38:	e1bd      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012c3a:	2303      	movs	r3, #3
 8012c3c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012c40:	78fb      	ldrb	r3, [r7, #3]
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	70fa      	strb	r2, [r7, #3]
 8012c46:	461a      	mov	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	4413      	add	r3, r2
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012c52:	78fb      	ldrb	r3, [r7, #3]
 8012c54:	1c5a      	adds	r2, r3, #1
 8012c56:	70fa      	strb	r2, [r7, #3]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012c62:	78fb      	ldrb	r3, [r7, #3]
 8012c64:	1c5a      	adds	r2, r3, #1
 8012c66:	70fa      	strb	r2, [r7, #3]
 8012c68:	461a      	mov	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	021a      	lsls	r2, r3, #8
 8012c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c74:	4313      	orrs	r3, r2
 8012c76:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012c78:	78fb      	ldrb	r3, [r7, #3]
 8012c7a:	1c5a      	adds	r2, r3, #1
 8012c7c:	70fa      	strb	r2, [r7, #3]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4413      	add	r3, r2
 8012c84:	781b      	ldrb	r3, [r3, #0]
 8012c86:	041a      	lsls	r2, r3, #16
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c90:	2264      	movs	r2, #100	; 0x64
 8012c92:	fb02 f303 	mul.w	r3, r2, r3
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012c98:	4b0f      	ldr	r3, [pc, #60]	; (8012cd8 <ProcessMacCommands+0x62c>)
 8012c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c9e:	f107 0220 	add.w	r2, r7, #32
 8012ca2:	4611      	mov	r1, r2
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f004 ff19 	bl	8017adc <RegionDlChannelReq>
 8012caa:	4603      	mov	r3, r0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012cb2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cb6:	b25b      	sxtb	r3, r3
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	db0a      	blt.n	8012cd2 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8012cbc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cc0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012cc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cc8:	2201      	movs	r2, #1
 8012cca:	4619      	mov	r1, r3
 8012ccc:	200a      	movs	r0, #10
 8012cce:	f003 f849 	bl	8015d64 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8012cd2:	bf00      	nop
 8012cd4:	e16f      	b.n	8012fb6 <ProcessMacCommands+0x90a>
 8012cd6:	bf00      	nop
 8012cd8:	20001308 	.word	0x20001308
 8012cdc:	0801f9f4 	.word	0x0801f9f4
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012ce0:	200a      	movs	r0, #10
 8012ce2:	f003 fb67 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 8164 	beq.w	8012fb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012cee:	210a      	movs	r1, #10
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	f003 fad3 	bl	801629c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012cf6:	f107 0318 	add.w	r3, r7, #24
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	601a      	str	r2, [r3, #0]
 8012cfe:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012d00:	f107 0310 	add.w	r3, r7, #16
 8012d04:	2200      	movs	r2, #0
 8012d06:	601a      	str	r2, [r3, #0]
 8012d08:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012d0a:	f107 0308 	add.w	r3, r7, #8
 8012d0e:	2200      	movs	r2, #0
 8012d10:	601a      	str	r2, [r3, #0]
 8012d12:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012d14:	78fb      	ldrb	r3, [r7, #3]
 8012d16:	1c5a      	adds	r2, r3, #1
 8012d18:	70fa      	strb	r2, [r7, #3]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	4413      	add	r3, r2
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012d24:	78fb      	ldrb	r3, [r7, #3]
 8012d26:	1c5a      	adds	r2, r3, #1
 8012d28:	70fa      	strb	r2, [r7, #3]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	4413      	add	r3, r2
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	021a      	lsls	r2, r3, #8
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	4313      	orrs	r3, r2
 8012d38:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012d3a:	78fb      	ldrb	r3, [r7, #3]
 8012d3c:	1c5a      	adds	r2, r3, #1
 8012d3e:	70fa      	strb	r2, [r7, #3]
 8012d40:	461a      	mov	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4413      	add	r3, r2
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	041a      	lsls	r2, r3, #16
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012d50:	78fb      	ldrb	r3, [r7, #3]
 8012d52:	1c5a      	adds	r2, r3, #1
 8012d54:	70fa      	strb	r2, [r7, #3]
 8012d56:	461a      	mov	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	061a      	lsls	r2, r3, #24
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	4313      	orrs	r3, r2
 8012d64:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012d66:	78fb      	ldrb	r3, [r7, #3]
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	70fa      	strb	r2, [r7, #3]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4413      	add	r3, r2
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	b21b      	sxth	r3, r3
 8012d76:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012d78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d82:	fb02 f303 	mul.w	r3, r2, r3
 8012d86:	121b      	asrs	r3, r3, #8
 8012d88:	b21b      	sxth	r3, r3
 8012d8a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012d8c:	f107 0310 	add.w	r3, r7, #16
 8012d90:	f107 0218 	add.w	r2, r7, #24
 8012d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d98:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012d9c:	693a      	ldr	r2, [r7, #16]
 8012d9e:	4b8c      	ldr	r3, [pc, #560]	; (8012fd0 <ProcessMacCommands+0x924>)
 8012da0:	4413      	add	r3, r2
 8012da2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012da4:	f107 0308 	add.w	r3, r7, #8
 8012da8:	4618      	mov	r0, r3
 8012daa:	f00a fc79 	bl	801d6a0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012dae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012db2:	4b88      	ldr	r3, [pc, #544]	; (8012fd4 <ProcessMacCommands+0x928>)
 8012db4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012db8:	9200      	str	r2, [sp, #0]
 8012dba:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012dbe:	f107 0210 	add.w	r2, r7, #16
 8012dc2:	ca06      	ldmia	r2, {r1, r2}
 8012dc4:	f00a fc05 	bl	801d5d2 <SysTimeSub>
 8012dc8:	f107 0010 	add.w	r0, r7, #16
 8012dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012dd2:	f107 0208 	add.w	r2, r7, #8
 8012dd6:	ca06      	ldmia	r2, {r1, r2}
 8012dd8:	f00a fbc2 	bl	801d560 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012ddc:	f107 0310 	add.w	r3, r7, #16
 8012de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012de4:	f00a fc2e 	bl	801d644 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012de8:	f002 fe81 	bl	8015aee <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012dec:	4b79      	ldr	r3, [pc, #484]	; (8012fd4 <ProcessMacCommands+0x928>)
 8012dee:	2201      	movs	r2, #1
 8012df0:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012df4:	e0df      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012df6:	200d      	movs	r0, #13
 8012df8:	f003 fadc 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	f000 80d9 	beq.w	8012fb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012e04:	210d      	movs	r1, #13
 8012e06:	2000      	movs	r0, #0
 8012e08:	f003 fa48 	bl	801629c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012e0c:	4b71      	ldr	r3, [pc, #452]	; (8012fd4 <ProcessMacCommands+0x928>)
 8012e0e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012e12:	2b04      	cmp	r3, #4
 8012e14:	f000 80cf 	beq.w	8012fb6 <ProcessMacCommands+0x90a>
 8012e18:	4b6e      	ldr	r3, [pc, #440]	; (8012fd4 <ProcessMacCommands+0x928>)
 8012e1a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8012e1e:	2b05      	cmp	r3, #5
 8012e20:	f000 80c9 	beq.w	8012fb6 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012e24:	f002 fe44 	bl	8015ab0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012e28:	e0c5      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012e30:	2300      	movs	r3, #0
 8012e32:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012e34:	78fb      	ldrb	r3, [r7, #3]
 8012e36:	1c5a      	adds	r2, r3, #1
 8012e38:	70fa      	strb	r2, [r7, #3]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4413      	add	r3, r2
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012e44:	78fb      	ldrb	r3, [r7, #3]
 8012e46:	1c5a      	adds	r2, r3, #1
 8012e48:	70fa      	strb	r2, [r7, #3]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	4413      	add	r3, r2
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	021b      	lsls	r3, r3, #8
 8012e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e56:	4313      	orrs	r3, r2
 8012e58:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012e5a:	78fb      	ldrb	r3, [r7, #3]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	70fa      	strb	r2, [r7, #3]
 8012e60:	461a      	mov	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4413      	add	r3, r2
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	041b      	lsls	r3, r3, #16
 8012e6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e6c:	4313      	orrs	r3, r2
 8012e6e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e72:	2264      	movs	r2, #100	; 0x64
 8012e74:	fb02 f303 	mul.w	r3, r2, r3
 8012e78:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012e7a:	78fb      	ldrb	r3, [r7, #3]
 8012e7c:	1c5a      	adds	r2, r3, #1
 8012e7e:	70fa      	strb	r2, [r7, #3]
 8012e80:	461a      	mov	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4413      	add	r3, r2
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	f003 030f 	and.w	r3, r3, #15
 8012e8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012e90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012e96:	4618      	mov	r0, r3
 8012e98:	f002 fe10 	bl	8015abc <LoRaMacClassBPingSlotChannelReq>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012ea2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012ea6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012eaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012eae:	2201      	movs	r2, #1
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	2011      	movs	r0, #17
 8012eb4:	f002 ff56 	bl	8015d64 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8012eb8:	e07d      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012eba:	200e      	movs	r0, #14
 8012ebc:	f003 fa7a 	bl	80163b4 <LoRaMacConfirmQueueIsCmdActive>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d077      	beq.n	8012fb6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012ec6:	210e      	movs	r1, #14
 8012ec8:	2000      	movs	r0, #0
 8012eca:	f003 f9e7 	bl	801629c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012eda:	78fb      	ldrb	r3, [r7, #3]
 8012edc:	1c5a      	adds	r2, r3, #1
 8012ede:	70fa      	strb	r2, [r7, #3]
 8012ee0:	461a      	mov	r2, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012eec:	78fb      	ldrb	r3, [r7, #3]
 8012eee:	1c5a      	adds	r2, r3, #1
 8012ef0:	70fa      	strb	r2, [r7, #3]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	4413      	add	r3, r2
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	021b      	lsls	r3, r3, #8
 8012efc:	b21a      	sxth	r2, r3
 8012efe:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012f02:	4313      	orrs	r3, r2
 8012f04:	b21b      	sxth	r3, r3
 8012f06:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012f0a:	78fb      	ldrb	r3, [r7, #3]
 8012f0c:	1c5a      	adds	r2, r3, #1
 8012f0e:	70fa      	strb	r2, [r7, #3]
 8012f10:	461a      	mov	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	4413      	add	r3, r2
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012f1c:	4b2e      	ldr	r3, [pc, #184]	; (8012fd8 <ProcessMacCommands+0x92c>)
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012f24:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f002 fdd3 	bl	8015ad4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012f2e:	e042      	b.n	8012fb6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012f30:	2300      	movs	r3, #0
 8012f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012f36:	78fb      	ldrb	r3, [r7, #3]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	70fa      	strb	r2, [r7, #3]
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	4413      	add	r3, r2
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012f48:	78fb      	ldrb	r3, [r7, #3]
 8012f4a:	1c5a      	adds	r2, r3, #1
 8012f4c:	70fa      	strb	r2, [r7, #3]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4413      	add	r3, r2
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	021b      	lsls	r3, r3, #8
 8012f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f5c:	4313      	orrs	r3, r2
 8012f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012f62:	78fb      	ldrb	r3, [r7, #3]
 8012f64:	1c5a      	adds	r2, r3, #1
 8012f66:	70fa      	strb	r2, [r7, #3]
 8012f68:	461a      	mov	r2, r3
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4413      	add	r3, r2
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	041b      	lsls	r3, r3, #16
 8012f72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f76:	4313      	orrs	r3, r2
 8012f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f80:	2264      	movs	r2, #100	; 0x64
 8012f82:	fb02 f303 	mul.w	r3, r2, r3
 8012f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012f8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012f8e:	f002 fdb4 	bl	8015afa <LoRaMacClassBBeaconFreqReq>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d003      	beq.n	8012fa0 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012f9e:	e002      	b.n	8012fa6 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012fa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012faa:	2201      	movs	r2, #1
 8012fac:	4619      	mov	r1, r3
 8012fae:	2013      	movs	r0, #19
 8012fb0:	f002 fed8 	bl	8015d64 <LoRaMacCommandsAddCmd>
                }
                break;
 8012fb4:	bf00      	nop
    while( macIndex < commandsSize )
 8012fb6:	78fa      	ldrb	r2, [r7, #3]
 8012fb8:	78bb      	ldrb	r3, [r7, #2]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	f4ff ab8e 	bcc.w	80126dc <ProcessMacCommands+0x30>
 8012fc0:	e002      	b.n	8012fc8 <ProcessMacCommands+0x91c>
            return;
 8012fc2:	bf00      	nop
 8012fc4:	e000      	b.n	8012fc8 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012fc6:	bf00      	nop
        }
    }
}
 8012fc8:	378c      	adds	r7, #140	; 0x8c
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd90      	pop	{r4, r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	12d53d80 	.word	0x12d53d80
 8012fd4:	20000dfc 	.word	0x20000dfc
 8012fd8:	20002160 	.word	0x20002160

08012fdc <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08e      	sub	sp, #56	; 0x38
 8012fe0:	af02      	add	r7, sp, #8
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	607a      	str	r2, [r7, #4]
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	460b      	mov	r3, r1
 8012fea:	72fb      	strb	r3, [r7, #11]
 8012fec:	4613      	mov	r3, r2
 8012fee:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ff0:	2303      	movs	r3, #3
 8012ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012ff6:	4b65      	ldr	r3, [pc, #404]	; (801318c <Send+0x1b0>)
 8012ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012ffc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8013000:	4b62      	ldr	r3, [pc, #392]	; (801318c <Send+0x1b0>)
 8013002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013006:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801300a:	4b60      	ldr	r3, [pc, #384]	; (801318c <Send+0x1b0>)
 801300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801300e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013010:	4b5e      	ldr	r3, [pc, #376]	; (801318c <Send+0x1b0>)
 8013012:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013016:	2b00      	cmp	r3, #0
 8013018:	d101      	bne.n	801301e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801301a:	2307      	movs	r3, #7
 801301c:	e0b1      	b.n	8013182 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801301e:	4b5b      	ldr	r3, [pc, #364]	; (801318c <Send+0x1b0>)
 8013020:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8013024:	2b00      	cmp	r3, #0
 8013026:	d102      	bne.n	801302e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013028:	4b58      	ldr	r3, [pc, #352]	; (801318c <Send+0x1b0>)
 801302a:	2200      	movs	r2, #0
 801302c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013034:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013038:	f36f 0303 	bfc	r3, #0, #4
 801303c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8013040:	4b52      	ldr	r3, [pc, #328]	; (801318c <Send+0x1b0>)
 8013042:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8013046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801304a:	f362 13c7 	bfi	r3, r2, #7, #1
 801304e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013052:	4b4e      	ldr	r3, [pc, #312]	; (801318c <Send+0x1b0>)
 8013054:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013058:	2b01      	cmp	r3, #1
 801305a:	d106      	bne.n	801306a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801305c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013060:	f043 0310 	orr.w	r3, r3, #16
 8013064:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8013068:	e005      	b.n	8013076 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801306a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801306e:	f36f 1304 	bfc	r3, #4, #1
 8013072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8013076:	4b45      	ldr	r3, [pc, #276]	; (801318c <Send+0x1b0>)
 8013078:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801307c:	2b00      	cmp	r3, #0
 801307e:	d005      	beq.n	801308c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8013080:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013084:	f043 0320 	orr.w	r3, r3, #32
 8013088:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801308c:	4b3f      	ldr	r3, [pc, #252]	; (801318c <Send+0x1b0>)
 801308e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013092:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8013094:	2301      	movs	r3, #1
 8013096:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8013098:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801309c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	bf14      	ite	ne
 80130a6:	2301      	movne	r3, #1
 80130a8:	2300      	moveq	r3, #0
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80130ae:	4b37      	ldr	r3, [pc, #220]	; (801318c <Send+0x1b0>)
 80130b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130b2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80130b4:	4b36      	ldr	r3, [pc, #216]	; (8013190 <Send+0x1b4>)
 80130b6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80130ba:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80130bc:	4b34      	ldr	r3, [pc, #208]	; (8013190 <Send+0x1b4>)
 80130be:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80130c2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80130c4:	4b31      	ldr	r3, [pc, #196]	; (801318c <Send+0x1b0>)
 80130c6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80130ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80130ce:	4b2f      	ldr	r3, [pc, #188]	; (801318c <Send+0x1b0>)
 80130d0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80130d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130d8:	4b2c      	ldr	r3, [pc, #176]	; (801318c <Send+0x1b0>)
 80130da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80130de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80130e2:	4b2a      	ldr	r3, [pc, #168]	; (801318c <Send+0x1b0>)
 80130e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80130e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80130ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80130f0:	f107 0014 	add.w	r0, r7, #20
 80130f4:	4a27      	ldr	r2, [pc, #156]	; (8013194 <Send+0x1b8>)
 80130f6:	4928      	ldr	r1, [pc, #160]	; (8013198 <Send+0x1bc>)
 80130f8:	f002 fc1a 	bl	8015930 <LoRaMacAdrCalcNext>
 80130fc:	4603      	mov	r3, r0
 80130fe:	461a      	mov	r2, r3
 8013100:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013104:	f362 1386 	bfi	r3, r2, #6, #1
 8013108:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801310c:	7afa      	ldrb	r2, [r7, #11]
 801310e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8013112:	893b      	ldrh	r3, [r7, #8]
 8013114:	9300      	str	r3, [sp, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68f8      	ldr	r0, [r7, #12]
 801311a:	f000 fc2d 	bl	8013978 <PrepareFrame>
 801311e:	4603      	mov	r3, r0
 8013120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8013124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013128:	2b00      	cmp	r3, #0
 801312a:	d003      	beq.n	8013134 <Send+0x158>
 801312c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013130:	2b0a      	cmp	r3, #10
 8013132:	d107      	bne.n	8013144 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013134:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013138:	4618      	mov	r0, r3
 801313a:	f000 f96d 	bl	8013418 <ScheduleTx>
 801313e:	4603      	mov	r3, r0
 8013140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8013144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00a      	beq.n	8013162 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801314c:	4a0f      	ldr	r2, [pc, #60]	; (801318c <Send+0x1b0>)
 801314e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013152:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8013156:	4a0d      	ldr	r2, [pc, #52]	; (801318c <Send+0x1b0>)
 8013158:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801315c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8013160:	e00d      	b.n	801317e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8013162:	4b0a      	ldr	r3, [pc, #40]	; (801318c <Send+0x1b0>)
 8013164:	2200      	movs	r2, #0
 8013166:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316c:	4a07      	ldr	r2, [pc, #28]	; (801318c <Send+0x1b0>)
 801316e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8013170:	f002 fe70 	bl	8015e54 <LoRaMacCommandsRemoveNoneStickyCmds>
 8013174:	4603      	mov	r3, r0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801317a:	2313      	movs	r3, #19
 801317c:	e001      	b.n	8013182 <Send+0x1a6>
        }
    }
    return status;
 801317e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013182:	4618      	mov	r0, r3
 8013184:	3730      	adds	r7, #48	; 0x30
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	20001308 	.word	0x20001308
 8013190:	20000dfc 	.word	0x20000dfc
 8013194:	20001340 	.word	0x20001340
 8013198:	20001341 	.word	0x20001341

0801319c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	4603      	mov	r3, r0
 80131a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80131a6:	2300      	movs	r3, #0
 80131a8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80131aa:	2300      	movs	r3, #0
 80131ac:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80131ae:	2301      	movs	r3, #1
 80131b0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80131b2:	79fb      	ldrb	r3, [r7, #7]
 80131b4:	2bff      	cmp	r3, #255	; 0xff
 80131b6:	d129      	bne.n	801320c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80131b8:	2000      	movs	r0, #0
 80131ba:	f7ff f957 	bl	801246c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80131be:	4b1a      	ldr	r3, [pc, #104]	; (8013228 <SendReJoinReq+0x8c>)
 80131c0:	2200      	movs	r2, #0
 80131c2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80131c6:	4b18      	ldr	r3, [pc, #96]	; (8013228 <SendReJoinReq+0x8c>)
 80131c8:	4a18      	ldr	r2, [pc, #96]	; (801322c <SendReJoinReq+0x90>)
 80131ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80131ce:	4b16      	ldr	r3, [pc, #88]	; (8013228 <SendReJoinReq+0x8c>)
 80131d0:	22ff      	movs	r2, #255	; 0xff
 80131d2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80131d6:	7b3b      	ldrb	r3, [r7, #12]
 80131d8:	f36f 1347 	bfc	r3, #5, #3
 80131dc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80131de:	7b3a      	ldrb	r2, [r7, #12]
 80131e0:	4b11      	ldr	r3, [pc, #68]	; (8013228 <SendReJoinReq+0x8c>)
 80131e2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80131e6:	f7fc fb75 	bl	800f8d4 <SecureElementGetJoinEui>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2208      	movs	r2, #8
 80131ee:	4619      	mov	r1, r3
 80131f0:	480f      	ldr	r0, [pc, #60]	; (8013230 <SendReJoinReq+0x94>)
 80131f2:	f006 fe76 	bl	8019ee2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80131f6:	f7fc fb4b 	bl	800f890 <SecureElementGetDevEui>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2208      	movs	r2, #8
 80131fe:	4619      	mov	r1, r3
 8013200:	480c      	ldr	r0, [pc, #48]	; (8013234 <SendReJoinReq+0x98>)
 8013202:	f006 fe6e 	bl	8019ee2 <memcpy1>

            allowDelayedTx = false;
 8013206:	2300      	movs	r3, #0
 8013208:	73fb      	strb	r3, [r7, #15]

            break;
 801320a:	e002      	b.n	8013212 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801320c:	2302      	movs	r3, #2
 801320e:	73bb      	strb	r3, [r7, #14]
            break;
 8013210:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013212:	7bfb      	ldrb	r3, [r7, #15]
 8013214:	4618      	mov	r0, r3
 8013216:	f000 f8ff 	bl	8013418 <ScheduleTx>
 801321a:	4603      	mov	r3, r0
 801321c:	73bb      	strb	r3, [r7, #14]
    return status;
 801321e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	20000dfc 	.word	0x20000dfc
 801322c:	20000dfe 	.word	0x20000dfe
 8013230:	20000f0a 	.word	0x20000f0a
 8013234:	20000f12 	.word	0x20000f12

08013238 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013238:	b580      	push	{r7, lr}
 801323a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801323c:	f002 fbe7 	bl	8015a0e <LoRaMacClassBIsBeaconExpected>
 8013240:	4603      	mov	r3, r0
 8013242:	2b00      	cmp	r3, #0
 8013244:	d001      	beq.n	801324a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8013246:	230e      	movs	r3, #14
 8013248:	e013      	b.n	8013272 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801324a:	4b0b      	ldr	r3, [pc, #44]	; (8013278 <CheckForClassBCollision+0x40>)
 801324c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013250:	2b01      	cmp	r3, #1
 8013252:	d10d      	bne.n	8013270 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013254:	f002 fbe2 	bl	8015a1c <LoRaMacClassBIsPingExpected>
 8013258:	4603      	mov	r3, r0
 801325a:	2b00      	cmp	r3, #0
 801325c:	d001      	beq.n	8013262 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801325e:	230f      	movs	r3, #15
 8013260:	e007      	b.n	8013272 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013262:	f002 fbe2 	bl	8015a2a <LoRaMacClassBIsMulticastExpected>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d001      	beq.n	8013270 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801326c:	230f      	movs	r3, #15
 801326e:	e000      	b.n	8013272 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013270:	2300      	movs	r3, #0
}
 8013272:	4618      	mov	r0, r3
 8013274:	bd80      	pop	{r7, pc}
 8013276:	bf00      	nop
 8013278:	20001308 	.word	0x20001308

0801327c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b083      	sub	sp, #12
 8013280:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013282:	4b2d      	ldr	r3, [pc, #180]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 8013284:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013288:	4b2b      	ldr	r3, [pc, #172]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 801328a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801328e:	4b2a      	ldr	r3, [pc, #168]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 8013290:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8013294:	4b28      	ldr	r3, [pc, #160]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 8013296:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801329a:	4b27      	ldr	r3, [pc, #156]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 801329c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80132a0:	b25b      	sxtb	r3, r3
 80132a2:	f004 fc72 	bl	8017b8a <RegionApplyDrOffset>
 80132a6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132a8:	b259      	sxtb	r1, r3
 80132aa:	4b23      	ldr	r3, [pc, #140]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80132b0:	4b21      	ldr	r3, [pc, #132]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132b4:	4821      	ldr	r0, [pc, #132]	; (801333c <ComputeRxWindowParameters+0xc0>)
 80132b6:	9000      	str	r0, [sp, #0]
 80132b8:	4620      	mov	r0, r4
 80132ba:	f004 fb76 	bl	80179aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132be:	4b1e      	ldr	r3, [pc, #120]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132c0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80132c4:	4b1c      	ldr	r3, [pc, #112]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132c6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132ca:	b259      	sxtb	r1, r3
 80132cc:	4b1a      	ldr	r3, [pc, #104]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132ce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80132d2:	4b19      	ldr	r3, [pc, #100]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132d6:	4c1a      	ldr	r4, [pc, #104]	; (8013340 <ComputeRxWindowParameters+0xc4>)
 80132d8:	9400      	str	r4, [sp, #0]
 80132da:	f004 fb66 	bl	80179aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80132de:	4b16      	ldr	r3, [pc, #88]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132e2:	4a18      	ldr	r2, [pc, #96]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 80132e4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80132e8:	4413      	add	r3, r2
 80132ea:	4a16      	ldr	r2, [pc, #88]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 80132ec:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80132f0:	4b11      	ldr	r3, [pc, #68]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 80132f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132f4:	4a13      	ldr	r2, [pc, #76]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 80132f6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80132fa:	4413      	add	r3, r2
 80132fc:	4a11      	ldr	r2, [pc, #68]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 80132fe:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013302:	4b0d      	ldr	r3, [pc, #52]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 8013304:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013308:	2b00      	cmp	r3, #0
 801330a:	d111      	bne.n	8013330 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801330c:	4b0a      	ldr	r3, [pc, #40]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 801330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013310:	4a0c      	ldr	r2, [pc, #48]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 8013312:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013316:	4413      	add	r3, r2
 8013318:	4a0a      	ldr	r2, [pc, #40]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 801331a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801331e:	4b06      	ldr	r3, [pc, #24]	; (8013338 <ComputeRxWindowParameters+0xbc>)
 8013320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013322:	4a08      	ldr	r2, [pc, #32]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 8013324:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013328:	4413      	add	r3, r2
 801332a:	4a06      	ldr	r2, [pc, #24]	; (8013344 <ComputeRxWindowParameters+0xc8>)
 801332c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013330:	bf00      	nop
 8013332:	3704      	adds	r7, #4
 8013334:	46bd      	mov	sp, r7
 8013336:	bd90      	pop	{r4, r7, pc}
 8013338:	20001308 	.word	0x20001308
 801333c:	200011b4 	.word	0x200011b4
 8013340:	200011c8 	.word	0x200011c8
 8013344:	20000dfc 	.word	0x20000dfc

08013348 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801334e:	2300      	movs	r3, #0
 8013350:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013352:	4b13      	ldr	r3, [pc, #76]	; (80133a0 <VerifyTxFrame+0x58>)
 8013354:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013358:	2b00      	cmp	r3, #0
 801335a:	d01b      	beq.n	8013394 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801335c:	1d3b      	adds	r3, r7, #4
 801335e:	4618      	mov	r0, r3
 8013360:	f002 fdbe 	bl	8015ee0 <LoRaMacCommandsGetSizeSerializedCmds>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d001      	beq.n	801336e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801336a:	2313      	movs	r3, #19
 801336c:	e013      	b.n	8013396 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801336e:	4b0d      	ldr	r3, [pc, #52]	; (80133a4 <VerifyTxFrame+0x5c>)
 8013370:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013374:	4a0a      	ldr	r2, [pc, #40]	; (80133a0 <VerifyTxFrame+0x58>)
 8013376:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	b2d2      	uxtb	r2, r2
 801337e:	4618      	mov	r0, r3
 8013380:	f7ff f96c 	bl	801265c <ValidatePayloadLength>
 8013384:	4603      	mov	r3, r0
 8013386:	f083 0301 	eor.w	r3, r3, #1
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d001      	beq.n	8013394 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013390:	2308      	movs	r3, #8
 8013392:	e000      	b.n	8013396 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	3708      	adds	r7, #8
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	20001308 	.word	0x20001308
 80133a4:	20000dfc 	.word	0x20000dfc

080133a8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80133ae:	4b18      	ldr	r3, [pc, #96]	; (8013410 <SerializeTxFrame+0x68>)
 80133b0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d002      	beq.n	80133be <SerializeTxFrame+0x16>
 80133b8:	2b04      	cmp	r3, #4
 80133ba:	d011      	beq.n	80133e0 <SerializeTxFrame+0x38>
 80133bc:	e021      	b.n	8013402 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133be:	4815      	ldr	r0, [pc, #84]	; (8013414 <SerializeTxFrame+0x6c>)
 80133c0:	f004 f8f3 	bl	80175aa <LoRaMacSerializerJoinRequest>
 80133c4:	4603      	mov	r3, r0
 80133c6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80133c8:	79fb      	ldrb	r3, [r7, #7]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d001      	beq.n	80133d2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133ce:	2311      	movs	r3, #17
 80133d0:	e01a      	b.n	8013408 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80133d2:	4b0f      	ldr	r3, [pc, #60]	; (8013410 <SerializeTxFrame+0x68>)
 80133d4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133d8:	b29a      	uxth	r2, r3
 80133da:	4b0d      	ldr	r3, [pc, #52]	; (8013410 <SerializeTxFrame+0x68>)
 80133dc:	801a      	strh	r2, [r3, #0]
            break;
 80133de:	e012      	b.n	8013406 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80133e0:	480c      	ldr	r0, [pc, #48]	; (8013414 <SerializeTxFrame+0x6c>)
 80133e2:	f004 f964 	bl	80176ae <LoRaMacSerializerData>
 80133e6:	4603      	mov	r3, r0
 80133e8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80133ea:	79fb      	ldrb	r3, [r7, #7]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d001      	beq.n	80133f4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133f0:	2311      	movs	r3, #17
 80133f2:	e009      	b.n	8013408 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80133f4:	4b06      	ldr	r3, [pc, #24]	; (8013410 <SerializeTxFrame+0x68>)
 80133f6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133fa:	b29a      	uxth	r2, r3
 80133fc:	4b04      	ldr	r3, [pc, #16]	; (8013410 <SerializeTxFrame+0x68>)
 80133fe:	801a      	strh	r2, [r3, #0]
            break;
 8013400:	e001      	b.n	8013406 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013402:	2303      	movs	r3, #3
 8013404:	e000      	b.n	8013408 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013406:	2300      	movs	r3, #0
}
 8013408:	4618      	mov	r0, r3
 801340a:	3708      	adds	r7, #8
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	20000dfc 	.word	0x20000dfc
 8013414:	20000f04 	.word	0x20000f04

08013418 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b090      	sub	sp, #64	; 0x40
 801341c:	af02      	add	r7, sp, #8
 801341e:	4603      	mov	r3, r0
 8013420:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013422:	2303      	movs	r3, #3
 8013424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013428:	f7ff ff06 	bl	8013238 <CheckForClassBCollision>
 801342c:	4603      	mov	r3, r0
 801342e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013436:	2b00      	cmp	r3, #0
 8013438:	d002      	beq.n	8013440 <ScheduleTx+0x28>
    {
        return status;
 801343a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801343e:	e08f      	b.n	8013560 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8013440:	f000 f8fa 	bl	8013638 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013444:	f7ff ffb0 	bl	80133a8 <SerializeTxFrame>
 8013448:	4603      	mov	r3, r0
 801344a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801344e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013452:	2b00      	cmp	r3, #0
 8013454:	d002      	beq.n	801345c <ScheduleTx+0x44>
    {
        return status;
 8013456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801345a:	e081      	b.n	8013560 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801345c:	4b42      	ldr	r3, [pc, #264]	; (8013568 <ScheduleTx+0x150>)
 801345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013460:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013462:	4b41      	ldr	r3, [pc, #260]	; (8013568 <ScheduleTx+0x150>)
 8013464:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013468:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801346a:	4b3f      	ldr	r3, [pc, #252]	; (8013568 <ScheduleTx+0x150>)
 801346c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8013470:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013476:	4618      	mov	r0, r3
 8013478:	f00a f94a 	bl	801d710 <SysTimeGetMcuTime>
 801347c:	4638      	mov	r0, r7
 801347e:	4b3a      	ldr	r3, [pc, #232]	; (8013568 <ScheduleTx+0x150>)
 8013480:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8013484:	9200      	str	r2, [sp, #0]
 8013486:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801348a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801348e:	ca06      	ldmia	r2, {r1, r2}
 8013490:	f00a f89f 	bl	801d5d2 <SysTimeSub>
 8013494:	f107 0320 	add.w	r3, r7, #32
 8013498:	463a      	mov	r2, r7
 801349a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801349e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80134a2:	4b31      	ldr	r3, [pc, #196]	; (8013568 <ScheduleTx+0x150>)
 80134a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80134a8:	2300      	movs	r3, #0
 80134aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80134ae:	2301      	movs	r3, #1
 80134b0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80134b2:	4b2e      	ldr	r3, [pc, #184]	; (801356c <ScheduleTx+0x154>)
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80134b8:	4b2b      	ldr	r3, [pc, #172]	; (8013568 <ScheduleTx+0x150>)
 80134ba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d104      	bne.n	80134cc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80134c2:	2301      	movs	r3, #1
 80134c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80134c8:	2300      	movs	r3, #0
 80134ca:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80134cc:	4b26      	ldr	r3, [pc, #152]	; (8013568 <ScheduleTx+0x150>)
 80134ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80134d2:	f107 0114 	add.w	r1, r7, #20
 80134d6:	4b26      	ldr	r3, [pc, #152]	; (8013570 <ScheduleTx+0x158>)
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	4b26      	ldr	r3, [pc, #152]	; (8013574 <ScheduleTx+0x15c>)
 80134dc:	4a26      	ldr	r2, [pc, #152]	; (8013578 <ScheduleTx+0x160>)
 80134de:	f004 fb2a 	bl	8017b36 <RegionNextChannel>
 80134e2:	4603      	mov	r3, r0
 80134e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80134e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d022      	beq.n	8013536 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80134f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134f4:	2b0b      	cmp	r3, #11
 80134f6:	d11b      	bne.n	8013530 <ScheduleTx+0x118>
 80134f8:	7bfb      	ldrb	r3, [r7, #15]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d018      	beq.n	8013530 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80134fe:	4b1b      	ldr	r3, [pc, #108]	; (801356c <ScheduleTx+0x154>)
 8013500:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8013504:	2b00      	cmp	r3, #0
 8013506:	d011      	beq.n	801352c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013508:	4b18      	ldr	r3, [pc, #96]	; (801356c <ScheduleTx+0x154>)
 801350a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801350e:	f043 0320 	orr.w	r3, r3, #32
 8013512:	4a16      	ldr	r2, [pc, #88]	; (801356c <ScheduleTx+0x154>)
 8013514:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013518:	4b14      	ldr	r3, [pc, #80]	; (801356c <ScheduleTx+0x154>)
 801351a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801351e:	4619      	mov	r1, r3
 8013520:	4816      	ldr	r0, [pc, #88]	; (801357c <ScheduleTx+0x164>)
 8013522:	f00a fe99 	bl	801e258 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8013526:	4815      	ldr	r0, [pc, #84]	; (801357c <ScheduleTx+0x164>)
 8013528:	f00a fdb8 	bl	801e09c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801352c:	2300      	movs	r3, #0
 801352e:	e017      	b.n	8013560 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013534:	e014      	b.n	8013560 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013536:	f7ff fea1 	bl	801327c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801353a:	f7ff ff05 	bl	8013348 <VerifyTxFrame>
 801353e:	4603      	mov	r3, r0
 8013540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013548:	2b00      	cmp	r3, #0
 801354a:	d002      	beq.n	8013552 <ScheduleTx+0x13a>
    {
        return status;
 801354c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013550:	e006      	b.n	8013560 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013552:	4b06      	ldr	r3, [pc, #24]	; (801356c <ScheduleTx+0x154>)
 8013554:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013558:	4618      	mov	r0, r3
 801355a:	f000 fb29 	bl	8013bb0 <SendFrameOnChannel>
 801355e:	4603      	mov	r3, r0
}
 8013560:	4618      	mov	r0, r3
 8013562:	3738      	adds	r7, #56	; 0x38
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	20001308 	.word	0x20001308
 801356c:	20000dfc 	.word	0x20000dfc
 8013570:	20001338 	.word	0x20001338
 8013574:	20001284 	.word	0x20001284
 8013578:	20001211 	.word	0x20001211
 801357c:	20001164 	.word	0x20001164

08013580 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b084      	sub	sp, #16
 8013584:	af00      	add	r7, sp, #0
 8013586:	4603      	mov	r3, r0
 8013588:	460a      	mov	r2, r1
 801358a:	71fb      	strb	r3, [r7, #7]
 801358c:	4613      	mov	r3, r2
 801358e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013590:	2313      	movs	r3, #19
 8013592:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013594:	2300      	movs	r3, #0
 8013596:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013598:	4b25      	ldr	r3, [pc, #148]	; (8013630 <SecureFrame+0xb0>)
 801359a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d002      	beq.n	80135a8 <SecureFrame+0x28>
 80135a2:	2b04      	cmp	r3, #4
 80135a4:	d011      	beq.n	80135ca <SecureFrame+0x4a>
 80135a6:	e03b      	b.n	8013620 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80135a8:	4822      	ldr	r0, [pc, #136]	; (8013634 <SecureFrame+0xb4>)
 80135aa:	f003 fbc7 	bl	8016d3c <LoRaMacCryptoPrepareJoinRequest>
 80135ae:	4603      	mov	r3, r0
 80135b0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80135b2:	7bfb      	ldrb	r3, [r7, #15]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d001      	beq.n	80135bc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80135b8:	2311      	movs	r3, #17
 80135ba:	e034      	b.n	8013626 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80135bc:	4b1c      	ldr	r3, [pc, #112]	; (8013630 <SecureFrame+0xb0>)
 80135be:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	4b1a      	ldr	r3, [pc, #104]	; (8013630 <SecureFrame+0xb0>)
 80135c6:	801a      	strh	r2, [r3, #0]
            break;
 80135c8:	e02c      	b.n	8013624 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80135ca:	f107 0308 	add.w	r3, r7, #8
 80135ce:	4618      	mov	r0, r3
 80135d0:	f003 face 	bl	8016b70 <LoRaMacCryptoGetFCntUp>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80135da:	2312      	movs	r3, #18
 80135dc:	e023      	b.n	8013626 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80135de:	4b14      	ldr	r3, [pc, #80]	; (8013630 <SecureFrame+0xb0>)
 80135e0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d104      	bne.n	80135f2 <SecureFrame+0x72>
 80135e8:	4b11      	ldr	r3, [pc, #68]	; (8013630 <SecureFrame+0xb0>)
 80135ea:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d902      	bls.n	80135f8 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	3b01      	subs	r3, #1
 80135f6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80135f8:	68b8      	ldr	r0, [r7, #8]
 80135fa:	79ba      	ldrb	r2, [r7, #6]
 80135fc:	79f9      	ldrb	r1, [r7, #7]
 80135fe:	4b0d      	ldr	r3, [pc, #52]	; (8013634 <SecureFrame+0xb4>)
 8013600:	f003 fcb4 	bl	8016f6c <LoRaMacCryptoSecureMessage>
 8013604:	4603      	mov	r3, r0
 8013606:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013608:	7bfb      	ldrb	r3, [r7, #15]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d001      	beq.n	8013612 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801360e:	2311      	movs	r3, #17
 8013610:	e009      	b.n	8013626 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013612:	4b07      	ldr	r3, [pc, #28]	; (8013630 <SecureFrame+0xb0>)
 8013614:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013618:	b29a      	uxth	r2, r3
 801361a:	4b05      	ldr	r3, [pc, #20]	; (8013630 <SecureFrame+0xb0>)
 801361c:	801a      	strh	r2, [r3, #0]
            break;
 801361e:	e001      	b.n	8013624 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013620:	2303      	movs	r3, #3
 8013622:	e000      	b.n	8013626 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013624:	2300      	movs	r3, #0
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	20000dfc 	.word	0x20000dfc
 8013634:	20000f04 	.word	0x20000f04

08013638 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013638:	b480      	push	{r7}
 801363a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801363c:	4b09      	ldr	r3, [pc, #36]	; (8013664 <CalculateBackOff+0x2c>)
 801363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10a      	bne.n	801365a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013644:	4b07      	ldr	r3, [pc, #28]	; (8013664 <CalculateBackOff+0x2c>)
 8013646:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 801364a:	3b01      	subs	r3, #1
 801364c:	4a06      	ldr	r2, [pc, #24]	; (8013668 <CalculateBackOff+0x30>)
 801364e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8013652:	fb02 f303 	mul.w	r3, r2, r3
 8013656:	4a03      	ldr	r2, [pc, #12]	; (8013664 <CalculateBackOff+0x2c>)
 8013658:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801365a:	bf00      	nop
 801365c:	46bd      	mov	sp, r7
 801365e:	bc80      	pop	{r7}
 8013660:	4770      	bx	lr
 8013662:	bf00      	nop
 8013664:	20001308 	.word	0x20001308
 8013668:	20000dfc 	.word	0x20000dfc

0801366c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	4603      	mov	r3, r0
 8013674:	7139      	strb	r1, [r7, #4]
 8013676:	71fb      	strb	r3, [r7, #7]
 8013678:	4613      	mov	r3, r2
 801367a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801367c:	79fb      	ldrb	r3, [r7, #7]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d002      	beq.n	8013688 <RemoveMacCommands+0x1c>
 8013682:	79fb      	ldrb	r3, [r7, #7]
 8013684:	2b01      	cmp	r3, #1
 8013686:	d10d      	bne.n	80136a4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013688:	79bb      	ldrb	r3, [r7, #6]
 801368a:	2b01      	cmp	r3, #1
 801368c:	d108      	bne.n	80136a0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801368e:	793b      	ldrb	r3, [r7, #4]
 8013690:	f003 0320 	and.w	r3, r3, #32
 8013694:	b2db      	uxtb	r3, r3
 8013696:	2b00      	cmp	r3, #0
 8013698:	d004      	beq.n	80136a4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801369a:	f002 fbff 	bl	8015e9c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801369e:	e001      	b.n	80136a4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80136a0:	f002 fbfc 	bl	8015e9c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80136a4:	bf00      	nop
 80136a6:	3708      	adds	r7, #8
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80136ac:	b5b0      	push	{r4, r5, r7, lr}
 80136ae:	b08e      	sub	sp, #56	; 0x38
 80136b0:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80136b2:	4b68      	ldr	r3, [pc, #416]	; (8013854 <ResetMacParameters+0x1a8>)
 80136b4:	2200      	movs	r2, #0
 80136b6:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80136ba:	4b66      	ldr	r3, [pc, #408]	; (8013854 <ResetMacParameters+0x1a8>)
 80136bc:	2200      	movs	r2, #0
 80136be:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80136c0:	4b65      	ldr	r3, [pc, #404]	; (8013858 <ResetMacParameters+0x1ac>)
 80136c2:	2200      	movs	r2, #0
 80136c4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80136c8:	4b63      	ldr	r3, [pc, #396]	; (8013858 <ResetMacParameters+0x1ac>)
 80136ca:	2201      	movs	r2, #1
 80136cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 80136d0:	4b61      	ldr	r3, [pc, #388]	; (8013858 <ResetMacParameters+0x1ac>)
 80136d2:	2201      	movs	r2, #1
 80136d4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 80136d8:	4b5f      	ldr	r3, [pc, #380]	; (8013858 <ResetMacParameters+0x1ac>)
 80136da:	2200      	movs	r2, #0
 80136dc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80136e0:	4b5c      	ldr	r3, [pc, #368]	; (8013854 <ResetMacParameters+0x1a8>)
 80136e2:	2200      	movs	r2, #0
 80136e4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80136e8:	4b5a      	ldr	r3, [pc, #360]	; (8013854 <ResetMacParameters+0x1a8>)
 80136ea:	2201      	movs	r2, #1
 80136ec:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80136f0:	4b58      	ldr	r3, [pc, #352]	; (8013854 <ResetMacParameters+0x1a8>)
 80136f2:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80136f6:	4b57      	ldr	r3, [pc, #348]	; (8013854 <ResetMacParameters+0x1a8>)
 80136f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80136fc:	4b55      	ldr	r3, [pc, #340]	; (8013854 <ResetMacParameters+0x1a8>)
 80136fe:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8013702:	4b54      	ldr	r3, [pc, #336]	; (8013854 <ResetMacParameters+0x1a8>)
 8013704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013708:	4b52      	ldr	r3, [pc, #328]	; (8013854 <ResetMacParameters+0x1a8>)
 801370a:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 801370e:	4b51      	ldr	r3, [pc, #324]	; (8013854 <ResetMacParameters+0x1a8>)
 8013710:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013714:	4b4f      	ldr	r3, [pc, #316]	; (8013854 <ResetMacParameters+0x1a8>)
 8013716:	4a4f      	ldr	r2, [pc, #316]	; (8013854 <ResetMacParameters+0x1a8>)
 8013718:	3364      	adds	r3, #100	; 0x64
 801371a:	32a8      	adds	r2, #168	; 0xa8
 801371c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013720:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013724:	4b4b      	ldr	r3, [pc, #300]	; (8013854 <ResetMacParameters+0x1a8>)
 8013726:	4a4b      	ldr	r2, [pc, #300]	; (8013854 <ResetMacParameters+0x1a8>)
 8013728:	336c      	adds	r3, #108	; 0x6c
 801372a:	32b0      	adds	r2, #176	; 0xb0
 801372c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013730:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013734:	4b47      	ldr	r3, [pc, #284]	; (8013854 <ResetMacParameters+0x1a8>)
 8013736:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 801373a:	4b46      	ldr	r3, [pc, #280]	; (8013854 <ResetMacParameters+0x1a8>)
 801373c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013740:	4b44      	ldr	r3, [pc, #272]	; (8013854 <ResetMacParameters+0x1a8>)
 8013742:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8013746:	4b43      	ldr	r3, [pc, #268]	; (8013854 <ResetMacParameters+0x1a8>)
 8013748:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801374c:	4b41      	ldr	r3, [pc, #260]	; (8013854 <ResetMacParameters+0x1a8>)
 801374e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013752:	4a40      	ldr	r2, [pc, #256]	; (8013854 <ResetMacParameters+0x1a8>)
 8013754:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013756:	4b3f      	ldr	r3, [pc, #252]	; (8013854 <ResetMacParameters+0x1a8>)
 8013758:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801375c:	4a3d      	ldr	r2, [pc, #244]	; (8013854 <ResetMacParameters+0x1a8>)
 801375e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8013760:	4b3d      	ldr	r3, [pc, #244]	; (8013858 <ResetMacParameters+0x1ac>)
 8013762:	2200      	movs	r2, #0
 8013764:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8013768:	4b3a      	ldr	r3, [pc, #232]	; (8013854 <ResetMacParameters+0x1a8>)
 801376a:	2200      	movs	r2, #0
 801376c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013770:	2301      	movs	r3, #1
 8013772:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013774:	4b39      	ldr	r3, [pc, #228]	; (801385c <ResetMacParameters+0x1b0>)
 8013776:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013778:	4b39      	ldr	r3, [pc, #228]	; (8013860 <ResetMacParameters+0x1b4>)
 801377a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801377c:	4b35      	ldr	r3, [pc, #212]	; (8013854 <ResetMacParameters+0x1a8>)
 801377e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013782:	1d3a      	adds	r2, r7, #4
 8013784:	4611      	mov	r1, r2
 8013786:	4618      	mov	r0, r3
 8013788:	f004 f8c1 	bl	801790e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801378c:	4b32      	ldr	r3, [pc, #200]	; (8013858 <ResetMacParameters+0x1ac>)
 801378e:	2200      	movs	r2, #0
 8013790:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013794:	4b30      	ldr	r3, [pc, #192]	; (8013858 <ResetMacParameters+0x1ac>)
 8013796:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801379a:	4b2f      	ldr	r3, [pc, #188]	; (8013858 <ResetMacParameters+0x1ac>)
 801379c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80137a0:	4b2c      	ldr	r3, [pc, #176]	; (8013854 <ResetMacParameters+0x1a8>)
 80137a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137a4:	4a2c      	ldr	r2, [pc, #176]	; (8013858 <ResetMacParameters+0x1ac>)
 80137a6:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137aa:	4b2a      	ldr	r3, [pc, #168]	; (8013854 <ResetMacParameters+0x1a8>)
 80137ac:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80137b0:	4b29      	ldr	r3, [pc, #164]	; (8013858 <ResetMacParameters+0x1ac>)
 80137b2:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80137b6:	4b27      	ldr	r3, [pc, #156]	; (8013854 <ResetMacParameters+0x1a8>)
 80137b8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80137bc:	4b26      	ldr	r3, [pc, #152]	; (8013858 <ResetMacParameters+0x1ac>)
 80137be:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80137c2:	4b25      	ldr	r3, [pc, #148]	; (8013858 <ResetMacParameters+0x1ac>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80137ca:	4b23      	ldr	r3, [pc, #140]	; (8013858 <ResetMacParameters+0x1ac>)
 80137cc:	2201      	movs	r2, #1
 80137ce:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80137d2:	4a21      	ldr	r2, [pc, #132]	; (8013858 <ResetMacParameters+0x1ac>)
 80137d4:	4b20      	ldr	r3, [pc, #128]	; (8013858 <ResetMacParameters+0x1ac>)
 80137d6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80137da:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80137de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137e2:	682b      	ldr	r3, [r5, #0]
 80137e4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80137e6:	4b1c      	ldr	r3, [pc, #112]	; (8013858 <ResetMacParameters+0x1ac>)
 80137e8:	2201      	movs	r2, #1
 80137ea:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80137ee:	4b1a      	ldr	r3, [pc, #104]	; (8013858 <ResetMacParameters+0x1ac>)
 80137f0:	2202      	movs	r2, #2
 80137f2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80137f6:	2300      	movs	r3, #0
 80137f8:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 80137fe:	4b16      	ldr	r3, [pc, #88]	; (8013858 <ResetMacParameters+0x1ac>)
 8013800:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013804:	2b00      	cmp	r3, #0
 8013806:	d009      	beq.n	801381c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013808:	4b13      	ldr	r3, [pc, #76]	; (8013858 <ResetMacParameters+0x1ac>)
 801380a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013812:	4b11      	ldr	r3, [pc, #68]	; (8013858 <ResetMacParameters+0x1ac>)
 8013814:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801381c:	4b11      	ldr	r3, [pc, #68]	; (8013864 <ResetMacParameters+0x1b8>)
 801381e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013820:	4b11      	ldr	r3, [pc, #68]	; (8013868 <ResetMacParameters+0x1bc>)
 8013822:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013824:	4b11      	ldr	r3, [pc, #68]	; (801386c <ResetMacParameters+0x1c0>)
 8013826:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013828:	4b11      	ldr	r3, [pc, #68]	; (8013870 <ResetMacParameters+0x1c4>)
 801382a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801382c:	4b11      	ldr	r3, [pc, #68]	; (8013874 <ResetMacParameters+0x1c8>)
 801382e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013830:	4b11      	ldr	r3, [pc, #68]	; (8013878 <ResetMacParameters+0x1cc>)
 8013832:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013834:	4b11      	ldr	r3, [pc, #68]	; (801387c <ResetMacParameters+0x1d0>)
 8013836:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013838:	4b11      	ldr	r3, [pc, #68]	; (8013880 <ResetMacParameters+0x1d4>)
 801383a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801383c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013840:	f107 0310 	add.w	r3, r7, #16
 8013844:	4a0f      	ldr	r2, [pc, #60]	; (8013884 <ResetMacParameters+0x1d8>)
 8013846:	4618      	mov	r0, r3
 8013848:	f002 f88a 	bl	8015960 <LoRaMacClassBInit>
}
 801384c:	bf00      	nop
 801384e:	3738      	adds	r7, #56	; 0x38
 8013850:	46bd      	mov	sp, r7
 8013852:	bdb0      	pop	{r4, r5, r7, pc}
 8013854:	20001308 	.word	0x20001308
 8013858:	20000dfc 	.word	0x20000dfc
 801385c:	200014e8 	.word	0x200014e8
 8013860:	2000157c 	.word	0x2000157c
 8013864:	2000125c 	.word	0x2000125c
 8013868:	20001218 	.word	0x20001218
 801386c:	20001248 	.word	0x20001248
 8013870:	20001281 	.word	0x20001281
 8013874:	200013dc 	.word	0x200013dc
 8013878:	20001348 	.word	0x20001348
 801387c:	2000134c 	.word	0x2000134c
 8013880:	200013e0 	.word	0x200013e0
 8013884:	20001a18 	.word	0x20001a18

08013888 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f00a fc70 	bl	801e178 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013898:	4b11      	ldr	r3, [pc, #68]	; (80138e0 <RxWindowSetup+0x58>)
 801389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801389c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801389e:	4b11      	ldr	r3, [pc, #68]	; (80138e4 <RxWindowSetup+0x5c>)
 80138a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138a4:	4a10      	ldr	r2, [pc, #64]	; (80138e8 <RxWindowSetup+0x60>)
 80138a6:	6839      	ldr	r1, [r7, #0]
 80138a8:	4618      	mov	r0, r3
 80138aa:	f004 f898 	bl	80179de <RegionRxConfig>
 80138ae:	4603      	mov	r3, r0
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d010      	beq.n	80138d6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80138b4:	4b0d      	ldr	r3, [pc, #52]	; (80138ec <RxWindowSetup+0x64>)
 80138b6:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80138ba:	4b0c      	ldr	r3, [pc, #48]	; (80138ec <RxWindowSetup+0x64>)
 80138bc:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80138c0:	4b07      	ldr	r3, [pc, #28]	; (80138e0 <RxWindowSetup+0x58>)
 80138c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138c4:	4a07      	ldr	r2, [pc, #28]	; (80138e4 <RxWindowSetup+0x5c>)
 80138c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80138c8:	4610      	mov	r0, r2
 80138ca:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	7cda      	ldrb	r2, [r3, #19]
 80138d0:	4b06      	ldr	r3, [pc, #24]	; (80138ec <RxWindowSetup+0x64>)
 80138d2:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80138d6:	bf00      	nop
 80138d8:	3708      	adds	r7, #8
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	0801fa3c 	.word	0x0801fa3c
 80138e4:	20001308 	.word	0x20001308
 80138e8:	2000121c 	.word	0x2000121c
 80138ec:	20000dfc 	.word	0x20000dfc

080138f0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80138f0:	b590      	push	{r4, r7, lr}
 80138f2:	b083      	sub	sp, #12
 80138f4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80138f6:	4b1b      	ldr	r3, [pc, #108]	; (8013964 <OpenContinuousRxCWindow+0x74>)
 80138f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80138fc:	4b19      	ldr	r3, [pc, #100]	; (8013964 <OpenContinuousRxCWindow+0x74>)
 80138fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013902:	b259      	sxtb	r1, r3
 8013904:	4b17      	ldr	r3, [pc, #92]	; (8013964 <OpenContinuousRxCWindow+0x74>)
 8013906:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801390a:	4b16      	ldr	r3, [pc, #88]	; (8013964 <OpenContinuousRxCWindow+0x74>)
 801390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801390e:	4c16      	ldr	r4, [pc, #88]	; (8013968 <OpenContinuousRxCWindow+0x78>)
 8013910:	9400      	str	r4, [sp, #0]
 8013912:	f004 f84a 	bl	80179aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013916:	4b15      	ldr	r3, [pc, #84]	; (801396c <OpenContinuousRxCWindow+0x7c>)
 8013918:	2202      	movs	r2, #2
 801391a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801391e:	4b13      	ldr	r3, [pc, #76]	; (801396c <OpenContinuousRxCWindow+0x7c>)
 8013920:	2201      	movs	r2, #1
 8013922:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013926:	4b0f      	ldr	r3, [pc, #60]	; (8013964 <OpenContinuousRxCWindow+0x74>)
 8013928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801392c:	4a10      	ldr	r2, [pc, #64]	; (8013970 <OpenContinuousRxCWindow+0x80>)
 801392e:	490e      	ldr	r1, [pc, #56]	; (8013968 <OpenContinuousRxCWindow+0x78>)
 8013930:	4618      	mov	r0, r3
 8013932:	f004 f854 	bl	80179de <RegionRxConfig>
 8013936:	4603      	mov	r3, r0
 8013938:	2b00      	cmp	r3, #0
 801393a:	d00f      	beq.n	801395c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801393c:	4b0b      	ldr	r3, [pc, #44]	; (801396c <OpenContinuousRxCWindow+0x7c>)
 801393e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8013942:	4b0a      	ldr	r3, [pc, #40]	; (801396c <OpenContinuousRxCWindow+0x7c>)
 8013944:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8013948:	4b0a      	ldr	r3, [pc, #40]	; (8013974 <OpenContinuousRxCWindow+0x84>)
 801394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801394c:	2000      	movs	r0, #0
 801394e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013950:	4b06      	ldr	r3, [pc, #24]	; (801396c <OpenContinuousRxCWindow+0x7c>)
 8013952:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8013956:	4b05      	ldr	r3, [pc, #20]	; (801396c <OpenContinuousRxCWindow+0x7c>)
 8013958:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801395c:	bf00      	nop
 801395e:	3704      	adds	r7, #4
 8013960:	46bd      	mov	sp, r7
 8013962:	bd90      	pop	{r4, r7, pc}
 8013964:	20001308 	.word	0x20001308
 8013968:	200011dc 	.word	0x200011dc
 801396c:	20000dfc 	.word	0x20000dfc
 8013970:	2000121c 	.word	0x2000121c
 8013974:	0801fa3c 	.word	0x0801fa3c

08013978 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b088      	sub	sp, #32
 801397c:	af00      	add	r7, sp, #0
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	60b9      	str	r1, [r7, #8]
 8013982:	603b      	str	r3, [r7, #0]
 8013984:	4613      	mov	r3, r2
 8013986:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013988:	4b82      	ldr	r3, [pc, #520]	; (8013b94 <PrepareFrame+0x21c>)
 801398a:	2200      	movs	r2, #0
 801398c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801398e:	4b81      	ldr	r3, [pc, #516]	; (8013b94 <PrepareFrame+0x21c>)
 8013990:	2200      	movs	r2, #0
 8013992:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8013996:	2300      	movs	r3, #0
 8013998:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801399a:	2300      	movs	r3, #0
 801399c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801399e:	2300      	movs	r3, #0
 80139a0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d101      	bne.n	80139ac <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80139ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80139ae:	461a      	mov	r2, r3
 80139b0:	6839      	ldr	r1, [r7, #0]
 80139b2:	4879      	ldr	r0, [pc, #484]	; (8013b98 <PrepareFrame+0x220>)
 80139b4:	f006 fa95 	bl	8019ee2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80139b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	4b75      	ldr	r3, [pc, #468]	; (8013b94 <PrepareFrame+0x21c>)
 80139be:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	781a      	ldrb	r2, [r3, #0]
 80139c6:	4b73      	ldr	r3, [pc, #460]	; (8013b94 <PrepareFrame+0x21c>)
 80139c8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	2b07      	cmp	r3, #7
 80139d6:	f000 80b9 	beq.w	8013b4c <PrepareFrame+0x1d4>
 80139da:	2b07      	cmp	r3, #7
 80139dc:	f300 80d0 	bgt.w	8013b80 <PrepareFrame+0x208>
 80139e0:	2b02      	cmp	r3, #2
 80139e2:	d006      	beq.n	80139f2 <PrepareFrame+0x7a>
 80139e4:	2b04      	cmp	r3, #4
 80139e6:	f040 80cb 	bne.w	8013b80 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80139ea:	4b6a      	ldr	r3, [pc, #424]	; (8013b94 <PrepareFrame+0x21c>)
 80139ec:	2201      	movs	r2, #1
 80139ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80139f2:	4b68      	ldr	r3, [pc, #416]	; (8013b94 <PrepareFrame+0x21c>)
 80139f4:	2204      	movs	r2, #4
 80139f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80139fa:	4b66      	ldr	r3, [pc, #408]	; (8013b94 <PrepareFrame+0x21c>)
 80139fc:	4a67      	ldr	r2, [pc, #412]	; (8013b9c <PrepareFrame+0x224>)
 80139fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013a02:	4b64      	ldr	r3, [pc, #400]	; (8013b94 <PrepareFrame+0x21c>)
 8013a04:	22ff      	movs	r2, #255	; 0xff
 8013a06:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	781a      	ldrb	r2, [r3, #0]
 8013a0e:	4b61      	ldr	r3, [pc, #388]	; (8013b94 <PrepareFrame+0x21c>)
 8013a10:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013a14:	4a5f      	ldr	r2, [pc, #380]	; (8013b94 <PrepareFrame+0x21c>)
 8013a16:	79fb      	ldrb	r3, [r7, #7]
 8013a18:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013a1c:	4b60      	ldr	r3, [pc, #384]	; (8013ba0 <PrepareFrame+0x228>)
 8013a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013a22:	4a5c      	ldr	r2, [pc, #368]	; (8013b94 <PrepareFrame+0x21c>)
 8013a24:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	781a      	ldrb	r2, [r3, #0]
 8013a2c:	4b59      	ldr	r3, [pc, #356]	; (8013b94 <PrepareFrame+0x21c>)
 8013a2e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013a32:	4b58      	ldr	r3, [pc, #352]	; (8013b94 <PrepareFrame+0x21c>)
 8013a34:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013a38:	4b56      	ldr	r3, [pc, #344]	; (8013b94 <PrepareFrame+0x21c>)
 8013a3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013a3e:	4b55      	ldr	r3, [pc, #340]	; (8013b94 <PrepareFrame+0x21c>)
 8013a40:	4a55      	ldr	r2, [pc, #340]	; (8013b98 <PrepareFrame+0x220>)
 8013a42:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013a46:	f107 0318 	add.w	r3, r7, #24
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f003 f890 	bl	8016b70 <LoRaMacCryptoGetFCntUp>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d001      	beq.n	8013a5a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013a56:	2312      	movs	r3, #18
 8013a58:	e098      	b.n	8013b8c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013a5a:	69bb      	ldr	r3, [r7, #24]
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	4b4d      	ldr	r3, [pc, #308]	; (8013b94 <PrepareFrame+0x21c>)
 8013a60:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8013a64:	4b4b      	ldr	r3, [pc, #300]	; (8013b94 <PrepareFrame+0x21c>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013a6c:	4b49      	ldr	r3, [pc, #292]	; (8013b94 <PrepareFrame+0x21c>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013a74:	69bb      	ldr	r3, [r7, #24]
 8013a76:	4a47      	ldr	r2, [pc, #284]	; (8013b94 <PrepareFrame+0x21c>)
 8013a78:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013a7c:	f107 0314 	add.w	r3, r7, #20
 8013a80:	4618      	mov	r0, r3
 8013a82:	f002 fa2d 	bl	8015ee0 <LoRaMacCommandsGetSizeSerializedCmds>
 8013a86:	4603      	mov	r3, r0
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d001      	beq.n	8013a90 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a8c:	2313      	movs	r3, #19
 8013a8e:	e07d      	b.n	8013b8c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d076      	beq.n	8013b84 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013a96:	4b42      	ldr	r3, [pc, #264]	; (8013ba0 <PrepareFrame+0x228>)
 8013a98:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7fe fdb5 	bl	801260c <GetMaxAppPayloadWithoutFOptsLength>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013aa6:	4b3b      	ldr	r3, [pc, #236]	; (8013b94 <PrepareFrame+0x21c>)
 8013aa8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01d      	beq.n	8013aec <PrepareFrame+0x174>
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	2b0f      	cmp	r3, #15
 8013ab4:	d81a      	bhi.n	8013aec <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013ab6:	f107 0314 	add.w	r3, r7, #20
 8013aba:	4a3a      	ldr	r2, [pc, #232]	; (8013ba4 <PrepareFrame+0x22c>)
 8013abc:	4619      	mov	r1, r3
 8013abe:	200f      	movs	r0, #15
 8013ac0:	f002 fa24 	bl	8015f0c <LoRaMacCommandsSerializeCmds>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d001      	beq.n	8013ace <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013aca:	2313      	movs	r3, #19
 8013acc:	e05e      	b.n	8013b8c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	f003 030f 	and.w	r3, r3, #15
 8013ad4:	b2d9      	uxtb	r1, r3
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	7813      	ldrb	r3, [r2, #0]
 8013ada:	f361 0303 	bfi	r3, r1, #0, #4
 8013ade:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	781a      	ldrb	r2, [r3, #0]
 8013ae4:	4b2b      	ldr	r3, [pc, #172]	; (8013b94 <PrepareFrame+0x21c>)
 8013ae6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013aea:	e04b      	b.n	8013b84 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013aec:	4b29      	ldr	r3, [pc, #164]	; (8013b94 <PrepareFrame+0x21c>)
 8013aee:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d010      	beq.n	8013b18 <PrepareFrame+0x1a0>
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	2b0f      	cmp	r3, #15
 8013afa:	d90d      	bls.n	8013b18 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013afc:	7ffb      	ldrb	r3, [r7, #31]
 8013afe:	f107 0114 	add.w	r1, r7, #20
 8013b02:	4a29      	ldr	r2, [pc, #164]	; (8013ba8 <PrepareFrame+0x230>)
 8013b04:	4618      	mov	r0, r3
 8013b06:	f002 fa01 	bl	8015f0c <LoRaMacCommandsSerializeCmds>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d001      	beq.n	8013b14 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b10:	2313      	movs	r3, #19
 8013b12:	e03b      	b.n	8013b8c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013b14:	230a      	movs	r3, #10
 8013b16:	e039      	b.n	8013b8c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b18:	7ffb      	ldrb	r3, [r7, #31]
 8013b1a:	f107 0114 	add.w	r1, r7, #20
 8013b1e:	4a22      	ldr	r2, [pc, #136]	; (8013ba8 <PrepareFrame+0x230>)
 8013b20:	4618      	mov	r0, r3
 8013b22:	f002 f9f3 	bl	8015f0c <LoRaMacCommandsSerializeCmds>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d001      	beq.n	8013b30 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b2c:	2313      	movs	r3, #19
 8013b2e:	e02d      	b.n	8013b8c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013b30:	4b18      	ldr	r3, [pc, #96]	; (8013b94 <PrepareFrame+0x21c>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013b38:	4b16      	ldr	r3, [pc, #88]	; (8013b94 <PrepareFrame+0x21c>)
 8013b3a:	4a1b      	ldr	r2, [pc, #108]	; (8013ba8 <PrepareFrame+0x230>)
 8013b3c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	b2da      	uxtb	r2, r3
 8013b44:	4b13      	ldr	r3, [pc, #76]	; (8013b94 <PrepareFrame+0x21c>)
 8013b46:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013b4a:	e01b      	b.n	8013b84 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d01a      	beq.n	8013b88 <PrepareFrame+0x210>
 8013b52:	4b10      	ldr	r3, [pc, #64]	; (8013b94 <PrepareFrame+0x21c>)
 8013b54:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d015      	beq.n	8013b88 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013b5c:	4813      	ldr	r0, [pc, #76]	; (8013bac <PrepareFrame+0x234>)
 8013b5e:	4b0d      	ldr	r3, [pc, #52]	; (8013b94 <PrepareFrame+0x21c>)
 8013b60:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	461a      	mov	r2, r3
 8013b68:	6839      	ldr	r1, [r7, #0]
 8013b6a:	f006 f9ba 	bl	8019ee2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013b6e:	4b09      	ldr	r3, [pc, #36]	; (8013b94 <PrepareFrame+0x21c>)
 8013b70:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	3301      	adds	r3, #1
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	4b06      	ldr	r3, [pc, #24]	; (8013b94 <PrepareFrame+0x21c>)
 8013b7c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013b7e:	e003      	b.n	8013b88 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013b80:	2302      	movs	r3, #2
 8013b82:	e003      	b.n	8013b8c <PrepareFrame+0x214>
            break;
 8013b84:	bf00      	nop
 8013b86:	e000      	b.n	8013b8a <PrepareFrame+0x212>
            break;
 8013b88:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013b8a:	2300      	movs	r3, #0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3720      	adds	r7, #32
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	20000dfc 	.word	0x20000dfc
 8013b98:	20000f34 	.word	0x20000f34
 8013b9c:	20000dfe 	.word	0x20000dfe
 8013ba0:	20001308 	.word	0x20001308
 8013ba4:	20000f14 	.word	0x20000f14
 8013ba8:	20001288 	.word	0x20001288
 8013bac:	20000dff 	.word	0x20000dff

08013bb0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08a      	sub	sp, #40	; 0x28
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013bc4:	79fb      	ldrb	r3, [r7, #7]
 8013bc6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013bc8:	4b47      	ldr	r3, [pc, #284]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013bca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013bce:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013bd0:	4b45      	ldr	r3, [pc, #276]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013bd2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013bd6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013bd8:	4b43      	ldr	r3, [pc, #268]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bdc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013bde:	4b42      	ldr	r3, [pc, #264]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013be2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013be4:	4b41      	ldr	r3, [pc, #260]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013bea:	4b3f      	ldr	r3, [pc, #252]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013bec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013bf0:	f107 020f 	add.w	r2, r7, #15
 8013bf4:	f107 0110 	add.w	r1, r7, #16
 8013bf8:	4b3d      	ldr	r3, [pc, #244]	; (8013cf0 <SendFrameOnChannel+0x140>)
 8013bfa:	f003 ff05 	bl	8017a08 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013bfe:	4b3b      	ldr	r3, [pc, #236]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c00:	2201      	movs	r2, #1
 8013c02:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c06:	4b38      	ldr	r3, [pc, #224]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013c08:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c0c:	b2da      	uxtb	r2, r3
 8013c0e:	4b37      	ldr	r3, [pc, #220]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c10:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8013c14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013c18:	4b34      	ldr	r3, [pc, #208]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c1a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8013c1e:	79fb      	ldrb	r3, [r7, #7]
 8013c20:	4a32      	ldr	r2, [pc, #200]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c22:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c26:	4b31      	ldr	r3, [pc, #196]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c2c:	4a2f      	ldr	r2, [pc, #188]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c2e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c32:	4b2e      	ldr	r3, [pc, #184]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c34:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c38:	4a2c      	ldr	r2, [pc, #176]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c3a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013c3e:	f001 fefb 	bl	8015a38 <LoRaMacClassBIsBeaconModeActive>
 8013c42:	4603      	mov	r3, r0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d00b      	beq.n	8013c60 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013c48:	4b28      	ldr	r3, [pc, #160]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c4a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f001 ff5d 	bl	8015b0e <LoRaMacClassBIsUplinkCollision>
 8013c54:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d001      	beq.n	8013c60 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013c5c:	2310      	movs	r3, #16
 8013c5e:	e03e      	b.n	8013cde <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013c60:	4b21      	ldr	r3, [pc, #132]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013c62:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013c66:	2b01      	cmp	r3, #1
 8013c68:	d101      	bne.n	8013c6e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013c6a:	f001 ff5a 	bl	8015b22 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013c6e:	f001 fef4 	bl	8015a5a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013c72:	4b1d      	ldr	r3, [pc, #116]	; (8013ce8 <SendFrameOnChannel+0x138>)
 8013c74:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	4a1c      	ldr	r2, [pc, #112]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c7c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8013c80:	4611      	mov	r1, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7ff fc7c 	bl	8013580 <SecureFrame>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d002      	beq.n	8013c9c <SendFrameOnChannel+0xec>
    {
        return status;
 8013c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c9a:	e020      	b.n	8013cde <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c9c:	4b13      	ldr	r3, [pc, #76]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013c9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013ca2:	f043 0302 	orr.w	r3, r3, #2
 8013ca6:	4a11      	ldr	r2, [pc, #68]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013ca8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013cac:	4b0f      	ldr	r3, [pc, #60]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013cae:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8013cb2:	f083 0301 	eor.w	r3, r3, #1
 8013cb6:	b2db      	uxtb	r3, r3
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d007      	beq.n	8013ccc <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013cbc:	4b0b      	ldr	r3, [pc, #44]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013cbe:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	b2da      	uxtb	r2, r3
 8013cc6:	4b09      	ldr	r3, [pc, #36]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013cc8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013ccc:	4b09      	ldr	r3, [pc, #36]	; (8013cf4 <SendFrameOnChannel+0x144>)
 8013cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cd0:	4a06      	ldr	r2, [pc, #24]	; (8013cec <SendFrameOnChannel+0x13c>)
 8013cd2:	8812      	ldrh	r2, [r2, #0]
 8013cd4:	b2d2      	uxtb	r2, r2
 8013cd6:	4611      	mov	r1, r2
 8013cd8:	4807      	ldr	r0, [pc, #28]	; (8013cf8 <SendFrameOnChannel+0x148>)
 8013cda:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013cdc:	2300      	movs	r3, #0
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3728      	adds	r7, #40	; 0x28
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	20001308 	.word	0x20001308
 8013cec:	20000dfc 	.word	0x20000dfc
 8013cf0:	20001214 	.word	0x20001214
 8013cf4:	0801fa3c 	.word	0x0801fa3c
 8013cf8:	20000dfe 	.word	0x20000dfe

08013cfc <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b086      	sub	sp, #24
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	4603      	mov	r3, r0
 8013d04:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013d06:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <SetTxContinuousWave+0x60>)
 8013d08:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013d0c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013d0e:	4b14      	ldr	r3, [pc, #80]	; (8013d60 <SetTxContinuousWave+0x64>)
 8013d10:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013d14:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013d16:	4b12      	ldr	r3, [pc, #72]	; (8013d60 <SetTxContinuousWave+0x64>)
 8013d18:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013d1c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013d1e:	4b10      	ldr	r3, [pc, #64]	; (8013d60 <SetTxContinuousWave+0x64>)
 8013d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d22:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013d24:	4b0e      	ldr	r3, [pc, #56]	; (8013d60 <SetTxContinuousWave+0x64>)
 8013d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d28:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013d2a:	88fb      	ldrh	r3, [r7, #6]
 8013d2c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013d2e:	4b0c      	ldr	r3, [pc, #48]	; (8013d60 <SetTxContinuousWave+0x64>)
 8013d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d34:	f107 0208 	add.w	r2, r7, #8
 8013d38:	4611      	mov	r1, r2
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f003 ff13 	bl	8017b66 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d40:	4b06      	ldr	r3, [pc, #24]	; (8013d5c <SetTxContinuousWave+0x60>)
 8013d42:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d46:	f043 0302 	orr.w	r3, r3, #2
 8013d4a:	4a04      	ldr	r2, [pc, #16]	; (8013d5c <SetTxContinuousWave+0x60>)
 8013d4c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013d50:	2300      	movs	r3, #0
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3718      	adds	r7, #24
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	20000dfc 	.word	0x20000dfc
 8013d60:	20001308 	.word	0x20001308

08013d64 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b082      	sub	sp, #8
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	6039      	str	r1, [r7, #0]
 8013d6e:	80fb      	strh	r3, [r7, #6]
 8013d70:	4613      	mov	r3, r2
 8013d72:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013d74:	4b09      	ldr	r3, [pc, #36]	; (8013d9c <SetTxContinuousWave1+0x38>)
 8013d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d78:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013d7c:	88fa      	ldrh	r2, [r7, #6]
 8013d7e:	6838      	ldr	r0, [r7, #0]
 8013d80:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d82:	4b07      	ldr	r3, [pc, #28]	; (8013da0 <SetTxContinuousWave1+0x3c>)
 8013d84:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d88:	f043 0302 	orr.w	r3, r3, #2
 8013d8c:	4a04      	ldr	r2, [pc, #16]	; (8013da0 <SetTxContinuousWave1+0x3c>)
 8013d8e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013d92:	2300      	movs	r3, #0
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	0801fa3c 	.word	0x0801fa3c
 8013da0:	20000dfc 	.word	0x20000dfc

08013da4 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013dae:	4b3e      	ldr	r3, [pc, #248]	; (8013ea8 <RestoreNvmData+0x104>)
 8013db0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d001      	beq.n	8013dbc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8013db8:	2301      	movs	r3, #1
 8013dba:	e071      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013dbc:	2124      	movs	r1, #36	; 0x24
 8013dbe:	483b      	ldr	r0, [pc, #236]	; (8013eac <RestoreNvmData+0x108>)
 8013dc0:	f006 f8e4 	bl	8019f8c <Crc32>
 8013dc4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8013dc6:	4b39      	ldr	r3, [pc, #228]	; (8013eac <RestoreNvmData+0x108>)
 8013dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d001      	beq.n	8013dd4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013dd0:	2317      	movs	r3, #23
 8013dd2:	e065      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013dd4:	2114      	movs	r1, #20
 8013dd6:	4836      	ldr	r0, [pc, #216]	; (8013eb0 <RestoreNvmData+0x10c>)
 8013dd8:	f006 f8d8 	bl	8019f8c <Crc32>
 8013ddc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013dde:	4b33      	ldr	r3, [pc, #204]	; (8013eac <RestoreNvmData+0x108>)
 8013de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d001      	beq.n	8013dec <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013de8:	2317      	movs	r3, #23
 8013dea:	e059      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013dec:	21dc      	movs	r1, #220	; 0xdc
 8013dee:	4831      	ldr	r0, [pc, #196]	; (8013eb4 <RestoreNvmData+0x110>)
 8013df0:	f006 f8cc 	bl	8019f8c <Crc32>
 8013df4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8013df6:	4b2d      	ldr	r3, [pc, #180]	; (8013eac <RestoreNvmData+0x108>)
 8013df8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d001      	beq.n	8013e06 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e02:	2317      	movs	r3, #23
 8013e04:	e04c      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8013e06:	21bc      	movs	r1, #188	; 0xbc
 8013e08:	482b      	ldr	r0, [pc, #172]	; (8013eb8 <RestoreNvmData+0x114>)
 8013e0a:	f006 f8bf 	bl	8019f8c <Crc32>
 8013e0e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013e10:	4b26      	ldr	r3, [pc, #152]	; (8013eac <RestoreNvmData+0x108>)
 8013e12:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8013e16:	687a      	ldr	r2, [r7, #4]
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d001      	beq.n	8013e20 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e1c:	2317      	movs	r3, #23
 8013e1e:	e03f      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013e20:	2190      	movs	r1, #144	; 0x90
 8013e22:	4826      	ldr	r0, [pc, #152]	; (8013ebc <RestoreNvmData+0x118>)
 8013e24:	f006 f8b2 	bl	8019f8c <Crc32>
 8013e28:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8013e2a:	4b20      	ldr	r3, [pc, #128]	; (8013eac <RestoreNvmData+0x108>)
 8013e2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d001      	beq.n	8013e3a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e36:	2317      	movs	r3, #23
 8013e38:	e032      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8013e3a:	2114      	movs	r1, #20
 8013e3c:	4820      	ldr	r0, [pc, #128]	; (8013ec0 <RestoreNvmData+0x11c>)
 8013e3e:	f006 f8a5 	bl	8019f8c <Crc32>
 8013e42:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013e44:	4b19      	ldr	r3, [pc, #100]	; (8013eac <RestoreNvmData+0x108>)
 8013e46:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d001      	beq.n	8013e54 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e50:	2317      	movs	r3, #23
 8013e52:	e025      	b.n	8013ea0 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013e54:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013e58:	4914      	ldr	r1, [pc, #80]	; (8013eac <RestoreNvmData+0x108>)
 8013e5a:	481a      	ldr	r0, [pc, #104]	; (8013ec4 <RestoreNvmData+0x120>)
 8013e5c:	f006 f841 	bl	8019ee2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013e60:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013e64:	2100      	movs	r1, #0
 8013e66:	4811      	ldr	r0, [pc, #68]	; (8013eac <RestoreNvmData+0x108>)
 8013e68:	f006 f876 	bl	8019f58 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013e6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ea8 <RestoreNvmData+0x104>)
 8013e6e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8013e72:	4b0d      	ldr	r3, [pc, #52]	; (8013ea8 <RestoreNvmData+0x104>)
 8013e74:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013e78:	4b12      	ldr	r3, [pc, #72]	; (8013ec4 <RestoreNvmData+0x120>)
 8013e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e7c:	4a0a      	ldr	r2, [pc, #40]	; (8013ea8 <RestoreNvmData+0x104>)
 8013e7e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013e82:	4b10      	ldr	r3, [pc, #64]	; (8013ec4 <RestoreNvmData+0x120>)
 8013e84:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013e88:	4b07      	ldr	r3, [pc, #28]	; (8013ea8 <RestoreNvmData+0x104>)
 8013e8a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013e8e:	4b06      	ldr	r3, [pc, #24]	; (8013ea8 <RestoreNvmData+0x104>)
 8013e90:	2201      	movs	r2, #1
 8013e92:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013e96:	4b04      	ldr	r3, [pc, #16]	; (8013ea8 <RestoreNvmData+0x104>)
 8013e98:	2202      	movs	r2, #2
 8013e9a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8013e9e:	2300      	movs	r3, #0
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3708      	adds	r7, #8
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	20000dfc 	.word	0x20000dfc
 8013eac:	20001a30 	.word	0x20001a30
 8013eb0:	20001a58 	.word	0x20001a58
 8013eb4:	20001a70 	.word	0x20001a70
 8013eb8:	20001b50 	.word	0x20001b50
 8013ebc:	20001c10 	.word	0x20001c10
 8013ec0:	20002140 	.word	0x20002140
 8013ec4:	20001308 	.word	0x20001308

08013ec8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b083      	sub	sp, #12
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <DetermineFrameType+0x16>
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d101      	bne.n	8013ee2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ede:	2303      	movs	r3, #3
 8013ee0:	e03b      	b.n	8013f5a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	7b1b      	ldrb	r3, [r3, #12]
 8013ee6:	f003 030f 	and.w	r3, r3, #15
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d008      	beq.n	8013f02 <DetermineFrameType+0x3a>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d003      	beq.n	8013f02 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	2200      	movs	r2, #0
 8013efe:	701a      	strb	r2, [r3, #0]
 8013f00:	e02a      	b.n	8013f58 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d103      	bne.n	8013f14 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	2201      	movs	r2, #1
 8013f10:	701a      	strb	r2, [r3, #0]
 8013f12:	e021      	b.n	8013f58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	7b1b      	ldrb	r3, [r3, #12]
 8013f18:	f003 030f 	and.w	r3, r3, #15
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d108      	bne.n	8013f34 <DetermineFrameType+0x6c>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d103      	bne.n	8013f34 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	2202      	movs	r2, #2
 8013f30:	701a      	strb	r2, [r3, #0]
 8013f32:	e011      	b.n	8013f58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	7b1b      	ldrb	r3, [r3, #12]
 8013f38:	f003 030f 	and.w	r3, r3, #15
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d108      	bne.n	8013f54 <DetermineFrameType+0x8c>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d003      	beq.n	8013f54 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2203      	movs	r2, #3
 8013f50:	701a      	strb	r2, [r3, #0]
 8013f52:	e001      	b.n	8013f58 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013f54:	2318      	movs	r3, #24
 8013f56:	e000      	b.n	8013f5a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013f58:	2300      	movs	r3, #0
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	370c      	adds	r7, #12
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bc80      	pop	{r7}
 8013f62:	4770      	bx	lr

08013f64 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013f64:	b480      	push	{r7}
 8013f66:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013f68:	4b12      	ldr	r3, [pc, #72]	; (8013fb4 <CheckRetransUnconfirmedUplink+0x50>)
 8013f6a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013f6e:	4b12      	ldr	r3, [pc, #72]	; (8013fb8 <CheckRetransUnconfirmedUplink+0x54>)
 8013f70:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d301      	bcc.n	8013f7c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	e016      	b.n	8013faa <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013f7c:	4b0d      	ldr	r3, [pc, #52]	; (8013fb4 <CheckRetransUnconfirmedUplink+0x50>)
 8013f7e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8013f82:	f003 0302 	and.w	r3, r3, #2
 8013f86:	b2db      	uxtb	r3, r3
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d00d      	beq.n	8013fa8 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013f8c:	4b0a      	ldr	r3, [pc, #40]	; (8013fb8 <CheckRetransUnconfirmedUplink+0x54>)
 8013f8e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d101      	bne.n	8013f9a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013f96:	2301      	movs	r3, #1
 8013f98:	e007      	b.n	8013faa <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013f9a:	4b06      	ldr	r3, [pc, #24]	; (8013fb4 <CheckRetransUnconfirmedUplink+0x50>)
 8013f9c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d101      	bne.n	8013fa8 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e000      	b.n	8013faa <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bc80      	pop	{r7}
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop
 8013fb4:	20000dfc 	.word	0x20000dfc
 8013fb8:	20001308 	.word	0x20001308

08013fbc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013fc0:	4b0e      	ldr	r3, [pc, #56]	; (8013ffc <CheckRetransConfirmedUplink+0x40>)
 8013fc2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8013fc6:	4b0d      	ldr	r3, [pc, #52]	; (8013ffc <CheckRetransConfirmedUplink+0x40>)
 8013fc8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d301      	bcc.n	8013fd4 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	e00f      	b.n	8013ff4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013fd4:	4b09      	ldr	r3, [pc, #36]	; (8013ffc <CheckRetransConfirmedUplink+0x40>)
 8013fd6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8013fda:	f003 0302 	and.w	r3, r3, #2
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d006      	beq.n	8013ff2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013fe4:	4b05      	ldr	r3, [pc, #20]	; (8013ffc <CheckRetransConfirmedUplink+0x40>)
 8013fe6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d001      	beq.n	8013ff2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e000      	b.n	8013ff4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bc80      	pop	{r7}
 8013ffa:	4770      	bx	lr
 8013ffc:	20000dfc 	.word	0x20000dfc

08014000 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8014000:	b480      	push	{r7}
 8014002:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8014004:	4b1a      	ldr	r3, [pc, #104]	; (8014070 <StopRetransmission+0x70>)
 8014006:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801400a:	f003 0302 	and.w	r3, r3, #2
 801400e:	b2db      	uxtb	r3, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d009      	beq.n	8014028 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8014014:	4b16      	ldr	r3, [pc, #88]	; (8014070 <StopRetransmission+0x70>)
 8014016:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801401a:	2b00      	cmp	r3, #0
 801401c:	d00e      	beq.n	801403c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801401e:	4b14      	ldr	r3, [pc, #80]	; (8014070 <StopRetransmission+0x70>)
 8014020:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8014024:	2b01      	cmp	r3, #1
 8014026:	d009      	beq.n	801403c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8014028:	4b12      	ldr	r3, [pc, #72]	; (8014074 <StopRetransmission+0x74>)
 801402a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801402e:	2b00      	cmp	r3, #0
 8014030:	d004      	beq.n	801403c <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8014032:	4b10      	ldr	r3, [pc, #64]	; (8014074 <StopRetransmission+0x74>)
 8014034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014036:	3301      	adds	r3, #1
 8014038:	4a0e      	ldr	r2, [pc, #56]	; (8014074 <StopRetransmission+0x74>)
 801403a:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801403c:	4b0c      	ldr	r3, [pc, #48]	; (8014070 <StopRetransmission+0x70>)
 801403e:	2200      	movs	r2, #0
 8014040:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8014044:	4b0a      	ldr	r3, [pc, #40]	; (8014070 <StopRetransmission+0x70>)
 8014046:	2200      	movs	r2, #0
 8014048:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 801404c:	4b08      	ldr	r3, [pc, #32]	; (8014070 <StopRetransmission+0x70>)
 801404e:	2200      	movs	r2, #0
 8014050:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8014054:	4b06      	ldr	r3, [pc, #24]	; (8014070 <StopRetransmission+0x70>)
 8014056:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801405a:	f023 0302 	bic.w	r3, r3, #2
 801405e:	4a04      	ldr	r2, [pc, #16]	; (8014070 <StopRetransmission+0x70>)
 8014060:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8014064:	2301      	movs	r3, #1
}
 8014066:	4618      	mov	r0, r3
 8014068:	46bd      	mov	sp, r7
 801406a:	bc80      	pop	{r7}
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	20000dfc 	.word	0x20000dfc
 8014074:	20001308 	.word	0x20001308

08014078 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	4603      	mov	r3, r0
 8014080:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014082:	4b0b      	ldr	r3, [pc, #44]	; (80140b0 <CallNvmDataChangeCallback+0x38>)
 8014084:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00c      	beq.n	80140a6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801408c:	4b08      	ldr	r3, [pc, #32]	; (80140b0 <CallNvmDataChangeCallback+0x38>)
 801408e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014092:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014094:	2b00      	cmp	r3, #0
 8014096:	d006      	beq.n	80140a6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8014098:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <CallNvmDataChangeCallback+0x38>)
 801409a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	88fa      	ldrh	r2, [r7, #6]
 80140a2:	4610      	mov	r0, r2
 80140a4:	4798      	blx	r3
    }
}
 80140a6:	bf00      	nop
 80140a8:	3708      	adds	r7, #8
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	20000dfc 	.word	0x20000dfc

080140b4 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b084      	sub	sp, #16
 80140b8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80140ba:	4b1b      	ldr	r3, [pc, #108]	; (8014128 <AckTimeoutRetriesProcess+0x74>)
 80140bc:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80140c0:	4b19      	ldr	r3, [pc, #100]	; (8014128 <AckTimeoutRetriesProcess+0x74>)
 80140c2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d229      	bcs.n	801411e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80140ca:	4b17      	ldr	r3, [pc, #92]	; (8014128 <AckTimeoutRetriesProcess+0x74>)
 80140cc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80140d0:	3301      	adds	r3, #1
 80140d2:	b2da      	uxtb	r2, r3
 80140d4:	4b14      	ldr	r3, [pc, #80]	; (8014128 <AckTimeoutRetriesProcess+0x74>)
 80140d6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80140da:	4b13      	ldr	r3, [pc, #76]	; (8014128 <AckTimeoutRetriesProcess+0x74>)
 80140dc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80140e0:	f003 0301 	and.w	r3, r3, #1
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d019      	beq.n	801411e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80140ea:	2322      	movs	r3, #34	; 0x22
 80140ec:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80140ee:	4b0f      	ldr	r3, [pc, #60]	; (801412c <AckTimeoutRetriesProcess+0x78>)
 80140f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80140f4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80140f6:	4b0d      	ldr	r3, [pc, #52]	; (801412c <AckTimeoutRetriesProcess+0x78>)
 80140f8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80140fc:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140fe:	4b0b      	ldr	r3, [pc, #44]	; (801412c <AckTimeoutRetriesProcess+0x78>)
 8014100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014104:	f107 0208 	add.w	r2, r7, #8
 8014108:	4611      	mov	r1, r2
 801410a:	4618      	mov	r0, r3
 801410c:	f003 fbd6 	bl	80178bc <RegionGetPhyParam>
 8014110:	4603      	mov	r3, r0
 8014112:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	b25a      	sxtb	r2, r3
 8014118:	4b04      	ldr	r3, [pc, #16]	; (801412c <AckTimeoutRetriesProcess+0x78>)
 801411a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 801411e:	bf00      	nop
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	20000dfc 	.word	0x20000dfc
 801412c:	20001308 	.word	0x20001308

08014130 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8014136:	4b14      	ldr	r3, [pc, #80]	; (8014188 <AckTimeoutRetriesFinalize+0x58>)
 8014138:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801413c:	f083 0301 	eor.w	r3, r3, #1
 8014140:	b2db      	uxtb	r3, r3
 8014142:	2b00      	cmp	r3, #0
 8014144:	d015      	beq.n	8014172 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014146:	2302      	movs	r3, #2
 8014148:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801414a:	4b10      	ldr	r3, [pc, #64]	; (801418c <AckTimeoutRetriesFinalize+0x5c>)
 801414c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801414e:	4b10      	ldr	r3, [pc, #64]	; (8014190 <AckTimeoutRetriesFinalize+0x60>)
 8014150:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014152:	4b10      	ldr	r3, [pc, #64]	; (8014194 <AckTimeoutRetriesFinalize+0x64>)
 8014154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014158:	1d3a      	adds	r2, r7, #4
 801415a:	4611      	mov	r1, r2
 801415c:	4618      	mov	r0, r3
 801415e:	f003 fbd6 	bl	801790e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8014162:	4b09      	ldr	r3, [pc, #36]	; (8014188 <AckTimeoutRetriesFinalize+0x58>)
 8014164:	2200      	movs	r2, #0
 8014166:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801416a:	4b07      	ldr	r3, [pc, #28]	; (8014188 <AckTimeoutRetriesFinalize+0x58>)
 801416c:	2200      	movs	r2, #0
 801416e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8014172:	4b05      	ldr	r3, [pc, #20]	; (8014188 <AckTimeoutRetriesFinalize+0x58>)
 8014174:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8014178:	4b03      	ldr	r3, [pc, #12]	; (8014188 <AckTimeoutRetriesFinalize+0x58>)
 801417a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 801417e:	bf00      	nop
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	20000dfc 	.word	0x20000dfc
 801418c:	200014e8 	.word	0x200014e8
 8014190:	2000157c 	.word	0x2000157c
 8014194:	20001308 	.word	0x20001308

08014198 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8014198:	b480      	push	{r7}
 801419a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801419c:	4b0b      	ldr	r3, [pc, #44]	; (80141cc <IsRequestPending+0x34>)
 801419e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80141a2:	f003 0304 	and.w	r3, r3, #4
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d107      	bne.n	80141bc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80141ac:	4b07      	ldr	r3, [pc, #28]	; (80141cc <IsRequestPending+0x34>)
 80141ae:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80141b2:	f003 0301 	and.w	r3, r3, #1
 80141b6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d001      	beq.n	80141c0 <IsRequestPending+0x28>
    {
        return 1;
 80141bc:	2301      	movs	r3, #1
 80141be:	e000      	b.n	80141c2 <IsRequestPending+0x2a>
    }
    return 0;
 80141c0:	2300      	movs	r3, #0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bc80      	pop	{r7}
 80141c8:	4770      	bx	lr
 80141ca:	bf00      	nop
 80141cc:	20000dfc 	.word	0x20000dfc

080141d0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80141d0:	b590      	push	{r4, r7, lr}
 80141d2:	b08f      	sub	sp, #60	; 0x3c
 80141d4:	af02      	add	r7, sp, #8
 80141d6:	6178      	str	r0, [r7, #20]
 80141d8:	6139      	str	r1, [r7, #16]
 80141da:	4613      	mov	r3, r2
 80141dc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80141de:	697b      	ldr	r3, [r7, #20]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d002      	beq.n	80141ea <LoRaMacInitialization+0x1a>
 80141e4:	693b      	ldr	r3, [r7, #16]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d101      	bne.n	80141ee <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80141ea:	2303      	movs	r3, #3
 80141ec:	e275      	b.n	80146da <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00b      	beq.n	801420e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d007      	beq.n	801420e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8014202:	2b00      	cmp	r3, #0
 8014204:	d003      	beq.n	801420e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801420a:	2b00      	cmp	r3, #0
 801420c:	d101      	bne.n	8014212 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801420e:	2303      	movs	r3, #3
 8014210:	e263      	b.n	80146da <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8014212:	7bfb      	ldrb	r3, [r7, #15]
 8014214:	4618      	mov	r0, r3
 8014216:	f003 fb41 	bl	801789c <RegionIsActive>
 801421a:	4603      	mov	r3, r0
 801421c:	f083 0301 	eor.w	r3, r3, #1
 8014220:	b2db      	uxtb	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	d001      	beq.n	801422a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014226:	2309      	movs	r3, #9
 8014228:	e257      	b.n	80146da <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801422a:	6978      	ldr	r0, [r7, #20]
 801422c:	f001 ffb8 	bl	80161a0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8014230:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014234:	2100      	movs	r1, #0
 8014236:	48c7      	ldr	r0, [pc, #796]	; (8014554 <LoRaMacInitialization+0x384>)
 8014238:	f005 fe8e 	bl	8019f58 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801423c:	f240 520c 	movw	r2, #1292	; 0x50c
 8014240:	2100      	movs	r1, #0
 8014242:	48c5      	ldr	r0, [pc, #788]	; (8014558 <LoRaMacInitialization+0x388>)
 8014244:	f005 fe88 	bl	8019f58 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014248:	4bc3      	ldr	r3, [pc, #780]	; (8014558 <LoRaMacInitialization+0x388>)
 801424a:	2201      	movs	r2, #1
 801424c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8014250:	4bc1      	ldr	r3, [pc, #772]	; (8014558 <LoRaMacInitialization+0x388>)
 8014252:	2201      	movs	r2, #1
 8014254:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014258:	4abe      	ldr	r2, [pc, #760]	; (8014554 <LoRaMacInitialization+0x384>)
 801425a:	7bfb      	ldrb	r3, [r7, #15]
 801425c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014260:	4bbc      	ldr	r3, [pc, #752]	; (8014554 <LoRaMacInitialization+0x384>)
 8014262:	2200      	movs	r2, #0
 8014264:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8014268:	4bba      	ldr	r3, [pc, #744]	; (8014554 <LoRaMacInitialization+0x384>)
 801426a:	2200      	movs	r2, #0
 801426c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014270:	4bb8      	ldr	r3, [pc, #736]	; (8014554 <LoRaMacInitialization+0x384>)
 8014272:	4aba      	ldr	r2, [pc, #744]	; (801455c <LoRaMacInitialization+0x38c>)
 8014274:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014278:	230f      	movs	r3, #15
 801427a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801427e:	4bb5      	ldr	r3, [pc, #724]	; (8014554 <LoRaMacInitialization+0x384>)
 8014280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014284:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014288:	4611      	mov	r1, r2
 801428a:	4618      	mov	r0, r3
 801428c:	f003 fb16 	bl	80178bc <RegionGetPhyParam>
 8014290:	4603      	mov	r3, r0
 8014292:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014296:	2b00      	cmp	r3, #0
 8014298:	bf14      	ite	ne
 801429a:	2301      	movne	r3, #1
 801429c:	2300      	moveq	r3, #0
 801429e:	b2da      	uxtb	r2, r3
 80142a0:	4bac      	ldr	r3, [pc, #688]	; (8014554 <LoRaMacInitialization+0x384>)
 80142a2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80142a6:	230a      	movs	r3, #10
 80142a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142ac:	4ba9      	ldr	r3, [pc, #676]	; (8014554 <LoRaMacInitialization+0x384>)
 80142ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80142b6:	4611      	mov	r1, r2
 80142b8:	4618      	mov	r0, r3
 80142ba:	f003 faff 	bl	80178bc <RegionGetPhyParam>
 80142be:	4603      	mov	r3, r0
 80142c0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80142c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c4:	b25a      	sxtb	r2, r3
 80142c6:	4ba3      	ldr	r3, [pc, #652]	; (8014554 <LoRaMacInitialization+0x384>)
 80142c8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80142cc:	2306      	movs	r3, #6
 80142ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142d2:	4ba0      	ldr	r3, [pc, #640]	; (8014554 <LoRaMacInitialization+0x384>)
 80142d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80142dc:	4611      	mov	r1, r2
 80142de:	4618      	mov	r0, r3
 80142e0:	f003 faec 	bl	80178bc <RegionGetPhyParam>
 80142e4:	4603      	mov	r3, r0
 80142e6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80142e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ea:	b25a      	sxtb	r2, r3
 80142ec:	4b99      	ldr	r3, [pc, #612]	; (8014554 <LoRaMacInitialization+0x384>)
 80142ee:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80142f2:	2310      	movs	r3, #16
 80142f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142f8:	4b96      	ldr	r3, [pc, #600]	; (8014554 <LoRaMacInitialization+0x384>)
 80142fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014302:	4611      	mov	r1, r2
 8014304:	4618      	mov	r0, r3
 8014306:	f003 fad9 	bl	80178bc <RegionGetPhyParam>
 801430a:	4603      	mov	r3, r0
 801430c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014310:	4a90      	ldr	r2, [pc, #576]	; (8014554 <LoRaMacInitialization+0x384>)
 8014312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8014316:	2311      	movs	r3, #17
 8014318:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801431c:	4b8d      	ldr	r3, [pc, #564]	; (8014554 <LoRaMacInitialization+0x384>)
 801431e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014322:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014326:	4611      	mov	r1, r2
 8014328:	4618      	mov	r0, r3
 801432a:	f003 fac7 	bl	80178bc <RegionGetPhyParam>
 801432e:	4603      	mov	r3, r0
 8014330:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8014332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014334:	4a87      	ldr	r2, [pc, #540]	; (8014554 <LoRaMacInitialization+0x384>)
 8014336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801433a:	2312      	movs	r3, #18
 801433c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014340:	4b84      	ldr	r3, [pc, #528]	; (8014554 <LoRaMacInitialization+0x384>)
 8014342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801434a:	4611      	mov	r1, r2
 801434c:	4618      	mov	r0, r3
 801434e:	f003 fab5 	bl	80178bc <RegionGetPhyParam>
 8014352:	4603      	mov	r3, r0
 8014354:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014358:	4a7e      	ldr	r2, [pc, #504]	; (8014554 <LoRaMacInitialization+0x384>)
 801435a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801435e:	2313      	movs	r3, #19
 8014360:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014364:	4b7b      	ldr	r3, [pc, #492]	; (8014554 <LoRaMacInitialization+0x384>)
 8014366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801436a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801436e:	4611      	mov	r1, r2
 8014370:	4618      	mov	r0, r3
 8014372:	f003 faa3 	bl	80178bc <RegionGetPhyParam>
 8014376:	4603      	mov	r3, r0
 8014378:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437c:	4a75      	ldr	r2, [pc, #468]	; (8014554 <LoRaMacInitialization+0x384>)
 801437e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014382:	2314      	movs	r3, #20
 8014384:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014388:	4b72      	ldr	r3, [pc, #456]	; (8014554 <LoRaMacInitialization+0x384>)
 801438a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801438e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014392:	4611      	mov	r1, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f003 fa91 	bl	80178bc <RegionGetPhyParam>
 801439a:	4603      	mov	r3, r0
 801439c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a0:	4a6c      	ldr	r2, [pc, #432]	; (8014554 <LoRaMacInitialization+0x384>)
 80143a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80143a6:	2317      	movs	r3, #23
 80143a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143ac:	4b69      	ldr	r3, [pc, #420]	; (8014554 <LoRaMacInitialization+0x384>)
 80143ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143b6:	4611      	mov	r1, r2
 80143b8:	4618      	mov	r0, r3
 80143ba:	f003 fa7f 	bl	80178bc <RegionGetPhyParam>
 80143be:	4603      	mov	r3, r0
 80143c0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80143c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c4:	b2da      	uxtb	r2, r3
 80143c6:	4b63      	ldr	r3, [pc, #396]	; (8014554 <LoRaMacInitialization+0x384>)
 80143c8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80143cc:	2318      	movs	r3, #24
 80143ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143d2:	4b60      	ldr	r3, [pc, #384]	; (8014554 <LoRaMacInitialization+0x384>)
 80143d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143dc:	4611      	mov	r1, r2
 80143de:	4618      	mov	r0, r3
 80143e0:	f003 fa6c 	bl	80178bc <RegionGetPhyParam>
 80143e4:	4603      	mov	r3, r0
 80143e6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80143e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ea:	4a5a      	ldr	r2, [pc, #360]	; (8014554 <LoRaMacInitialization+0x384>)
 80143ec:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	4a58      	ldr	r2, [pc, #352]	; (8014554 <LoRaMacInitialization+0x384>)
 80143f4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80143f8:	2319      	movs	r3, #25
 80143fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143fe:	4b55      	ldr	r3, [pc, #340]	; (8014554 <LoRaMacInitialization+0x384>)
 8014400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014404:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014408:	4611      	mov	r1, r2
 801440a:	4618      	mov	r0, r3
 801440c:	f003 fa56 	bl	80178bc <RegionGetPhyParam>
 8014410:	4603      	mov	r3, r0
 8014412:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	b2da      	uxtb	r2, r3
 8014418:	4b4e      	ldr	r3, [pc, #312]	; (8014554 <LoRaMacInitialization+0x384>)
 801441a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014420:	b2da      	uxtb	r2, r3
 8014422:	4b4c      	ldr	r3, [pc, #304]	; (8014554 <LoRaMacInitialization+0x384>)
 8014424:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014428:	231e      	movs	r3, #30
 801442a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801442e:	4b49      	ldr	r3, [pc, #292]	; (8014554 <LoRaMacInitialization+0x384>)
 8014430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014434:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014438:	4611      	mov	r1, r2
 801443a:	4618      	mov	r0, r3
 801443c:	f003 fa3e 	bl	80178bc <RegionGetPhyParam>
 8014440:	4603      	mov	r3, r0
 8014442:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014446:	b2da      	uxtb	r2, r3
 8014448:	4b42      	ldr	r3, [pc, #264]	; (8014554 <LoRaMacInitialization+0x384>)
 801444a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801444e:	231f      	movs	r3, #31
 8014450:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014454:	4b3f      	ldr	r3, [pc, #252]	; (8014554 <LoRaMacInitialization+0x384>)
 8014456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801445a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f003 fa2b 	bl	80178bc <RegionGetPhyParam>
 8014466:	4603      	mov	r3, r0
 8014468:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446c:	b2da      	uxtb	r2, r3
 801446e:	4b39      	ldr	r3, [pc, #228]	; (8014554 <LoRaMacInitialization+0x384>)
 8014470:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014474:	2320      	movs	r3, #32
 8014476:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801447a:	4b36      	ldr	r3, [pc, #216]	; (8014554 <LoRaMacInitialization+0x384>)
 801447c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014480:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014484:	4611      	mov	r1, r2
 8014486:	4618      	mov	r0, r3
 8014488:	f003 fa18 	bl	80178bc <RegionGetPhyParam>
 801448c:	4603      	mov	r3, r0
 801448e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014492:	4a30      	ldr	r2, [pc, #192]	; (8014554 <LoRaMacInitialization+0x384>)
 8014494:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014498:	2321      	movs	r3, #33	; 0x21
 801449a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801449e:	4b2d      	ldr	r3, [pc, #180]	; (8014554 <LoRaMacInitialization+0x384>)
 80144a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144a8:	4611      	mov	r1, r2
 80144aa:	4618      	mov	r0, r3
 80144ac:	f003 fa06 	bl	80178bc <RegionGetPhyParam>
 80144b0:	4603      	mov	r3, r0
 80144b2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80144b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b6:	4a27      	ldr	r2, [pc, #156]	; (8014554 <LoRaMacInitialization+0x384>)
 80144b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80144bc:	230b      	movs	r3, #11
 80144be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144c2:	4b24      	ldr	r3, [pc, #144]	; (8014554 <LoRaMacInitialization+0x384>)
 80144c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144cc:	4611      	mov	r1, r2
 80144ce:	4618      	mov	r0, r3
 80144d0:	f003 f9f4 	bl	80178bc <RegionGetPhyParam>
 80144d4:	4603      	mov	r3, r0
 80144d6:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 80144d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144da:	b29a      	uxth	r2, r3
 80144dc:	4b1e      	ldr	r3, [pc, #120]	; (8014558 <LoRaMacInitialization+0x388>)
 80144de:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80144e2:	230c      	movs	r3, #12
 80144e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144e8:	4b1a      	ldr	r3, [pc, #104]	; (8014554 <LoRaMacInitialization+0x384>)
 80144ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144f2:	4611      	mov	r1, r2
 80144f4:	4618      	mov	r0, r3
 80144f6:	f003 f9e1 	bl	80178bc <RegionGetPhyParam>
 80144fa:	4603      	mov	r3, r0
 80144fc:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 80144fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014500:	b29a      	uxth	r2, r3
 8014502:	4b15      	ldr	r3, [pc, #84]	; (8014558 <LoRaMacInitialization+0x388>)
 8014504:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014508:	4b12      	ldr	r3, [pc, #72]	; (8014554 <LoRaMacInitialization+0x384>)
 801450a:	2201      	movs	r2, #1
 801450c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8014510:	4b10      	ldr	r3, [pc, #64]	; (8014554 <LoRaMacInitialization+0x384>)
 8014512:	220a      	movs	r2, #10
 8014514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8014518:	4b0e      	ldr	r3, [pc, #56]	; (8014554 <LoRaMacInitialization+0x384>)
 801451a:	2206      	movs	r2, #6
 801451c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8014520:	4b0c      	ldr	r3, [pc, #48]	; (8014554 <LoRaMacInitialization+0x384>)
 8014522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014526:	4a0b      	ldr	r2, [pc, #44]	; (8014554 <LoRaMacInitialization+0x384>)
 8014528:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801452a:	4b0a      	ldr	r3, [pc, #40]	; (8014554 <LoRaMacInitialization+0x384>)
 801452c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014530:	4b08      	ldr	r3, [pc, #32]	; (8014554 <LoRaMacInitialization+0x384>)
 8014532:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014536:	4b07      	ldr	r3, [pc, #28]	; (8014554 <LoRaMacInitialization+0x384>)
 8014538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801453c:	4a05      	ldr	r2, [pc, #20]	; (8014554 <LoRaMacInitialization+0x384>)
 801453e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014540:	4b04      	ldr	r3, [pc, #16]	; (8014554 <LoRaMacInitialization+0x384>)
 8014542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014546:	4a03      	ldr	r2, [pc, #12]	; (8014554 <LoRaMacInitialization+0x384>)
 8014548:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801454a:	4b02      	ldr	r3, [pc, #8]	; (8014554 <LoRaMacInitialization+0x384>)
 801454c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014550:	e006      	b.n	8014560 <LoRaMacInitialization+0x390>
 8014552:	bf00      	nop
 8014554:	20001308 	.word	0x20001308
 8014558:	20000dfc 	.word	0x20000dfc
 801455c:	01000300 	.word	0x01000300
 8014560:	4a60      	ldr	r2, [pc, #384]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014562:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014564:	4b5f      	ldr	r3, [pc, #380]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801456a:	4a5e      	ldr	r2, [pc, #376]	; (80146e4 <LoRaMacInitialization+0x514>)
 801456c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801456e:	4b5d      	ldr	r3, [pc, #372]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014574:	4a5b      	ldr	r2, [pc, #364]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014576:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014578:	4b5a      	ldr	r3, [pc, #360]	; (80146e4 <LoRaMacInitialization+0x514>)
 801457a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801457e:	4b59      	ldr	r3, [pc, #356]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014580:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014584:	2300      	movs	r3, #0
 8014586:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801458a:	4b57      	ldr	r3, [pc, #348]	; (80146e8 <LoRaMacInitialization+0x518>)
 801458c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801458e:	4b57      	ldr	r3, [pc, #348]	; (80146ec <LoRaMacInitialization+0x51c>)
 8014590:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014592:	4b54      	ldr	r3, [pc, #336]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014598:	f107 0218 	add.w	r2, r7, #24
 801459c:	4611      	mov	r1, r2
 801459e:	4618      	mov	r0, r3
 80145a0:	f003 f9b5 	bl	801790e <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80145a4:	4a52      	ldr	r2, [pc, #328]	; (80146f0 <LoRaMacInitialization+0x520>)
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80145ac:	f7ff f87e 	bl	80136ac <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80145b0:	4b4c      	ldr	r3, [pc, #304]	; (80146e4 <LoRaMacInitialization+0x514>)
 80145b2:	2201      	movs	r2, #1
 80145b4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 80145b8:	4a4d      	ldr	r2, [pc, #308]	; (80146f0 <LoRaMacInitialization+0x520>)
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80145c0:	4b4b      	ldr	r3, [pc, #300]	; (80146f0 <LoRaMacInitialization+0x520>)
 80145c2:	2200      	movs	r2, #0
 80145c4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 80145c8:	4b49      	ldr	r3, [pc, #292]	; (80146f0 <LoRaMacInitialization+0x520>)
 80145ca:	2201      	movs	r2, #1
 80145cc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80145d0:	4b44      	ldr	r3, [pc, #272]	; (80146e4 <LoRaMacInitialization+0x514>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80145d6:	4b43      	ldr	r3, [pc, #268]	; (80146e4 <LoRaMacInitialization+0x514>)
 80145d8:	2200      	movs	r2, #0
 80145da:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80145dc:	2300      	movs	r3, #0
 80145de:	9300      	str	r3, [sp, #0]
 80145e0:	4b44      	ldr	r3, [pc, #272]	; (80146f4 <LoRaMacInitialization+0x524>)
 80145e2:	2200      	movs	r2, #0
 80145e4:	f04f 31ff 	mov.w	r1, #4294967295
 80145e8:	4843      	ldr	r0, [pc, #268]	; (80146f8 <LoRaMacInitialization+0x528>)
 80145ea:	f009 fd21 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80145ee:	2300      	movs	r3, #0
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	4b42      	ldr	r3, [pc, #264]	; (80146fc <LoRaMacInitialization+0x52c>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	f04f 31ff 	mov.w	r1, #4294967295
 80145fa:	4841      	ldr	r0, [pc, #260]	; (8014700 <LoRaMacInitialization+0x530>)
 80145fc:	f009 fd18 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014600:	2300      	movs	r3, #0
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	4b3f      	ldr	r3, [pc, #252]	; (8014704 <LoRaMacInitialization+0x534>)
 8014606:	2200      	movs	r2, #0
 8014608:	f04f 31ff 	mov.w	r1, #4294967295
 801460c:	483e      	ldr	r0, [pc, #248]	; (8014708 <LoRaMacInitialization+0x538>)
 801460e:	f009 fd0f 	bl	801e030 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8014612:	2300      	movs	r3, #0
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	4b3d      	ldr	r3, [pc, #244]	; (801470c <LoRaMacInitialization+0x53c>)
 8014618:	2200      	movs	r2, #0
 801461a:	f04f 31ff 	mov.w	r1, #4294967295
 801461e:	483c      	ldr	r0, [pc, #240]	; (8014710 <LoRaMacInitialization+0x540>)
 8014620:	f009 fd06 	bl	801e030 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014624:	4c2f      	ldr	r4, [pc, #188]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014626:	463b      	mov	r3, r7
 8014628:	4618      	mov	r0, r3
 801462a:	f009 f871 	bl	801d710 <SysTimeGetMcuTime>
 801462e:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8014632:	463a      	mov	r2, r7
 8014634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014638:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801463c:	4b2c      	ldr	r3, [pc, #176]	; (80146f0 <LoRaMacInitialization+0x520>)
 801463e:	4a35      	ldr	r2, [pc, #212]	; (8014714 <LoRaMacInitialization+0x544>)
 8014640:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014644:	4b2a      	ldr	r3, [pc, #168]	; (80146f0 <LoRaMacInitialization+0x520>)
 8014646:	4a34      	ldr	r2, [pc, #208]	; (8014718 <LoRaMacInitialization+0x548>)
 8014648:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801464c:	4b28      	ldr	r3, [pc, #160]	; (80146f0 <LoRaMacInitialization+0x520>)
 801464e:	4a33      	ldr	r2, [pc, #204]	; (801471c <LoRaMacInitialization+0x54c>)
 8014650:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014654:	4b26      	ldr	r3, [pc, #152]	; (80146f0 <LoRaMacInitialization+0x520>)
 8014656:	4a32      	ldr	r2, [pc, #200]	; (8014720 <LoRaMacInitialization+0x550>)
 8014658:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801465c:	4b24      	ldr	r3, [pc, #144]	; (80146f0 <LoRaMacInitialization+0x520>)
 801465e:	4a31      	ldr	r2, [pc, #196]	; (8014724 <LoRaMacInitialization+0x554>)
 8014660:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014664:	4b30      	ldr	r3, [pc, #192]	; (8014728 <LoRaMacInitialization+0x558>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4830      	ldr	r0, [pc, #192]	; (801472c <LoRaMacInitialization+0x55c>)
 801466a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	689b      	ldr	r3, [r3, #8]
 8014670:	4619      	mov	r1, r3
 8014672:	482f      	ldr	r0, [pc, #188]	; (8014730 <LoRaMacInitialization+0x560>)
 8014674:	f7fa fe20 	bl	800f2b8 <SecureElementInit>
 8014678:	4603      	mov	r3, r0
 801467a:	2b00      	cmp	r3, #0
 801467c:	d001      	beq.n	8014682 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801467e:	2311      	movs	r3, #17
 8014680:	e02b      	b.n	80146da <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014682:	4818      	ldr	r0, [pc, #96]	; (80146e4 <LoRaMacInitialization+0x514>)
 8014684:	f002 fa38 	bl	8016af8 <LoRaMacCryptoInit>
 8014688:	4603      	mov	r3, r0
 801468a:	2b00      	cmp	r3, #0
 801468c:	d001      	beq.n	8014692 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801468e:	2311      	movs	r3, #17
 8014690:	e023      	b.n	80146da <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014692:	f001 fb57 	bl	8015d44 <LoRaMacCommandsInit>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d001      	beq.n	80146a0 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801469c:	2313      	movs	r3, #19
 801469e:	e01c      	b.n	80146da <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80146a0:	4824      	ldr	r0, [pc, #144]	; (8014734 <LoRaMacInitialization+0x564>)
 80146a2:	f002 faf3 	bl	8016c8c <LoRaMacCryptoSetMulticastReference>
 80146a6:	4603      	mov	r3, r0
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d001      	beq.n	80146b0 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80146ac:	2311      	movs	r3, #17
 80146ae:	e014      	b.n	80146da <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80146b0:	4b1d      	ldr	r3, [pc, #116]	; (8014728 <LoRaMacInitialization+0x558>)
 80146b2:	695b      	ldr	r3, [r3, #20]
 80146b4:	4798      	blx	r3
 80146b6:	4603      	mov	r3, r0
 80146b8:	4618      	mov	r0, r3
 80146ba:	f005 fbed 	bl	8019e98 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80146be:	4b1a      	ldr	r3, [pc, #104]	; (8014728 <LoRaMacInitialization+0x558>)
 80146c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146c2:	4a08      	ldr	r2, [pc, #32]	; (80146e4 <LoRaMacInitialization+0x514>)
 80146c4:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80146c8:	4610      	mov	r0, r2
 80146ca:	4798      	blx	r3
    Radio.Sleep( );
 80146cc:	4b16      	ldr	r3, [pc, #88]	; (8014728 <LoRaMacInitialization+0x558>)
 80146ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80146d2:	2001      	movs	r0, #1
 80146d4:	f7fd faf2 	bl	8011cbc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3734      	adds	r7, #52	; 0x34
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd90      	pop	{r4, r7, pc}
 80146e2:	bf00      	nop
 80146e4:	20001308 	.word	0x20001308
 80146e8:	200014e8 	.word	0x200014e8
 80146ec:	2000157c 	.word	0x2000157c
 80146f0:	20000dfc 	.word	0x20000dfc
 80146f4:	08012229 	.word	0x08012229
 80146f8:	20001164 	.word	0x20001164
 80146fc:	0801229d 	.word	0x0801229d
 8014700:	2000117c 	.word	0x2000117c
 8014704:	08012309 	.word	0x08012309
 8014708:	20001194 	.word	0x20001194
 801470c:	0801237d 	.word	0x0801237d
 8014710:	200011f4 	.word	0x200011f4
 8014714:	08010e39 	.word	0x08010e39
 8014718:	08010eb1 	.word	0x08010eb1
 801471c:	08010f89 	.word	0x08010f89
 8014720:	08010f3d 	.word	0x08010f3d
 8014724:	08010fc5 	.word	0x08010fc5
 8014728:	0801fa3c 	.word	0x0801fa3c
 801472c:	20001148 	.word	0x20001148
 8014730:	20001428 	.word	0x20001428
 8014734:	200013e0 	.word	0x200013e0

08014738 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014738:	b480      	push	{r7}
 801473a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801473c:	4b04      	ldr	r3, [pc, #16]	; (8014750 <LoRaMacStart+0x18>)
 801473e:	2200      	movs	r2, #0
 8014740:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8014744:	2300      	movs	r3, #0
}
 8014746:	4618      	mov	r0, r3
 8014748:	46bd      	mov	sp, r7
 801474a:	bc80      	pop	{r7}
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	20000dfc 	.word	0x20000dfc

08014754 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014758:	f7fd fa9a 	bl	8011c90 <LoRaMacIsBusy>
 801475c:	4603      	mov	r3, r0
 801475e:	f083 0301 	eor.w	r3, r3, #1
 8014762:	b2db      	uxtb	r3, r3
 8014764:	2b00      	cmp	r3, #0
 8014766:	d005      	beq.n	8014774 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8014768:	4b07      	ldr	r3, [pc, #28]	; (8014788 <LoRaMacStop+0x34>)
 801476a:	2201      	movs	r2, #1
 801476c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014770:	2300      	movs	r3, #0
 8014772:	e007      	b.n	8014784 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014774:	4b04      	ldr	r3, [pc, #16]	; (8014788 <LoRaMacStop+0x34>)
 8014776:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801477a:	2b01      	cmp	r3, #1
 801477c:	d101      	bne.n	8014782 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 801477e:	2300      	movs	r3, #0
 8014780:	e000      	b.n	8014784 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8014782:	2301      	movs	r3, #1
}
 8014784:	4618      	mov	r0, r3
 8014786:	bd80      	pop	{r7, pc}
 8014788:	20000dfc 	.word	0x20000dfc

0801478c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801478c:	b580      	push	{r7, lr}
 801478e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014790:	4812      	ldr	r0, [pc, #72]	; (80147dc <LoRaMacHalt+0x50>)
 8014792:	f009 fcf1 	bl	801e178 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014796:	4812      	ldr	r0, [pc, #72]	; (80147e0 <LoRaMacHalt+0x54>)
 8014798:	f009 fcee 	bl	801e178 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801479c:	4811      	ldr	r0, [pc, #68]	; (80147e4 <LoRaMacHalt+0x58>)
 801479e:	f009 fceb 	bl	801e178 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80147a2:	4811      	ldr	r0, [pc, #68]	; (80147e8 <LoRaMacHalt+0x5c>)
 80147a4:	f009 fce8 	bl	801e178 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80147a8:	f001 f957 	bl	8015a5a <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80147ac:	4b0f      	ldr	r3, [pc, #60]	; (80147ec <LoRaMacHalt+0x60>)
 80147ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80147b2:	4b0f      	ldr	r3, [pc, #60]	; (80147f0 <LoRaMacHalt+0x64>)
 80147b4:	2200      	movs	r2, #0
 80147b6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80147ba:	480e      	ldr	r0, [pc, #56]	; (80147f4 <LoRaMacHalt+0x68>)
 80147bc:	f7fd fc2e 	bl	801201c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80147c0:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80147c4:	490b      	ldr	r1, [pc, #44]	; (80147f4 <LoRaMacHalt+0x68>)
 80147c6:	480c      	ldr	r0, [pc, #48]	; (80147f8 <LoRaMacHalt+0x6c>)
 80147c8:	f005 fb8b 	bl	8019ee2 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80147cc:	4b08      	ldr	r3, [pc, #32]	; (80147f0 <LoRaMacHalt+0x64>)
 80147ce:	2201      	movs	r2, #1
 80147d0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80147d4:	2300      	movs	r3, #0
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	20001164 	.word	0x20001164
 80147e0:	2000117c 	.word	0x2000117c
 80147e4:	20001194 	.word	0x20001194
 80147e8:	200011f4 	.word	0x200011f4
 80147ec:	0801fa3c 	.word	0x0801fa3c
 80147f0:	20000dfc 	.word	0x20000dfc
 80147f4:	20001308 	.word	0x20001308
 80147f8:	20001a30 	.word	0x20001a30

080147fc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	; 0x28
 8014800:	af00      	add	r7, sp, #0
 8014802:	4603      	mov	r3, r0
 8014804:	6039      	str	r1, [r7, #0]
 8014806:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014808:	4b3e      	ldr	r3, [pc, #248]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 801480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801480c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801480e:	4b3d      	ldr	r3, [pc, #244]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 8014810:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8014814:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014816:	4b3b      	ldr	r3, [pc, #236]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 8014818:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 801481c:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801481e:	2300      	movs	r3, #0
 8014820:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d101      	bne.n	801482c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014828:	2303      	movs	r3, #3
 801482a:	e066      	b.n	80148fa <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801482c:	4b35      	ldr	r3, [pc, #212]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 801482e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014832:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014834:	2300      	movs	r3, #0
 8014836:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014838:	4b32      	ldr	r3, [pc, #200]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 801483a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801483e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014840:	4b30      	ldr	r3, [pc, #192]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 8014842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014844:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8014846:	4b30      	ldr	r3, [pc, #192]	; (8014908 <LoRaMacQueryTxPossible+0x10c>)
 8014848:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801484c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801484e:	4b2e      	ldr	r3, [pc, #184]	; (8014908 <LoRaMacQueryTxPossible+0x10c>)
 8014850:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8014854:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014856:	4b2b      	ldr	r3, [pc, #172]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 8014858:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801485c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014860:	4b28      	ldr	r3, [pc, #160]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 8014862:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014866:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801486a:	4b26      	ldr	r3, [pc, #152]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 801486c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014874:	4b23      	ldr	r3, [pc, #140]	; (8014904 <LoRaMacQueryTxPossible+0x108>)
 8014876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801487a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801487e:	f107 0310 	add.w	r3, r7, #16
 8014882:	f107 020e 	add.w	r2, r7, #14
 8014886:	f107 010f 	add.w	r1, r7, #15
 801488a:	f107 0014 	add.w	r0, r7, #20
 801488e:	f001 f84f 	bl	8015930 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014896:	4618      	mov	r0, r3
 8014898:	f7fd feb8 	bl	801260c <GetMaxAppPayloadWithoutFOptsLength>
 801489c:	4603      	mov	r3, r0
 801489e:	461a      	mov	r2, r3
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80148a4:	f107 0308 	add.w	r3, r7, #8
 80148a8:	4618      	mov	r0, r3
 80148aa:	f001 fb19 	bl	8015ee0 <LoRaMacCommandsGetSizeSerializedCmds>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d001      	beq.n	80148b8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80148b4:	2313      	movs	r3, #19
 80148b6:	e020      	b.n	80148fa <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	2b0f      	cmp	r3, #15
 80148bc:	d819      	bhi.n	80148f2 <LoRaMacQueryTxPossible+0xf6>
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	785b      	ldrb	r3, [r3, #1]
 80148c2:	461a      	mov	r2, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d313      	bcc.n	80148f2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	785a      	ldrb	r2, [r3, #1]
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	b2db      	uxtb	r3, r3
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	b2da      	uxtb	r2, r3
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	785b      	ldrb	r3, [r3, #1]
 80148de:	4619      	mov	r1, r3
 80148e0:	79fa      	ldrb	r2, [r7, #7]
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	4413      	add	r3, r2
 80148e6:	4299      	cmp	r1, r3
 80148e8:	d301      	bcc.n	80148ee <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80148ea:	2300      	movs	r3, #0
 80148ec:	e005      	b.n	80148fa <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80148ee:	2308      	movs	r3, #8
 80148f0:	e003      	b.n	80148fa <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	2200      	movs	r2, #0
 80148f6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80148f8:	2308      	movs	r3, #8
    }
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3728      	adds	r7, #40	; 0x28
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	20001308 	.word	0x20001308
 8014908:	20000dfc 	.word	0x20000dfc

0801490c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801490c:	b590      	push	{r4, r7, lr}
 801490e:	b087      	sub	sp, #28
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014914:	2300      	movs	r3, #0
 8014916:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801491e:	2303      	movs	r3, #3
 8014920:	e171      	b.n	8014c06 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	2b37      	cmp	r3, #55	; 0x37
 8014928:	f200 8166 	bhi.w	8014bf8 <LoRaMacMibGetRequestConfirm+0x2ec>
 801492c:	a201      	add	r2, pc, #4	; (adr r2, 8014934 <LoRaMacMibGetRequestConfirm+0x28>)
 801492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014932:	bf00      	nop
 8014934:	08014a15 	.word	0x08014a15
 8014938:	08014a21 	.word	0x08014a21
 801493c:	08014a2d 	.word	0x08014a2d
 8014940:	08014a39 	.word	0x08014a39
 8014944:	08014a45 	.word	0x08014a45
 8014948:	08014a51 	.word	0x08014a51
 801494c:	08014a5d 	.word	0x08014a5d
 8014950:	08014bf9 	.word	0x08014bf9
 8014954:	08014bf9 	.word	0x08014bf9
 8014958:	08014bf9 	.word	0x08014bf9
 801495c:	08014bf9 	.word	0x08014bf9
 8014960:	08014bf9 	.word	0x08014bf9
 8014964:	08014bf9 	.word	0x08014bf9
 8014968:	08014bf9 	.word	0x08014bf9
 801496c:	08014bf9 	.word	0x08014bf9
 8014970:	08014a69 	.word	0x08014a69
 8014974:	08014a75 	.word	0x08014a75
 8014978:	08014a81 	.word	0x08014a81
 801497c:	08014aa3 	.word	0x08014aa3
 8014980:	08014ab5 	.word	0x08014ab5
 8014984:	08014ac7 	.word	0x08014ac7
 8014988:	08014ad9 	.word	0x08014ad9
 801498c:	08014b0d 	.word	0x08014b0d
 8014990:	08014aeb 	.word	0x08014aeb
 8014994:	08014b2f 	.word	0x08014b2f
 8014998:	08014b3b 	.word	0x08014b3b
 801499c:	08014b45 	.word	0x08014b45
 80149a0:	08014b4f 	.word	0x08014b4f
 80149a4:	08014b59 	.word	0x08014b59
 80149a8:	08014b63 	.word	0x08014b63
 80149ac:	08014b6d 	.word	0x08014b6d
 80149b0:	08014b79 	.word	0x08014b79
 80149b4:	08014b91 	.word	0x08014b91
 80149b8:	08014b85 	.word	0x08014b85
 80149bc:	08014b9d 	.word	0x08014b9d
 80149c0:	08014ba7 	.word	0x08014ba7
 80149c4:	08014bb3 	.word	0x08014bb3
 80149c8:	08014bcd 	.word	0x08014bcd
 80149cc:	08014bbd 	.word	0x08014bbd
 80149d0:	08014bc5 	.word	0x08014bc5
 80149d4:	08014bf9 	.word	0x08014bf9
 80149d8:	08014bd9 	.word	0x08014bd9
 80149dc:	08014bf9 	.word	0x08014bf9
 80149e0:	08014bf9 	.word	0x08014bf9
 80149e4:	08014bf9 	.word	0x08014bf9
 80149e8:	08014bf9 	.word	0x08014bf9
 80149ec:	08014bf9 	.word	0x08014bf9
 80149f0:	08014bf9 	.word	0x08014bf9
 80149f4:	08014bf9 	.word	0x08014bf9
 80149f8:	08014bf9 	.word	0x08014bf9
 80149fc:	08014bf9 	.word	0x08014bf9
 8014a00:	08014bf9 	.word	0x08014bf9
 8014a04:	08014bf9 	.word	0x08014bf9
 8014a08:	08014bf9 	.word	0x08014bf9
 8014a0c:	08014bf9 	.word	0x08014bf9
 8014a10:	08014bed 	.word	0x08014bed
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014a14:	4b7e      	ldr	r3, [pc, #504]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a16:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	711a      	strb	r2, [r3, #4]
            break;
 8014a1e:	e0f1      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014a20:	4b7b      	ldr	r3, [pc, #492]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a22:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	711a      	strb	r2, [r3, #4]
            break;
 8014a2a:	e0eb      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8014a2c:	f7fa ff30 	bl	800f890 <SecureElementGetDevEui>
 8014a30:	4602      	mov	r2, r0
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	605a      	str	r2, [r3, #4]
            break;
 8014a36:	e0e5      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8014a38:	f7fa ff4c 	bl	800f8d4 <SecureElementGetJoinEui>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	605a      	str	r2, [r3, #4]
            break;
 8014a42:	e0df      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014a44:	4b72      	ldr	r3, [pc, #456]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a46:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	711a      	strb	r2, [r3, #4]
            break;
 8014a4e:	e0d9      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014a50:	4b6f      	ldr	r3, [pc, #444]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a52:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	605a      	str	r2, [r3, #4]
            break;
 8014a5a:	e0d3      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8014a5c:	4b6c      	ldr	r3, [pc, #432]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	605a      	str	r2, [r3, #4]
            break;
 8014a66:	e0cd      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014a68:	4b69      	ldr	r3, [pc, #420]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a6a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	711a      	strb	r2, [r3, #4]
            break;
 8014a72:	e0c7      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014a74:	4b66      	ldr	r3, [pc, #408]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a76:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	711a      	strb	r2, [r3, #4]
            break;
 8014a7e:	e0c1      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014a80:	231d      	movs	r3, #29
 8014a82:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a84:	4b62      	ldr	r3, [pc, #392]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a8a:	f107 0210 	add.w	r2, r7, #16
 8014a8e:	4611      	mov	r1, r2
 8014a90:	4618      	mov	r0, r3
 8014a92:	f002 ff13 	bl	80178bc <RegionGetPhyParam>
 8014a96:	4603      	mov	r3, r0
 8014a98:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	605a      	str	r2, [r3, #4]
            break;
 8014aa0:	e0b0      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	4a5a      	ldr	r2, [pc, #360]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014aa6:	3304      	adds	r3, #4
 8014aa8:	3264      	adds	r2, #100	; 0x64
 8014aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014aae:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ab2:	e0a7      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	4a56      	ldr	r2, [pc, #344]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014ab8:	3304      	adds	r3, #4
 8014aba:	32a8      	adds	r2, #168	; 0xa8
 8014abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ac0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ac4:	e09e      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	4a51      	ldr	r2, [pc, #324]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014aca:	3304      	adds	r3, #4
 8014acc:	326c      	adds	r2, #108	; 0x6c
 8014ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ad2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ad6:	e095      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	4a4d      	ldr	r2, [pc, #308]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014adc:	3304      	adds	r3, #4
 8014ade:	32b0      	adds	r2, #176	; 0xb0
 8014ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ae4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ae8:	e08c      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014aea:	231b      	movs	r3, #27
 8014aec:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014aee:	4b48      	ldr	r3, [pc, #288]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014af4:	f107 0210 	add.w	r2, r7, #16
 8014af8:	4611      	mov	r1, r2
 8014afa:	4618      	mov	r0, r3
 8014afc:	f002 fede 	bl	80178bc <RegionGetPhyParam>
 8014b00:	4603      	mov	r3, r0
 8014b02:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	605a      	str	r2, [r3, #4]
            break;
 8014b0a:	e07b      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014b0c:	231a      	movs	r3, #26
 8014b0e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b10:	4b3f      	ldr	r3, [pc, #252]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b16:	f107 0210 	add.w	r2, r7, #16
 8014b1a:	4611      	mov	r1, r2
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f002 fecd 	bl	80178bc <RegionGetPhyParam>
 8014b22:	4603      	mov	r3, r0
 8014b24:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	605a      	str	r2, [r3, #4]
            break;
 8014b2c:	e06a      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014b2e:	4b38      	ldr	r3, [pc, #224]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b30:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	711a      	strb	r2, [r3, #4]
            break;
 8014b38:	e064      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014b3a:	4b35      	ldr	r3, [pc, #212]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	605a      	str	r2, [r3, #4]
            break;
 8014b42:	e05f      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014b44:	4b32      	ldr	r3, [pc, #200]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	605a      	str	r2, [r3, #4]
            break;
 8014b4c:	e05a      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014b4e:	4b30      	ldr	r3, [pc, #192]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	605a      	str	r2, [r3, #4]
            break;
 8014b56:	e055      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014b58:	4b2d      	ldr	r3, [pc, #180]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	605a      	str	r2, [r3, #4]
            break;
 8014b60:	e050      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014b62:	4b2b      	ldr	r3, [pc, #172]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	605a      	str	r2, [r3, #4]
            break;
 8014b6a:	e04b      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014b6c:	4b28      	ldr	r3, [pc, #160]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b6e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	711a      	strb	r2, [r3, #4]
            break;
 8014b76:	e045      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014b78:	4b25      	ldr	r3, [pc, #148]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b7a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	711a      	strb	r2, [r3, #4]
            break;
 8014b82:	e03f      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014b84:	4b22      	ldr	r3, [pc, #136]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b86:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	711a      	strb	r2, [r3, #4]
            break;
 8014b8e:	e039      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014b90:	4b1f      	ldr	r3, [pc, #124]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b92:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	711a      	strb	r2, [r3, #4]
            break;
 8014b9a:	e033      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014b9c:	4b1c      	ldr	r3, [pc, #112]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	605a      	str	r2, [r3, #4]
            break;
 8014ba4:	e02e      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8014ba6:	4b1a      	ldr	r3, [pc, #104]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014ba8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	711a      	strb	r2, [r3, #4]
            break;
 8014bb0:	e028      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014bb2:	4b17      	ldr	r3, [pc, #92]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014bb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	605a      	str	r2, [r3, #4]
            break;
 8014bba:	e023      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	4a14      	ldr	r2, [pc, #80]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014bc0:	605a      	str	r2, [r3, #4]
            break;
 8014bc2:	e01f      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	4a13      	ldr	r2, [pc, #76]	; (8014c14 <LoRaMacMibGetRequestConfirm+0x308>)
 8014bc8:	605a      	str	r2, [r3, #4]
            break;
 8014bca:	e01b      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014bcc:	4b10      	ldr	r3, [pc, #64]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014bce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	605a      	str	r2, [r3, #4]
            break;
 8014bd6:	e015      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	4a0d      	ldr	r2, [pc, #52]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014bdc:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8014be0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014be2:	687c      	ldr	r4, [r7, #4]
 8014be4:	f002 fff2 	bl	8017bcc <RegionGetVersion>
 8014be8:	60a0      	str	r0, [r4, #8]
            break;
 8014bea:	e00b      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014bec:	4b08      	ldr	r3, [pc, #32]	; (8014c10 <LoRaMacMibGetRequestConfirm+0x304>)
 8014bee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	605a      	str	r2, [r3, #4]
            break;
 8014bf6:	e005      	b.n	8014c04 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 ff45 	bl	8015a88 <LoRaMacClassBMibGetRequestConfirm>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	75fb      	strb	r3, [r7, #23]
            break;
 8014c02:	bf00      	nop
        }
    }
    return status;
 8014c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	371c      	adds	r7, #28
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd90      	pop	{r4, r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	20001308 	.word	0x20001308
 8014c14:	20001a30 	.word	0x20001a30

08014c18 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b086      	sub	sp, #24
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014c20:	2300      	movs	r3, #0
 8014c22:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d101      	bne.n	8014c2e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c2a:	2303      	movs	r3, #3
 8014c2c:	e348      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014c2e:	4bb7      	ldr	r3, [pc, #732]	; (8014f0c <LoRaMacMibSetRequestConfirm+0x2f4>)
 8014c30:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014c34:	f003 0302 	and.w	r3, r3, #2
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d001      	beq.n	8014c40 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e33f      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	2b37      	cmp	r3, #55	; 0x37
 8014c46:	f200 8319 	bhi.w	801527c <LoRaMacMibSetRequestConfirm+0x664>
 8014c4a:	a201      	add	r2, pc, #4	; (adr r2, 8014c50 <LoRaMacMibSetRequestConfirm+0x38>)
 8014c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c50:	08014d31 	.word	0x08014d31
 8014c54:	08014d41 	.word	0x08014d41
 8014c58:	08014d5b 	.word	0x08014d5b
 8014c5c:	08014d73 	.word	0x08014d73
 8014c60:	08014d8b 	.word	0x08014d8b
 8014c64:	08014d97 	.word	0x08014d97
 8014c68:	08014da3 	.word	0x08014da3
 8014c6c:	08014daf 	.word	0x08014daf
 8014c70:	08014dd5 	.word	0x08014dd5
 8014c74:	08014dfb 	.word	0x08014dfb
 8014c78:	08014e21 	.word	0x08014e21
 8014c7c:	08014e47 	.word	0x08014e47
 8014c80:	08014e6d 	.word	0x08014e6d
 8014c84:	08014e93 	.word	0x08014e93
 8014c88:	08014eb9 	.word	0x08014eb9
 8014c8c:	08014edf 	.word	0x08014edf
 8014c90:	08014eff 	.word	0x08014eff
 8014c94:	0801527d 	.word	0x0801527d
 8014c98:	08014f19 	.word	0x08014f19
 8014c9c:	08014f89 	.word	0x08014f89
 8014ca0:	08014fc9 	.word	0x08014fc9
 8014ca4:	0801502b 	.word	0x0801502b
 8014ca8:	0801509b 	.word	0x0801509b
 8014cac:	0801506b 	.word	0x0801506b
 8014cb0:	080150cb 	.word	0x080150cb
 8014cb4:	080150ed 	.word	0x080150ed
 8014cb8:	080150f7 	.word	0x080150f7
 8014cbc:	08015101 	.word	0x08015101
 8014cc0:	0801510b 	.word	0x0801510b
 8014cc4:	08015115 	.word	0x08015115
 8014cc8:	0801511f 	.word	0x0801511f
 8014ccc:	08015151 	.word	0x08015151
 8014cd0:	080151bd 	.word	0x080151bd
 8014cd4:	0801518b 	.word	0x0801518b
 8014cd8:	080151f9 	.word	0x080151f9
 8014cdc:	0801520f 	.word	0x0801520f
 8014ce0:	08015227 	.word	0x08015227
 8014ce4:	08015231 	.word	0x08015231
 8014ce8:	0801523d 	.word	0x0801523d
 8014cec:	0801527d 	.word	0x0801527d
 8014cf0:	08015247 	.word	0x08015247
 8014cf4:	0801527d 	.word	0x0801527d
 8014cf8:	0801527d 	.word	0x0801527d
 8014cfc:	0801527d 	.word	0x0801527d
 8014d00:	0801527d 	.word	0x0801527d
 8014d04:	0801527d 	.word	0x0801527d
 8014d08:	0801527d 	.word	0x0801527d
 8014d0c:	0801527d 	.word	0x0801527d
 8014d10:	0801527d 	.word	0x0801527d
 8014d14:	0801527d 	.word	0x0801527d
 8014d18:	0801527d 	.word	0x0801527d
 8014d1c:	0801527d 	.word	0x0801527d
 8014d20:	0801527d 	.word	0x0801527d
 8014d24:	0801527d 	.word	0x0801527d
 8014d28:	0801527d 	.word	0x0801527d
 8014d2c:	08015271 	.word	0x08015271
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	791b      	ldrb	r3, [r3, #4]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7fd fb99 	bl	801246c <SwitchClass>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	75fb      	strb	r3, [r7, #23]
            break;
 8014d3e:	e2be      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	791b      	ldrb	r3, [r3, #4]
 8014d44:	2b02      	cmp	r3, #2
 8014d46:	d005      	beq.n	8014d54 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	791a      	ldrb	r2, [r3, #4]
 8014d4c:	4b70      	ldr	r3, [pc, #448]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014d4e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014d52:	e2b4      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d54:	2303      	movs	r3, #3
 8014d56:	75fb      	strb	r3, [r7, #23]
            break;
 8014d58:	e2b1      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fa fd7e 	bl	800f860 <SecureElementSetDevEui>
 8014d64:	4603      	mov	r3, r0
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f000 828e 	beq.w	8015288 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d6c:	2303      	movs	r3, #3
 8014d6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d70:	e28a      	b.n	8015288 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7fa fd94 	bl	800f8a4 <SecureElementSetJoinEui>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	f000 8284 	beq.w	801528c <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d84:	2303      	movs	r3, #3
 8014d86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d88:	e280      	b.n	801528c <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	791a      	ldrb	r2, [r3, #4]
 8014d8e:	4b60      	ldr	r3, [pc, #384]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014d90:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8014d94:	e293      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	4a5d      	ldr	r2, [pc, #372]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014d9c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8014da0:	e28d      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	4a5a      	ldr	r2, [pc, #360]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014da8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8014dac:	e287      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d00b      	beq.n	8014dce <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	2000      	movs	r0, #0
 8014dbe:	f001 ff8d 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f000 8263 	beq.w	8015290 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014dca:	2311      	movs	r3, #17
 8014dcc:	e278      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dce:	2303      	movs	r3, #3
 8014dd0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014dd2:	e25d      	b.n	8015290 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d00b      	beq.n	8014df4 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	4619      	mov	r1, r3
 8014de2:	2001      	movs	r0, #1
 8014de4:	f001 ff7a 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f000 8252 	beq.w	8015294 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014df0:	2311      	movs	r3, #17
 8014df2:	e265      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014df4:	2303      	movs	r3, #3
 8014df6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014df8:	e24c      	b.n	8015294 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d00b      	beq.n	8014e1a <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	4619      	mov	r1, r3
 8014e08:	2002      	movs	r0, #2
 8014e0a:	f001 ff67 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	f000 8241 	beq.w	8015298 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e16:	2311      	movs	r3, #17
 8014e18:	e252      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e1a:	2303      	movs	r3, #3
 8014e1c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e1e:	e23b      	b.n	8015298 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d00b      	beq.n	8014e40 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	2003      	movs	r0, #3
 8014e30:	f001 ff54 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	f000 8230 	beq.w	801529c <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e3c:	2311      	movs	r3, #17
 8014e3e:	e23f      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e40:	2303      	movs	r3, #3
 8014e42:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e44:	e22a      	b.n	801529c <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	685b      	ldr	r3, [r3, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d00b      	beq.n	8014e66 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	685b      	ldr	r3, [r3, #4]
 8014e52:	4619      	mov	r1, r3
 8014e54:	207f      	movs	r0, #127	; 0x7f
 8014e56:	f001 ff41 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	f000 821f 	beq.w	80152a0 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e62:	2311      	movs	r3, #17
 8014e64:	e22c      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e66:	2303      	movs	r3, #3
 8014e68:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e6a:	e219      	b.n	80152a0 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d00b      	beq.n	8014e8c <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	2080      	movs	r0, #128	; 0x80
 8014e7c:	f001 ff2e 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	f000 820e 	beq.w	80152a4 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e88:	2311      	movs	r3, #17
 8014e8a:	e219      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e8c:	2303      	movs	r3, #3
 8014e8e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e90:	e208      	b.n	80152a4 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00b      	beq.n	8014eb2 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	2081      	movs	r0, #129	; 0x81
 8014ea2:	f001 ff1b 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f000 81fd 	beq.w	80152a8 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014eae:	2311      	movs	r3, #17
 8014eb0:	e206      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014eb2:	2303      	movs	r3, #3
 8014eb4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014eb6:	e1f7      	b.n	80152a8 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00b      	beq.n	8014ed8 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	2082      	movs	r0, #130	; 0x82
 8014ec8:	f001 ff08 	bl	8016cdc <LoRaMacCryptoSetKey>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	f000 81ec 	beq.w	80152ac <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ed4:	2311      	movs	r3, #17
 8014ed6:	e1f3      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ed8:	2303      	movs	r3, #3
 8014eda:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014edc:	e1e6      	b.n	80152ac <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	791a      	ldrb	r2, [r3, #4]
 8014ee2:	4b0b      	ldr	r3, [pc, #44]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014ee4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014ee8:	4b0a      	ldr	r3, [pc, #40]	; (8014f14 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8014eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014eec:	4a08      	ldr	r2, [pc, #32]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014eee:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8014ef2:	4610      	mov	r0, r2
 8014ef4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8014ef6:	4b07      	ldr	r3, [pc, #28]	; (8014f14 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8014ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014efa:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8014efc:	e1df      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	791a      	ldrb	r2, [r3, #4]
 8014f02:	4b03      	ldr	r3, [pc, #12]	; (8014f10 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8014f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8014f08:	e1d9      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
 8014f0a:	bf00      	nop
 8014f0c:	20000dfc 	.word	0x20000dfc
 8014f10:	20001308 	.word	0x20001308
 8014f14:	0801fa3c 	.word	0x0801fa3c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7a1b      	ldrb	r3, [r3, #8]
 8014f1c:	b25b      	sxtb	r3, r3
 8014f1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014f20:	4bb3      	ldr	r3, [pc, #716]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014f22:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014f26:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014f28:	4bb1      	ldr	r3, [pc, #708]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f2e:	f107 0108 	add.w	r1, r7, #8
 8014f32:	2207      	movs	r2, #7
 8014f34:	4618      	mov	r0, r3
 8014f36:	f002 fcfc 	bl	8017932 <RegionVerify>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	f083 0301 	eor.w	r3, r3, #1
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d002      	beq.n	8014f4c <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f46:	2303      	movs	r3, #3
 8014f48:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8014f4a:	e1b8      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014f52:	4ba7      	ldr	r3, [pc, #668]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f58:	f107 0108 	add.w	r1, r7, #8
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f002 fce7 	bl	8017932 <RegionVerify>
 8014f64:	4603      	mov	r3, r0
 8014f66:	f083 0301 	eor.w	r3, r3, #1
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d002      	beq.n	8014f76 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f70:	2303      	movs	r3, #3
 8014f72:	75fb      	strb	r3, [r7, #23]
            break;
 8014f74:	e1a3      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014f76:	4b9e      	ldr	r3, [pc, #632]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	3364      	adds	r3, #100	; 0x64
 8014f7c:	3204      	adds	r2, #4
 8014f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f82:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014f86:	e19a      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	7a1b      	ldrb	r3, [r3, #8]
 8014f8c:	b25b      	sxtb	r3, r3
 8014f8e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014f90:	4b97      	ldr	r3, [pc, #604]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014f92:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014f96:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014f98:	4b95      	ldr	r3, [pc, #596]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f9e:	f107 0108 	add.w	r1, r7, #8
 8014fa2:	2207      	movs	r2, #7
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f002 fcc4 	bl	8017932 <RegionVerify>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d008      	beq.n	8014fc2 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014fb0:	4b8f      	ldr	r3, [pc, #572]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	33a8      	adds	r3, #168	; 0xa8
 8014fb6:	3204      	adds	r2, #4
 8014fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fbc:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fc0:	e17d      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fc2:	2303      	movs	r3, #3
 8014fc4:	75fb      	strb	r3, [r7, #23]
            break;
 8014fc6:	e17a      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	7a1b      	ldrb	r3, [r3, #8]
 8014fcc:	b25b      	sxtb	r3, r3
 8014fce:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014fd0:	4b87      	ldr	r3, [pc, #540]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014fd2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014fd6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014fd8:	4b85      	ldr	r3, [pc, #532]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014fde:	f107 0108 	add.w	r1, r7, #8
 8014fe2:	2207      	movs	r2, #7
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f002 fca4 	bl	8017932 <RegionVerify>
 8014fea:	4603      	mov	r3, r0
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d019      	beq.n	8015024 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014ff0:	4b7f      	ldr	r3, [pc, #508]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	336c      	adds	r3, #108	; 0x6c
 8014ff6:	3204      	adds	r2, #4
 8014ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ffc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8015000:	4b7b      	ldr	r3, [pc, #492]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015002:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8015006:	2b02      	cmp	r3, #2
 8015008:	f040 8152 	bne.w	80152b0 <LoRaMacMibSetRequestConfirm+0x698>
 801500c:	4b78      	ldr	r3, [pc, #480]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801500e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015012:	2b00      	cmp	r3, #0
 8015014:	f000 814c 	beq.w	80152b0 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8015018:	4b76      	ldr	r3, [pc, #472]	; (80151f4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801501c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801501e:	f7fe fc67 	bl	80138f0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015022:	e145      	b.n	80152b0 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015024:	2303      	movs	r3, #3
 8015026:	75fb      	strb	r3, [r7, #23]
            break;
 8015028:	e142      	b.n	80152b0 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	7a1b      	ldrb	r3, [r3, #8]
 801502e:	b25b      	sxtb	r3, r3
 8015030:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015032:	4b6f      	ldr	r3, [pc, #444]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015034:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8015038:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801503a:	4b6d      	ldr	r3, [pc, #436]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801503c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015040:	f107 0108 	add.w	r1, r7, #8
 8015044:	2207      	movs	r2, #7
 8015046:	4618      	mov	r0, r3
 8015048:	f002 fc73 	bl	8017932 <RegionVerify>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d008      	beq.n	8015064 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8015052:	4b67      	ldr	r3, [pc, #412]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	33b0      	adds	r3, #176	; 0xb0
 8015058:	3204      	adds	r2, #4
 801505a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801505e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015062:	e12c      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015064:	2303      	movs	r3, #3
 8015066:	75fb      	strb	r3, [r7, #23]
            break;
 8015068:	e129      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8015070:	2301      	movs	r3, #1
 8015072:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015074:	4b5e      	ldr	r3, [pc, #376]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801507a:	f107 020c 	add.w	r2, r7, #12
 801507e:	4611      	mov	r1, r2
 8015080:	4618      	mov	r0, r3
 8015082:	f002 fc7f 	bl	8017984 <RegionChanMaskSet>
 8015086:	4603      	mov	r3, r0
 8015088:	f083 0301 	eor.w	r3, r3, #1
 801508c:	b2db      	uxtb	r3, r3
 801508e:	2b00      	cmp	r3, #0
 8015090:	f000 8110 	beq.w	80152b4 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015094:	2303      	movs	r3, #3
 8015096:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015098:	e10c      	b.n	80152b4 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80150a0:	2300      	movs	r3, #0
 80150a2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80150a4:	4b52      	ldr	r3, [pc, #328]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80150a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150aa:	f107 020c 	add.w	r2, r7, #12
 80150ae:	4611      	mov	r1, r2
 80150b0:	4618      	mov	r0, r3
 80150b2:	f002 fc67 	bl	8017984 <RegionChanMaskSet>
 80150b6:	4603      	mov	r3, r0
 80150b8:	f083 0301 	eor.w	r3, r3, #1
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	2b00      	cmp	r3, #0
 80150c0:	f000 80fa 	beq.w	80152b8 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150c4:	2303      	movs	r3, #3
 80150c6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80150c8:	e0f6      	b.n	80152b8 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	791b      	ldrb	r3, [r3, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d009      	beq.n	80150e6 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80150d6:	2b0f      	cmp	r3, #15
 80150d8:	d805      	bhi.n	80150e6 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	791a      	ldrb	r2, [r3, #4]
 80150de:	4b44      	ldr	r3, [pc, #272]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80150e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80150e4:	e0eb      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150e6:	2303      	movs	r3, #3
 80150e8:	75fb      	strb	r3, [r7, #23]
            break;
 80150ea:	e0e8      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	4a3f      	ldr	r2, [pc, #252]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80150f2:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80150f4:	e0e3      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	4a3d      	ldr	r2, [pc, #244]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80150fc:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80150fe:	e0de      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	4a3a      	ldr	r2, [pc, #232]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015106:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8015108:	e0d9      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	4a38      	ldr	r2, [pc, #224]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015110:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8015112:	e0d4      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	4a35      	ldr	r2, [pc, #212]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801511a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801511c:	e0cf      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015124:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8015126:	4b32      	ldr	r3, [pc, #200]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801512c:	f107 0108 	add.w	r1, r7, #8
 8015130:	2206      	movs	r2, #6
 8015132:	4618      	mov	r0, r3
 8015134:	f002 fbfd 	bl	8017932 <RegionVerify>
 8015138:	4603      	mov	r3, r0
 801513a:	2b00      	cmp	r3, #0
 801513c:	d005      	beq.n	801514a <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801513e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015142:	4b2b      	ldr	r3, [pc, #172]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015144:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015148:	e0b9      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801514a:	2303      	movs	r3, #3
 801514c:	75fb      	strb	r3, [r7, #23]
            break;
 801514e:	e0b6      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015156:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015158:	4b25      	ldr	r3, [pc, #148]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801515a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801515e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015160:	4b23      	ldr	r3, [pc, #140]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015166:	f107 0108 	add.w	r1, r7, #8
 801516a:	2205      	movs	r2, #5
 801516c:	4618      	mov	r0, r3
 801516e:	f002 fbe0 	bl	8017932 <RegionVerify>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d005      	beq.n	8015184 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015178:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801517c:	4b1c      	ldr	r3, [pc, #112]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801517e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015182:	e09c      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015184:	2303      	movs	r3, #3
 8015186:	75fb      	strb	r3, [r7, #23]
            break;
 8015188:	e099      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015190:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8015192:	4b17      	ldr	r3, [pc, #92]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8015194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015198:	f107 0108 	add.w	r1, r7, #8
 801519c:	220a      	movs	r2, #10
 801519e:	4618      	mov	r0, r3
 80151a0:	f002 fbc7 	bl	8017932 <RegionVerify>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d005      	beq.n	80151b6 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80151aa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80151ae:	4b10      	ldr	r3, [pc, #64]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80151b0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80151b4:	e083      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151b6:	2303      	movs	r3, #3
 80151b8:	75fb      	strb	r3, [r7, #23]
            break;
 80151ba:	e080      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80151c2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80151c4:	4b0a      	ldr	r3, [pc, #40]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80151c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80151ca:	f107 0108 	add.w	r1, r7, #8
 80151ce:	2209      	movs	r2, #9
 80151d0:	4618      	mov	r0, r3
 80151d2:	f002 fbae 	bl	8017932 <RegionVerify>
 80151d6:	4603      	mov	r3, r0
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d005      	beq.n	80151e8 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80151dc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80151e0:	4b03      	ldr	r3, [pc, #12]	; (80151f0 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80151e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80151e6:	e06a      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151e8:	2303      	movs	r3, #3
 80151ea:	75fb      	strb	r3, [r7, #23]
            break;
 80151ec:	e067      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
 80151ee:	bf00      	nop
 80151f0:	20001308 	.word	0x20001308
 80151f4:	0801fa3c 	.word	0x0801fa3c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	4a32      	ldr	r2, [pc, #200]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80151fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8015202:	4b31      	ldr	r3, [pc, #196]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015208:	4a2f      	ldr	r2, [pc, #188]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 801520a:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 801520c:	e057      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	791a      	ldrb	r2, [r3, #4]
 8015212:	4b2d      	ldr	r3, [pc, #180]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015214:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8015218:	4b2b      	ldr	r3, [pc, #172]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 801521a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801521e:	4b2a      	ldr	r3, [pc, #168]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8015224:	e04b      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	685b      	ldr	r3, [r3, #4]
 801522a:	4a27      	ldr	r2, [pc, #156]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 801522c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801522e:	e046      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	4a24      	ldr	r2, [pc, #144]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015236:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 801523a:	e040      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801523c:	f7fe fdb2 	bl	8013da4 <RestoreNvmData>
 8015240:	4603      	mov	r3, r0
 8015242:	75fb      	strb	r3, [r7, #23]
            break;
 8015244:	e03b      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	799b      	ldrb	r3, [r3, #6]
 801524a:	2b01      	cmp	r3, #1
 801524c:	d80d      	bhi.n	801526a <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801524e:	4a1e      	ldr	r2, [pc, #120]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6858      	ldr	r0, [r3, #4]
 801525c:	f001 fc78 	bl	8016b50 <LoRaMacCryptoSetLrWanVersion>
 8015260:	4603      	mov	r3, r0
 8015262:	2b00      	cmp	r3, #0
 8015264:	d02a      	beq.n	80152bc <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015266:	2311      	movs	r3, #17
 8015268:	e02a      	b.n	80152c0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801526a:	2303      	movs	r3, #3
 801526c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801526e:	e025      	b.n	80152bc <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	685b      	ldr	r3, [r3, #4]
 8015274:	4a14      	ldr	r2, [pc, #80]	; (80152c8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8015276:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801527a:	e020      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f000 fc0d 	bl	8015a9c <LoRaMacMibClassBSetRequestConfirm>
 8015282:	4603      	mov	r3, r0
 8015284:	75fb      	strb	r3, [r7, #23]
            break;
 8015286:	e01a      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015288:	bf00      	nop
 801528a:	e018      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801528c:	bf00      	nop
 801528e:	e016      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015290:	bf00      	nop
 8015292:	e014      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015294:	bf00      	nop
 8015296:	e012      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8015298:	bf00      	nop
 801529a:	e010      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801529c:	bf00      	nop
 801529e:	e00e      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152a0:	bf00      	nop
 80152a2:	e00c      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152a4:	bf00      	nop
 80152a6:	e00a      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152a8:	bf00      	nop
 80152aa:	e008      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152ac:	bf00      	nop
 80152ae:	e006      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152b0:	bf00      	nop
 80152b2:	e004      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152b4:	bf00      	nop
 80152b6:	e002      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152b8:	bf00      	nop
 80152ba:	e000      	b.n	80152be <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80152bc:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 80152be:	7dfb      	ldrb	r3, [r7, #23]
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3718      	adds	r7, #24
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	20001308 	.word	0x20001308

080152cc <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b086      	sub	sp, #24
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80152d4:	2302      	movs	r3, #2
 80152d6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80152d8:	2300      	movs	r3, #0
 80152da:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80152e2:	2303      	movs	r3, #3
 80152e4:	e127      	b.n	8015536 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80152e6:	f7fc fcd3 	bl	8011c90 <LoRaMacIsBusy>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d001      	beq.n	80152f4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80152f0:	2301      	movs	r3, #1
 80152f2:	e120      	b.n	8015536 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80152f4:	f001 f8d0 	bl	8016498 <LoRaMacConfirmQueueIsFull>
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d001      	beq.n	8015302 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80152fe:	2301      	movs	r3, #1
 8015300:	e119      	b.n	8015536 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015302:	f001 f8bd 	bl	8016480 <LoRaMacConfirmQueueGetCnt>
 8015306:	4603      	mov	r3, r0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d104      	bne.n	8015316 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801530c:	2214      	movs	r2, #20
 801530e:	2100      	movs	r1, #0
 8015310:	488b      	ldr	r0, [pc, #556]	; (8015540 <LoRaMacMlmeRequest+0x274>)
 8015312:	f004 fe21 	bl	8019f58 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015316:	4b8b      	ldr	r3, [pc, #556]	; (8015544 <LoRaMacMlmeRequest+0x278>)
 8015318:	2201      	movs	r2, #1
 801531a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801531e:	4a89      	ldr	r2, [pc, #548]	; (8015544 <LoRaMacMlmeRequest+0x278>)
 8015320:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015324:	f043 0304 	orr.w	r3, r3, #4
 8015328:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015332:	2301      	movs	r3, #1
 8015334:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8015336:	2300      	movs	r3, #0
 8015338:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	3b01      	subs	r3, #1
 8015340:	2b0d      	cmp	r3, #13
 8015342:	f200 80ce 	bhi.w	80154e2 <LoRaMacMlmeRequest+0x216>
 8015346:	a201      	add	r2, pc, #4	; (adr r2, 801534c <LoRaMacMlmeRequest+0x80>)
 8015348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801534c:	08015385 	.word	0x08015385
 8015350:	080154e3 	.word	0x080154e3
 8015354:	080154e3 	.word	0x080154e3
 8015358:	080153ef 	.word	0x080153ef
 801535c:	0801540d 	.word	0x0801540d
 8015360:	0801541d 	.word	0x0801541d
 8015364:	080154e3 	.word	0x080154e3
 8015368:	080154e3 	.word	0x080154e3
 801536c:	080154e3 	.word	0x080154e3
 8015370:	08015439 	.word	0x08015439
 8015374:	080154e3 	.word	0x080154e3
 8015378:	080154b7 	.word	0x080154b7
 801537c:	08015457 	.word	0x08015457
 8015380:	08015499 	.word	0x08015499
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015384:	4b6f      	ldr	r3, [pc, #444]	; (8015544 <LoRaMacMlmeRequest+0x278>)
 8015386:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801538a:	f003 0320 	and.w	r3, r3, #32
 801538e:	2b00      	cmp	r3, #0
 8015390:	d001      	beq.n	8015396 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015392:	2301      	movs	r3, #1
 8015394:	e0cf      	b.n	8015536 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8015396:	f7fe f989 	bl	80136ac <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801539a:	4b6b      	ldr	r3, [pc, #428]	; (8015548 <LoRaMacMlmeRequest+0x27c>)
 801539c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	795b      	ldrb	r3, [r3, #5]
 80153a4:	b25b      	sxtb	r3, r3
 80153a6:	2200      	movs	r2, #0
 80153a8:	4619      	mov	r1, r3
 80153aa:	f002 fbaa 	bl	8017b02 <RegionAlternateDr>
 80153ae:	4603      	mov	r3, r0
 80153b0:	461a      	mov	r2, r3
 80153b2:	4b65      	ldr	r3, [pc, #404]	; (8015548 <LoRaMacMlmeRequest+0x27c>)
 80153b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80153b8:	2307      	movs	r3, #7
 80153ba:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80153bc:	20ff      	movs	r0, #255	; 0xff
 80153be:	f7fd feed 	bl	801319c <SendReJoinReq>
 80153c2:	4603      	mov	r3, r0
 80153c4:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80153c6:	7dfb      	ldrb	r3, [r7, #23]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f000 808c 	beq.w	80154e6 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80153ce:	4b5e      	ldr	r3, [pc, #376]	; (8015548 <LoRaMacMlmeRequest+0x27c>)
 80153d0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	795b      	ldrb	r3, [r3, #5]
 80153d8:	b25b      	sxtb	r3, r3
 80153da:	2201      	movs	r2, #1
 80153dc:	4619      	mov	r1, r3
 80153de:	f002 fb90 	bl	8017b02 <RegionAlternateDr>
 80153e2:	4603      	mov	r3, r0
 80153e4:	461a      	mov	r2, r3
 80153e6:	4b58      	ldr	r3, [pc, #352]	; (8015548 <LoRaMacMlmeRequest+0x27c>)
 80153e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80153ec:	e07b      	b.n	80154e6 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80153ee:	2300      	movs	r3, #0
 80153f0:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80153f2:	f107 030c 	add.w	r3, r7, #12
 80153f6:	2200      	movs	r2, #0
 80153f8:	4619      	mov	r1, r3
 80153fa:	2002      	movs	r0, #2
 80153fc:	f000 fcb2 	bl	8015d64 <LoRaMacCommandsAddCmd>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d071      	beq.n	80154ea <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015406:	2313      	movs	r3, #19
 8015408:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801540a:	e06e      	b.n	80154ea <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	889b      	ldrh	r3, [r3, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	f7fe fc73 	bl	8013cfc <SetTxContinuousWave>
 8015416:	4603      	mov	r3, r0
 8015418:	75fb      	strb	r3, [r7, #23]
            break;
 801541a:	e06d      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	8898      	ldrh	r0, [r3, #4]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6899      	ldr	r1, [r3, #8]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801542a:	b2db      	uxtb	r3, r3
 801542c:	461a      	mov	r2, r3
 801542e:	f7fe fc99 	bl	8013d64 <SetTxContinuousWave1>
 8015432:	4603      	mov	r3, r0
 8015434:	75fb      	strb	r3, [r7, #23]
            break;
 8015436:	e05f      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015438:	2300      	movs	r3, #0
 801543a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801543c:	f107 030c 	add.w	r3, r7, #12
 8015440:	2200      	movs	r2, #0
 8015442:	4619      	mov	r1, r3
 8015444:	200d      	movs	r0, #13
 8015446:	f000 fc8d 	bl	8015d64 <LoRaMacCommandsAddCmd>
 801544a:	4603      	mov	r3, r0
 801544c:	2b00      	cmp	r3, #0
 801544e:	d04e      	beq.n	80154ee <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015450:	2313      	movs	r3, #19
 8015452:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015454:	e04b      	b.n	80154ee <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015456:	4b3c      	ldr	r3, [pc, #240]	; (8015548 <LoRaMacMlmeRequest+0x27c>)
 8015458:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801545c:	2b00      	cmp	r3, #0
 801545e:	d148      	bne.n	80154f2 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	791b      	ldrb	r3, [r3, #4]
 8015464:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	791b      	ldrb	r3, [r3, #4]
 801546a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801546e:	b2db      	uxtb	r3, r3
 8015470:	4618      	mov	r0, r3
 8015472:	f000 fae8 	bl	8015a46 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015476:	7dbb      	ldrb	r3, [r7, #22]
 8015478:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801547a:	2300      	movs	r3, #0
 801547c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801547e:	f107 030c 	add.w	r3, r7, #12
 8015482:	2201      	movs	r2, #1
 8015484:	4619      	mov	r1, r3
 8015486:	2010      	movs	r0, #16
 8015488:	f000 fc6c 	bl	8015d64 <LoRaMacCommandsAddCmd>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d02f      	beq.n	80154f2 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015492:	2313      	movs	r3, #19
 8015494:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015496:	e02c      	b.n	80154f2 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015498:	2300      	movs	r3, #0
 801549a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801549c:	f107 030c 	add.w	r3, r7, #12
 80154a0:	2200      	movs	r2, #0
 80154a2:	4619      	mov	r1, r3
 80154a4:	2012      	movs	r0, #18
 80154a6:	f000 fc5d 	bl	8015d64 <LoRaMacCommandsAddCmd>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d022      	beq.n	80154f6 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80154b0:	2313      	movs	r3, #19
 80154b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80154b4:	e01f      	b.n	80154f6 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80154b6:	2301      	movs	r3, #1
 80154b8:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80154ba:	f000 fa7a 	bl	80159b2 <LoRaMacClassBIsAcquisitionInProgress>
 80154be:	4603      	mov	r3, r0
 80154c0:	f083 0301 	eor.w	r3, r3, #1
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d008      	beq.n	80154dc <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80154ca:	2000      	movs	r0, #0
 80154cc:	f000 fa53 	bl	8015976 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80154d0:	2000      	movs	r0, #0
 80154d2:	f000 fa75 	bl	80159c0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80154d6:	2300      	movs	r3, #0
 80154d8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80154da:	e00d      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80154dc:	2301      	movs	r3, #1
 80154de:	75fb      	strb	r3, [r7, #23]
            break;
 80154e0:	e00a      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 80154e2:	bf00      	nop
 80154e4:	e008      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
            break;
 80154e6:	bf00      	nop
 80154e8:	e006      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
            break;
 80154ea:	bf00      	nop
 80154ec:	e004      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
            break;
 80154ee:	bf00      	nop
 80154f0:	e002      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
            break;
 80154f2:	bf00      	nop
 80154f4:	e000      	b.n	80154f8 <LoRaMacMlmeRequest+0x22c>
            break;
 80154f6:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80154f8:	4b12      	ldr	r3, [pc, #72]	; (8015544 <LoRaMacMlmeRequest+0x278>)
 80154fa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015502:	7dfb      	ldrb	r3, [r7, #23]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d010      	beq.n	801552a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015508:	f000 ffba 	bl	8016480 <LoRaMacConfirmQueueGetCnt>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d110      	bne.n	8015534 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8015512:	4b0c      	ldr	r3, [pc, #48]	; (8015544 <LoRaMacMlmeRequest+0x278>)
 8015514:	2200      	movs	r2, #0
 8015516:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801551a:	4a0a      	ldr	r2, [pc, #40]	; (8015544 <LoRaMacMlmeRequest+0x278>)
 801551c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015520:	f36f 0382 	bfc	r3, #2, #1
 8015524:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8015528:	e004      	b.n	8015534 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801552a:	f107 0310 	add.w	r3, r7, #16
 801552e:	4618      	mov	r0, r3
 8015530:	f000 fe58 	bl	80161e4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8015534:	7dfb      	ldrb	r3, [r7, #23]
}
 8015536:	4618      	mov	r0, r3
 8015538:	3718      	adds	r7, #24
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	20001248 	.word	0x20001248
 8015544:	20000dfc 	.word	0x20000dfc
 8015548:	20001308 	.word	0x20001308

0801554c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b08c      	sub	sp, #48	; 0x30
 8015550:	af02      	add	r7, sp, #8
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	460b      	mov	r3, r1
 8015556:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015558:	2302      	movs	r3, #2
 801555a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8015564:	2300      	movs	r3, #0
 8015566:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015568:	2300      	movs	r3, #0
 801556a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 801556c:	2300      	movs	r3, #0
 801556e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d101      	bne.n	801557a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015576:	2303      	movs	r3, #3
 8015578:	e0d4      	b.n	8015724 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801557a:	f7fc fb89 	bl	8011c90 <LoRaMacIsBusy>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	d001      	beq.n	8015588 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8015584:	2301      	movs	r3, #1
 8015586:	e0cd      	b.n	8015724 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801558c:	2214      	movs	r2, #20
 801558e:	2100      	movs	r1, #0
 8015590:	4866      	ldr	r0, [pc, #408]	; (801572c <LoRaMacMcpsRequest+0x1e0>)
 8015592:	f004 fce1 	bl	8019f58 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015596:	4b66      	ldr	r3, [pc, #408]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 8015598:	2201      	movs	r2, #1
 801559a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801559e:	4b64      	ldr	r3, [pc, #400]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 80155a0:	2201      	movs	r2, #1
 80155a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	2b03      	cmp	r3, #3
 80155ac:	d03d      	beq.n	801562a <LoRaMacMcpsRequest+0xde>
 80155ae:	2b03      	cmp	r3, #3
 80155b0:	dc4f      	bgt.n	8015652 <LoRaMacMcpsRequest+0x106>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d002      	beq.n	80155bc <LoRaMacMcpsRequest+0x70>
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	d019      	beq.n	80155ee <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80155ba:	e04a      	b.n	8015652 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80155bc:	2301      	movs	r3, #1
 80155be:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80155c0:	4b5b      	ldr	r3, [pc, #364]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 80155c2:	2201      	movs	r2, #1
 80155c4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80155c8:	7b3b      	ldrb	r3, [r7, #12]
 80155ca:	2202      	movs	r2, #2
 80155cc:	f362 1347 	bfi	r3, r2, #5, #3
 80155d0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	791b      	ldrb	r3, [r3, #4]
 80155d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	689b      	ldr	r3, [r3, #8]
 80155de:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	899b      	ldrh	r3, [r3, #12]
 80155e4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	7b9b      	ldrb	r3, [r3, #14]
 80155ea:	777b      	strb	r3, [r7, #29]
            break;
 80155ec:	e032      	b.n	8015654 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80155ee:	2301      	movs	r3, #1
 80155f0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	7bdb      	ldrb	r3, [r3, #15]
 80155f6:	2b08      	cmp	r3, #8
 80155f8:	bf28      	it	cs
 80155fa:	2308      	movcs	r3, #8
 80155fc:	b2da      	uxtb	r2, r3
 80155fe:	4b4c      	ldr	r3, [pc, #304]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 8015600:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015604:	7b3b      	ldrb	r3, [r7, #12]
 8015606:	2204      	movs	r2, #4
 8015608:	f362 1347 	bfi	r3, r2, #5, #3
 801560c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	791b      	ldrb	r3, [r3, #4]
 8015612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	689b      	ldr	r3, [r3, #8]
 801561a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	899b      	ldrh	r3, [r3, #12]
 8015620:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	7b9b      	ldrb	r3, [r3, #14]
 8015626:	777b      	strb	r3, [r7, #29]
            break;
 8015628:	e014      	b.n	8015654 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801562a:	2301      	movs	r3, #1
 801562c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801562e:	4b40      	ldr	r3, [pc, #256]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 8015630:	2201      	movs	r2, #1
 8015632:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015636:	7b3b      	ldrb	r3, [r7, #12]
 8015638:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801563c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	891b      	ldrh	r3, [r3, #8]
 8015648:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	7a9b      	ldrb	r3, [r3, #10]
 801564e:	777b      	strb	r3, [r7, #29]
            break;
 8015650:	e000      	b.n	8015654 <LoRaMacMcpsRequest+0x108>
            break;
 8015652:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015654:	2302      	movs	r3, #2
 8015656:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015658:	4b36      	ldr	r3, [pc, #216]	; (8015734 <LoRaMacMcpsRequest+0x1e8>)
 801565a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801565e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015660:	4b34      	ldr	r3, [pc, #208]	; (8015734 <LoRaMacMcpsRequest+0x1e8>)
 8015662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015666:	f107 0214 	add.w	r2, r7, #20
 801566a:	4611      	mov	r1, r2
 801566c:	4618      	mov	r0, r3
 801566e:	f002 f925 	bl	80178bc <RegionGetPhyParam>
 8015672:	4603      	mov	r3, r0
 8015674:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	b25b      	sxtb	r3, r3
 801567a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801567e:	4293      	cmp	r3, r2
 8015680:	bfb8      	it	lt
 8015682:	4613      	movlt	r3, r2
 8015684:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8015686:	7f3b      	ldrb	r3, [r7, #28]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d044      	beq.n	8015716 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 801568c:	4b29      	ldr	r3, [pc, #164]	; (8015734 <LoRaMacMcpsRequest+0x1e8>)
 801568e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8015692:	f083 0301 	eor.w	r3, r3, #1
 8015696:	b2db      	uxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d019      	beq.n	80156d0 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 801569c:	7f7b      	ldrb	r3, [r7, #29]
 801569e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80156a0:	4b24      	ldr	r3, [pc, #144]	; (8015734 <LoRaMacMcpsRequest+0x1e8>)
 80156a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80156a6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80156a8:	4b22      	ldr	r3, [pc, #136]	; (8015734 <LoRaMacMcpsRequest+0x1e8>)
 80156aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80156ae:	f107 0108 	add.w	r1, r7, #8
 80156b2:	2205      	movs	r2, #5
 80156b4:	4618      	mov	r0, r3
 80156b6:	f002 f93c 	bl	8017932 <RegionVerify>
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d005      	beq.n	80156cc <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80156c0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80156c4:	4b1b      	ldr	r3, [pc, #108]	; (8015734 <LoRaMacMcpsRequest+0x1e8>)
 80156c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80156ca:	e001      	b.n	80156d0 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80156cc:	2303      	movs	r3, #3
 80156ce:	e029      	b.n	8015724 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80156d0:	8bfa      	ldrh	r2, [r7, #30]
 80156d2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80156d6:	f107 000c 	add.w	r0, r7, #12
 80156da:	78fb      	ldrb	r3, [r7, #3]
 80156dc:	9300      	str	r3, [sp, #0]
 80156de:	4613      	mov	r3, r2
 80156e0:	6a3a      	ldr	r2, [r7, #32]
 80156e2:	f7fd fc7b 	bl	8012fdc <Send>
 80156e6:	4603      	mov	r3, r0
 80156e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80156ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d10c      	bne.n	801570e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	781a      	ldrb	r2, [r3, #0]
 80156f8:	4b0d      	ldr	r3, [pc, #52]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 80156fa:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80156fe:	4a0c      	ldr	r2, [pc, #48]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 8015700:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8015704:	f043 0301 	orr.w	r3, r3, #1
 8015708:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 801570c:	e003      	b.n	8015716 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801570e:	4b08      	ldr	r3, [pc, #32]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 8015710:	2200      	movs	r2, #0
 8015712:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015716:	4b06      	ldr	r3, [pc, #24]	; (8015730 <LoRaMacMcpsRequest+0x1e4>)
 8015718:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	611a      	str	r2, [r3, #16]

    return status;
 8015720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015724:	4618      	mov	r0, r3
 8015726:	3728      	adds	r7, #40	; 0x28
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}
 801572c:	20001234 	.word	0x20001234
 8015730:	20000dfc 	.word	0x20000dfc
 8015734:	20001308 	.word	0x20001308

08015738 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	4603      	mov	r3, r0
 8015740:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015742:	79fb      	ldrb	r3, [r7, #7]
 8015744:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015746:	4b0a      	ldr	r3, [pc, #40]	; (8015770 <LoRaMacTestSetDutyCycleOn+0x38>)
 8015748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801574c:	f107 010c 	add.w	r1, r7, #12
 8015750:	220f      	movs	r2, #15
 8015752:	4618      	mov	r0, r3
 8015754:	f002 f8ed 	bl	8017932 <RegionVerify>
 8015758:	4603      	mov	r3, r0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d003      	beq.n	8015766 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801575e:	4a04      	ldr	r2, [pc, #16]	; (8015770 <LoRaMacTestSetDutyCycleOn+0x38>)
 8015760:	79fb      	ldrb	r3, [r7, #7]
 8015762:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8015766:	bf00      	nop
 8015768:	3710      	adds	r7, #16
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	20001308 	.word	0x20001308

08015774 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015774:	b580      	push	{r7, lr}
 8015776:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015778:	f7fe ffec 	bl	8014754 <LoRaMacStop>
 801577c:	4603      	mov	r3, r0
 801577e:	2b00      	cmp	r3, #0
 8015780:	d114      	bne.n	80157ac <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015782:	480c      	ldr	r0, [pc, #48]	; (80157b4 <LoRaMacDeInitialization+0x40>)
 8015784:	f008 fcf8 	bl	801e178 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015788:	480b      	ldr	r0, [pc, #44]	; (80157b8 <LoRaMacDeInitialization+0x44>)
 801578a:	f008 fcf5 	bl	801e178 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801578e:	480b      	ldr	r0, [pc, #44]	; (80157bc <LoRaMacDeInitialization+0x48>)
 8015790:	f008 fcf2 	bl	801e178 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8015794:	480a      	ldr	r0, [pc, #40]	; (80157c0 <LoRaMacDeInitialization+0x4c>)
 8015796:	f008 fcef 	bl	801e178 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801579a:	f000 f95e 	bl	8015a5a <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 801579e:	f7fd ff85 	bl	80136ac <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80157a2:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <LoRaMacDeInitialization+0x50>)
 80157a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157a6:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80157a8:	2300      	movs	r3, #0
 80157aa:	e000      	b.n	80157ae <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80157ac:	2301      	movs	r3, #1
    }
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	bd80      	pop	{r7, pc}
 80157b2:	bf00      	nop
 80157b4:	20001164 	.word	0x20001164
 80157b8:	2000117c 	.word	0x2000117c
 80157bc:	20001194 	.word	0x20001194
 80157c0:	200011f4 	.word	0x200011f4
 80157c4:	0801fa3c 	.word	0x0801fa3c

080157c8 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b08c      	sub	sp, #48	; 0x30
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
 80157d4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80157d6:	2300      	movs	r3, #0
 80157d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	7c1b      	ldrb	r3, [r3, #16]
 80157e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	7c5b      	ldrb	r3, [r3, #17]
 80157e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	689a      	ldr	r2, [r3, #8]
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	795b      	ldrb	r3, [r3, #5]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	f000 808b 	beq.w	8015914 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80157fe:	2302      	movs	r3, #2
 8015800:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	7c9b      	ldrb	r3, [r3, #18]
 8015808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	7cdb      	ldrb	r3, [r3, #19]
 8015810:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015814:	4611      	mov	r1, r2
 8015816:	4618      	mov	r0, r3
 8015818:	f002 f850 	bl	80178bc <RegionGetPhyParam>
 801581c:	4603      	mov	r3, r0
 801581e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015820:	6a3b      	ldr	r3, [r7, #32]
 8015822:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8015826:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801582a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801582e:	4293      	cmp	r3, r2
 8015830:	bfb8      	it	lt
 8015832:	4613      	movlt	r3, r2
 8015834:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015838:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801583c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015840:	429a      	cmp	r2, r3
 8015842:	d106      	bne.n	8015852 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	2200      	movs	r2, #0
 8015848:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801584a:	2300      	movs	r3, #0
 801584c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015850:	e060      	b.n	8015914 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	68fa      	ldr	r2, [r7, #12]
 8015858:	8992      	ldrh	r2, [r2, #12]
 801585a:	4293      	cmp	r3, r2
 801585c:	d303      	bcc.n	8015866 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801585e:	2301      	movs	r3, #1
 8015860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015864:	e002      	b.n	801586c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8015866:	2300      	movs	r3, #0
 8015868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	689b      	ldr	r3, [r3, #8]
 8015870:	68fa      	ldr	r2, [r7, #12]
 8015872:	8992      	ldrh	r2, [r2, #12]
 8015874:	4611      	mov	r1, r2
 8015876:	68fa      	ldr	r2, [r7, #12]
 8015878:	89d2      	ldrh	r2, [r2, #14]
 801587a:	440a      	add	r2, r1
 801587c:	4293      	cmp	r3, r2
 801587e:	d349      	bcc.n	8015914 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015880:	2308      	movs	r3, #8
 8015882:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	7cdb      	ldrb	r3, [r3, #19]
 801588a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801588e:	4611      	mov	r1, r2
 8015890:	4618      	mov	r0, r3
 8015892:	f002 f813 	bl	80178bc <RegionGetPhyParam>
 8015896:	4603      	mov	r3, r0
 8015898:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801589a:	6a3b      	ldr	r3, [r7, #32]
 801589c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	689b      	ldr	r3, [r3, #8]
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	89d2      	ldrh	r2, [r2, #14]
 80158a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80158ac:	fb01 f202 	mul.w	r2, r1, r2
 80158b0:	1a9b      	subs	r3, r3, r2
 80158b2:	2b01      	cmp	r3, #1
 80158b4:	d12e      	bne.n	8015914 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80158b6:	2322      	movs	r3, #34	; 0x22
 80158b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80158bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80158c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	7c9b      	ldrb	r3, [r3, #18]
 80158c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	7cdb      	ldrb	r3, [r3, #19]
 80158d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80158d4:	4611      	mov	r1, r2
 80158d6:	4618      	mov	r0, r3
 80158d8:	f001 fff0 	bl	80178bc <RegionGetPhyParam>
 80158dc:	4603      	mov	r3, r0
 80158de:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80158e0:	6a3b      	ldr	r3, [r7, #32]
 80158e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80158e6:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80158ea:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d110      	bne.n	8015914 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80158f2:	2300      	movs	r3, #0
 80158f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	791b      	ldrb	r3, [r3, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d009      	beq.n	8015914 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015900:	2302      	movs	r3, #2
 8015902:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	7cdb      	ldrb	r3, [r3, #19]
 8015908:	f107 0214 	add.w	r2, r7, #20
 801590c:	4611      	mov	r1, r2
 801590e:	4618      	mov	r0, r3
 8015910:	f001 fffd 	bl	801790e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801591a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015922:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015928:	4618      	mov	r0, r3
 801592a:	3730      	adds	r7, #48	; 0x30
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af00      	add	r7, sp, #0
 8015936:	60f8      	str	r0, [r7, #12]
 8015938:	60b9      	str	r1, [r7, #8]
 801593a:	607a      	str	r2, [r7, #4]
 801593c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	789b      	ldrb	r3, [r3, #2]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d107      	bne.n	8015956 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	68b9      	ldr	r1, [r7, #8]
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f7ff ff3b 	bl	80157c8 <CalcNextV10X>
 8015952:	4603      	mov	r3, r0
 8015954:	e000      	b.n	8015958 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8015956:	2300      	movs	r3, #0
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015960:	b480      	push	{r7}
 8015962:	b085      	sub	sp, #20
 8015964:	af00      	add	r7, sp, #0
 8015966:	60f8      	str	r0, [r7, #12]
 8015968:	60b9      	str	r1, [r7, #8]
 801596a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801596c:	bf00      	nop
 801596e:	3714      	adds	r7, #20
 8015970:	46bd      	mov	sp, r7
 8015972:	bc80      	pop	{r7}
 8015974:	4770      	bx	lr

08015976 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8015976:	b480      	push	{r7}
 8015978:	b083      	sub	sp, #12
 801597a:	af00      	add	r7, sp, #0
 801597c:	4603      	mov	r3, r0
 801597e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015980:	bf00      	nop
 8015982:	370c      	adds	r7, #12
 8015984:	46bd      	mov	sp, r7
 8015986:	bc80      	pop	{r7}
 8015988:	4770      	bx	lr

0801598a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801598a:	b480      	push	{r7}
 801598c:	b083      	sub	sp, #12
 801598e:	af00      	add	r7, sp, #0
 8015990:	4603      	mov	r3, r0
 8015992:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015994:	bf00      	nop
 8015996:	370c      	adds	r7, #12
 8015998:	46bd      	mov	sp, r7
 801599a:	bc80      	pop	{r7}
 801599c:	4770      	bx	lr

0801599e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801599e:	b480      	push	{r7}
 80159a0:	b083      	sub	sp, #12
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	4603      	mov	r3, r0
 80159a6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159a8:	bf00      	nop
 80159aa:	370c      	adds	r7, #12
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bc80      	pop	{r7}
 80159b0:	4770      	bx	lr

080159b2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80159b2:	b480      	push	{r7}
 80159b4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80159b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bc80      	pop	{r7}
 80159be:	4770      	bx	lr

080159c0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80159c0:	b480      	push	{r7}
 80159c2:	b083      	sub	sp, #12
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159c8:	bf00      	nop
 80159ca:	370c      	adds	r7, #12
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bc80      	pop	{r7}
 80159d0:	4770      	bx	lr

080159d2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80159d2:	b480      	push	{r7}
 80159d4:	b083      	sub	sp, #12
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159da:	bf00      	nop
 80159dc:	370c      	adds	r7, #12
 80159de:	46bd      	mov	sp, r7
 80159e0:	bc80      	pop	{r7}
 80159e2:	4770      	bx	lr

080159e4 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80159e4:	b480      	push	{r7}
 80159e6:	b083      	sub	sp, #12
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ec:	bf00      	nop
 80159ee:	370c      	adds	r7, #12
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bc80      	pop	{r7}
 80159f4:	4770      	bx	lr

080159f6 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80159f6:	b480      	push	{r7}
 80159f8:	b083      	sub	sp, #12
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
 80159fe:	460b      	mov	r3, r1
 8015a00:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015a02:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	370c      	adds	r7, #12
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bc80      	pop	{r7}
 8015a0c:	4770      	bx	lr

08015a0e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015a0e:	b480      	push	{r7}
 8015a10:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015a12:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bc80      	pop	{r7}
 8015a1a:	4770      	bx	lr

08015a1c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015a20:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bc80      	pop	{r7}
 8015a28:	4770      	bx	lr

08015a2a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015a2a:	b480      	push	{r7}
 8015a2c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015a2e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bc80      	pop	{r7}
 8015a36:	4770      	bx	lr

08015a38 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015a38:	b480      	push	{r7}
 8015a3a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015a3c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bc80      	pop	{r7}
 8015a44:	4770      	bx	lr

08015a46 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015a46:	b480      	push	{r7}
 8015a48:	b083      	sub	sp, #12
 8015a4a:	af00      	add	r7, sp, #0
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a50:	bf00      	nop
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bc80      	pop	{r7}
 8015a58:	4770      	bx	lr

08015a5a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015a5a:	b480      	push	{r7}
 8015a5c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a5e:	bf00      	nop
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bc80      	pop	{r7}
 8015a64:	4770      	bx	lr

08015a66 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015a66:	b480      	push	{r7}
 8015a68:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a6a:	bf00      	nop
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bc80      	pop	{r7}
 8015a70:	4770      	bx	lr

08015a72 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015a72:	b480      	push	{r7}
 8015a74:	b083      	sub	sp, #12
 8015a76:	af00      	add	r7, sp, #0
 8015a78:	4603      	mov	r3, r0
 8015a7a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015a7c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	370c      	adds	r7, #12
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bc80      	pop	{r7}
 8015a86:	4770      	bx	lr

08015a88 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015a88:	b480      	push	{r7}
 8015a8a:	b083      	sub	sp, #12
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015a90:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	370c      	adds	r7, #12
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bc80      	pop	{r7}
 8015a9a:	4770      	bx	lr

08015a9c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015aa4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	370c      	adds	r7, #12
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bc80      	pop	{r7}
 8015aae:	4770      	bx	lr

08015ab0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015ab4:	bf00      	nop
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bc80      	pop	{r7}
 8015aba:	4770      	bx	lr

08015abc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015abc:	b480      	push	{r7}
 8015abe:	b083      	sub	sp, #12
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	6039      	str	r1, [r7, #0]
 8015ac6:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015ac8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	370c      	adds	r7, #12
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bc80      	pop	{r7}
 8015ad2:	4770      	bx	lr

08015ad4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	b083      	sub	sp, #12
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	4603      	mov	r3, r0
 8015adc:	603a      	str	r2, [r7, #0]
 8015ade:	80fb      	strh	r3, [r7, #6]
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015ae4:	bf00      	nop
 8015ae6:	370c      	adds	r7, #12
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bc80      	pop	{r7}
 8015aec:	4770      	bx	lr

08015aee <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015aee:	b480      	push	{r7}
 8015af0:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015af2:	bf00      	nop
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bc80      	pop	{r7}
 8015af8:	4770      	bx	lr

08015afa <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015afa:	b480      	push	{r7}
 8015afc:	b083      	sub	sp, #12
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015b02:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	370c      	adds	r7, #12
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bc80      	pop	{r7}
 8015b0c:	4770      	bx	lr

08015b0e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015b0e:	b480      	push	{r7}
 8015b10:	b083      	sub	sp, #12
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015b16:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	370c      	adds	r7, #12
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bc80      	pop	{r7}
 8015b20:	4770      	bx	lr

08015b22 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015b22:	b480      	push	{r7}
 8015b24:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015b26:	bf00      	nop
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bc80      	pop	{r7}
 8015b2c:	4770      	bx	lr

08015b2e <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015b2e:	b480      	push	{r7}
 8015b30:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015b32:	bf00      	nop
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bc80      	pop	{r7}
 8015b38:	4770      	bx	lr

08015b3a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015b3a:	b480      	push	{r7}
 8015b3c:	b085      	sub	sp, #20
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015b46:	2300      	movs	r3, #0
 8015b48:	81fb      	strh	r3, [r7, #14]
 8015b4a:	e00a      	b.n	8015b62 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015b4c:	89fb      	ldrh	r3, [r7, #14]
 8015b4e:	68ba      	ldr	r2, [r7, #8]
 8015b50:	4413      	add	r3, r2
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d001      	beq.n	8015b5c <IsSlotFree+0x22>
        {
            return false;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	e006      	b.n	8015b6a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015b5c:	89fb      	ldrh	r3, [r7, #14]
 8015b5e:	3301      	adds	r3, #1
 8015b60:	81fb      	strh	r3, [r7, #14]
 8015b62:	89fb      	ldrh	r3, [r7, #14]
 8015b64:	2b0f      	cmp	r3, #15
 8015b66:	d9f1      	bls.n	8015b4c <IsSlotFree+0x12>
        }
    }
    return true;
 8015b68:	2301      	movs	r3, #1
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	3714      	adds	r7, #20
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bc80      	pop	{r7}
 8015b72:	4770      	bx	lr

08015b74 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015b7e:	e007      	b.n	8015b90 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015b80:	79fb      	ldrb	r3, [r7, #7]
 8015b82:	3301      	adds	r3, #1
 8015b84:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015b86:	79fb      	ldrb	r3, [r7, #7]
 8015b88:	2b0f      	cmp	r3, #15
 8015b8a:	d101      	bne.n	8015b90 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e012      	b.n	8015bb6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015b90:	79fb      	ldrb	r3, [r7, #7]
 8015b92:	011b      	lsls	r3, r3, #4
 8015b94:	3308      	adds	r3, #8
 8015b96:	4a0a      	ldr	r2, [pc, #40]	; (8015bc0 <MallocNewMacCommandSlot+0x4c>)
 8015b98:	4413      	add	r3, r2
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7ff ffcd 	bl	8015b3a <IsSlotFree>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	f083 0301 	eor.w	r3, r3, #1
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d1e9      	bne.n	8015b80 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015bac:	79fb      	ldrb	r3, [r7, #7]
 8015bae:	011b      	lsls	r3, r3, #4
 8015bb0:	3308      	adds	r3, #8
 8015bb2:	4a03      	ldr	r2, [pc, #12]	; (8015bc0 <MallocNewMacCommandSlot+0x4c>)
 8015bb4:	4413      	add	r3, r2
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3708      	adds	r7, #8
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	20002170 	.word	0x20002170

08015bc4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d101      	bne.n	8015bd6 <FreeMacCommandSlot+0x12>
    {
        return false;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	e005      	b.n	8015be2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015bd6:	2210      	movs	r2, #16
 8015bd8:	2100      	movs	r1, #0
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f004 f9bc 	bl	8019f58 <memset1>

    return true;
 8015be0:	2301      	movs	r3, #1
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3708      	adds	r7, #8
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015bea:	b480      	push	{r7}
 8015bec:	b083      	sub	sp, #12
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d101      	bne.n	8015bfc <LinkedListInit+0x12>
    {
        return false;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	e006      	b.n	8015c0a <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2200      	movs	r2, #0
 8015c06:	605a      	str	r2, [r3, #4]

    return true;
 8015c08:	2301      	movs	r3, #1
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	370c      	adds	r7, #12
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bc80      	pop	{r7}
 8015c12:	4770      	bx	lr

08015c14 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d002      	beq.n	8015c2a <LinkedListAdd+0x16>
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d101      	bne.n	8015c2e <LinkedListAdd+0x1a>
    {
        return false;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	e015      	b.n	8015c5a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d102      	bne.n	8015c3c <LinkedListAdd+0x28>
    {
        list->First = element;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d003      	beq.n	8015c4c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	685b      	ldr	r3, [r3, #4]
 8015c48:	683a      	ldr	r2, [r7, #0]
 8015c4a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	683a      	ldr	r2, [r7, #0]
 8015c56:	605a      	str	r2, [r3, #4]

    return true;
 8015c58:	2301      	movs	r3, #1
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	370c      	adds	r7, #12
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bc80      	pop	{r7}
 8015c62:	4770      	bx	lr

08015c64 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015c64:	b480      	push	{r7}
 8015c66:	b085      	sub	sp, #20
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d002      	beq.n	8015c7a <LinkedListGetPrevious+0x16>
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d101      	bne.n	8015c7e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	e016      	b.n	8015cac <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015c84:	683a      	ldr	r2, [r7, #0]
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d00c      	beq.n	8015ca6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015c8c:	e002      	b.n	8015c94 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d007      	beq.n	8015caa <LinkedListGetPrevious+0x46>
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	683a      	ldr	r2, [r7, #0]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d1f4      	bne.n	8015c8e <LinkedListGetPrevious+0x2a>
 8015ca4:	e001      	b.n	8015caa <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015caa:	68fb      	ldr	r3, [r7, #12]
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3714      	adds	r7, #20
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bc80      	pop	{r7}
 8015cb4:	4770      	bx	lr

08015cb6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b084      	sub	sp, #16
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
 8015cbe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d002      	beq.n	8015ccc <LinkedListRemove+0x16>
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d101      	bne.n	8015cd0 <LinkedListRemove+0x1a>
    {
        return false;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	e020      	b.n	8015d12 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015cd0:	6839      	ldr	r1, [r7, #0]
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7ff ffc6 	bl	8015c64 <LinkedListGetPrevious>
 8015cd8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	683a      	ldr	r2, [r7, #0]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d103      	bne.n	8015cec <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	681a      	ldr	r2, [r3, #0]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	683a      	ldr	r2, [r7, #0]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d102      	bne.n	8015cfc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	68fa      	ldr	r2, [r7, #12]
 8015cfa:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d003      	beq.n	8015d0a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	601a      	str	r2, [r3, #0]

    return true;
 8015d10:	2301      	movs	r3, #1
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3710      	adds	r7, #16
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}

08015d1a <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015d1a:	b480      	push	{r7}
 8015d1c:	b083      	sub	sp, #12
 8015d1e:	af00      	add	r7, sp, #0
 8015d20:	4603      	mov	r3, r0
 8015d22:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015d24:	79fb      	ldrb	r3, [r7, #7]
 8015d26:	2b05      	cmp	r3, #5
 8015d28:	d004      	beq.n	8015d34 <IsSticky+0x1a>
 8015d2a:	2b05      	cmp	r3, #5
 8015d2c:	db04      	blt.n	8015d38 <IsSticky+0x1e>
 8015d2e:	3b08      	subs	r3, #8
 8015d30:	2b02      	cmp	r3, #2
 8015d32:	d801      	bhi.n	8015d38 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015d34:	2301      	movs	r3, #1
 8015d36:	e000      	b.n	8015d3a <IsSticky+0x20>
        default:
            return false;
 8015d38:	2300      	movs	r3, #0
    }
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	370c      	adds	r7, #12
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bc80      	pop	{r7}
 8015d42:	4770      	bx	lr

08015d44 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015d48:	22fc      	movs	r2, #252	; 0xfc
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	4804      	ldr	r0, [pc, #16]	; (8015d60 <LoRaMacCommandsInit+0x1c>)
 8015d4e:	f004 f903 	bl	8019f58 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015d52:	4803      	ldr	r0, [pc, #12]	; (8015d60 <LoRaMacCommandsInit+0x1c>)
 8015d54:	f7ff ff49 	bl	8015bea <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015d58:	2300      	movs	r3, #0
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	20002170 	.word	0x20002170

08015d64 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b086      	sub	sp, #24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	60b9      	str	r1, [r7, #8]
 8015d6e:	607a      	str	r2, [r7, #4]
 8015d70:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d101      	bne.n	8015d7c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e033      	b.n	8015de4 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015d7c:	f7ff fefa 	bl	8015b74 <MallocNewMacCommandSlot>
 8015d80:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015d82:	697b      	ldr	r3, [r7, #20]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d101      	bne.n	8015d8c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015d88:	2302      	movs	r3, #2
 8015d8a:	e02b      	b.n	8015de4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015d8c:	6979      	ldr	r1, [r7, #20]
 8015d8e:	4817      	ldr	r0, [pc, #92]	; (8015dec <LoRaMacCommandsAddCmd+0x88>)
 8015d90:	f7ff ff40 	bl	8015c14 <LinkedListAdd>
 8015d94:	4603      	mov	r3, r0
 8015d96:	f083 0301 	eor.w	r3, r3, #1
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d001      	beq.n	8015da4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015da0:	2305      	movs	r3, #5
 8015da2:	e01f      	b.n	8015de4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	7bfa      	ldrb	r2, [r7, #15]
 8015da8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	3305      	adds	r3, #5
 8015db4:	687a      	ldr	r2, [r7, #4]
 8015db6:	b292      	uxth	r2, r2
 8015db8:	68b9      	ldr	r1, [r7, #8]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f004 f891 	bl	8019ee2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015dc0:	7bfb      	ldrb	r3, [r7, #15]
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7ff ffa9 	bl	8015d1a <IsSticky>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	461a      	mov	r2, r3
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015dd0:	4b06      	ldr	r3, [pc, #24]	; (8015dec <LoRaMacCommandsAddCmd+0x88>)
 8015dd2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	4413      	add	r3, r2
 8015dda:	3301      	adds	r3, #1
 8015ddc:	4a03      	ldr	r2, [pc, #12]	; (8015dec <LoRaMacCommandsAddCmd+0x88>)
 8015dde:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015de2:	2300      	movs	r3, #0
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3718      	adds	r7, #24
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	20002170 	.word	0x20002170

08015df0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b082      	sub	sp, #8
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d101      	bne.n	8015e02 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	e021      	b.n	8015e46 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015e02:	6879      	ldr	r1, [r7, #4]
 8015e04:	4812      	ldr	r0, [pc, #72]	; (8015e50 <LoRaMacCommandsRemoveCmd+0x60>)
 8015e06:	f7ff ff56 	bl	8015cb6 <LinkedListRemove>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	f083 0301 	eor.w	r3, r3, #1
 8015e10:	b2db      	uxtb	r3, r3
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d001      	beq.n	8015e1a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015e16:	2303      	movs	r3, #3
 8015e18:	e015      	b.n	8015e46 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015e1a:	4b0d      	ldr	r3, [pc, #52]	; (8015e50 <LoRaMacCommandsRemoveCmd+0x60>)
 8015e1c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	689b      	ldr	r3, [r3, #8]
 8015e24:	1ad3      	subs	r3, r2, r3
 8015e26:	3b01      	subs	r3, #1
 8015e28:	4a09      	ldr	r2, [pc, #36]	; (8015e50 <LoRaMacCommandsRemoveCmd+0x60>)
 8015e2a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f7ff fec8 	bl	8015bc4 <FreeMacCommandSlot>
 8015e34:	4603      	mov	r3, r0
 8015e36:	f083 0301 	eor.w	r3, r3, #1
 8015e3a:	b2db      	uxtb	r3, r3
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d001      	beq.n	8015e44 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015e40:	2305      	movs	r3, #5
 8015e42:	e000      	b.n	8015e46 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	20002170 	.word	0x20002170

08015e54 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b082      	sub	sp, #8
 8015e58:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015e5a:	4b0f      	ldr	r3, [pc, #60]	; (8015e98 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015e60:	e012      	b.n	8015e88 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	7b1b      	ldrb	r3, [r3, #12]
 8015e66:	f083 0301 	eor.w	r3, r3, #1
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d008      	beq.n	8015e82 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f7ff ffba 	bl	8015df0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	607b      	str	r3, [r7, #4]
 8015e80:	e002      	b.n	8015e88 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1e9      	bne.n	8015e62 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e8e:	2300      	movs	r3, #0
}
 8015e90:	4618      	mov	r0, r3
 8015e92:	3708      	adds	r7, #8
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}
 8015e98:	20002170 	.word	0x20002170

08015e9c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015ea2:	4b0e      	ldr	r3, [pc, #56]	; (8015edc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015ea8:	e00f      	b.n	8015eca <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	791b      	ldrb	r3, [r3, #4]
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7ff ff30 	bl	8015d1a <IsSticky>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d002      	beq.n	8015ec6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f7ff ff95 	bl	8015df0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d1ec      	bne.n	8015eaa <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015ed0:	2300      	movs	r3, #0
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3708      	adds	r7, #8
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	20002170 	.word	0x20002170

08015ee0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b083      	sub	sp, #12
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d101      	bne.n	8015ef2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015eee:	2301      	movs	r3, #1
 8015ef0:	e005      	b.n	8015efe <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015ef2:	4b05      	ldr	r3, [pc, #20]	; (8015f08 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015ef4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015efc:	2300      	movs	r3, #0
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	370c      	adds	r7, #12
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bc80      	pop	{r7}
 8015f06:	4770      	bx	lr
 8015f08:	20002170 	.word	0x20002170

08015f0c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b088      	sub	sp, #32
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015f18:	4b25      	ldr	r3, [pc, #148]	; (8015fb0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d002      	beq.n	8015f2e <LoRaMacCommandsSerializeCmds+0x22>
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d126      	bne.n	8015f7c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015f2e:	2301      	movs	r3, #1
 8015f30:	e039      	b.n	8015fa6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015f32:	7efb      	ldrb	r3, [r7, #27]
 8015f34:	68fa      	ldr	r2, [r7, #12]
 8015f36:	1ad2      	subs	r2, r2, r3
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	689b      	ldr	r3, [r3, #8]
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d320      	bcc.n	8015f84 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015f42:	7efb      	ldrb	r3, [r7, #27]
 8015f44:	1c5a      	adds	r2, r3, #1
 8015f46:	76fa      	strb	r2, [r7, #27]
 8015f48:	461a      	mov	r2, r3
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	4413      	add	r3, r2
 8015f4e:	69fa      	ldr	r2, [r7, #28]
 8015f50:	7912      	ldrb	r2, [r2, #4]
 8015f52:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015f54:	7efb      	ldrb	r3, [r7, #27]
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	18d0      	adds	r0, r2, r3
 8015f5a:	69fb      	ldr	r3, [r7, #28]
 8015f5c:	1d59      	adds	r1, r3, #5
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	689b      	ldr	r3, [r3, #8]
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	461a      	mov	r2, r3
 8015f66:	f003 ffbc 	bl	8019ee2 <memcpy1>
            itr += curElement->PayloadSize;
 8015f6a:	69fb      	ldr	r3, [r7, #28]
 8015f6c:	689b      	ldr	r3, [r3, #8]
 8015f6e:	b2da      	uxtb	r2, r3
 8015f70:	7efb      	ldrb	r3, [r7, #27]
 8015f72:	4413      	add	r3, r2
 8015f74:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015f76:	69fb      	ldr	r3, [r7, #28]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d1d7      	bne.n	8015f32 <LoRaMacCommandsSerializeCmds+0x26>
 8015f82:	e009      	b.n	8015f98 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015f84:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015f86:	e007      	b.n	8015f98 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015f8e:	69f8      	ldr	r0, [r7, #28]
 8015f90:	f7ff ff2e 	bl	8015df0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015f98:	69fb      	ldr	r3, [r7, #28]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d1f4      	bne.n	8015f88 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015f9e:	68b8      	ldr	r0, [r7, #8]
 8015fa0:	f7ff ff9e 	bl	8015ee0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015fa4:	2300      	movs	r3, #0
}
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	3720      	adds	r7, #32
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	20002170 	.word	0x20002170

08015fb4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b085      	sub	sp, #20
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d101      	bne.n	8015fc6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	e016      	b.n	8015ff4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8015fc6:	4b0e      	ldr	r3, [pc, #56]	; (8016000 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2200      	movs	r2, #0
 8015fd0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8015fd2:	e00b      	b.n	8015fec <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	7b1b      	ldrb	r3, [r3, #12]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d004      	beq.n	8015fe6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2201      	movs	r2, #1
 8015fe0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e006      	b.n	8015ff4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d1f0      	bne.n	8015fd4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015ff2:	2300      	movs	r3, #0
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3714      	adds	r7, #20
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bc80      	pop	{r7}
 8015ffc:	4770      	bx	lr
 8015ffe:	bf00      	nop
 8016000:	20002170 	.word	0x20002170

08016004 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8016004:	b480      	push	{r7}
 8016006:	b085      	sub	sp, #20
 8016008:	af00      	add	r7, sp, #0
 801600a:	4603      	mov	r3, r0
 801600c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801600e:	2300      	movs	r3, #0
 8016010:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8016012:	79fb      	ldrb	r3, [r7, #7]
 8016014:	3b02      	subs	r3, #2
 8016016:	2b11      	cmp	r3, #17
 8016018:	d850      	bhi.n	80160bc <LoRaMacCommandsGetCmdSize+0xb8>
 801601a:	a201      	add	r2, pc, #4	; (adr r2, 8016020 <LoRaMacCommandsGetCmdSize+0x1c>)
 801601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016020:	08016069 	.word	0x08016069
 8016024:	0801606f 	.word	0x0801606f
 8016028:	08016075 	.word	0x08016075
 801602c:	0801607b 	.word	0x0801607b
 8016030:	08016081 	.word	0x08016081
 8016034:	08016087 	.word	0x08016087
 8016038:	0801608d 	.word	0x0801608d
 801603c:	08016093 	.word	0x08016093
 8016040:	08016099 	.word	0x08016099
 8016044:	080160bd 	.word	0x080160bd
 8016048:	080160bd 	.word	0x080160bd
 801604c:	0801609f 	.word	0x0801609f
 8016050:	080160bd 	.word	0x080160bd
 8016054:	080160bd 	.word	0x080160bd
 8016058:	080160a5 	.word	0x080160a5
 801605c:	080160ab 	.word	0x080160ab
 8016060:	080160b1 	.word	0x080160b1
 8016064:	080160b7 	.word	0x080160b7
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8016068:	2303      	movs	r3, #3
 801606a:	73fb      	strb	r3, [r7, #15]
            break;
 801606c:	e027      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801606e:	2305      	movs	r3, #5
 8016070:	73fb      	strb	r3, [r7, #15]
            break;
 8016072:	e024      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8016074:	2302      	movs	r3, #2
 8016076:	73fb      	strb	r3, [r7, #15]
            break;
 8016078:	e021      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801607a:	2305      	movs	r3, #5
 801607c:	73fb      	strb	r3, [r7, #15]
            break;
 801607e:	e01e      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8016080:	2301      	movs	r3, #1
 8016082:	73fb      	strb	r3, [r7, #15]
            break;
 8016084:	e01b      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8016086:	2306      	movs	r3, #6
 8016088:	73fb      	strb	r3, [r7, #15]
            break;
 801608a:	e018      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801608c:	2302      	movs	r3, #2
 801608e:	73fb      	strb	r3, [r7, #15]
            break;
 8016090:	e015      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8016092:	2302      	movs	r3, #2
 8016094:	73fb      	strb	r3, [r7, #15]
            break;
 8016096:	e012      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8016098:	2305      	movs	r3, #5
 801609a:	73fb      	strb	r3, [r7, #15]
            break;
 801609c:	e00f      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801609e:	2306      	movs	r3, #6
 80160a0:	73fb      	strb	r3, [r7, #15]
            break;
 80160a2:	e00c      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80160a4:	2301      	movs	r3, #1
 80160a6:	73fb      	strb	r3, [r7, #15]
            break;
 80160a8:	e009      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80160aa:	2305      	movs	r3, #5
 80160ac:	73fb      	strb	r3, [r7, #15]
            break;
 80160ae:	e006      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80160b0:	2304      	movs	r3, #4
 80160b2:	73fb      	strb	r3, [r7, #15]
            break;
 80160b4:	e003      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80160b6:	2304      	movs	r3, #4
 80160b8:	73fb      	strb	r3, [r7, #15]
            break;
 80160ba:	e000      	b.n	80160be <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80160bc:	bf00      	nop
        }
    }
    return cidSize;
 80160be:	7bfb      	ldrb	r3, [r7, #15]
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3714      	adds	r7, #20
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bc80      	pop	{r7}
 80160c8:	4770      	bx	lr
 80160ca:	bf00      	nop

080160cc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80160cc:	b480      	push	{r7}
 80160ce:	b083      	sub	sp, #12
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	4a07      	ldr	r2, [pc, #28]	; (80160f4 <IncreaseBufferPointer+0x28>)
 80160d8:	4293      	cmp	r3, r2
 80160da:	d102      	bne.n	80160e2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160dc:	4b06      	ldr	r3, [pc, #24]	; (80160f8 <IncreaseBufferPointer+0x2c>)
 80160de:	607b      	str	r3, [r7, #4]
 80160e0:	e002      	b.n	80160e8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	3304      	adds	r3, #4
 80160e6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80160e8:	687b      	ldr	r3, [r7, #4]
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	370c      	adds	r7, #12
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bc80      	pop	{r7}
 80160f2:	4770      	bx	lr
 80160f4:	20002288 	.word	0x20002288
 80160f8:	20002278 	.word	0x20002278

080160fc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80160fc:	b480      	push	{r7}
 80160fe:	b083      	sub	sp, #12
 8016100:	af00      	add	r7, sp, #0
 8016102:	4603      	mov	r3, r0
 8016104:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8016106:	79fb      	ldrb	r3, [r7, #7]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d101      	bne.n	8016110 <IsListEmpty+0x14>
    {
        return true;
 801610c:	2301      	movs	r3, #1
 801610e:	e000      	b.n	8016112 <IsListEmpty+0x16>
    }
    return false;
 8016110:	2300      	movs	r3, #0
}
 8016112:	4618      	mov	r0, r3
 8016114:	370c      	adds	r7, #12
 8016116:	46bd      	mov	sp, r7
 8016118:	bc80      	pop	{r7}
 801611a:	4770      	bx	lr

0801611c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	4603      	mov	r3, r0
 8016124:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8016126:	79fb      	ldrb	r3, [r7, #7]
 8016128:	2b04      	cmp	r3, #4
 801612a:	d901      	bls.n	8016130 <IsListFull+0x14>
    {
        return true;
 801612c:	2301      	movs	r3, #1
 801612e:	e000      	b.n	8016132 <IsListFull+0x16>
    }
    return false;
 8016130:	2300      	movs	r3, #0
}
 8016132:	4618      	mov	r0, r3
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	bc80      	pop	{r7}
 801613a:	4770      	bx	lr

0801613c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b086      	sub	sp, #24
 8016140:	af00      	add	r7, sp, #0
 8016142:	4603      	mov	r3, r0
 8016144:	60b9      	str	r1, [r7, #8]
 8016146:	607a      	str	r2, [r7, #4]
 8016148:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801614e:	4b13      	ldr	r3, [pc, #76]	; (801619c <GetElement+0x60>)
 8016150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016154:	4618      	mov	r0, r3
 8016156:	f7ff ffd1 	bl	80160fc <IsListEmpty>
 801615a:	4603      	mov	r3, r0
 801615c:	2b00      	cmp	r3, #0
 801615e:	d001      	beq.n	8016164 <GetElement+0x28>
    {
        return NULL;
 8016160:	2300      	movs	r3, #0
 8016162:	e017      	b.n	8016194 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016164:	2300      	movs	r3, #0
 8016166:	74fb      	strb	r3, [r7, #19]
 8016168:	e00d      	b.n	8016186 <GetElement+0x4a>
    {
        if( element->Request == request )
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	7bfa      	ldrb	r2, [r7, #15]
 8016170:	429a      	cmp	r2, r3
 8016172:	d101      	bne.n	8016178 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	e00d      	b.n	8016194 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016178:	6978      	ldr	r0, [r7, #20]
 801617a:	f7ff ffa7 	bl	80160cc <IncreaseBufferPointer>
 801617e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016180:	7cfb      	ldrb	r3, [r7, #19]
 8016182:	3301      	adds	r3, #1
 8016184:	74fb      	strb	r3, [r7, #19]
 8016186:	4b05      	ldr	r3, [pc, #20]	; (801619c <GetElement+0x60>)
 8016188:	f893 3020 	ldrb.w	r3, [r3, #32]
 801618c:	7cfa      	ldrb	r2, [r7, #19]
 801618e:	429a      	cmp	r2, r3
 8016190:	d3eb      	bcc.n	801616a <GetElement+0x2e>
    }

    return NULL;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3718      	adds	r7, #24
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	2000226c 	.word	0x2000226c

080161a0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80161a8:	4a0c      	ldr	r2, [pc, #48]	; (80161dc <LoRaMacConfirmQueueInit+0x3c>)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80161ae:	4b0b      	ldr	r3, [pc, #44]	; (80161dc <LoRaMacConfirmQueueInit+0x3c>)
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80161b6:	4b09      	ldr	r3, [pc, #36]	; (80161dc <LoRaMacConfirmQueueInit+0x3c>)
 80161b8:	4a09      	ldr	r2, [pc, #36]	; (80161e0 <LoRaMacConfirmQueueInit+0x40>)
 80161ba:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80161bc:	4b07      	ldr	r3, [pc, #28]	; (80161dc <LoRaMacConfirmQueueInit+0x3c>)
 80161be:	4a08      	ldr	r2, [pc, #32]	; (80161e0 <LoRaMacConfirmQueueInit+0x40>)
 80161c0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80161c2:	2214      	movs	r2, #20
 80161c4:	21ff      	movs	r1, #255	; 0xff
 80161c6:	4806      	ldr	r0, [pc, #24]	; (80161e0 <LoRaMacConfirmQueueInit+0x40>)
 80161c8:	f003 fec6 	bl	8019f58 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80161cc:	4b03      	ldr	r3, [pc, #12]	; (80161dc <LoRaMacConfirmQueueInit+0x3c>)
 80161ce:	2201      	movs	r2, #1
 80161d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80161d4:	bf00      	nop
 80161d6:	3708      	adds	r7, #8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	2000226c 	.word	0x2000226c
 80161e0:	20002278 	.word	0x20002278

080161e4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80161ec:	4b19      	ldr	r3, [pc, #100]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 80161ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7ff ff92 	bl	801611c <IsListFull>
 80161f8:	4603      	mov	r3, r0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d001      	beq.n	8016202 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80161fe:	2300      	movs	r3, #0
 8016200:	e023      	b.n	801624a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8016202:	4b14      	ldr	r3, [pc, #80]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 8016204:	689b      	ldr	r3, [r3, #8]
 8016206:	687a      	ldr	r2, [r7, #4]
 8016208:	7812      	ldrb	r2, [r2, #0]
 801620a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801620c:	4b11      	ldr	r3, [pc, #68]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 801620e:	689b      	ldr	r3, [r3, #8]
 8016210:	687a      	ldr	r2, [r7, #4]
 8016212:	7852      	ldrb	r2, [r2, #1]
 8016214:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8016216:	4b0f      	ldr	r3, [pc, #60]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	78d2      	ldrb	r2, [r2, #3]
 801621e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016220:	4b0c      	ldr	r3, [pc, #48]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 8016222:	689b      	ldr	r3, [r3, #8]
 8016224:	2200      	movs	r2, #0
 8016226:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8016228:	4b0a      	ldr	r3, [pc, #40]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 801622a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801622e:	3301      	adds	r3, #1
 8016230:	b2da      	uxtb	r2, r3
 8016232:	4b08      	ldr	r3, [pc, #32]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 8016234:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016238:	4b06      	ldr	r3, [pc, #24]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 801623a:	689b      	ldr	r3, [r3, #8]
 801623c:	4618      	mov	r0, r3
 801623e:	f7ff ff45 	bl	80160cc <IncreaseBufferPointer>
 8016242:	4603      	mov	r3, r0
 8016244:	4a03      	ldr	r2, [pc, #12]	; (8016254 <LoRaMacConfirmQueueAdd+0x70>)
 8016246:	6093      	str	r3, [r2, #8]

    return true;
 8016248:	2301      	movs	r3, #1
}
 801624a:	4618      	mov	r0, r3
 801624c:	3708      	adds	r7, #8
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	2000226c 	.word	0x2000226c

08016258 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016258:	b580      	push	{r7, lr}
 801625a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801625c:	4b0e      	ldr	r3, [pc, #56]	; (8016298 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801625e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016262:	4618      	mov	r0, r3
 8016264:	f7ff ff4a 	bl	80160fc <IsListEmpty>
 8016268:	4603      	mov	r3, r0
 801626a:	2b00      	cmp	r3, #0
 801626c:	d001      	beq.n	8016272 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801626e:	2300      	movs	r3, #0
 8016270:	e010      	b.n	8016294 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016272:	4b09      	ldr	r3, [pc, #36]	; (8016298 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016278:	3b01      	subs	r3, #1
 801627a:	b2da      	uxtb	r2, r3
 801627c:	4b06      	ldr	r3, [pc, #24]	; (8016298 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801627e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016282:	4b05      	ldr	r3, [pc, #20]	; (8016298 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	4618      	mov	r0, r3
 8016288:	f7ff ff20 	bl	80160cc <IncreaseBufferPointer>
 801628c:	4603      	mov	r3, r0
 801628e:	4a02      	ldr	r2, [pc, #8]	; (8016298 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016290:	6053      	str	r3, [r2, #4]

    return true;
 8016292:	2301      	movs	r3, #1
}
 8016294:	4618      	mov	r0, r3
 8016296:	bd80      	pop	{r7, pc}
 8016298:	2000226c 	.word	0x2000226c

0801629c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	4603      	mov	r3, r0
 80162a4:	460a      	mov	r2, r1
 80162a6:	71fb      	strb	r3, [r7, #7]
 80162a8:	4613      	mov	r3, r2
 80162aa:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80162ac:	2300      	movs	r3, #0
 80162ae:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80162b0:	4b10      	ldr	r3, [pc, #64]	; (80162f4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80162b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7ff ff20 	bl	80160fc <IsListEmpty>
 80162bc:	4603      	mov	r3, r0
 80162be:	f083 0301 	eor.w	r3, r3, #1
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d011      	beq.n	80162ec <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80162c8:	4b0a      	ldr	r3, [pc, #40]	; (80162f4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80162ca:	6859      	ldr	r1, [r3, #4]
 80162cc:	4b09      	ldr	r3, [pc, #36]	; (80162f4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80162ce:	689a      	ldr	r2, [r3, #8]
 80162d0:	79bb      	ldrb	r3, [r7, #6]
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7ff ff32 	bl	801613c <GetElement>
 80162d8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d005      	beq.n	80162ec <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	79fa      	ldrb	r2, [r7, #7]
 80162e4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2201      	movs	r2, #1
 80162ea:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80162ec:	bf00      	nop
 80162ee:	3710      	adds	r7, #16
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	2000226c 	.word	0x2000226c

080162f8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	4603      	mov	r3, r0
 8016300:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8016302:	2300      	movs	r3, #0
 8016304:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016306:	4b10      	ldr	r3, [pc, #64]	; (8016348 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016308:	f893 3020 	ldrb.w	r3, [r3, #32]
 801630c:	4618      	mov	r0, r3
 801630e:	f7ff fef5 	bl	80160fc <IsListEmpty>
 8016312:	4603      	mov	r3, r0
 8016314:	f083 0301 	eor.w	r3, r3, #1
 8016318:	b2db      	uxtb	r3, r3
 801631a:	2b00      	cmp	r3, #0
 801631c:	d00e      	beq.n	801633c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801631e:	4b0a      	ldr	r3, [pc, #40]	; (8016348 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016320:	6859      	ldr	r1, [r3, #4]
 8016322:	4b09      	ldr	r3, [pc, #36]	; (8016348 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016324:	689a      	ldr	r2, [r3, #8]
 8016326:	79fb      	ldrb	r3, [r7, #7]
 8016328:	4618      	mov	r0, r3
 801632a:	f7ff ff07 	bl	801613c <GetElement>
 801632e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d002      	beq.n	801633c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	785b      	ldrb	r3, [r3, #1]
 801633a:	e000      	b.n	801633e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801633c:	2301      	movs	r3, #1
}
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	2000226c 	.word	0x2000226c

0801634c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	4603      	mov	r3, r0
 8016354:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016356:	4b16      	ldr	r3, [pc, #88]	; (80163b0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801635c:	4a14      	ldr	r2, [pc, #80]	; (80163b0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801635e:	79fb      	ldrb	r3, [r7, #7]
 8016360:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016364:	4b12      	ldr	r3, [pc, #72]	; (80163b0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016366:	f893 3020 	ldrb.w	r3, [r3, #32]
 801636a:	4618      	mov	r0, r3
 801636c:	f7ff fec6 	bl	80160fc <IsListEmpty>
 8016370:	4603      	mov	r3, r0
 8016372:	f083 0301 	eor.w	r3, r3, #1
 8016376:	b2db      	uxtb	r3, r3
 8016378:	2b00      	cmp	r3, #0
 801637a:	d015      	beq.n	80163a8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	79fa      	ldrb	r2, [r7, #7]
 8016380:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	78db      	ldrb	r3, [r3, #3]
 8016386:	f083 0301 	eor.w	r3, r3, #1
 801638a:	b2db      	uxtb	r3, r3
 801638c:	2b00      	cmp	r3, #0
 801638e:	d002      	beq.n	8016396 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	2201      	movs	r2, #1
 8016394:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016396:	68f8      	ldr	r0, [r7, #12]
 8016398:	f7ff fe98 	bl	80160cc <IncreaseBufferPointer>
 801639c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801639e:	4b04      	ldr	r3, [pc, #16]	; (80163b0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80163a0:	689b      	ldr	r3, [r3, #8]
 80163a2:	68fa      	ldr	r2, [r7, #12]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d1e9      	bne.n	801637c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80163a8:	bf00      	nop
 80163aa:	3710      	adds	r7, #16
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}
 80163b0:	2000226c 	.word	0x2000226c

080163b4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	4603      	mov	r3, r0
 80163bc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80163be:	4b09      	ldr	r3, [pc, #36]	; (80163e4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80163c0:	6859      	ldr	r1, [r3, #4]
 80163c2:	4b08      	ldr	r3, [pc, #32]	; (80163e4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80163c4:	689a      	ldr	r2, [r3, #8]
 80163c6:	79fb      	ldrb	r3, [r7, #7]
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7ff feb7 	bl	801613c <GetElement>
 80163ce:	4603      	mov	r3, r0
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d001      	beq.n	80163d8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80163d4:	2301      	movs	r3, #1
 80163d6:	e000      	b.n	80163da <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80163d8:	2300      	movs	r3, #0
}
 80163da:	4618      	mov	r0, r3
 80163dc:	3708      	adds	r7, #8
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	2000226c 	.word	0x2000226c

080163e8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80163f0:	4b22      	ldr	r3, [pc, #136]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 80163f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163f6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80163f8:	2300      	movs	r3, #0
 80163fa:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80163fc:	2300      	movs	r3, #0
 80163fe:	73fb      	strb	r3, [r7, #15]
 8016400:	e032      	b.n	8016468 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016402:	4b1e      	ldr	r3, [pc, #120]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	781a      	ldrb	r2, [r3, #0]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801640c:	4b1b      	ldr	r3, [pc, #108]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	785a      	ldrb	r2, [r3, #1]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016416:	4b19      	ldr	r3, [pc, #100]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	789b      	ldrb	r3, [r3, #2]
 801641c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801641e:	7b7b      	ldrb	r3, [r7, #13]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d005      	beq.n	8016430 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016424:	4b15      	ldr	r3, [pc, #84]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	689b      	ldr	r3, [r3, #8]
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	4798      	blx	r3
 801642e:	e00b      	b.n	8016448 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8016430:	4b12      	ldr	r3, [pc, #72]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016438:	4b10      	ldr	r3, [pc, #64]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	785b      	ldrb	r3, [r3, #1]
 801643e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8016440:	4b0e      	ldr	r3, [pc, #56]	; (801647c <LoRaMacConfirmQueueHandleCb+0x94>)
 8016442:	685b      	ldr	r3, [r3, #4]
 8016444:	78db      	ldrb	r3, [r3, #3]
 8016446:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016448:	f7ff ff06 	bl	8016258 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801644c:	7b7b      	ldrb	r3, [r7, #13]
 801644e:	f083 0301 	eor.w	r3, r3, #1
 8016452:	b2db      	uxtb	r3, r3
 8016454:	2b00      	cmp	r3, #0
 8016456:	d004      	beq.n	8016462 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016458:	f107 0308 	add.w	r3, r7, #8
 801645c:	4618      	mov	r0, r3
 801645e:	f7ff fec1 	bl	80161e4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016462:	7bfb      	ldrb	r3, [r7, #15]
 8016464:	3301      	adds	r3, #1
 8016466:	73fb      	strb	r3, [r7, #15]
 8016468:	7bfa      	ldrb	r2, [r7, #15]
 801646a:	7bbb      	ldrb	r3, [r7, #14]
 801646c:	429a      	cmp	r2, r3
 801646e:	d3c8      	bcc.n	8016402 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8016470:	bf00      	nop
 8016472:	bf00      	nop
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	2000226c 	.word	0x2000226c

08016480 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016480:	b480      	push	{r7}
 8016482:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016484:	4b03      	ldr	r3, [pc, #12]	; (8016494 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016486:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801648a:	4618      	mov	r0, r3
 801648c:	46bd      	mov	sp, r7
 801648e:	bc80      	pop	{r7}
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop
 8016494:	2000226c 	.word	0x2000226c

08016498 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801649c:	4b06      	ldr	r3, [pc, #24]	; (80164b8 <LoRaMacConfirmQueueIsFull+0x20>)
 801649e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7ff fe3a 	bl	801611c <IsListFull>
 80164a8:	4603      	mov	r3, r0
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d001      	beq.n	80164b2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80164ae:	2301      	movs	r3, #1
 80164b0:	e000      	b.n	80164b4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80164b2:	2300      	movs	r3, #0
    }
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	2000226c 	.word	0x2000226c

080164bc <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b08e      	sub	sp, #56	; 0x38
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	607b      	str	r3, [r7, #4]
 80164c6:	460b      	mov	r3, r1
 80164c8:	817b      	strh	r3, [r7, #10]
 80164ca:	4613      	mov	r3, r2
 80164cc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d101      	bne.n	80164d8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164d4:	230a      	movs	r3, #10
 80164d6:	e086      	b.n	80165e6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80164d8:	2300      	movs	r3, #0
 80164da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80164de:	2301      	movs	r3, #1
 80164e0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80164e2:	2300      	movs	r3, #0
 80164e4:	623b      	str	r3, [r7, #32]
 80164e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164ea:	2200      	movs	r2, #0
 80164ec:	601a      	str	r2, [r3, #0]
 80164ee:	605a      	str	r2, [r3, #4]
 80164f0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80164f2:	2300      	movs	r3, #0
 80164f4:	613b      	str	r3, [r7, #16]
 80164f6:	f107 0314 	add.w	r3, r7, #20
 80164fa:	2200      	movs	r2, #0
 80164fc:	601a      	str	r2, [r3, #0]
 80164fe:	605a      	str	r2, [r3, #4]
 8016500:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8016502:	2301      	movs	r3, #1
 8016504:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8016506:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801650a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	b2db      	uxtb	r3, r3
 8016510:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	0a1b      	lsrs	r3, r3, #8
 8016516:	b2db      	uxtb	r3, r3
 8016518:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	0c1b      	lsrs	r3, r3, #16
 801651e:	b2db      	uxtb	r3, r3
 8016520:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	0e1b      	lsrs	r3, r3, #24
 8016526:	b2db      	uxtb	r3, r3
 8016528:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801652a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801652c:	b2db      	uxtb	r3, r3
 801652e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016532:	0a1b      	lsrs	r3, r3, #8
 8016534:	b2db      	uxtb	r3, r3
 8016536:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801653a:	0c1b      	lsrs	r3, r3, #16
 801653c:	b2db      	uxtb	r3, r3
 801653e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016542:	0e1b      	lsrs	r3, r3, #24
 8016544:	b2db      	uxtb	r3, r3
 8016546:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016548:	e048      	b.n	80165dc <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801654a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801654c:	b2db      	uxtb	r3, r3
 801654e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016550:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016552:	3301      	adds	r3, #1
 8016554:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016556:	f107 0320 	add.w	r3, r7, #32
 801655a:	7a7a      	ldrb	r2, [r7, #9]
 801655c:	f107 0010 	add.w	r0, r7, #16
 8016560:	2110      	movs	r1, #16
 8016562:	f7f9 f842 	bl	800f5ea <SecureElementAesEncrypt>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	d001      	beq.n	8016570 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801656c:	230f      	movs	r3, #15
 801656e:	e03a      	b.n	80165e6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016570:	2300      	movs	r3, #0
 8016572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016576:	e01e      	b.n	80165b6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016578:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801657c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016580:	4413      	add	r3, r2
 8016582:	461a      	mov	r2, r3
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	4413      	add	r3, r2
 8016588:	7819      	ldrb	r1, [r3, #0]
 801658a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801658e:	3338      	adds	r3, #56	; 0x38
 8016590:	443b      	add	r3, r7
 8016592:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016596:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801659a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801659e:	4403      	add	r3, r0
 80165a0:	4618      	mov	r0, r3
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	4403      	add	r3, r0
 80165a6:	404a      	eors	r2, r1
 80165a8:	b2d2      	uxtb	r2, r2
 80165aa:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80165ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80165b0:	3301      	adds	r3, #1
 80165b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80165b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80165ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80165be:	2a10      	cmp	r2, #16
 80165c0:	bfa8      	it	ge
 80165c2:	2210      	movge	r2, #16
 80165c4:	b212      	sxth	r2, r2
 80165c6:	4293      	cmp	r3, r2
 80165c8:	dbd6      	blt.n	8016578 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80165ca:	897b      	ldrh	r3, [r7, #10]
 80165cc:	3b10      	subs	r3, #16
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80165d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80165d6:	3310      	adds	r3, #16
 80165d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80165dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	dcb2      	bgt.n	801654a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165e4:	2300      	movs	r3, #0
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3738      	adds	r7, #56	; 0x38
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80165ee:	b490      	push	{r4, r7}
 80165f0:	b082      	sub	sp, #8
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	4604      	mov	r4, r0
 80165f6:	4608      	mov	r0, r1
 80165f8:	4611      	mov	r1, r2
 80165fa:	461a      	mov	r2, r3
 80165fc:	4623      	mov	r3, r4
 80165fe:	80fb      	strh	r3, [r7, #6]
 8016600:	4603      	mov	r3, r0
 8016602:	717b      	strb	r3, [r7, #5]
 8016604:	460b      	mov	r3, r1
 8016606:	713b      	strb	r3, [r7, #4]
 8016608:	4613      	mov	r3, r2
 801660a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801660c:	69bb      	ldr	r3, [r7, #24]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d101      	bne.n	8016616 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016612:	230a      	movs	r3, #10
 8016614:	e04e      	b.n	80166b4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016616:	69bb      	ldr	r3, [r7, #24]
 8016618:	2249      	movs	r2, #73	; 0x49
 801661a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801661c:	69bb      	ldr	r3, [r7, #24]
 801661e:	3301      	adds	r3, #1
 8016620:	2200      	movs	r2, #0
 8016622:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016624:	69bb      	ldr	r3, [r7, #24]
 8016626:	3302      	adds	r3, #2
 8016628:	2200      	movs	r2, #0
 801662a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	3303      	adds	r3, #3
 8016630:	2200      	movs	r2, #0
 8016632:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016634:	69bb      	ldr	r3, [r7, #24]
 8016636:	3304      	adds	r3, #4
 8016638:	2200      	movs	r2, #0
 801663a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801663c:	69bb      	ldr	r3, [r7, #24]
 801663e:	3305      	adds	r3, #5
 8016640:	78fa      	ldrb	r2, [r7, #3]
 8016642:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016644:	69bb      	ldr	r3, [r7, #24]
 8016646:	3306      	adds	r3, #6
 8016648:	693a      	ldr	r2, [r7, #16]
 801664a:	b2d2      	uxtb	r2, r2
 801664c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	0a1a      	lsrs	r2, r3, #8
 8016652:	69bb      	ldr	r3, [r7, #24]
 8016654:	3307      	adds	r3, #7
 8016656:	b2d2      	uxtb	r2, r2
 8016658:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	0c1a      	lsrs	r2, r3, #16
 801665e:	69bb      	ldr	r3, [r7, #24]
 8016660:	3308      	adds	r3, #8
 8016662:	b2d2      	uxtb	r2, r2
 8016664:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016666:	693b      	ldr	r3, [r7, #16]
 8016668:	0e1a      	lsrs	r2, r3, #24
 801666a:	69bb      	ldr	r3, [r7, #24]
 801666c:	3309      	adds	r3, #9
 801666e:	b2d2      	uxtb	r2, r2
 8016670:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8016672:	69bb      	ldr	r3, [r7, #24]
 8016674:	330a      	adds	r3, #10
 8016676:	697a      	ldr	r2, [r7, #20]
 8016678:	b2d2      	uxtb	r2, r2
 801667a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	0a1a      	lsrs	r2, r3, #8
 8016680:	69bb      	ldr	r3, [r7, #24]
 8016682:	330b      	adds	r3, #11
 8016684:	b2d2      	uxtb	r2, r2
 8016686:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	0c1a      	lsrs	r2, r3, #16
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	330c      	adds	r3, #12
 8016690:	b2d2      	uxtb	r2, r2
 8016692:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	0e1a      	lsrs	r2, r3, #24
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	330d      	adds	r3, #13
 801669c:	b2d2      	uxtb	r2, r2
 801669e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80166a0:	69bb      	ldr	r3, [r7, #24]
 80166a2:	330e      	adds	r3, #14
 80166a4:	2200      	movs	r2, #0
 80166a6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	330f      	adds	r3, #15
 80166ac:	88fa      	ldrh	r2, [r7, #6]
 80166ae:	b2d2      	uxtb	r2, r2
 80166b0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80166b2:	2300      	movs	r3, #0
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bc90      	pop	{r4, r7}
 80166bc:	4770      	bx	lr

080166be <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80166be:	b590      	push	{r4, r7, lr}
 80166c0:	b08b      	sub	sp, #44	; 0x2c
 80166c2:	af04      	add	r7, sp, #16
 80166c4:	6078      	str	r0, [r7, #4]
 80166c6:	4608      	mov	r0, r1
 80166c8:	4611      	mov	r1, r2
 80166ca:	461a      	mov	r2, r3
 80166cc:	4603      	mov	r3, r0
 80166ce:	807b      	strh	r3, [r7, #2]
 80166d0:	460b      	mov	r3, r1
 80166d2:	707b      	strb	r3, [r7, #1]
 80166d4:	4613      	mov	r3, r2
 80166d6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d002      	beq.n	80166e4 <ComputeCmacB0+0x26>
 80166de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d101      	bne.n	80166e8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80166e4:	230a      	movs	r3, #10
 80166e6:	e024      	b.n	8016732 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80166e8:	887b      	ldrh	r3, [r7, #2]
 80166ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166ee:	d901      	bls.n	80166f4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80166f0:	230e      	movs	r3, #14
 80166f2:	e01e      	b.n	8016732 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166f4:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80166f8:	783a      	ldrb	r2, [r7, #0]
 80166fa:	7879      	ldrb	r1, [r7, #1]
 80166fc:	8878      	ldrh	r0, [r7, #2]
 80166fe:	f107 0308 	add.w	r3, r7, #8
 8016702:	9302      	str	r3, [sp, #8]
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	9301      	str	r3, [sp, #4]
 8016708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	4623      	mov	r3, r4
 801670e:	f7ff ff6e 	bl	80165ee <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016712:	7879      	ldrb	r1, [r7, #1]
 8016714:	887a      	ldrh	r2, [r7, #2]
 8016716:	f107 0008 	add.w	r0, r7, #8
 801671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	460b      	mov	r3, r1
 8016720:	6879      	ldr	r1, [r7, #4]
 8016722:	f7f8 ff15 	bl	800f550 <SecureElementComputeAesCmac>
 8016726:	4603      	mov	r3, r0
 8016728:	2b00      	cmp	r3, #0
 801672a:	d001      	beq.n	8016730 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801672c:	230f      	movs	r3, #15
 801672e:	e000      	b.n	8016732 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016730:	2300      	movs	r3, #0
}
 8016732:	4618      	mov	r0, r3
 8016734:	371c      	adds	r7, #28
 8016736:	46bd      	mov	sp, r7
 8016738:	bd90      	pop	{r4, r7, pc}

0801673a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801673a:	b590      	push	{r4, r7, lr}
 801673c:	b0cd      	sub	sp, #308	; 0x134
 801673e:	af04      	add	r7, sp, #16
 8016740:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016744:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016748:	6020      	str	r0, [r4, #0]
 801674a:	460c      	mov	r4, r1
 801674c:	4610      	mov	r0, r2
 801674e:	4619      	mov	r1, r3
 8016750:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016754:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016758:	4622      	mov	r2, r4
 801675a:	801a      	strh	r2, [r3, #0]
 801675c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016760:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016764:	4602      	mov	r2, r0
 8016766:	701a      	strb	r2, [r3, #0]
 8016768:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801676c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016770:	460a      	mov	r2, r1
 8016772:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016774:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016778:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d101      	bne.n	8016786 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016782:	230a      	movs	r3, #10
 8016784:	e063      	b.n	801684e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016786:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801678a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801678e:	881b      	ldrh	r3, [r3, #0]
 8016790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016794:	d901      	bls.n	801679a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016796:	230e      	movs	r3, #14
 8016798:	e059      	b.n	801684e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801679a:	f107 030c 	add.w	r3, r7, #12
 801679e:	f44f 7288 	mov.w	r2, #272	; 0x110
 80167a2:	2100      	movs	r1, #0
 80167a4:	4618      	mov	r0, r3
 80167a6:	f003 fbd7 	bl	8019f58 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80167aa:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80167ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80167b6:	781a      	ldrb	r2, [r3, #0]
 80167b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167bc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80167c0:	7819      	ldrb	r1, [r3, #0]
 80167c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167c6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80167ca:	8818      	ldrh	r0, [r3, #0]
 80167cc:	f107 030c 	add.w	r3, r7, #12
 80167d0:	9302      	str	r3, [sp, #8]
 80167d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80167d6:	9301      	str	r3, [sp, #4]
 80167d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80167dc:	9300      	str	r3, [sp, #0]
 80167de:	4623      	mov	r3, r4
 80167e0:	f7ff ff05 	bl	80165ee <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80167e4:	f107 030c 	add.w	r3, r7, #12
 80167e8:	3310      	adds	r3, #16
 80167ea:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80167ee:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80167f2:	8812      	ldrh	r2, [r2, #0]
 80167f4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80167f8:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80167fc:	6809      	ldr	r1, [r1, #0]
 80167fe:	4618      	mov	r0, r3
 8016800:	f003 fb6f 	bl	8019ee2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016804:	2306      	movs	r3, #6
 8016806:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801680a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801680e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016812:	881b      	ldrh	r3, [r3, #0]
 8016814:	3310      	adds	r3, #16
 8016816:	b299      	uxth	r1, r3
 8016818:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801681c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	f107 000c 	add.w	r0, r7, #12
 8016826:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801682a:	f7f8 feaf 	bl	800f58c <SecureElementVerifyAesCmac>
 801682e:	4603      	mov	r3, r0
 8016830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016838:	2b00      	cmp	r3, #0
 801683a:	d101      	bne.n	8016840 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801683c:	2300      	movs	r3, #0
 801683e:	e006      	b.n	801684e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016840:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016844:	2b01      	cmp	r3, #1
 8016846:	d101      	bne.n	801684c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016848:	2301      	movs	r3, #1
 801684a:	e000      	b.n	801684e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801684c:	230f      	movs	r3, #15
}
 801684e:	4618      	mov	r0, r3
 8016850:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016854:	46bd      	mov	sp, r7
 8016856:	bd90      	pop	{r4, r7, pc}

08016858 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016858:	b480      	push	{r7}
 801685a:	b085      	sub	sp, #20
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	6039      	str	r1, [r7, #0]
 8016862:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016864:	2300      	movs	r3, #0
 8016866:	73fb      	strb	r3, [r7, #15]
 8016868:	e011      	b.n	801688e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801686a:	7bfb      	ldrb	r3, [r7, #15]
 801686c:	4a0c      	ldr	r2, [pc, #48]	; (80168a0 <GetKeyAddrItem+0x48>)
 801686e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016872:	79fa      	ldrb	r2, [r7, #7]
 8016874:	429a      	cmp	r2, r3
 8016876:	d107      	bne.n	8016888 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016878:	7bfb      	ldrb	r3, [r7, #15]
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	4a08      	ldr	r2, [pc, #32]	; (80168a0 <GetKeyAddrItem+0x48>)
 801687e:	441a      	add	r2, r3
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016884:	2300      	movs	r3, #0
 8016886:	e006      	b.n	8016896 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016888:	7bfb      	ldrb	r3, [r7, #15]
 801688a:	3301      	adds	r3, #1
 801688c:	73fb      	strb	r3, [r7, #15]
 801688e:	7bfb      	ldrb	r3, [r7, #15]
 8016890:	2b01      	cmp	r3, #1
 8016892:	d9ea      	bls.n	801686a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016894:	230c      	movs	r3, #12
}
 8016896:	4618      	mov	r0, r3
 8016898:	3714      	adds	r7, #20
 801689a:	46bd      	mov	sp, r7
 801689c:	bc80      	pop	{r7}
 801689e:	4770      	bx	lr
 80168a0:	2000013c 	.word	0x2000013c

080168a4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b088      	sub	sp, #32
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60b9      	str	r1, [r7, #8]
 80168ac:	607a      	str	r2, [r7, #4]
 80168ae:	461a      	mov	r2, r3
 80168b0:	4603      	mov	r3, r0
 80168b2:	73fb      	strb	r3, [r7, #15]
 80168b4:	4613      	mov	r3, r2
 80168b6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80168b8:	2300      	movs	r3, #0
 80168ba:	613b      	str	r3, [r7, #16]
 80168bc:	f107 0314 	add.w	r3, r7, #20
 80168c0:	2200      	movs	r2, #0
 80168c2:	601a      	str	r2, [r3, #0]
 80168c4:	605a      	str	r2, [r3, #4]
 80168c6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80168c8:	7bfb      	ldrb	r3, [r7, #15]
 80168ca:	2b02      	cmp	r3, #2
 80168cc:	d002      	beq.n	80168d4 <DeriveSessionKey10x+0x30>
 80168ce:	2b03      	cmp	r3, #3
 80168d0:	d003      	beq.n	80168da <DeriveSessionKey10x+0x36>
 80168d2:	e005      	b.n	80168e0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80168d4:	2301      	movs	r3, #1
 80168d6:	743b      	strb	r3, [r7, #16]
            break;
 80168d8:	e004      	b.n	80168e4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80168da:	2302      	movs	r3, #2
 80168dc:	743b      	strb	r3, [r7, #16]
            break;
 80168de:	e001      	b.n	80168e4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80168e0:	230b      	movs	r3, #11
 80168e2:	e02a      	b.n	801693a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80168e4:	68bb      	ldr	r3, [r7, #8]
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	0a1b      	lsrs	r3, r3, #8
 80168ee:	b2db      	uxtb	r3, r3
 80168f0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	0c1b      	lsrs	r3, r3, #16
 80168f6:	b2db      	uxtb	r3, r3
 80168f8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	b2db      	uxtb	r3, r3
 80168fe:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	0a1b      	lsrs	r3, r3, #8
 8016904:	b2db      	uxtb	r3, r3
 8016906:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	0c1b      	lsrs	r3, r3, #16
 801690c:	b2db      	uxtb	r3, r3
 801690e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016910:	89bb      	ldrh	r3, [r7, #12]
 8016912:	b2db      	uxtb	r3, r3
 8016914:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016916:	89bb      	ldrh	r3, [r7, #12]
 8016918:	0a1b      	lsrs	r3, r3, #8
 801691a:	b29b      	uxth	r3, r3
 801691c:	b2db      	uxtb	r3, r3
 801691e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016920:	7bfa      	ldrb	r2, [r7, #15]
 8016922:	f107 0310 	add.w	r3, r7, #16
 8016926:	2101      	movs	r1, #1
 8016928:	4618      	mov	r0, r3
 801692a:	f7f8 fec5 	bl	800f6b8 <SecureElementDeriveAndStoreKey>
 801692e:	4603      	mov	r3, r0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d001      	beq.n	8016938 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016934:	230f      	movs	r3, #15
 8016936:	e000      	b.n	801693a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016938:	2300      	movs	r3, #0
}
 801693a:	4618      	mov	r0, r3
 801693c:	3720      	adds	r7, #32
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
	...

08016944 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
 801694a:	4603      	mov	r3, r0
 801694c:	6039      	str	r1, [r7, #0]
 801694e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d101      	bne.n	801695a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016956:	230a      	movs	r3, #10
 8016958:	e03b      	b.n	80169d2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801695a:	79fb      	ldrb	r3, [r7, #7]
 801695c:	3b01      	subs	r3, #1
 801695e:	2b03      	cmp	r3, #3
 8016960:	d834      	bhi.n	80169cc <GetLastFcntDown+0x88>
 8016962:	a201      	add	r2, pc, #4	; (adr r2, 8016968 <GetLastFcntDown+0x24>)
 8016964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016968:	08016979 	.word	0x08016979
 801696c:	08016991 	.word	0x08016991
 8016970:	080169a9 	.word	0x080169a9
 8016974:	080169c1 	.word	0x080169c1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016978:	4b18      	ldr	r3, [pc, #96]	; (80169dc <GetLastFcntDown+0x98>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	691a      	ldr	r2, [r3, #16]
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8016982:	4b16      	ldr	r3, [pc, #88]	; (80169dc <GetLastFcntDown+0x98>)
 8016984:	681a      	ldr	r2, [r3, #0]
 8016986:	4b15      	ldr	r3, [pc, #84]	; (80169dc <GetLastFcntDown+0x98>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	6912      	ldr	r2, [r2, #16]
 801698c:	621a      	str	r2, [r3, #32]
            break;
 801698e:	e01f      	b.n	80169d0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016990:	4b12      	ldr	r3, [pc, #72]	; (80169dc <GetLastFcntDown+0x98>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	695a      	ldr	r2, [r3, #20]
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801699a:	4b10      	ldr	r3, [pc, #64]	; (80169dc <GetLastFcntDown+0x98>)
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	4b0f      	ldr	r3, [pc, #60]	; (80169dc <GetLastFcntDown+0x98>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	6952      	ldr	r2, [r2, #20]
 80169a4:	621a      	str	r2, [r3, #32]
            break;
 80169a6:	e013      	b.n	80169d0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80169a8:	4b0c      	ldr	r3, [pc, #48]	; (80169dc <GetLastFcntDown+0x98>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	699a      	ldr	r2, [r3, #24]
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80169b2:	4b0a      	ldr	r3, [pc, #40]	; (80169dc <GetLastFcntDown+0x98>)
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	4b09      	ldr	r3, [pc, #36]	; (80169dc <GetLastFcntDown+0x98>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	6992      	ldr	r2, [r2, #24]
 80169bc:	621a      	str	r2, [r3, #32]
            break;
 80169be:	e007      	b.n	80169d0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80169c0:	4b06      	ldr	r3, [pc, #24]	; (80169dc <GetLastFcntDown+0x98>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	69da      	ldr	r2, [r3, #28]
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	601a      	str	r2, [r3, #0]
            break;
 80169ca:	e001      	b.n	80169d0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80169cc:	2305      	movs	r3, #5
 80169ce:	e000      	b.n	80169d2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80169d0:	2300      	movs	r3, #0
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	370c      	adds	r7, #12
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bc80      	pop	{r7}
 80169da:	4770      	bx	lr
 80169dc:	20002290 	.word	0x20002290

080169e0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b084      	sub	sp, #16
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	4603      	mov	r3, r0
 80169e8:	6039      	str	r1, [r7, #0]
 80169ea:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80169ec:	2300      	movs	r3, #0
 80169ee:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80169f0:	f107 020c 	add.w	r2, r7, #12
 80169f4:	79fb      	ldrb	r3, [r7, #7]
 80169f6:	4611      	mov	r1, r2
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7ff ffa3 	bl	8016944 <GetLastFcntDown>
 80169fe:	4603      	mov	r3, r0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d001      	beq.n	8016a08 <CheckFCntDown+0x28>
    {
        return false;
 8016a04:	2300      	movs	r3, #0
 8016a06:	e00a      	b.n	8016a1e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	683a      	ldr	r2, [r7, #0]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d803      	bhi.n	8016a18 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016a10:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a16:	d101      	bne.n	8016a1c <CheckFCntDown+0x3c>
    {
        return true;
 8016a18:	2301      	movs	r3, #1
 8016a1a:	e000      	b.n	8016a1e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016a1c:	2300      	movs	r3, #0
    }
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
	...

08016a28 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016a28:	b480      	push	{r7}
 8016a2a:	b083      	sub	sp, #12
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	4603      	mov	r3, r0
 8016a30:	6039      	str	r1, [r7, #0]
 8016a32:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016a34:	79fb      	ldrb	r3, [r7, #7]
 8016a36:	3b01      	subs	r3, #1
 8016a38:	2b03      	cmp	r3, #3
 8016a3a:	d81f      	bhi.n	8016a7c <UpdateFCntDown+0x54>
 8016a3c:	a201      	add	r2, pc, #4	; (adr r2, 8016a44 <UpdateFCntDown+0x1c>)
 8016a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a42:	bf00      	nop
 8016a44:	08016a55 	.word	0x08016a55
 8016a48:	08016a5f 	.word	0x08016a5f
 8016a4c:	08016a69 	.word	0x08016a69
 8016a50:	08016a73 	.word	0x08016a73
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016a54:	4b0c      	ldr	r3, [pc, #48]	; (8016a88 <UpdateFCntDown+0x60>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	683a      	ldr	r2, [r7, #0]
 8016a5a:	611a      	str	r2, [r3, #16]
            break;
 8016a5c:	e00f      	b.n	8016a7e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016a5e:	4b0a      	ldr	r3, [pc, #40]	; (8016a88 <UpdateFCntDown+0x60>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	683a      	ldr	r2, [r7, #0]
 8016a64:	615a      	str	r2, [r3, #20]
            break;
 8016a66:	e00a      	b.n	8016a7e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016a68:	4b07      	ldr	r3, [pc, #28]	; (8016a88 <UpdateFCntDown+0x60>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	683a      	ldr	r2, [r7, #0]
 8016a6e:	619a      	str	r2, [r3, #24]
            break;
 8016a70:	e005      	b.n	8016a7e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016a72:	4b05      	ldr	r3, [pc, #20]	; (8016a88 <UpdateFCntDown+0x60>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	61da      	str	r2, [r3, #28]
            break;
 8016a7a:	e000      	b.n	8016a7e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016a7c:	bf00      	nop
    }
}
 8016a7e:	bf00      	nop
 8016a80:	370c      	adds	r7, #12
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bc80      	pop	{r7}
 8016a86:	4770      	bx	lr
 8016a88:	20002290 	.word	0x20002290

08016a8c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016a92:	4b18      	ldr	r3, [pc, #96]	; (8016af4 <ResetFCnts+0x68>)
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	2200      	movs	r2, #0
 8016a98:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016a9a:	4b16      	ldr	r3, [pc, #88]	; (8016af4 <ResetFCnts+0x68>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8016aa2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016aa4:	4b13      	ldr	r3, [pc, #76]	; (8016af4 <ResetFCnts+0x68>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8016aac:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016aae:	4b11      	ldr	r3, [pc, #68]	; (8016af4 <ResetFCnts+0x68>)
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ab6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016ab8:	4b0e      	ldr	r3, [pc, #56]	; (8016af4 <ResetFCnts+0x68>)
 8016aba:	681a      	ldr	r2, [r3, #0]
 8016abc:	4b0d      	ldr	r3, [pc, #52]	; (8016af4 <ResetFCnts+0x68>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	6992      	ldr	r2, [r2, #24]
 8016ac2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	607b      	str	r3, [r7, #4]
 8016ac8:	e00b      	b.n	8016ae2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8016aca:	4b0a      	ldr	r3, [pc, #40]	; (8016af4 <ResetFCnts+0x68>)
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	3306      	adds	r3, #6
 8016ad2:	009b      	lsls	r3, r3, #2
 8016ad4:	4413      	add	r3, r2
 8016ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8016ada:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	3301      	adds	r3, #1
 8016ae0:	607b      	str	r3, [r7, #4]
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	ddf0      	ble.n	8016aca <ResetFCnts+0x3e>
    }
}
 8016ae8:	bf00      	nop
 8016aea:	bf00      	nop
 8016aec:	370c      	adds	r7, #12
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bc80      	pop	{r7}
 8016af2:	4770      	bx	lr
 8016af4:	20002290 	.word	0x20002290

08016af8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d101      	bne.n	8016b0a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016b06:	2309      	movs	r3, #9
 8016b08:	e01c      	b.n	8016b44 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016b0a:	4a10      	ldr	r2, [pc, #64]	; (8016b4c <LoRaMacCryptoInit+0x54>)
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016b10:	4b0e      	ldr	r3, [pc, #56]	; (8016b4c <LoRaMacCryptoInit+0x54>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2228      	movs	r2, #40	; 0x28
 8016b16:	2100      	movs	r1, #0
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f003 fa1d 	bl	8019f58 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016b1e:	4b0b      	ldr	r3, [pc, #44]	; (8016b4c <LoRaMacCryptoInit+0x54>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	2201      	movs	r2, #1
 8016b24:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016b26:	4b09      	ldr	r3, [pc, #36]	; (8016b4c <LoRaMacCryptoInit+0x54>)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	2201      	movs	r2, #1
 8016b2c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016b2e:	4b07      	ldr	r3, [pc, #28]	; (8016b4c <LoRaMacCryptoInit+0x54>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2201      	movs	r2, #1
 8016b34:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016b36:	4b05      	ldr	r3, [pc, #20]	; (8016b4c <LoRaMacCryptoInit+0x54>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016b3e:	f7ff ffa5 	bl	8016a8c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016b42:	2300      	movs	r3, #0
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	3708      	adds	r7, #8
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	20002290 	.word	0x20002290

08016b50 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016b58:	4b04      	ldr	r3, [pc, #16]	; (8016b6c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	687a      	ldr	r2, [r7, #4]
 8016b5e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016b60:	2300      	movs	r3, #0
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	370c      	adds	r7, #12
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bc80      	pop	{r7}
 8016b6a:	4770      	bx	lr
 8016b6c:	20002290 	.word	0x20002290

08016b70 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016b70:	b480      	push	{r7}
 8016b72:	b083      	sub	sp, #12
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d101      	bne.n	8016b82 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b7e:	230a      	movs	r3, #10
 8016b80:	e006      	b.n	8016b90 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016b82:	4b06      	ldr	r3, [pc, #24]	; (8016b9c <LoRaMacCryptoGetFCntUp+0x2c>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	1c5a      	adds	r2, r3, #1
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016b8e:	2300      	movs	r3, #0
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	370c      	adds	r7, #12
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bc80      	pop	{r7}
 8016b98:	4770      	bx	lr
 8016b9a:	bf00      	nop
 8016b9c:	20002290 	.word	0x20002290

08016ba0 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016ba4:	b08a      	sub	sp, #40	; 0x28
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	613a      	str	r2, [r7, #16]
 8016baa:	60fb      	str	r3, [r7, #12]
 8016bac:	4603      	mov	r3, r0
 8016bae:	75fb      	strb	r3, [r7, #23]
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016bbc:	2313      	movs	r3, #19
 8016bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d101      	bne.n	8016bcc <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016bc8:	230a      	movs	r3, #10
 8016bca:	e057      	b.n	8016c7c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016bcc:	f107 021c 	add.w	r2, r7, #28
 8016bd0:	7dfb      	ldrb	r3, [r7, #23]
 8016bd2:	4611      	mov	r1, r2
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7ff feb5 	bl	8016944 <GetLastFcntDown>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d002      	beq.n	8016bee <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016bec:	e046      	b.n	8016c7c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bf4:	d103      	bne.n	8016bfe <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	693a      	ldr	r2, [r7, #16]
 8016bfa:	601a      	str	r2, [r3, #0]
 8016bfc:	e01e      	b.n	8016c3c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	b29b      	uxth	r3, r3
 8016c02:	693a      	ldr	r2, [r7, #16]
 8016c04:	1ad3      	subs	r3, r2, r3
 8016c06:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	dd05      	ble.n	8016c1a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016c0e:	69fa      	ldr	r2, [r7, #28]
 8016c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c12:	441a      	add	r2, r3
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	601a      	str	r2, [r3, #0]
 8016c18:	e010      	b.n	8016c3c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d104      	bne.n	8016c2a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016c20:	69fa      	ldr	r2, [r7, #28]
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016c26:	2307      	movs	r3, #7
 8016c28:	e028      	b.n	8016c7c <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	0c1b      	lsrs	r3, r3, #16
 8016c2e:	041b      	lsls	r3, r3, #16
 8016c30:	693a      	ldr	r2, [r7, #16]
 8016c32:	4413      	add	r3, r2
 8016c34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016c3c:	4b12      	ldr	r3, [pc, #72]	; (8016c88 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	789b      	ldrb	r3, [r3, #2]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d119      	bne.n	8016c7a <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	603b      	str	r3, [r7, #0]
 8016c4e:	607a      	str	r2, [r7, #4]
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	2200      	movs	r2, #0
 8016c54:	469a      	mov	sl, r3
 8016c56:	4693      	mov	fp, r2
 8016c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c5c:	4611      	mov	r1, r2
 8016c5e:	ebb1 040a 	subs.w	r4, r1, sl
 8016c62:	eb63 050b 	sbc.w	r5, r3, fp
 8016c66:	8abb      	ldrh	r3, [r7, #20]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	4698      	mov	r8, r3
 8016c6c:	4691      	mov	r9, r2
 8016c6e:	4544      	cmp	r4, r8
 8016c70:	eb75 0309 	sbcs.w	r3, r5, r9
 8016c74:	db01      	blt.n	8016c7a <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016c76:	2308      	movs	r3, #8
 8016c78:	e000      	b.n	8016c7c <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c7a:	2300      	movs	r3, #0
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3728      	adds	r7, #40	; 0x28
 8016c80:	46bd      	mov	sp, r7
 8016c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016c86:	bf00      	nop
 8016c88:	20002290 	.word	0x20002290

08016c8c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d101      	bne.n	8016c9e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c9a:	230a      	movs	r3, #10
 8016c9c:	e017      	b.n	8016cce <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	60fb      	str	r3, [r7, #12]
 8016ca2:	e010      	b.n	8016cc6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016ca4:	4b0c      	ldr	r3, [pc, #48]	; (8016cd8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8016ca6:	6819      	ldr	r1, [r3, #0]
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	222c      	movs	r2, #44	; 0x2c
 8016cac:	fb02 f303 	mul.w	r3, r2, r3
 8016cb0:	687a      	ldr	r2, [r7, #4]
 8016cb2:	4413      	add	r3, r2
 8016cb4:	68fa      	ldr	r2, [r7, #12]
 8016cb6:	3206      	adds	r2, #6
 8016cb8:	0092      	lsls	r2, r2, #2
 8016cba:	440a      	add	r2, r1
 8016cbc:	3204      	adds	r2, #4
 8016cbe:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	60fb      	str	r3, [r7, #12]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	ddeb      	ble.n	8016ca4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016ccc:	2300      	movs	r3, #0
}
 8016cce:	4618      	mov	r0, r3
 8016cd0:	3714      	adds	r7, #20
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bc80      	pop	{r7}
 8016cd6:	4770      	bx	lr
 8016cd8:	20002290 	.word	0x20002290

08016cdc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	6039      	str	r1, [r7, #0]
 8016ce6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016ce8:	79fb      	ldrb	r3, [r7, #7]
 8016cea:	6839      	ldr	r1, [r7, #0]
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7f8 fbd1 	bl	800f494 <SecureElementSetKey>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d001      	beq.n	8016cfc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cf8:	230f      	movs	r3, #15
 8016cfa:	e018      	b.n	8016d2e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8016cfc:	79fb      	ldrb	r3, [r7, #7]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d114      	bne.n	8016d2c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8016d02:	4b0d      	ldr	r3, [pc, #52]	; (8016d38 <LoRaMacCryptoSetKey+0x5c>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	789b      	ldrb	r3, [r3, #2]
 8016d08:	79fa      	ldrb	r2, [r7, #7]
 8016d0a:	4611      	mov	r1, r2
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f000 fa3f 	bl	8017190 <LoRaMacCryptoDeriveMcRootKey>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d001      	beq.n	8016d1c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d18:	230f      	movs	r3, #15
 8016d1a:	e008      	b.n	8016d2e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016d1c:	2004      	movs	r0, #4
 8016d1e:	f000 fa62 	bl	80171e6 <LoRaMacCryptoDeriveMcKEKey>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d001      	beq.n	8016d2c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d28:	230f      	movs	r3, #15
 8016d2a:	e000      	b.n	8016d2e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016d2c:	2300      	movs	r3, #0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3708      	adds	r7, #8
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	20002290 	.word	0x20002290

08016d3c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b086      	sub	sp, #24
 8016d40:	af02      	add	r7, sp, #8
 8016d42:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d101      	bne.n	8016d4e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d4a:	230a      	movs	r3, #10
 8016d4c:	e033      	b.n	8016db6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016d4e:	2301      	movs	r3, #1
 8016d50:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016d52:	2300      	movs	r3, #0
 8016d54:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016d56:	f107 0308 	add.w	r3, r7, #8
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7f8 fd6a 	bl	800f834 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016d60:	68ba      	ldr	r2, [r7, #8]
 8016d62:	4b17      	ldr	r3, [pc, #92]	; (8016dc0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	b292      	uxth	r2, r2
 8016d68:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016d6a:	4b15      	ldr	r3, [pc, #84]	; (8016dc0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	889a      	ldrh	r2, [r3, #4]
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 fc18 	bl	80175aa <LoRaMacSerializerJoinRequest>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d001      	beq.n	8016d84 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016d80:	2311      	movs	r3, #17
 8016d82:	e018      	b.n	8016db6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	6819      	ldr	r1, [r3, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	3318      	adds	r3, #24
 8016d8c:	7bfa      	ldrb	r2, [r7, #15]
 8016d8e:	9300      	str	r3, [sp, #0]
 8016d90:	4613      	mov	r3, r2
 8016d92:	2213      	movs	r2, #19
 8016d94:	2000      	movs	r0, #0
 8016d96:	f7f8 fbdb 	bl	800f550 <SecureElementComputeAesCmac>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d001      	beq.n	8016da4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016da0:	230f      	movs	r3, #15
 8016da2:	e008      	b.n	8016db6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	f000 fc00 	bl	80175aa <LoRaMacSerializerJoinRequest>
 8016daa:	4603      	mov	r3, r0
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d001      	beq.n	8016db4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016db0:	2311      	movs	r3, #17
 8016db2:	e000      	b.n	8016db6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016db4:	2300      	movs	r3, #0
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3710      	adds	r7, #16
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	20002290 	.word	0x20002290

08016dc4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016dc4:	b590      	push	{r4, r7, lr}
 8016dc6:	b097      	sub	sp, #92	; 0x5c
 8016dc8:	af04      	add	r7, sp, #16
 8016dca:	4603      	mov	r3, r0
 8016dcc:	60b9      	str	r1, [r7, #8]
 8016dce:	607a      	str	r2, [r7, #4]
 8016dd0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d002      	beq.n	8016dde <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d101      	bne.n	8016de2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016dde:	230a      	movs	r3, #10
 8016de0:	e0bd      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016de2:	2313      	movs	r3, #19
 8016de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016de8:	2300      	movs	r3, #0
 8016dea:	61bb      	str	r3, [r7, #24]
 8016dec:	f107 031c 	add.w	r3, r7, #28
 8016df0:	221d      	movs	r2, #29
 8016df2:	2100      	movs	r1, #0
 8016df4:	4618      	mov	r0, r3
 8016df6:	f007 fe65 	bl	801eac4 <memset>
    uint8_t versionMinor         = 0;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016dfe:	4b5a      	ldr	r3, [pc, #360]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	889b      	ldrh	r3, [r3, #4]
 8016e04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681c      	ldr	r4, [r3, #0]
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	791b      	ldrb	r3, [r3, #4]
 8016e10:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016e14:	7bf8      	ldrb	r0, [r7, #15]
 8016e16:	f107 0217 	add.w	r2, r7, #23
 8016e1a:	9202      	str	r2, [sp, #8]
 8016e1c:	f107 0218 	add.w	r2, r7, #24
 8016e20:	9201      	str	r2, [sp, #4]
 8016e22:	9300      	str	r3, [sp, #0]
 8016e24:	4623      	mov	r3, r4
 8016e26:	460a      	mov	r2, r1
 8016e28:	68b9      	ldr	r1, [r7, #8]
 8016e2a:	f7f8 fc85 	bl	800f738 <SecureElementProcessJoinAccept>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d001      	beq.n	8016e38 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016e34:	230f      	movs	r3, #15
 8016e36:	e092      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6818      	ldr	r0, [r3, #0]
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	791b      	ldrb	r3, [r3, #4]
 8016e40:	b29a      	uxth	r2, r3
 8016e42:	f107 0318 	add.w	r3, r7, #24
 8016e46:	4619      	mov	r1, r3
 8016e48:	f003 f84b 	bl	8019ee2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	f000 f9ed 	bl	801722c <LoRaMacParserJoinAccept>
 8016e52:	4603      	mov	r3, r0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d001      	beq.n	8016e5c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016e58:	2310      	movs	r3, #16
 8016e5a:	e080      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	799b      	ldrb	r3, [r3, #6]
 8016e60:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	79db      	ldrb	r3, [r3, #7]
 8016e66:	021b      	lsls	r3, r3, #8
 8016e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016e6a:	4313      	orrs	r3, r2
 8016e6c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	7a1b      	ldrb	r3, [r3, #8]
 8016e72:	041b      	lsls	r3, r3, #16
 8016e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016e76:	4313      	orrs	r3, r2
 8016e78:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8016e7a:	4b3b      	ldr	r3, [pc, #236]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	689b      	ldr	r3, [r3, #8]
 8016e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d010      	beq.n	8016ea8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016e86:	4b38      	ldr	r3, [pc, #224]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016e8c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8016e8e:	7dfb      	ldrb	r3, [r7, #23]
 8016e90:	2100      	movs	r1, #0
 8016e92:	4618      	mov	r0, r3
 8016e94:	f000 f97c 	bl	8017190 <LoRaMacCryptoDeriveMcRootKey>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d005      	beq.n	8016eb2 <LoRaMacCryptoHandleJoinAccept+0xee>
 8016ea6:	e001      	b.n	8016eac <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016ea8:	2303      	movs	r3, #3
 8016eaa:	e058      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8016eac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016eb0:	e055      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016eb2:	2004      	movs	r0, #4
 8016eb4:	f000 f997 	bl	80171e6 <LoRaMacCryptoDeriveMcKEKey>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ebe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d002      	beq.n	8016ecc <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8016ec6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016eca:	e048      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	7a5b      	ldrb	r3, [r3, #9]
 8016ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	7a9b      	ldrb	r3, [r3, #10]
 8016ed6:	021b      	lsls	r3, r3, #8
 8016ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016eda:	4313      	orrs	r3, r2
 8016edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	7adb      	ldrb	r3, [r3, #11]
 8016ee2:	041b      	lsls	r3, r3, #16
 8016ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ee6:	4313      	orrs	r3, r2
 8016ee8:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016eea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016ef2:	2003      	movs	r0, #3
 8016ef4:	f7ff fcd6 	bl	80168a4 <DeriveSessionKey10x>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d002      	beq.n	8016f0c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8016f06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016f0a:	e028      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016f0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f14:	2002      	movs	r0, #2
 8016f16:	f7ff fcc5 	bl	80168a4 <DeriveSessionKey10x>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d002      	beq.n	8016f2e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8016f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016f2c:	e017      	b.n	8016f5e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016f2e:	4b0e      	ldr	r3, [pc, #56]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	7dfa      	ldrb	r2, [r7, #23]
 8016f34:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8016f36:	4b0c      	ldr	r3, [pc, #48]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016f3e:	4b0a      	ldr	r3, [pc, #40]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	f04f 32ff 	mov.w	r2, #4294967295
 8016f46:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016f48:	4b07      	ldr	r3, [pc, #28]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f50:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016f52:	4b05      	ldr	r3, [pc, #20]	; (8016f68 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f04f 32ff 	mov.w	r2, #4294967295
 8016f5a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f5c:	2300      	movs	r3, #0
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	374c      	adds	r7, #76	; 0x4c
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd90      	pop	{r4, r7, pc}
 8016f66:	bf00      	nop
 8016f68:	20002290 	.word	0x20002290

08016f6c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016f6c:	b590      	push	{r4, r7, lr}
 8016f6e:	b08b      	sub	sp, #44	; 0x2c
 8016f70:	af04      	add	r7, sp, #16
 8016f72:	60f8      	str	r0, [r7, #12]
 8016f74:	607b      	str	r3, [r7, #4]
 8016f76:	460b      	mov	r3, r1
 8016f78:	72fb      	strb	r3, [r7, #11]
 8016f7a:	4613      	mov	r3, r2
 8016f7c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016f7e:	2313      	movs	r3, #19
 8016f80:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016f82:	2303      	movs	r3, #3
 8016f84:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d101      	bne.n	8016f90 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f8c:	230a      	movs	r3, #10
 8016f8e:	e05f      	b.n	8017050 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016f90:	4b31      	ldr	r3, [pc, #196]	; (8017058 <LoRaMacCryptoSecureMessage+0xec>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	68db      	ldr	r3, [r3, #12]
 8016f96:	68fa      	ldr	r2, [r7, #12]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d201      	bcs.n	8016fa0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016f9c:	2306      	movs	r3, #6
 8016f9e:	e057      	b.n	8017050 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d101      	bne.n	8016fae <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016faa:	2302      	movs	r3, #2
 8016fac:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016fae:	4b2a      	ldr	r3, [pc, #168]	; (8017058 <LoRaMacCryptoSecureMessage+0xec>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	68fa      	ldr	r2, [r7, #12]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d916      	bls.n	8016fe8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016fc4:	b219      	sxth	r1, r3
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	689c      	ldr	r4, [r3, #8]
 8016fca:	7dfa      	ldrb	r2, [r7, #23]
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	9301      	str	r3, [sp, #4]
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	4623      	mov	r3, r4
 8016fd6:	f7ff fa71 	bl	80164bc <PayloadEncrypt>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016fde:	7dbb      	ldrb	r3, [r7, #22]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d001      	beq.n	8016fe8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016fe4:	7dbb      	ldrb	r3, [r7, #22]
 8016fe6:	e033      	b.n	8017050 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	f000 fb60 	bl	80176ae <LoRaMacSerializerData>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d001      	beq.n	8016ff8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ff4:	2311      	movs	r3, #17
 8016ff6:	e02b      	b.n	8017050 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016ff8:	2302      	movs	r3, #2
 8016ffa:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	6818      	ldr	r0, [r3, #0]
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	791b      	ldrb	r3, [r3, #4]
 8017004:	b29b      	uxth	r3, r3
 8017006:	3b04      	subs	r3, #4
 8017008:	b299      	uxth	r1, r3
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	689b      	ldr	r3, [r3, #8]
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	322c      	adds	r2, #44	; 0x2c
 8017012:	7dfc      	ldrb	r4, [r7, #23]
 8017014:	9203      	str	r2, [sp, #12]
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	9202      	str	r2, [sp, #8]
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	2300      	movs	r3, #0
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	2300      	movs	r3, #0
 8017022:	4622      	mov	r2, r4
 8017024:	f7ff fb4b 	bl	80166be <ComputeCmacB0>
 8017028:	4603      	mov	r3, r0
 801702a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801702c:	7dbb      	ldrb	r3, [r7, #22]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d001      	beq.n	8017036 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8017032:	7dbb      	ldrb	r3, [r7, #22]
 8017034:	e00c      	b.n	8017050 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f000 fb39 	bl	80176ae <LoRaMacSerializerData>
 801703c:	4603      	mov	r3, r0
 801703e:	2b00      	cmp	r3, #0
 8017040:	d001      	beq.n	8017046 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017042:	2311      	movs	r3, #17
 8017044:	e004      	b.n	8017050 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8017046:	4b04      	ldr	r3, [pc, #16]	; (8017058 <LoRaMacCryptoSecureMessage+0xec>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	68fa      	ldr	r2, [r7, #12]
 801704c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	371c      	adds	r7, #28
 8017054:	46bd      	mov	sp, r7
 8017056:	bd90      	pop	{r4, r7, pc}
 8017058:	20002290 	.word	0x20002290

0801705c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801705c:	b590      	push	{r4, r7, lr}
 801705e:	b08b      	sub	sp, #44	; 0x2c
 8017060:	af04      	add	r7, sp, #16
 8017062:	60b9      	str	r1, [r7, #8]
 8017064:	607b      	str	r3, [r7, #4]
 8017066:	4603      	mov	r3, r0
 8017068:	73fb      	strb	r3, [r7, #15]
 801706a:	4613      	mov	r3, r2
 801706c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017070:	2b00      	cmp	r3, #0
 8017072:	d101      	bne.n	8017078 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017074:	230a      	movs	r3, #10
 8017076:	e084      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8017078:	7bbb      	ldrb	r3, [r7, #14]
 801707a:	6879      	ldr	r1, [r7, #4]
 801707c:	4618      	mov	r0, r3
 801707e:	f7ff fcaf 	bl	80169e0 <CheckFCntDown>
 8017082:	4603      	mov	r3, r0
 8017084:	f083 0301 	eor.w	r3, r3, #1
 8017088:	b2db      	uxtb	r3, r3
 801708a:	2b00      	cmp	r3, #0
 801708c:	d001      	beq.n	8017092 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801708e:	2306      	movs	r3, #6
 8017090:	e077      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8017092:	2313      	movs	r3, #19
 8017094:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8017096:	2303      	movs	r3, #3
 8017098:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801709a:	2302      	movs	r3, #2
 801709c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801709e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170a0:	f000 f98f 	bl	80173c2 <LoRaMacParserData>
 80170a4:	4603      	mov	r3, r0
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d001      	beq.n	80170ae <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80170aa:	2310      	movs	r3, #16
 80170ac:	e069      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80170ae:	f107 0210 	add.w	r2, r7, #16
 80170b2:	7bfb      	ldrb	r3, [r7, #15]
 80170b4:	4611      	mov	r1, r2
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7ff fbce 	bl	8016858 <GetKeyAddrItem>
 80170bc:	4603      	mov	r3, r0
 80170be:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170c0:	7d7b      	ldrb	r3, [r7, #21]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d001      	beq.n	80170ca <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80170c6:	7d7b      	ldrb	r3, [r7, #21]
 80170c8:	e05b      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80170ca:	693b      	ldr	r3, [r7, #16]
 80170cc:	785b      	ldrb	r3, [r3, #1]
 80170ce:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80170d0:	693b      	ldr	r3, [r7, #16]
 80170d2:	789b      	ldrb	r3, [r3, #2]
 80170d4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80170d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d8:	689b      	ldr	r3, [r3, #8]
 80170da:	68ba      	ldr	r2, [r7, #8]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d001      	beq.n	80170e4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80170e0:	2302      	movs	r3, #2
 80170e2:	e04e      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80170e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e6:	7b1b      	ldrb	r3, [r3, #12]
 80170e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80170ec:	b2db      	uxtb	r3, r3
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	bf14      	ite	ne
 80170f2:	2301      	movne	r3, #1
 80170f4:	2300      	moveq	r3, #0
 80170f6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80170f8:	4b24      	ldr	r3, [pc, #144]	; (801718c <LoRaMacCryptoUnsecureMessage+0x130>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	789b      	ldrb	r3, [r3, #2]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d101      	bne.n	8017106 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8017102:	2300      	movs	r3, #0
 8017104:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8017106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017108:	6818      	ldr	r0, [r3, #0]
 801710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710c:	791b      	ldrb	r3, [r3, #4]
 801710e:	b29b      	uxth	r3, r3
 8017110:	3b04      	subs	r3, #4
 8017112:	b299      	uxth	r1, r3
 8017114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017118:	7dbc      	ldrb	r4, [r7, #22]
 801711a:	7d3a      	ldrb	r2, [r7, #20]
 801711c:	9303      	str	r3, [sp, #12]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	9302      	str	r3, [sp, #8]
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	9301      	str	r3, [sp, #4]
 8017126:	2301      	movs	r3, #1
 8017128:	9300      	str	r3, [sp, #0]
 801712a:	4623      	mov	r3, r4
 801712c:	f7ff fb05 	bl	801673a <VerifyCmacB0>
 8017130:	4603      	mov	r3, r0
 8017132:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017134:	7d7b      	ldrb	r3, [r7, #21]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d001      	beq.n	801713e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801713a:	7d7b      	ldrb	r3, [r7, #21]
 801713c:	e021      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d101      	bne.n	801714c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8017148:	2302      	movs	r3, #2
 801714a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017156:	b219      	sxth	r1, r3
 8017158:	7dfa      	ldrb	r2, [r7, #23]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	9301      	str	r3, [sp, #4]
 801715e:	2301      	movs	r3, #1
 8017160:	9300      	str	r3, [sp, #0]
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	f7ff f9aa 	bl	80164bc <PayloadEncrypt>
 8017168:	4603      	mov	r3, r0
 801716a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801716c:	7d7b      	ldrb	r3, [r7, #21]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d001      	beq.n	8017176 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8017172:	7d7b      	ldrb	r3, [r7, #21]
 8017174:	e005      	b.n	8017182 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8017176:	7bbb      	ldrb	r3, [r7, #14]
 8017178:	6879      	ldr	r1, [r7, #4]
 801717a:	4618      	mov	r0, r3
 801717c:	f7ff fc54 	bl	8016a28 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017180:	2300      	movs	r3, #0
}
 8017182:	4618      	mov	r0, r3
 8017184:	371c      	adds	r7, #28
 8017186:	46bd      	mov	sp, r7
 8017188:	bd90      	pop	{r4, r7, pc}
 801718a:	bf00      	nop
 801718c:	20002290 	.word	0x20002290

08017190 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b086      	sub	sp, #24
 8017194:	af00      	add	r7, sp, #0
 8017196:	4603      	mov	r3, r0
 8017198:	460a      	mov	r2, r1
 801719a:	71fb      	strb	r3, [r7, #7]
 801719c:	4613      	mov	r3, r2
 801719e:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80171a0:	79bb      	ldrb	r3, [r7, #6]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d001      	beq.n	80171aa <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80171a6:	230b      	movs	r3, #11
 80171a8:	e019      	b.n	80171de <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80171aa:	2300      	movs	r3, #0
 80171ac:	60bb      	str	r3, [r7, #8]
 80171ae:	f107 030c 	add.w	r3, r7, #12
 80171b2:	2200      	movs	r2, #0
 80171b4:	601a      	str	r2, [r3, #0]
 80171b6:	605a      	str	r2, [r3, #4]
 80171b8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80171ba:	79fb      	ldrb	r3, [r7, #7]
 80171bc:	2b01      	cmp	r3, #1
 80171be:	d101      	bne.n	80171c4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80171c0:	2320      	movs	r3, #32
 80171c2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80171c4:	79b9      	ldrb	r1, [r7, #6]
 80171c6:	f107 0308 	add.w	r3, r7, #8
 80171ca:	2204      	movs	r2, #4
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7f8 fa73 	bl	800f6b8 <SecureElementDeriveAndStoreKey>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d001      	beq.n	80171dc <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80171d8:	230f      	movs	r3, #15
 80171da:	e000      	b.n	80171de <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80171dc:	2300      	movs	r3, #0
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3718      	adds	r7, #24
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}

080171e6 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80171e6:	b580      	push	{r7, lr}
 80171e8:	b086      	sub	sp, #24
 80171ea:	af00      	add	r7, sp, #0
 80171ec:	4603      	mov	r3, r0
 80171ee:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80171f0:	79fb      	ldrb	r3, [r7, #7]
 80171f2:	2b04      	cmp	r3, #4
 80171f4:	d001      	beq.n	80171fa <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80171f6:	230b      	movs	r3, #11
 80171f8:	e014      	b.n	8017224 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80171fa:	2300      	movs	r3, #0
 80171fc:	60bb      	str	r3, [r7, #8]
 80171fe:	f107 030c 	add.w	r3, r7, #12
 8017202:	2200      	movs	r2, #0
 8017204:	601a      	str	r2, [r3, #0]
 8017206:	605a      	str	r2, [r3, #4]
 8017208:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801720a:	79f9      	ldrb	r1, [r7, #7]
 801720c:	f107 0308 	add.w	r3, r7, #8
 8017210:	227f      	movs	r2, #127	; 0x7f
 8017212:	4618      	mov	r0, r3
 8017214:	f7f8 fa50 	bl	800f6b8 <SecureElementDeriveAndStoreKey>
 8017218:	4603      	mov	r3, r0
 801721a:	2b00      	cmp	r3, #0
 801721c:	d001      	beq.n	8017222 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801721e:	230f      	movs	r3, #15
 8017220:	e000      	b.n	8017224 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017222:	2300      	movs	r3, #0
}
 8017224:	4618      	mov	r0, r3
 8017226:	3718      	adds	r7, #24
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}

0801722c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b084      	sub	sp, #16
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d003      	beq.n	8017242 <LoRaMacParserJoinAccept+0x16>
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d101      	bne.n	8017246 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017242:	2302      	movs	r3, #2
 8017244:	e0b9      	b.n	80173ba <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017246:	2300      	movs	r3, #0
 8017248:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	89fb      	ldrh	r3, [r7, #14]
 8017250:	1c59      	adds	r1, r3, #1
 8017252:	81f9      	strh	r1, [r7, #14]
 8017254:	4413      	add	r3, r2
 8017256:	781a      	ldrb	r2, [r3, #0]
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	1d98      	adds	r0, r3, #6
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681a      	ldr	r2, [r3, #0]
 8017264:	89fb      	ldrh	r3, [r7, #14]
 8017266:	4413      	add	r3, r2
 8017268:	2203      	movs	r2, #3
 801726a:	4619      	mov	r1, r3
 801726c:	f002 fe39 	bl	8019ee2 <memcpy1>
    bufItr = bufItr + 3;
 8017270:	89fb      	ldrh	r3, [r7, #14]
 8017272:	3303      	adds	r3, #3
 8017274:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f103 0009 	add.w	r0, r3, #9
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	89fb      	ldrh	r3, [r7, #14]
 8017282:	4413      	add	r3, r2
 8017284:	2203      	movs	r2, #3
 8017286:	4619      	mov	r1, r3
 8017288:	f002 fe2b 	bl	8019ee2 <memcpy1>
    bufItr = bufItr + 3;
 801728c:	89fb      	ldrh	r3, [r7, #14]
 801728e:	3303      	adds	r3, #3
 8017290:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	89fb      	ldrh	r3, [r7, #14]
 8017298:	1c59      	adds	r1, r3, #1
 801729a:	81f9      	strh	r1, [r7, #14]
 801729c:	4413      	add	r3, r2
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	461a      	mov	r2, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	89fb      	ldrh	r3, [r7, #14]
 80172ac:	1c59      	adds	r1, r3, #1
 80172ae:	81f9      	strh	r1, [r7, #14]
 80172b0:	4413      	add	r3, r2
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	021a      	lsls	r2, r3, #8
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	68db      	ldr	r3, [r3, #12]
 80172ba:	431a      	orrs	r2, r3
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	89fb      	ldrh	r3, [r7, #14]
 80172c6:	1c59      	adds	r1, r3, #1
 80172c8:	81f9      	strh	r1, [r7, #14]
 80172ca:	4413      	add	r3, r2
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	041a      	lsls	r2, r3, #16
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	68db      	ldr	r3, [r3, #12]
 80172d4:	431a      	orrs	r2, r3
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	89fb      	ldrh	r3, [r7, #14]
 80172e0:	1c59      	adds	r1, r3, #1
 80172e2:	81f9      	strh	r1, [r7, #14]
 80172e4:	4413      	add	r3, r2
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	061a      	lsls	r2, r3, #24
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	68db      	ldr	r3, [r3, #12]
 80172ee:	431a      	orrs	r2, r3
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	681a      	ldr	r2, [r3, #0]
 80172f8:	89fb      	ldrh	r3, [r7, #14]
 80172fa:	1c59      	adds	r1, r3, #1
 80172fc:	81f9      	strh	r1, [r7, #14]
 80172fe:	4413      	add	r3, r2
 8017300:	781a      	ldrb	r2, [r3, #0]
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	89fb      	ldrh	r3, [r7, #14]
 801730c:	1c59      	adds	r1, r3, #1
 801730e:	81f9      	strh	r1, [r7, #14]
 8017310:	4413      	add	r3, r2
 8017312:	781a      	ldrb	r2, [r3, #0]
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	791b      	ldrb	r3, [r3, #4]
 801731c:	1f1a      	subs	r2, r3, #4
 801731e:	89fb      	ldrh	r3, [r7, #14]
 8017320:	1ad3      	subs	r3, r2, r3
 8017322:	2b10      	cmp	r3, #16
 8017324:	d10e      	bne.n	8017344 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	f103 0012 	add.w	r0, r3, #18
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681a      	ldr	r2, [r3, #0]
 8017330:	89fb      	ldrh	r3, [r7, #14]
 8017332:	4413      	add	r3, r2
 8017334:	2210      	movs	r2, #16
 8017336:	4619      	mov	r1, r3
 8017338:	f002 fdd3 	bl	8019ee2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801733c:	89fb      	ldrh	r3, [r7, #14]
 801733e:	3310      	adds	r3, #16
 8017340:	81fb      	strh	r3, [r7, #14]
 8017342:	e008      	b.n	8017356 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	791b      	ldrb	r3, [r3, #4]
 8017348:	1f1a      	subs	r2, r3, #4
 801734a:	89fb      	ldrh	r3, [r7, #14]
 801734c:	1ad3      	subs	r3, r2, r3
 801734e:	2b00      	cmp	r3, #0
 8017350:	dd01      	ble.n	8017356 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017352:	2301      	movs	r3, #1
 8017354:	e031      	b.n	80173ba <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681a      	ldr	r2, [r3, #0]
 801735a:	89fb      	ldrh	r3, [r7, #14]
 801735c:	1c59      	adds	r1, r3, #1
 801735e:	81f9      	strh	r1, [r7, #14]
 8017360:	4413      	add	r3, r2
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	461a      	mov	r2, r3
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681a      	ldr	r2, [r3, #0]
 801736e:	89fb      	ldrh	r3, [r7, #14]
 8017370:	1c59      	adds	r1, r3, #1
 8017372:	81f9      	strh	r1, [r7, #14]
 8017374:	4413      	add	r3, r2
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	021a      	lsls	r2, r3, #8
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801737e:	431a      	orrs	r2, r3
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	89fb      	ldrh	r3, [r7, #14]
 801738a:	1c59      	adds	r1, r3, #1
 801738c:	81f9      	strh	r1, [r7, #14]
 801738e:	4413      	add	r3, r2
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	041a      	lsls	r2, r3, #16
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017398:	431a      	orrs	r2, r3
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681a      	ldr	r2, [r3, #0]
 80173a2:	89fb      	ldrh	r3, [r7, #14]
 80173a4:	1c59      	adds	r1, r3, #1
 80173a6:	81f9      	strh	r1, [r7, #14]
 80173a8:	4413      	add	r3, r2
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	061a      	lsls	r2, r3, #24
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173b2:	431a      	orrs	r2, r3
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80173b8:	2300      	movs	r3, #0
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3710      	adds	r7, #16
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}

080173c2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b084      	sub	sp, #16
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d003      	beq.n	80173d8 <LoRaMacParserData+0x16>
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d101      	bne.n	80173dc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80173d8:	2302      	movs	r3, #2
 80173da:	e0e2      	b.n	80175a2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80173dc:	2300      	movs	r3, #0
 80173de:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681a      	ldr	r2, [r3, #0]
 80173e4:	89fb      	ldrh	r3, [r7, #14]
 80173e6:	1c59      	adds	r1, r3, #1
 80173e8:	81f9      	strh	r1, [r7, #14]
 80173ea:	4413      	add	r3, r2
 80173ec:	781a      	ldrb	r2, [r3, #0]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	89fb      	ldrh	r3, [r7, #14]
 80173f8:	1c59      	adds	r1, r3, #1
 80173fa:	81f9      	strh	r1, [r7, #14]
 80173fc:	4413      	add	r3, r2
 80173fe:	781b      	ldrb	r3, [r3, #0]
 8017400:	461a      	mov	r2, r3
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681a      	ldr	r2, [r3, #0]
 801740a:	89fb      	ldrh	r3, [r7, #14]
 801740c:	1c59      	adds	r1, r3, #1
 801740e:	81f9      	strh	r1, [r7, #14]
 8017410:	4413      	add	r3, r2
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	021a      	lsls	r2, r3, #8
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	689b      	ldr	r3, [r3, #8]
 801741a:	431a      	orrs	r2, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681a      	ldr	r2, [r3, #0]
 8017424:	89fb      	ldrh	r3, [r7, #14]
 8017426:	1c59      	adds	r1, r3, #1
 8017428:	81f9      	strh	r1, [r7, #14]
 801742a:	4413      	add	r3, r2
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	041a      	lsls	r2, r3, #16
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	689b      	ldr	r3, [r3, #8]
 8017434:	431a      	orrs	r2, r3
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681a      	ldr	r2, [r3, #0]
 801743e:	89fb      	ldrh	r3, [r7, #14]
 8017440:	1c59      	adds	r1, r3, #1
 8017442:	81f9      	strh	r1, [r7, #14]
 8017444:	4413      	add	r3, r2
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	061a      	lsls	r2, r3, #24
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	689b      	ldr	r3, [r3, #8]
 801744e:	431a      	orrs	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	89fb      	ldrh	r3, [r7, #14]
 801745a:	1c59      	adds	r1, r3, #1
 801745c:	81f9      	strh	r1, [r7, #14]
 801745e:	4413      	add	r3, r2
 8017460:	781a      	ldrb	r2, [r3, #0]
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	89fb      	ldrh	r3, [r7, #14]
 801746c:	1c59      	adds	r1, r3, #1
 801746e:	81f9      	strh	r1, [r7, #14]
 8017470:	4413      	add	r3, r2
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	b29a      	uxth	r2, r3
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	89fb      	ldrh	r3, [r7, #14]
 8017480:	1c59      	adds	r1, r3, #1
 8017482:	81f9      	strh	r1, [r7, #14]
 8017484:	4413      	add	r3, r2
 8017486:	781b      	ldrb	r3, [r3, #0]
 8017488:	0219      	lsls	r1, r3, #8
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	89db      	ldrh	r3, [r3, #14]
 801748e:	b21a      	sxth	r2, r3
 8017490:	b20b      	sxth	r3, r1
 8017492:	4313      	orrs	r3, r2
 8017494:	b21b      	sxth	r3, r3
 8017496:	b29a      	uxth	r2, r3
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f103 0010 	add.w	r0, r3, #16
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681a      	ldr	r2, [r3, #0]
 80174a6:	89fb      	ldrh	r3, [r7, #14]
 80174a8:	18d1      	adds	r1, r2, r3
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	7b1b      	ldrb	r3, [r3, #12]
 80174ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80174b2:	b2db      	uxtb	r3, r3
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	461a      	mov	r2, r3
 80174b8:	f002 fd13 	bl	8019ee2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	7b1b      	ldrb	r3, [r3, #12]
 80174c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80174c4:	b2db      	uxtb	r3, r3
 80174c6:	b29a      	uxth	r2, r3
 80174c8:	89fb      	ldrh	r3, [r7, #14]
 80174ca:	4413      	add	r3, r2
 80174cc:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2200      	movs	r2, #0
 80174d2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2200      	movs	r2, #0
 80174da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	791b      	ldrb	r3, [r3, #4]
 80174e2:	461a      	mov	r2, r3
 80174e4:	89fb      	ldrh	r3, [r7, #14]
 80174e6:	1ad3      	subs	r3, r2, r3
 80174e8:	2b04      	cmp	r3, #4
 80174ea:	dd28      	ble.n	801753e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681a      	ldr	r2, [r3, #0]
 80174f0:	89fb      	ldrh	r3, [r7, #14]
 80174f2:	1c59      	adds	r1, r3, #1
 80174f4:	81f9      	strh	r1, [r7, #14]
 80174f6:	4413      	add	r3, r2
 80174f8:	781a      	ldrb	r2, [r3, #0]
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	791a      	ldrb	r2, [r3, #4]
 8017504:	89fb      	ldrh	r3, [r7, #14]
 8017506:	b2db      	uxtb	r3, r3
 8017508:	1ad3      	subs	r3, r2, r3
 801750a:	b2db      	uxtb	r3, r3
 801750c:	3b04      	subs	r3, #4
 801750e:	b2da      	uxtb	r2, r3
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681a      	ldr	r2, [r3, #0]
 801751e:	89fb      	ldrh	r3, [r7, #14]
 8017520:	18d1      	adds	r1, r2, r3
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017528:	b29b      	uxth	r3, r3
 801752a:	461a      	mov	r2, r3
 801752c:	f002 fcd9 	bl	8019ee2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017536:	b29a      	uxth	r2, r3
 8017538:	89fb      	ldrh	r3, [r7, #14]
 801753a:	4413      	add	r3, r2
 801753c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681a      	ldr	r2, [r3, #0]
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	791b      	ldrb	r3, [r3, #4]
 8017546:	3b04      	subs	r3, #4
 8017548:	4413      	add	r3, r2
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	461a      	mov	r2, r3
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6819      	ldr	r1, [r3, #0]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	791b      	ldrb	r3, [r3, #4]
 801755e:	3b03      	subs	r3, #3
 8017560:	440b      	add	r3, r1
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	021b      	lsls	r3, r3, #8
 8017566:	431a      	orrs	r2, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	6819      	ldr	r1, [r3, #0]
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	791b      	ldrb	r3, [r3, #4]
 8017578:	3b02      	subs	r3, #2
 801757a:	440b      	add	r3, r1
 801757c:	781b      	ldrb	r3, [r3, #0]
 801757e:	041b      	lsls	r3, r3, #16
 8017580:	431a      	orrs	r2, r3
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6819      	ldr	r1, [r3, #0]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	791b      	ldrb	r3, [r3, #4]
 8017592:	3b01      	subs	r3, #1
 8017594:	440b      	add	r3, r1
 8017596:	781b      	ldrb	r3, [r3, #0]
 8017598:	061b      	lsls	r3, r3, #24
 801759a:	431a      	orrs	r2, r3
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80175a0:	2300      	movs	r3, #0
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3710      	adds	r7, #16
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}

080175aa <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80175aa:	b580      	push	{r7, lr}
 80175ac:	b084      	sub	sp, #16
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d003      	beq.n	80175c0 <LoRaMacSerializerJoinRequest+0x16>
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d101      	bne.n	80175c4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80175c0:	2301      	movs	r3, #1
 80175c2:	e070      	b.n	80176a6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80175c4:	2300      	movs	r3, #0
 80175c6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	791b      	ldrb	r3, [r3, #4]
 80175cc:	2b16      	cmp	r3, #22
 80175ce:	d801      	bhi.n	80175d4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80175d0:	2302      	movs	r3, #2
 80175d2:	e068      	b.n	80176a6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	89fb      	ldrh	r3, [r7, #14]
 80175da:	1c59      	adds	r1, r3, #1
 80175dc:	81f9      	strh	r1, [r7, #14]
 80175de:	4413      	add	r3, r2
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	7952      	ldrb	r2, [r2, #5]
 80175e4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681a      	ldr	r2, [r3, #0]
 80175ea:	89fb      	ldrh	r3, [r7, #14]
 80175ec:	18d0      	adds	r0, r2, r3
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	3306      	adds	r3, #6
 80175f2:	2208      	movs	r2, #8
 80175f4:	4619      	mov	r1, r3
 80175f6:	f002 fc8f 	bl	8019f18 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80175fa:	89fb      	ldrh	r3, [r7, #14]
 80175fc:	3308      	adds	r3, #8
 80175fe:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681a      	ldr	r2, [r3, #0]
 8017604:	89fb      	ldrh	r3, [r7, #14]
 8017606:	18d0      	adds	r0, r2, r3
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	330e      	adds	r3, #14
 801760c:	2208      	movs	r2, #8
 801760e:	4619      	mov	r1, r3
 8017610:	f002 fc82 	bl	8019f18 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017614:	89fb      	ldrh	r3, [r7, #14]
 8017616:	3308      	adds	r3, #8
 8017618:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	8ad9      	ldrh	r1, [r3, #22]
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681a      	ldr	r2, [r3, #0]
 8017622:	89fb      	ldrh	r3, [r7, #14]
 8017624:	1c58      	adds	r0, r3, #1
 8017626:	81f8      	strh	r0, [r7, #14]
 8017628:	4413      	add	r3, r2
 801762a:	b2ca      	uxtb	r2, r1
 801762c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	8adb      	ldrh	r3, [r3, #22]
 8017632:	0a1b      	lsrs	r3, r3, #8
 8017634:	b299      	uxth	r1, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	89fb      	ldrh	r3, [r7, #14]
 801763c:	1c58      	adds	r0, r3, #1
 801763e:	81f8      	strh	r0, [r7, #14]
 8017640:	4413      	add	r3, r2
 8017642:	b2ca      	uxtb	r2, r1
 8017644:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	6999      	ldr	r1, [r3, #24]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681a      	ldr	r2, [r3, #0]
 801764e:	89fb      	ldrh	r3, [r7, #14]
 8017650:	1c58      	adds	r0, r3, #1
 8017652:	81f8      	strh	r0, [r7, #14]
 8017654:	4413      	add	r3, r2
 8017656:	b2ca      	uxtb	r2, r1
 8017658:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	699b      	ldr	r3, [r3, #24]
 801765e:	0a19      	lsrs	r1, r3, #8
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	89fb      	ldrh	r3, [r7, #14]
 8017666:	1c58      	adds	r0, r3, #1
 8017668:	81f8      	strh	r0, [r7, #14]
 801766a:	4413      	add	r3, r2
 801766c:	b2ca      	uxtb	r2, r1
 801766e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	699b      	ldr	r3, [r3, #24]
 8017674:	0c19      	lsrs	r1, r3, #16
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	681a      	ldr	r2, [r3, #0]
 801767a:	89fb      	ldrh	r3, [r7, #14]
 801767c:	1c58      	adds	r0, r3, #1
 801767e:	81f8      	strh	r0, [r7, #14]
 8017680:	4413      	add	r3, r2
 8017682:	b2ca      	uxtb	r2, r1
 8017684:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	699b      	ldr	r3, [r3, #24]
 801768a:	0e19      	lsrs	r1, r3, #24
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681a      	ldr	r2, [r3, #0]
 8017690:	89fb      	ldrh	r3, [r7, #14]
 8017692:	1c58      	adds	r0, r3, #1
 8017694:	81f8      	strh	r0, [r7, #14]
 8017696:	4413      	add	r3, r2
 8017698:	b2ca      	uxtb	r2, r1
 801769a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801769c:	89fb      	ldrh	r3, [r7, #14]
 801769e:	b2da      	uxtb	r2, r3
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80176a4:	2300      	movs	r3, #0
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3710      	adds	r7, #16
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}

080176ae <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80176ae:	b580      	push	{r7, lr}
 80176b0:	b084      	sub	sp, #16
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d003      	beq.n	80176c4 <LoRaMacSerializerData+0x16>
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d101      	bne.n	80176c8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80176c4:	2301      	movs	r3, #1
 80176c6:	e0e5      	b.n	8017894 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80176c8:	2300      	movs	r3, #0
 80176ca:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80176cc:	2308      	movs	r3, #8
 80176ce:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	7b1b      	ldrb	r3, [r3, #12]
 80176d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	b29a      	uxth	r2, r3
 80176dc:	89bb      	ldrh	r3, [r7, #12]
 80176de:	4413      	add	r3, r2
 80176e0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d002      	beq.n	80176f2 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80176ec:	89bb      	ldrh	r3, [r7, #12]
 80176ee:	3301      	adds	r3, #1
 80176f0:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	89bb      	ldrh	r3, [r7, #12]
 80176fc:	4413      	add	r3, r2
 80176fe:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017700:	89bb      	ldrh	r3, [r7, #12]
 8017702:	3304      	adds	r3, #4
 8017704:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	791b      	ldrb	r3, [r3, #4]
 801770a:	b29b      	uxth	r3, r3
 801770c:	89ba      	ldrh	r2, [r7, #12]
 801770e:	429a      	cmp	r2, r3
 8017710:	d901      	bls.n	8017716 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017712:	2302      	movs	r3, #2
 8017714:	e0be      	b.n	8017894 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	89fb      	ldrh	r3, [r7, #14]
 801771c:	1c59      	adds	r1, r3, #1
 801771e:	81f9      	strh	r1, [r7, #14]
 8017720:	4413      	add	r3, r2
 8017722:	687a      	ldr	r2, [r7, #4]
 8017724:	7952      	ldrb	r2, [r2, #5]
 8017726:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6899      	ldr	r1, [r3, #8]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	89fb      	ldrh	r3, [r7, #14]
 8017732:	1c58      	adds	r0, r3, #1
 8017734:	81f8      	strh	r0, [r7, #14]
 8017736:	4413      	add	r3, r2
 8017738:	b2ca      	uxtb	r2, r1
 801773a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	689b      	ldr	r3, [r3, #8]
 8017740:	0a19      	lsrs	r1, r3, #8
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681a      	ldr	r2, [r3, #0]
 8017746:	89fb      	ldrh	r3, [r7, #14]
 8017748:	1c58      	adds	r0, r3, #1
 801774a:	81f8      	strh	r0, [r7, #14]
 801774c:	4413      	add	r3, r2
 801774e:	b2ca      	uxtb	r2, r1
 8017750:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	689b      	ldr	r3, [r3, #8]
 8017756:	0c19      	lsrs	r1, r3, #16
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681a      	ldr	r2, [r3, #0]
 801775c:	89fb      	ldrh	r3, [r7, #14]
 801775e:	1c58      	adds	r0, r3, #1
 8017760:	81f8      	strh	r0, [r7, #14]
 8017762:	4413      	add	r3, r2
 8017764:	b2ca      	uxtb	r2, r1
 8017766:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	689b      	ldr	r3, [r3, #8]
 801776c:	0e19      	lsrs	r1, r3, #24
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	89fb      	ldrh	r3, [r7, #14]
 8017774:	1c58      	adds	r0, r3, #1
 8017776:	81f8      	strh	r0, [r7, #14]
 8017778:	4413      	add	r3, r2
 801777a:	b2ca      	uxtb	r2, r1
 801777c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681a      	ldr	r2, [r3, #0]
 8017782:	89fb      	ldrh	r3, [r7, #14]
 8017784:	1c59      	adds	r1, r3, #1
 8017786:	81f9      	strh	r1, [r7, #14]
 8017788:	4413      	add	r3, r2
 801778a:	687a      	ldr	r2, [r7, #4]
 801778c:	7b12      	ldrb	r2, [r2, #12]
 801778e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	89d9      	ldrh	r1, [r3, #14]
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681a      	ldr	r2, [r3, #0]
 8017798:	89fb      	ldrh	r3, [r7, #14]
 801779a:	1c58      	adds	r0, r3, #1
 801779c:	81f8      	strh	r0, [r7, #14]
 801779e:	4413      	add	r3, r2
 80177a0:	b2ca      	uxtb	r2, r1
 80177a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	89db      	ldrh	r3, [r3, #14]
 80177a8:	0a1b      	lsrs	r3, r3, #8
 80177aa:	b299      	uxth	r1, r3
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	89fb      	ldrh	r3, [r7, #14]
 80177b2:	1c58      	adds	r0, r3, #1
 80177b4:	81f8      	strh	r0, [r7, #14]
 80177b6:	4413      	add	r3, r2
 80177b8:	b2ca      	uxtb	r2, r1
 80177ba:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681a      	ldr	r2, [r3, #0]
 80177c0:	89fb      	ldrh	r3, [r7, #14]
 80177c2:	18d0      	adds	r0, r2, r3
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f103 0110 	add.w	r1, r3, #16
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	7b1b      	ldrb	r3, [r3, #12]
 80177ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80177d2:	b2db      	uxtb	r3, r3
 80177d4:	b29b      	uxth	r3, r3
 80177d6:	461a      	mov	r2, r3
 80177d8:	f002 fb83 	bl	8019ee2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	7b1b      	ldrb	r3, [r3, #12]
 80177e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80177e4:	b2db      	uxtb	r3, r3
 80177e6:	b29a      	uxth	r2, r3
 80177e8:	89fb      	ldrh	r3, [r7, #14]
 80177ea:	4413      	add	r3, r2
 80177ec:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d009      	beq.n	801780c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	89fb      	ldrh	r3, [r7, #14]
 80177fe:	1c59      	adds	r1, r3, #1
 8017800:	81f9      	strh	r1, [r7, #14]
 8017802:	4413      	add	r3, r2
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	f892 2020 	ldrb.w	r2, [r2, #32]
 801780a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681a      	ldr	r2, [r3, #0]
 8017810:	89fb      	ldrh	r3, [r7, #14]
 8017812:	18d0      	adds	r0, r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801781e:	b29b      	uxth	r3, r3
 8017820:	461a      	mov	r2, r3
 8017822:	f002 fb5e 	bl	8019ee2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801782c:	b29a      	uxth	r2, r3
 801782e:	89fb      	ldrh	r3, [r7, #14]
 8017830:	4413      	add	r3, r2
 8017832:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681a      	ldr	r2, [r3, #0]
 801783c:	89fb      	ldrh	r3, [r7, #14]
 801783e:	1c58      	adds	r0, r3, #1
 8017840:	81f8      	strh	r0, [r7, #14]
 8017842:	4413      	add	r3, r2
 8017844:	b2ca      	uxtb	r2, r1
 8017846:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801784c:	0a19      	lsrs	r1, r3, #8
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681a      	ldr	r2, [r3, #0]
 8017852:	89fb      	ldrh	r3, [r7, #14]
 8017854:	1c58      	adds	r0, r3, #1
 8017856:	81f8      	strh	r0, [r7, #14]
 8017858:	4413      	add	r3, r2
 801785a:	b2ca      	uxtb	r2, r1
 801785c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017862:	0c19      	lsrs	r1, r3, #16
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	89fb      	ldrh	r3, [r7, #14]
 801786a:	1c58      	adds	r0, r3, #1
 801786c:	81f8      	strh	r0, [r7, #14]
 801786e:	4413      	add	r3, r2
 8017870:	b2ca      	uxtb	r2, r1
 8017872:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017878:	0e19      	lsrs	r1, r3, #24
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	681a      	ldr	r2, [r3, #0]
 801787e:	89fb      	ldrh	r3, [r7, #14]
 8017880:	1c58      	adds	r0, r3, #1
 8017882:	81f8      	strh	r0, [r7, #14]
 8017884:	4413      	add	r3, r2
 8017886:	b2ca      	uxtb	r2, r1
 8017888:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801788a:	89fb      	ldrh	r3, [r7, #14]
 801788c:	b2da      	uxtb	r2, r3
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017892:	2300      	movs	r3, #0
}
 8017894:	4618      	mov	r0, r3
 8017896:	3710      	adds	r7, #16
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}

0801789c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801789c:	b480      	push	{r7}
 801789e:	b083      	sub	sp, #12
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	4603      	mov	r3, r0
 80178a4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178a6:	79fb      	ldrb	r3, [r7, #7]
 80178a8:	2b05      	cmp	r3, #5
 80178aa:	d101      	bne.n	80178b0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80178ac:	2301      	movs	r3, #1
 80178ae:	e000      	b.n	80178b2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80178b0:	2300      	movs	r3, #0
        }
    }
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	370c      	adds	r7, #12
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bc80      	pop	{r7}
 80178ba:	4770      	bx	lr

080178bc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b084      	sub	sp, #16
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	4603      	mov	r3, r0
 80178c4:	6039      	str	r1, [r7, #0]
 80178c6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80178c8:	2300      	movs	r3, #0
 80178ca:	60bb      	str	r3, [r7, #8]
    switch( region )
 80178cc:	79fb      	ldrb	r3, [r7, #7]
 80178ce:	2b05      	cmp	r3, #5
 80178d0:	d105      	bne.n	80178de <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80178d2:	6838      	ldr	r0, [r7, #0]
 80178d4:	f001 f994 	bl	8018c00 <RegionEU868GetPhyParam>
 80178d8:	4603      	mov	r3, r0
 80178da:	60fb      	str	r3, [r7, #12]
 80178dc:	e001      	b.n	80178e2 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	4618      	mov	r0, r3
 80178e6:	3710      	adds	r7, #16
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}

080178ec <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b082      	sub	sp, #8
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	4603      	mov	r3, r0
 80178f4:	6039      	str	r1, [r7, #0]
 80178f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178f8:	79fb      	ldrb	r3, [r7, #7]
 80178fa:	2b05      	cmp	r3, #5
 80178fc:	d103      	bne.n	8017906 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80178fe:	6838      	ldr	r0, [r7, #0]
 8017900:	f001 faca 	bl	8018e98 <RegionEU868SetBandTxDone>
 8017904:	e000      	b.n	8017908 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017906:	bf00      	nop
        }
    }
}
 8017908:	3708      	adds	r7, #8
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}

0801790e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801790e:	b580      	push	{r7, lr}
 8017910:	b082      	sub	sp, #8
 8017912:	af00      	add	r7, sp, #0
 8017914:	4603      	mov	r3, r0
 8017916:	6039      	str	r1, [r7, #0]
 8017918:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801791a:	79fb      	ldrb	r3, [r7, #7]
 801791c:	2b05      	cmp	r3, #5
 801791e:	d103      	bne.n	8017928 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017920:	6838      	ldr	r0, [r7, #0]
 8017922:	f001 fae5 	bl	8018ef0 <RegionEU868InitDefaults>
 8017926:	e000      	b.n	801792a <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8017928:	bf00      	nop
        }
    }
}
 801792a:	bf00      	nop
 801792c:	3708      	adds	r7, #8
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017932:	b580      	push	{r7, lr}
 8017934:	b082      	sub	sp, #8
 8017936:	af00      	add	r7, sp, #0
 8017938:	4603      	mov	r3, r0
 801793a:	6039      	str	r1, [r7, #0]
 801793c:	71fb      	strb	r3, [r7, #7]
 801793e:	4613      	mov	r3, r2
 8017940:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017942:	79fb      	ldrb	r3, [r7, #7]
 8017944:	2b05      	cmp	r3, #5
 8017946:	d106      	bne.n	8017956 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017948:	79bb      	ldrb	r3, [r7, #6]
 801794a:	4619      	mov	r1, r3
 801794c:	6838      	ldr	r0, [r7, #0]
 801794e:	f001 fb6d 	bl	801902c <RegionEU868Verify>
 8017952:	4603      	mov	r3, r0
 8017954:	e000      	b.n	8017958 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017956:	2300      	movs	r3, #0
        }
    }
}
 8017958:	4618      	mov	r0, r3
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	4603      	mov	r3, r0
 8017968:	6039      	str	r1, [r7, #0]
 801796a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801796c:	79fb      	ldrb	r3, [r7, #7]
 801796e:	2b05      	cmp	r3, #5
 8017970:	d103      	bne.n	801797a <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017972:	6838      	ldr	r0, [r7, #0]
 8017974:	f001 fbd6 	bl	8019124 <RegionEU868ApplyCFList>
 8017978:	e000      	b.n	801797c <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801797a:	bf00      	nop
        }
    }
}
 801797c:	bf00      	nop
 801797e:	3708      	adds	r7, #8
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b082      	sub	sp, #8
 8017988:	af00      	add	r7, sp, #0
 801798a:	4603      	mov	r3, r0
 801798c:	6039      	str	r1, [r7, #0]
 801798e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017990:	79fb      	ldrb	r3, [r7, #7]
 8017992:	2b05      	cmp	r3, #5
 8017994:	d104      	bne.n	80179a0 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017996:	6838      	ldr	r0, [r7, #0]
 8017998:	f001 fc38 	bl	801920c <RegionEU868ChanMaskSet>
 801799c:	4603      	mov	r3, r0
 801799e:	e000      	b.n	80179a2 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80179a0:	2300      	movs	r3, #0
        }
    }
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3708      	adds	r7, #8
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}

080179aa <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b082      	sub	sp, #8
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	603b      	str	r3, [r7, #0]
 80179b2:	4603      	mov	r3, r0
 80179b4:	71fb      	strb	r3, [r7, #7]
 80179b6:	460b      	mov	r3, r1
 80179b8:	71bb      	strb	r3, [r7, #6]
 80179ba:	4613      	mov	r3, r2
 80179bc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80179be:	79fb      	ldrb	r3, [r7, #7]
 80179c0:	2b05      	cmp	r3, #5
 80179c2:	d107      	bne.n	80179d4 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80179c4:	7979      	ldrb	r1, [r7, #5]
 80179c6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	683a      	ldr	r2, [r7, #0]
 80179ce:	f001 fc47 	bl	8019260 <RegionEU868ComputeRxWindowParameters>
 80179d2:	e000      	b.n	80179d6 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80179d4:	bf00      	nop
        }
    }
}
 80179d6:	bf00      	nop
 80179d8:	3708      	adds	r7, #8
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}

080179de <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80179de:	b580      	push	{r7, lr}
 80179e0:	b084      	sub	sp, #16
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	4603      	mov	r3, r0
 80179e6:	60b9      	str	r1, [r7, #8]
 80179e8:	607a      	str	r2, [r7, #4]
 80179ea:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179ec:	7bfb      	ldrb	r3, [r7, #15]
 80179ee:	2b05      	cmp	r3, #5
 80179f0:	d105      	bne.n	80179fe <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80179f2:	6879      	ldr	r1, [r7, #4]
 80179f4:	68b8      	ldr	r0, [r7, #8]
 80179f6:	f001 fc8d 	bl	8019314 <RegionEU868RxConfig>
 80179fa:	4603      	mov	r3, r0
 80179fc:	e000      	b.n	8017a00 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80179fe:	2300      	movs	r3, #0
        }
    }
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3710      	adds	r7, #16
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	60b9      	str	r1, [r7, #8]
 8017a10:	607a      	str	r2, [r7, #4]
 8017a12:	603b      	str	r3, [r7, #0]
 8017a14:	4603      	mov	r3, r0
 8017a16:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a18:	7bfb      	ldrb	r3, [r7, #15]
 8017a1a:	2b05      	cmp	r3, #5
 8017a1c:	d106      	bne.n	8017a2c <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017a1e:	683a      	ldr	r2, [r7, #0]
 8017a20:	6879      	ldr	r1, [r7, #4]
 8017a22:	68b8      	ldr	r0, [r7, #8]
 8017a24:	f001 fd46 	bl	80194b4 <RegionEU868TxConfig>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	e000      	b.n	8017a2e <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017a2c:	2300      	movs	r3, #0
        }
    }
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3710      	adds	r7, #16
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}

08017a36 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017a36:	b580      	push	{r7, lr}
 8017a38:	b086      	sub	sp, #24
 8017a3a:	af02      	add	r7, sp, #8
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
 8017a40:	603b      	str	r3, [r7, #0]
 8017a42:	4603      	mov	r3, r0
 8017a44:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a46:	7bfb      	ldrb	r3, [r7, #15]
 8017a48:	2b05      	cmp	r3, #5
 8017a4a:	d109      	bne.n	8017a60 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017a4c:	69fb      	ldr	r3, [r7, #28]
 8017a4e:	9300      	str	r3, [sp, #0]
 8017a50:	69bb      	ldr	r3, [r7, #24]
 8017a52:	683a      	ldr	r2, [r7, #0]
 8017a54:	6879      	ldr	r1, [r7, #4]
 8017a56:	68b8      	ldr	r0, [r7, #8]
 8017a58:	f001 fdfc 	bl	8019654 <RegionEU868LinkAdrReq>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	e000      	b.n	8017a62 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017a60:	2300      	movs	r3, #0
        }
    }
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3710      	adds	r7, #16
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}

08017a6a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017a6a:	b580      	push	{r7, lr}
 8017a6c:	b082      	sub	sp, #8
 8017a6e:	af00      	add	r7, sp, #0
 8017a70:	4603      	mov	r3, r0
 8017a72:	6039      	str	r1, [r7, #0]
 8017a74:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a76:	79fb      	ldrb	r3, [r7, #7]
 8017a78:	2b05      	cmp	r3, #5
 8017a7a:	d104      	bne.n	8017a86 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017a7c:	6838      	ldr	r0, [r7, #0]
 8017a7e:	f001 ff0b 	bl	8019898 <RegionEU868RxParamSetupReq>
 8017a82:	4603      	mov	r3, r0
 8017a84:	e000      	b.n	8017a88 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017a86:	2300      	movs	r3, #0
        }
    }
}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	4603      	mov	r3, r0
 8017a98:	6039      	str	r1, [r7, #0]
 8017a9a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a9c:	79fb      	ldrb	r3, [r7, #7]
 8017a9e:	2b05      	cmp	r3, #5
 8017aa0:	d104      	bne.n	8017aac <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017aa2:	6838      	ldr	r0, [r7, #0]
 8017aa4:	f001 ff36 	bl	8019914 <RegionEU868NewChannelReq>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	e000      	b.n	8017aae <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017aac:	2300      	movs	r3, #0
        }
    }
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}

08017ab6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017ab6:	b580      	push	{r7, lr}
 8017ab8:	b082      	sub	sp, #8
 8017aba:	af00      	add	r7, sp, #0
 8017abc:	4603      	mov	r3, r0
 8017abe:	6039      	str	r1, [r7, #0]
 8017ac0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017ac2:	79fb      	ldrb	r3, [r7, #7]
 8017ac4:	2b05      	cmp	r3, #5
 8017ac6:	d104      	bne.n	8017ad2 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017ac8:	6838      	ldr	r0, [r7, #0]
 8017aca:	f001 ff81 	bl	80199d0 <RegionEU868TxParamSetupReq>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	e000      	b.n	8017ad4 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017ad2:	2300      	movs	r3, #0
        }
    }
}
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	3708      	adds	r7, #8
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}

08017adc <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	6039      	str	r1, [r7, #0]
 8017ae6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017ae8:	79fb      	ldrb	r3, [r7, #7]
 8017aea:	2b05      	cmp	r3, #5
 8017aec:	d104      	bne.n	8017af8 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017aee:	6838      	ldr	r0, [r7, #0]
 8017af0:	f001 ff7a 	bl	80199e8 <RegionEU868DlChannelReq>
 8017af4:	4603      	mov	r3, r0
 8017af6:	e000      	b.n	8017afa <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017af8:	2300      	movs	r3, #0
        }
    }
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	3708      	adds	r7, #8
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}

08017b02 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017b02:	b580      	push	{r7, lr}
 8017b04:	b082      	sub	sp, #8
 8017b06:	af00      	add	r7, sp, #0
 8017b08:	4603      	mov	r3, r0
 8017b0a:	71fb      	strb	r3, [r7, #7]
 8017b0c:	460b      	mov	r3, r1
 8017b0e:	71bb      	strb	r3, [r7, #6]
 8017b10:	4613      	mov	r3, r2
 8017b12:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017b14:	79fb      	ldrb	r3, [r7, #7]
 8017b16:	2b05      	cmp	r3, #5
 8017b18:	d108      	bne.n	8017b2c <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017b1a:	797a      	ldrb	r2, [r7, #5]
 8017b1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017b20:	4611      	mov	r1, r2
 8017b22:	4618      	mov	r0, r3
 8017b24:	f001 ffa4 	bl	8019a70 <RegionEU868AlternateDr>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	e000      	b.n	8017b2e <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017b2c:	2300      	movs	r3, #0
        }
    }
}
 8017b2e:	4618      	mov	r0, r3
 8017b30:	3708      	adds	r7, #8
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}

08017b36 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017b36:	b580      	push	{r7, lr}
 8017b38:	b084      	sub	sp, #16
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	60b9      	str	r1, [r7, #8]
 8017b3e:	607a      	str	r2, [r7, #4]
 8017b40:	603b      	str	r3, [r7, #0]
 8017b42:	4603      	mov	r3, r0
 8017b44:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017b46:	7bfb      	ldrb	r3, [r7, #15]
 8017b48:	2b05      	cmp	r3, #5
 8017b4a:	d107      	bne.n	8017b5c <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017b4c:	69bb      	ldr	r3, [r7, #24]
 8017b4e:	683a      	ldr	r2, [r7, #0]
 8017b50:	6879      	ldr	r1, [r7, #4]
 8017b52:	68b8      	ldr	r0, [r7, #8]
 8017b54:	f001 ff9c 	bl	8019a90 <RegionEU868NextChannel>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	e000      	b.n	8017b5e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017b5c:	2309      	movs	r3, #9
        }
    }
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3710      	adds	r7, #16
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}

08017b66 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b082      	sub	sp, #8
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	6039      	str	r1, [r7, #0]
 8017b70:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b72:	79fb      	ldrb	r3, [r7, #7]
 8017b74:	2b05      	cmp	r3, #5
 8017b76:	d103      	bne.n	8017b80 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017b78:	6838      	ldr	r0, [r7, #0]
 8017b7a:	f002 f903 	bl	8019d84 <RegionEU868SetContinuousWave>
 8017b7e:	e000      	b.n	8017b82 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017b80:	bf00      	nop
        }
    }
}
 8017b82:	bf00      	nop
 8017b84:	3708      	adds	r7, #8
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}

08017b8a <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017b8a:	b590      	push	{r4, r7, lr}
 8017b8c:	b083      	sub	sp, #12
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	4604      	mov	r4, r0
 8017b92:	4608      	mov	r0, r1
 8017b94:	4611      	mov	r1, r2
 8017b96:	461a      	mov	r2, r3
 8017b98:	4623      	mov	r3, r4
 8017b9a:	71fb      	strb	r3, [r7, #7]
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	71bb      	strb	r3, [r7, #6]
 8017ba0:	460b      	mov	r3, r1
 8017ba2:	717b      	strb	r3, [r7, #5]
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017ba8:	79fb      	ldrb	r3, [r7, #7]
 8017baa:	2b05      	cmp	r3, #5
 8017bac:	d109      	bne.n	8017bc2 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017bae:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017bb2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017bb6:	79bb      	ldrb	r3, [r7, #6]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f002 f931 	bl	8019e20 <RegionEU868ApplyDrOffset>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	e000      	b.n	8017bc4 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017bc2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	370c      	adds	r7, #12
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd90      	pop	{r4, r7, pc}

08017bcc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b083      	sub	sp, #12
 8017bd0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017bd2:	4b04      	ldr	r3, [pc, #16]	; (8017be4 <RegionGetVersion+0x18>)
 8017bd4:	607b      	str	r3, [r7, #4]

    return version;
 8017bd6:	687b      	ldr	r3, [r7, #4]
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	370c      	adds	r7, #12
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bc80      	pop	{r7}
 8017be0:	4770      	bx	lr
 8017be2:	bf00      	nop
 8017be4:	01010003 	.word	0x01010003

08017be8 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017be8:	b480      	push	{r7}
 8017bea:	b087      	sub	sp, #28
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	4608      	mov	r0, r1
 8017bf2:	4639      	mov	r1, r7
 8017bf4:	e881 000c 	stmia.w	r1, {r2, r3}
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	881b      	ldrh	r3, [r3, #0]
 8017c00:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017c02:	7afb      	ldrb	r3, [r7, #11]
 8017c04:	f083 0301 	eor.w	r3, r3, #1
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d01b      	beq.n	8017c46 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017c0e:	f242 7310 	movw	r3, #10000	; 0x2710
 8017c12:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017c1a:	d202      	bcs.n	8017c22 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017c1c:	2364      	movs	r3, #100	; 0x64
 8017c1e:	82bb      	strh	r3, [r7, #20]
 8017c20:	e00b      	b.n	8017c3a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017c28:	4293      	cmp	r3, r2
 8017c2a:	d803      	bhi.n	8017c34 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c30:	82bb      	strh	r3, [r7, #20]
 8017c32:	e002      	b.n	8017c3a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017c34:	f242 7310 	movw	r3, #10000	; 0x2710
 8017c38:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017c3a:	8aba      	ldrh	r2, [r7, #20]
 8017c3c:	8afb      	ldrh	r3, [r7, #22]
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	bf38      	it	cc
 8017c42:	4613      	movcc	r3, r2
 8017c44:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017c46:	8afb      	ldrh	r3, [r7, #22]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d101      	bne.n	8017c50 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017c50:	8afb      	ldrh	r3, [r7, #22]
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	371c      	adds	r7, #28
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bc80      	pop	{r7}
 8017c5a:	4770      	bx	lr

08017c5c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b08e      	sub	sp, #56	; 0x38
 8017c60:	af02      	add	r7, sp, #8
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	4608      	mov	r0, r1
 8017c66:	4639      	mov	r1, r7
 8017c68:	e881 000c 	stmia.w	r1, {r2, r3}
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	881b      	ldrh	r3, [r3, #0]
 8017c74:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017c76:	4b4b      	ldr	r3, [pc, #300]	; (8017da4 <SetMaxTimeCredits+0x148>)
 8017c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017c7a:	463b      	mov	r3, r7
 8017c7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c80:	f005 fd66 	bl	801d750 <SysTimeToMs>
 8017c84:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017c86:	f107 0314 	add.w	r3, r7, #20
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	601a      	str	r2, [r3, #0]
 8017c8e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017c90:	7af9      	ldrb	r1, [r7, #11]
 8017c92:	463b      	mov	r3, r7
 8017c94:	cb0c      	ldmia	r3, {r2, r3}
 8017c96:	68f8      	ldr	r0, [r7, #12]
 8017c98:	f7ff ffa6 	bl	8017be8 <GetDutyCycle>
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017ca0:	7afb      	ldrb	r3, [r7, #11]
 8017ca2:	f083 0301 	eor.w	r3, r3, #1
 8017ca6:	b2db      	uxtb	r3, r3
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d062      	beq.n	8017d72 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017cac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017cae:	2b64      	cmp	r3, #100	; 0x64
 8017cb0:	d105      	bne.n	8017cbe <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017cb2:	4b3c      	ldr	r3, [pc, #240]	; (8017da4 <SetMaxTimeCredits+0x148>)
 8017cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cba:	609a      	str	r2, [r3, #8]
 8017cbc:	e00b      	b.n	8017cd6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017cc4:	d105      	bne.n	8017cd2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017cc6:	4b38      	ldr	r3, [pc, #224]	; (8017da8 <SetMaxTimeCredits+0x14c>)
 8017cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cce:	609a      	str	r2, [r3, #8]
 8017cd0:	e001      	b.n	8017cd6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017cd2:	4b36      	ldr	r3, [pc, #216]	; (8017dac <SetMaxTimeCredits+0x150>)
 8017cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	689a      	ldr	r2, [r3, #8]
 8017cda:	f107 031c 	add.w	r3, r7, #28
 8017cde:	4611      	mov	r1, r2
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f005 fd5d 	bl	801d7a0 <SysTimeFromMs>
 8017ce6:	f107 0014 	add.w	r0, r7, #20
 8017cea:	6a3b      	ldr	r3, [r7, #32]
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	69fb      	ldr	r3, [r7, #28]
 8017cf0:	463a      	mov	r2, r7
 8017cf2:	ca06      	ldmia	r2, {r1, r2}
 8017cf4:	f005 fc6d 	bl	801d5d2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017cf8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017cfc:	f083 0301 	eor.w	r3, r3, #1
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d006      	beq.n	8017d14 <SetMaxTimeCredits+0xb8>
 8017d06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017d0a:	f083 0301 	eor.w	r3, r3, #1
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d108      	bne.n	8017d26 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d1a:	429a      	cmp	r2, r3
 8017d1c:	d103      	bne.n	8017d26 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017d1e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017d20:	4a23      	ldr	r2, [pc, #140]	; (8017db0 <SetMaxTimeCredits+0x154>)
 8017d22:	4293      	cmp	r3, r2
 8017d24:	d92f      	bls.n	8017d86 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d2a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	4a21      	ldr	r2, [pc, #132]	; (8017db4 <SetMaxTimeCredits+0x158>)
 8017d30:	4293      	cmp	r3, r2
 8017d32:	d928      	bls.n	8017d86 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017d3a:	3b30      	subs	r3, #48	; 0x30
 8017d3c:	4a1e      	ldr	r2, [pc, #120]	; (8017db8 <SetMaxTimeCredits+0x15c>)
 8017d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8017d42:	0c1b      	lsrs	r3, r3, #16
 8017d44:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	4a1c      	ldr	r2, [pc, #112]	; (8017dbc <SetMaxTimeCredits+0x160>)
 8017d4a:	fb02 f303 	mul.w	r3, r2, r3
 8017d4e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017d56:	3330      	adds	r3, #48	; 0x30
 8017d58:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017d5e:	f107 0314 	add.w	r3, r7, #20
 8017d62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d66:	f005 fcf3 	bl	801d750 <SysTimeToMs>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	609a      	str	r2, [r3, #8]
 8017d70:	e009      	b.n	8017d86 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017d72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017d76:	f083 0301 	eor.w	r3, r3, #1
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d002      	beq.n	8017d86 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d84:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	685b      	ldr	r3, [r3, #4]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d102      	bne.n	8017d94 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d92:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d98:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017d9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	3730      	adds	r7, #48	; 0x30
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}
 8017da4:	001b7740 	.word	0x001b7740
 8017da8:	0112a880 	.word	0x0112a880
 8017dac:	02932e00 	.word	0x02932e00
 8017db0:	0001517f 	.word	0x0001517f
 8017db4:	0001ec2f 	.word	0x0001ec2f
 8017db8:	c22e4507 	.word	0xc22e4507
 8017dbc:	00015180 	.word	0x00015180

08017dc0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b086      	sub	sp, #24
 8017dc4:	af02      	add	r7, sp, #8
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	4608      	mov	r0, r1
 8017dca:	4611      	mov	r1, r2
 8017dcc:	461a      	mov	r2, r3
 8017dce:	4603      	mov	r3, r0
 8017dd0:	70fb      	strb	r3, [r7, #3]
 8017dd2:	460b      	mov	r3, r1
 8017dd4:	70bb      	strb	r3, [r7, #2]
 8017dd6:	4613      	mov	r3, r2
 8017dd8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017dda:	78f9      	ldrb	r1, [r7, #3]
 8017ddc:	787b      	ldrb	r3, [r7, #1]
 8017dde:	9301      	str	r3, [sp, #4]
 8017de0:	78bb      	ldrb	r3, [r7, #2]
 8017de2:	9300      	str	r3, [sp, #0]
 8017de4:	f107 0318 	add.w	r3, r7, #24
 8017de8:	cb0c      	ldmia	r3, {r2, r3}
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	f7ff ff36 	bl	8017c5c <SetMaxTimeCredits>
 8017df0:	4603      	mov	r3, r0
 8017df2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017df4:	78fb      	ldrb	r3, [r7, #3]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d00a      	beq.n	8017e10 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f006 fae6 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 8017e04:	4602      	mov	r2, r0
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	68db      	ldr	r3, [r3, #12]
 8017e0a:	441a      	add	r2, r3
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	68da      	ldr	r2, [r3, #12]
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	691b      	ldr	r3, [r3, #16]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d903      	bls.n	8017e24 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	691a      	ldr	r2, [r3, #16]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6a3a      	ldr	r2, [r7, #32]
 8017e28:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3710      	adds	r7, #16
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017e34:	b480      	push	{r7}
 8017e36:	b085      	sub	sp, #20
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	460a      	mov	r2, r1
 8017e3e:	80fb      	strh	r3, [r7, #6]
 8017e40:	4613      	mov	r3, r2
 8017e42:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017e44:	2300      	movs	r3, #0
 8017e46:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017e48:	2300      	movs	r3, #0
 8017e4a:	73bb      	strb	r3, [r7, #14]
 8017e4c:	e011      	b.n	8017e72 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017e4e:	88fa      	ldrh	r2, [r7, #6]
 8017e50:	7bbb      	ldrb	r3, [r7, #14]
 8017e52:	2101      	movs	r1, #1
 8017e54:	fa01 f303 	lsl.w	r3, r1, r3
 8017e58:	401a      	ands	r2, r3
 8017e5a:	7bbb      	ldrb	r3, [r7, #14]
 8017e5c:	2101      	movs	r1, #1
 8017e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d102      	bne.n	8017e6c <CountChannels+0x38>
        {
            nbActiveBits++;
 8017e66:	7bfb      	ldrb	r3, [r7, #15]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017e6c:	7bbb      	ldrb	r3, [r7, #14]
 8017e6e:	3301      	adds	r3, #1
 8017e70:	73bb      	strb	r3, [r7, #14]
 8017e72:	7bba      	ldrb	r2, [r7, #14]
 8017e74:	797b      	ldrb	r3, [r7, #5]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d3e9      	bcc.n	8017e4e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3714      	adds	r7, #20
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bc80      	pop	{r7}
 8017e84:	4770      	bx	lr

08017e86 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017e86:	b580      	push	{r7, lr}
 8017e88:	b084      	sub	sp, #16
 8017e8a:	af00      	add	r7, sp, #0
 8017e8c:	6039      	str	r1, [r7, #0]
 8017e8e:	4611      	mov	r1, r2
 8017e90:	461a      	mov	r2, r3
 8017e92:	4603      	mov	r3, r0
 8017e94:	71fb      	strb	r3, [r7, #7]
 8017e96:	460b      	mov	r3, r1
 8017e98:	71bb      	strb	r3, [r7, #6]
 8017e9a:	4613      	mov	r3, r2
 8017e9c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017e9e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017ea2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017ea6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f000 f85d 	bl	8017f6a <RegionCommonValueInRange>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d101      	bne.n	8017eba <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	e053      	b.n	8017f62 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017eba:	2300      	movs	r3, #0
 8017ebc:	73fb      	strb	r3, [r7, #15]
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	73bb      	strb	r3, [r7, #14]
 8017ec2:	e049      	b.n	8017f58 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	737b      	strb	r3, [r7, #13]
 8017ec8:	e03d      	b.n	8017f46 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017eca:	7bbb      	ldrb	r3, [r7, #14]
 8017ecc:	005b      	lsls	r3, r3, #1
 8017ece:	683a      	ldr	r2, [r7, #0]
 8017ed0:	4413      	add	r3, r2
 8017ed2:	881b      	ldrh	r3, [r3, #0]
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	7b7b      	ldrb	r3, [r7, #13]
 8017ed8:	fa42 f303 	asr.w	r3, r2, r3
 8017edc:	f003 0301 	and.w	r3, r3, #1
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d02d      	beq.n	8017f40 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017ee4:	7bfa      	ldrb	r2, [r7, #15]
 8017ee6:	7b7b      	ldrb	r3, [r7, #13]
 8017ee8:	4413      	add	r3, r2
 8017eea:	461a      	mov	r2, r3
 8017eec:	4613      	mov	r3, r2
 8017eee:	005b      	lsls	r3, r3, #1
 8017ef0:	4413      	add	r3, r2
 8017ef2:	009b      	lsls	r3, r3, #2
 8017ef4:	461a      	mov	r2, r3
 8017ef6:	69fb      	ldr	r3, [r7, #28]
 8017ef8:	4413      	add	r3, r2
 8017efa:	7a1b      	ldrb	r3, [r3, #8]
 8017efc:	f343 0303 	sbfx	r3, r3, #0, #4
 8017f00:	b25b      	sxtb	r3, r3
 8017f02:	f003 030f 	and.w	r3, r3, #15
 8017f06:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017f08:	7bfa      	ldrb	r2, [r7, #15]
 8017f0a:	7b7b      	ldrb	r3, [r7, #13]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	461a      	mov	r2, r3
 8017f10:	4613      	mov	r3, r2
 8017f12:	005b      	lsls	r3, r3, #1
 8017f14:	4413      	add	r3, r2
 8017f16:	009b      	lsls	r3, r3, #2
 8017f18:	461a      	mov	r2, r3
 8017f1a:	69fb      	ldr	r3, [r7, #28]
 8017f1c:	4413      	add	r3, r2
 8017f1e:	7a1b      	ldrb	r3, [r3, #8]
 8017f20:	f343 1303 	sbfx	r3, r3, #4, #4
 8017f24:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017f26:	f003 030f 	and.w	r3, r3, #15
 8017f2a:	b25a      	sxtb	r2, r3
 8017f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017f30:	4618      	mov	r0, r3
 8017f32:	f000 f81a 	bl	8017f6a <RegionCommonValueInRange>
 8017f36:	4603      	mov	r3, r0
 8017f38:	2b01      	cmp	r3, #1
 8017f3a:	d101      	bne.n	8017f40 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e010      	b.n	8017f62 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017f40:	7b7b      	ldrb	r3, [r7, #13]
 8017f42:	3301      	adds	r3, #1
 8017f44:	737b      	strb	r3, [r7, #13]
 8017f46:	7b7b      	ldrb	r3, [r7, #13]
 8017f48:	2b0f      	cmp	r3, #15
 8017f4a:	d9be      	bls.n	8017eca <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017f4c:	7bfb      	ldrb	r3, [r7, #15]
 8017f4e:	3310      	adds	r3, #16
 8017f50:	73fb      	strb	r3, [r7, #15]
 8017f52:	7bbb      	ldrb	r3, [r7, #14]
 8017f54:	3301      	adds	r3, #1
 8017f56:	73bb      	strb	r3, [r7, #14]
 8017f58:	7bfa      	ldrb	r2, [r7, #15]
 8017f5a:	79fb      	ldrb	r3, [r7, #7]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d3b1      	bcc.n	8017ec4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017f60:	2300      	movs	r3, #0
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3710      	adds	r7, #16
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}

08017f6a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017f6a:	b480      	push	{r7}
 8017f6c:	b083      	sub	sp, #12
 8017f6e:	af00      	add	r7, sp, #0
 8017f70:	4603      	mov	r3, r0
 8017f72:	71fb      	strb	r3, [r7, #7]
 8017f74:	460b      	mov	r3, r1
 8017f76:	71bb      	strb	r3, [r7, #6]
 8017f78:	4613      	mov	r3, r2
 8017f7a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017f7c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017f80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	db07      	blt.n	8017f98 <RegionCommonValueInRange+0x2e>
 8017f88:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017f8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017f90:	429a      	cmp	r2, r3
 8017f92:	dc01      	bgt.n	8017f98 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017f94:	2301      	movs	r3, #1
 8017f96:	e000      	b.n	8017f9a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017f98:	2300      	movs	r3, #0
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	370c      	adds	r7, #12
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bc80      	pop	{r7}
 8017fa2:	4770      	bx	lr

08017fa4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	b085      	sub	sp, #20
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
 8017fac:	460b      	mov	r3, r1
 8017fae:	70fb      	strb	r3, [r7, #3]
 8017fb0:	4613      	mov	r3, r2
 8017fb2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017fb4:	78fb      	ldrb	r3, [r7, #3]
 8017fb6:	091b      	lsrs	r3, r3, #4
 8017fb8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017fba:	78bb      	ldrb	r3, [r7, #2]
 8017fbc:	091b      	lsrs	r3, r3, #4
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	7bfa      	ldrb	r2, [r7, #15]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	d803      	bhi.n	8017fce <RegionCommonChanDisable+0x2a>
 8017fc6:	78fa      	ldrb	r2, [r7, #3]
 8017fc8:	78bb      	ldrb	r3, [r7, #2]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d301      	bcc.n	8017fd2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	e017      	b.n	8018002 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017fd2:	7bfb      	ldrb	r3, [r7, #15]
 8017fd4:	005b      	lsls	r3, r3, #1
 8017fd6:	687a      	ldr	r2, [r7, #4]
 8017fd8:	4413      	add	r3, r2
 8017fda:	881b      	ldrh	r3, [r3, #0]
 8017fdc:	b21a      	sxth	r2, r3
 8017fde:	78fb      	ldrb	r3, [r7, #3]
 8017fe0:	f003 030f 	and.w	r3, r3, #15
 8017fe4:	2101      	movs	r1, #1
 8017fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8017fea:	b21b      	sxth	r3, r3
 8017fec:	43db      	mvns	r3, r3
 8017fee:	b21b      	sxth	r3, r3
 8017ff0:	4013      	ands	r3, r2
 8017ff2:	b219      	sxth	r1, r3
 8017ff4:	7bfb      	ldrb	r3, [r7, #15]
 8017ff6:	005b      	lsls	r3, r3, #1
 8017ff8:	687a      	ldr	r2, [r7, #4]
 8017ffa:	4413      	add	r3, r2
 8017ffc:	b28a      	uxth	r2, r1
 8017ffe:	801a      	strh	r2, [r3, #0]

    return true;
 8018000:	2301      	movs	r3, #1
}
 8018002:	4618      	mov	r0, r3
 8018004:	3714      	adds	r7, #20
 8018006:	46bd      	mov	sp, r7
 8018008:	bc80      	pop	{r7}
 801800a:	4770      	bx	lr

0801800c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b084      	sub	sp, #16
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	460b      	mov	r3, r1
 8018016:	70fb      	strb	r3, [r7, #3]
 8018018:	4613      	mov	r3, r2
 801801a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801801c:	2300      	movs	r3, #0
 801801e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d101      	bne.n	801802a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8018026:	2300      	movs	r3, #0
 8018028:	e018      	b.n	801805c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801802a:	78fb      	ldrb	r3, [r7, #3]
 801802c:	73bb      	strb	r3, [r7, #14]
 801802e:	e010      	b.n	8018052 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8018030:	7bbb      	ldrb	r3, [r7, #14]
 8018032:	005b      	lsls	r3, r3, #1
 8018034:	687a      	ldr	r2, [r7, #4]
 8018036:	4413      	add	r3, r2
 8018038:	881b      	ldrh	r3, [r3, #0]
 801803a:	2110      	movs	r1, #16
 801803c:	4618      	mov	r0, r3
 801803e:	f7ff fef9 	bl	8017e34 <CountChannels>
 8018042:	4603      	mov	r3, r0
 8018044:	461a      	mov	r2, r3
 8018046:	7bfb      	ldrb	r3, [r7, #15]
 8018048:	4413      	add	r3, r2
 801804a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801804c:	7bbb      	ldrb	r3, [r7, #14]
 801804e:	3301      	adds	r3, #1
 8018050:	73bb      	strb	r3, [r7, #14]
 8018052:	7bba      	ldrb	r2, [r7, #14]
 8018054:	78bb      	ldrb	r3, [r7, #2]
 8018056:	429a      	cmp	r2, r3
 8018058:	d3ea      	bcc.n	8018030 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801805a:	7bfb      	ldrb	r3, [r7, #15]
}
 801805c:	4618      	mov	r0, r3
 801805e:	3710      	adds	r7, #16
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8018064:	b480      	push	{r7}
 8018066:	b087      	sub	sp, #28
 8018068:	af00      	add	r7, sp, #0
 801806a:	60f8      	str	r0, [r7, #12]
 801806c:	60b9      	str	r1, [r7, #8]
 801806e:	4613      	mov	r3, r2
 8018070:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d016      	beq.n	80180a6 <RegionCommonChanMaskCopy+0x42>
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d013      	beq.n	80180a6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801807e:	2300      	movs	r3, #0
 8018080:	75fb      	strb	r3, [r7, #23]
 8018082:	e00c      	b.n	801809e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018084:	7dfb      	ldrb	r3, [r7, #23]
 8018086:	005b      	lsls	r3, r3, #1
 8018088:	68ba      	ldr	r2, [r7, #8]
 801808a:	441a      	add	r2, r3
 801808c:	7dfb      	ldrb	r3, [r7, #23]
 801808e:	005b      	lsls	r3, r3, #1
 8018090:	68f9      	ldr	r1, [r7, #12]
 8018092:	440b      	add	r3, r1
 8018094:	8812      	ldrh	r2, [r2, #0]
 8018096:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8018098:	7dfb      	ldrb	r3, [r7, #23]
 801809a:	3301      	adds	r3, #1
 801809c:	75fb      	strb	r3, [r7, #23]
 801809e:	7dfa      	ldrb	r2, [r7, #23]
 80180a0:	79fb      	ldrb	r3, [r7, #7]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d3ee      	bcc.n	8018084 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80180a6:	bf00      	nop
 80180a8:	371c      	adds	r7, #28
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bc80      	pop	{r7}
 80180ae:	4770      	bx	lr

080180b0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80180b0:	b082      	sub	sp, #8
 80180b2:	b580      	push	{r7, lr}
 80180b4:	b086      	sub	sp, #24
 80180b6:	af00      	add	r7, sp, #0
 80180b8:	60f8      	str	r0, [r7, #12]
 80180ba:	60b9      	str	r1, [r7, #8]
 80180bc:	627b      	str	r3, [r7, #36]	; 0x24
 80180be:	4613      	mov	r3, r2
 80180c0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80180c2:	79f9      	ldrb	r1, [r7, #7]
 80180c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80180c8:	cb0c      	ldmia	r3, {r2, r3}
 80180ca:	68f8      	ldr	r0, [r7, #12]
 80180cc:	f7ff fd8c 	bl	8017be8 <GetDutyCycle>
 80180d0:	4603      	mov	r3, r0
 80180d2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	68da      	ldr	r2, [r3, #12]
 80180d8:	8afb      	ldrh	r3, [r7, #22]
 80180da:	68b9      	ldr	r1, [r7, #8]
 80180dc:	fb01 f303 	mul.w	r3, r1, r3
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d909      	bls.n	80180f8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	68da      	ldr	r2, [r3, #12]
 80180e8:	8afb      	ldrh	r3, [r7, #22]
 80180ea:	68b9      	ldr	r1, [r7, #8]
 80180ec:	fb01 f303 	mul.w	r3, r1, r3
 80180f0:	1ad2      	subs	r2, r2, r3
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80180f6:	e002      	b.n	80180fe <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	2200      	movs	r2, #0
 80180fc:	60da      	str	r2, [r3, #12]
}
 80180fe:	bf00      	nop
 8018100:	3718      	adds	r7, #24
 8018102:	46bd      	mov	sp, r7
 8018104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018108:	b002      	add	sp, #8
 801810a:	4770      	bx	lr

0801810c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801810e:	b08f      	sub	sp, #60	; 0x3c
 8018110:	af04      	add	r7, sp, #16
 8018112:	6039      	str	r1, [r7, #0]
 8018114:	4611      	mov	r1, r2
 8018116:	461a      	mov	r2, r3
 8018118:	4603      	mov	r3, r0
 801811a:	71fb      	strb	r3, [r7, #7]
 801811c:	460b      	mov	r3, r1
 801811e:	71bb      	strb	r3, [r7, #6]
 8018120:	4613      	mov	r3, r2
 8018122:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018124:	f04f 33ff 	mov.w	r3, #4294967295
 8018128:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801812a:	f006 f93f 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 801812e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018130:	2300      	movs	r3, #0
 8018132:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018134:	2301      	movs	r3, #1
 8018136:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018138:	2300      	movs	r3, #0
 801813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801813e:	2300      	movs	r3, #0
 8018140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018144:	e0ba      	b.n	80182bc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8018146:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801814a:	4613      	mov	r3, r2
 801814c:	005b      	lsls	r3, r3, #1
 801814e:	4413      	add	r3, r2
 8018150:	00db      	lsls	r3, r3, #3
 8018152:	461a      	mov	r2, r3
 8018154:	683b      	ldr	r3, [r7, #0]
 8018156:	189c      	adds	r4, r3, r2
 8018158:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801815c:	797a      	ldrb	r2, [r7, #5]
 801815e:	79fd      	ldrb	r5, [r7, #7]
 8018160:	69fb      	ldr	r3, [r7, #28]
 8018162:	9302      	str	r3, [sp, #8]
 8018164:	46ec      	mov	ip, sp
 8018166:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801816a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801816e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018172:	4633      	mov	r3, r6
 8018174:	4629      	mov	r1, r5
 8018176:	4620      	mov	r0, r4
 8018178:	f7ff fe22 	bl	8017dc0 <UpdateTimeCredits>
 801817c:	4603      	mov	r3, r0
 801817e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8018180:	8afa      	ldrh	r2, [r7, #22]
 8018182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018184:	fb02 f303 	mul.w	r3, r2, r3
 8018188:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801818a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801818e:	4613      	mov	r3, r2
 8018190:	005b      	lsls	r3, r3, #1
 8018192:	4413      	add	r3, r2
 8018194:	00db      	lsls	r3, r3, #3
 8018196:	461a      	mov	r2, r3
 8018198:	683b      	ldr	r3, [r7, #0]
 801819a:	4413      	add	r3, r2
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	69ba      	ldr	r2, [r7, #24]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d308      	bcc.n	80181b6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80181a4:	797b      	ldrb	r3, [r7, #5]
 80181a6:	f083 0301 	eor.w	r3, r3, #1
 80181aa:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d013      	beq.n	80181d8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80181b0:	79fb      	ldrb	r3, [r7, #7]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d010      	beq.n	80181d8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80181b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181ba:	4613      	mov	r3, r2
 80181bc:	005b      	lsls	r3, r3, #1
 80181be:	4413      	add	r3, r2
 80181c0:	00db      	lsls	r3, r3, #3
 80181c2:	461a      	mov	r2, r3
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	4413      	add	r3, r2
 80181c8:	2201      	movs	r2, #1
 80181ca:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80181cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80181d0:	3301      	adds	r3, #1
 80181d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80181d6:	e06c      	b.n	80182b2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80181d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181dc:	4613      	mov	r3, r2
 80181de:	005b      	lsls	r3, r3, #1
 80181e0:	4413      	add	r3, r2
 80181e2:	00db      	lsls	r3, r3, #3
 80181e4:	461a      	mov	r2, r3
 80181e6:	683b      	ldr	r3, [r7, #0]
 80181e8:	4413      	add	r3, r2
 80181ea:	2200      	movs	r2, #0
 80181ec:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80181ee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181f2:	4613      	mov	r3, r2
 80181f4:	005b      	lsls	r3, r3, #1
 80181f6:	4413      	add	r3, r2
 80181f8:	00db      	lsls	r3, r3, #3
 80181fa:	461a      	mov	r2, r3
 80181fc:	683b      	ldr	r3, [r7, #0]
 80181fe:	4413      	add	r3, r2
 8018200:	691b      	ldr	r3, [r3, #16]
 8018202:	69ba      	ldr	r2, [r7, #24]
 8018204:	429a      	cmp	r2, r3
 8018206:	d215      	bcs.n	8018234 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018208:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801820c:	4613      	mov	r3, r2
 801820e:	005b      	lsls	r3, r3, #1
 8018210:	4413      	add	r3, r2
 8018212:	00db      	lsls	r3, r3, #3
 8018214:	461a      	mov	r2, r3
 8018216:	683b      	ldr	r3, [r7, #0]
 8018218:	4413      	add	r3, r2
 801821a:	68db      	ldr	r3, [r3, #12]
 801821c:	69ba      	ldr	r2, [r7, #24]
 801821e:	1ad3      	subs	r3, r2, r3
 8018220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018222:	4293      	cmp	r3, r2
 8018224:	bf28      	it	cs
 8018226:	4613      	movcs	r3, r2
 8018228:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801822a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801822e:	3301      	adds	r3, #1
 8018230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018234:	79fb      	ldrb	r3, [r7, #7]
 8018236:	f083 0301 	eor.w	r3, r3, #1
 801823a:	b2db      	uxtb	r3, r3
 801823c:	2b00      	cmp	r3, #0
 801823e:	d038      	beq.n	80182b2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018240:	2300      	movs	r3, #0
 8018242:	60fb      	str	r3, [r7, #12]
 8018244:	2300      	movs	r3, #0
 8018246:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018248:	8afb      	ldrh	r3, [r7, #22]
 801824a:	2b64      	cmp	r3, #100	; 0x64
 801824c:	d103      	bne.n	8018256 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801824e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018252:	60fb      	str	r3, [r7, #12]
 8018254:	e009      	b.n	801826a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018256:	8afb      	ldrh	r3, [r7, #22]
 8018258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801825c:	d103      	bne.n	8018266 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801825e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8018262:	60fb      	str	r3, [r7, #12]
 8018264:	e001      	b.n	801826a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018266:	4b1e      	ldr	r3, [pc, #120]	; (80182e0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018268:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801826a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801826c:	4a1c      	ldr	r2, [pc, #112]	; (80182e0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801826e:	4293      	cmp	r3, r2
 8018270:	d90e      	bls.n	8018290 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8018272:	68fa      	ldr	r2, [r7, #12]
 8018274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018276:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801827a:	3b30      	subs	r3, #48	; 0x30
 801827c:	4919      	ldr	r1, [pc, #100]	; (80182e4 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801827e:	fba1 1303 	umull	r1, r3, r1, r3
 8018282:	0c1b      	lsrs	r3, r3, #16
 8018284:	3301      	adds	r3, #1
 8018286:	4918      	ldr	r1, [pc, #96]	; (80182e8 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018288:	fb01 f303 	mul.w	r3, r1, r3
 801828c:	4413      	add	r3, r2
 801828e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8018290:	f107 000c 	add.w	r0, r7, #12
 8018294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018296:	9300      	str	r3, [sp, #0]
 8018298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801829a:	f107 020c 	add.w	r2, r7, #12
 801829e:	ca06      	ldmia	r2, {r1, r2}
 80182a0:	f005 f997 	bl	801d5d2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80182a4:	f107 030c 	add.w	r3, r7, #12
 80182a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182ac:	f005 fa50 	bl	801d750 <SysTimeToMs>
 80182b0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80182b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80182b6:	3301      	adds	r3, #1
 80182b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80182bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80182c0:	79bb      	ldrb	r3, [r7, #6]
 80182c2:	429a      	cmp	r2, r3
 80182c4:	f4ff af3f 	bcc.w	8018146 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80182c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d102      	bne.n	80182d6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80182d0:	f04f 33ff 	mov.w	r3, #4294967295
 80182d4:	e000      	b.n	80182d8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80182d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80182d8:	4618      	mov	r0, r3
 80182da:	372c      	adds	r7, #44	; 0x2c
 80182dc:	46bd      	mov	sp, r7
 80182de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182e0:	0001ec30 	.word	0x0001ec30
 80182e4:	c22e4507 	.word	0xc22e4507
 80182e8:	00015180 	.word	0x00015180

080182ec <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80182ec:	b480      	push	{r7}
 80182ee:	b085      	sub	sp, #20
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
 80182f4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80182f6:	2300      	movs	r3, #0
 80182f8:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	781b      	ldrb	r3, [r3, #0]
 80182fe:	2b03      	cmp	r3, #3
 8018300:	d13f      	bne.n	8018382 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	3301      	adds	r3, #1
 8018306:	781b      	ldrb	r3, [r3, #0]
 8018308:	b25a      	sxtb	r2, r3
 801830a:	683b      	ldr	r3, [r7, #0]
 801830c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018314:	f003 030f 	and.w	r3, r3, #15
 8018318:	b25a      	sxtb	r2, r3
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018324:	b2db      	uxtb	r3, r3
 8018326:	091b      	lsrs	r3, r3, #4
 8018328:	b2db      	uxtb	r3, r3
 801832a:	b25a      	sxtb	r2, r3
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	3302      	adds	r3, #2
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	b29a      	uxth	r2, r3
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801833c:	683b      	ldr	r3, [r7, #0]
 801833e:	889b      	ldrh	r3, [r3, #4]
 8018340:	b21a      	sxth	r2, r3
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	3303      	adds	r3, #3
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	021b      	lsls	r3, r3, #8
 801834a:	b21b      	sxth	r3, r3
 801834c:	4313      	orrs	r3, r2
 801834e:	b21b      	sxth	r3, r3
 8018350:	b29a      	uxth	r2, r3
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	791a      	ldrb	r2, [r3, #4]
 801835a:	683b      	ldr	r3, [r7, #0]
 801835c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	091b      	lsrs	r3, r3, #4
 8018364:	b2db      	uxtb	r3, r3
 8018366:	f003 0307 	and.w	r3, r3, #7
 801836a:	b2da      	uxtb	r2, r3
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	f003 030f 	and.w	r3, r3, #15
 8018378:	b2da      	uxtb	r2, r3
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801837e:	2305      	movs	r3, #5
 8018380:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8018382:	7bfb      	ldrb	r3, [r7, #15]
}
 8018384:	4618      	mov	r0, r3
 8018386:	3714      	adds	r7, #20
 8018388:	46bd      	mov	sp, r7
 801838a:	bc80      	pop	{r7}
 801838c:	4770      	bx	lr

0801838e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801838e:	b5b0      	push	{r4, r5, r7, lr}
 8018390:	b088      	sub	sp, #32
 8018392:	af02      	add	r7, sp, #8
 8018394:	60f8      	str	r0, [r7, #12]
 8018396:	60b9      	str	r1, [r7, #8]
 8018398:	607a      	str	r2, [r7, #4]
 801839a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	791b      	ldrb	r3, [r3, #4]
 80183a0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	799b      	ldrb	r3, [r3, #6]
 80183a6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	79db      	ldrb	r3, [r3, #7]
 80183ac:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	7a1b      	ldrb	r3, [r3, #8]
 80183b2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	795b      	ldrb	r3, [r3, #5]
 80183b8:	f083 0301 	eor.w	r3, r3, #1
 80183bc:	b2db      	uxtb	r3, r3
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d008      	beq.n	80183d4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	7adb      	ldrb	r3, [r3, #11]
 80183c6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	7a5b      	ldrb	r3, [r3, #9]
 80183cc:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	7a9b      	ldrb	r3, [r3, #10]
 80183d2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80183d4:	7dfb      	ldrb	r3, [r7, #23]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d04a      	beq.n	8018470 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80183da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80183de:	2b0f      	cmp	r3, #15
 80183e0:	d103      	bne.n	80183ea <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	7a5b      	ldrb	r3, [r3, #9]
 80183e6:	75bb      	strb	r3, [r7, #22]
 80183e8:	e01d      	b.n	8018426 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	7b18      	ldrb	r0, [r3, #12]
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	6919      	ldr	r1, [r3, #16]
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80183fe:	68fa      	ldr	r2, [r7, #12]
 8018400:	6992      	ldr	r2, [r2, #24]
 8018402:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8018406:	9201      	str	r2, [sp, #4]
 8018408:	9300      	str	r3, [sp, #0]
 801840a:	462b      	mov	r3, r5
 801840c:	4622      	mov	r2, r4
 801840e:	f7ff fd3a 	bl	8017e86 <RegionCommonChanVerifyDr>
 8018412:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018414:	f083 0301 	eor.w	r3, r3, #1
 8018418:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801841a:	2b00      	cmp	r3, #0
 801841c:	d003      	beq.n	8018426 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801841e:	7dfb      	ldrb	r3, [r7, #23]
 8018420:	f023 0302 	bic.w	r3, r3, #2
 8018424:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8018426:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801842a:	2b0f      	cmp	r3, #15
 801842c:	d103      	bne.n	8018436 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	7a9b      	ldrb	r3, [r3, #10]
 8018432:	757b      	strb	r3, [r7, #21]
 8018434:	e01c      	b.n	8018470 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018446:	4618      	mov	r0, r3
 8018448:	f7ff fd8f 	bl	8017f6a <RegionCommonValueInRange>
 801844c:	4603      	mov	r3, r0
 801844e:	2b00      	cmp	r3, #0
 8018450:	d10e      	bne.n	8018470 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018458:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801845c:	429a      	cmp	r2, r3
 801845e:	da03      	bge.n	8018468 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	7f5b      	ldrb	r3, [r3, #29]
 8018464:	757b      	strb	r3, [r7, #21]
 8018466:	e003      	b.n	8018470 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018468:	7dfb      	ldrb	r3, [r7, #23]
 801846a:	f023 0304 	bic.w	r3, r3, #4
 801846e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018470:	7dfb      	ldrb	r3, [r7, #23]
 8018472:	2b07      	cmp	r3, #7
 8018474:	d105      	bne.n	8018482 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8018476:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d101      	bne.n	8018482 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801847e:	2301      	movs	r3, #1
 8018480:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8018482:	68bb      	ldr	r3, [r7, #8]
 8018484:	7dba      	ldrb	r2, [r7, #22]
 8018486:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	7d7a      	ldrb	r2, [r7, #21]
 801848c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801848e:	7d3a      	ldrb	r2, [r7, #20]
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	701a      	strb	r2, [r3, #0]

    return status;
 8018494:	7dfb      	ldrb	r3, [r7, #23]
}
 8018496:	4618      	mov	r0, r3
 8018498:	3718      	adds	r7, #24
 801849a:	46bd      	mov	sp, r7
 801849c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080184a0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80184a0:	b480      	push	{r7}
 80184a2:	b083      	sub	sp, #12
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	4603      	mov	r3, r0
 80184a8:	6039      	str	r1, [r7, #0]
 80184aa:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80184ac:	79fb      	ldrb	r3, [r7, #7]
 80184ae:	4a06      	ldr	r2, [pc, #24]	; (80184c8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80184b0:	fa02 f303 	lsl.w	r3, r2, r3
 80184b4:	461a      	mov	r2, r3
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80184bc:	4618      	mov	r0, r3
 80184be:	370c      	adds	r7, #12
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bc80      	pop	{r7}
 80184c4:	4770      	bx	lr
 80184c6:	bf00      	nop
 80184c8:	000f4240 	.word	0x000f4240

080184cc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80184cc:	b480      	push	{r7}
 80184ce:	b083      	sub	sp, #12
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	4603      	mov	r3, r0
 80184d4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80184d6:	79fb      	ldrb	r3, [r7, #7]
 80184d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80184dc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	370c      	adds	r7, #12
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bc80      	pop	{r7}
 80184e8:	4770      	bx	lr
	...

080184ec <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80184ec:	b480      	push	{r7}
 80184ee:	b085      	sub	sp, #20
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	60f8      	str	r0, [r7, #12]
 80184f4:	607a      	str	r2, [r7, #4]
 80184f6:	603b      	str	r3, [r7, #0]
 80184f8:	460b      	mov	r3, r1
 80184fa:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80184fc:	7afa      	ldrb	r2, [r7, #11]
 80184fe:	7afb      	ldrb	r3, [r7, #11]
 8018500:	3b04      	subs	r3, #4
 8018502:	4619      	mov	r1, r3
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	fb03 f101 	mul.w	r1, r3, r1
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018510:	fb00 f303 	mul.w	r3, r0, r3
 8018514:	440b      	add	r3, r1
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	2b00      	cmp	r3, #0
 801851a:	d013      	beq.n	8018544 <RegionCommonComputeRxWindowParameters+0x58>
 801851c:	7afb      	ldrb	r3, [r7, #11]
 801851e:	3b04      	subs	r3, #4
 8018520:	4619      	mov	r1, r3
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	fb03 f101 	mul.w	r1, r3, r1
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801852e:	fb00 f303 	mul.w	r3, r0, r3
 8018532:	440b      	add	r3, r1
 8018534:	0059      	lsls	r1, r3, #1
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	440b      	add	r3, r1
 801853a:	1e59      	subs	r1, r3, #1
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	fbb1 f3f3 	udiv	r3, r1, r3
 8018542:	e00f      	b.n	8018564 <RegionCommonComputeRxWindowParameters+0x78>
 8018544:	7afb      	ldrb	r3, [r7, #11]
 8018546:	3b04      	subs	r3, #4
 8018548:	4619      	mov	r1, r3
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	fb03 f101 	mul.w	r1, r3, r1
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018556:	fb00 f303 	mul.w	r3, r0, r3
 801855a:	440b      	add	r3, r1
 801855c:	0059      	lsls	r1, r3, #1
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	fbb1 f3f3 	udiv	r3, r1, r3
 8018564:	429a      	cmp	r2, r3
 8018566:	bf38      	it	cc
 8018568:	461a      	movcc	r2, r3
 801856a:	69bb      	ldr	r3, [r7, #24]
 801856c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	009b      	lsls	r3, r3, #2
 8018572:	4619      	mov	r1, r3
 8018574:	69bb      	ldr	r3, [r7, #24]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	68fa      	ldr	r2, [r7, #12]
 801857a:	fb02 f303 	mul.w	r3, r2, r3
 801857e:	2b00      	cmp	r3, #0
 8018580:	d007      	beq.n	8018592 <RegionCommonComputeRxWindowParameters+0xa6>
 8018582:	69bb      	ldr	r3, [r7, #24]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	68fa      	ldr	r2, [r7, #12]
 8018588:	fb02 f303 	mul.w	r3, r2, r3
 801858c:	3301      	adds	r3, #1
 801858e:	085b      	lsrs	r3, r3, #1
 8018590:	e005      	b.n	801859e <RegionCommonComputeRxWindowParameters+0xb2>
 8018592:	69bb      	ldr	r3, [r7, #24]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	68fa      	ldr	r2, [r7, #12]
 8018598:	fb02 f303 	mul.w	r3, r2, r3
 801859c:	085b      	lsrs	r3, r3, #1
 801859e:	1acb      	subs	r3, r1, r3
 80185a0:	683a      	ldr	r2, [r7, #0]
 80185a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80185a6:	fb01 f202 	mul.w	r2, r1, r2
 80185aa:	1a9b      	subs	r3, r3, r2
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	dd27      	ble.n	8018600 <RegionCommonComputeRxWindowParameters+0x114>
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	4619      	mov	r1, r3
 80185b6:	69bb      	ldr	r3, [r7, #24]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	68fa      	ldr	r2, [r7, #12]
 80185bc:	fb02 f303 	mul.w	r3, r2, r3
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d007      	beq.n	80185d4 <RegionCommonComputeRxWindowParameters+0xe8>
 80185c4:	69bb      	ldr	r3, [r7, #24]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	68fa      	ldr	r2, [r7, #12]
 80185ca:	fb02 f303 	mul.w	r3, r2, r3
 80185ce:	3301      	adds	r3, #1
 80185d0:	085b      	lsrs	r3, r3, #1
 80185d2:	e005      	b.n	80185e0 <RegionCommonComputeRxWindowParameters+0xf4>
 80185d4:	69bb      	ldr	r3, [r7, #24]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	68fa      	ldr	r2, [r7, #12]
 80185da:	fb02 f303 	mul.w	r3, r2, r3
 80185de:	085b      	lsrs	r3, r3, #1
 80185e0:	1acb      	subs	r3, r1, r3
 80185e2:	683a      	ldr	r2, [r7, #0]
 80185e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80185e8:	fb01 f202 	mul.w	r2, r1, r2
 80185ec:	1a9b      	subs	r3, r3, r2
 80185ee:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80185f2:	4a19      	ldr	r2, [pc, #100]	; (8018658 <RegionCommonComputeRxWindowParameters+0x16c>)
 80185f4:	fb82 1203 	smull	r1, r2, r2, r3
 80185f8:	1192      	asrs	r2, r2, #6
 80185fa:	17db      	asrs	r3, r3, #31
 80185fc:	1ad3      	subs	r3, r2, r3
 80185fe:	e024      	b.n	801864a <RegionCommonComputeRxWindowParameters+0x15e>
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	4619      	mov	r1, r3
 8018606:	69bb      	ldr	r3, [r7, #24]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	68fa      	ldr	r2, [r7, #12]
 801860c:	fb02 f303 	mul.w	r3, r2, r3
 8018610:	2b00      	cmp	r3, #0
 8018612:	d007      	beq.n	8018624 <RegionCommonComputeRxWindowParameters+0x138>
 8018614:	69bb      	ldr	r3, [r7, #24]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	68fa      	ldr	r2, [r7, #12]
 801861a:	fb02 f303 	mul.w	r3, r2, r3
 801861e:	3301      	adds	r3, #1
 8018620:	085b      	lsrs	r3, r3, #1
 8018622:	e005      	b.n	8018630 <RegionCommonComputeRxWindowParameters+0x144>
 8018624:	69bb      	ldr	r3, [r7, #24]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	68fa      	ldr	r2, [r7, #12]
 801862a:	fb02 f303 	mul.w	r3, r2, r3
 801862e:	085b      	lsrs	r3, r3, #1
 8018630:	1acb      	subs	r3, r1, r3
 8018632:	683a      	ldr	r2, [r7, #0]
 8018634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018638:	fb01 f202 	mul.w	r2, r1, r2
 801863c:	1a9b      	subs	r3, r3, r2
 801863e:	4a06      	ldr	r2, [pc, #24]	; (8018658 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018640:	fb82 1203 	smull	r1, r2, r2, r3
 8018644:	1192      	asrs	r2, r2, #6
 8018646:	17db      	asrs	r3, r3, #31
 8018648:	1ad3      	subs	r3, r2, r3
 801864a:	69fa      	ldr	r2, [r7, #28]
 801864c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801864e:	bf00      	nop
 8018650:	3714      	adds	r7, #20
 8018652:	46bd      	mov	sp, r7
 8018654:	bc80      	pop	{r7}
 8018656:	4770      	bx	lr
 8018658:	10624dd3 	.word	0x10624dd3

0801865c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b086      	sub	sp, #24
 8018660:	af00      	add	r7, sp, #0
 8018662:	4603      	mov	r3, r0
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
 8018668:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801866a:	2300      	movs	r3, #0
 801866c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801866e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4618      	mov	r0, r3
 8018676:	f7e8 fb0b 	bl	8000c90 <__aeabi_ui2f>
 801867a:	4603      	mov	r3, r0
 801867c:	4619      	mov	r1, r3
 801867e:	68b8      	ldr	r0, [r7, #8]
 8018680:	f7e8 fa54 	bl	8000b2c <__aeabi_fsub>
 8018684:	4603      	mov	r3, r0
 8018686:	6879      	ldr	r1, [r7, #4]
 8018688:	4618      	mov	r0, r3
 801868a:	f7e8 fa4f 	bl	8000b2c <__aeabi_fsub>
 801868e:	4603      	mov	r3, r0
 8018690:	4618      	mov	r0, r3
 8018692:	f7e7 fedd 	bl	8000450 <__aeabi_f2d>
 8018696:	4602      	mov	r2, r0
 8018698:	460b      	mov	r3, r1
 801869a:	4610      	mov	r0, r2
 801869c:	4619      	mov	r1, r3
 801869e:	f006 fa83 	bl	801eba8 <floor>
 80186a2:	4602      	mov	r2, r0
 80186a4:	460b      	mov	r3, r1
 80186a6:	4610      	mov	r0, r2
 80186a8:	4619      	mov	r1, r3
 80186aa:	f7e8 f9c3 	bl	8000a34 <__aeabi_d2iz>
 80186ae:	4603      	mov	r3, r0
 80186b0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80186b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3718      	adds	r7, #24
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}

080186be <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80186be:	b590      	push	{r4, r7, lr}
 80186c0:	b087      	sub	sp, #28
 80186c2:	af00      	add	r7, sp, #0
 80186c4:	60f8      	str	r0, [r7, #12]
 80186c6:	60b9      	str	r1, [r7, #8]
 80186c8:	607a      	str	r2, [r7, #4]
 80186ca:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80186cc:	2300      	movs	r3, #0
 80186ce:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80186d0:	2300      	movs	r3, #0
 80186d2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80186d4:	2300      	movs	r3, #0
 80186d6:	757b      	strb	r3, [r7, #21]
 80186d8:	2300      	movs	r3, #0
 80186da:	753b      	strb	r3, [r7, #20]
 80186dc:	e09c      	b.n	8018818 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80186de:	2300      	movs	r3, #0
 80186e0:	74fb      	strb	r3, [r7, #19]
 80186e2:	e08f      	b.n	8018804 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	685a      	ldr	r2, [r3, #4]
 80186e8:	7d3b      	ldrb	r3, [r7, #20]
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	4413      	add	r3, r2
 80186ee:	881b      	ldrh	r3, [r3, #0]
 80186f0:	461a      	mov	r2, r3
 80186f2:	7cfb      	ldrb	r3, [r7, #19]
 80186f4:	fa42 f303 	asr.w	r3, r2, r3
 80186f8:	f003 0301 	and.w	r3, r3, #1
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d07e      	beq.n	80187fe <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	689a      	ldr	r2, [r3, #8]
 8018704:	7d79      	ldrb	r1, [r7, #21]
 8018706:	7cfb      	ldrb	r3, [r7, #19]
 8018708:	440b      	add	r3, r1
 801870a:	4619      	mov	r1, r3
 801870c:	460b      	mov	r3, r1
 801870e:	005b      	lsls	r3, r3, #1
 8018710:	440b      	add	r3, r1
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	4413      	add	r3, r2
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d06b      	beq.n	80187f4 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	781b      	ldrb	r3, [r3, #0]
 8018720:	f083 0301 	eor.w	r3, r3, #1
 8018724:	b2db      	uxtb	r3, r3
 8018726:	2b00      	cmp	r3, #0
 8018728:	d011      	beq.n	801874e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801872e:	2b00      	cmp	r3, #0
 8018730:	d00d      	beq.n	801874e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	695a      	ldr	r2, [r3, #20]
 8018736:	7d3b      	ldrb	r3, [r7, #20]
 8018738:	005b      	lsls	r3, r3, #1
 801873a:	4413      	add	r3, r2
 801873c:	881b      	ldrh	r3, [r3, #0]
 801873e:	461a      	mov	r2, r3
 8018740:	7cfb      	ldrb	r3, [r7, #19]
 8018742:	fa42 f303 	asr.w	r3, r2, r3
 8018746:	f003 0301 	and.w	r3, r3, #1
 801874a:	2b00      	cmp	r3, #0
 801874c:	d054      	beq.n	80187f8 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	785b      	ldrb	r3, [r3, #1]
 8018752:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	689a      	ldr	r2, [r3, #8]
 8018758:	7d79      	ldrb	r1, [r7, #21]
 801875a:	7cfb      	ldrb	r3, [r7, #19]
 801875c:	440b      	add	r3, r1
 801875e:	4619      	mov	r1, r3
 8018760:	460b      	mov	r3, r1
 8018762:	005b      	lsls	r3, r3, #1
 8018764:	440b      	add	r3, r1
 8018766:	009b      	lsls	r3, r3, #2
 8018768:	4413      	add	r3, r2
 801876a:	7a1b      	ldrb	r3, [r3, #8]
 801876c:	f343 0303 	sbfx	r3, r3, #0, #4
 8018770:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018772:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	689a      	ldr	r2, [r3, #8]
 8018778:	7d79      	ldrb	r1, [r7, #21]
 801877a:	7cfb      	ldrb	r3, [r7, #19]
 801877c:	440b      	add	r3, r1
 801877e:	4619      	mov	r1, r3
 8018780:	460b      	mov	r3, r1
 8018782:	005b      	lsls	r3, r3, #1
 8018784:	440b      	add	r3, r1
 8018786:	009b      	lsls	r3, r3, #2
 8018788:	4413      	add	r3, r2
 801878a:	7a1b      	ldrb	r3, [r3, #8]
 801878c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018790:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018792:	461a      	mov	r2, r3
 8018794:	4621      	mov	r1, r4
 8018796:	f7ff fbe8 	bl	8017f6a <RegionCommonValueInRange>
 801879a:	4603      	mov	r3, r0
 801879c:	2b00      	cmp	r3, #0
 801879e:	d02d      	beq.n	80187fc <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	68da      	ldr	r2, [r3, #12]
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	6899      	ldr	r1, [r3, #8]
 80187a8:	7d78      	ldrb	r0, [r7, #21]
 80187aa:	7cfb      	ldrb	r3, [r7, #19]
 80187ac:	4403      	add	r3, r0
 80187ae:	4618      	mov	r0, r3
 80187b0:	4603      	mov	r3, r0
 80187b2:	005b      	lsls	r3, r3, #1
 80187b4:	4403      	add	r3, r0
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	440b      	add	r3, r1
 80187ba:	7a5b      	ldrb	r3, [r3, #9]
 80187bc:	4619      	mov	r1, r3
 80187be:	460b      	mov	r3, r1
 80187c0:	005b      	lsls	r3, r3, #1
 80187c2:	440b      	add	r3, r1
 80187c4:	00db      	lsls	r3, r3, #3
 80187c6:	4413      	add	r3, r2
 80187c8:	7d1b      	ldrb	r3, [r3, #20]
 80187ca:	f083 0301 	eor.w	r3, r3, #1
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d003      	beq.n	80187dc <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80187d4:	7dbb      	ldrb	r3, [r7, #22]
 80187d6:	3301      	adds	r3, #1
 80187d8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80187da:	e010      	b.n	80187fe <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80187dc:	7dfb      	ldrb	r3, [r7, #23]
 80187de:	1c5a      	adds	r2, r3, #1
 80187e0:	75fa      	strb	r2, [r7, #23]
 80187e2:	461a      	mov	r2, r3
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	4413      	add	r3, r2
 80187e8:	7d79      	ldrb	r1, [r7, #21]
 80187ea:	7cfa      	ldrb	r2, [r7, #19]
 80187ec:	440a      	add	r2, r1
 80187ee:	b2d2      	uxtb	r2, r2
 80187f0:	701a      	strb	r2, [r3, #0]
 80187f2:	e004      	b.n	80187fe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80187f4:	bf00      	nop
 80187f6:	e002      	b.n	80187fe <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80187f8:	bf00      	nop
 80187fa:	e000      	b.n	80187fe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80187fc:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80187fe:	7cfb      	ldrb	r3, [r7, #19]
 8018800:	3301      	adds	r3, #1
 8018802:	74fb      	strb	r3, [r7, #19]
 8018804:	7cfb      	ldrb	r3, [r7, #19]
 8018806:	2b0f      	cmp	r3, #15
 8018808:	f67f af6c 	bls.w	80186e4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801880c:	7d7b      	ldrb	r3, [r7, #21]
 801880e:	3310      	adds	r3, #16
 8018810:	757b      	strb	r3, [r7, #21]
 8018812:	7d3b      	ldrb	r3, [r7, #20]
 8018814:	3301      	adds	r3, #1
 8018816:	753b      	strb	r3, [r7, #20]
 8018818:	7d7b      	ldrb	r3, [r7, #21]
 801881a:	b29a      	uxth	r2, r3
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	8a1b      	ldrh	r3, [r3, #16]
 8018820:	429a      	cmp	r2, r3
 8018822:	f4ff af5c 	bcc.w	80186de <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	7dfa      	ldrb	r2, [r7, #23]
 801882a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801882c:	683b      	ldr	r3, [r7, #0]
 801882e:	7dba      	ldrb	r2, [r7, #22]
 8018830:	701a      	strb	r2, [r3, #0]
}
 8018832:	bf00      	nop
 8018834:	371c      	adds	r7, #28
 8018836:	46bd      	mov	sp, r7
 8018838:	bd90      	pop	{r4, r7, pc}

0801883a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801883a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801883c:	b08b      	sub	sp, #44	; 0x2c
 801883e:	af04      	add	r7, sp, #16
 8018840:	60f8      	str	r0, [r7, #12]
 8018842:	60b9      	str	r1, [r7, #8]
 8018844:	607a      	str	r2, [r7, #4]
 8018846:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	685b      	ldr	r3, [r3, #4]
 801884c:	4618      	mov	r0, r3
 801884e:	f005 fdbf 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 8018852:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	681a      	ldr	r2, [r3, #0]
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	1ad2      	subs	r2, r2, r3
 801885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801885e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018862:	2201      	movs	r2, #1
 8018864:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	2200      	movs	r2, #0
 801886a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d004      	beq.n	801887e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018878:	697a      	ldr	r2, [r7, #20]
 801887a:	429a      	cmp	r2, r3
 801887c:	d32b      	bcc.n	80188d6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	2200      	movs	r2, #0
 8018882:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	69db      	ldr	r3, [r3, #28]
 8018888:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801888e:	68dd      	ldr	r5, [r3, #12]
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	7a5e      	ldrb	r6, [r3, #9]
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f893 c008 	ldrb.w	ip, [r3, #8]
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	7d1b      	ldrb	r3, [r3, #20]
 801889e:	68fa      	ldr	r2, [r7, #12]
 80188a0:	6992      	ldr	r2, [r2, #24]
 80188a2:	9203      	str	r2, [sp, #12]
 80188a4:	68fa      	ldr	r2, [r7, #12]
 80188a6:	f10d 0e04 	add.w	lr, sp, #4
 80188aa:	320c      	adds	r2, #12
 80188ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80188b0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80188b4:	9300      	str	r3, [sp, #0]
 80188b6:	4663      	mov	r3, ip
 80188b8:	4632      	mov	r2, r6
 80188ba:	4629      	mov	r1, r5
 80188bc:	4620      	mov	r0, r4
 80188be:	f7ff fc25 	bl	801810c <RegionCommonUpdateBandTimeOff>
 80188c2:	4602      	mov	r2, r0
 80188c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188c6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	69d8      	ldr	r0, [r3, #28]
 80188cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ce:	683a      	ldr	r2, [r7, #0]
 80188d0:	6879      	ldr	r1, [r7, #4]
 80188d2:	f7ff fef4 	bl	80186be <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d004      	beq.n	80188e8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80188de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188e0:	2200      	movs	r2, #0
 80188e2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80188e4:	2300      	movs	r3, #0
 80188e6:	e006      	b.n	80188f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80188e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d001      	beq.n	80188f4 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80188f0:	230b      	movs	r3, #11
 80188f2:	e000      	b.n	80188f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80188f4:	230c      	movs	r3, #12
    }
}
 80188f6:	4618      	mov	r0, r3
 80188f8:	371c      	adds	r7, #28
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188fe <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80188fe:	b5b0      	push	{r4, r5, r7, lr}
 8018900:	b086      	sub	sp, #24
 8018902:	af02      	add	r7, sp, #8
 8018904:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	f993 2000 	ldrsb.w	r2, [r3]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018918:	429a      	cmp	r2, r3
 801891a:	d103      	bne.n	8018924 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018922:	e026      	b.n	8018972 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018924:	7bfb      	ldrb	r3, [r7, #15]
 8018926:	3b01      	subs	r3, #1
 8018928:	b2db      	uxtb	r3, r3
 801892a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018932:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018936:	429a      	cmp	r2, r3
 8018938:	d019      	beq.n	801896e <RegionCommonGetNextLowerTxDr+0x70>
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	78d8      	ldrb	r0, [r3, #3]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	6859      	ldr	r1, [r3, #4]
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801894e:	687a      	ldr	r2, [r7, #4]
 8018950:	6892      	ldr	r2, [r2, #8]
 8018952:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018956:	9201      	str	r2, [sp, #4]
 8018958:	9300      	str	r3, [sp, #0]
 801895a:	462b      	mov	r3, r5
 801895c:	4622      	mov	r2, r4
 801895e:	f7ff fa92 	bl	8017e86 <RegionCommonChanVerifyDr>
 8018962:	4603      	mov	r3, r0
 8018964:	f083 0301 	eor.w	r3, r3, #1
 8018968:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801896a:	2b00      	cmp	r3, #0
 801896c:	d1da      	bne.n	8018924 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801896e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018972:	4618      	mov	r0, r3
 8018974:	3710      	adds	r7, #16
 8018976:	46bd      	mov	sp, r7
 8018978:	bdb0      	pop	{r4, r5, r7, pc}

0801897a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801897a:	b480      	push	{r7}
 801897c:	b083      	sub	sp, #12
 801897e:	af00      	add	r7, sp, #0
 8018980:	4603      	mov	r3, r0
 8018982:	460a      	mov	r2, r1
 8018984:	71fb      	strb	r3, [r7, #7]
 8018986:	4613      	mov	r3, r2
 8018988:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801898a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801898e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018992:	4293      	cmp	r3, r2
 8018994:	bfb8      	it	lt
 8018996:	4613      	movlt	r3, r2
 8018998:	b25b      	sxtb	r3, r3
}
 801899a:	4618      	mov	r0, r3
 801899c:	370c      	adds	r7, #12
 801899e:	46bd      	mov	sp, r7
 80189a0:	bc80      	pop	{r7}
 80189a2:	4770      	bx	lr

080189a4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80189a4:	b480      	push	{r7}
 80189a6:	b083      	sub	sp, #12
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	009b      	lsls	r3, r3, #2
 80189b2:	683a      	ldr	r2, [r7, #0]
 80189b4:	4413      	add	r3, r2
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	4a07      	ldr	r2, [pc, #28]	; (80189d8 <RegionCommonGetBandwidth+0x34>)
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d004      	beq.n	80189c8 <RegionCommonGetBandwidth+0x24>
 80189be:	4a07      	ldr	r2, [pc, #28]	; (80189dc <RegionCommonGetBandwidth+0x38>)
 80189c0:	4293      	cmp	r3, r2
 80189c2:	d003      	beq.n	80189cc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80189c4:	2300      	movs	r3, #0
 80189c6:	e002      	b.n	80189ce <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80189c8:	2301      	movs	r3, #1
 80189ca:	e000      	b.n	80189ce <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80189cc:	2302      	movs	r3, #2
    }
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	370c      	adds	r7, #12
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bc80      	pop	{r7}
 80189d6:	4770      	bx	lr
 80189d8:	0003d090 	.word	0x0003d090
 80189dc:	0007a120 	.word	0x0007a120

080189e0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b086      	sub	sp, #24
 80189e4:	af04      	add	r7, sp, #16
 80189e6:	4603      	mov	r3, r0
 80189e8:	6039      	str	r1, [r7, #0]
 80189ea:	71fb      	strb	r3, [r7, #7]
 80189ec:	4613      	mov	r3, r2
 80189ee:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80189f0:	79fb      	ldrb	r3, [r7, #7]
 80189f2:	2b05      	cmp	r3, #5
 80189f4:	d810      	bhi.n	8018a18 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80189f6:	79fb      	ldrb	r3, [r7, #7]
 80189f8:	4a0f      	ldr	r2, [pc, #60]	; (8018a38 <RegionCommonRxConfigPrint+0x58>)
 80189fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80189fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018a02:	9202      	str	r2, [sp, #8]
 8018a04:	683a      	ldr	r2, [r7, #0]
 8018a06:	9201      	str	r2, [sp, #4]
 8018a08:	9300      	str	r3, [sp, #0]
 8018a0a:	4b0c      	ldr	r3, [pc, #48]	; (8018a3c <RegionCommonRxConfigPrint+0x5c>)
 8018a0c:	2201      	movs	r2, #1
 8018a0e:	2100      	movs	r1, #0
 8018a10:	2002      	movs	r0, #2
 8018a12:	f005 fdbb 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018a16:	e00a      	b.n	8018a2e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018a18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a1c:	9301      	str	r3, [sp, #4]
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	9300      	str	r3, [sp, #0]
 8018a22:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <RegionCommonRxConfigPrint+0x60>)
 8018a24:	2201      	movs	r2, #1
 8018a26:	2100      	movs	r1, #0
 8018a28:	2002      	movs	r0, #2
 8018a2a:	f005 fdaf 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8018a2e:	bf00      	nop
 8018a30:	3708      	adds	r7, #8
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	20000144 	.word	0x20000144
 8018a3c:	0801f460 	.word	0x0801f460
 8018a40:	0801f480 	.word	0x0801f480

08018a44 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af02      	add	r7, sp, #8
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018a54:	9301      	str	r3, [sp, #4]
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	9300      	str	r3, [sp, #0]
 8018a5a:	4b05      	ldr	r3, [pc, #20]	; (8018a70 <RegionCommonTxConfigPrint+0x2c>)
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	2100      	movs	r1, #0
 8018a60:	2002      	movs	r0, #2
 8018a62:	f005 fd93 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
}
 8018a66:	bf00      	nop
 8018a68:	3708      	adds	r7, #8
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	bd80      	pop	{r7, pc}
 8018a6e:	bf00      	nop
 8018a70:	0801f49c 	.word	0x0801f49c

08018a74 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b082      	sub	sp, #8
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
 8018a7c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018a7e:	4b2d      	ldr	r3, [pc, #180]	; (8018b34 <VerifyRfFreq+0xc0>)
 8018a80:	6a1b      	ldr	r3, [r3, #32]
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	4798      	blx	r3
 8018a86:	4603      	mov	r3, r0
 8018a88:	f083 0301 	eor.w	r3, r3, #1
 8018a8c:	b2db      	uxtb	r3, r3
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d001      	beq.n	8018a96 <VerifyRfFreq+0x22>
    {
        return false;
 8018a92:	2300      	movs	r3, #0
 8018a94:	e04a      	b.n	8018b2c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	4a27      	ldr	r2, [pc, #156]	; (8018b38 <VerifyRfFreq+0xc4>)
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	d307      	bcc.n	8018aae <VerifyRfFreq+0x3a>
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	4a26      	ldr	r2, [pc, #152]	; (8018b3c <VerifyRfFreq+0xc8>)
 8018aa2:	4293      	cmp	r3, r2
 8018aa4:	d803      	bhi.n	8018aae <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	2202      	movs	r2, #2
 8018aaa:	701a      	strb	r2, [r3, #0]
 8018aac:	e03d      	b.n	8018b2a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	4a22      	ldr	r2, [pc, #136]	; (8018b3c <VerifyRfFreq+0xc8>)
 8018ab2:	4293      	cmp	r3, r2
 8018ab4:	d907      	bls.n	8018ac6 <VerifyRfFreq+0x52>
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	4a21      	ldr	r2, [pc, #132]	; (8018b40 <VerifyRfFreq+0xcc>)
 8018aba:	4293      	cmp	r3, r2
 8018abc:	d803      	bhi.n	8018ac6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018abe:	683b      	ldr	r3, [r7, #0]
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	701a      	strb	r2, [r3, #0]
 8018ac4:	e031      	b.n	8018b2a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	4a1d      	ldr	r2, [pc, #116]	; (8018b40 <VerifyRfFreq+0xcc>)
 8018aca:	4293      	cmp	r3, r2
 8018acc:	d907      	bls.n	8018ade <VerifyRfFreq+0x6a>
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	4a1c      	ldr	r2, [pc, #112]	; (8018b44 <VerifyRfFreq+0xd0>)
 8018ad2:	4293      	cmp	r3, r2
 8018ad4:	d803      	bhi.n	8018ade <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	2201      	movs	r2, #1
 8018ada:	701a      	strb	r2, [r3, #0]
 8018adc:	e025      	b.n	8018b2a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	4a19      	ldr	r2, [pc, #100]	; (8018b48 <VerifyRfFreq+0xd4>)
 8018ae2:	4293      	cmp	r3, r2
 8018ae4:	d907      	bls.n	8018af6 <VerifyRfFreq+0x82>
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	4a18      	ldr	r2, [pc, #96]	; (8018b4c <VerifyRfFreq+0xd8>)
 8018aea:	4293      	cmp	r3, r2
 8018aec:	d803      	bhi.n	8018af6 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	2205      	movs	r2, #5
 8018af2:	701a      	strb	r2, [r3, #0]
 8018af4:	e019      	b.n	8018b2a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	4a15      	ldr	r2, [pc, #84]	; (8018b50 <VerifyRfFreq+0xdc>)
 8018afa:	4293      	cmp	r3, r2
 8018afc:	d907      	bls.n	8018b0e <VerifyRfFreq+0x9a>
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	4a14      	ldr	r2, [pc, #80]	; (8018b54 <VerifyRfFreq+0xe0>)
 8018b02:	4293      	cmp	r3, r2
 8018b04:	d803      	bhi.n	8018b0e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	2203      	movs	r2, #3
 8018b0a:	701a      	strb	r2, [r3, #0]
 8018b0c:	e00d      	b.n	8018b2a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	4a11      	ldr	r2, [pc, #68]	; (8018b58 <VerifyRfFreq+0xe4>)
 8018b12:	4293      	cmp	r3, r2
 8018b14:	d307      	bcc.n	8018b26 <VerifyRfFreq+0xb2>
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	4a10      	ldr	r2, [pc, #64]	; (8018b5c <VerifyRfFreq+0xe8>)
 8018b1a:	4293      	cmp	r3, r2
 8018b1c:	d803      	bhi.n	8018b26 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	2204      	movs	r2, #4
 8018b22:	701a      	strb	r2, [r3, #0]
 8018b24:	e001      	b.n	8018b2a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018b26:	2300      	movs	r3, #0
 8018b28:	e000      	b.n	8018b2c <VerifyRfFreq+0xb8>
    }
    return true;
 8018b2a:	2301      	movs	r3, #1
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3708      	adds	r7, #8
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	0801fa3c 	.word	0x0801fa3c
 8018b38:	337055c0 	.word	0x337055c0
 8018b3c:	338eda3f 	.word	0x338eda3f
 8018b40:	33bca100 	.word	0x33bca100
 8018b44:	33c5c8c0 	.word	0x33c5c8c0
 8018b48:	33c74f5f 	.word	0x33c74f5f
 8018b4c:	33cef080 	.word	0x33cef080
 8018b50:	33d1fdbf 	.word	0x33d1fdbf
 8018b54:	33d5ce50 	.word	0x33d5ce50
 8018b58:	33d691a0 	.word	0x33d691a0
 8018b5c:	33db2580 	.word	0x33db2580

08018b60 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018b60:	b590      	push	{r4, r7, lr}
 8018b62:	b08b      	sub	sp, #44	; 0x2c
 8018b64:	af04      	add	r7, sp, #16
 8018b66:	4603      	mov	r3, r0
 8018b68:	460a      	mov	r2, r1
 8018b6a:	71fb      	strb	r3, [r7, #7]
 8018b6c:	4613      	mov	r3, r2
 8018b6e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b74:	4a1f      	ldr	r2, [pc, #124]	; (8018bf4 <GetTimeOnAir+0x94>)
 8018b76:	5cd3      	ldrb	r3, [r2, r3]
 8018b78:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b7e:	491e      	ldr	r1, [pc, #120]	; (8018bf8 <GetTimeOnAir+0x98>)
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7ff ff0f 	bl	80189a4 <RegionCommonGetBandwidth>
 8018b86:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b90:	2b07      	cmp	r3, #7
 8018b92:	d118      	bne.n	8018bc6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018b94:	4b19      	ldr	r3, [pc, #100]	; (8018bfc <GetTimeOnAir+0x9c>)
 8018b96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018b98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ba0:	fb02 f303 	mul.w	r3, r2, r3
 8018ba4:	4619      	mov	r1, r3
 8018ba6:	88bb      	ldrh	r3, [r7, #4]
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	2201      	movs	r2, #1
 8018bac:	9203      	str	r2, [sp, #12]
 8018bae:	9302      	str	r3, [sp, #8]
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	9301      	str	r3, [sp, #4]
 8018bb4:	2305      	movs	r3, #5
 8018bb6:	9300      	str	r3, [sp, #0]
 8018bb8:	2300      	movs	r3, #0
 8018bba:	460a      	mov	r2, r1
 8018bbc:	68f9      	ldr	r1, [r7, #12]
 8018bbe:	2000      	movs	r0, #0
 8018bc0:	47a0      	blx	r4
 8018bc2:	6178      	str	r0, [r7, #20]
 8018bc4:	e011      	b.n	8018bea <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018bc6:	4b0d      	ldr	r3, [pc, #52]	; (8018bfc <GetTimeOnAir+0x9c>)
 8018bc8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018bca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018bce:	88bb      	ldrh	r3, [r7, #4]
 8018bd0:	b2db      	uxtb	r3, r3
 8018bd2:	2101      	movs	r1, #1
 8018bd4:	9103      	str	r1, [sp, #12]
 8018bd6:	9302      	str	r3, [sp, #8]
 8018bd8:	2300      	movs	r3, #0
 8018bda:	9301      	str	r3, [sp, #4]
 8018bdc:	2308      	movs	r3, #8
 8018bde:	9300      	str	r3, [sp, #0]
 8018be0:	2301      	movs	r3, #1
 8018be2:	68f9      	ldr	r1, [r7, #12]
 8018be4:	2001      	movs	r0, #1
 8018be6:	47a0      	blx	r4
 8018be8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018bea:	697b      	ldr	r3, [r7, #20]
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	371c      	adds	r7, #28
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd90      	pop	{r4, r7, pc}
 8018bf4:	0801fa04 	.word	0x0801fa04
 8018bf8:	0801fa0c 	.word	0x0801fa0c
 8018bfc:	0801fa3c 	.word	0x0801fa3c

08018c00 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b088      	sub	sp, #32
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018c08:	2300      	movs	r3, #0
 8018c0a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	3b01      	subs	r3, #1
 8018c12:	2b38      	cmp	r3, #56	; 0x38
 8018c14:	f200 8128 	bhi.w	8018e68 <RegionEU868GetPhyParam+0x268>
 8018c18:	a201      	add	r2, pc, #4	; (adr r2, 8018c20 <RegionEU868GetPhyParam+0x20>)
 8018c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c1e:	bf00      	nop
 8018c20:	08018d05 	.word	0x08018d05
 8018c24:	08018d0b 	.word	0x08018d0b
 8018c28:	08018e69 	.word	0x08018e69
 8018c2c:	08018e69 	.word	0x08018e69
 8018c30:	08018e69 	.word	0x08018e69
 8018c34:	08018d11 	.word	0x08018d11
 8018c38:	08018e69 	.word	0x08018e69
 8018c3c:	08018d4b 	.word	0x08018d4b
 8018c40:	08018e69 	.word	0x08018e69
 8018c44:	08018d51 	.word	0x08018d51
 8018c48:	08018d57 	.word	0x08018d57
 8018c4c:	08018d5d 	.word	0x08018d5d
 8018c50:	08018d63 	.word	0x08018d63
 8018c54:	08018d73 	.word	0x08018d73
 8018c58:	08018d83 	.word	0x08018d83
 8018c5c:	08018d89 	.word	0x08018d89
 8018c60:	08018d91 	.word	0x08018d91
 8018c64:	08018d99 	.word	0x08018d99
 8018c68:	08018da1 	.word	0x08018da1
 8018c6c:	08018da9 	.word	0x08018da9
 8018c70:	08018db1 	.word	0x08018db1
 8018c74:	08018db9 	.word	0x08018db9
 8018c78:	08018dcd 	.word	0x08018dcd
 8018c7c:	08018dd3 	.word	0x08018dd3
 8018c80:	08018dd9 	.word	0x08018dd9
 8018c84:	08018ddf 	.word	0x08018ddf
 8018c88:	08018deb 	.word	0x08018deb
 8018c8c:	08018df7 	.word	0x08018df7
 8018c90:	08018dfd 	.word	0x08018dfd
 8018c94:	08018e05 	.word	0x08018e05
 8018c98:	08018e0b 	.word	0x08018e0b
 8018c9c:	08018e11 	.word	0x08018e11
 8018ca0:	08018e19 	.word	0x08018e19
 8018ca4:	08018d17 	.word	0x08018d17
 8018ca8:	08018e69 	.word	0x08018e69
 8018cac:	08018e69 	.word	0x08018e69
 8018cb0:	08018e69 	.word	0x08018e69
 8018cb4:	08018e69 	.word	0x08018e69
 8018cb8:	08018e69 	.word	0x08018e69
 8018cbc:	08018e69 	.word	0x08018e69
 8018cc0:	08018e69 	.word	0x08018e69
 8018cc4:	08018e69 	.word	0x08018e69
 8018cc8:	08018e69 	.word	0x08018e69
 8018ccc:	08018e69 	.word	0x08018e69
 8018cd0:	08018e69 	.word	0x08018e69
 8018cd4:	08018e69 	.word	0x08018e69
 8018cd8:	08018e69 	.word	0x08018e69
 8018cdc:	08018e1f 	.word	0x08018e1f
 8018ce0:	08018e25 	.word	0x08018e25
 8018ce4:	08018e33 	.word	0x08018e33
 8018ce8:	08018e69 	.word	0x08018e69
 8018cec:	08018e69 	.word	0x08018e69
 8018cf0:	08018e39 	.word	0x08018e39
 8018cf4:	08018e3f 	.word	0x08018e3f
 8018cf8:	08018e69 	.word	0x08018e69
 8018cfc:	08018e45 	.word	0x08018e45
 8018d00:	08018e55 	.word	0x08018e55
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018d04:	2300      	movs	r3, #0
 8018d06:	61bb      	str	r3, [r7, #24]
            break;
 8018d08:	e0af      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	61bb      	str	r3, [r7, #24]
            break;
 8018d0e:	e0ac      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018d10:	2300      	movs	r3, #0
 8018d12:	61bb      	str	r3, [r7, #24]
            break;
 8018d14:	e0a9      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018d1c:	733b      	strb	r3, [r7, #12]
 8018d1e:	2307      	movs	r3, #7
 8018d20:	737b      	strb	r3, [r7, #13]
 8018d22:	2300      	movs	r3, #0
 8018d24:	73bb      	strb	r3, [r7, #14]
 8018d26:	2310      	movs	r3, #16
 8018d28:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018d2a:	4b53      	ldr	r3, [pc, #332]	; (8018e78 <RegionEU868GetPhyParam+0x278>)
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018d32:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018d34:	4b50      	ldr	r3, [pc, #320]	; (8018e78 <RegionEU868GetPhyParam+0x278>)
 8018d36:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018d38:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018d3a:	f107 030c 	add.w	r3, r7, #12
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7ff fddd 	bl	80188fe <RegionCommonGetNextLowerTxDr>
 8018d44:	4603      	mov	r3, r0
 8018d46:	61bb      	str	r3, [r7, #24]
            break;
 8018d48:	e08f      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	61bb      	str	r3, [r7, #24]
            break;
 8018d4e:	e08c      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018d50:	2300      	movs	r3, #0
 8018d52:	61bb      	str	r3, [r7, #24]
            break;
 8018d54:	e089      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018d56:	2340      	movs	r3, #64	; 0x40
 8018d58:	61bb      	str	r3, [r7, #24]
            break;
 8018d5a:	e086      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018d5c:	2320      	movs	r3, #32
 8018d5e:	61bb      	str	r3, [r7, #24]
            break;
 8018d60:	e083      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d68:	461a      	mov	r2, r3
 8018d6a:	4b44      	ldr	r3, [pc, #272]	; (8018e7c <RegionEU868GetPhyParam+0x27c>)
 8018d6c:	5c9b      	ldrb	r3, [r3, r2]
 8018d6e:	61bb      	str	r3, [r7, #24]
            break;
 8018d70:	e07b      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d78:	461a      	mov	r2, r3
 8018d7a:	4b41      	ldr	r3, [pc, #260]	; (8018e80 <RegionEU868GetPhyParam+0x280>)
 8018d7c:	5c9b      	ldrb	r3, [r3, r2]
 8018d7e:	61bb      	str	r3, [r7, #24]
            break;
 8018d80:	e073      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018d82:	2301      	movs	r3, #1
 8018d84:	61bb      	str	r3, [r7, #24]
            break;
 8018d86:	e070      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018d88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018d8c:	61bb      	str	r3, [r7, #24]
            break;
 8018d8e:	e06c      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018d94:	61bb      	str	r3, [r7, #24]
            break;
 8018d96:	e068      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018d98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018d9c:	61bb      	str	r3, [r7, #24]
            break;
 8018d9e:	e064      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018da0:	f241 3388 	movw	r3, #5000	; 0x1388
 8018da4:	61bb      	str	r3, [r7, #24]
            break;
 8018da6:	e060      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018da8:	f241 7370 	movw	r3, #6000	; 0x1770
 8018dac:	61bb      	str	r3, [r7, #24]
            break;
 8018dae:	e05c      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018db0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018db4:	61bb      	str	r3, [r7, #24]
            break;
 8018db6:	e058      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018dbc:	4831      	ldr	r0, [pc, #196]	; (8018e84 <RegionEU868GetPhyParam+0x284>)
 8018dbe:	f001 f879 	bl	8019eb4 <randr>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018dc8:	61bb      	str	r3, [r7, #24]
            break;
 8018dca:	e04e      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018dcc:	2300      	movs	r3, #0
 8018dce:	61bb      	str	r3, [r7, #24]
            break;
 8018dd0:	e04b      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018dd2:	4b2d      	ldr	r3, [pc, #180]	; (8018e88 <RegionEU868GetPhyParam+0x288>)
 8018dd4:	61bb      	str	r3, [r7, #24]
            break;
 8018dd6:	e048      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	61bb      	str	r3, [r7, #24]
            break;
 8018ddc:	e045      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018dde:	4b26      	ldr	r3, [pc, #152]	; (8018e78 <RegionEU868GetPhyParam+0x278>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018de6:	61bb      	str	r3, [r7, #24]
            break;
 8018de8:	e03f      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018dea:	4b23      	ldr	r3, [pc, #140]	; (8018e78 <RegionEU868GetPhyParam+0x278>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018df2:	61bb      	str	r3, [r7, #24]
            break;
 8018df4:	e039      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018df6:	2310      	movs	r3, #16
 8018df8:	61bb      	str	r3, [r7, #24]
            break;
 8018dfa:	e036      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018dfc:	4b1e      	ldr	r3, [pc, #120]	; (8018e78 <RegionEU868GetPhyParam+0x278>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	61bb      	str	r3, [r7, #24]
            break;
 8018e02:	e032      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018e04:	2300      	movs	r3, #0
 8018e06:	61bb      	str	r3, [r7, #24]
            break;
 8018e08:	e02f      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	61bb      	str	r3, [r7, #24]
            break;
 8018e0e:	e02c      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018e10:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018e14:	61bb      	str	r3, [r7, #24]
            break;
 8018e16:	e028      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018e18:	4b1c      	ldr	r3, [pc, #112]	; (8018e8c <RegionEU868GetPhyParam+0x28c>)
 8018e1a:	61bb      	str	r3, [r7, #24]
            break;
 8018e1c:	e025      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018e1e:	4b1a      	ldr	r3, [pc, #104]	; (8018e88 <RegionEU868GetPhyParam+0x288>)
 8018e20:	61bb      	str	r3, [r7, #24]
            break;
 8018e22:	e022      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018e24:	2311      	movs	r3, #17
 8018e26:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018e28:	2302      	movs	r3, #2
 8018e2a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	76bb      	strb	r3, [r7, #26]
            break;
 8018e30:	e01b      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018e32:	2303      	movs	r3, #3
 8018e34:	61bb      	str	r3, [r7, #24]
            break;
 8018e36:	e018      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018e38:	4b13      	ldr	r3, [pc, #76]	; (8018e88 <RegionEU868GetPhyParam+0x288>)
 8018e3a:	61bb      	str	r3, [r7, #24]
            break;
 8018e3c:	e015      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018e3e:	2303      	movs	r3, #3
 8018e40:	61bb      	str	r3, [r7, #24]
            break;
 8018e42:	e012      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e4a:	461a      	mov	r2, r3
 8018e4c:	4b10      	ldr	r3, [pc, #64]	; (8018e90 <RegionEU868GetPhyParam+0x290>)
 8018e4e:	5c9b      	ldrb	r3, [r3, r2]
 8018e50:	61bb      	str	r3, [r7, #24]
            break;
 8018e52:	e00a      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e5a:	490e      	ldr	r1, [pc, #56]	; (8018e94 <RegionEU868GetPhyParam+0x294>)
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7ff fda1 	bl	80189a4 <RegionCommonGetBandwidth>
 8018e62:	4603      	mov	r3, r0
 8018e64:	61bb      	str	r3, [r7, #24]
            break;
 8018e66:	e000      	b.n	8018e6a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018e68:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018e6a:	69bb      	ldr	r3, [r7, #24]
 8018e6c:	61fb      	str	r3, [r7, #28]
 8018e6e:	69fb      	ldr	r3, [r7, #28]
}
 8018e70:	4618      	mov	r0, r3
 8018e72:	3720      	adds	r7, #32
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}
 8018e78:	20002298 	.word	0x20002298
 8018e7c:	0801fa2c 	.word	0x0801fa2c
 8018e80:	0801fa34 	.word	0x0801fa34
 8018e84:	fffffc18 	.word	0xfffffc18
 8018e88:	33d3e608 	.word	0x33d3e608
 8018e8c:	4009999a 	.word	0x4009999a
 8018e90:	0801fa04 	.word	0x0801fa04
 8018e94:	0801fa0c 	.word	0x0801fa0c

08018e98 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018e98:	b590      	push	{r4, r7, lr}
 8018e9a:	b085      	sub	sp, #20
 8018e9c:	af02      	add	r7, sp, #8
 8018e9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018ea0:	4b11      	ldr	r3, [pc, #68]	; (8018ee8 <RegionEU868SetBandTxDone+0x50>)
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	4b11      	ldr	r3, [pc, #68]	; (8018eec <RegionEU868SetBandTxDone+0x54>)
 8018ea6:	6819      	ldr	r1, [r3, #0]
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	4618      	mov	r0, r3
 8018eae:	4603      	mov	r3, r0
 8018eb0:	005b      	lsls	r3, r3, #1
 8018eb2:	4403      	add	r3, r0
 8018eb4:	009b      	lsls	r3, r3, #2
 8018eb6:	440b      	add	r3, r1
 8018eb8:	3309      	adds	r3, #9
 8018eba:	781b      	ldrb	r3, [r3, #0]
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	460b      	mov	r3, r1
 8018ec0:	005b      	lsls	r3, r3, #1
 8018ec2:	440b      	add	r3, r1
 8018ec4:	00db      	lsls	r3, r3, #3
 8018ec6:	18d0      	adds	r0, r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6899      	ldr	r1, [r3, #8]
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	785c      	ldrb	r4, [r3, #1]
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	691a      	ldr	r2, [r3, #16]
 8018ed4:	9200      	str	r2, [sp, #0]
 8018ed6:	68db      	ldr	r3, [r3, #12]
 8018ed8:	4622      	mov	r2, r4
 8018eda:	f7ff f8e9 	bl	80180b0 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018ede:	bf00      	nop
 8018ee0:	370c      	adds	r7, #12
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd90      	pop	{r4, r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	20002294 	.word	0x20002294
 8018eec:	20002298 	.word	0x20002298

08018ef0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b0b0      	sub	sp, #192	; 0xc0
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018efc:	2290      	movs	r2, #144	; 0x90
 8018efe:	2100      	movs	r1, #0
 8018f00:	4618      	mov	r0, r3
 8018f02:	f005 fddf 	bl	801eac4 <memset>
 8018f06:	2364      	movs	r3, #100	; 0x64
 8018f08:	863b      	strh	r3, [r7, #48]	; 0x30
 8018f0a:	2364      	movs	r3, #100	; 0x64
 8018f0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f14:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018f18:	230a      	movs	r3, #10
 8018f1a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018f1e:	2364      	movs	r3, #100	; 0x64
 8018f20:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f28:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	7a1b      	ldrb	r3, [r3, #8]
 8018f30:	2b02      	cmp	r3, #2
 8018f32:	d05e      	beq.n	8018ff2 <RegionEU868InitDefaults+0x102>
 8018f34:	2b02      	cmp	r3, #2
 8018f36:	dc6b      	bgt.n	8019010 <RegionEU868InitDefaults+0x120>
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d002      	beq.n	8018f42 <RegionEU868InitDefaults+0x52>
 8018f3c:	2b01      	cmp	r3, #1
 8018f3e:	d03f      	beq.n	8018fc0 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018f40:	e066      	b.n	8019010 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d063      	beq.n	8019012 <RegionEU868InitDefaults+0x122>
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d05f      	beq.n	8019012 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4a30      	ldr	r2, [pc, #192]	; (8019018 <RegionEU868InitDefaults+0x128>)
 8018f58:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	4a2f      	ldr	r2, [pc, #188]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018f60:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018f62:	4b2d      	ldr	r3, [pc, #180]	; (8019018 <RegionEU868InitDefaults+0x128>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	4618      	mov	r0, r3
 8018f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f6c:	2290      	movs	r2, #144	; 0x90
 8018f6e:	4619      	mov	r1, r3
 8018f70:	f000 ffb7 	bl	8019ee2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018f74:	4b29      	ldr	r3, [pc, #164]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	4a29      	ldr	r2, [pc, #164]	; (8019020 <RegionEU868InitDefaults+0x130>)
 8018f7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018f80:	4b26      	ldr	r3, [pc, #152]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	4a27      	ldr	r2, [pc, #156]	; (8019024 <RegionEU868InitDefaults+0x134>)
 8018f86:	330c      	adds	r3, #12
 8018f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018f8e:	4b23      	ldr	r3, [pc, #140]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	4a25      	ldr	r2, [pc, #148]	; (8019028 <RegionEU868InitDefaults+0x138>)
 8018f94:	3318      	adds	r3, #24
 8018f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018f9c:	4b1f      	ldr	r3, [pc, #124]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2207      	movs	r2, #7
 8018fa2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018fa6:	4b1d      	ldr	r3, [pc, #116]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018fae:	4b1b      	ldr	r3, [pc, #108]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018fb6:	2201      	movs	r2, #1
 8018fb8:	4619      	mov	r1, r3
 8018fba:	f7ff f853 	bl	8018064 <RegionCommonChanMaskCopy>
 8018fbe:	e028      	b.n	8019012 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018fc0:	4b16      	ldr	r3, [pc, #88]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018fc8:	4b14      	ldr	r3, [pc, #80]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018fd0:	4b12      	ldr	r3, [pc, #72]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018fd8:	4b10      	ldr	r3, [pc, #64]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018fe0:	4b0e      	ldr	r3, [pc, #56]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018fe8:	2201      	movs	r2, #1
 8018fea:	4619      	mov	r1, r3
 8018fec:	f7ff f83a 	bl	8018064 <RegionCommonChanMaskCopy>
            break;
 8018ff0:	e00f      	b.n	8019012 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018ff2:	4b0a      	ldr	r3, [pc, #40]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018ffa:	4b08      	ldr	r3, [pc, #32]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8019002:	4b06      	ldr	r3, [pc, #24]	; (801901c <RegionEU868InitDefaults+0x12c>)
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	430a      	orrs	r2, r1
 8019008:	b292      	uxth	r2, r2
 801900a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801900e:	e000      	b.n	8019012 <RegionEU868InitDefaults+0x122>
            break;
 8019010:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019012:	37c0      	adds	r7, #192	; 0xc0
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}
 8019018:	20002294 	.word	0x20002294
 801901c:	20002298 	.word	0x20002298
 8019020:	0801f4b8 	.word	0x0801f4b8
 8019024:	0801f4c4 	.word	0x0801f4c4
 8019028:	0801f4d0 	.word	0x0801f4d0

0801902c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
 8019034:	460b      	mov	r3, r1
 8019036:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8019038:	78fb      	ldrb	r3, [r7, #3]
 801903a:	2b0f      	cmp	r3, #15
 801903c:	d86c      	bhi.n	8019118 <RegionEU868Verify+0xec>
 801903e:	a201      	add	r2, pc, #4	; (adr r2, 8019044 <RegionEU868Verify+0x18>)
 8019040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019044:	08019085 	.word	0x08019085
 8019048:	08019119 	.word	0x08019119
 801904c:	08019119 	.word	0x08019119
 8019050:	08019119 	.word	0x08019119
 8019054:	08019119 	.word	0x08019119
 8019058:	0801909d 	.word	0x0801909d
 801905c:	080190bb 	.word	0x080190bb
 8019060:	080190d9 	.word	0x080190d9
 8019064:	08019119 	.word	0x08019119
 8019068:	080190f7 	.word	0x080190f7
 801906c:	080190f7 	.word	0x080190f7
 8019070:	08019119 	.word	0x08019119
 8019074:	08019119 	.word	0x08019119
 8019078:	08019119 	.word	0x08019119
 801907c:	08019119 	.word	0x08019119
 8019080:	08019115 	.word	0x08019115
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8019084:	2300      	movs	r3, #0
 8019086:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	f107 020f 	add.w	r2, r7, #15
 8019090:	4611      	mov	r1, r2
 8019092:	4618      	mov	r0, r3
 8019094:	f7ff fcee 	bl	8018a74 <VerifyRfFreq>
 8019098:	4603      	mov	r3, r0
 801909a:	e03e      	b.n	801911a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f993 3000 	ldrsb.w	r3, [r3]
 80190a2:	2207      	movs	r2, #7
 80190a4:	2100      	movs	r1, #0
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7fe ff5f 	bl	8017f6a <RegionCommonValueInRange>
 80190ac:	4603      	mov	r3, r0
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	bf14      	ite	ne
 80190b2:	2301      	movne	r3, #1
 80190b4:	2300      	moveq	r3, #0
 80190b6:	b2db      	uxtb	r3, r3
 80190b8:	e02f      	b.n	801911a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	f993 3000 	ldrsb.w	r3, [r3]
 80190c0:	2205      	movs	r2, #5
 80190c2:	2100      	movs	r1, #0
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7fe ff50 	bl	8017f6a <RegionCommonValueInRange>
 80190ca:	4603      	mov	r3, r0
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	bf14      	ite	ne
 80190d0:	2301      	movne	r3, #1
 80190d2:	2300      	moveq	r3, #0
 80190d4:	b2db      	uxtb	r3, r3
 80190d6:	e020      	b.n	801911a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f993 3000 	ldrsb.w	r3, [r3]
 80190de:	2207      	movs	r2, #7
 80190e0:	2100      	movs	r1, #0
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7fe ff41 	bl	8017f6a <RegionCommonValueInRange>
 80190e8:	4603      	mov	r3, r0
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	bf14      	ite	ne
 80190ee:	2301      	movne	r3, #1
 80190f0:	2300      	moveq	r3, #0
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	e011      	b.n	801911a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	f993 3000 	ldrsb.w	r3, [r3]
 80190fc:	2207      	movs	r2, #7
 80190fe:	2100      	movs	r1, #0
 8019100:	4618      	mov	r0, r3
 8019102:	f7fe ff32 	bl	8017f6a <RegionCommonValueInRange>
 8019106:	4603      	mov	r3, r0
 8019108:	2b00      	cmp	r3, #0
 801910a:	bf14      	ite	ne
 801910c:	2301      	movne	r3, #1
 801910e:	2300      	moveq	r3, #0
 8019110:	b2db      	uxtb	r3, r3
 8019112:	e002      	b.n	801911a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019114:	2301      	movs	r3, #1
 8019116:	e000      	b.n	801911a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019118:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801911a:	4618      	mov	r0, r3
 801911c:	3710      	adds	r7, #16
 801911e:	46bd      	mov	sp, r7
 8019120:	bd80      	pop	{r7, pc}
 8019122:	bf00      	nop

08019124 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b08a      	sub	sp, #40	; 0x28
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801912c:	2350      	movs	r3, #80	; 0x50
 801912e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	791b      	ldrb	r3, [r3, #4]
 8019136:	2b10      	cmp	r3, #16
 8019138:	d162      	bne.n	8019200 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	330f      	adds	r3, #15
 8019140:	781b      	ldrb	r3, [r3, #0]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d15e      	bne.n	8019204 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019146:	2300      	movs	r3, #0
 8019148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801914c:	2303      	movs	r3, #3
 801914e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019152:	e050      	b.n	80191f6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019158:	2b07      	cmp	r3, #7
 801915a:	d824      	bhi.n	80191a6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681a      	ldr	r2, [r3, #0]
 8019160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019164:	4413      	add	r3, r2
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801916a:	69ba      	ldr	r2, [r7, #24]
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6819      	ldr	r1, [r3, #0]
 8019170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019174:	3301      	adds	r3, #1
 8019176:	440b      	add	r3, r1
 8019178:	781b      	ldrb	r3, [r3, #0]
 801917a:	021b      	lsls	r3, r3, #8
 801917c:	4313      	orrs	r3, r2
 801917e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019180:	69ba      	ldr	r2, [r7, #24]
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	6819      	ldr	r1, [r3, #0]
 8019186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801918a:	3302      	adds	r3, #2
 801918c:	440b      	add	r3, r1
 801918e:	781b      	ldrb	r3, [r3, #0]
 8019190:	041b      	lsls	r3, r3, #16
 8019192:	4313      	orrs	r3, r2
 8019194:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8019196:	69bb      	ldr	r3, [r7, #24]
 8019198:	2264      	movs	r2, #100	; 0x64
 801919a:	fb02 f303 	mul.w	r3, r2, r3
 801919e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80191a0:	2300      	movs	r3, #0
 80191a2:	61fb      	str	r3, [r7, #28]
 80191a4:	e006      	b.n	80191b4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80191a6:	2300      	movs	r3, #0
 80191a8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80191aa:	2300      	movs	r3, #0
 80191ac:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80191b0:	2300      	movs	r3, #0
 80191b2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80191b4:	69bb      	ldr	r3, [r7, #24]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d00b      	beq.n	80191d2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80191ba:	f107 0318 	add.w	r3, r7, #24
 80191be:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80191c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191c4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80191c6:	f107 0310 	add.w	r3, r7, #16
 80191ca:	4618      	mov	r0, r3
 80191cc:	f000 fd0e 	bl	8019bec <RegionEU868ChannelAdd>
 80191d0:	e007      	b.n	80191e2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80191d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191d6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80191d8:	f107 030c 	add.w	r3, r7, #12
 80191dc:	4618      	mov	r0, r3
 80191de:	f000 fda7 	bl	8019d30 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80191e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191e6:	3303      	adds	r3, #3
 80191e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80191ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191f0:	3301      	adds	r3, #1
 80191f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80191f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191fa:	2b0f      	cmp	r3, #15
 80191fc:	d9aa      	bls.n	8019154 <RegionEU868ApplyCFList+0x30>
 80191fe:	e002      	b.n	8019206 <RegionEU868ApplyCFList+0xe2>
        return;
 8019200:	bf00      	nop
 8019202:	e000      	b.n	8019206 <RegionEU868ApplyCFList+0xe2>
        return;
 8019204:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019206:	3728      	adds	r7, #40	; 0x28
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	791b      	ldrb	r3, [r3, #4]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d002      	beq.n	8019222 <RegionEU868ChanMaskSet+0x16>
 801921c:	2b01      	cmp	r3, #1
 801921e:	d00b      	beq.n	8019238 <RegionEU868ChanMaskSet+0x2c>
 8019220:	e015      	b.n	801924e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019222:	4b0e      	ldr	r3, [pc, #56]	; (801925c <RegionEU868ChanMaskSet+0x50>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	2201      	movs	r2, #1
 8019230:	4619      	mov	r1, r3
 8019232:	f7fe ff17 	bl	8018064 <RegionCommonChanMaskCopy>
            break;
 8019236:	e00c      	b.n	8019252 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019238:	4b08      	ldr	r3, [pc, #32]	; (801925c <RegionEU868ChanMaskSet+0x50>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	2201      	movs	r2, #1
 8019246:	4619      	mov	r1, r3
 8019248:	f7fe ff0c 	bl	8018064 <RegionCommonChanMaskCopy>
            break;
 801924c:	e001      	b.n	8019252 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801924e:	2300      	movs	r3, #0
 8019250:	e000      	b.n	8019254 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8019252:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019254:	4618      	mov	r0, r3
 8019256:	3708      	adds	r7, #8
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}
 801925c:	20002298 	.word	0x20002298

08019260 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b088      	sub	sp, #32
 8019264:	af02      	add	r7, sp, #8
 8019266:	60ba      	str	r2, [r7, #8]
 8019268:	607b      	str	r3, [r7, #4]
 801926a:	4603      	mov	r3, r0
 801926c:	73fb      	strb	r3, [r7, #15]
 801926e:	460b      	mov	r3, r1
 8019270:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8019272:	2300      	movs	r3, #0
 8019274:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8019276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801927a:	2b07      	cmp	r3, #7
 801927c:	bfa8      	it	ge
 801927e:	2307      	movge	r3, #7
 8019280:	b25a      	sxtb	r2, r3
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801928c:	491e      	ldr	r1, [pc, #120]	; (8019308 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801928e:	4618      	mov	r0, r3
 8019290:	f7ff fb88 	bl	80189a4 <RegionCommonGetBandwidth>
 8019294:	4603      	mov	r3, r0
 8019296:	b2da      	uxtb	r2, r3
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192a2:	2b07      	cmp	r3, #7
 80192a4:	d10a      	bne.n	80192bc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192ac:	461a      	mov	r2, r3
 80192ae:	4b17      	ldr	r3, [pc, #92]	; (801930c <RegionEU868ComputeRxWindowParameters+0xac>)
 80192b0:	5c9b      	ldrb	r3, [r3, r2]
 80192b2:	4618      	mov	r0, r3
 80192b4:	f7ff f90a 	bl	80184cc <RegionCommonComputeSymbolTimeFsk>
 80192b8:	6178      	str	r0, [r7, #20]
 80192ba:	e011      	b.n	80192e0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192c2:	461a      	mov	r2, r3
 80192c4:	4b11      	ldr	r3, [pc, #68]	; (801930c <RegionEU868ComputeRxWindowParameters+0xac>)
 80192c6:	5c9a      	ldrb	r2, [r3, r2]
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192ce:	4619      	mov	r1, r3
 80192d0:	4b0d      	ldr	r3, [pc, #52]	; (8019308 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80192d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80192d6:	4619      	mov	r1, r3
 80192d8:	4610      	mov	r0, r2
 80192da:	f7ff f8e1 	bl	80184a0 <RegionCommonComputeSymbolTimeLoRa>
 80192de:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80192e0:	4b0b      	ldr	r3, [pc, #44]	; (8019310 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80192e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192e4:	4798      	blx	r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	3308      	adds	r3, #8
 80192ea:	687a      	ldr	r2, [r7, #4]
 80192ec:	320c      	adds	r2, #12
 80192ee:	7bb9      	ldrb	r1, [r7, #14]
 80192f0:	9201      	str	r2, [sp, #4]
 80192f2:	9300      	str	r3, [sp, #0]
 80192f4:	4603      	mov	r3, r0
 80192f6:	68ba      	ldr	r2, [r7, #8]
 80192f8:	6978      	ldr	r0, [r7, #20]
 80192fa:	f7ff f8f7 	bl	80184ec <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80192fe:	bf00      	nop
 8019300:	3718      	adds	r7, #24
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	0801fa0c 	.word	0x0801fa0c
 801930c:	0801fa04 	.word	0x0801fa04
 8019310:	0801fa3c 	.word	0x0801fa3c

08019314 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019314:	b5b0      	push	{r4, r5, r7, lr}
 8019316:	b090      	sub	sp, #64	; 0x40
 8019318:	af0a      	add	r7, sp, #40	; 0x28
 801931a:	6078      	str	r0, [r7, #4]
 801931c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	785b      	ldrb	r3, [r3, #1]
 8019322:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019328:	2300      	movs	r3, #0
 801932a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	685b      	ldr	r3, [r3, #4]
 8019330:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019332:	4b5a      	ldr	r3, [pc, #360]	; (801949c <RegionEU868RxConfig+0x188>)
 8019334:	685b      	ldr	r3, [r3, #4]
 8019336:	4798      	blx	r3
 8019338:	4603      	mov	r3, r0
 801933a:	2b00      	cmp	r3, #0
 801933c:	d001      	beq.n	8019342 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801933e:	2300      	movs	r3, #0
 8019340:	e0a8      	b.n	8019494 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	7cdb      	ldrb	r3, [r3, #19]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d126      	bne.n	8019398 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801934a:	4b55      	ldr	r3, [pc, #340]	; (80194a0 <RegionEU868RxConfig+0x18c>)
 801934c:	681a      	ldr	r2, [r3, #0]
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	4619      	mov	r1, r3
 8019354:	460b      	mov	r3, r1
 8019356:	005b      	lsls	r3, r3, #1
 8019358:	440b      	add	r3, r1
 801935a:	009b      	lsls	r3, r3, #2
 801935c:	4413      	add	r3, r2
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019362:	4b4f      	ldr	r3, [pc, #316]	; (80194a0 <RegionEU868RxConfig+0x18c>)
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	781b      	ldrb	r3, [r3, #0]
 801936a:	4619      	mov	r1, r3
 801936c:	460b      	mov	r3, r1
 801936e:	005b      	lsls	r3, r3, #1
 8019370:	440b      	add	r3, r1
 8019372:	009b      	lsls	r3, r3, #2
 8019374:	4413      	add	r3, r2
 8019376:	3304      	adds	r3, #4
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d00c      	beq.n	8019398 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801937e:	4b48      	ldr	r3, [pc, #288]	; (80194a0 <RegionEU868RxConfig+0x18c>)
 8019380:	681a      	ldr	r2, [r3, #0]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	781b      	ldrb	r3, [r3, #0]
 8019386:	4619      	mov	r1, r3
 8019388:	460b      	mov	r3, r1
 801938a:	005b      	lsls	r3, r3, #1
 801938c:	440b      	add	r3, r1
 801938e:	009b      	lsls	r3, r3, #2
 8019390:	4413      	add	r3, r2
 8019392:	3304      	adds	r3, #4
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8019398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801939c:	4a41      	ldr	r2, [pc, #260]	; (80194a4 <RegionEU868RxConfig+0x190>)
 801939e:	5cd3      	ldrb	r3, [r2, r3]
 80193a0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80193a2:	4b3e      	ldr	r3, [pc, #248]	; (801949c <RegionEU868RxConfig+0x188>)
 80193a4:	68db      	ldr	r3, [r3, #12]
 80193a6:	6938      	ldr	r0, [r7, #16]
 80193a8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80193aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193ae:	2b07      	cmp	r3, #7
 80193b0:	d128      	bne.n	8019404 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80193b2:	2300      	movs	r3, #0
 80193b4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80193b6:	4b39      	ldr	r3, [pc, #228]	; (801949c <RegionEU868RxConfig+0x188>)
 80193b8:	699c      	ldr	r4, [r3, #24]
 80193ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80193be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80193c2:	fb02 f303 	mul.w	r3, r2, r3
 80193c6:	4619      	mov	r1, r3
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	689b      	ldr	r3, [r3, #8]
 80193cc:	b29b      	uxth	r3, r3
 80193ce:	687a      	ldr	r2, [r7, #4]
 80193d0:	7c92      	ldrb	r2, [r2, #18]
 80193d2:	7df8      	ldrb	r0, [r7, #23]
 80193d4:	9209      	str	r2, [sp, #36]	; 0x24
 80193d6:	2200      	movs	r2, #0
 80193d8:	9208      	str	r2, [sp, #32]
 80193da:	2200      	movs	r2, #0
 80193dc:	9207      	str	r2, [sp, #28]
 80193de:	2200      	movs	r2, #0
 80193e0:	9206      	str	r2, [sp, #24]
 80193e2:	2201      	movs	r2, #1
 80193e4:	9205      	str	r2, [sp, #20]
 80193e6:	2200      	movs	r2, #0
 80193e8:	9204      	str	r2, [sp, #16]
 80193ea:	2200      	movs	r2, #0
 80193ec:	9203      	str	r2, [sp, #12]
 80193ee:	9302      	str	r3, [sp, #8]
 80193f0:	2305      	movs	r3, #5
 80193f2:	9301      	str	r3, [sp, #4]
 80193f4:	4b2c      	ldr	r3, [pc, #176]	; (80194a8 <RegionEU868RxConfig+0x194>)
 80193f6:	9300      	str	r3, [sp, #0]
 80193f8:	2300      	movs	r3, #0
 80193fa:	460a      	mov	r2, r1
 80193fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019400:	47a0      	blx	r4
 8019402:	e024      	b.n	801944e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019404:	2301      	movs	r3, #1
 8019406:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019408:	4b24      	ldr	r3, [pc, #144]	; (801949c <RegionEU868RxConfig+0x188>)
 801940a:	699c      	ldr	r4, [r3, #24]
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	789b      	ldrb	r3, [r3, #2]
 8019410:	461d      	mov	r5, r3
 8019412:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	689b      	ldr	r3, [r3, #8]
 801941a:	b29b      	uxth	r3, r3
 801941c:	687a      	ldr	r2, [r7, #4]
 801941e:	7c92      	ldrb	r2, [r2, #18]
 8019420:	7df8      	ldrb	r0, [r7, #23]
 8019422:	9209      	str	r2, [sp, #36]	; 0x24
 8019424:	2201      	movs	r2, #1
 8019426:	9208      	str	r2, [sp, #32]
 8019428:	2200      	movs	r2, #0
 801942a:	9207      	str	r2, [sp, #28]
 801942c:	2200      	movs	r2, #0
 801942e:	9206      	str	r2, [sp, #24]
 8019430:	2200      	movs	r2, #0
 8019432:	9205      	str	r2, [sp, #20]
 8019434:	2200      	movs	r2, #0
 8019436:	9204      	str	r2, [sp, #16]
 8019438:	2200      	movs	r2, #0
 801943a:	9203      	str	r2, [sp, #12]
 801943c:	9302      	str	r3, [sp, #8]
 801943e:	2308      	movs	r3, #8
 8019440:	9301      	str	r3, [sp, #4]
 8019442:	2300      	movs	r3, #0
 8019444:	9300      	str	r3, [sp, #0]
 8019446:	2301      	movs	r3, #1
 8019448:	460a      	mov	r2, r1
 801944a:	4629      	mov	r1, r5
 801944c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	7c5b      	ldrb	r3, [r3, #17]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d005      	beq.n	8019462 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8019456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801945a:	4a14      	ldr	r2, [pc, #80]	; (80194ac <RegionEU868RxConfig+0x198>)
 801945c:	5cd3      	ldrb	r3, [r2, r3]
 801945e:	75bb      	strb	r3, [r7, #22]
 8019460:	e004      	b.n	801946c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8019462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019466:	4a12      	ldr	r2, [pc, #72]	; (80194b0 <RegionEU868RxConfig+0x19c>)
 8019468:	5cd3      	ldrb	r3, [r2, r3]
 801946a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801946c:	4b0b      	ldr	r3, [pc, #44]	; (801949c <RegionEU868RxConfig+0x188>)
 801946e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019470:	7dba      	ldrb	r2, [r7, #22]
 8019472:	320d      	adds	r2, #13
 8019474:	b2d1      	uxtb	r1, r2
 8019476:	7dfa      	ldrb	r2, [r7, #23]
 8019478:	4610      	mov	r0, r2
 801947a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	7cdb      	ldrb	r3, [r3, #19]
 8019480:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019484:	6939      	ldr	r1, [r7, #16]
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff faaa 	bl	80189e0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801948c:	683b      	ldr	r3, [r7, #0]
 801948e:	7bfa      	ldrb	r2, [r7, #15]
 8019490:	701a      	strb	r2, [r3, #0]
    return true;
 8019492:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019494:	4618      	mov	r0, r3
 8019496:	3718      	adds	r7, #24
 8019498:	46bd      	mov	sp, r7
 801949a:	bdb0      	pop	{r4, r5, r7, pc}
 801949c:	0801fa3c 	.word	0x0801fa3c
 80194a0:	20002298 	.word	0x20002298
 80194a4:	0801fa04 	.word	0x0801fa04
 80194a8:	00014585 	.word	0x00014585
 80194ac:	0801fa34 	.word	0x0801fa34
 80194b0:	0801fa2c 	.word	0x0801fa2c

080194b4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80194b4:	b590      	push	{r4, r7, lr}
 80194b6:	b093      	sub	sp, #76	; 0x4c
 80194b8:	af0a      	add	r7, sp, #40	; 0x28
 80194ba:	60f8      	str	r0, [r7, #12]
 80194bc:	60b9      	str	r1, [r7, #8]
 80194be:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194c6:	461a      	mov	r2, r3
 80194c8:	4b5d      	ldr	r3, [pc, #372]	; (8019640 <RegionEU868TxConfig+0x18c>)
 80194ca:	5c9b      	ldrb	r3, [r3, r2]
 80194cc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80194d4:	4b5b      	ldr	r3, [pc, #364]	; (8019644 <RegionEU868TxConfig+0x190>)
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	4b5b      	ldr	r3, [pc, #364]	; (8019648 <RegionEU868TxConfig+0x194>)
 80194da:	6819      	ldr	r1, [r3, #0]
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	461c      	mov	r4, r3
 80194e2:	4623      	mov	r3, r4
 80194e4:	005b      	lsls	r3, r3, #1
 80194e6:	4423      	add	r3, r4
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	440b      	add	r3, r1
 80194ec:	3309      	adds	r3, #9
 80194ee:	781b      	ldrb	r3, [r3, #0]
 80194f0:	4619      	mov	r1, r3
 80194f2:	460b      	mov	r3, r1
 80194f4:	005b      	lsls	r3, r3, #1
 80194f6:	440b      	add	r3, r1
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	4413      	add	r3, r2
 80194fc:	3302      	adds	r3, #2
 80194fe:	f993 3000 	ldrsb.w	r3, [r3]
 8019502:	4619      	mov	r1, r3
 8019504:	f7ff fa39 	bl	801897a <RegionCommonLimitTxPower>
 8019508:	4603      	mov	r3, r0
 801950a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019512:	494e      	ldr	r1, [pc, #312]	; (801964c <RegionEU868TxConfig+0x198>)
 8019514:	4618      	mov	r0, r3
 8019516:	f7ff fa45 	bl	80189a4 <RegionCommonGetBandwidth>
 801951a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801951c:	2300      	movs	r3, #0
 801951e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	6859      	ldr	r1, [r3, #4]
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	689a      	ldr	r2, [r3, #8]
 8019528:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801952c:	4618      	mov	r0, r3
 801952e:	f7ff f895 	bl	801865c <RegionCommonComputeTxPower>
 8019532:	4603      	mov	r3, r0
 8019534:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019536:	4b46      	ldr	r3, [pc, #280]	; (8019650 <RegionEU868TxConfig+0x19c>)
 8019538:	68da      	ldr	r2, [r3, #12]
 801953a:	4b43      	ldr	r3, [pc, #268]	; (8019648 <RegionEU868TxConfig+0x194>)
 801953c:	6819      	ldr	r1, [r3, #0]
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	4618      	mov	r0, r3
 8019544:	4603      	mov	r3, r0
 8019546:	005b      	lsls	r3, r3, #1
 8019548:	4403      	add	r3, r0
 801954a:	009b      	lsls	r3, r3, #2
 801954c:	440b      	add	r3, r1
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4618      	mov	r0, r3
 8019552:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801955a:	2b07      	cmp	r3, #7
 801955c:	d124      	bne.n	80195a8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801955e:	2300      	movs	r3, #0
 8019560:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019562:	4b3b      	ldr	r3, [pc, #236]	; (8019650 <RegionEU868TxConfig+0x19c>)
 8019564:	69dc      	ldr	r4, [r3, #28]
 8019566:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801956a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801956e:	fb02 f303 	mul.w	r3, r2, r3
 8019572:	461a      	mov	r2, r3
 8019574:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019578:	7ff8      	ldrb	r0, [r7, #31]
 801957a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801957e:	9308      	str	r3, [sp, #32]
 8019580:	2300      	movs	r3, #0
 8019582:	9307      	str	r3, [sp, #28]
 8019584:	2300      	movs	r3, #0
 8019586:	9306      	str	r3, [sp, #24]
 8019588:	2300      	movs	r3, #0
 801958a:	9305      	str	r3, [sp, #20]
 801958c:	2301      	movs	r3, #1
 801958e:	9304      	str	r3, [sp, #16]
 8019590:	2300      	movs	r3, #0
 8019592:	9303      	str	r3, [sp, #12]
 8019594:	2305      	movs	r3, #5
 8019596:	9302      	str	r3, [sp, #8]
 8019598:	2300      	movs	r3, #0
 801959a:	9301      	str	r3, [sp, #4]
 801959c:	9200      	str	r2, [sp, #0]
 801959e:	69bb      	ldr	r3, [r7, #24]
 80195a0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80195a4:	47a0      	blx	r4
 80195a6:	e01d      	b.n	80195e4 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80195a8:	2301      	movs	r3, #1
 80195aa:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80195ac:	4b28      	ldr	r3, [pc, #160]	; (8019650 <RegionEU868TxConfig+0x19c>)
 80195ae:	69dc      	ldr	r4, [r3, #28]
 80195b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80195b4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80195b8:	7ff8      	ldrb	r0, [r7, #31]
 80195ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80195be:	9208      	str	r2, [sp, #32]
 80195c0:	2200      	movs	r2, #0
 80195c2:	9207      	str	r2, [sp, #28]
 80195c4:	2200      	movs	r2, #0
 80195c6:	9206      	str	r2, [sp, #24]
 80195c8:	2200      	movs	r2, #0
 80195ca:	9205      	str	r2, [sp, #20]
 80195cc:	2201      	movs	r2, #1
 80195ce:	9204      	str	r2, [sp, #16]
 80195d0:	2200      	movs	r2, #0
 80195d2:	9203      	str	r2, [sp, #12]
 80195d4:	2208      	movs	r2, #8
 80195d6:	9202      	str	r2, [sp, #8]
 80195d8:	2201      	movs	r2, #1
 80195da:	9201      	str	r2, [sp, #4]
 80195dc:	9300      	str	r3, [sp, #0]
 80195de:	69bb      	ldr	r3, [r7, #24]
 80195e0:	2200      	movs	r2, #0
 80195e2:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80195e4:	4b18      	ldr	r3, [pc, #96]	; (8019648 <RegionEU868TxConfig+0x194>)
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	4619      	mov	r1, r3
 80195ee:	460b      	mov	r3, r1
 80195f0:	005b      	lsls	r3, r3, #1
 80195f2:	440b      	add	r3, r1
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	4413      	add	r3, r2
 80195f8:	681a      	ldr	r2, [r3, #0]
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019600:	4619      	mov	r1, r3
 8019602:	4610      	mov	r0, r2
 8019604:	f7ff fa1e 	bl	8018a44 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	899b      	ldrh	r3, [r3, #12]
 8019612:	4619      	mov	r1, r3
 8019614:	4610      	mov	r0, r2
 8019616:	f7ff faa3 	bl	8018b60 <GetTimeOnAir>
 801961a:	4602      	mov	r2, r0
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019620:	4b0b      	ldr	r3, [pc, #44]	; (8019650 <RegionEU868TxConfig+0x19c>)
 8019622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019624:	68fa      	ldr	r2, [r7, #12]
 8019626:	8992      	ldrh	r2, [r2, #12]
 8019628:	b2d1      	uxtb	r1, r2
 801962a:	7ffa      	ldrb	r2, [r7, #31]
 801962c:	4610      	mov	r0, r2
 801962e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	7f7a      	ldrb	r2, [r7, #29]
 8019634:	701a      	strb	r2, [r3, #0]
    return true;
 8019636:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019638:	4618      	mov	r0, r3
 801963a:	3724      	adds	r7, #36	; 0x24
 801963c:	46bd      	mov	sp, r7
 801963e:	bd90      	pop	{r4, r7, pc}
 8019640:	0801fa04 	.word	0x0801fa04
 8019644:	20002294 	.word	0x20002294
 8019648:	20002298 	.word	0x20002298
 801964c:	0801fa0c 	.word	0x0801fa0c
 8019650:	0801fa3c 	.word	0x0801fa3c

08019654 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019654:	b590      	push	{r4, r7, lr}
 8019656:	b093      	sub	sp, #76	; 0x4c
 8019658:	af00      	add	r7, sp, #0
 801965a:	60f8      	str	r0, [r7, #12]
 801965c:	60b9      	str	r1, [r7, #8]
 801965e:	607a      	str	r2, [r7, #4]
 8019660:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019662:	2307      	movs	r3, #7
 8019664:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019668:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801966c:	2200      	movs	r2, #0
 801966e:	601a      	str	r2, [r3, #0]
 8019670:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019672:	2300      	movs	r3, #0
 8019674:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019678:	2300      	movs	r3, #0
 801967a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801967e:	2300      	movs	r3, #0
 8019680:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019682:	e085      	b.n	8019790 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	685a      	ldr	r2, [r3, #4]
 8019688:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801968c:	4413      	add	r3, r2
 801968e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019692:	4611      	mov	r1, r2
 8019694:	4618      	mov	r0, r3
 8019696:	f7fe fe29 	bl	80182ec <RegionCommonParseLinkAdrReq>
 801969a:	4603      	mov	r3, r0
 801969c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80196a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d07b      	beq.n	80197a0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80196a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80196ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80196b0:	4413      	add	r3, r2
 80196b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80196b6:	2307      	movs	r3, #7
 80196b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80196bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80196c0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80196c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d109      	bne.n	80196de <RegionEU868LinkAdrReq+0x8a>
 80196ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d106      	bne.n	80196de <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80196d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196d4:	f023 0301 	bic.w	r3, r3, #1
 80196d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80196dc:	e058      	b.n	8019790 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80196de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d003      	beq.n	80196ee <RegionEU868LinkAdrReq+0x9a>
 80196e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80196ea:	2b05      	cmp	r3, #5
 80196ec:	d903      	bls.n	80196f6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80196ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80196f2:	2b06      	cmp	r3, #6
 80196f4:	d906      	bls.n	8019704 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80196f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196fa:	f023 0301 	bic.w	r3, r3, #1
 80196fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019702:	e045      	b.n	8019790 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019704:	2300      	movs	r3, #0
 8019706:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801970a:	e03d      	b.n	8019788 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801970c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019710:	2b06      	cmp	r3, #6
 8019712:	d118      	bne.n	8019746 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019714:	4b5f      	ldr	r3, [pc, #380]	; (8019894 <RegionEU868LinkAdrReq+0x240>)
 8019716:	6819      	ldr	r1, [r3, #0]
 8019718:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801971c:	4613      	mov	r3, r2
 801971e:	005b      	lsls	r3, r3, #1
 8019720:	4413      	add	r3, r2
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	440b      	add	r3, r1
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d028      	beq.n	801977e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801972c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019730:	2201      	movs	r2, #1
 8019732:	fa02 f303 	lsl.w	r3, r2, r3
 8019736:	b21a      	sxth	r2, r3
 8019738:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801973a:	b21b      	sxth	r3, r3
 801973c:	4313      	orrs	r3, r2
 801973e:	b21b      	sxth	r3, r3
 8019740:	b29b      	uxth	r3, r3
 8019742:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019744:	e01b      	b.n	801977e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019746:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019748:	461a      	mov	r2, r3
 801974a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801974e:	fa42 f303 	asr.w	r3, r2, r3
 8019752:	f003 0301 	and.w	r3, r3, #1
 8019756:	2b00      	cmp	r3, #0
 8019758:	d011      	beq.n	801977e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801975a:	4b4e      	ldr	r3, [pc, #312]	; (8019894 <RegionEU868LinkAdrReq+0x240>)
 801975c:	6819      	ldr	r1, [r3, #0]
 801975e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019762:	4613      	mov	r3, r2
 8019764:	005b      	lsls	r3, r3, #1
 8019766:	4413      	add	r3, r2
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	440b      	add	r3, r1
 801976c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801976e:	2b00      	cmp	r3, #0
 8019770:	d105      	bne.n	801977e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019772:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019776:	f023 0301 	bic.w	r3, r3, #1
 801977a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801977e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019782:	3301      	adds	r3, #1
 8019784:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019788:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801978c:	2b0f      	cmp	r3, #15
 801978e:	d9bd      	bls.n	801970c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	7a1b      	ldrb	r3, [r3, #8]
 8019794:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019798:	429a      	cmp	r2, r3
 801979a:	f4ff af73 	bcc.w	8019684 <RegionEU868LinkAdrReq+0x30>
 801979e:	e000      	b.n	80197a2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80197a0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80197a2:	2302      	movs	r3, #2
 80197a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	7a5b      	ldrb	r3, [r3, #9]
 80197ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80197b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7ff fa23 	bl	8018c00 <RegionEU868GetPhyParam>
 80197ba:	4603      	mov	r3, r0
 80197bc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80197be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80197c2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	7a9b      	ldrb	r3, [r3, #10]
 80197c8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80197ca:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80197ce:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80197d0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80197d4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80197d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80197da:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80197e2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80197ea:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	7b5b      	ldrb	r3, [r3, #13]
 80197f0:	b25b      	sxtb	r3, r3
 80197f2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80197f4:	2310      	movs	r3, #16
 80197f6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80197f8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80197fc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80197fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019800:	b25b      	sxtb	r3, r3
 8019802:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019806:	2307      	movs	r3, #7
 8019808:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801980c:	4b21      	ldr	r3, [pc, #132]	; (8019894 <RegionEU868LinkAdrReq+0x240>)
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019812:	2307      	movs	r3, #7
 8019814:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019818:	2300      	movs	r3, #0
 801981a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019824:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801982c:	1c9a      	adds	r2, r3, #2
 801982e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019832:	1c59      	adds	r1, r3, #1
 8019834:	f107 0010 	add.w	r0, r7, #16
 8019838:	4623      	mov	r3, r4
 801983a:	f7fe fda8 	bl	801838e <RegionCommonLinkAdrReqVerifyParams>
 801983e:	4603      	mov	r3, r0
 8019840:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019848:	2b07      	cmp	r3, #7
 801984a:	d10d      	bne.n	8019868 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801984c:	4b11      	ldr	r3, [pc, #68]	; (8019894 <RegionEU868LinkAdrReq+0x240>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019854:	220c      	movs	r2, #12
 8019856:	2100      	movs	r1, #0
 8019858:	4618      	mov	r0, r3
 801985a:	f000 fb7d 	bl	8019f58 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801985e:	4b0d      	ldr	r3, [pc, #52]	; (8019894 <RegionEU868LinkAdrReq+0x240>)
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019864:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019868:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019870:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019878:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019882:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019886:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801988c:	4618      	mov	r0, r3
 801988e:	374c      	adds	r7, #76	; 0x4c
 8019890:	46bd      	mov	sp, r7
 8019892:	bd90      	pop	{r4, r7, pc}
 8019894:	20002298 	.word	0x20002298

08019898 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b084      	sub	sp, #16
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80198a0:	2307      	movs	r3, #7
 80198a2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80198a4:	2300      	movs	r3, #0
 80198a6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	f107 020e 	add.w	r2, r7, #14
 80198b0:	4611      	mov	r1, r2
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7ff f8de 	bl	8018a74 <VerifyRfFreq>
 80198b8:	4603      	mov	r3, r0
 80198ba:	f083 0301 	eor.w	r3, r3, #1
 80198be:	b2db      	uxtb	r3, r3
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d003      	beq.n	80198cc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80198c4:	7bfb      	ldrb	r3, [r7, #15]
 80198c6:	f023 0301 	bic.w	r3, r3, #1
 80198ca:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f993 3000 	ldrsb.w	r3, [r3]
 80198d2:	2207      	movs	r2, #7
 80198d4:	2100      	movs	r1, #0
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7fe fb47 	bl	8017f6a <RegionCommonValueInRange>
 80198dc:	4603      	mov	r3, r0
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d103      	bne.n	80198ea <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80198e2:	7bfb      	ldrb	r3, [r7, #15]
 80198e4:	f023 0302 	bic.w	r3, r3, #2
 80198e8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80198f0:	2205      	movs	r2, #5
 80198f2:	2100      	movs	r1, #0
 80198f4:	4618      	mov	r0, r3
 80198f6:	f7fe fb38 	bl	8017f6a <RegionCommonValueInRange>
 80198fa:	4603      	mov	r3, r0
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d103      	bne.n	8019908 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019900:	7bfb      	ldrb	r3, [r7, #15]
 8019902:	f023 0304 	bic.w	r3, r3, #4
 8019906:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019908:	7bfb      	ldrb	r3, [r7, #15]
}
 801990a:	4618      	mov	r0, r3
 801990c:	3710      	adds	r7, #16
 801990e:	46bd      	mov	sp, r7
 8019910:	bd80      	pop	{r7, pc}
	...

08019914 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b086      	sub	sp, #24
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801991c:	2303      	movs	r3, #3
 801991e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d114      	bne.n	8019954 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019930:	b2db      	uxtb	r3, r3
 8019932:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019934:	f107 0308 	add.w	r3, r7, #8
 8019938:	4618      	mov	r0, r3
 801993a:	f000 f9f9 	bl	8019d30 <RegionEU868ChannelsRemove>
 801993e:	4603      	mov	r3, r0
 8019940:	f083 0301 	eor.w	r3, r3, #1
 8019944:	b2db      	uxtb	r3, r3
 8019946:	2b00      	cmp	r3, #0
 8019948:	d03b      	beq.n	80199c2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801994a:	7dfb      	ldrb	r3, [r7, #23]
 801994c:	f023 0303 	bic.w	r3, r3, #3
 8019950:	75fb      	strb	r3, [r7, #23]
 8019952:	e036      	b.n	80199c2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019960:	b2db      	uxtb	r3, r3
 8019962:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019964:	f107 030c 	add.w	r3, r7, #12
 8019968:	4618      	mov	r0, r3
 801996a:	f000 f93f 	bl	8019bec <RegionEU868ChannelAdd>
 801996e:	4603      	mov	r3, r0
 8019970:	2b06      	cmp	r3, #6
 8019972:	d820      	bhi.n	80199b6 <RegionEU868NewChannelReq+0xa2>
 8019974:	a201      	add	r2, pc, #4	; (adr r2, 801997c <RegionEU868NewChannelReq+0x68>)
 8019976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801997a:	bf00      	nop
 801997c:	080199c1 	.word	0x080199c1
 8019980:	080199b7 	.word	0x080199b7
 8019984:	080199b7 	.word	0x080199b7
 8019988:	080199b7 	.word	0x080199b7
 801998c:	08019999 	.word	0x08019999
 8019990:	080199a3 	.word	0x080199a3
 8019994:	080199ad 	.word	0x080199ad
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019998:	7dfb      	ldrb	r3, [r7, #23]
 801999a:	f023 0301 	bic.w	r3, r3, #1
 801999e:	75fb      	strb	r3, [r7, #23]
                break;
 80199a0:	e00f      	b.n	80199c2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80199a2:	7dfb      	ldrb	r3, [r7, #23]
 80199a4:	f023 0302 	bic.w	r3, r3, #2
 80199a8:	75fb      	strb	r3, [r7, #23]
                break;
 80199aa:	e00a      	b.n	80199c2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80199ac:	7dfb      	ldrb	r3, [r7, #23]
 80199ae:	f023 0303 	bic.w	r3, r3, #3
 80199b2:	75fb      	strb	r3, [r7, #23]
                break;
 80199b4:	e005      	b.n	80199c2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80199b6:	7dfb      	ldrb	r3, [r7, #23]
 80199b8:	f023 0303 	bic.w	r3, r3, #3
 80199bc:	75fb      	strb	r3, [r7, #23]
                break;
 80199be:	e000      	b.n	80199c2 <RegionEU868NewChannelReq+0xae>
                break;
 80199c0:	bf00      	nop
            }
        }
    }

    return status;
 80199c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80199c6:	4618      	mov	r0, r3
 80199c8:	3718      	adds	r7, #24
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd80      	pop	{r7, pc}
 80199ce:	bf00      	nop

080199d0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80199d0:	b480      	push	{r7}
 80199d2:	b083      	sub	sp, #12
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80199d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80199dc:	4618      	mov	r0, r3
 80199de:	370c      	adds	r7, #12
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bc80      	pop	{r7}
 80199e4:	4770      	bx	lr
	...

080199e8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b084      	sub	sp, #16
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80199f0:	2303      	movs	r3, #3
 80199f2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80199f4:	2300      	movs	r3, #0
 80199f6:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	685b      	ldr	r3, [r3, #4]
 80199fc:	f107 020e 	add.w	r2, r7, #14
 8019a00:	4611      	mov	r1, r2
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7ff f836 	bl	8018a74 <VerifyRfFreq>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	f083 0301 	eor.w	r3, r3, #1
 8019a0e:	b2db      	uxtb	r3, r3
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d003      	beq.n	8019a1c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8019a14:	7bfb      	ldrb	r3, [r7, #15]
 8019a16:	f023 0301 	bic.w	r3, r3, #1
 8019a1a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019a1c:	4b13      	ldr	r3, [pc, #76]	; (8019a6c <RegionEU868DlChannelReq+0x84>)
 8019a1e:	681a      	ldr	r2, [r3, #0]
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	781b      	ldrb	r3, [r3, #0]
 8019a24:	4619      	mov	r1, r3
 8019a26:	460b      	mov	r3, r1
 8019a28:	005b      	lsls	r3, r3, #1
 8019a2a:	440b      	add	r3, r1
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	4413      	add	r3, r2
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d103      	bne.n	8019a3e <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8019a36:	7bfb      	ldrb	r3, [r7, #15]
 8019a38:	f023 0302 	bic.w	r3, r3, #2
 8019a3c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019a3e:	7bfb      	ldrb	r3, [r7, #15]
 8019a40:	2b03      	cmp	r3, #3
 8019a42:	d10d      	bne.n	8019a60 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019a44:	4b09      	ldr	r3, [pc, #36]	; (8019a6c <RegionEU868DlChannelReq+0x84>)
 8019a46:	6819      	ldr	r1, [r3, #0]
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	781b      	ldrb	r3, [r3, #0]
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	685a      	ldr	r2, [r3, #4]
 8019a52:	4603      	mov	r3, r0
 8019a54:	005b      	lsls	r3, r3, #1
 8019a56:	4403      	add	r3, r0
 8019a58:	009b      	lsls	r3, r3, #2
 8019a5a:	440b      	add	r3, r1
 8019a5c:	3304      	adds	r3, #4
 8019a5e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019a64:	4618      	mov	r0, r3
 8019a66:	3710      	adds	r7, #16
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	20002298 	.word	0x20002298

08019a70 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019a70:	b480      	push	{r7}
 8019a72:	b083      	sub	sp, #12
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	4603      	mov	r3, r0
 8019a78:	460a      	mov	r2, r1
 8019a7a:	71fb      	strb	r3, [r7, #7]
 8019a7c:	4613      	mov	r3, r2
 8019a7e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	370c      	adds	r7, #12
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bc80      	pop	{r7}
 8019a8c:	4770      	bx	lr
	...

08019a90 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b09a      	sub	sp, #104	; 0x68
 8019a94:	af02      	add	r7, sp, #8
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	607a      	str	r2, [r7, #4]
 8019a9c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019aaa:	2300      	movs	r3, #0
 8019aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019aae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	601a      	str	r2, [r3, #0]
 8019ab6:	605a      	str	r2, [r3, #4]
 8019ab8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019aba:	230c      	movs	r3, #12
 8019abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019ac0:	2307      	movs	r3, #7
 8019ac2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019ac4:	4b47      	ldr	r3, [pc, #284]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019acc:	2201      	movs	r2, #1
 8019ace:	2100      	movs	r1, #0
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7fe fa9b 	bl	801800c <RegionCommonCountChannels>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d10a      	bne.n	8019af2 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019adc:	4b41      	ldr	r3, [pc, #260]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019ae4:	4b3f      	ldr	r3, [pc, #252]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	f042 0207 	orr.w	r2, r2, #7
 8019aec:	b292      	uxth	r2, r2
 8019aee:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	7a5b      	ldrb	r3, [r3, #9]
 8019af6:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019afe:	b2db      	uxtb	r3, r3
 8019b00:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019b02:	4b38      	ldr	r3, [pc, #224]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019b0a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019b0c:	4b35      	ldr	r3, [pc, #212]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019b12:	4b35      	ldr	r3, [pc, #212]	; (8019be8 <RegionEU868NextChannel+0x158>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019b18:	2310      	movs	r3, #16
 8019b1a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019b1c:	f107 0312 	add.w	r3, r7, #18
 8019b20:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	7a9b      	ldrb	r3, [r3, #10]
 8019b32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019b36:	2306      	movs	r3, #6
 8019b38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019b3c:	68fa      	ldr	r2, [r7, #12]
 8019b3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019b42:	320c      	adds	r2, #12
 8019b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019b48:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	7d1b      	ldrb	r3, [r3, #20]
 8019b50:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	8adb      	ldrh	r3, [r3, #22]
 8019b5e:	4619      	mov	r1, r3
 8019b60:	4610      	mov	r0, r2
 8019b62:	f7fe fffd 	bl	8018b60 <GetTimeOnAir>
 8019b66:	4603      	mov	r3, r0
 8019b68:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019b6a:	f107 0314 	add.w	r3, r7, #20
 8019b6e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019b70:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019b74:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019b78:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	9301      	str	r3, [sp, #4]
 8019b80:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019b84:	9300      	str	r3, [sp, #0]
 8019b86:	460b      	mov	r3, r1
 8019b88:	6839      	ldr	r1, [r7, #0]
 8019b8a:	f7fe fe56 	bl	801883a <RegionCommonIdentifyChannels>
 8019b8e:	4603      	mov	r3, r0
 8019b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d10e      	bne.n	8019bba <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019b9c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019ba0:	3b01      	subs	r3, #1
 8019ba2:	4619      	mov	r1, r3
 8019ba4:	2000      	movs	r0, #0
 8019ba6:	f000 f985 	bl	8019eb4 <randr>
 8019baa:	4603      	mov	r3, r0
 8019bac:	3360      	adds	r3, #96	; 0x60
 8019bae:	443b      	add	r3, r7
 8019bb0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	701a      	strb	r2, [r3, #0]
 8019bb8:	e00e      	b.n	8019bd8 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019bbe:	2b0c      	cmp	r3, #12
 8019bc0:	d10a      	bne.n	8019bd8 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019bc2:	4b08      	ldr	r3, [pc, #32]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019bca:	4b06      	ldr	r3, [pc, #24]	; (8019be4 <RegionEU868NextChannel+0x154>)
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	f042 0207 	orr.w	r2, r2, #7
 8019bd2:	b292      	uxth	r2, r2
 8019bd4:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3760      	adds	r7, #96	; 0x60
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}
 8019be4:	20002298 	.word	0x20002298
 8019be8:	20002294 	.word	0x20002294

08019bec <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b084      	sub	sp, #16
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	791b      	ldrb	r3, [r3, #4]
 8019c04:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c06:	7b7b      	ldrb	r3, [r7, #13]
 8019c08:	2b02      	cmp	r3, #2
 8019c0a:	d801      	bhi.n	8019c10 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019c0c:	2306      	movs	r3, #6
 8019c0e:	e089      	b.n	8019d24 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019c10:	7b7b      	ldrb	r3, [r7, #13]
 8019c12:	2b0f      	cmp	r3, #15
 8019c14:	d901      	bls.n	8019c1a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019c16:	2303      	movs	r3, #3
 8019c18:	e084      	b.n	8019d24 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	7a1b      	ldrb	r3, [r3, #8]
 8019c20:	f343 0303 	sbfx	r3, r3, #0, #4
 8019c24:	b25b      	sxtb	r3, r3
 8019c26:	2207      	movs	r2, #7
 8019c28:	2100      	movs	r1, #0
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7fe f99d 	bl	8017f6a <RegionCommonValueInRange>
 8019c30:	4603      	mov	r3, r0
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d101      	bne.n	8019c3a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019c36:	2301      	movs	r3, #1
 8019c38:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	7a1b      	ldrb	r3, [r3, #8]
 8019c40:	f343 1303 	sbfx	r3, r3, #4, #4
 8019c44:	b25b      	sxtb	r3, r3
 8019c46:	2207      	movs	r2, #7
 8019c48:	2100      	movs	r1, #0
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7fe f98d 	bl	8017f6a <RegionCommonValueInRange>
 8019c50:	4603      	mov	r3, r0
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d101      	bne.n	8019c5a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019c56:	2301      	movs	r3, #1
 8019c58:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	7a1b      	ldrb	r3, [r3, #8]
 8019c60:	f343 0303 	sbfx	r3, r3, #0, #4
 8019c64:	b25a      	sxtb	r2, r3
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	7a1b      	ldrb	r3, [r3, #8]
 8019c6c:	f343 1303 	sbfx	r3, r3, #4, #4
 8019c70:	b25b      	sxtb	r3, r3
 8019c72:	429a      	cmp	r2, r3
 8019c74:	dd01      	ble.n	8019c7a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019c76:	2301      	movs	r3, #1
 8019c78:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019c7a:	7bbb      	ldrb	r3, [r7, #14]
 8019c7c:	f083 0301 	eor.w	r3, r3, #1
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d010      	beq.n	8019ca8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	f107 020c 	add.w	r2, r7, #12
 8019c90:	4611      	mov	r1, r2
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7fe feee 	bl	8018a74 <VerifyRfFreq>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	f083 0301 	eor.w	r3, r3, #1
 8019c9e:	b2db      	uxtb	r3, r3
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d001      	beq.n	8019ca8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019ca8:	7bfb      	ldrb	r3, [r7, #15]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d004      	beq.n	8019cb8 <RegionEU868ChannelAdd+0xcc>
 8019cae:	7bbb      	ldrb	r3, [r7, #14]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d001      	beq.n	8019cb8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019cb4:	2306      	movs	r3, #6
 8019cb6:	e035      	b.n	8019d24 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019cb8:	7bfb      	ldrb	r3, [r7, #15]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d001      	beq.n	8019cc2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019cbe:	2305      	movs	r3, #5
 8019cc0:	e030      	b.n	8019d24 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019cc2:	7bbb      	ldrb	r3, [r7, #14]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d001      	beq.n	8019ccc <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019cc8:	2304      	movs	r3, #4
 8019cca:	e02b      	b.n	8019d24 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019ccc:	4b17      	ldr	r3, [pc, #92]	; (8019d2c <RegionEU868ChannelAdd+0x140>)
 8019cce:	6819      	ldr	r1, [r3, #0]
 8019cd0:	7b7a      	ldrb	r2, [r7, #13]
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	4413      	add	r3, r2
 8019cd8:	009b      	lsls	r3, r3, #2
 8019cda:	18c8      	adds	r0, r1, r3
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	220c      	movs	r2, #12
 8019ce2:	4619      	mov	r1, r3
 8019ce4:	f000 f8fd 	bl	8019ee2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019ce8:	4b10      	ldr	r3, [pc, #64]	; (8019d2c <RegionEU868ChannelAdd+0x140>)
 8019cea:	6819      	ldr	r1, [r3, #0]
 8019cec:	7b7a      	ldrb	r2, [r7, #13]
 8019cee:	7b38      	ldrb	r0, [r7, #12]
 8019cf0:	4613      	mov	r3, r2
 8019cf2:	005b      	lsls	r3, r3, #1
 8019cf4:	4413      	add	r3, r2
 8019cf6:	009b      	lsls	r3, r3, #2
 8019cf8:	440b      	add	r3, r1
 8019cfa:	3309      	adds	r3, #9
 8019cfc:	4602      	mov	r2, r0
 8019cfe:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019d00:	4b0a      	ldr	r3, [pc, #40]	; (8019d2c <RegionEU868ChannelAdd+0x140>)
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019d08:	b21a      	sxth	r2, r3
 8019d0a:	7b7b      	ldrb	r3, [r7, #13]
 8019d0c:	2101      	movs	r1, #1
 8019d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8019d12:	b21b      	sxth	r3, r3
 8019d14:	4313      	orrs	r3, r2
 8019d16:	b21a      	sxth	r2, r3
 8019d18:	4b04      	ldr	r3, [pc, #16]	; (8019d2c <RegionEU868ChannelAdd+0x140>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	b292      	uxth	r2, r2
 8019d1e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019d22:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019d24:	4618      	mov	r0, r3
 8019d26:	3710      	adds	r7, #16
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	bd80      	pop	{r7, pc}
 8019d2c:	20002298 	.word	0x20002298

08019d30 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b086      	sub	sp, #24
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	781b      	ldrb	r3, [r3, #0]
 8019d3c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019d3e:	7dfb      	ldrb	r3, [r7, #23]
 8019d40:	2b02      	cmp	r3, #2
 8019d42:	d801      	bhi.n	8019d48 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019d44:	2300      	movs	r3, #0
 8019d46:	e016      	b.n	8019d76 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019d48:	4b0d      	ldr	r3, [pc, #52]	; (8019d80 <RegionEU868ChannelsRemove+0x50>)
 8019d4a:	6819      	ldr	r1, [r3, #0]
 8019d4c:	7dfa      	ldrb	r2, [r7, #23]
 8019d4e:	4613      	mov	r3, r2
 8019d50:	005b      	lsls	r3, r3, #1
 8019d52:	4413      	add	r3, r2
 8019d54:	009b      	lsls	r3, r3, #2
 8019d56:	440b      	add	r3, r1
 8019d58:	461a      	mov	r2, r3
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	6013      	str	r3, [r2, #0]
 8019d5e:	6053      	str	r3, [r2, #4]
 8019d60:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019d62:	4b07      	ldr	r3, [pc, #28]	; (8019d80 <RegionEU868ChannelsRemove+0x50>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019d6a:	7df9      	ldrb	r1, [r7, #23]
 8019d6c:	2210      	movs	r2, #16
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f7fe f918 	bl	8017fa4 <RegionCommonChanDisable>
 8019d74:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019d76:	4618      	mov	r0, r3
 8019d78:	3718      	adds	r7, #24
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bd80      	pop	{r7, pc}
 8019d7e:	bf00      	nop
 8019d80:	20002298 	.word	0x20002298

08019d84 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019d84:	b590      	push	{r4, r7, lr}
 8019d86:	b085      	sub	sp, #20
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019d92:	4b20      	ldr	r3, [pc, #128]	; (8019e14 <RegionEU868SetContinuousWave+0x90>)
 8019d94:	681a      	ldr	r2, [r3, #0]
 8019d96:	4b20      	ldr	r3, [pc, #128]	; (8019e18 <RegionEU868SetContinuousWave+0x94>)
 8019d98:	6819      	ldr	r1, [r3, #0]
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	461c      	mov	r4, r3
 8019da0:	4623      	mov	r3, r4
 8019da2:	005b      	lsls	r3, r3, #1
 8019da4:	4423      	add	r3, r4
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	440b      	add	r3, r1
 8019daa:	3309      	adds	r3, #9
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	4619      	mov	r1, r3
 8019db0:	460b      	mov	r3, r1
 8019db2:	005b      	lsls	r3, r3, #1
 8019db4:	440b      	add	r3, r1
 8019db6:	00db      	lsls	r3, r3, #3
 8019db8:	4413      	add	r3, r2
 8019dba:	3302      	adds	r3, #2
 8019dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	f7fe fdda 	bl	801897a <RegionCommonLimitTxPower>
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019dca:	2300      	movs	r3, #0
 8019dcc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019dce:	4b12      	ldr	r3, [pc, #72]	; (8019e18 <RegionEU868SetContinuousWave+0x94>)
 8019dd0:	681a      	ldr	r2, [r3, #0]
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	781b      	ldrb	r3, [r3, #0]
 8019dd6:	4619      	mov	r1, r3
 8019dd8:	460b      	mov	r3, r1
 8019dda:	005b      	lsls	r3, r3, #1
 8019ddc:	440b      	add	r3, r1
 8019dde:	009b      	lsls	r3, r3, #2
 8019de0:	4413      	add	r3, r2
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	6859      	ldr	r1, [r3, #4]
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	689a      	ldr	r2, [r3, #8]
 8019dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7fe fc32 	bl	801865c <RegionCommonComputeTxPower>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019dfc:	4b07      	ldr	r3, [pc, #28]	; (8019e1c <RegionEU868SetContinuousWave+0x98>)
 8019dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e00:	687a      	ldr	r2, [r7, #4]
 8019e02:	8992      	ldrh	r2, [r2, #12]
 8019e04:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019e08:	68b8      	ldr	r0, [r7, #8]
 8019e0a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019e0c:	bf00      	nop
 8019e0e:	3714      	adds	r7, #20
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd90      	pop	{r4, r7, pc}
 8019e14:	20002294 	.word	0x20002294
 8019e18:	20002298 	.word	0x20002298
 8019e1c:	0801fa3c 	.word	0x0801fa3c

08019e20 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019e20:	b480      	push	{r7}
 8019e22:	b085      	sub	sp, #20
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	4603      	mov	r3, r0
 8019e28:	71fb      	strb	r3, [r7, #7]
 8019e2a:	460b      	mov	r3, r1
 8019e2c:	71bb      	strb	r3, [r7, #6]
 8019e2e:	4613      	mov	r3, r2
 8019e30:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019e32:	79ba      	ldrb	r2, [r7, #6]
 8019e34:	797b      	ldrb	r3, [r7, #5]
 8019e36:	1ad3      	subs	r3, r2, r3
 8019e38:	b2db      	uxtb	r3, r3
 8019e3a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	da01      	bge.n	8019e48 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019e44:	2300      	movs	r3, #0
 8019e46:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019e48:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	3714      	adds	r7, #20
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bc80      	pop	{r7}
 8019e52:	4770      	bx	lr

08019e54 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019e54:	b480      	push	{r7}
 8019e56:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019e58:	4b0d      	ldr	r3, [pc, #52]	; (8019e90 <rand1+0x3c>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	4a0d      	ldr	r2, [pc, #52]	; (8019e94 <rand1+0x40>)
 8019e5e:	fb02 f303 	mul.w	r3, r2, r3
 8019e62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019e66:	3339      	adds	r3, #57	; 0x39
 8019e68:	4a09      	ldr	r2, [pc, #36]	; (8019e90 <rand1+0x3c>)
 8019e6a:	6013      	str	r3, [r2, #0]
 8019e6c:	4b08      	ldr	r3, [pc, #32]	; (8019e90 <rand1+0x3c>)
 8019e6e:	681a      	ldr	r2, [r3, #0]
 8019e70:	2303      	movs	r3, #3
 8019e72:	fba3 1302 	umull	r1, r3, r3, r2
 8019e76:	1ad1      	subs	r1, r2, r3
 8019e78:	0849      	lsrs	r1, r1, #1
 8019e7a:	440b      	add	r3, r1
 8019e7c:	0f99      	lsrs	r1, r3, #30
 8019e7e:	460b      	mov	r3, r1
 8019e80:	07db      	lsls	r3, r3, #31
 8019e82:	1a5b      	subs	r3, r3, r1
 8019e84:	1ad1      	subs	r1, r2, r3
 8019e86:	460b      	mov	r3, r1
}
 8019e88:	4618      	mov	r0, r3
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bc80      	pop	{r7}
 8019e8e:	4770      	bx	lr
 8019e90:	2000015c 	.word	0x2000015c
 8019e94:	41c64e6d 	.word	0x41c64e6d

08019e98 <srand1>:

void srand1( uint32_t seed )
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b083      	sub	sp, #12
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
    next = seed;
 8019ea0:	4a03      	ldr	r2, [pc, #12]	; (8019eb0 <srand1+0x18>)
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	6013      	str	r3, [r2, #0]
}
 8019ea6:	bf00      	nop
 8019ea8:	370c      	adds	r7, #12
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bc80      	pop	{r7}
 8019eae:	4770      	bx	lr
 8019eb0:	2000015c 	.word	0x2000015c

08019eb4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
 8019ebc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019ebe:	f7ff ffc9 	bl	8019e54 <rand1>
 8019ec2:	4602      	mov	r2, r0
 8019ec4:	6839      	ldr	r1, [r7, #0]
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	1acb      	subs	r3, r1, r3
 8019eca:	3301      	adds	r3, #1
 8019ecc:	fb92 f1f3 	sdiv	r1, r2, r3
 8019ed0:	fb01 f303 	mul.w	r3, r1, r3
 8019ed4:	1ad2      	subs	r2, r2, r3
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	4413      	add	r3, r2
}
 8019eda:	4618      	mov	r0, r3
 8019edc:	3708      	adds	r7, #8
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}

08019ee2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019ee2:	b480      	push	{r7}
 8019ee4:	b085      	sub	sp, #20
 8019ee6:	af00      	add	r7, sp, #0
 8019ee8:	60f8      	str	r0, [r7, #12]
 8019eea:	60b9      	str	r1, [r7, #8]
 8019eec:	4613      	mov	r3, r2
 8019eee:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019ef0:	e007      	b.n	8019f02 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019ef2:	68ba      	ldr	r2, [r7, #8]
 8019ef4:	1c53      	adds	r3, r2, #1
 8019ef6:	60bb      	str	r3, [r7, #8]
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	1c59      	adds	r1, r3, #1
 8019efc:	60f9      	str	r1, [r7, #12]
 8019efe:	7812      	ldrb	r2, [r2, #0]
 8019f00:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019f02:	88fb      	ldrh	r3, [r7, #6]
 8019f04:	1e5a      	subs	r2, r3, #1
 8019f06:	80fa      	strh	r2, [r7, #6]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d1f2      	bne.n	8019ef2 <memcpy1+0x10>
    }
}
 8019f0c:	bf00      	nop
 8019f0e:	bf00      	nop
 8019f10:	3714      	adds	r7, #20
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bc80      	pop	{r7}
 8019f16:	4770      	bx	lr

08019f18 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b085      	sub	sp, #20
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	60f8      	str	r0, [r7, #12]
 8019f20:	60b9      	str	r1, [r7, #8]
 8019f22:	4613      	mov	r3, r2
 8019f24:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019f26:	88fb      	ldrh	r3, [r7, #6]
 8019f28:	3b01      	subs	r3, #1
 8019f2a:	68fa      	ldr	r2, [r7, #12]
 8019f2c:	4413      	add	r3, r2
 8019f2e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019f30:	e007      	b.n	8019f42 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019f32:	68ba      	ldr	r2, [r7, #8]
 8019f34:	1c53      	adds	r3, r2, #1
 8019f36:	60bb      	str	r3, [r7, #8]
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	1e59      	subs	r1, r3, #1
 8019f3c:	60f9      	str	r1, [r7, #12]
 8019f3e:	7812      	ldrb	r2, [r2, #0]
 8019f40:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019f42:	88fb      	ldrh	r3, [r7, #6]
 8019f44:	1e5a      	subs	r2, r3, #1
 8019f46:	80fa      	strh	r2, [r7, #6]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d1f2      	bne.n	8019f32 <memcpyr+0x1a>
    }
}
 8019f4c:	bf00      	nop
 8019f4e:	bf00      	nop
 8019f50:	3714      	adds	r7, #20
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bc80      	pop	{r7}
 8019f56:	4770      	bx	lr

08019f58 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019f58:	b480      	push	{r7}
 8019f5a:	b083      	sub	sp, #12
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
 8019f60:	460b      	mov	r3, r1
 8019f62:	70fb      	strb	r3, [r7, #3]
 8019f64:	4613      	mov	r3, r2
 8019f66:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019f68:	e004      	b.n	8019f74 <memset1+0x1c>
    {
        *dst++ = value;
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	1c5a      	adds	r2, r3, #1
 8019f6e:	607a      	str	r2, [r7, #4]
 8019f70:	78fa      	ldrb	r2, [r7, #3]
 8019f72:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019f74:	883b      	ldrh	r3, [r7, #0]
 8019f76:	1e5a      	subs	r2, r3, #1
 8019f78:	803a      	strh	r2, [r7, #0]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d1f5      	bne.n	8019f6a <memset1+0x12>
    }
}
 8019f7e:	bf00      	nop
 8019f80:	bf00      	nop
 8019f82:	370c      	adds	r7, #12
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bc80      	pop	{r7}
 8019f88:	4770      	bx	lr
	...

08019f8c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019f8c:	b480      	push	{r7}
 8019f8e:	b085      	sub	sp, #20
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	460b      	mov	r3, r1
 8019f96:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019f98:	f04f 33ff 	mov.w	r3, #4294967295
 8019f9c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d101      	bne.n	8019fa8 <Crc32+0x1c>
    {
        return 0;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	e026      	b.n	8019ff6 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019fa8:	2300      	movs	r3, #0
 8019faa:	817b      	strh	r3, [r7, #10]
 8019fac:	e01d      	b.n	8019fea <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019fae:	897b      	ldrh	r3, [r7, #10]
 8019fb0:	687a      	ldr	r2, [r7, #4]
 8019fb2:	4413      	add	r3, r2
 8019fb4:	781b      	ldrb	r3, [r3, #0]
 8019fb6:	461a      	mov	r2, r3
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	4053      	eors	r3, r2
 8019fbc:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	813b      	strh	r3, [r7, #8]
 8019fc2:	e00c      	b.n	8019fde <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	085a      	lsrs	r2, r3, #1
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	f003 0301 	and.w	r3, r3, #1
 8019fce:	425b      	negs	r3, r3
 8019fd0:	490b      	ldr	r1, [pc, #44]	; (801a000 <Crc32+0x74>)
 8019fd2:	400b      	ands	r3, r1
 8019fd4:	4053      	eors	r3, r2
 8019fd6:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019fd8:	893b      	ldrh	r3, [r7, #8]
 8019fda:	3301      	adds	r3, #1
 8019fdc:	813b      	strh	r3, [r7, #8]
 8019fde:	893b      	ldrh	r3, [r7, #8]
 8019fe0:	2b07      	cmp	r3, #7
 8019fe2:	d9ef      	bls.n	8019fc4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019fe4:	897b      	ldrh	r3, [r7, #10]
 8019fe6:	3301      	adds	r3, #1
 8019fe8:	817b      	strh	r3, [r7, #10]
 8019fea:	897a      	ldrh	r2, [r7, #10]
 8019fec:	887b      	ldrh	r3, [r7, #2]
 8019fee:	429a      	cmp	r2, r3
 8019ff0:	d3dd      	bcc.n	8019fae <Crc32+0x22>
        }
    }

    return ~crc;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	43db      	mvns	r3, r3
}
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	3714      	adds	r7, #20
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bc80      	pop	{r7}
 8019ffe:	4770      	bx	lr
 801a000:	edb88320 	.word	0xedb88320

0801a004 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b084      	sub	sp, #16
 801a008:	af02      	add	r7, sp, #8
 801a00a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801a00c:	4a24      	ldr	r2, [pc, #144]	; (801a0a0 <RadioInit+0x9c>)
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801a012:	4b24      	ldr	r3, [pc, #144]	; (801a0a4 <RadioInit+0xa0>)
 801a014:	2200      	movs	r2, #0
 801a016:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801a018:	4b22      	ldr	r3, [pc, #136]	; (801a0a4 <RadioInit+0xa0>)
 801a01a:	2200      	movs	r2, #0
 801a01c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801a01e:	4b21      	ldr	r3, [pc, #132]	; (801a0a4 <RadioInit+0xa0>)
 801a020:	2200      	movs	r2, #0
 801a022:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a024:	4b1f      	ldr	r3, [pc, #124]	; (801a0a4 <RadioInit+0xa0>)
 801a026:	2200      	movs	r2, #0
 801a028:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801a02a:	481f      	ldr	r0, [pc, #124]	; (801a0a8 <RadioInit+0xa4>)
 801a02c:	f001 ff88 	bl	801bf40 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801a030:	4b1c      	ldr	r3, [pc, #112]	; (801a0a4 <RadioInit+0xa0>)
 801a032:	2200      	movs	r2, #0
 801a034:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801a036:	4b1b      	ldr	r3, [pc, #108]	; (801a0a4 <RadioInit+0xa0>)
 801a038:	2200      	movs	r2, #0
 801a03a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801a03c:	f002 fa16 	bl	801c46c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801a040:	2100      	movs	r1, #0
 801a042:	2000      	movs	r0, #0
 801a044:	f002 fdde 	bl	801cc04 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801a048:	2204      	movs	r2, #4
 801a04a:	2100      	movs	r1, #0
 801a04c:	2001      	movs	r0, #1
 801a04e:	f002 fb9b 	bl	801c788 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a052:	2300      	movs	r3, #0
 801a054:	2200      	movs	r2, #0
 801a056:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a05a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a05e:	f002 facb 	bl	801c5f8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801a062:	f000 fe83 	bl	801ad6c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801a066:	2300      	movs	r3, #0
 801a068:	9300      	str	r3, [sp, #0]
 801a06a:	4b10      	ldr	r3, [pc, #64]	; (801a0ac <RadioInit+0xa8>)
 801a06c:	2200      	movs	r2, #0
 801a06e:	f04f 31ff 	mov.w	r1, #4294967295
 801a072:	480f      	ldr	r0, [pc, #60]	; (801a0b0 <RadioInit+0xac>)
 801a074:	f003 ffdc 	bl	801e030 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801a078:	2300      	movs	r3, #0
 801a07a:	9300      	str	r3, [sp, #0]
 801a07c:	4b0d      	ldr	r3, [pc, #52]	; (801a0b4 <RadioInit+0xb0>)
 801a07e:	2200      	movs	r2, #0
 801a080:	f04f 31ff 	mov.w	r1, #4294967295
 801a084:	480c      	ldr	r0, [pc, #48]	; (801a0b8 <RadioInit+0xb4>)
 801a086:	f003 ffd3 	bl	801e030 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801a08a:	4809      	ldr	r0, [pc, #36]	; (801a0b0 <RadioInit+0xac>)
 801a08c:	f004 f874 	bl	801e178 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801a090:	4809      	ldr	r0, [pc, #36]	; (801a0b8 <RadioInit+0xb4>)
 801a092:	f004 f871 	bl	801e178 <UTIL_TIMER_Stop>
}
 801a096:	bf00      	nop
 801a098:	3708      	adds	r7, #8
 801a09a:	46bd      	mov	sp, r7
 801a09c:	bd80      	pop	{r7, pc}
 801a09e:	bf00      	nop
 801a0a0:	2000239c 	.word	0x2000239c
 801a0a4:	200023a0 	.word	0x200023a0
 801a0a8:	0801b159 	.word	0x0801b159
 801a0ac:	0801b0e1 	.word	0x0801b0e1
 801a0b0:	200023fc 	.word	0x200023fc
 801a0b4:	0801b0f5 	.word	0x0801b0f5
 801a0b8:	20002414 	.word	0x20002414

0801a0bc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a0c0:	f001 ff80 	bl	801bfc4 <SUBGRF_GetOperatingMode>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	2b07      	cmp	r3, #7
 801a0c8:	d00a      	beq.n	801a0e0 <RadioGetStatus+0x24>
 801a0ca:	2b07      	cmp	r3, #7
 801a0cc:	dc0a      	bgt.n	801a0e4 <RadioGetStatus+0x28>
 801a0ce:	2b04      	cmp	r3, #4
 801a0d0:	d002      	beq.n	801a0d8 <RadioGetStatus+0x1c>
 801a0d2:	2b05      	cmp	r3, #5
 801a0d4:	d002      	beq.n	801a0dc <RadioGetStatus+0x20>
 801a0d6:	e005      	b.n	801a0e4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a0d8:	2302      	movs	r3, #2
 801a0da:	e004      	b.n	801a0e6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a0dc:	2301      	movs	r3, #1
 801a0de:	e002      	b.n	801a0e6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a0e0:	2303      	movs	r3, #3
 801a0e2:	e000      	b.n	801a0e6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a0e4:	2300      	movs	r3, #0
    }
}
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	bd80      	pop	{r7, pc}
	...

0801a0ec <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a0ec:	b580      	push	{r7, lr}
 801a0ee:	b082      	sub	sp, #8
 801a0f0:	af00      	add	r7, sp, #0
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a0f6:	4a2a      	ldr	r2, [pc, #168]	; (801a1a0 <RadioSetModem+0xb4>)
 801a0f8:	79fb      	ldrb	r3, [r7, #7]
 801a0fa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a0fc:	79fb      	ldrb	r3, [r7, #7]
 801a0fe:	4618      	mov	r0, r3
 801a100:	f003 f943 	bl	801d38a <RFW_SetRadioModem>
    switch( modem )
 801a104:	79fb      	ldrb	r3, [r7, #7]
 801a106:	2b05      	cmp	r3, #5
 801a108:	d80e      	bhi.n	801a128 <RadioSetModem+0x3c>
 801a10a:	a201      	add	r2, pc, #4	; (adr r2, 801a110 <RadioSetModem+0x24>)
 801a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a110:	0801a137 	.word	0x0801a137
 801a114:	0801a145 	.word	0x0801a145
 801a118:	0801a129 	.word	0x0801a129
 801a11c:	0801a16b 	.word	0x0801a16b
 801a120:	0801a179 	.word	0x0801a179
 801a124:	0801a187 	.word	0x0801a187
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a128:	2003      	movs	r0, #3
 801a12a:	f002 fb07 	bl	801c73c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a12e:	4b1c      	ldr	r3, [pc, #112]	; (801a1a0 <RadioSetModem+0xb4>)
 801a130:	2200      	movs	r2, #0
 801a132:	735a      	strb	r2, [r3, #13]
        break;
 801a134:	e02f      	b.n	801a196 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a136:	2000      	movs	r0, #0
 801a138:	f002 fb00 	bl	801c73c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a13c:	4b18      	ldr	r3, [pc, #96]	; (801a1a0 <RadioSetModem+0xb4>)
 801a13e:	2200      	movs	r2, #0
 801a140:	735a      	strb	r2, [r3, #13]
        break;
 801a142:	e028      	b.n	801a196 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a144:	2001      	movs	r0, #1
 801a146:	f002 faf9 	bl	801c73c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a14a:	4b15      	ldr	r3, [pc, #84]	; (801a1a0 <RadioSetModem+0xb4>)
 801a14c:	7b5a      	ldrb	r2, [r3, #13]
 801a14e:	4b14      	ldr	r3, [pc, #80]	; (801a1a0 <RadioSetModem+0xb4>)
 801a150:	7b1b      	ldrb	r3, [r3, #12]
 801a152:	429a      	cmp	r2, r3
 801a154:	d01e      	beq.n	801a194 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a156:	4b12      	ldr	r3, [pc, #72]	; (801a1a0 <RadioSetModem+0xb4>)
 801a158:	7b1a      	ldrb	r2, [r3, #12]
 801a15a:	4b11      	ldr	r3, [pc, #68]	; (801a1a0 <RadioSetModem+0xb4>)
 801a15c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a15e:	4b10      	ldr	r3, [pc, #64]	; (801a1a0 <RadioSetModem+0xb4>)
 801a160:	7b5b      	ldrb	r3, [r3, #13]
 801a162:	4618      	mov	r0, r3
 801a164:	f000 ff86 	bl	801b074 <RadioSetPublicNetwork>
        }
        break;
 801a168:	e014      	b.n	801a194 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a16a:	2002      	movs	r0, #2
 801a16c:	f002 fae6 	bl	801c73c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a170:	4b0b      	ldr	r3, [pc, #44]	; (801a1a0 <RadioSetModem+0xb4>)
 801a172:	2200      	movs	r2, #0
 801a174:	735a      	strb	r2, [r3, #13]
        break;
 801a176:	e00e      	b.n	801a196 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a178:	2002      	movs	r0, #2
 801a17a:	f002 fadf 	bl	801c73c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a17e:	4b08      	ldr	r3, [pc, #32]	; (801a1a0 <RadioSetModem+0xb4>)
 801a180:	2200      	movs	r2, #0
 801a182:	735a      	strb	r2, [r3, #13]
        break;
 801a184:	e007      	b.n	801a196 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a186:	2000      	movs	r0, #0
 801a188:	f002 fad8 	bl	801c73c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a18c:	4b04      	ldr	r3, [pc, #16]	; (801a1a0 <RadioSetModem+0xb4>)
 801a18e:	2200      	movs	r2, #0
 801a190:	735a      	strb	r2, [r3, #13]
        break;
 801a192:	e000      	b.n	801a196 <RadioSetModem+0xaa>
        break;
 801a194:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a196:	bf00      	nop
 801a198:	3708      	adds	r7, #8
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}
 801a19e:	bf00      	nop
 801a1a0:	200023a0 	.word	0x200023a0

0801a1a4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b082      	sub	sp, #8
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a1ac:	6878      	ldr	r0, [r7, #4]
 801a1ae:	f002 fa7f 	bl	801c6b0 <SUBGRF_SetRfFrequency>
}
 801a1b2:	bf00      	nop
 801a1b4:	3708      	adds	r7, #8
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bd80      	pop	{r7, pc}

0801a1ba <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a1ba:	b580      	push	{r7, lr}
 801a1bc:	b090      	sub	sp, #64	; 0x40
 801a1be:	af0a      	add	r7, sp, #40	; 0x28
 801a1c0:	60f8      	str	r0, [r7, #12]
 801a1c2:	60b9      	str	r1, [r7, #8]
 801a1c4:	603b      	str	r3, [r7, #0]
 801a1c6:	4613      	mov	r3, r2
 801a1c8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801a1d6:	f000 fddc 	bl	801ad92 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a1da:	2000      	movs	r0, #0
 801a1dc:	f7ff ff86 	bl	801a0ec <RadioSetModem>

    RadioSetChannel( freq );
 801a1e0:	68f8      	ldr	r0, [r7, #12]
 801a1e2:	f7ff ffdf 	bl	801a1a4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	9309      	str	r3, [sp, #36]	; 0x24
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	9308      	str	r3, [sp, #32]
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	9307      	str	r3, [sp, #28]
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	9306      	str	r3, [sp, #24]
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	9305      	str	r3, [sp, #20]
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	9304      	str	r3, [sp, #16]
 801a1fe:	2300      	movs	r3, #0
 801a200:	9303      	str	r3, [sp, #12]
 801a202:	2300      	movs	r3, #0
 801a204:	9302      	str	r3, [sp, #8]
 801a206:	2303      	movs	r3, #3
 801a208:	9301      	str	r3, [sp, #4]
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	9300      	str	r3, [sp, #0]
 801a20e:	2300      	movs	r3, #0
 801a210:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a214:	68b9      	ldr	r1, [r7, #8]
 801a216:	2000      	movs	r0, #0
 801a218:	f000 f83c 	bl	801a294 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a21c:	2000      	movs	r0, #0
 801a21e:	f000 fdbf 	bl	801ada0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a222:	f000 ff55 	bl	801b0d0 <RadioGetWakeupTime>
 801a226:	4603      	mov	r3, r0
 801a228:	4618      	mov	r0, r3
 801a22a:	f7e8 fd13 	bl	8002c54 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a22e:	f004 f8bd 	bl	801e3ac <UTIL_TIMER_GetCurrentTime>
 801a232:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a234:	e00d      	b.n	801a252 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a236:	2000      	movs	r0, #0
 801a238:	f000 fe9a 	bl	801af70 <RadioRssi>
 801a23c:	4603      	mov	r3, r0
 801a23e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a240:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a248:	429a      	cmp	r2, r3
 801a24a:	dd02      	ble.n	801a252 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a24c:	2300      	movs	r3, #0
 801a24e:	75fb      	strb	r3, [r7, #23]
            break;
 801a250:	e006      	b.n	801a260 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a252:	6938      	ldr	r0, [r7, #16]
 801a254:	f004 f8bc 	bl	801e3d0 <UTIL_TIMER_GetElapsedTime>
 801a258:	4602      	mov	r2, r0
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	4293      	cmp	r3, r2
 801a25e:	d8ea      	bhi.n	801a236 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801a260:	f000 fd97 	bl	801ad92 <RadioStandby>

    return status;
 801a264:	7dfb      	ldrb	r3, [r7, #23]
}
 801a266:	4618      	mov	r0, r3
 801a268:	3718      	adds	r7, #24
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}

0801a26e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a26e:	b580      	push	{r7, lr}
 801a270:	b082      	sub	sp, #8
 801a272:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a274:	2300      	movs	r3, #0
 801a276:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a278:	2300      	movs	r3, #0
 801a27a:	2200      	movs	r2, #0
 801a27c:	2100      	movs	r1, #0
 801a27e:	2000      	movs	r0, #0
 801a280:	f002 f9ba 	bl	801c5f8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a284:	f001 ff6f 	bl	801c166 <SUBGRF_GetRandom>
 801a288:	6078      	str	r0, [r7, #4]

    return rnd;
 801a28a:	687b      	ldr	r3, [r7, #4]
}
 801a28c:	4618      	mov	r0, r3
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}

0801a294 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b08a      	sub	sp, #40	; 0x28
 801a298:	af00      	add	r7, sp, #0
 801a29a:	60b9      	str	r1, [r7, #8]
 801a29c:	607a      	str	r2, [r7, #4]
 801a29e:	461a      	mov	r2, r3
 801a2a0:	4603      	mov	r3, r0
 801a2a2:	73fb      	strb	r3, [r7, #15]
 801a2a4:	4613      	mov	r3, r2
 801a2a6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a2a8:	4ab9      	ldr	r2, [pc, #740]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a2aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a2ae:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801a2b0:	f003 f829 	bl	801d306 <RFW_DeInit>
    if( rxContinuous == true )
 801a2b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d001      	beq.n	801a2c0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a2bc:	2300      	movs	r3, #0
 801a2be:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a2c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d004      	beq.n	801a2d2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a2c8:	4ab2      	ldr	r2, [pc, #712]	; (801a594 <RadioSetRxConfig+0x300>)
 801a2ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a2ce:	7013      	strb	r3, [r2, #0]
 801a2d0:	e002      	b.n	801a2d8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a2d2:	4bb0      	ldr	r3, [pc, #704]	; (801a594 <RadioSetRxConfig+0x300>)
 801a2d4:	22ff      	movs	r2, #255	; 0xff
 801a2d6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a2d8:	7bfb      	ldrb	r3, [r7, #15]
 801a2da:	2b05      	cmp	r3, #5
 801a2dc:	d009      	beq.n	801a2f2 <RadioSetRxConfig+0x5e>
 801a2de:	2b05      	cmp	r3, #5
 801a2e0:	f300 81ca 	bgt.w	801a678 <RadioSetRxConfig+0x3e4>
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	f000 80bf 	beq.w	801a468 <RadioSetRxConfig+0x1d4>
 801a2ea:	2b01      	cmp	r3, #1
 801a2ec:	f000 8124 	beq.w	801a538 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a2f0:	e1c2      	b.n	801a678 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a2f2:	2001      	movs	r0, #1
 801a2f4:	f002 f87c 	bl	801c3f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a2f8:	4ba5      	ldr	r3, [pc, #660]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a300:	4aa3      	ldr	r2, [pc, #652]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a306:	4ba2      	ldr	r3, [pc, #648]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a308:	2209      	movs	r2, #9
 801a30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a30e:	4ba0      	ldr	r3, [pc, #640]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a310:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a314:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a316:	68b8      	ldr	r0, [r7, #8]
 801a318:	f002 ff28 	bl	801d16c <SUBGRF_GetFskBandwidthRegValue>
 801a31c:	4603      	mov	r3, r0
 801a31e:	461a      	mov	r2, r3
 801a320:	4b9b      	ldr	r3, [pc, #620]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a326:	4b9a      	ldr	r3, [pc, #616]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a328:	2200      	movs	r2, #0
 801a32a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a32c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a32e:	00db      	lsls	r3, r3, #3
 801a330:	b29a      	uxth	r2, r3
 801a332:	4b97      	ldr	r3, [pc, #604]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a334:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a336:	4b96      	ldr	r3, [pc, #600]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a338:	2200      	movs	r2, #0
 801a33a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a33c:	4b94      	ldr	r3, [pc, #592]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a33e:	2210      	movs	r2, #16
 801a340:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a342:	4b93      	ldr	r3, [pc, #588]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a344:	2200      	movs	r2, #0
 801a346:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a348:	4b91      	ldr	r3, [pc, #580]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a34a:	2200      	movs	r2, #0
 801a34c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a34e:	4b91      	ldr	r3, [pc, #580]	; (801a594 <RadioSetRxConfig+0x300>)
 801a350:	781a      	ldrb	r2, [r3, #0]
 801a352:	4b8f      	ldr	r3, [pc, #572]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a354:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a356:	4b8e      	ldr	r3, [pc, #568]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a358:	2201      	movs	r2, #1
 801a35a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a35c:	4b8c      	ldr	r3, [pc, #560]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a35e:	2200      	movs	r2, #0
 801a360:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a362:	2005      	movs	r0, #5
 801a364:	f7ff fec2 	bl	801a0ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a368:	488b      	ldr	r0, [pc, #556]	; (801a598 <RadioSetRxConfig+0x304>)
 801a36a:	f002 fadb 	bl	801c924 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a36e:	488b      	ldr	r0, [pc, #556]	; (801a59c <RadioSetRxConfig+0x308>)
 801a370:	f002 fbaa 	bl	801cac8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a374:	4a8a      	ldr	r2, [pc, #552]	; (801a5a0 <RadioSetRxConfig+0x30c>)
 801a376:	f107 031c 	add.w	r3, r7, #28
 801a37a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a37e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a382:	f107 031c 	add.w	r3, r7, #28
 801a386:	4618      	mov	r0, r3
 801a388:	f001 fe6b 	bl	801c062 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a38c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a390:	f001 feb6 	bl	801c100 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a394:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a398:	f000 fe09 	bl	801afae <RadioRead>
 801a39c:	4603      	mov	r3, r0
 801a39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3a6:	f023 0310 	bic.w	r3, r3, #16
 801a3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a3ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3b2:	4619      	mov	r1, r3
 801a3b4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a3b8:	f000 fde7 	bl	801af8a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a3bc:	2104      	movs	r1, #4
 801a3be:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a3c2:	f000 fde2 	bl	801af8a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a3c6:	f640 009b 	movw	r0, #2203	; 0x89b
 801a3ca:	f000 fdf0 	bl	801afae <RadioRead>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3d8:	f023 031c 	bic.w	r3, r3, #28
 801a3dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3e4:	f043 0308 	orr.w	r3, r3, #8
 801a3e8:	b2db      	uxtb	r3, r3
 801a3ea:	4619      	mov	r1, r3
 801a3ec:	f640 009b 	movw	r0, #2203	; 0x89b
 801a3f0:	f000 fdcb 	bl	801af8a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a3f4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a3f8:	f000 fdd9 	bl	801afae <RadioRead>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a406:	f023 0318 	bic.w	r3, r3, #24
 801a40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a412:	f043 0318 	orr.w	r3, r3, #24
 801a416:	b2db      	uxtb	r3, r3
 801a418:	4619      	mov	r1, r3
 801a41a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a41e:	f000 fdb4 	bl	801af8a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a422:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a426:	f000 fdc2 	bl	801afae <RadioRead>
 801a42a:	4603      	mov	r3, r0
 801a42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a440:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a444:	b2db      	uxtb	r3, r3
 801a446:	4619      	mov	r1, r3
 801a448:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a44c:	f000 fd9d 	bl	801af8a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a450:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a452:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a456:	fb02 f303 	mul.w	r3, r2, r3
 801a45a:	461a      	mov	r2, r3
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a462:	4a4b      	ldr	r2, [pc, #300]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a464:	6093      	str	r3, [r2, #8]
            break;
 801a466:	e108      	b.n	801a67a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a468:	2000      	movs	r0, #0
 801a46a:	f001 ffc1 	bl	801c3f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a46e:	4b48      	ldr	r3, [pc, #288]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a470:	2200      	movs	r2, #0
 801a472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a476:	4a46      	ldr	r2, [pc, #280]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a47c:	4b44      	ldr	r3, [pc, #272]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a47e:	220b      	movs	r2, #11
 801a480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a484:	68b8      	ldr	r0, [r7, #8]
 801a486:	f002 fe71 	bl	801d16c <SUBGRF_GetFskBandwidthRegValue>
 801a48a:	4603      	mov	r3, r0
 801a48c:	461a      	mov	r2, r3
 801a48e:	4b40      	ldr	r3, [pc, #256]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a494:	4b3e      	ldr	r3, [pc, #248]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a496:	2200      	movs	r2, #0
 801a498:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a49a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	b29a      	uxth	r2, r3
 801a4a0:	4b3b      	ldr	r3, [pc, #236]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4a2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a4a4:	4b3a      	ldr	r3, [pc, #232]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4a6:	2204      	movs	r2, #4
 801a4a8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a4aa:	4b39      	ldr	r3, [pc, #228]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4ac:	2218      	movs	r2, #24
 801a4ae:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a4b0:	4b37      	ldr	r3, [pc, #220]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a4b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a4ba:	f083 0301 	eor.w	r3, r3, #1
 801a4be:	b2db      	uxtb	r3, r3
 801a4c0:	461a      	mov	r2, r3
 801a4c2:	4b33      	ldr	r3, [pc, #204]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4c4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a4c6:	4b33      	ldr	r3, [pc, #204]	; (801a594 <RadioSetRxConfig+0x300>)
 801a4c8:	781a      	ldrb	r2, [r3, #0]
 801a4ca:	4b31      	ldr	r3, [pc, #196]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4cc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a4ce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d003      	beq.n	801a4de <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a4d6:	4b2e      	ldr	r3, [pc, #184]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4d8:	22f2      	movs	r2, #242	; 0xf2
 801a4da:	75da      	strb	r2, [r3, #23]
 801a4dc:	e002      	b.n	801a4e4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a4de:	4b2c      	ldr	r3, [pc, #176]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4e0:	2201      	movs	r2, #1
 801a4e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a4e4:	4b2a      	ldr	r3, [pc, #168]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a4e6:	2201      	movs	r2, #1
 801a4e8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a4ea:	f000 fc52 	bl	801ad92 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a4ee:	2000      	movs	r0, #0
 801a4f0:	f7ff fdfc 	bl	801a0ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a4f4:	4828      	ldr	r0, [pc, #160]	; (801a598 <RadioSetRxConfig+0x304>)
 801a4f6:	f002 fa15 	bl	801c924 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a4fa:	4828      	ldr	r0, [pc, #160]	; (801a59c <RadioSetRxConfig+0x308>)
 801a4fc:	f002 fae4 	bl	801cac8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a500:	4a28      	ldr	r2, [pc, #160]	; (801a5a4 <RadioSetRxConfig+0x310>)
 801a502:	f107 0314 	add.w	r3, r7, #20
 801a506:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a50a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a50e:	f107 0314 	add.w	r3, r7, #20
 801a512:	4618      	mov	r0, r3
 801a514:	f001 fda5 	bl	801c062 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a518:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a51c:	f001 fdf0 	bl	801c100 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a520:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a522:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a526:	fb02 f303 	mul.w	r3, r2, r3
 801a52a:	461a      	mov	r2, r3
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a532:	4a17      	ldr	r2, [pc, #92]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a534:	6093      	str	r3, [r2, #8]
            break;
 801a536:	e0a0      	b.n	801a67a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a538:	2000      	movs	r0, #0
 801a53a:	f001 ff59 	bl	801c3f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a53e:	4b14      	ldr	r3, [pc, #80]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a540:	2201      	movs	r2, #1
 801a542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	b2da      	uxtb	r2, r3
 801a54a:	4b11      	ldr	r3, [pc, #68]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a54c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a550:	4a15      	ldr	r2, [pc, #84]	; (801a5a8 <RadioSetRxConfig+0x314>)
 801a552:	68bb      	ldr	r3, [r7, #8]
 801a554:	4413      	add	r3, r2
 801a556:	781a      	ldrb	r2, [r3, #0]
 801a558:	4b0d      	ldr	r3, [pc, #52]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a55a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a55e:	4a0c      	ldr	r2, [pc, #48]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a560:	7bbb      	ldrb	r3, [r7, #14]
 801a562:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a566:	68bb      	ldr	r3, [r7, #8]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d105      	bne.n	801a578 <RadioSetRxConfig+0x2e4>
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2b0b      	cmp	r3, #11
 801a570:	d008      	beq.n	801a584 <RadioSetRxConfig+0x2f0>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2b0c      	cmp	r3, #12
 801a576:	d005      	beq.n	801a584 <RadioSetRxConfig+0x2f0>
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	2b01      	cmp	r3, #1
 801a57c:	d116      	bne.n	801a5ac <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	2b0c      	cmp	r3, #12
 801a582:	d113      	bne.n	801a5ac <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a584:	4b02      	ldr	r3, [pc, #8]	; (801a590 <RadioSetRxConfig+0x2fc>)
 801a586:	2201      	movs	r2, #1
 801a588:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a58c:	e012      	b.n	801a5b4 <RadioSetRxConfig+0x320>
 801a58e:	bf00      	nop
 801a590:	200023a0 	.word	0x200023a0
 801a594:	20000160 	.word	0x20000160
 801a598:	200023d8 	.word	0x200023d8
 801a59c:	200023ae 	.word	0x200023ae
 801a5a0:	0801f4dc 	.word	0x0801f4dc
 801a5a4:	0801f4e4 	.word	0x0801f4e4
 801a5a8:	0801fac0 	.word	0x0801fac0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a5ac:	4b35      	ldr	r3, [pc, #212]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a5b4:	4b33      	ldr	r3, [pc, #204]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5b6:	2201      	movs	r2, #1
 801a5b8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a5ba:	4b32      	ldr	r3, [pc, #200]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a5c0:	2b05      	cmp	r3, #5
 801a5c2:	d004      	beq.n	801a5ce <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a5c4:	4b2f      	ldr	r3, [pc, #188]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a5ca:	2b06      	cmp	r3, #6
 801a5cc:	d10a      	bne.n	801a5e4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a5ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a5d0:	2b0b      	cmp	r3, #11
 801a5d2:	d803      	bhi.n	801a5dc <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a5d4:	4b2b      	ldr	r3, [pc, #172]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5d6:	220c      	movs	r2, #12
 801a5d8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a5da:	e006      	b.n	801a5ea <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a5dc:	4a29      	ldr	r2, [pc, #164]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a5e0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a5e2:	e002      	b.n	801a5ea <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a5e4:	4a27      	ldr	r2, [pc, #156]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a5e8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a5ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a5ee:	4b25      	ldr	r3, [pc, #148]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5f0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a5f2:	4b25      	ldr	r3, [pc, #148]	; (801a688 <RadioSetRxConfig+0x3f4>)
 801a5f4:	781a      	ldrb	r2, [r3, #0]
 801a5f6:	4b23      	ldr	r3, [pc, #140]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a5f8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a5fa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a5fe:	4b21      	ldr	r3, [pc, #132]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a600:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a604:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a608:	4b1e      	ldr	r3, [pc, #120]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a60a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a60e:	f000 fbc0 	bl	801ad92 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a612:	2001      	movs	r0, #1
 801a614:	f7ff fd6a 	bl	801a0ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a618:	481c      	ldr	r0, [pc, #112]	; (801a68c <RadioSetRxConfig+0x3f8>)
 801a61a:	f002 f983 	bl	801c924 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a61e:	481c      	ldr	r0, [pc, #112]	; (801a690 <RadioSetRxConfig+0x3fc>)
 801a620:	f002 fa52 	bl	801cac8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a624:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a626:	b2db      	uxtb	r3, r3
 801a628:	4618      	mov	r0, r3
 801a62a:	f001 fef0 	bl	801c40e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a62e:	4b15      	ldr	r3, [pc, #84]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a630:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a634:	2b01      	cmp	r3, #1
 801a636:	d10d      	bne.n	801a654 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a638:	f240 7036 	movw	r0, #1846	; 0x736
 801a63c:	f002 fba0 	bl	801cd80 <SUBGRF_ReadRegister>
 801a640:	4603      	mov	r3, r0
 801a642:	f023 0304 	bic.w	r3, r3, #4
 801a646:	b2db      	uxtb	r3, r3
 801a648:	4619      	mov	r1, r3
 801a64a:	f240 7036 	movw	r0, #1846	; 0x736
 801a64e:	f002 fb83 	bl	801cd58 <SUBGRF_WriteRegister>
 801a652:	e00c      	b.n	801a66e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a654:	f240 7036 	movw	r0, #1846	; 0x736
 801a658:	f002 fb92 	bl	801cd80 <SUBGRF_ReadRegister>
 801a65c:	4603      	mov	r3, r0
 801a65e:	f043 0304 	orr.w	r3, r3, #4
 801a662:	b2db      	uxtb	r3, r3
 801a664:	4619      	mov	r1, r3
 801a666:	f240 7036 	movw	r0, #1846	; 0x736
 801a66a:	f002 fb75 	bl	801cd58 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a66e:	4b05      	ldr	r3, [pc, #20]	; (801a684 <RadioSetRxConfig+0x3f0>)
 801a670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a674:	609a      	str	r2, [r3, #8]
            break;
 801a676:	e000      	b.n	801a67a <RadioSetRxConfig+0x3e6>
            break;
 801a678:	bf00      	nop
    }
}
 801a67a:	bf00      	nop
 801a67c:	3728      	adds	r7, #40	; 0x28
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}
 801a682:	bf00      	nop
 801a684:	200023a0 	.word	0x200023a0
 801a688:	20000160 	.word	0x20000160
 801a68c:	200023d8 	.word	0x200023d8
 801a690:	200023ae 	.word	0x200023ae

0801a694 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b086      	sub	sp, #24
 801a698:	af00      	add	r7, sp, #0
 801a69a:	60ba      	str	r2, [r7, #8]
 801a69c:	607b      	str	r3, [r7, #4]
 801a69e:	4603      	mov	r3, r0
 801a6a0:	73fb      	strb	r3, [r7, #15]
 801a6a2:	460b      	mov	r3, r1
 801a6a4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801a6a6:	f002 fe2e 	bl	801d306 <RFW_DeInit>
    switch( modem )
 801a6aa:	7bfb      	ldrb	r3, [r7, #15]
 801a6ac:	2b04      	cmp	r3, #4
 801a6ae:	f000 80c7 	beq.w	801a840 <RadioSetTxConfig+0x1ac>
 801a6b2:	2b04      	cmp	r3, #4
 801a6b4:	f300 80d6 	bgt.w	801a864 <RadioSetTxConfig+0x1d0>
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d002      	beq.n	801a6c2 <RadioSetTxConfig+0x2e>
 801a6bc:	2b01      	cmp	r3, #1
 801a6be:	d059      	beq.n	801a774 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a6c0:	e0d0      	b.n	801a864 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a6c2:	4b74      	ldr	r3, [pc, #464]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a6ca:	4a72      	ldr	r2, [pc, #456]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6cc:	6a3b      	ldr	r3, [r7, #32]
 801a6ce:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a6d0:	4b70      	ldr	r3, [pc, #448]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6d2:	220b      	movs	r2, #11
 801a6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a6d8:	6878      	ldr	r0, [r7, #4]
 801a6da:	f002 fd47 	bl	801d16c <SUBGRF_GetFskBandwidthRegValue>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	461a      	mov	r2, r3
 801a6e2:	4b6c      	ldr	r3, [pc, #432]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a6e8:	4a6a      	ldr	r2, [pc, #424]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a6ee:	4b69      	ldr	r3, [pc, #420]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a6f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a6f6:	00db      	lsls	r3, r3, #3
 801a6f8:	b29a      	uxth	r2, r3
 801a6fa:	4b66      	ldr	r3, [pc, #408]	; (801a894 <RadioSetTxConfig+0x200>)
 801a6fc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a6fe:	4b65      	ldr	r3, [pc, #404]	; (801a894 <RadioSetTxConfig+0x200>)
 801a700:	2204      	movs	r2, #4
 801a702:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a704:	4b63      	ldr	r3, [pc, #396]	; (801a894 <RadioSetTxConfig+0x200>)
 801a706:	2218      	movs	r2, #24
 801a708:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a70a:	4b62      	ldr	r3, [pc, #392]	; (801a894 <RadioSetTxConfig+0x200>)
 801a70c:	2200      	movs	r2, #0
 801a70e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a710:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a714:	f083 0301 	eor.w	r3, r3, #1
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	461a      	mov	r2, r3
 801a71c:	4b5d      	ldr	r3, [pc, #372]	; (801a894 <RadioSetTxConfig+0x200>)
 801a71e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a720:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a724:	2b00      	cmp	r3, #0
 801a726:	d003      	beq.n	801a730 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a728:	4b5a      	ldr	r3, [pc, #360]	; (801a894 <RadioSetTxConfig+0x200>)
 801a72a:	22f2      	movs	r2, #242	; 0xf2
 801a72c:	75da      	strb	r2, [r3, #23]
 801a72e:	e002      	b.n	801a736 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a730:	4b58      	ldr	r3, [pc, #352]	; (801a894 <RadioSetTxConfig+0x200>)
 801a732:	2201      	movs	r2, #1
 801a734:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a736:	4b57      	ldr	r3, [pc, #348]	; (801a894 <RadioSetTxConfig+0x200>)
 801a738:	2201      	movs	r2, #1
 801a73a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a73c:	f000 fb29 	bl	801ad92 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a740:	2000      	movs	r0, #0
 801a742:	f7ff fcd3 	bl	801a0ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a746:	4854      	ldr	r0, [pc, #336]	; (801a898 <RadioSetTxConfig+0x204>)
 801a748:	f002 f8ec 	bl	801c924 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a74c:	4853      	ldr	r0, [pc, #332]	; (801a89c <RadioSetTxConfig+0x208>)
 801a74e:	f002 f9bb 	bl	801cac8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a752:	4a53      	ldr	r2, [pc, #332]	; (801a8a0 <RadioSetTxConfig+0x20c>)
 801a754:	f107 0310 	add.w	r3, r7, #16
 801a758:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a75c:	e883 0003 	stmia.w	r3, {r0, r1}
 801a760:	f107 0310 	add.w	r3, r7, #16
 801a764:	4618      	mov	r0, r3
 801a766:	f001 fc7c 	bl	801c062 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a76a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a76e:	f001 fcc7 	bl	801c100 <SUBGRF_SetWhiteningSeed>
            break;
 801a772:	e078      	b.n	801a866 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a774:	4b47      	ldr	r3, [pc, #284]	; (801a894 <RadioSetTxConfig+0x200>)
 801a776:	2201      	movs	r2, #1
 801a778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a77c:	6a3b      	ldr	r3, [r7, #32]
 801a77e:	b2da      	uxtb	r2, r3
 801a780:	4b44      	ldr	r3, [pc, #272]	; (801a894 <RadioSetTxConfig+0x200>)
 801a782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a786:	4a47      	ldr	r2, [pc, #284]	; (801a8a4 <RadioSetTxConfig+0x210>)
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	4413      	add	r3, r2
 801a78c:	781a      	ldrb	r2, [r3, #0]
 801a78e:	4b41      	ldr	r3, [pc, #260]	; (801a894 <RadioSetTxConfig+0x200>)
 801a790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a794:	4a3f      	ldr	r2, [pc, #252]	; (801a894 <RadioSetTxConfig+0x200>)
 801a796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a79a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d105      	bne.n	801a7b0 <RadioSetTxConfig+0x11c>
 801a7a4:	6a3b      	ldr	r3, [r7, #32]
 801a7a6:	2b0b      	cmp	r3, #11
 801a7a8:	d008      	beq.n	801a7bc <RadioSetTxConfig+0x128>
 801a7aa:	6a3b      	ldr	r3, [r7, #32]
 801a7ac:	2b0c      	cmp	r3, #12
 801a7ae:	d005      	beq.n	801a7bc <RadioSetTxConfig+0x128>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d107      	bne.n	801a7c6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a7b6:	6a3b      	ldr	r3, [r7, #32]
 801a7b8:	2b0c      	cmp	r3, #12
 801a7ba:	d104      	bne.n	801a7c6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a7bc:	4b35      	ldr	r3, [pc, #212]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7be:	2201      	movs	r2, #1
 801a7c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a7c4:	e003      	b.n	801a7ce <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a7c6:	4b33      	ldr	r3, [pc, #204]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a7ce:	4b31      	ldr	r3, [pc, #196]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7d0:	2201      	movs	r2, #1
 801a7d2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a7d4:	4b2f      	ldr	r3, [pc, #188]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a7da:	2b05      	cmp	r3, #5
 801a7dc:	d004      	beq.n	801a7e8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a7de:	4b2d      	ldr	r3, [pc, #180]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a7e4:	2b06      	cmp	r3, #6
 801a7e6:	d10a      	bne.n	801a7fe <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a7e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a7ea:	2b0b      	cmp	r3, #11
 801a7ec:	d803      	bhi.n	801a7f6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a7ee:	4b29      	ldr	r3, [pc, #164]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7f0:	220c      	movs	r2, #12
 801a7f2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a7f4:	e006      	b.n	801a804 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a7f6:	4a27      	ldr	r2, [pc, #156]	; (801a894 <RadioSetTxConfig+0x200>)
 801a7f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a7fa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a7fc:	e002      	b.n	801a804 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a7fe:	4a25      	ldr	r2, [pc, #148]	; (801a894 <RadioSetTxConfig+0x200>)
 801a800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a802:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a804:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a808:	4b22      	ldr	r3, [pc, #136]	; (801a894 <RadioSetTxConfig+0x200>)
 801a80a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a80c:	4b26      	ldr	r3, [pc, #152]	; (801a8a8 <RadioSetTxConfig+0x214>)
 801a80e:	781a      	ldrb	r2, [r3, #0]
 801a810:	4b20      	ldr	r3, [pc, #128]	; (801a894 <RadioSetTxConfig+0x200>)
 801a812:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a814:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a818:	4b1e      	ldr	r3, [pc, #120]	; (801a894 <RadioSetTxConfig+0x200>)
 801a81a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a81e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a822:	4b1c      	ldr	r3, [pc, #112]	; (801a894 <RadioSetTxConfig+0x200>)
 801a824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a828:	f000 fab3 	bl	801ad92 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a82c:	2001      	movs	r0, #1
 801a82e:	f7ff fc5d 	bl	801a0ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a832:	4819      	ldr	r0, [pc, #100]	; (801a898 <RadioSetTxConfig+0x204>)
 801a834:	f002 f876 	bl	801c924 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a838:	4818      	ldr	r0, [pc, #96]	; (801a89c <RadioSetTxConfig+0x208>)
 801a83a:	f002 f945 	bl	801cac8 <SUBGRF_SetPacketParams>
            break;
 801a83e:	e012      	b.n	801a866 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a840:	2004      	movs	r0, #4
 801a842:	f7ff fc53 	bl	801a0ec <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a846:	4b13      	ldr	r3, [pc, #76]	; (801a894 <RadioSetTxConfig+0x200>)
 801a848:	2202      	movs	r2, #2
 801a84a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a84e:	4a11      	ldr	r2, [pc, #68]	; (801a894 <RadioSetTxConfig+0x200>)
 801a850:	6a3b      	ldr	r3, [r7, #32]
 801a852:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a854:	4b0f      	ldr	r3, [pc, #60]	; (801a894 <RadioSetTxConfig+0x200>)
 801a856:	2216      	movs	r2, #22
 801a858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a85c:	480e      	ldr	r0, [pc, #56]	; (801a898 <RadioSetTxConfig+0x204>)
 801a85e:	f002 f861 	bl	801c924 <SUBGRF_SetModulationParams>
            break;
 801a862:	e000      	b.n	801a866 <RadioSetTxConfig+0x1d2>
            break;
 801a864:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a86a:	4618      	mov	r0, r3
 801a86c:	f002 fb90 	bl	801cf90 <SUBGRF_SetRfTxPower>
 801a870:	4603      	mov	r3, r0
 801a872:	461a      	mov	r2, r3
 801a874:	4b07      	ldr	r3, [pc, #28]	; (801a894 <RadioSetTxConfig+0x200>)
 801a876:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801a87a:	4b06      	ldr	r3, [pc, #24]	; (801a894 <RadioSetTxConfig+0x200>)
 801a87c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a880:	4618      	mov	r0, r3
 801a882:	f002 fd54 	bl	801d32e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a886:	4a03      	ldr	r2, [pc, #12]	; (801a894 <RadioSetTxConfig+0x200>)
 801a888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a88a:	6053      	str	r3, [r2, #4]
}
 801a88c:	bf00      	nop
 801a88e:	3718      	adds	r7, #24
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}
 801a894:	200023a0 	.word	0x200023a0
 801a898:	200023d8 	.word	0x200023d8
 801a89c:	200023ae 	.word	0x200023ae
 801a8a0:	0801f4e4 	.word	0x0801f4e4
 801a8a4:	0801fac0 	.word	0x0801fac0
 801a8a8:	20000160 	.word	0x20000160

0801a8ac <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a8ac:	b480      	push	{r7}
 801a8ae:	b083      	sub	sp, #12
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
    return true;
 801a8b4:	2301      	movs	r3, #1
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	370c      	adds	r7, #12
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bc80      	pop	{r7}
 801a8be:	4770      	bx	lr

0801a8c0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b085      	sub	sp, #20
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a8ce:	79fb      	ldrb	r3, [r7, #7]
 801a8d0:	2b0a      	cmp	r3, #10
 801a8d2:	d83e      	bhi.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
 801a8d4:	a201      	add	r2, pc, #4	; (adr r2, 801a8dc <RadioGetLoRaBandwidthInHz+0x1c>)
 801a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8da:	bf00      	nop
 801a8dc:	0801a909 	.word	0x0801a909
 801a8e0:	0801a919 	.word	0x0801a919
 801a8e4:	0801a929 	.word	0x0801a929
 801a8e8:	0801a939 	.word	0x0801a939
 801a8ec:	0801a941 	.word	0x0801a941
 801a8f0:	0801a947 	.word	0x0801a947
 801a8f4:	0801a94d 	.word	0x0801a94d
 801a8f8:	0801a953 	.word	0x0801a953
 801a8fc:	0801a911 	.word	0x0801a911
 801a900:	0801a921 	.word	0x0801a921
 801a904:	0801a931 	.word	0x0801a931
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a908:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a90c:	60fb      	str	r3, [r7, #12]
        break;
 801a90e:	e020      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a910:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a914:	60fb      	str	r3, [r7, #12]
        break;
 801a916:	e01c      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a918:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a91c:	60fb      	str	r3, [r7, #12]
        break;
 801a91e:	e018      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a920:	f245 1361 	movw	r3, #20833	; 0x5161
 801a924:	60fb      	str	r3, [r7, #12]
        break;
 801a926:	e014      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a928:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a92c:	60fb      	str	r3, [r7, #12]
        break;
 801a92e:	e010      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a930:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a934:	60fb      	str	r3, [r7, #12]
        break;
 801a936:	e00c      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a938:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a93c:	60fb      	str	r3, [r7, #12]
        break;
 801a93e:	e008      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a940:	4b07      	ldr	r3, [pc, #28]	; (801a960 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a942:	60fb      	str	r3, [r7, #12]
        break;
 801a944:	e005      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a946:	4b07      	ldr	r3, [pc, #28]	; (801a964 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a948:	60fb      	str	r3, [r7, #12]
        break;
 801a94a:	e002      	b.n	801a952 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a94c:	4b06      	ldr	r3, [pc, #24]	; (801a968 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a94e:	60fb      	str	r3, [r7, #12]
        break;
 801a950:	bf00      	nop
    }

    return bandwidthInHz;
 801a952:	68fb      	ldr	r3, [r7, #12]
}
 801a954:	4618      	mov	r0, r3
 801a956:	3714      	adds	r7, #20
 801a958:	46bd      	mov	sp, r7
 801a95a:	bc80      	pop	{r7}
 801a95c:	4770      	bx	lr
 801a95e:	bf00      	nop
 801a960:	0001e848 	.word	0x0001e848
 801a964:	0003d090 	.word	0x0003d090
 801a968:	0007a120 	.word	0x0007a120

0801a96c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a96c:	b480      	push	{r7}
 801a96e:	b083      	sub	sp, #12
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	4608      	mov	r0, r1
 801a976:	4611      	mov	r1, r2
 801a978:	461a      	mov	r2, r3
 801a97a:	4603      	mov	r3, r0
 801a97c:	70fb      	strb	r3, [r7, #3]
 801a97e:	460b      	mov	r3, r1
 801a980:	803b      	strh	r3, [r7, #0]
 801a982:	4613      	mov	r3, r2
 801a984:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801a986:	883b      	ldrh	r3, [r7, #0]
 801a988:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a98a:	78ba      	ldrb	r2, [r7, #2]
 801a98c:	f082 0201 	eor.w	r2, r2, #1
 801a990:	b2d2      	uxtb	r2, r2
 801a992:	2a00      	cmp	r2, #0
 801a994:	d001      	beq.n	801a99a <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a996:	2208      	movs	r2, #8
 801a998:	e000      	b.n	801a99c <RadioGetGfskTimeOnAirNumerator+0x30>
 801a99a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a99c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a99e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a9a2:	7c3b      	ldrb	r3, [r7, #16]
 801a9a4:	7d39      	ldrb	r1, [r7, #20]
 801a9a6:	2900      	cmp	r1, #0
 801a9a8:	d001      	beq.n	801a9ae <RadioGetGfskTimeOnAirNumerator+0x42>
 801a9aa:	2102      	movs	r1, #2
 801a9ac:	e000      	b.n	801a9b0 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a9ae:	2100      	movs	r1, #0
 801a9b0:	440b      	add	r3, r1
 801a9b2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a9b4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	370c      	adds	r7, #12
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bc80      	pop	{r7}
 801a9be:	4770      	bx	lr

0801a9c0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a9c0:	b480      	push	{r7}
 801a9c2:	b08b      	sub	sp, #44	; 0x2c
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	60f8      	str	r0, [r7, #12]
 801a9c8:	60b9      	str	r1, [r7, #8]
 801a9ca:	4611      	mov	r1, r2
 801a9cc:	461a      	mov	r2, r3
 801a9ce:	460b      	mov	r3, r1
 801a9d0:	71fb      	strb	r3, [r7, #7]
 801a9d2:	4613      	mov	r3, r2
 801a9d4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a9d6:	79fb      	ldrb	r3, [r7, #7]
 801a9d8:	3304      	adds	r3, #4
 801a9da:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a9dc:	2300      	movs	r3, #0
 801a9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	2b05      	cmp	r3, #5
 801a9e6:	d002      	beq.n	801a9ee <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	2b06      	cmp	r3, #6
 801a9ec:	d104      	bne.n	801a9f8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a9ee:	88bb      	ldrh	r3, [r7, #4]
 801a9f0:	2b0b      	cmp	r3, #11
 801a9f2:	d801      	bhi.n	801a9f8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a9f4:	230c      	movs	r3, #12
 801a9f6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d105      	bne.n	801aa0a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	2b0b      	cmp	r3, #11
 801aa02:	d008      	beq.n	801aa16 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	2b0c      	cmp	r3, #12
 801aa08:	d005      	beq.n	801aa16 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d105      	bne.n	801aa1c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	2b0c      	cmp	r3, #12
 801aa14:	d102      	bne.n	801aa1c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801aa16:	2301      	movs	r3, #1
 801aa18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801aa1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801aa20:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801aa22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801aa26:	2a00      	cmp	r2, #0
 801aa28:	d001      	beq.n	801aa2e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801aa2a:	2210      	movs	r2, #16
 801aa2c:	e000      	b.n	801aa30 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801aa2e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801aa30:	4413      	add	r3, r2
 801aa32:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801aa34:	68bb      	ldr	r3, [r7, #8]
 801aa36:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801aa38:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801aa3a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801aa3e:	2a00      	cmp	r2, #0
 801aa40:	d001      	beq.n	801aa46 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801aa42:	2200      	movs	r2, #0
 801aa44:	e000      	b.n	801aa48 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801aa46:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801aa48:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801aa4a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	2b06      	cmp	r3, #6
 801aa50:	d803      	bhi.n	801aa5a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801aa52:	68bb      	ldr	r3, [r7, #8]
 801aa54:	009b      	lsls	r3, r3, #2
 801aa56:	623b      	str	r3, [r7, #32]
 801aa58:	e00e      	b.n	801aa78 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801aa5a:	69fb      	ldr	r3, [r7, #28]
 801aa5c:	3308      	adds	r3, #8
 801aa5e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801aa60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d004      	beq.n	801aa72 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	3b02      	subs	r3, #2
 801aa6c:	009b      	lsls	r3, r3, #2
 801aa6e:	623b      	str	r3, [r7, #32]
 801aa70:	e002      	b.n	801aa78 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801aa72:	68bb      	ldr	r3, [r7, #8]
 801aa74:	009b      	lsls	r3, r3, #2
 801aa76:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801aa78:	69fb      	ldr	r3, [r7, #28]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	da01      	bge.n	801aa82 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801aa82:	69fa      	ldr	r2, [r7, #28]
 801aa84:	6a3b      	ldr	r3, [r7, #32]
 801aa86:	4413      	add	r3, r2
 801aa88:	1e5a      	subs	r2, r3, #1
 801aa8a:	6a3b      	ldr	r3, [r7, #32]
 801aa8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa90:	697a      	ldr	r2, [r7, #20]
 801aa92:	fb03 f202 	mul.w	r2, r3, r2
 801aa96:	88bb      	ldrh	r3, [r7, #4]
 801aa98:	4413      	add	r3, r2
    int32_t intermediate =
 801aa9a:	330c      	adds	r3, #12
 801aa9c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	2b06      	cmp	r3, #6
 801aaa2:	d802      	bhi.n	801aaaa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801aaa4:	69bb      	ldr	r3, [r7, #24]
 801aaa6:	3302      	adds	r3, #2
 801aaa8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801aaaa:	69bb      	ldr	r3, [r7, #24]
 801aaac:	009b      	lsls	r3, r3, #2
 801aaae:	1c5a      	adds	r2, r3, #1
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	3b02      	subs	r3, #2
 801aab4:	fa02 f303 	lsl.w	r3, r2, r3
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	372c      	adds	r7, #44	; 0x2c
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bc80      	pop	{r7}
 801aac0:	4770      	bx	lr
	...

0801aac4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b08a      	sub	sp, #40	; 0x28
 801aac8:	af04      	add	r7, sp, #16
 801aaca:	60b9      	str	r1, [r7, #8]
 801aacc:	607a      	str	r2, [r7, #4]
 801aace:	461a      	mov	r2, r3
 801aad0:	4603      	mov	r3, r0
 801aad2:	73fb      	strb	r3, [r7, #15]
 801aad4:	4613      	mov	r3, r2
 801aad6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801aad8:	2300      	movs	r3, #0
 801aada:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801aadc:	2301      	movs	r3, #1
 801aade:	613b      	str	r3, [r7, #16]

    switch( modem )
 801aae0:	7bfb      	ldrb	r3, [r7, #15]
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d002      	beq.n	801aaec <RadioTimeOnAir+0x28>
 801aae6:	2b01      	cmp	r3, #1
 801aae8:	d017      	beq.n	801ab1a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801aaea:	e035      	b.n	801ab58 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801aaec:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801aaf0:	8c3a      	ldrh	r2, [r7, #32]
 801aaf2:	7bb9      	ldrb	r1, [r7, #14]
 801aaf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aaf8:	9301      	str	r3, [sp, #4]
 801aafa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aafe:	9300      	str	r3, [sp, #0]
 801ab00:	4603      	mov	r3, r0
 801ab02:	6878      	ldr	r0, [r7, #4]
 801ab04:	f7ff ff32 	bl	801a96c <RadioGetGfskTimeOnAirNumerator>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ab0e:	fb02 f303 	mul.w	r3, r2, r3
 801ab12:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	613b      	str	r3, [r7, #16]
        break;
 801ab18:	e01e      	b.n	801ab58 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801ab1a:	8c39      	ldrh	r1, [r7, #32]
 801ab1c:	7bba      	ldrb	r2, [r7, #14]
 801ab1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ab22:	9302      	str	r3, [sp, #8]
 801ab24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ab28:	9301      	str	r3, [sp, #4]
 801ab2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ab2e:	9300      	str	r3, [sp, #0]
 801ab30:	460b      	mov	r3, r1
 801ab32:	6879      	ldr	r1, [r7, #4]
 801ab34:	68b8      	ldr	r0, [r7, #8]
 801ab36:	f7ff ff43 	bl	801a9c0 <RadioGetLoRaTimeOnAirNumerator>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ab40:	fb02 f303 	mul.w	r3, r2, r3
 801ab44:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801ab46:	4a0a      	ldr	r2, [pc, #40]	; (801ab70 <RadioTimeOnAir+0xac>)
 801ab48:	68bb      	ldr	r3, [r7, #8]
 801ab4a:	4413      	add	r3, r2
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7ff feb6 	bl	801a8c0 <RadioGetLoRaBandwidthInHz>
 801ab54:	6138      	str	r0, [r7, #16]
        break;
 801ab56:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801ab58:	697a      	ldr	r2, [r7, #20]
 801ab5a:	693b      	ldr	r3, [r7, #16]
 801ab5c:	4413      	add	r3, r2
 801ab5e:	1e5a      	subs	r2, r3, #1
 801ab60:	693b      	ldr	r3, [r7, #16]
 801ab62:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801ab66:	4618      	mov	r0, r3
 801ab68:	3718      	adds	r7, #24
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bd80      	pop	{r7, pc}
 801ab6e:	bf00      	nop
 801ab70:	0801fac0 	.word	0x0801fac0

0801ab74 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801ab80:	2300      	movs	r3, #0
 801ab82:	2200      	movs	r2, #0
 801ab84:	f240 2101 	movw	r1, #513	; 0x201
 801ab88:	f240 2001 	movw	r0, #513	; 0x201
 801ab8c:	f001 fd34 	bl	801c5f8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801ab90:	4b71      	ldr	r3, [pc, #452]	; (801ad58 <RadioSend+0x1e4>)
 801ab92:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ab96:	2101      	movs	r1, #1
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f002 f9d1 	bl	801cf40 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801ab9e:	4b6e      	ldr	r3, [pc, #440]	; (801ad58 <RadioSend+0x1e4>)
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	2b01      	cmp	r3, #1
 801aba4:	d112      	bne.n	801abcc <RadioSend+0x58>
 801aba6:	4b6c      	ldr	r3, [pc, #432]	; (801ad58 <RadioSend+0x1e4>)
 801aba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801abac:	2b06      	cmp	r3, #6
 801abae:	d10d      	bne.n	801abcc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801abb0:	f640 0089 	movw	r0, #2185	; 0x889
 801abb4:	f002 f8e4 	bl	801cd80 <SUBGRF_ReadRegister>
 801abb8:	4603      	mov	r3, r0
 801abba:	f023 0304 	bic.w	r3, r3, #4
 801abbe:	b2db      	uxtb	r3, r3
 801abc0:	4619      	mov	r1, r3
 801abc2:	f640 0089 	movw	r0, #2185	; 0x889
 801abc6:	f002 f8c7 	bl	801cd58 <SUBGRF_WriteRegister>
 801abca:	e00c      	b.n	801abe6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801abcc:	f640 0089 	movw	r0, #2185	; 0x889
 801abd0:	f002 f8d6 	bl	801cd80 <SUBGRF_ReadRegister>
 801abd4:	4603      	mov	r3, r0
 801abd6:	f043 0304 	orr.w	r3, r3, #4
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	4619      	mov	r1, r3
 801abde:	f640 0089 	movw	r0, #2185	; 0x889
 801abe2:	f002 f8b9 	bl	801cd58 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801abe6:	4b5c      	ldr	r3, [pc, #368]	; (801ad58 <RadioSend+0x1e4>)
 801abe8:	781b      	ldrb	r3, [r3, #0]
 801abea:	2b04      	cmp	r3, #4
 801abec:	f200 80a7 	bhi.w	801ad3e <RadioSend+0x1ca>
 801abf0:	a201      	add	r2, pc, #4	; (adr r2, 801abf8 <RadioSend+0x84>)
 801abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abf6:	bf00      	nop
 801abf8:	0801ac27 	.word	0x0801ac27
 801abfc:	0801ac0d 	.word	0x0801ac0d
 801ac00:	0801ac27 	.word	0x0801ac27
 801ac04:	0801ac87 	.word	0x0801ac87
 801ac08:	0801aca7 	.word	0x0801aca7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ac0c:	4a52      	ldr	r2, [pc, #328]	; (801ad58 <RadioSend+0x1e4>)
 801ac0e:	78fb      	ldrb	r3, [r7, #3]
 801ac10:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac12:	4852      	ldr	r0, [pc, #328]	; (801ad5c <RadioSend+0x1e8>)
 801ac14:	f001 ff58 	bl	801cac8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ac18:	78fb      	ldrb	r3, [r7, #3]
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	6878      	ldr	r0, [r7, #4]
 801ac20:	f001 fa0c 	bl	801c03c <SUBGRF_SendPayload>
            break;
 801ac24:	e08c      	b.n	801ad40 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ac26:	f002 fb74 	bl	801d312 <RFW_Is_Init>
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	2b01      	cmp	r3, #1
 801ac2e:	d11d      	bne.n	801ac6c <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ac30:	f107 020d 	add.w	r2, r7, #13
 801ac34:	78fb      	ldrb	r3, [r7, #3]
 801ac36:	4619      	mov	r1, r3
 801ac38:	6878      	ldr	r0, [r7, #4]
 801ac3a:	f002 fb82 	bl	801d342 <RFW_TransmitInit>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d10c      	bne.n	801ac5e <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ac44:	7b7a      	ldrb	r2, [r7, #13]
 801ac46:	4b44      	ldr	r3, [pc, #272]	; (801ad58 <RadioSend+0x1e4>)
 801ac48:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac4a:	4844      	ldr	r0, [pc, #272]	; (801ad5c <RadioSend+0x1e8>)
 801ac4c:	f001 ff3c 	bl	801cac8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801ac50:	7b7b      	ldrb	r3, [r7, #13]
 801ac52:	2200      	movs	r2, #0
 801ac54:	4619      	mov	r1, r3
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	f001 f9f0 	bl	801c03c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801ac5c:	e070      	b.n	801ad40 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801ac5e:	4b40      	ldr	r3, [pc, #256]	; (801ad60 <RadioSend+0x1ec>)
 801ac60:	2201      	movs	r2, #1
 801ac62:	2100      	movs	r1, #0
 801ac64:	2002      	movs	r0, #2
 801ac66:	f003 fc91 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
 801ac6a:	e072      	b.n	801ad52 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801ac6c:	4a3a      	ldr	r2, [pc, #232]	; (801ad58 <RadioSend+0x1e4>)
 801ac6e:	78fb      	ldrb	r3, [r7, #3]
 801ac70:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac72:	483a      	ldr	r0, [pc, #232]	; (801ad5c <RadioSend+0x1e8>)
 801ac74:	f001 ff28 	bl	801cac8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801ac78:	78fb      	ldrb	r3, [r7, #3]
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	4619      	mov	r1, r3
 801ac7e:	6878      	ldr	r0, [r7, #4]
 801ac80:	f001 f9dc 	bl	801c03c <SUBGRF_SendPayload>
            break;
 801ac84:	e05c      	b.n	801ad40 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ac86:	4b34      	ldr	r3, [pc, #208]	; (801ad58 <RadioSend+0x1e4>)
 801ac88:	2202      	movs	r2, #2
 801ac8a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801ac8c:	4a32      	ldr	r2, [pc, #200]	; (801ad58 <RadioSend+0x1e4>)
 801ac8e:	78fb      	ldrb	r3, [r7, #3]
 801ac90:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac92:	4832      	ldr	r0, [pc, #200]	; (801ad5c <RadioSend+0x1e8>)
 801ac94:	f001 ff18 	bl	801cac8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ac98:	78fb      	ldrb	r3, [r7, #3]
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	4619      	mov	r1, r3
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	f001 f9cc 	bl	801c03c <SUBGRF_SendPayload>
            break;
 801aca4:	e04c      	b.n	801ad40 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801aca6:	78fb      	ldrb	r3, [r7, #3]
 801aca8:	461a      	mov	r2, r3
 801acaa:	6879      	ldr	r1, [r7, #4]
 801acac:	482d      	ldr	r0, [pc, #180]	; (801ad64 <RadioSend+0x1f0>)
 801acae:	f000 fcbc 	bl	801b62a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801acb2:	4b29      	ldr	r3, [pc, #164]	; (801ad58 <RadioSend+0x1e4>)
 801acb4:	2202      	movs	r2, #2
 801acb6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801acb8:	78fb      	ldrb	r3, [r7, #3]
 801acba:	3301      	adds	r3, #1
 801acbc:	b2da      	uxtb	r2, r3
 801acbe:	4b26      	ldr	r3, [pc, #152]	; (801ad58 <RadioSend+0x1e4>)
 801acc0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801acc2:	4826      	ldr	r0, [pc, #152]	; (801ad5c <RadioSend+0x1e8>)
 801acc4:	f001 ff00 	bl	801cac8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801acc8:	2100      	movs	r1, #0
 801acca:	20f1      	movs	r0, #241	; 0xf1
 801accc:	f000 f95d 	bl	801af8a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801acd0:	2100      	movs	r1, #0
 801acd2:	20f0      	movs	r0, #240	; 0xf0
 801acd4:	f000 f959 	bl	801af8a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801acd8:	4b1f      	ldr	r3, [pc, #124]	; (801ad58 <RadioSend+0x1e4>)
 801acda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801acdc:	2b64      	cmp	r3, #100	; 0x64
 801acde:	d108      	bne.n	801acf2 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801ace0:	2170      	movs	r1, #112	; 0x70
 801ace2:	20f3      	movs	r0, #243	; 0xf3
 801ace4:	f000 f951 	bl	801af8a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801ace8:	211d      	movs	r1, #29
 801acea:	20f2      	movs	r0, #242	; 0xf2
 801acec:	f000 f94d 	bl	801af8a <RadioWrite>
 801acf0:	e007      	b.n	801ad02 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801acf2:	21e1      	movs	r1, #225	; 0xe1
 801acf4:	20f3      	movs	r0, #243	; 0xf3
 801acf6:	f000 f948 	bl	801af8a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801acfa:	2104      	movs	r1, #4
 801acfc:	20f2      	movs	r0, #242	; 0xf2
 801acfe:	f000 f944 	bl	801af8a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801ad02:	78fb      	ldrb	r3, [r7, #3]
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	00db      	lsls	r3, r3, #3
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	3302      	adds	r3, #2
 801ad0c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801ad0e:	89fb      	ldrh	r3, [r7, #14]
 801ad10:	0a1b      	lsrs	r3, r3, #8
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	4619      	mov	r1, r3
 801ad18:	20f4      	movs	r0, #244	; 0xf4
 801ad1a:	f000 f936 	bl	801af8a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801ad1e:	89fb      	ldrh	r3, [r7, #14]
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	4619      	mov	r1, r3
 801ad24:	20f5      	movs	r0, #245	; 0xf5
 801ad26:	f000 f930 	bl	801af8a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801ad2a:	78fb      	ldrb	r3, [r7, #3]
 801ad2c:	3301      	adds	r3, #1
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801ad34:	4619      	mov	r1, r3
 801ad36:	480b      	ldr	r0, [pc, #44]	; (801ad64 <RadioSend+0x1f0>)
 801ad38:	f001 f980 	bl	801c03c <SUBGRF_SendPayload>
            break;
 801ad3c:	e000      	b.n	801ad40 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ad3e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801ad40:	4b05      	ldr	r3, [pc, #20]	; (801ad58 <RadioSend+0x1e4>)
 801ad42:	685b      	ldr	r3, [r3, #4]
 801ad44:	4619      	mov	r1, r3
 801ad46:	4808      	ldr	r0, [pc, #32]	; (801ad68 <RadioSend+0x1f4>)
 801ad48:	f003 fa86 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801ad4c:	4806      	ldr	r0, [pc, #24]	; (801ad68 <RadioSend+0x1f4>)
 801ad4e:	f003 f9a5 	bl	801e09c <UTIL_TIMER_Start>
}
 801ad52:	3710      	adds	r7, #16
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bd80      	pop	{r7, pc}
 801ad58:	200023a0 	.word	0x200023a0
 801ad5c:	200023ae 	.word	0x200023ae
 801ad60:	0801f4ec 	.word	0x0801f4ec
 801ad64:	2000229c 	.word	0x2000229c
 801ad68:	200023fc 	.word	0x200023fc

0801ad6c <RadioSleep>:

static void RadioSleep( void )
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b082      	sub	sp, #8
 801ad70:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801ad72:	2300      	movs	r3, #0
 801ad74:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801ad76:	793b      	ldrb	r3, [r7, #4]
 801ad78:	f043 0304 	orr.w	r3, r3, #4
 801ad7c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801ad7e:	7938      	ldrb	r0, [r7, #4]
 801ad80:	f001 fa38 	bl	801c1f4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801ad84:	2002      	movs	r0, #2
 801ad86:	f7e7 ff65 	bl	8002c54 <HAL_Delay>
}
 801ad8a:	bf00      	nop
 801ad8c:	3708      	adds	r7, #8
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd80      	pop	{r7, pc}

0801ad92 <RadioStandby>:

static void RadioStandby( void )
{
 801ad92:	b580      	push	{r7, lr}
 801ad94:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801ad96:	2000      	movs	r0, #0
 801ad98:	f001 fa5e 	bl	801c258 <SUBGRF_SetStandby>
}
 801ad9c:	bf00      	nop
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b082      	sub	sp, #8
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801ada8:	f002 fab3 	bl	801d312 <RFW_Is_Init>
 801adac:	4603      	mov	r3, r0
 801adae:	2b01      	cmp	r3, #1
 801adb0:	d102      	bne.n	801adb8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801adb2:	f002 fad6 	bl	801d362 <RFW_ReceiveInit>
 801adb6:	e007      	b.n	801adc8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801adb8:	2300      	movs	r3, #0
 801adba:	2200      	movs	r2, #0
 801adbc:	f240 2162 	movw	r1, #610	; 0x262
 801adc0:	f240 2062 	movw	r0, #610	; 0x262
 801adc4:	f001 fc18 	bl	801c5f8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d006      	beq.n	801addc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801adce:	6879      	ldr	r1, [r7, #4]
 801add0:	4811      	ldr	r0, [pc, #68]	; (801ae18 <RadioRx+0x78>)
 801add2:	f003 fa41 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801add6:	4810      	ldr	r0, [pc, #64]	; (801ae18 <RadioRx+0x78>)
 801add8:	f003 f960 	bl	801e09c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801addc:	4b0f      	ldr	r3, [pc, #60]	; (801ae1c <RadioRx+0x7c>)
 801adde:	2200      	movs	r2, #0
 801ade0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ade2:	4b0e      	ldr	r3, [pc, #56]	; (801ae1c <RadioRx+0x7c>)
 801ade4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ade8:	2100      	movs	r1, #0
 801adea:	4618      	mov	r0, r3
 801adec:	f002 f8a8 	bl	801cf40 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801adf0:	4b0a      	ldr	r3, [pc, #40]	; (801ae1c <RadioRx+0x7c>)
 801adf2:	785b      	ldrb	r3, [r3, #1]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d004      	beq.n	801ae02 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801adf8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801adfc:	f001 fa68 	bl	801c2d0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ae00:	e005      	b.n	801ae0e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ae02:	4b06      	ldr	r3, [pc, #24]	; (801ae1c <RadioRx+0x7c>)
 801ae04:	689b      	ldr	r3, [r3, #8]
 801ae06:	019b      	lsls	r3, r3, #6
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f001 fa61 	bl	801c2d0 <SUBGRF_SetRx>
}
 801ae0e:	bf00      	nop
 801ae10:	3708      	adds	r7, #8
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	20002414 	.word	0x20002414
 801ae1c:	200023a0 	.word	0x200023a0

0801ae20 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b082      	sub	sp, #8
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801ae28:	f002 fa73 	bl	801d312 <RFW_Is_Init>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	2b01      	cmp	r3, #1
 801ae30:	d102      	bne.n	801ae38 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801ae32:	f002 fa96 	bl	801d362 <RFW_ReceiveInit>
 801ae36:	e007      	b.n	801ae48 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ae38:	2300      	movs	r3, #0
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	f240 2162 	movw	r1, #610	; 0x262
 801ae40:	f240 2062 	movw	r0, #610	; 0x262
 801ae44:	f001 fbd8 	bl	801c5f8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d006      	beq.n	801ae5c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ae4e:	6879      	ldr	r1, [r7, #4]
 801ae50:	4811      	ldr	r0, [pc, #68]	; (801ae98 <RadioRxBoosted+0x78>)
 801ae52:	f003 fa01 	bl	801e258 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ae56:	4810      	ldr	r0, [pc, #64]	; (801ae98 <RadioRxBoosted+0x78>)
 801ae58:	f003 f920 	bl	801e09c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ae5c:	4b0f      	ldr	r3, [pc, #60]	; (801ae9c <RadioRxBoosted+0x7c>)
 801ae5e:	2200      	movs	r2, #0
 801ae60:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae62:	4b0e      	ldr	r3, [pc, #56]	; (801ae9c <RadioRxBoosted+0x7c>)
 801ae64:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae68:	2100      	movs	r1, #0
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f002 f868 	bl	801cf40 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801ae70:	4b0a      	ldr	r3, [pc, #40]	; (801ae9c <RadioRxBoosted+0x7c>)
 801ae72:	785b      	ldrb	r3, [r3, #1]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d004      	beq.n	801ae82 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801ae78:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ae7c:	f001 fa48 	bl	801c310 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801ae80:	e005      	b.n	801ae8e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801ae82:	4b06      	ldr	r3, [pc, #24]	; (801ae9c <RadioRxBoosted+0x7c>)
 801ae84:	689b      	ldr	r3, [r3, #8]
 801ae86:	019b      	lsls	r3, r3, #6
 801ae88:	4618      	mov	r0, r3
 801ae8a:	f001 fa41 	bl	801c310 <SUBGRF_SetRxBoosted>
}
 801ae8e:	bf00      	nop
 801ae90:	3708      	adds	r7, #8
 801ae92:	46bd      	mov	sp, r7
 801ae94:	bd80      	pop	{r7, pc}
 801ae96:	bf00      	nop
 801ae98:	20002414 	.word	0x20002414
 801ae9c:	200023a0 	.word	0x200023a0

0801aea0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b082      	sub	sp, #8
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	6078      	str	r0, [r7, #4]
 801aea8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	005a      	lsls	r2, r3, #1
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	4413      	add	r3, r2
 801aeb2:	4a0c      	ldr	r2, [pc, #48]	; (801aee4 <RadioSetRxDutyCycle+0x44>)
 801aeb4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	2200      	movs	r2, #0
 801aeba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801aebe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801aec2:	f001 fb99 	bl	801c5f8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801aec6:	4b07      	ldr	r3, [pc, #28]	; (801aee4 <RadioSetRxDutyCycle+0x44>)
 801aec8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aecc:	2100      	movs	r1, #0
 801aece:	4618      	mov	r0, r3
 801aed0:	f002 f836 	bl	801cf40 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801aed4:	6839      	ldr	r1, [r7, #0]
 801aed6:	6878      	ldr	r0, [r7, #4]
 801aed8:	f001 fa3e 	bl	801c358 <SUBGRF_SetRxDutyCycle>
}
 801aedc:	bf00      	nop
 801aede:	3708      	adds	r7, #8
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}
 801aee4:	200023a0 	.word	0x200023a0

0801aee8 <RadioStartCad>:

static void RadioStartCad( void )
{
 801aee8:	b580      	push	{r7, lr}
 801aeea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801aeec:	4b09      	ldr	r3, [pc, #36]	; (801af14 <RadioStartCad+0x2c>)
 801aeee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aef2:	2100      	movs	r1, #0
 801aef4:	4618      	mov	r0, r3
 801aef6:	f002 f823 	bl	801cf40 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801aefa:	2300      	movs	r3, #0
 801aefc:	2200      	movs	r2, #0
 801aefe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801af02:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801af06:	f001 fb77 	bl	801c5f8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801af0a:	f001 fa51 	bl	801c3b0 <SUBGRF_SetCad>
}
 801af0e:	bf00      	nop
 801af10:	bd80      	pop	{r7, pc}
 801af12:	bf00      	nop
 801af14:	200023a0 	.word	0x200023a0

0801af18 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b084      	sub	sp, #16
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
 801af20:	460b      	mov	r3, r1
 801af22:	70fb      	strb	r3, [r7, #3]
 801af24:	4613      	mov	r3, r2
 801af26:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801af28:	883b      	ldrh	r3, [r7, #0]
 801af2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801af2e:	fb02 f303 	mul.w	r3, r2, r3
 801af32:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801af34:	6878      	ldr	r0, [r7, #4]
 801af36:	f001 fbbb 	bl	801c6b0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801af3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801af3e:	4618      	mov	r0, r3
 801af40:	f002 f826 	bl	801cf90 <SUBGRF_SetRfTxPower>
 801af44:	4603      	mov	r3, r0
 801af46:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801af48:	7afb      	ldrb	r3, [r7, #11]
 801af4a:	2101      	movs	r1, #1
 801af4c:	4618      	mov	r0, r3
 801af4e:	f001 fff7 	bl	801cf40 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801af52:	f001 fa3b 	bl	801c3cc <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801af56:	68f9      	ldr	r1, [r7, #12]
 801af58:	4804      	ldr	r0, [pc, #16]	; (801af6c <RadioSetTxContinuousWave+0x54>)
 801af5a:	f003 f97d 	bl	801e258 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801af5e:	4803      	ldr	r0, [pc, #12]	; (801af6c <RadioSetTxContinuousWave+0x54>)
 801af60:	f003 f89c 	bl	801e09c <UTIL_TIMER_Start>
}
 801af64:	bf00      	nop
 801af66:	3710      	adds	r7, #16
 801af68:	46bd      	mov	sp, r7
 801af6a:	bd80      	pop	{r7, pc}
 801af6c:	200023fc 	.word	0x200023fc

0801af70 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b082      	sub	sp, #8
 801af74:	af00      	add	r7, sp, #0
 801af76:	4603      	mov	r3, r0
 801af78:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801af7a:	f001 fe5a 	bl	801cc32 <SUBGRF_GetRssiInst>
 801af7e:	4603      	mov	r3, r0
 801af80:	b21b      	sxth	r3, r3
}
 801af82:	4618      	mov	r0, r3
 801af84:	3708      	adds	r7, #8
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}

0801af8a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801af8a:	b580      	push	{r7, lr}
 801af8c:	b082      	sub	sp, #8
 801af8e:	af00      	add	r7, sp, #0
 801af90:	4603      	mov	r3, r0
 801af92:	460a      	mov	r2, r1
 801af94:	80fb      	strh	r3, [r7, #6]
 801af96:	4613      	mov	r3, r2
 801af98:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801af9a:	797a      	ldrb	r2, [r7, #5]
 801af9c:	88fb      	ldrh	r3, [r7, #6]
 801af9e:	4611      	mov	r1, r2
 801afa0:	4618      	mov	r0, r3
 801afa2:	f001 fed9 	bl	801cd58 <SUBGRF_WriteRegister>
}
 801afa6:	bf00      	nop
 801afa8:	3708      	adds	r7, #8
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}

0801afae <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801afae:	b580      	push	{r7, lr}
 801afb0:	b082      	sub	sp, #8
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	4603      	mov	r3, r0
 801afb6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801afb8:	88fb      	ldrh	r3, [r7, #6]
 801afba:	4618      	mov	r0, r3
 801afbc:	f001 fee0 	bl	801cd80 <SUBGRF_ReadRegister>
 801afc0:	4603      	mov	r3, r0
}
 801afc2:	4618      	mov	r0, r3
 801afc4:	3708      	adds	r7, #8
 801afc6:	46bd      	mov	sp, r7
 801afc8:	bd80      	pop	{r7, pc}

0801afca <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801afca:	b580      	push	{r7, lr}
 801afcc:	b082      	sub	sp, #8
 801afce:	af00      	add	r7, sp, #0
 801afd0:	4603      	mov	r3, r0
 801afd2:	6039      	str	r1, [r7, #0]
 801afd4:	80fb      	strh	r3, [r7, #6]
 801afd6:	4613      	mov	r3, r2
 801afd8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801afda:	797b      	ldrb	r3, [r7, #5]
 801afdc:	b29a      	uxth	r2, r3
 801afde:	88fb      	ldrh	r3, [r7, #6]
 801afe0:	6839      	ldr	r1, [r7, #0]
 801afe2:	4618      	mov	r0, r3
 801afe4:	f001 fee0 	bl	801cda8 <SUBGRF_WriteRegisters>
}
 801afe8:	bf00      	nop
 801afea:	3708      	adds	r7, #8
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}

0801aff0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b082      	sub	sp, #8
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	4603      	mov	r3, r0
 801aff8:	6039      	str	r1, [r7, #0]
 801affa:	80fb      	strh	r3, [r7, #6]
 801affc:	4613      	mov	r3, r2
 801affe:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801b000:	797b      	ldrb	r3, [r7, #5]
 801b002:	b29a      	uxth	r2, r3
 801b004:	88fb      	ldrh	r3, [r7, #6]
 801b006:	6839      	ldr	r1, [r7, #0]
 801b008:	4618      	mov	r0, r3
 801b00a:	f001 feef 	bl	801cdec <SUBGRF_ReadRegisters>
}
 801b00e:	bf00      	nop
 801b010:	3708      	adds	r7, #8
 801b012:	46bd      	mov	sp, r7
 801b014:	bd80      	pop	{r7, pc}
	...

0801b018 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b082      	sub	sp, #8
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	4603      	mov	r3, r0
 801b020:	460a      	mov	r2, r1
 801b022:	71fb      	strb	r3, [r7, #7]
 801b024:	4613      	mov	r3, r2
 801b026:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801b028:	79fb      	ldrb	r3, [r7, #7]
 801b02a:	2b01      	cmp	r3, #1
 801b02c:	d10a      	bne.n	801b044 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801b02e:	4a0e      	ldr	r2, [pc, #56]	; (801b068 <RadioSetMaxPayloadLength+0x50>)
 801b030:	79bb      	ldrb	r3, [r7, #6]
 801b032:	7013      	strb	r3, [r2, #0]
 801b034:	4b0c      	ldr	r3, [pc, #48]	; (801b068 <RadioSetMaxPayloadLength+0x50>)
 801b036:	781a      	ldrb	r2, [r3, #0]
 801b038:	4b0c      	ldr	r3, [pc, #48]	; (801b06c <RadioSetMaxPayloadLength+0x54>)
 801b03a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b03c:	480c      	ldr	r0, [pc, #48]	; (801b070 <RadioSetMaxPayloadLength+0x58>)
 801b03e:	f001 fd43 	bl	801cac8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801b042:	e00d      	b.n	801b060 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801b044:	4b09      	ldr	r3, [pc, #36]	; (801b06c <RadioSetMaxPayloadLength+0x54>)
 801b046:	7d5b      	ldrb	r3, [r3, #21]
 801b048:	2b01      	cmp	r3, #1
 801b04a:	d109      	bne.n	801b060 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801b04c:	4a06      	ldr	r2, [pc, #24]	; (801b068 <RadioSetMaxPayloadLength+0x50>)
 801b04e:	79bb      	ldrb	r3, [r7, #6]
 801b050:	7013      	strb	r3, [r2, #0]
 801b052:	4b05      	ldr	r3, [pc, #20]	; (801b068 <RadioSetMaxPayloadLength+0x50>)
 801b054:	781a      	ldrb	r2, [r3, #0]
 801b056:	4b05      	ldr	r3, [pc, #20]	; (801b06c <RadioSetMaxPayloadLength+0x54>)
 801b058:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b05a:	4805      	ldr	r0, [pc, #20]	; (801b070 <RadioSetMaxPayloadLength+0x58>)
 801b05c:	f001 fd34 	bl	801cac8 <SUBGRF_SetPacketParams>
}
 801b060:	bf00      	nop
 801b062:	3708      	adds	r7, #8
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}
 801b068:	20000160 	.word	0x20000160
 801b06c:	200023a0 	.word	0x200023a0
 801b070:	200023ae 	.word	0x200023ae

0801b074 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b082      	sub	sp, #8
 801b078:	af00      	add	r7, sp, #0
 801b07a:	4603      	mov	r3, r0
 801b07c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801b07e:	4a13      	ldr	r2, [pc, #76]	; (801b0cc <RadioSetPublicNetwork+0x58>)
 801b080:	79fb      	ldrb	r3, [r7, #7]
 801b082:	7313      	strb	r3, [r2, #12]
 801b084:	4b11      	ldr	r3, [pc, #68]	; (801b0cc <RadioSetPublicNetwork+0x58>)
 801b086:	7b1a      	ldrb	r2, [r3, #12]
 801b088:	4b10      	ldr	r3, [pc, #64]	; (801b0cc <RadioSetPublicNetwork+0x58>)
 801b08a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b08c:	2001      	movs	r0, #1
 801b08e:	f7ff f82d 	bl	801a0ec <RadioSetModem>
    if( enable == true )
 801b092:	79fb      	ldrb	r3, [r7, #7]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d00a      	beq.n	801b0ae <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b098:	2134      	movs	r1, #52	; 0x34
 801b09a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b09e:	f001 fe5b 	bl	801cd58 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b0a2:	2144      	movs	r1, #68	; 0x44
 801b0a4:	f240 7041 	movw	r0, #1857	; 0x741
 801b0a8:	f001 fe56 	bl	801cd58 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b0ac:	e009      	b.n	801b0c2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b0ae:	2114      	movs	r1, #20
 801b0b0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b0b4:	f001 fe50 	bl	801cd58 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b0b8:	2124      	movs	r1, #36	; 0x24
 801b0ba:	f240 7041 	movw	r0, #1857	; 0x741
 801b0be:	f001 fe4b 	bl	801cd58 <SUBGRF_WriteRegister>
}
 801b0c2:	bf00      	nop
 801b0c4:	3708      	adds	r7, #8
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}
 801b0ca:	bf00      	nop
 801b0cc:	200023a0 	.word	0x200023a0

0801b0d0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b0d4:	f001 ff90 	bl	801cff8 <SUBGRF_GetRadioWakeUpTime>
 801b0d8:	4603      	mov	r3, r0
 801b0da:	3303      	adds	r3, #3
}
 801b0dc:	4618      	mov	r0, r3
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b082      	sub	sp, #8
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b0e8:	f000 f80e 	bl	801b108 <RadioOnTxTimeoutProcess>
}
 801b0ec:	bf00      	nop
 801b0ee:	3708      	adds	r7, #8
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}

0801b0f4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b082      	sub	sp, #8
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b0fc:	f000 f818 	bl	801b130 <RadioOnRxTimeoutProcess>
}
 801b100:	bf00      	nop
 801b102:	3708      	adds	r7, #8
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}

0801b108 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b10c:	4b07      	ldr	r3, [pc, #28]	; (801b12c <RadioOnTxTimeoutProcess+0x24>)
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d008      	beq.n	801b126 <RadioOnTxTimeoutProcess+0x1e>
 801b114:	4b05      	ldr	r3, [pc, #20]	; (801b12c <RadioOnTxTimeoutProcess+0x24>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	685b      	ldr	r3, [r3, #4]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d003      	beq.n	801b126 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b11e:	4b03      	ldr	r3, [pc, #12]	; (801b12c <RadioOnTxTimeoutProcess+0x24>)
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	685b      	ldr	r3, [r3, #4]
 801b124:	4798      	blx	r3
    }
}
 801b126:	bf00      	nop
 801b128:	bd80      	pop	{r7, pc}
 801b12a:	bf00      	nop
 801b12c:	2000239c 	.word	0x2000239c

0801b130 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b130:	b580      	push	{r7, lr}
 801b132:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b134:	4b07      	ldr	r3, [pc, #28]	; (801b154 <RadioOnRxTimeoutProcess+0x24>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d008      	beq.n	801b14e <RadioOnRxTimeoutProcess+0x1e>
 801b13c:	4b05      	ldr	r3, [pc, #20]	; (801b154 <RadioOnRxTimeoutProcess+0x24>)
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	68db      	ldr	r3, [r3, #12]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d003      	beq.n	801b14e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b146:	4b03      	ldr	r3, [pc, #12]	; (801b154 <RadioOnRxTimeoutProcess+0x24>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	68db      	ldr	r3, [r3, #12]
 801b14c:	4798      	blx	r3
    }
}
 801b14e:	bf00      	nop
 801b150:	bd80      	pop	{r7, pc}
 801b152:	bf00      	nop
 801b154:	2000239c 	.word	0x2000239c

0801b158 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	4603      	mov	r3, r0
 801b160:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b162:	4a05      	ldr	r2, [pc, #20]	; (801b178 <RadioOnDioIrq+0x20>)
 801b164:	88fb      	ldrh	r3, [r7, #6]
 801b166:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b16a:	f000 f807 	bl	801b17c <RadioIrqProcess>
}
 801b16e:	bf00      	nop
 801b170:	3708      	adds	r7, #8
 801b172:	46bd      	mov	sp, r7
 801b174:	bd80      	pop	{r7, pc}
 801b176:	bf00      	nop
 801b178:	200023a0 	.word	0x200023a0

0801b17c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b17c:	b590      	push	{r4, r7, lr}
 801b17e:	b083      	sub	sp, #12
 801b180:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b182:	2300      	movs	r3, #0
 801b184:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b186:	2300      	movs	r3, #0
 801b188:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b18a:	4ba8      	ldr	r3, [pc, #672]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b18c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b194:	f000 810c 	beq.w	801b3b0 <RadioIrqProcess+0x234>
 801b198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b19c:	f300 81e8 	bgt.w	801b570 <RadioIrqProcess+0x3f4>
 801b1a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b1a4:	f000 80f0 	beq.w	801b388 <RadioIrqProcess+0x20c>
 801b1a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b1ac:	f300 81e0 	bgt.w	801b570 <RadioIrqProcess+0x3f4>
 801b1b0:	2b80      	cmp	r3, #128	; 0x80
 801b1b2:	f000 80d5 	beq.w	801b360 <RadioIrqProcess+0x1e4>
 801b1b6:	2b80      	cmp	r3, #128	; 0x80
 801b1b8:	f300 81da 	bgt.w	801b570 <RadioIrqProcess+0x3f4>
 801b1bc:	2b20      	cmp	r3, #32
 801b1be:	dc49      	bgt.n	801b254 <RadioIrqProcess+0xd8>
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	f340 81d5 	ble.w	801b570 <RadioIrqProcess+0x3f4>
 801b1c6:	3b01      	subs	r3, #1
 801b1c8:	2b1f      	cmp	r3, #31
 801b1ca:	f200 81d1 	bhi.w	801b570 <RadioIrqProcess+0x3f4>
 801b1ce:	a201      	add	r2, pc, #4	; (adr r2, 801b1d4 <RadioIrqProcess+0x58>)
 801b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1d4:	0801b25d 	.word	0x0801b25d
 801b1d8:	0801b297 	.word	0x0801b297
 801b1dc:	0801b571 	.word	0x0801b571
 801b1e0:	0801b44d 	.word	0x0801b44d
 801b1e4:	0801b571 	.word	0x0801b571
 801b1e8:	0801b571 	.word	0x0801b571
 801b1ec:	0801b571 	.word	0x0801b571
 801b1f0:	0801b4c9 	.word	0x0801b4c9
 801b1f4:	0801b571 	.word	0x0801b571
 801b1f8:	0801b571 	.word	0x0801b571
 801b1fc:	0801b571 	.word	0x0801b571
 801b200:	0801b571 	.word	0x0801b571
 801b204:	0801b571 	.word	0x0801b571
 801b208:	0801b571 	.word	0x0801b571
 801b20c:	0801b571 	.word	0x0801b571
 801b210:	0801b4e5 	.word	0x0801b4e5
 801b214:	0801b571 	.word	0x0801b571
 801b218:	0801b571 	.word	0x0801b571
 801b21c:	0801b571 	.word	0x0801b571
 801b220:	0801b571 	.word	0x0801b571
 801b224:	0801b571 	.word	0x0801b571
 801b228:	0801b571 	.word	0x0801b571
 801b22c:	0801b571 	.word	0x0801b571
 801b230:	0801b571 	.word	0x0801b571
 801b234:	0801b571 	.word	0x0801b571
 801b238:	0801b571 	.word	0x0801b571
 801b23c:	0801b571 	.word	0x0801b571
 801b240:	0801b571 	.word	0x0801b571
 801b244:	0801b571 	.word	0x0801b571
 801b248:	0801b571 	.word	0x0801b571
 801b24c:	0801b571 	.word	0x0801b571
 801b250:	0801b4f3 	.word	0x0801b4f3
 801b254:	2b40      	cmp	r3, #64	; 0x40
 801b256:	f000 816d 	beq.w	801b534 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801b25a:	e189      	b.n	801b570 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b25c:	4874      	ldr	r0, [pc, #464]	; (801b430 <RadioIrqProcess+0x2b4>)
 801b25e:	f002 ff8b 	bl	801e178 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b262:	2000      	movs	r0, #0
 801b264:	f000 fff8 	bl	801c258 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b268:	f002 f85a 	bl	801d320 <RFW_Is_LongPacketModeEnabled>
 801b26c:	4603      	mov	r3, r0
 801b26e:	2b01      	cmp	r3, #1
 801b270:	d101      	bne.n	801b276 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b272:	f002 f87e 	bl	801d372 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b276:	4b6f      	ldr	r3, [pc, #444]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	f000 817a 	beq.w	801b574 <RadioIrqProcess+0x3f8>
 801b280:	4b6c      	ldr	r3, [pc, #432]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	f000 8174 	beq.w	801b574 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b28c:	4b69      	ldr	r3, [pc, #420]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	4798      	blx	r3
        break;
 801b294:	e16e      	b.n	801b574 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b296:	4868      	ldr	r0, [pc, #416]	; (801b438 <RadioIrqProcess+0x2bc>)
 801b298:	f002 ff6e 	bl	801e178 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b29c:	4b63      	ldr	r3, [pc, #396]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b29e:	785b      	ldrb	r3, [r3, #1]
 801b2a0:	f083 0301 	eor.w	r3, r3, #1
 801b2a4:	b2db      	uxtb	r3, r3
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d014      	beq.n	801b2d4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b2aa:	2000      	movs	r0, #0
 801b2ac:	f000 ffd4 	bl	801c258 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b2b0:	2100      	movs	r1, #0
 801b2b2:	f640 1002 	movw	r0, #2306	; 0x902
 801b2b6:	f001 fd4f 	bl	801cd58 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b2ba:	f640 1044 	movw	r0, #2372	; 0x944
 801b2be:	f001 fd5f 	bl	801cd80 <SUBGRF_ReadRegister>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	f043 0302 	orr.w	r3, r3, #2
 801b2c8:	b2db      	uxtb	r3, r3
 801b2ca:	4619      	mov	r1, r3
 801b2cc:	f640 1044 	movw	r0, #2372	; 0x944
 801b2d0:	f001 fd42 	bl	801cd58 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b2d4:	1dfb      	adds	r3, r7, #7
 801b2d6:	22ff      	movs	r2, #255	; 0xff
 801b2d8:	4619      	mov	r1, r3
 801b2da:	4858      	ldr	r0, [pc, #352]	; (801b43c <RadioIrqProcess+0x2c0>)
 801b2dc:	f000 fe8c 	bl	801bff8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b2e0:	4857      	ldr	r0, [pc, #348]	; (801b440 <RadioIrqProcess+0x2c4>)
 801b2e2:	f001 fce7 	bl	801ccb4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b2e6:	4b53      	ldr	r3, [pc, #332]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d036      	beq.n	801b35c <RadioIrqProcess+0x1e0>
 801b2ee:	4b51      	ldr	r3, [pc, #324]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	689b      	ldr	r3, [r3, #8]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d031      	beq.n	801b35c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801b2f8:	4b4c      	ldr	r3, [pc, #304]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b2fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b2fe:	2b01      	cmp	r3, #1
 801b300:	d10e      	bne.n	801b320 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801b302:	4b4c      	ldr	r3, [pc, #304]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	689c      	ldr	r4, [r3, #8]
 801b308:	79fb      	ldrb	r3, [r7, #7]
 801b30a:	b299      	uxth	r1, r3
 801b30c:	4b47      	ldr	r3, [pc, #284]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b30e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b312:	b21a      	sxth	r2, r3
 801b314:	4b45      	ldr	r3, [pc, #276]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b316:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b31a:	4848      	ldr	r0, [pc, #288]	; (801b43c <RadioIrqProcess+0x2c0>)
 801b31c:	47a0      	blx	r4
                break;
 801b31e:	e01e      	b.n	801b35e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b320:	4b42      	ldr	r3, [pc, #264]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b324:	463a      	mov	r2, r7
 801b326:	4611      	mov	r1, r2
 801b328:	4618      	mov	r0, r3
 801b32a:	f001 ff47 	bl	801d1bc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801b32e:	4b41      	ldr	r3, [pc, #260]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	689c      	ldr	r4, [r3, #8]
 801b334:	79fb      	ldrb	r3, [r7, #7]
 801b336:	b299      	uxth	r1, r3
 801b338:	4b3c      	ldr	r3, [pc, #240]	; (801b42c <RadioIrqProcess+0x2b0>)
 801b33a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b33e:	b218      	sxth	r0, r3
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b346:	4a3f      	ldr	r2, [pc, #252]	; (801b444 <RadioIrqProcess+0x2c8>)
 801b348:	fb82 c203 	smull	ip, r2, r2, r3
 801b34c:	1192      	asrs	r2, r2, #6
 801b34e:	17db      	asrs	r3, r3, #31
 801b350:	1ad3      	subs	r3, r2, r3
 801b352:	b25b      	sxtb	r3, r3
 801b354:	4602      	mov	r2, r0
 801b356:	4839      	ldr	r0, [pc, #228]	; (801b43c <RadioIrqProcess+0x2c0>)
 801b358:	47a0      	blx	r4
                break;
 801b35a:	e000      	b.n	801b35e <RadioIrqProcess+0x1e2>
        }
 801b35c:	bf00      	nop
        break;
 801b35e:	e118      	b.n	801b592 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801b360:	2000      	movs	r0, #0
 801b362:	f000 ff79 	bl	801c258 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b366:	4b33      	ldr	r3, [pc, #204]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	f000 8104 	beq.w	801b578 <RadioIrqProcess+0x3fc>
 801b370:	4b30      	ldr	r3, [pc, #192]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	699b      	ldr	r3, [r3, #24]
 801b376:	2b00      	cmp	r3, #0
 801b378:	f000 80fe 	beq.w	801b578 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801b37c:	4b2d      	ldr	r3, [pc, #180]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	699b      	ldr	r3, [r3, #24]
 801b382:	2000      	movs	r0, #0
 801b384:	4798      	blx	r3
        break;
 801b386:	e0f7      	b.n	801b578 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b388:	2000      	movs	r0, #0
 801b38a:	f000 ff65 	bl	801c258 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b38e:	4b29      	ldr	r3, [pc, #164]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	2b00      	cmp	r3, #0
 801b394:	f000 80f2 	beq.w	801b57c <RadioIrqProcess+0x400>
 801b398:	4b26      	ldr	r3, [pc, #152]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	699b      	ldr	r3, [r3, #24]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	f000 80ec 	beq.w	801b57c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801b3a4:	4b23      	ldr	r3, [pc, #140]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	699b      	ldr	r3, [r3, #24]
 801b3aa:	2001      	movs	r0, #1
 801b3ac:	4798      	blx	r3
        break;
 801b3ae:	e0e5      	b.n	801b57c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b3b0:	4b25      	ldr	r3, [pc, #148]	; (801b448 <RadioIrqProcess+0x2cc>)
 801b3b2:	2201      	movs	r2, #1
 801b3b4:	2100      	movs	r1, #0
 801b3b6:	2002      	movs	r0, #2
 801b3b8:	f003 f8e8 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b3bc:	f000 fe02 	bl	801bfc4 <SUBGRF_GetOperatingMode>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	2b04      	cmp	r3, #4
 801b3c4:	d115      	bne.n	801b3f2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801b3c6:	481a      	ldr	r0, [pc, #104]	; (801b430 <RadioIrqProcess+0x2b4>)
 801b3c8:	f002 fed6 	bl	801e178 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b3cc:	2000      	movs	r0, #0
 801b3ce:	f000 ff43 	bl	801c258 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b3d2:	4b18      	ldr	r3, [pc, #96]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	f000 80d2 	beq.w	801b580 <RadioIrqProcess+0x404>
 801b3dc:	4b15      	ldr	r3, [pc, #84]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	685b      	ldr	r3, [r3, #4]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f000 80cc 	beq.w	801b580 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801b3e8:	4b12      	ldr	r3, [pc, #72]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	685b      	ldr	r3, [r3, #4]
 801b3ee:	4798      	blx	r3
        break;
 801b3f0:	e0c6      	b.n	801b580 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b3f2:	f000 fde7 	bl	801bfc4 <SUBGRF_GetOperatingMode>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2b05      	cmp	r3, #5
 801b3fa:	f040 80c1 	bne.w	801b580 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801b3fe:	480e      	ldr	r0, [pc, #56]	; (801b438 <RadioIrqProcess+0x2bc>)
 801b400:	f002 feba 	bl	801e178 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b404:	2000      	movs	r0, #0
 801b406:	f000 ff27 	bl	801c258 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b40a:	4b0a      	ldr	r3, [pc, #40]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	f000 80b6 	beq.w	801b580 <RadioIrqProcess+0x404>
 801b414:	4b07      	ldr	r3, [pc, #28]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	68db      	ldr	r3, [r3, #12]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	f000 80b0 	beq.w	801b580 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801b420:	4b04      	ldr	r3, [pc, #16]	; (801b434 <RadioIrqProcess+0x2b8>)
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	68db      	ldr	r3, [r3, #12]
 801b426:	4798      	blx	r3
        break;
 801b428:	e0aa      	b.n	801b580 <RadioIrqProcess+0x404>
 801b42a:	bf00      	nop
 801b42c:	200023a0 	.word	0x200023a0
 801b430:	200023fc 	.word	0x200023fc
 801b434:	2000239c 	.word	0x2000239c
 801b438:	20002414 	.word	0x20002414
 801b43c:	2000229c 	.word	0x2000229c
 801b440:	200023c4 	.word	0x200023c4
 801b444:	10624dd3 	.word	0x10624dd3
 801b448:	0801f504 	.word	0x0801f504
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b44c:	4b53      	ldr	r3, [pc, #332]	; (801b59c <RadioIrqProcess+0x420>)
 801b44e:	2201      	movs	r2, #1
 801b450:	2100      	movs	r1, #0
 801b452:	2002      	movs	r0, #2
 801b454:	f003 f89a 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b458:	4b51      	ldr	r3, [pc, #324]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	f000 8091 	beq.w	801b584 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801b462:	4a50      	ldr	r2, [pc, #320]	; (801b5a4 <RadioIrqProcess+0x428>)
 801b464:	4b4e      	ldr	r3, [pc, #312]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b468:	0c1b      	lsrs	r3, r3, #16
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	4619      	mov	r1, r3
 801b46e:	f640 1003 	movw	r0, #2307	; 0x903
 801b472:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801b474:	4a4b      	ldr	r2, [pc, #300]	; (801b5a4 <RadioIrqProcess+0x428>)
 801b476:	4b4a      	ldr	r3, [pc, #296]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b47a:	0a1b      	lsrs	r3, r3, #8
 801b47c:	b2db      	uxtb	r3, r3
 801b47e:	4619      	mov	r1, r3
 801b480:	f640 1004 	movw	r0, #2308	; 0x904
 801b484:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801b486:	4a47      	ldr	r2, [pc, #284]	; (801b5a4 <RadioIrqProcess+0x428>)
 801b488:	4b45      	ldr	r3, [pc, #276]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b48c:	b2db      	uxtb	r3, r3
 801b48e:	4619      	mov	r1, r3
 801b490:	f640 1005 	movw	r0, #2309	; 0x905
 801b494:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801b496:	4c43      	ldr	r4, [pc, #268]	; (801b5a4 <RadioIrqProcess+0x428>)
 801b498:	4b43      	ldr	r3, [pc, #268]	; (801b5a8 <RadioIrqProcess+0x42c>)
 801b49a:	f640 1002 	movw	r0, #2306	; 0x902
 801b49e:	4798      	blx	r3
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	f043 0301 	orr.w	r3, r3, #1
 801b4a6:	b2db      	uxtb	r3, r3
 801b4a8:	4619      	mov	r1, r3
 801b4aa:	f640 1002 	movw	r0, #2306	; 0x902
 801b4ae:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801b4b0:	4b3b      	ldr	r3, [pc, #236]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	f240 2162 	movw	r1, #610	; 0x262
 801b4be:	f240 2062 	movw	r0, #610	; 0x262
 801b4c2:	f001 f899 	bl	801c5f8 <SUBGRF_SetDioIrqParams>
        break;
 801b4c6:	e05d      	b.n	801b584 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b4c8:	4b38      	ldr	r3, [pc, #224]	; (801b5ac <RadioIrqProcess+0x430>)
 801b4ca:	2201      	movs	r2, #1
 801b4cc:	2100      	movs	r1, #0
 801b4ce:	2002      	movs	r0, #2
 801b4d0:	f003 f85c 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b4d4:	f001 ff1d 	bl	801d312 <RFW_Is_Init>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	2b01      	cmp	r3, #1
 801b4dc:	d154      	bne.n	801b588 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801b4de:	f001 ff4e 	bl	801d37e <RFW_ReceivePayload>
        break;
 801b4e2:	e051      	b.n	801b588 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b4e4:	4b32      	ldr	r3, [pc, #200]	; (801b5b0 <RadioIrqProcess+0x434>)
 801b4e6:	2201      	movs	r2, #1
 801b4e8:	2100      	movs	r1, #0
 801b4ea:	2002      	movs	r0, #2
 801b4ec:	f003 f84e 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b4f0:	e04f      	b.n	801b592 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801b4f2:	4830      	ldr	r0, [pc, #192]	; (801b5b4 <RadioIrqProcess+0x438>)
 801b4f4:	f002 fe40 	bl	801e178 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b4f8:	4b29      	ldr	r3, [pc, #164]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b4fa:	785b      	ldrb	r3, [r3, #1]
 801b4fc:	f083 0301 	eor.w	r3, r3, #1
 801b500:	b2db      	uxtb	r3, r3
 801b502:	2b00      	cmp	r3, #0
 801b504:	d002      	beq.n	801b50c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b506:	2000      	movs	r0, #0
 801b508:	f000 fea6 	bl	801c258 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b50c:	4b2a      	ldr	r3, [pc, #168]	; (801b5b8 <RadioIrqProcess+0x43c>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d03b      	beq.n	801b58c <RadioIrqProcess+0x410>
 801b514:	4b28      	ldr	r3, [pc, #160]	; (801b5b8 <RadioIrqProcess+0x43c>)
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	68db      	ldr	r3, [r3, #12]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d036      	beq.n	801b58c <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801b51e:	4b26      	ldr	r3, [pc, #152]	; (801b5b8 <RadioIrqProcess+0x43c>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b526:	4b25      	ldr	r3, [pc, #148]	; (801b5bc <RadioIrqProcess+0x440>)
 801b528:	2201      	movs	r2, #1
 801b52a:	2100      	movs	r1, #0
 801b52c:	2002      	movs	r0, #2
 801b52e:	f003 f82d 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b532:	e02b      	b.n	801b58c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b534:	4b22      	ldr	r3, [pc, #136]	; (801b5c0 <RadioIrqProcess+0x444>)
 801b536:	2201      	movs	r2, #1
 801b538:	2100      	movs	r1, #0
 801b53a:	2002      	movs	r0, #2
 801b53c:	f003 f826 	bl	801e58c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b540:	4b17      	ldr	r3, [pc, #92]	; (801b5a0 <RadioIrqProcess+0x424>)
 801b542:	785b      	ldrb	r3, [r3, #1]
 801b544:	f083 0301 	eor.w	r3, r3, #1
 801b548:	b2db      	uxtb	r3, r3
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d002      	beq.n	801b554 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b54e:	2000      	movs	r0, #0
 801b550:	f000 fe82 	bl	801c258 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b554:	4b18      	ldr	r3, [pc, #96]	; (801b5b8 <RadioIrqProcess+0x43c>)
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d019      	beq.n	801b590 <RadioIrqProcess+0x414>
 801b55c:	4b16      	ldr	r3, [pc, #88]	; (801b5b8 <RadioIrqProcess+0x43c>)
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	691b      	ldr	r3, [r3, #16]
 801b562:	2b00      	cmp	r3, #0
 801b564:	d014      	beq.n	801b590 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801b566:	4b14      	ldr	r3, [pc, #80]	; (801b5b8 <RadioIrqProcess+0x43c>)
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	691b      	ldr	r3, [r3, #16]
 801b56c:	4798      	blx	r3
        break;
 801b56e:	e00f      	b.n	801b590 <RadioIrqProcess+0x414>
        break;
 801b570:	bf00      	nop
 801b572:	e00e      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b574:	bf00      	nop
 801b576:	e00c      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b578:	bf00      	nop
 801b57a:	e00a      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b57c:	bf00      	nop
 801b57e:	e008      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b580:	bf00      	nop
 801b582:	e006      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b584:	bf00      	nop
 801b586:	e004      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b588:	bf00      	nop
 801b58a:	e002      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b58c:	bf00      	nop
 801b58e:	e000      	b.n	801b592 <RadioIrqProcess+0x416>
        break;
 801b590:	bf00      	nop
    }
}
 801b592:	bf00      	nop
 801b594:	370c      	adds	r7, #12
 801b596:	46bd      	mov	sp, r7
 801b598:	bd90      	pop	{r4, r7, pc}
 801b59a:	bf00      	nop
 801b59c:	0801f518 	.word	0x0801f518
 801b5a0:	200023a0 	.word	0x200023a0
 801b5a4:	0801af8b 	.word	0x0801af8b
 801b5a8:	0801afaf 	.word	0x0801afaf
 801b5ac:	0801f524 	.word	0x0801f524
 801b5b0:	0801f530 	.word	0x0801f530
 801b5b4:	20002414 	.word	0x20002414
 801b5b8:	2000239c 	.word	0x2000239c
 801b5bc:	0801f53c 	.word	0x0801f53c
 801b5c0:	0801f548 	.word	0x0801f548

0801b5c4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b5c8:	4b09      	ldr	r3, [pc, #36]	; (801b5f0 <RadioTxPrbs+0x2c>)
 801b5ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b5ce:	2101      	movs	r1, #1
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f001 fcb5 	bl	801cf40 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b5d6:	4b07      	ldr	r3, [pc, #28]	; (801b5f4 <RadioTxPrbs+0x30>)
 801b5d8:	212d      	movs	r1, #45	; 0x2d
 801b5da:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b5de:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b5e0:	f000 fefd 	bl	801c3de <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b5e4:	4804      	ldr	r0, [pc, #16]	; (801b5f8 <RadioTxPrbs+0x34>)
 801b5e6:	f000 fe53 	bl	801c290 <SUBGRF_SetTx>
}
 801b5ea:	bf00      	nop
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	200023a0 	.word	0x200023a0
 801b5f4:	0801af8b 	.word	0x0801af8b
 801b5f8:	000fffff 	.word	0x000fffff

0801b5fc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b084      	sub	sp, #16
 801b600:	af00      	add	r7, sp, #0
 801b602:	4603      	mov	r3, r0
 801b604:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b60a:	4618      	mov	r0, r3
 801b60c:	f001 fcc0 	bl	801cf90 <SUBGRF_SetRfTxPower>
 801b610:	4603      	mov	r3, r0
 801b612:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b614:	7bfb      	ldrb	r3, [r7, #15]
 801b616:	2101      	movs	r1, #1
 801b618:	4618      	mov	r0, r3
 801b61a:	f001 fc91 	bl	801cf40 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b61e:	f000 fed5 	bl	801c3cc <SUBGRF_SetTxContinuousWave>
}
 801b622:	bf00      	nop
 801b624:	3710      	adds	r7, #16
 801b626:	46bd      	mov	sp, r7
 801b628:	bd80      	pop	{r7, pc}

0801b62a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b62a:	b480      	push	{r7}
 801b62c:	b089      	sub	sp, #36	; 0x24
 801b62e:	af00      	add	r7, sp, #0
 801b630:	60f8      	str	r0, [r7, #12]
 801b632:	60b9      	str	r1, [r7, #8]
 801b634:	4613      	mov	r3, r2
 801b636:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b638:	2300      	movs	r3, #0
 801b63a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b63c:	2300      	movs	r3, #0
 801b63e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b640:	2300      	movs	r3, #0
 801b642:	61bb      	str	r3, [r7, #24]
 801b644:	e011      	b.n	801b66a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b646:	69bb      	ldr	r3, [r7, #24]
 801b648:	68ba      	ldr	r2, [r7, #8]
 801b64a:	4413      	add	r3, r2
 801b64c:	781a      	ldrb	r2, [r3, #0]
 801b64e:	69bb      	ldr	r3, [r7, #24]
 801b650:	68b9      	ldr	r1, [r7, #8]
 801b652:	440b      	add	r3, r1
 801b654:	43d2      	mvns	r2, r2
 801b656:	b2d2      	uxtb	r2, r2
 801b658:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b65a:	69bb      	ldr	r3, [r7, #24]
 801b65c:	68fa      	ldr	r2, [r7, #12]
 801b65e:	4413      	add	r3, r2
 801b660:	2200      	movs	r2, #0
 801b662:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b664:	69bb      	ldr	r3, [r7, #24]
 801b666:	3301      	adds	r3, #1
 801b668:	61bb      	str	r3, [r7, #24]
 801b66a:	79fb      	ldrb	r3, [r7, #7]
 801b66c:	69ba      	ldr	r2, [r7, #24]
 801b66e:	429a      	cmp	r2, r3
 801b670:	dbe9      	blt.n	801b646 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b672:	2300      	movs	r3, #0
 801b674:	61bb      	str	r3, [r7, #24]
 801b676:	e049      	b.n	801b70c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b678:	69bb      	ldr	r3, [r7, #24]
 801b67a:	425a      	negs	r2, r3
 801b67c:	f003 0307 	and.w	r3, r3, #7
 801b680:	f002 0207 	and.w	r2, r2, #7
 801b684:	bf58      	it	pl
 801b686:	4253      	negpl	r3, r2
 801b688:	b2db      	uxtb	r3, r3
 801b68a:	f1c3 0307 	rsb	r3, r3, #7
 801b68e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b690:	69bb      	ldr	r3, [r7, #24]
 801b692:	2b00      	cmp	r3, #0
 801b694:	da00      	bge.n	801b698 <payload_integration+0x6e>
 801b696:	3307      	adds	r3, #7
 801b698:	10db      	asrs	r3, r3, #3
 801b69a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b69c:	69bb      	ldr	r3, [r7, #24]
 801b69e:	3301      	adds	r3, #1
 801b6a0:	425a      	negs	r2, r3
 801b6a2:	f003 0307 	and.w	r3, r3, #7
 801b6a6:	f002 0207 	and.w	r2, r2, #7
 801b6aa:	bf58      	it	pl
 801b6ac:	4253      	negpl	r3, r2
 801b6ae:	b2db      	uxtb	r3, r3
 801b6b0:	f1c3 0307 	rsb	r3, r3, #7
 801b6b4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b6b6:	69bb      	ldr	r3, [r7, #24]
 801b6b8:	3301      	adds	r3, #1
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	da00      	bge.n	801b6c0 <payload_integration+0x96>
 801b6be:	3307      	adds	r3, #7
 801b6c0:	10db      	asrs	r3, r3, #3
 801b6c2:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b6c4:	7dbb      	ldrb	r3, [r7, #22]
 801b6c6:	68ba      	ldr	r2, [r7, #8]
 801b6c8:	4413      	add	r3, r2
 801b6ca:	781b      	ldrb	r3, [r3, #0]
 801b6cc:	461a      	mov	r2, r3
 801b6ce:	7dfb      	ldrb	r3, [r7, #23]
 801b6d0:	fa42 f303 	asr.w	r3, r2, r3
 801b6d4:	b2db      	uxtb	r3, r3
 801b6d6:	f003 0301 	and.w	r3, r3, #1
 801b6da:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b6dc:	7ffa      	ldrb	r2, [r7, #31]
 801b6de:	7cfb      	ldrb	r3, [r7, #19]
 801b6e0:	4053      	eors	r3, r2
 801b6e2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b6e4:	7d3b      	ldrb	r3, [r7, #20]
 801b6e6:	68fa      	ldr	r2, [r7, #12]
 801b6e8:	4413      	add	r3, r2
 801b6ea:	781b      	ldrb	r3, [r3, #0]
 801b6ec:	b25a      	sxtb	r2, r3
 801b6ee:	7ff9      	ldrb	r1, [r7, #31]
 801b6f0:	7d7b      	ldrb	r3, [r7, #21]
 801b6f2:	fa01 f303 	lsl.w	r3, r1, r3
 801b6f6:	b25b      	sxtb	r3, r3
 801b6f8:	4313      	orrs	r3, r2
 801b6fa:	b259      	sxtb	r1, r3
 801b6fc:	7d3b      	ldrb	r3, [r7, #20]
 801b6fe:	68fa      	ldr	r2, [r7, #12]
 801b700:	4413      	add	r3, r2
 801b702:	b2ca      	uxtb	r2, r1
 801b704:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b706:	69bb      	ldr	r3, [r7, #24]
 801b708:	3301      	adds	r3, #1
 801b70a:	61bb      	str	r3, [r7, #24]
 801b70c:	79fb      	ldrb	r3, [r7, #7]
 801b70e:	00db      	lsls	r3, r3, #3
 801b710:	69ba      	ldr	r2, [r7, #24]
 801b712:	429a      	cmp	r2, r3
 801b714:	dbb0      	blt.n	801b678 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b716:	7ffb      	ldrb	r3, [r7, #31]
 801b718:	01db      	lsls	r3, r3, #7
 801b71a:	b25a      	sxtb	r2, r3
 801b71c:	7ffb      	ldrb	r3, [r7, #31]
 801b71e:	019b      	lsls	r3, r3, #6
 801b720:	b25b      	sxtb	r3, r3
 801b722:	4313      	orrs	r3, r2
 801b724:	b25b      	sxtb	r3, r3
 801b726:	7ffa      	ldrb	r2, [r7, #31]
 801b728:	2a00      	cmp	r2, #0
 801b72a:	d101      	bne.n	801b730 <payload_integration+0x106>
 801b72c:	2220      	movs	r2, #32
 801b72e:	e000      	b.n	801b732 <payload_integration+0x108>
 801b730:	2200      	movs	r2, #0
 801b732:	4313      	orrs	r3, r2
 801b734:	b259      	sxtb	r1, r3
 801b736:	79fb      	ldrb	r3, [r7, #7]
 801b738:	68fa      	ldr	r2, [r7, #12]
 801b73a:	4413      	add	r3, r2
 801b73c:	b2ca      	uxtb	r2, r1
 801b73e:	701a      	strb	r2, [r3, #0]
}
 801b740:	bf00      	nop
 801b742:	3724      	adds	r7, #36	; 0x24
 801b744:	46bd      	mov	sp, r7
 801b746:	bc80      	pop	{r7}
 801b748:	4770      	bx	lr
	...

0801b74c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b08c      	sub	sp, #48	; 0x30
 801b750:	af00      	add	r7, sp, #0
 801b752:	60b9      	str	r1, [r7, #8]
 801b754:	607a      	str	r2, [r7, #4]
 801b756:	603b      	str	r3, [r7, #0]
 801b758:	4603      	mov	r3, r0
 801b75a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b75c:	2300      	movs	r3, #0
 801b75e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b760:	2300      	movs	r3, #0
 801b762:	623b      	str	r3, [r7, #32]
 801b764:	2300      	movs	r3, #0
 801b766:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b768:	f001 fdcd 	bl	801d306 <RFW_DeInit>

    if( rxContinuous != 0 )
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d001      	beq.n	801b776 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b772:	2300      	movs	r3, #0
 801b774:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	bf14      	ite	ne
 801b77c:	2301      	movne	r3, #1
 801b77e:	2300      	moveq	r3, #0
 801b780:	b2da      	uxtb	r2, r3
 801b782:	4ba3      	ldr	r3, [pc, #652]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b784:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b786:	7bfb      	ldrb	r3, [r7, #15]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d003      	beq.n	801b794 <RadioSetRxGenericConfig+0x48>
 801b78c:	2b01      	cmp	r3, #1
 801b78e:	f000 80dc 	beq.w	801b94a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b792:	e194      	b.n	801babe <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	689b      	ldr	r3, [r3, #8]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d003      	beq.n	801b7a4 <RadioSetRxGenericConfig+0x58>
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	68db      	ldr	r3, [r3, #12]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d102      	bne.n	801b7aa <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b7a4:	f04f 33ff 	mov.w	r3, #4294967295
 801b7a8:	e18a      	b.n	801bac0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b7aa:	68bb      	ldr	r3, [r7, #8]
 801b7ac:	7f9b      	ldrb	r3, [r3, #30]
 801b7ae:	2b08      	cmp	r3, #8
 801b7b0:	d902      	bls.n	801b7b8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b7b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b7b6:	e183      	b.n	801bac0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	6919      	ldr	r1, [r3, #16]
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	7f9b      	ldrb	r3, [r3, #30]
 801b7c0:	b29a      	uxth	r2, r3
 801b7c2:	f107 0320 	add.w	r3, r7, #32
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f001 fe90 	bl	801d4ec <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b7cc:	68bb      	ldr	r3, [r7, #8]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	bf14      	ite	ne
 801b7d4:	2301      	movne	r3, #1
 801b7d6:	2300      	moveq	r3, #0
 801b7d8:	b2db      	uxtb	r3, r3
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f000 fe08 	bl	801c3f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b7e0:	4b8b      	ldr	r3, [pc, #556]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b7e8:	68bb      	ldr	r3, [r7, #8]
 801b7ea:	689b      	ldr	r3, [r3, #8]
 801b7ec:	4a88      	ldr	r2, [pc, #544]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b7ee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b7f6:	4b86      	ldr	r3, [pc, #536]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b7f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	4618      	mov	r0, r3
 801b802:	f001 fcb3 	bl	801d16c <SUBGRF_GetFskBandwidthRegValue>
 801b806:	4603      	mov	r3, r0
 801b808:	461a      	mov	r2, r3
 801b80a:	4b81      	ldr	r3, [pc, #516]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b810:	4b7f      	ldr	r3, [pc, #508]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b812:	2200      	movs	r2, #0
 801b814:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b816:	68bb      	ldr	r3, [r7, #8]
 801b818:	68db      	ldr	r3, [r3, #12]
 801b81a:	b29b      	uxth	r3, r3
 801b81c:	00db      	lsls	r3, r3, #3
 801b81e:	b29a      	uxth	r2, r3
 801b820:	4b7b      	ldr	r3, [pc, #492]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b822:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b824:	68bb      	ldr	r3, [r7, #8]
 801b826:	7fda      	ldrb	r2, [r3, #31]
 801b828:	4b79      	ldr	r3, [pc, #484]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b82a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b82c:	68bb      	ldr	r3, [r7, #8]
 801b82e:	7f9b      	ldrb	r3, [r3, #30]
 801b830:	00db      	lsls	r3, r3, #3
 801b832:	b2da      	uxtb	r2, r3
 801b834:	4b76      	ldr	r3, [pc, #472]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b836:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b838:	68bb      	ldr	r3, [r7, #8]
 801b83a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b83e:	4b74      	ldr	r3, [pc, #464]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b840:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b842:	68bb      	ldr	r3, [r7, #8]
 801b844:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d105      	bne.n	801b858 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b84c:	68bb      	ldr	r3, [r7, #8]
 801b84e:	695b      	ldr	r3, [r3, #20]
 801b850:	b2da      	uxtb	r2, r3
 801b852:	4b6f      	ldr	r3, [pc, #444]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b854:	759a      	strb	r2, [r3, #22]
 801b856:	e00b      	b.n	801b870 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b85e:	2b02      	cmp	r3, #2
 801b860:	d103      	bne.n	801b86a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b862:	4b6b      	ldr	r3, [pc, #428]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b864:	22ff      	movs	r2, #255	; 0xff
 801b866:	759a      	strb	r2, [r3, #22]
 801b868:	e002      	b.n	801b870 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b86a:	4b69      	ldr	r3, [pc, #420]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b86c:	22ff      	movs	r2, #255	; 0xff
 801b86e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b870:	68bb      	ldr	r3, [r7, #8]
 801b872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b876:	2b02      	cmp	r3, #2
 801b878:	d004      	beq.n	801b884 <RadioSetRxGenericConfig+0x138>
 801b87a:	68bb      	ldr	r3, [r7, #8]
 801b87c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b880:	2b02      	cmp	r3, #2
 801b882:	d12d      	bne.n	801b8e0 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b884:	68bb      	ldr	r3, [r7, #8]
 801b886:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b88a:	2bf1      	cmp	r3, #241	; 0xf1
 801b88c:	d00c      	beq.n	801b8a8 <RadioSetRxGenericConfig+0x15c>
 801b88e:	68bb      	ldr	r3, [r7, #8]
 801b890:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b894:	2bf2      	cmp	r3, #242	; 0xf2
 801b896:	d007      	beq.n	801b8a8 <RadioSetRxGenericConfig+0x15c>
 801b898:	68bb      	ldr	r3, [r7, #8]
 801b89a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b89e:	2b01      	cmp	r3, #1
 801b8a0:	d002      	beq.n	801b8a8 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801b8a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b8a6:	e10b      	b.n	801bac0 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b8b0:	4b58      	ldr	r3, [pc, #352]	; (801ba14 <RadioSetRxGenericConfig+0x2c8>)
 801b8b2:	6819      	ldr	r1, [r3, #0]
 801b8b4:	f107 0314 	add.w	r3, r7, #20
 801b8b8:	4a57      	ldr	r2, [pc, #348]	; (801ba18 <RadioSetRxGenericConfig+0x2cc>)
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f001 fd16 	bl	801d2ec <RFW_Init>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d002      	beq.n	801b8cc <RadioSetRxGenericConfig+0x180>
            return -1;
 801b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ca:	e0f9      	b.n	801bac0 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b8cc:	4b50      	ldr	r3, [pc, #320]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b8d2:	4b4f      	ldr	r3, [pc, #316]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b8d4:	2201      	movs	r2, #1
 801b8d6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b8d8:	4b4d      	ldr	r3, [pc, #308]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b8da:	2200      	movs	r2, #0
 801b8dc:	755a      	strb	r2, [r3, #21]
        {
 801b8de:	e00e      	b.n	801b8fe <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b8e6:	4b4a      	ldr	r3, [pc, #296]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b8e8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b8ea:	68bb      	ldr	r3, [r7, #8]
 801b8ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b8f0:	4b47      	ldr	r3, [pc, #284]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b8f2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b8f4:	68bb      	ldr	r3, [r7, #8]
 801b8f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b8fa:	4b45      	ldr	r3, [pc, #276]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b8fc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b8fe:	f7ff fa48 	bl	801ad92 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b902:	2000      	movs	r0, #0
 801b904:	f7fe fbf2 	bl	801a0ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b908:	4844      	ldr	r0, [pc, #272]	; (801ba1c <RadioSetRxGenericConfig+0x2d0>)
 801b90a:	f001 f80b 	bl	801c924 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b90e:	4844      	ldr	r0, [pc, #272]	; (801ba20 <RadioSetRxGenericConfig+0x2d4>)
 801b910:	f001 f8da 	bl	801cac8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b914:	f107 0320 	add.w	r3, r7, #32
 801b918:	4618      	mov	r0, r3
 801b91a:	f000 fba2 	bl	801c062 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	8b9b      	ldrh	r3, [r3, #28]
 801b922:	4618      	mov	r0, r3
 801b924:	f000 fbec 	bl	801c100 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	8b1b      	ldrh	r3, [r3, #24]
 801b92c:	4618      	mov	r0, r3
 801b92e:	f000 fbc7 	bl	801c0c0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b932:	683b      	ldr	r3, [r7, #0]
 801b934:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b938:	fb03 f202 	mul.w	r2, r3, r2
 801b93c:	68bb      	ldr	r3, [r7, #8]
 801b93e:	689b      	ldr	r3, [r3, #8]
 801b940:	fbb2 f3f3 	udiv	r3, r2, r3
 801b944:	4a32      	ldr	r2, [pc, #200]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b946:	6093      	str	r3, [r2, #8]
        break;
 801b948:	e0b9      	b.n	801babe <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b94a:	68bb      	ldr	r3, [r7, #8]
 801b94c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d102      	bne.n	801b958 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b952:	f04f 33ff 	mov.w	r3, #4294967295
 801b956:	e0b3      	b.n	801bac0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b95e:	2b01      	cmp	r3, #1
 801b960:	d104      	bne.n	801b96c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b962:	68bb      	ldr	r3, [r7, #8]
 801b964:	695b      	ldr	r3, [r3, #20]
 801b966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b96a:	e002      	b.n	801b972 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b96c:	23ff      	movs	r3, #255	; 0xff
 801b96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b972:	68bb      	ldr	r3, [r7, #8]
 801b974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b976:	2b00      	cmp	r3, #0
 801b978:	bf14      	ite	ne
 801b97a:	2301      	movne	r3, #1
 801b97c:	2300      	moveq	r3, #0
 801b97e:	b2db      	uxtb	r3, r3
 801b980:	4618      	mov	r0, r3
 801b982:	f000 fd35 	bl	801c3f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b986:	683b      	ldr	r3, [r7, #0]
 801b988:	b2db      	uxtb	r3, r3
 801b98a:	4618      	mov	r0, r3
 801b98c:	f000 fd3f 	bl	801c40e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b990:	4b1f      	ldr	r3, [pc, #124]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b992:	2201      	movs	r2, #1
 801b994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b99e:	4b1c      	ldr	r3, [pc, #112]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b9a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b9aa:	4b19      	ldr	r3, [pc, #100]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b9ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b9b0:	68bb      	ldr	r3, [r7, #8]
 801b9b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b9b6:	4b16      	ldr	r3, [pc, #88]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b9b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b9bc:	68bb      	ldr	r3, [r7, #8]
 801b9be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b9c2:	2b02      	cmp	r3, #2
 801b9c4:	d010      	beq.n	801b9e8 <RadioSetRxGenericConfig+0x29c>
 801b9c6:	2b02      	cmp	r3, #2
 801b9c8:	dc2c      	bgt.n	801ba24 <RadioSetRxGenericConfig+0x2d8>
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d002      	beq.n	801b9d4 <RadioSetRxGenericConfig+0x288>
 801b9ce:	2b01      	cmp	r3, #1
 801b9d0:	d005      	beq.n	801b9de <RadioSetRxGenericConfig+0x292>
            break;
 801b9d2:	e027      	b.n	801ba24 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b9d4:	4b0e      	ldr	r3, [pc, #56]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b9dc:	e023      	b.n	801ba26 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b9de:	4b0c      	ldr	r3, [pc, #48]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b9e0:	2201      	movs	r2, #1
 801b9e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b9e6:	e01e      	b.n	801ba26 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b9e8:	68bb      	ldr	r3, [r7, #8]
 801b9ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b9ee:	2b0b      	cmp	r3, #11
 801b9f0:	d004      	beq.n	801b9fc <RadioSetRxGenericConfig+0x2b0>
 801b9f2:	68bb      	ldr	r3, [r7, #8]
 801b9f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b9f8:	2b0c      	cmp	r3, #12
 801b9fa:	d104      	bne.n	801ba06 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b9fc:	4b04      	ldr	r3, [pc, #16]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801b9fe:	2201      	movs	r2, #1
 801ba00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ba04:	e00f      	b.n	801ba26 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ba06:	4b02      	ldr	r3, [pc, #8]	; (801ba10 <RadioSetRxGenericConfig+0x2c4>)
 801ba08:	2200      	movs	r2, #0
 801ba0a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ba0e:	e00a      	b.n	801ba26 <RadioSetRxGenericConfig+0x2da>
 801ba10:	200023a0 	.word	0x200023a0
 801ba14:	2000239c 	.word	0x2000239c
 801ba18:	20002414 	.word	0x20002414
 801ba1c:	200023d8 	.word	0x200023d8
 801ba20:	200023ae 	.word	0x200023ae
            break;
 801ba24:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ba26:	4b28      	ldr	r3, [pc, #160]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba28:	2201      	movs	r2, #1
 801ba2a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ba2c:	68bb      	ldr	r3, [r7, #8]
 801ba2e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801ba30:	4b25      	ldr	r3, [pc, #148]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba32:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801ba3a:	4b23      	ldr	r3, [pc, #140]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba3c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ba3e:	4a22      	ldr	r2, [pc, #136]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ba44:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ba46:	68bb      	ldr	r3, [r7, #8]
 801ba48:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801ba4c:	4b1e      	ldr	r3, [pc, #120]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba4e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801ba58:	4b1b      	ldr	r3, [pc, #108]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ba5e:	f7ff f998 	bl	801ad92 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ba62:	2001      	movs	r0, #1
 801ba64:	f7fe fb42 	bl	801a0ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ba68:	4818      	ldr	r0, [pc, #96]	; (801bacc <RadioSetRxGenericConfig+0x380>)
 801ba6a:	f000 ff5b 	bl	801c924 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ba6e:	4818      	ldr	r0, [pc, #96]	; (801bad0 <RadioSetRxGenericConfig+0x384>)
 801ba70:	f001 f82a 	bl	801cac8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801ba74:	4b14      	ldr	r3, [pc, #80]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801ba76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801ba7a:	2b01      	cmp	r3, #1
 801ba7c:	d10d      	bne.n	801ba9a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801ba7e:	f240 7036 	movw	r0, #1846	; 0x736
 801ba82:	f001 f97d 	bl	801cd80 <SUBGRF_ReadRegister>
 801ba86:	4603      	mov	r3, r0
 801ba88:	f023 0304 	bic.w	r3, r3, #4
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	4619      	mov	r1, r3
 801ba90:	f240 7036 	movw	r0, #1846	; 0x736
 801ba94:	f001 f960 	bl	801cd58 <SUBGRF_WriteRegister>
 801ba98:	e00c      	b.n	801bab4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ba9a:	f240 7036 	movw	r0, #1846	; 0x736
 801ba9e:	f001 f96f 	bl	801cd80 <SUBGRF_ReadRegister>
 801baa2:	4603      	mov	r3, r0
 801baa4:	f043 0304 	orr.w	r3, r3, #4
 801baa8:	b2db      	uxtb	r3, r3
 801baaa:	4619      	mov	r1, r3
 801baac:	f240 7036 	movw	r0, #1846	; 0x736
 801bab0:	f001 f952 	bl	801cd58 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801bab4:	4b04      	ldr	r3, [pc, #16]	; (801bac8 <RadioSetRxGenericConfig+0x37c>)
 801bab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801baba:	609a      	str	r2, [r3, #8]
        break;
 801babc:	bf00      	nop
    }
    return status;
 801babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bac0:	4618      	mov	r0, r3
 801bac2:	3730      	adds	r7, #48	; 0x30
 801bac4:	46bd      	mov	sp, r7
 801bac6:	bd80      	pop	{r7, pc}
 801bac8:	200023a0 	.word	0x200023a0
 801bacc:	200023d8 	.word	0x200023d8
 801bad0:	200023ae 	.word	0x200023ae

0801bad4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b08e      	sub	sp, #56	; 0x38
 801bad8:	af00      	add	r7, sp, #0
 801bada:	60b9      	str	r1, [r7, #8]
 801badc:	607b      	str	r3, [r7, #4]
 801bade:	4603      	mov	r3, r0
 801bae0:	73fb      	strb	r3, [r7, #15]
 801bae2:	4613      	mov	r3, r2
 801bae4:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801bae6:	2300      	movs	r3, #0
 801bae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801baea:	2300      	movs	r3, #0
 801baec:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801baee:	f001 fc0a 	bl	801d306 <RFW_DeInit>
    switch( modem )
 801baf2:	7bfb      	ldrb	r3, [r7, #15]
 801baf4:	2b03      	cmp	r3, #3
 801baf6:	f200 8204 	bhi.w	801bf02 <RadioSetTxGenericConfig+0x42e>
 801bafa:	a201      	add	r2, pc, #4	; (adr r2, 801bb00 <RadioSetTxGenericConfig+0x2c>)
 801bafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb00:	0801bc85 	.word	0x0801bc85
 801bb04:	0801bdcd 	.word	0x0801bdcd
 801bb08:	0801bec5 	.word	0x0801bec5
 801bb0c:	0801bb11 	.word	0x0801bb11
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801bb10:	68bb      	ldr	r3, [r7, #8]
 801bb12:	7c9b      	ldrb	r3, [r3, #18]
 801bb14:	2b08      	cmp	r3, #8
 801bb16:	d902      	bls.n	801bb1e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801bb18:	f04f 33ff 	mov.w	r3, #4294967295
 801bb1c:	e206      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801bb1e:	68bb      	ldr	r3, [r7, #8]
 801bb20:	6899      	ldr	r1, [r3, #8]
 801bb22:	68bb      	ldr	r3, [r7, #8]
 801bb24:	7c9b      	ldrb	r3, [r3, #18]
 801bb26:	b29a      	uxth	r2, r3
 801bb28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f001 fcdd 	bl	801d4ec <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d102      	bne.n	801bb40 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801bb3a:	f04f 33ff 	mov.w	r3, #4294967295
 801bb3e:	e1f5      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	f242 7210 	movw	r2, #10000	; 0x2710
 801bb48:	4293      	cmp	r3, r2
 801bb4a:	d813      	bhi.n	801bb74 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801bb4c:	2302      	movs	r3, #2
 801bb4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801bb52:	4b99      	ldr	r3, [pc, #612]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb54:	2203      	movs	r2, #3
 801bb56:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bb58:	4b97      	ldr	r3, [pc, #604]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb5a:	2203      	movs	r2, #3
 801bb5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bb60:	68bb      	ldr	r3, [r7, #8]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	4a94      	ldr	r2, [pc, #592]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb66:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb68:	68bb      	ldr	r3, [r7, #8]
 801bb6a:	7cda      	ldrb	r2, [r3, #19]
 801bb6c:	4b92      	ldr	r3, [pc, #584]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bb72:	e017      	b.n	801bba4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801bb74:	2300      	movs	r3, #0
 801bb76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bb7a:	4b8f      	ldr	r3, [pc, #572]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb7c:	2200      	movs	r2, #0
 801bb7e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bb80:	4b8d      	ldr	r3, [pc, #564]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb82:	2200      	movs	r2, #0
 801bb84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bb88:	68bb      	ldr	r3, [r7, #8]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	4a8a      	ldr	r2, [pc, #552]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb8e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	7cda      	ldrb	r2, [r3, #19]
 801bb94:	4b88      	ldr	r3, [pc, #544]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bb96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	089b      	lsrs	r3, r3, #2
 801bba0:	4a85      	ldr	r2, [pc, #532]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bba2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bba4:	68bb      	ldr	r3, [r7, #8]
 801bba6:	685b      	ldr	r3, [r3, #4]
 801bba8:	b29b      	uxth	r3, r3
 801bbaa:	00db      	lsls	r3, r3, #3
 801bbac:	b29a      	uxth	r2, r3
 801bbae:	4b82      	ldr	r3, [pc, #520]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bbb0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bbb2:	4b81      	ldr	r3, [pc, #516]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bbb4:	2204      	movs	r2, #4
 801bbb6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bbb8:	68bb      	ldr	r3, [r7, #8]
 801bbba:	7c9b      	ldrb	r3, [r3, #18]
 801bbbc:	00db      	lsls	r3, r3, #3
 801bbbe:	b2da      	uxtb	r2, r3
 801bbc0:	4b7d      	ldr	r3, [pc, #500]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bbc2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bbc4:	4b7c      	ldr	r3, [pc, #496]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bbca:	68bb      	ldr	r3, [r7, #8]
 801bbcc:	7d9b      	ldrb	r3, [r3, #22]
 801bbce:	2b02      	cmp	r3, #2
 801bbd0:	d003      	beq.n	801bbda <RadioSetTxGenericConfig+0x106>
 801bbd2:	68bb      	ldr	r3, [r7, #8]
 801bbd4:	7d1b      	ldrb	r3, [r3, #20]
 801bbd6:	2b02      	cmp	r3, #2
 801bbd8:	d12b      	bne.n	801bc32 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	7d5b      	ldrb	r3, [r3, #21]
 801bbde:	2bf1      	cmp	r3, #241	; 0xf1
 801bbe0:	d00a      	beq.n	801bbf8 <RadioSetTxGenericConfig+0x124>
 801bbe2:	68bb      	ldr	r3, [r7, #8]
 801bbe4:	7d5b      	ldrb	r3, [r3, #21]
 801bbe6:	2bf2      	cmp	r3, #242	; 0xf2
 801bbe8:	d006      	beq.n	801bbf8 <RadioSetTxGenericConfig+0x124>
 801bbea:	68bb      	ldr	r3, [r7, #8]
 801bbec:	7d5b      	ldrb	r3, [r3, #21]
 801bbee:	2b01      	cmp	r3, #1
 801bbf0:	d002      	beq.n	801bbf8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801bbf2:	f04f 33ff 	mov.w	r3, #4294967295
 801bbf6:	e199      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801bbfc:	2301      	movs	r3, #1
 801bbfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bc02:	4b6e      	ldr	r3, [pc, #440]	; (801bdbc <RadioSetTxGenericConfig+0x2e8>)
 801bc04:	6819      	ldr	r1, [r3, #0]
 801bc06:	f107 0320 	add.w	r3, r7, #32
 801bc0a:	4a6d      	ldr	r2, [pc, #436]	; (801bdc0 <RadioSetTxGenericConfig+0x2ec>)
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f001 fb6d 	bl	801d2ec <RFW_Init>
 801bc12:	4603      	mov	r3, r0
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d002      	beq.n	801bc1e <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801bc18:	f04f 33ff 	mov.w	r3, #4294967295
 801bc1c:	e186      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bc1e:	4b66      	ldr	r3, [pc, #408]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bc20:	2200      	movs	r2, #0
 801bc22:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801bc24:	4b64      	ldr	r3, [pc, #400]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bc26:	2201      	movs	r2, #1
 801bc28:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bc2a:	4b63      	ldr	r3, [pc, #396]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	755a      	strb	r2, [r3, #21]
        {
 801bc30:	e00b      	b.n	801bc4a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	7d5a      	ldrb	r2, [r3, #21]
 801bc36:	4b60      	ldr	r3, [pc, #384]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bc38:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	7d9a      	ldrb	r2, [r3, #22]
 801bc3e:	4b5e      	ldr	r3, [pc, #376]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bc40:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	7d1a      	ldrb	r2, [r3, #20]
 801bc46:	4b5c      	ldr	r3, [pc, #368]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bc48:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bc4a:	f7ff f8a2 	bl	801ad92 <RadioStandby>
        RadioSetModem( radio_modem );
 801bc4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bc52:	4618      	mov	r0, r3
 801bc54:	f7fe fa4a 	bl	801a0ec <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc58:	485a      	ldr	r0, [pc, #360]	; (801bdc4 <RadioSetTxGenericConfig+0x2f0>)
 801bc5a:	f000 fe63 	bl	801c924 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc5e:	485a      	ldr	r0, [pc, #360]	; (801bdc8 <RadioSetTxGenericConfig+0x2f4>)
 801bc60:	f000 ff32 	bl	801cac8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bc64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f000 f9fa 	bl	801c062 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bc6e:	68bb      	ldr	r3, [r7, #8]
 801bc70:	8a1b      	ldrh	r3, [r3, #16]
 801bc72:	4618      	mov	r0, r3
 801bc74:	f000 fa44 	bl	801c100 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801bc78:	68bb      	ldr	r3, [r7, #8]
 801bc7a:	899b      	ldrh	r3, [r3, #12]
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	f000 fa1f 	bl	801c0c0 <SUBGRF_SetCrcPolynomial>
        break;
 801bc82:	e13f      	b.n	801bf04 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bc84:	68bb      	ldr	r3, [r7, #8]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d102      	bne.n	801bc92 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bc8c:	f04f 33ff 	mov.w	r3, #4294967295
 801bc90:	e14c      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	7c9b      	ldrb	r3, [r3, #18]
 801bc96:	2b08      	cmp	r3, #8
 801bc98:	d902      	bls.n	801bca0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bc9a:	f04f 33ff 	mov.w	r3, #4294967295
 801bc9e:	e145      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801bca0:	68bb      	ldr	r3, [r7, #8]
 801bca2:	6899      	ldr	r1, [r3, #8]
 801bca4:	68bb      	ldr	r3, [r7, #8]
 801bca6:	7c9b      	ldrb	r3, [r3, #18]
 801bca8:	b29a      	uxth	r2, r3
 801bcaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f001 fc1c 	bl	801d4ec <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bcb4:	4b40      	ldr	r3, [pc, #256]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bcbc:	68bb      	ldr	r3, [r7, #8]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	4a3d      	ldr	r2, [pc, #244]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcc2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bcc4:	68bb      	ldr	r3, [r7, #8]
 801bcc6:	7cda      	ldrb	r2, [r3, #19]
 801bcc8:	4b3b      	ldr	r3, [pc, #236]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bcce:	68bb      	ldr	r3, [r7, #8]
 801bcd0:	699b      	ldr	r3, [r3, #24]
 801bcd2:	4a39      	ldr	r2, [pc, #228]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcd4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bcd6:	4b38      	ldr	r3, [pc, #224]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcd8:	2200      	movs	r2, #0
 801bcda:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	685b      	ldr	r3, [r3, #4]
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	00db      	lsls	r3, r3, #3
 801bce4:	b29a      	uxth	r2, r3
 801bce6:	4b34      	ldr	r3, [pc, #208]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bce8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bcea:	4b33      	ldr	r3, [pc, #204]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcec:	2204      	movs	r2, #4
 801bcee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bcf0:	68bb      	ldr	r3, [r7, #8]
 801bcf2:	7c9b      	ldrb	r3, [r3, #18]
 801bcf4:	00db      	lsls	r3, r3, #3
 801bcf6:	b2da      	uxtb	r2, r3
 801bcf8:	4b2f      	ldr	r3, [pc, #188]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcfa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bcfc:	4b2e      	ldr	r3, [pc, #184]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bcfe:	2200      	movs	r2, #0
 801bd00:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bd02:	68bb      	ldr	r3, [r7, #8]
 801bd04:	7d9b      	ldrb	r3, [r3, #22]
 801bd06:	2b02      	cmp	r3, #2
 801bd08:	d003      	beq.n	801bd12 <RadioSetTxGenericConfig+0x23e>
 801bd0a:	68bb      	ldr	r3, [r7, #8]
 801bd0c:	7d1b      	ldrb	r3, [r3, #20]
 801bd0e:	2b02      	cmp	r3, #2
 801bd10:	d12a      	bne.n	801bd68 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bd12:	68bb      	ldr	r3, [r7, #8]
 801bd14:	7d5b      	ldrb	r3, [r3, #21]
 801bd16:	2bf1      	cmp	r3, #241	; 0xf1
 801bd18:	d00a      	beq.n	801bd30 <RadioSetTxGenericConfig+0x25c>
 801bd1a:	68bb      	ldr	r3, [r7, #8]
 801bd1c:	7d5b      	ldrb	r3, [r3, #21]
 801bd1e:	2bf2      	cmp	r3, #242	; 0xf2
 801bd20:	d006      	beq.n	801bd30 <RadioSetTxGenericConfig+0x25c>
 801bd22:	68bb      	ldr	r3, [r7, #8]
 801bd24:	7d5b      	ldrb	r3, [r3, #21]
 801bd26:	2b01      	cmp	r3, #1
 801bd28:	d002      	beq.n	801bd30 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bd2a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd2e:	e0fd      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bd30:	2301      	movs	r3, #1
 801bd32:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bd34:	68bb      	ldr	r3, [r7, #8]
 801bd36:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bd38:	4b20      	ldr	r3, [pc, #128]	; (801bdbc <RadioSetTxGenericConfig+0x2e8>)
 801bd3a:	6819      	ldr	r1, [r3, #0]
 801bd3c:	f107 0314 	add.w	r3, r7, #20
 801bd40:	4a1f      	ldr	r2, [pc, #124]	; (801bdc0 <RadioSetTxGenericConfig+0x2ec>)
 801bd42:	4618      	mov	r0, r3
 801bd44:	f001 fad2 	bl	801d2ec <RFW_Init>
 801bd48:	4603      	mov	r3, r0
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d002      	beq.n	801bd54 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801bd4e:	f04f 33ff 	mov.w	r3, #4294967295
 801bd52:	e0eb      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bd54:	4b18      	ldr	r3, [pc, #96]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bd56:	2200      	movs	r2, #0
 801bd58:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801bd5a:	4b17      	ldr	r3, [pc, #92]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bd5c:	2201      	movs	r2, #1
 801bd5e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bd60:	4b15      	ldr	r3, [pc, #84]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bd62:	2200      	movs	r2, #0
 801bd64:	755a      	strb	r2, [r3, #21]
        {
 801bd66:	e00b      	b.n	801bd80 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	7d5a      	ldrb	r2, [r3, #21]
 801bd6c:	4b12      	ldr	r3, [pc, #72]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bd6e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	7d9a      	ldrb	r2, [r3, #22]
 801bd74:	4b10      	ldr	r3, [pc, #64]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bd76:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	7d1a      	ldrb	r2, [r3, #20]
 801bd7c:	4b0e      	ldr	r3, [pc, #56]	; (801bdb8 <RadioSetTxGenericConfig+0x2e4>)
 801bd7e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bd80:	f7ff f807 	bl	801ad92 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bd84:	2000      	movs	r0, #0
 801bd86:	f7fe f9b1 	bl	801a0ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bd8a:	480e      	ldr	r0, [pc, #56]	; (801bdc4 <RadioSetTxGenericConfig+0x2f0>)
 801bd8c:	f000 fdca 	bl	801c924 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd90:	480d      	ldr	r0, [pc, #52]	; (801bdc8 <RadioSetTxGenericConfig+0x2f4>)
 801bd92:	f000 fe99 	bl	801cac8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bd96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	f000 f961 	bl	801c062 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	8a1b      	ldrh	r3, [r3, #16]
 801bda4:	4618      	mov	r0, r3
 801bda6:	f000 f9ab 	bl	801c100 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	899b      	ldrh	r3, [r3, #12]
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f000 f986 	bl	801c0c0 <SUBGRF_SetCrcPolynomial>
        break;
 801bdb4:	e0a6      	b.n	801bf04 <RadioSetTxGenericConfig+0x430>
 801bdb6:	bf00      	nop
 801bdb8:	200023a0 	.word	0x200023a0
 801bdbc:	2000239c 	.word	0x2000239c
 801bdc0:	200023fc 	.word	0x200023fc
 801bdc4:	200023d8 	.word	0x200023d8
 801bdc8:	200023ae 	.word	0x200023ae
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bdcc:	4b59      	ldr	r3, [pc, #356]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bdce:	2201      	movs	r2, #1
 801bdd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bdd4:	68bb      	ldr	r3, [r7, #8]
 801bdd6:	781a      	ldrb	r2, [r3, #0]
 801bdd8:	4b56      	ldr	r3, [pc, #344]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bdda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bdde:	68bb      	ldr	r3, [r7, #8]
 801bde0:	785a      	ldrb	r2, [r3, #1]
 801bde2:	4b54      	ldr	r3, [pc, #336]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bde4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	789a      	ldrb	r2, [r3, #2]
 801bdec:	4b51      	ldr	r3, [pc, #324]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bdee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	78db      	ldrb	r3, [r3, #3]
 801bdf6:	2b02      	cmp	r3, #2
 801bdf8:	d010      	beq.n	801be1c <RadioSetTxGenericConfig+0x348>
 801bdfa:	2b02      	cmp	r3, #2
 801bdfc:	dc20      	bgt.n	801be40 <RadioSetTxGenericConfig+0x36c>
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d002      	beq.n	801be08 <RadioSetTxGenericConfig+0x334>
 801be02:	2b01      	cmp	r3, #1
 801be04:	d005      	beq.n	801be12 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801be06:	e01b      	b.n	801be40 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801be08:	4b4a      	ldr	r3, [pc, #296]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be0a:	2200      	movs	r2, #0
 801be0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801be10:	e017      	b.n	801be42 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801be12:	4b48      	ldr	r3, [pc, #288]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be14:	2201      	movs	r2, #1
 801be16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801be1a:	e012      	b.n	801be42 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	781b      	ldrb	r3, [r3, #0]
 801be20:	2b0b      	cmp	r3, #11
 801be22:	d003      	beq.n	801be2c <RadioSetTxGenericConfig+0x358>
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	781b      	ldrb	r3, [r3, #0]
 801be28:	2b0c      	cmp	r3, #12
 801be2a:	d104      	bne.n	801be36 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801be2c:	4b41      	ldr	r3, [pc, #260]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be2e:	2201      	movs	r2, #1
 801be30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801be34:	e005      	b.n	801be42 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801be36:	4b3f      	ldr	r3, [pc, #252]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be38:	2200      	movs	r2, #0
 801be3a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801be3e:	e000      	b.n	801be42 <RadioSetTxGenericConfig+0x36e>
            break;
 801be40:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801be42:	4b3c      	ldr	r3, [pc, #240]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be44:	2201      	movs	r2, #1
 801be46:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	889a      	ldrh	r2, [r3, #4]
 801be4c:	4b39      	ldr	r3, [pc, #228]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be4e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801be50:	68bb      	ldr	r3, [r7, #8]
 801be52:	799a      	ldrb	r2, [r3, #6]
 801be54:	4b37      	ldr	r3, [pc, #220]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be56:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	79da      	ldrb	r2, [r3, #7]
 801be5c:	4b35      	ldr	r3, [pc, #212]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be5e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801be62:	68bb      	ldr	r3, [r7, #8]
 801be64:	7a1a      	ldrb	r2, [r3, #8]
 801be66:	4b33      	ldr	r3, [pc, #204]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801be6c:	f7fe ff91 	bl	801ad92 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801be70:	2001      	movs	r0, #1
 801be72:	f7fe f93b 	bl	801a0ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be76:	4830      	ldr	r0, [pc, #192]	; (801bf38 <RadioSetTxGenericConfig+0x464>)
 801be78:	f000 fd54 	bl	801c924 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be7c:	482f      	ldr	r0, [pc, #188]	; (801bf3c <RadioSetTxGenericConfig+0x468>)
 801be7e:	f000 fe23 	bl	801cac8 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801be82:	4b2c      	ldr	r3, [pc, #176]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801be84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801be88:	2b06      	cmp	r3, #6
 801be8a:	d10d      	bne.n	801bea8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801be8c:	f640 0089 	movw	r0, #2185	; 0x889
 801be90:	f000 ff76 	bl	801cd80 <SUBGRF_ReadRegister>
 801be94:	4603      	mov	r3, r0
 801be96:	f023 0304 	bic.w	r3, r3, #4
 801be9a:	b2db      	uxtb	r3, r3
 801be9c:	4619      	mov	r1, r3
 801be9e:	f640 0089 	movw	r0, #2185	; 0x889
 801bea2:	f000 ff59 	bl	801cd58 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801bea6:	e02d      	b.n	801bf04 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801bea8:	f640 0089 	movw	r0, #2185	; 0x889
 801beac:	f000 ff68 	bl	801cd80 <SUBGRF_ReadRegister>
 801beb0:	4603      	mov	r3, r0
 801beb2:	f043 0304 	orr.w	r3, r3, #4
 801beb6:	b2db      	uxtb	r3, r3
 801beb8:	4619      	mov	r1, r3
 801beba:	f640 0089 	movw	r0, #2185	; 0x889
 801bebe:	f000 ff4b 	bl	801cd58 <SUBGRF_WriteRegister>
        break;
 801bec2:	e01f      	b.n	801bf04 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801bec4:	68bb      	ldr	r3, [r7, #8]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d004      	beq.n	801bed6 <RadioSetTxGenericConfig+0x402>
 801becc:	68bb      	ldr	r3, [r7, #8]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bed4:	d902      	bls.n	801bedc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801bed6:	f04f 33ff 	mov.w	r3, #4294967295
 801beda:	e027      	b.n	801bf2c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801bedc:	2003      	movs	r0, #3
 801bede:	f7fe f905 	bl	801a0ec <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801bee2:	4b14      	ldr	r3, [pc, #80]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bee4:	2202      	movs	r2, #2
 801bee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801beea:	68bb      	ldr	r3, [r7, #8]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	4a11      	ldr	r2, [pc, #68]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bef0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801bef2:	4b10      	ldr	r3, [pc, #64]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bef4:	2216      	movs	r2, #22
 801bef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801befa:	480f      	ldr	r0, [pc, #60]	; (801bf38 <RadioSetTxGenericConfig+0x464>)
 801befc:	f000 fd12 	bl	801c924 <SUBGRF_SetModulationParams>
        break;
 801bf00:	e000      	b.n	801bf04 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801bf02:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801bf04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bf08:	4618      	mov	r0, r3
 801bf0a:	f001 f841 	bl	801cf90 <SUBGRF_SetRfTxPower>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	461a      	mov	r2, r3
 801bf12:	4b08      	ldr	r3, [pc, #32]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bf14:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801bf18:	4b06      	ldr	r3, [pc, #24]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bf1a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bf1e:	4618      	mov	r0, r3
 801bf20:	f001 fa05 	bl	801d32e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801bf24:	4a03      	ldr	r2, [pc, #12]	; (801bf34 <RadioSetTxGenericConfig+0x460>)
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	6053      	str	r3, [r2, #4]
    return 0;
 801bf2a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	3738      	adds	r7, #56	; 0x38
 801bf30:	46bd      	mov	sp, r7
 801bf32:	bd80      	pop	{r7, pc}
 801bf34:	200023a0 	.word	0x200023a0
 801bf38:	200023d8 	.word	0x200023d8
 801bf3c:	200023ae 	.word	0x200023ae

0801bf40 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b084      	sub	sp, #16
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d002      	beq.n	801bf54 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801bf4e:	4a1a      	ldr	r2, [pc, #104]	; (801bfb8 <SUBGRF_Init+0x78>)
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801bf54:	f7e6 fcb0 	bl	80028b8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bf58:	2002      	movs	r0, #2
 801bf5a:	f001 f8e5 	bl	801d128 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801bf5e:	4b17      	ldr	r3, [pc, #92]	; (801bfbc <SUBGRF_Init+0x7c>)
 801bf60:	2200      	movs	r2, #0
 801bf62:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801bf64:	2000      	movs	r0, #0
 801bf66:	f000 f977 	bl	801c258 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801bf6a:	f7f2 f847 	bl	800dffc <RBI_IsTCXO>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	2b01      	cmp	r3, #1
 801bf72:	d10e      	bne.n	801bf92 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801bf74:	2140      	movs	r1, #64	; 0x40
 801bf76:	2001      	movs	r0, #1
 801bf78:	f000 fb78 	bl	801c66c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bf7c:	2100      	movs	r1, #0
 801bf7e:	f640 1011 	movw	r0, #2321	; 0x911
 801bf82:	f000 fee9 	bl	801cd58 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bf86:	237f      	movs	r3, #127	; 0x7f
 801bf88:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801bf8a:	7b38      	ldrb	r0, [r7, #12]
 801bf8c:	f000 fa85 	bl	801c49a <SUBGRF_Calibrate>
 801bf90:	e009      	b.n	801bfa6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf92:	2120      	movs	r1, #32
 801bf94:	f640 1011 	movw	r0, #2321	; 0x911
 801bf98:	f000 fede 	bl	801cd58 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf9c:	2120      	movs	r1, #32
 801bf9e:	f640 1012 	movw	r0, #2322	; 0x912
 801bfa2:	f000 fed9 	bl	801cd58 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801bfa6:	f7f2 f80d 	bl	800dfc4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bfaa:	4b05      	ldr	r3, [pc, #20]	; (801bfc0 <SUBGRF_Init+0x80>)
 801bfac:	2201      	movs	r2, #1
 801bfae:	701a      	strb	r2, [r3, #0]
}
 801bfb0:	bf00      	nop
 801bfb2:	3710      	adds	r7, #16
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}
 801bfb8:	20002438 	.word	0x20002438
 801bfbc:	20002434 	.word	0x20002434
 801bfc0:	2000242c 	.word	0x2000242c

0801bfc4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bfc8:	4b02      	ldr	r3, [pc, #8]	; (801bfd4 <SUBGRF_GetOperatingMode+0x10>)
 801bfca:	781b      	ldrb	r3, [r3, #0]
}
 801bfcc:	4618      	mov	r0, r3
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	bc80      	pop	{r7}
 801bfd2:	4770      	bx	lr
 801bfd4:	2000242c 	.word	0x2000242c

0801bfd8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b082      	sub	sp, #8
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
 801bfe0:	460b      	mov	r3, r1
 801bfe2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bfe4:	78fb      	ldrb	r3, [r7, #3]
 801bfe6:	461a      	mov	r2, r3
 801bfe8:	6879      	ldr	r1, [r7, #4]
 801bfea:	2000      	movs	r0, #0
 801bfec:	f000 ff20 	bl	801ce30 <SUBGRF_WriteBuffer>
}
 801bff0:	bf00      	nop
 801bff2:	3708      	adds	r7, #8
 801bff4:	46bd      	mov	sp, r7
 801bff6:	bd80      	pop	{r7, pc}

0801bff8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b086      	sub	sp, #24
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	60f8      	str	r0, [r7, #12]
 801c000:	60b9      	str	r1, [r7, #8]
 801c002:	4613      	mov	r3, r2
 801c004:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801c006:	2300      	movs	r3, #0
 801c008:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801c00a:	f107 0317 	add.w	r3, r7, #23
 801c00e:	4619      	mov	r1, r3
 801c010:	68b8      	ldr	r0, [r7, #8]
 801c012:	f000 fe23 	bl	801cc5c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801c016:	68bb      	ldr	r3, [r7, #8]
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	79fa      	ldrb	r2, [r7, #7]
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d201      	bcs.n	801c024 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801c020:	2301      	movs	r3, #1
 801c022:	e007      	b.n	801c034 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801c024:	7df8      	ldrb	r0, [r7, #23]
 801c026:	68bb      	ldr	r3, [r7, #8]
 801c028:	781b      	ldrb	r3, [r3, #0]
 801c02a:	461a      	mov	r2, r3
 801c02c:	68f9      	ldr	r1, [r7, #12]
 801c02e:	f000 ff21 	bl	801ce74 <SUBGRF_ReadBuffer>

    return 0;
 801c032:	2300      	movs	r3, #0
}
 801c034:	4618      	mov	r0, r3
 801c036:	3718      	adds	r7, #24
 801c038:	46bd      	mov	sp, r7
 801c03a:	bd80      	pop	{r7, pc}

0801c03c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b084      	sub	sp, #16
 801c040:	af00      	add	r7, sp, #0
 801c042:	60f8      	str	r0, [r7, #12]
 801c044:	460b      	mov	r3, r1
 801c046:	607a      	str	r2, [r7, #4]
 801c048:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c04a:	7afb      	ldrb	r3, [r7, #11]
 801c04c:	4619      	mov	r1, r3
 801c04e:	68f8      	ldr	r0, [r7, #12]
 801c050:	f7ff ffc2 	bl	801bfd8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	f000 f91b 	bl	801c290 <SUBGRF_SetTx>
}
 801c05a:	bf00      	nop
 801c05c:	3710      	adds	r7, #16
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}

0801c062 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c062:	b580      	push	{r7, lr}
 801c064:	b082      	sub	sp, #8
 801c066:	af00      	add	r7, sp, #0
 801c068:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c06a:	2208      	movs	r2, #8
 801c06c:	6879      	ldr	r1, [r7, #4]
 801c06e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c072:	f000 fe99 	bl	801cda8 <SUBGRF_WriteRegisters>
    return 0;
 801c076:	2300      	movs	r3, #0
}
 801c078:	4618      	mov	r0, r3
 801c07a:	3708      	adds	r7, #8
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}

0801c080 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b084      	sub	sp, #16
 801c084:	af00      	add	r7, sp, #0
 801c086:	4603      	mov	r3, r0
 801c088:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c08a:	88fb      	ldrh	r3, [r7, #6]
 801c08c:	0a1b      	lsrs	r3, r3, #8
 801c08e:	b29b      	uxth	r3, r3
 801c090:	b2db      	uxtb	r3, r3
 801c092:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c094:	88fb      	ldrh	r3, [r7, #6]
 801c096:	b2db      	uxtb	r3, r3
 801c098:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c09a:	f000 fb6b 	bl	801c774 <SUBGRF_GetPacketType>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d108      	bne.n	801c0b6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c0a4:	f107 030c 	add.w	r3, r7, #12
 801c0a8:	2202      	movs	r2, #2
 801c0aa:	4619      	mov	r1, r3
 801c0ac:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c0b0:	f000 fe7a 	bl	801cda8 <SUBGRF_WriteRegisters>
            break;
 801c0b4:	e000      	b.n	801c0b8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c0b6:	bf00      	nop
    }
}
 801c0b8:	bf00      	nop
 801c0ba:	3710      	adds	r7, #16
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bd80      	pop	{r7, pc}

0801c0c0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b084      	sub	sp, #16
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c0ca:	88fb      	ldrh	r3, [r7, #6]
 801c0cc:	0a1b      	lsrs	r3, r3, #8
 801c0ce:	b29b      	uxth	r3, r3
 801c0d0:	b2db      	uxtb	r3, r3
 801c0d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c0d4:	88fb      	ldrh	r3, [r7, #6]
 801c0d6:	b2db      	uxtb	r3, r3
 801c0d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c0da:	f000 fb4b 	bl	801c774 <SUBGRF_GetPacketType>
 801c0de:	4603      	mov	r3, r0
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d108      	bne.n	801c0f6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c0e4:	f107 030c 	add.w	r3, r7, #12
 801c0e8:	2202      	movs	r2, #2
 801c0ea:	4619      	mov	r1, r3
 801c0ec:	f240 60be 	movw	r0, #1726	; 0x6be
 801c0f0:	f000 fe5a 	bl	801cda8 <SUBGRF_WriteRegisters>
            break;
 801c0f4:	e000      	b.n	801c0f8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c0f6:	bf00      	nop
    }
}
 801c0f8:	bf00      	nop
 801c0fa:	3710      	adds	r7, #16
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	bd80      	pop	{r7, pc}

0801c100 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c100:	b580      	push	{r7, lr}
 801c102:	b084      	sub	sp, #16
 801c104:	af00      	add	r7, sp, #0
 801c106:	4603      	mov	r3, r0
 801c108:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c10a:	2300      	movs	r3, #0
 801c10c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c10e:	f000 fb31 	bl	801c774 <SUBGRF_GetPacketType>
 801c112:	4603      	mov	r3, r0
 801c114:	2b00      	cmp	r3, #0
 801c116:	d121      	bne.n	801c15c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c118:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c11c:	f000 fe30 	bl	801cd80 <SUBGRF_ReadRegister>
 801c120:	4603      	mov	r3, r0
 801c122:	f023 0301 	bic.w	r3, r3, #1
 801c126:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c128:	88fb      	ldrh	r3, [r7, #6]
 801c12a:	0a1b      	lsrs	r3, r3, #8
 801c12c:	b29b      	uxth	r3, r3
 801c12e:	b25b      	sxtb	r3, r3
 801c130:	f003 0301 	and.w	r3, r3, #1
 801c134:	b25a      	sxtb	r2, r3
 801c136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c13a:	4313      	orrs	r3, r2
 801c13c:	b25b      	sxtb	r3, r3
 801c13e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c140:	7bfb      	ldrb	r3, [r7, #15]
 801c142:	4619      	mov	r1, r3
 801c144:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c148:	f000 fe06 	bl	801cd58 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c14c:	88fb      	ldrh	r3, [r7, #6]
 801c14e:	b2db      	uxtb	r3, r3
 801c150:	4619      	mov	r1, r3
 801c152:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c156:	f000 fdff 	bl	801cd58 <SUBGRF_WriteRegister>
            break;
 801c15a:	e000      	b.n	801c15e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c15c:	bf00      	nop
    }
}
 801c15e:	bf00      	nop
 801c160:	3710      	adds	r7, #16
 801c162:	46bd      	mov	sp, r7
 801c164:	bd80      	pop	{r7, pc}

0801c166 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c166:	b580      	push	{r7, lr}
 801c168:	b082      	sub	sp, #8
 801c16a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c16c:	2300      	movs	r3, #0
 801c16e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c170:	2300      	movs	r3, #0
 801c172:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c174:	2300      	movs	r3, #0
 801c176:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c178:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c17c:	f000 fe00 	bl	801cd80 <SUBGRF_ReadRegister>
 801c180:	4603      	mov	r3, r0
 801c182:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c184:	79fb      	ldrb	r3, [r7, #7]
 801c186:	f023 0301 	bic.w	r3, r3, #1
 801c18a:	b2db      	uxtb	r3, r3
 801c18c:	4619      	mov	r1, r3
 801c18e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c192:	f000 fde1 	bl	801cd58 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c196:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c19a:	f000 fdf1 	bl	801cd80 <SUBGRF_ReadRegister>
 801c19e:	4603      	mov	r3, r0
 801c1a0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c1a2:	79bb      	ldrb	r3, [r7, #6]
 801c1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c1a8:	b2db      	uxtb	r3, r3
 801c1aa:	4619      	mov	r1, r3
 801c1ac:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c1b0:	f000 fdd2 	bl	801cd58 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c1b4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c1b8:	f000 f88a 	bl	801c2d0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c1bc:	463b      	mov	r3, r7
 801c1be:	2204      	movs	r2, #4
 801c1c0:	4619      	mov	r1, r3
 801c1c2:	f640 0019 	movw	r0, #2073	; 0x819
 801c1c6:	f000 fe11 	bl	801cdec <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c1ca:	2000      	movs	r0, #0
 801c1cc:	f000 f844 	bl	801c258 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c1d0:	79fb      	ldrb	r3, [r7, #7]
 801c1d2:	4619      	mov	r1, r3
 801c1d4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c1d8:	f000 fdbe 	bl	801cd58 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c1dc:	79bb      	ldrb	r3, [r7, #6]
 801c1de:	4619      	mov	r1, r3
 801c1e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c1e4:	f000 fdb8 	bl	801cd58 <SUBGRF_WriteRegister>

    return number;
 801c1e8:	683b      	ldr	r3, [r7, #0]
}
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	3708      	adds	r7, #8
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	bd80      	pop	{r7, pc}
	...

0801c1f4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b084      	sub	sp, #16
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c1fc:	2000      	movs	r0, #0
 801c1fe:	f7f1 fee8 	bl	800dfd2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c202:	2002      	movs	r0, #2
 801c204:	f000 ff90 	bl	801d128 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c208:	793b      	ldrb	r3, [r7, #4]
 801c20a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c20e:	b2db      	uxtb	r3, r3
 801c210:	009b      	lsls	r3, r3, #2
 801c212:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c214:	793b      	ldrb	r3, [r7, #4]
 801c216:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c21a:	b2db      	uxtb	r3, r3
 801c21c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c21e:	b25b      	sxtb	r3, r3
 801c220:	4313      	orrs	r3, r2
 801c222:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c224:	793b      	ldrb	r3, [r7, #4]
 801c226:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c22a:	b2db      	uxtb	r3, r3
 801c22c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c22e:	4313      	orrs	r3, r2
 801c230:	b25b      	sxtb	r3, r3
 801c232:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c234:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c236:	f107 030f 	add.w	r3, r7, #15
 801c23a:	2201      	movs	r2, #1
 801c23c:	4619      	mov	r1, r3
 801c23e:	2084      	movs	r0, #132	; 0x84
 801c240:	f000 fe3a 	bl	801ceb8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c244:	4b03      	ldr	r3, [pc, #12]	; (801c254 <SUBGRF_SetSleep+0x60>)
 801c246:	2200      	movs	r2, #0
 801c248:	701a      	strb	r2, [r3, #0]
}
 801c24a:	bf00      	nop
 801c24c:	3710      	adds	r7, #16
 801c24e:	46bd      	mov	sp, r7
 801c250:	bd80      	pop	{r7, pc}
 801c252:	bf00      	nop
 801c254:	2000242c 	.word	0x2000242c

0801c258 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c258:	b580      	push	{r7, lr}
 801c25a:	b082      	sub	sp, #8
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	4603      	mov	r3, r0
 801c260:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c262:	1dfb      	adds	r3, r7, #7
 801c264:	2201      	movs	r2, #1
 801c266:	4619      	mov	r1, r3
 801c268:	2080      	movs	r0, #128	; 0x80
 801c26a:	f000 fe25 	bl	801ceb8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c26e:	79fb      	ldrb	r3, [r7, #7]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d103      	bne.n	801c27c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c274:	4b05      	ldr	r3, [pc, #20]	; (801c28c <SUBGRF_SetStandby+0x34>)
 801c276:	2201      	movs	r2, #1
 801c278:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c27a:	e002      	b.n	801c282 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c27c:	4b03      	ldr	r3, [pc, #12]	; (801c28c <SUBGRF_SetStandby+0x34>)
 801c27e:	2202      	movs	r2, #2
 801c280:	701a      	strb	r2, [r3, #0]
}
 801c282:	bf00      	nop
 801c284:	3708      	adds	r7, #8
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}
 801c28a:	bf00      	nop
 801c28c:	2000242c 	.word	0x2000242c

0801c290 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b084      	sub	sp, #16
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c298:	4b0c      	ldr	r3, [pc, #48]	; (801c2cc <SUBGRF_SetTx+0x3c>)
 801c29a:	2204      	movs	r2, #4
 801c29c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	0c1b      	lsrs	r3, r3, #16
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	0a1b      	lsrs	r3, r3, #8
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	b2db      	uxtb	r3, r3
 801c2b2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c2b4:	f107 030c 	add.w	r3, r7, #12
 801c2b8:	2203      	movs	r2, #3
 801c2ba:	4619      	mov	r1, r3
 801c2bc:	2083      	movs	r0, #131	; 0x83
 801c2be:	f000 fdfb 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c2c2:	bf00      	nop
 801c2c4:	3710      	adds	r7, #16
 801c2c6:	46bd      	mov	sp, r7
 801c2c8:	bd80      	pop	{r7, pc}
 801c2ca:	bf00      	nop
 801c2cc:	2000242c 	.word	0x2000242c

0801c2d0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b084      	sub	sp, #16
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2d8:	4b0c      	ldr	r3, [pc, #48]	; (801c30c <SUBGRF_SetRx+0x3c>)
 801c2da:	2205      	movs	r2, #5
 801c2dc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	0c1b      	lsrs	r3, r3, #16
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	0a1b      	lsrs	r3, r3, #8
 801c2ea:	b2db      	uxtb	r3, r3
 801c2ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	b2db      	uxtb	r3, r3
 801c2f2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2f4:	f107 030c 	add.w	r3, r7, #12
 801c2f8:	2203      	movs	r2, #3
 801c2fa:	4619      	mov	r1, r3
 801c2fc:	2082      	movs	r0, #130	; 0x82
 801c2fe:	f000 fddb 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c302:	bf00      	nop
 801c304:	3710      	adds	r7, #16
 801c306:	46bd      	mov	sp, r7
 801c308:	bd80      	pop	{r7, pc}
 801c30a:	bf00      	nop
 801c30c:	2000242c 	.word	0x2000242c

0801c310 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b084      	sub	sp, #16
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c318:	4b0e      	ldr	r3, [pc, #56]	; (801c354 <SUBGRF_SetRxBoosted+0x44>)
 801c31a:	2205      	movs	r2, #5
 801c31c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c31e:	2197      	movs	r1, #151	; 0x97
 801c320:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c324:	f000 fd18 	bl	801cd58 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	0c1b      	lsrs	r3, r3, #16
 801c32c:	b2db      	uxtb	r3, r3
 801c32e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	0a1b      	lsrs	r3, r3, #8
 801c334:	b2db      	uxtb	r3, r3
 801c336:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	b2db      	uxtb	r3, r3
 801c33c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c33e:	f107 030c 	add.w	r3, r7, #12
 801c342:	2203      	movs	r2, #3
 801c344:	4619      	mov	r1, r3
 801c346:	2082      	movs	r0, #130	; 0x82
 801c348:	f000 fdb6 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c34c:	bf00      	nop
 801c34e:	3710      	adds	r7, #16
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}
 801c354:	2000242c 	.word	0x2000242c

0801c358 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b084      	sub	sp, #16
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	6078      	str	r0, [r7, #4]
 801c360:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	0c1b      	lsrs	r3, r3, #16
 801c366:	b2db      	uxtb	r3, r3
 801c368:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	0a1b      	lsrs	r3, r3, #8
 801c36e:	b2db      	uxtb	r3, r3
 801c370:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	b2db      	uxtb	r3, r3
 801c376:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	0c1b      	lsrs	r3, r3, #16
 801c37c:	b2db      	uxtb	r3, r3
 801c37e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c380:	683b      	ldr	r3, [r7, #0]
 801c382:	0a1b      	lsrs	r3, r3, #8
 801c384:	b2db      	uxtb	r3, r3
 801c386:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c388:	683b      	ldr	r3, [r7, #0]
 801c38a:	b2db      	uxtb	r3, r3
 801c38c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c38e:	f107 0308 	add.w	r3, r7, #8
 801c392:	2206      	movs	r2, #6
 801c394:	4619      	mov	r1, r3
 801c396:	2094      	movs	r0, #148	; 0x94
 801c398:	f000 fd8e 	bl	801ceb8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c39c:	4b03      	ldr	r3, [pc, #12]	; (801c3ac <SUBGRF_SetRxDutyCycle+0x54>)
 801c39e:	2206      	movs	r2, #6
 801c3a0:	701a      	strb	r2, [r3, #0]
}
 801c3a2:	bf00      	nop
 801c3a4:	3710      	adds	r7, #16
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}
 801c3aa:	bf00      	nop
 801c3ac:	2000242c 	.word	0x2000242c

0801c3b0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	2100      	movs	r1, #0
 801c3b8:	20c5      	movs	r0, #197	; 0xc5
 801c3ba:	f000 fd7d 	bl	801ceb8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c3be:	4b02      	ldr	r3, [pc, #8]	; (801c3c8 <SUBGRF_SetCad+0x18>)
 801c3c0:	2207      	movs	r2, #7
 801c3c2:	701a      	strb	r2, [r3, #0]
}
 801c3c4:	bf00      	nop
 801c3c6:	bd80      	pop	{r7, pc}
 801c3c8:	2000242c 	.word	0x2000242c

0801c3cc <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	2100      	movs	r1, #0
 801c3d4:	20d1      	movs	r0, #209	; 0xd1
 801c3d6:	f000 fd6f 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c3da:	bf00      	nop
 801c3dc:	bd80      	pop	{r7, pc}

0801c3de <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c3de:	b580      	push	{r7, lr}
 801c3e0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c3e2:	2200      	movs	r2, #0
 801c3e4:	2100      	movs	r1, #0
 801c3e6:	20d2      	movs	r0, #210	; 0xd2
 801c3e8:	f000 fd66 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c3ec:	bf00      	nop
 801c3ee:	bd80      	pop	{r7, pc}

0801c3f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	b082      	sub	sp, #8
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	4603      	mov	r3, r0
 801c3f8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c3fa:	1dfb      	adds	r3, r7, #7
 801c3fc:	2201      	movs	r2, #1
 801c3fe:	4619      	mov	r1, r3
 801c400:	209f      	movs	r0, #159	; 0x9f
 801c402:	f000 fd59 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c406:	bf00      	nop
 801c408:	3708      	adds	r7, #8
 801c40a:	46bd      	mov	sp, r7
 801c40c:	bd80      	pop	{r7, pc}

0801c40e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c40e:	b580      	push	{r7, lr}
 801c410:	b084      	sub	sp, #16
 801c412:	af00      	add	r7, sp, #0
 801c414:	4603      	mov	r3, r0
 801c416:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c418:	1dfb      	adds	r3, r7, #7
 801c41a:	2201      	movs	r2, #1
 801c41c:	4619      	mov	r1, r3
 801c41e:	20a0      	movs	r0, #160	; 0xa0
 801c420:	f000 fd4a 	bl	801ceb8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c424:	79fb      	ldrb	r3, [r7, #7]
 801c426:	2b3f      	cmp	r3, #63	; 0x3f
 801c428:	d91c      	bls.n	801c464 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c42a:	79fb      	ldrb	r3, [r7, #7]
 801c42c:	085b      	lsrs	r3, r3, #1
 801c42e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c430:	2300      	movs	r3, #0
 801c432:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c434:	2300      	movs	r3, #0
 801c436:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c438:	e005      	b.n	801c446 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c43a:	7bfb      	ldrb	r3, [r7, #15]
 801c43c:	089b      	lsrs	r3, r3, #2
 801c43e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c440:	7bbb      	ldrb	r3, [r7, #14]
 801c442:	3301      	adds	r3, #1
 801c444:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c446:	7bfb      	ldrb	r3, [r7, #15]
 801c448:	2b1f      	cmp	r3, #31
 801c44a:	d8f6      	bhi.n	801c43a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c44c:	7bfb      	ldrb	r3, [r7, #15]
 801c44e:	00db      	lsls	r3, r3, #3
 801c450:	b2da      	uxtb	r2, r3
 801c452:	7bbb      	ldrb	r3, [r7, #14]
 801c454:	4413      	add	r3, r2
 801c456:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c458:	7b7b      	ldrb	r3, [r7, #13]
 801c45a:	4619      	mov	r1, r3
 801c45c:	f240 7006 	movw	r0, #1798	; 0x706
 801c460:	f000 fc7a 	bl	801cd58 <SUBGRF_WriteRegister>
    }
}
 801c464:	bf00      	nop
 801c466:	3710      	adds	r7, #16
 801c468:	46bd      	mov	sp, r7
 801c46a:	bd80      	pop	{r7, pc}

0801c46c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c46c:	b580      	push	{r7, lr}
 801c46e:	b082      	sub	sp, #8
 801c470:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c472:	f7f1 fdca 	bl	800e00a <RBI_IsDCDC>
 801c476:	4603      	mov	r3, r0
 801c478:	2b01      	cmp	r3, #1
 801c47a:	d102      	bne.n	801c482 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c47c:	2301      	movs	r3, #1
 801c47e:	71fb      	strb	r3, [r7, #7]
 801c480:	e001      	b.n	801c486 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c482:	2300      	movs	r3, #0
 801c484:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c486:	1dfb      	adds	r3, r7, #7
 801c488:	2201      	movs	r2, #1
 801c48a:	4619      	mov	r1, r3
 801c48c:	2096      	movs	r0, #150	; 0x96
 801c48e:	f000 fd13 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c492:	bf00      	nop
 801c494:	3708      	adds	r7, #8
 801c496:	46bd      	mov	sp, r7
 801c498:	bd80      	pop	{r7, pc}

0801c49a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c49a:	b580      	push	{r7, lr}
 801c49c:	b084      	sub	sp, #16
 801c49e:	af00      	add	r7, sp, #0
 801c4a0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4a2:	793b      	ldrb	r3, [r7, #4]
 801c4a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c4a8:	b2db      	uxtb	r3, r3
 801c4aa:	019b      	lsls	r3, r3, #6
 801c4ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c4ae:	793b      	ldrb	r3, [r7, #4]
 801c4b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4b8:	b25b      	sxtb	r3, r3
 801c4ba:	4313      	orrs	r3, r2
 801c4bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c4be:	793b      	ldrb	r3, [r7, #4]
 801c4c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c4c4:	b2db      	uxtb	r3, r3
 801c4c6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c4c8:	b25b      	sxtb	r3, r3
 801c4ca:	4313      	orrs	r3, r2
 801c4cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c4ce:	793b      	ldrb	r3, [r7, #4]
 801c4d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c4d8:	b25b      	sxtb	r3, r3
 801c4da:	4313      	orrs	r3, r2
 801c4dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4de:	793b      	ldrb	r3, [r7, #4]
 801c4e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c4e4:	b2db      	uxtb	r3, r3
 801c4e6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c4e8:	b25b      	sxtb	r3, r3
 801c4ea:	4313      	orrs	r3, r2
 801c4ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4ee:	793b      	ldrb	r3, [r7, #4]
 801c4f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c4f4:	b2db      	uxtb	r3, r3
 801c4f6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4f8:	b25b      	sxtb	r3, r3
 801c4fa:	4313      	orrs	r3, r2
 801c4fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c4fe:	793b      	ldrb	r3, [r7, #4]
 801c500:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c504:	b2db      	uxtb	r3, r3
 801c506:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c508:	4313      	orrs	r3, r2
 801c50a:	b25b      	sxtb	r3, r3
 801c50c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c50e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c510:	f107 030f 	add.w	r3, r7, #15
 801c514:	2201      	movs	r2, #1
 801c516:	4619      	mov	r1, r3
 801c518:	2089      	movs	r0, #137	; 0x89
 801c51a:	f000 fccd 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c51e:	bf00      	nop
 801c520:	3710      	adds	r7, #16
 801c522:	46bd      	mov	sp, r7
 801c524:	bd80      	pop	{r7, pc}
	...

0801c528 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	b084      	sub	sp, #16
 801c52c:	af00      	add	r7, sp, #0
 801c52e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	4a1b      	ldr	r2, [pc, #108]	; (801c5a0 <SUBGRF_CalibrateImage+0x78>)
 801c534:	4293      	cmp	r3, r2
 801c536:	d904      	bls.n	801c542 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c538:	23e1      	movs	r3, #225	; 0xe1
 801c53a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c53c:	23e9      	movs	r3, #233	; 0xe9
 801c53e:	737b      	strb	r3, [r7, #13]
 801c540:	e022      	b.n	801c588 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	4a17      	ldr	r2, [pc, #92]	; (801c5a4 <SUBGRF_CalibrateImage+0x7c>)
 801c546:	4293      	cmp	r3, r2
 801c548:	d904      	bls.n	801c554 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c54a:	23d7      	movs	r3, #215	; 0xd7
 801c54c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c54e:	23db      	movs	r3, #219	; 0xdb
 801c550:	737b      	strb	r3, [r7, #13]
 801c552:	e019      	b.n	801c588 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	4a14      	ldr	r2, [pc, #80]	; (801c5a8 <SUBGRF_CalibrateImage+0x80>)
 801c558:	4293      	cmp	r3, r2
 801c55a:	d904      	bls.n	801c566 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c55c:	23c1      	movs	r3, #193	; 0xc1
 801c55e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c560:	23c5      	movs	r3, #197	; 0xc5
 801c562:	737b      	strb	r3, [r7, #13]
 801c564:	e010      	b.n	801c588 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	4a10      	ldr	r2, [pc, #64]	; (801c5ac <SUBGRF_CalibrateImage+0x84>)
 801c56a:	4293      	cmp	r3, r2
 801c56c:	d904      	bls.n	801c578 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c56e:	2375      	movs	r3, #117	; 0x75
 801c570:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c572:	2381      	movs	r3, #129	; 0x81
 801c574:	737b      	strb	r3, [r7, #13]
 801c576:	e007      	b.n	801c588 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	4a0d      	ldr	r2, [pc, #52]	; (801c5b0 <SUBGRF_CalibrateImage+0x88>)
 801c57c:	4293      	cmp	r3, r2
 801c57e:	d903      	bls.n	801c588 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801c580:	236b      	movs	r3, #107	; 0x6b
 801c582:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c584:	236f      	movs	r3, #111	; 0x6f
 801c586:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c588:	f107 030c 	add.w	r3, r7, #12
 801c58c:	2202      	movs	r2, #2
 801c58e:	4619      	mov	r1, r3
 801c590:	2098      	movs	r0, #152	; 0x98
 801c592:	f000 fc91 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c596:	bf00      	nop
 801c598:	3710      	adds	r7, #16
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	bf00      	nop
 801c5a0:	35a4e900 	.word	0x35a4e900
 801c5a4:	32a9f880 	.word	0x32a9f880
 801c5a8:	2de54480 	.word	0x2de54480
 801c5ac:	1b6b0b00 	.word	0x1b6b0b00
 801c5b0:	1954fc40 	.word	0x1954fc40

0801c5b4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c5b4:	b590      	push	{r4, r7, lr}
 801c5b6:	b085      	sub	sp, #20
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	4604      	mov	r4, r0
 801c5bc:	4608      	mov	r0, r1
 801c5be:	4611      	mov	r1, r2
 801c5c0:	461a      	mov	r2, r3
 801c5c2:	4623      	mov	r3, r4
 801c5c4:	71fb      	strb	r3, [r7, #7]
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	71bb      	strb	r3, [r7, #6]
 801c5ca:	460b      	mov	r3, r1
 801c5cc:	717b      	strb	r3, [r7, #5]
 801c5ce:	4613      	mov	r3, r2
 801c5d0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c5d2:	79fb      	ldrb	r3, [r7, #7]
 801c5d4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c5d6:	79bb      	ldrb	r3, [r7, #6]
 801c5d8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c5da:	797b      	ldrb	r3, [r7, #5]
 801c5dc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c5de:	793b      	ldrb	r3, [r7, #4]
 801c5e0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c5e2:	f107 030c 	add.w	r3, r7, #12
 801c5e6:	2204      	movs	r2, #4
 801c5e8:	4619      	mov	r1, r3
 801c5ea:	2095      	movs	r0, #149	; 0x95
 801c5ec:	f000 fc64 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c5f0:	bf00      	nop
 801c5f2:	3714      	adds	r7, #20
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd90      	pop	{r4, r7, pc}

0801c5f8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c5f8:	b590      	push	{r4, r7, lr}
 801c5fa:	b085      	sub	sp, #20
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	4604      	mov	r4, r0
 801c600:	4608      	mov	r0, r1
 801c602:	4611      	mov	r1, r2
 801c604:	461a      	mov	r2, r3
 801c606:	4623      	mov	r3, r4
 801c608:	80fb      	strh	r3, [r7, #6]
 801c60a:	4603      	mov	r3, r0
 801c60c:	80bb      	strh	r3, [r7, #4]
 801c60e:	460b      	mov	r3, r1
 801c610:	807b      	strh	r3, [r7, #2]
 801c612:	4613      	mov	r3, r2
 801c614:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c616:	88fb      	ldrh	r3, [r7, #6]
 801c618:	0a1b      	lsrs	r3, r3, #8
 801c61a:	b29b      	uxth	r3, r3
 801c61c:	b2db      	uxtb	r3, r3
 801c61e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c620:	88fb      	ldrh	r3, [r7, #6]
 801c622:	b2db      	uxtb	r3, r3
 801c624:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c626:	88bb      	ldrh	r3, [r7, #4]
 801c628:	0a1b      	lsrs	r3, r3, #8
 801c62a:	b29b      	uxth	r3, r3
 801c62c:	b2db      	uxtb	r3, r3
 801c62e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c630:	88bb      	ldrh	r3, [r7, #4]
 801c632:	b2db      	uxtb	r3, r3
 801c634:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c636:	887b      	ldrh	r3, [r7, #2]
 801c638:	0a1b      	lsrs	r3, r3, #8
 801c63a:	b29b      	uxth	r3, r3
 801c63c:	b2db      	uxtb	r3, r3
 801c63e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c640:	887b      	ldrh	r3, [r7, #2]
 801c642:	b2db      	uxtb	r3, r3
 801c644:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c646:	883b      	ldrh	r3, [r7, #0]
 801c648:	0a1b      	lsrs	r3, r3, #8
 801c64a:	b29b      	uxth	r3, r3
 801c64c:	b2db      	uxtb	r3, r3
 801c64e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c650:	883b      	ldrh	r3, [r7, #0]
 801c652:	b2db      	uxtb	r3, r3
 801c654:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c656:	f107 0308 	add.w	r3, r7, #8
 801c65a:	2208      	movs	r2, #8
 801c65c:	4619      	mov	r1, r3
 801c65e:	2008      	movs	r0, #8
 801c660:	f000 fc2a 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c664:	bf00      	nop
 801c666:	3714      	adds	r7, #20
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd90      	pop	{r4, r7, pc}

0801c66c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b084      	sub	sp, #16
 801c670:	af00      	add	r7, sp, #0
 801c672:	4603      	mov	r3, r0
 801c674:	6039      	str	r1, [r7, #0]
 801c676:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c678:	79fb      	ldrb	r3, [r7, #7]
 801c67a:	f003 0307 	and.w	r3, r3, #7
 801c67e:	b2db      	uxtb	r3, r3
 801c680:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	0c1b      	lsrs	r3, r3, #16
 801c686:	b2db      	uxtb	r3, r3
 801c688:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c68a:	683b      	ldr	r3, [r7, #0]
 801c68c:	0a1b      	lsrs	r3, r3, #8
 801c68e:	b2db      	uxtb	r3, r3
 801c690:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	b2db      	uxtb	r3, r3
 801c696:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c698:	f107 030c 	add.w	r3, r7, #12
 801c69c:	2204      	movs	r2, #4
 801c69e:	4619      	mov	r1, r3
 801c6a0:	2097      	movs	r0, #151	; 0x97
 801c6a2:	f000 fc09 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c6a6:	bf00      	nop
 801c6a8:	3710      	adds	r7, #16
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	bd80      	pop	{r7, pc}
	...

0801c6b0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c6b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c6b4:	b084      	sub	sp, #16
 801c6b6:	af00      	add	r7, sp, #0
 801c6b8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c6be:	4b1d      	ldr	r3, [pc, #116]	; (801c734 <SUBGRF_SetRfFrequency+0x84>)
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	f083 0301 	eor.w	r3, r3, #1
 801c6c6:	b2db      	uxtb	r3, r3
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d005      	beq.n	801c6d8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c6cc:	6878      	ldr	r0, [r7, #4]
 801c6ce:	f7ff ff2b 	bl	801c528 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c6d2:	4b18      	ldr	r3, [pc, #96]	; (801c734 <SUBGRF_SetRfFrequency+0x84>)
 801c6d4:	2201      	movs	r2, #1
 801c6d6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	2200      	movs	r2, #0
 801c6dc:	461c      	mov	r4, r3
 801c6de:	4615      	mov	r5, r2
 801c6e0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c6e4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c6e8:	4a13      	ldr	r2, [pc, #76]	; (801c738 <SUBGRF_SetRfFrequency+0x88>)
 801c6ea:	f04f 0300 	mov.w	r3, #0
 801c6ee:	4640      	mov	r0, r8
 801c6f0:	4649      	mov	r1, r9
 801c6f2:	f7e4 fb4b 	bl	8000d8c <__aeabi_uldivmod>
 801c6f6:	4602      	mov	r2, r0
 801c6f8:	460b      	mov	r3, r1
 801c6fa:	4613      	mov	r3, r2
 801c6fc:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	0e1b      	lsrs	r3, r3, #24
 801c702:	b2db      	uxtb	r3, r3
 801c704:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	0c1b      	lsrs	r3, r3, #16
 801c70a:	b2db      	uxtb	r3, r3
 801c70c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	0a1b      	lsrs	r3, r3, #8
 801c712:	b2db      	uxtb	r3, r3
 801c714:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	b2db      	uxtb	r3, r3
 801c71a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c71c:	f107 0308 	add.w	r3, r7, #8
 801c720:	2204      	movs	r2, #4
 801c722:	4619      	mov	r1, r3
 801c724:	2086      	movs	r0, #134	; 0x86
 801c726:	f000 fbc7 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c72a:	bf00      	nop
 801c72c:	3710      	adds	r7, #16
 801c72e:	46bd      	mov	sp, r7
 801c730:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c734:	20002434 	.word	0x20002434
 801c738:	01e84800 	.word	0x01e84800

0801c73c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b082      	sub	sp, #8
 801c740:	af00      	add	r7, sp, #0
 801c742:	4603      	mov	r3, r0
 801c744:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c746:	79fa      	ldrb	r2, [r7, #7]
 801c748:	4b09      	ldr	r3, [pc, #36]	; (801c770 <SUBGRF_SetPacketType+0x34>)
 801c74a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c74c:	79fb      	ldrb	r3, [r7, #7]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d104      	bne.n	801c75c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c752:	2100      	movs	r1, #0
 801c754:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c758:	f000 fafe 	bl	801cd58 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c75c:	1dfb      	adds	r3, r7, #7
 801c75e:	2201      	movs	r2, #1
 801c760:	4619      	mov	r1, r3
 801c762:	208a      	movs	r0, #138	; 0x8a
 801c764:	f000 fba8 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c768:	bf00      	nop
 801c76a:	3708      	adds	r7, #8
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}
 801c770:	2000242d 	.word	0x2000242d

0801c774 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c774:	b480      	push	{r7}
 801c776:	af00      	add	r7, sp, #0
    return PacketType;
 801c778:	4b02      	ldr	r3, [pc, #8]	; (801c784 <SUBGRF_GetPacketType+0x10>)
 801c77a:	781b      	ldrb	r3, [r3, #0]
}
 801c77c:	4618      	mov	r0, r3
 801c77e:	46bd      	mov	sp, r7
 801c780:	bc80      	pop	{r7}
 801c782:	4770      	bx	lr
 801c784:	2000242d 	.word	0x2000242d

0801c788 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b084      	sub	sp, #16
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	4603      	mov	r3, r0
 801c790:	71fb      	strb	r3, [r7, #7]
 801c792:	460b      	mov	r3, r1
 801c794:	71bb      	strb	r3, [r7, #6]
 801c796:	4613      	mov	r3, r2
 801c798:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c79a:	79fb      	ldrb	r3, [r7, #7]
 801c79c:	2b01      	cmp	r3, #1
 801c79e:	d149      	bne.n	801c834 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c7a0:	2000      	movs	r0, #0
 801c7a2:	f7f1 fc39 	bl	800e018 <RBI_GetRFOMaxPowerConfig>
 801c7a6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c7a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c7ac:	68fa      	ldr	r2, [r7, #12]
 801c7ae:	429a      	cmp	r2, r3
 801c7b0:	da01      	bge.n	801c7b6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	2b0e      	cmp	r3, #14
 801c7ba:	d10e      	bne.n	801c7da <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c7bc:	2301      	movs	r3, #1
 801c7be:	2201      	movs	r2, #1
 801c7c0:	2100      	movs	r1, #0
 801c7c2:	2004      	movs	r0, #4
 801c7c4:	f7ff fef6 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7c8:	79ba      	ldrb	r2, [r7, #6]
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	b2db      	uxtb	r3, r3
 801c7ce:	1ad3      	subs	r3, r2, r3
 801c7d0:	b2db      	uxtb	r3, r3
 801c7d2:	330e      	adds	r3, #14
 801c7d4:	b2db      	uxtb	r3, r3
 801c7d6:	71bb      	strb	r3, [r7, #6]
 801c7d8:	e01f      	b.n	801c81a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	2b0a      	cmp	r3, #10
 801c7de:	d10e      	bne.n	801c7fe <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	2201      	movs	r2, #1
 801c7e4:	2100      	movs	r1, #0
 801c7e6:	2001      	movs	r0, #1
 801c7e8:	f7ff fee4 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c7ec:	79ba      	ldrb	r2, [r7, #6]
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	b2db      	uxtb	r3, r3
 801c7f2:	1ad3      	subs	r3, r2, r3
 801c7f4:	b2db      	uxtb	r3, r3
 801c7f6:	330d      	adds	r3, #13
 801c7f8:	b2db      	uxtb	r3, r3
 801c7fa:	71bb      	strb	r3, [r7, #6]
 801c7fc:	e00d      	b.n	801c81a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801c7fe:	2301      	movs	r3, #1
 801c800:	2201      	movs	r2, #1
 801c802:	2100      	movs	r1, #0
 801c804:	2006      	movs	r0, #6
 801c806:	f7ff fed5 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c80a:	79ba      	ldrb	r2, [r7, #6]
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	b2db      	uxtb	r3, r3
 801c810:	1ad3      	subs	r3, r2, r3
 801c812:	b2db      	uxtb	r3, r3
 801c814:	330e      	adds	r3, #14
 801c816:	b2db      	uxtb	r3, r3
 801c818:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c81a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c81e:	f113 0f11 	cmn.w	r3, #17
 801c822:	da01      	bge.n	801c828 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c824:	23ef      	movs	r3, #239	; 0xef
 801c826:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c828:	2118      	movs	r1, #24
 801c82a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c82e:	f000 fa93 	bl	801cd58 <SUBGRF_WriteRegister>
 801c832:	e067      	b.n	801c904 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c834:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c838:	f000 faa2 	bl	801cd80 <SUBGRF_ReadRegister>
 801c83c:	4603      	mov	r3, r0
 801c83e:	f043 031e 	orr.w	r3, r3, #30
 801c842:	b2db      	uxtb	r3, r3
 801c844:	4619      	mov	r1, r3
 801c846:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c84a:	f000 fa85 	bl	801cd58 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c84e:	2001      	movs	r0, #1
 801c850:	f7f1 fbe2 	bl	800e018 <RBI_GetRFOMaxPowerConfig>
 801c854:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c856:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c85a:	68fa      	ldr	r2, [r7, #12]
 801c85c:	429a      	cmp	r2, r3
 801c85e:	da01      	bge.n	801c864 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	2b14      	cmp	r3, #20
 801c868:	d10e      	bne.n	801c888 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c86a:	2301      	movs	r3, #1
 801c86c:	2200      	movs	r2, #0
 801c86e:	2105      	movs	r1, #5
 801c870:	2003      	movs	r0, #3
 801c872:	f7ff fe9f 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c876:	79ba      	ldrb	r2, [r7, #6]
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	b2db      	uxtb	r3, r3
 801c87c:	1ad3      	subs	r3, r2, r3
 801c87e:	b2db      	uxtb	r3, r3
 801c880:	3316      	adds	r3, #22
 801c882:	b2db      	uxtb	r3, r3
 801c884:	71bb      	strb	r3, [r7, #6]
 801c886:	e031      	b.n	801c8ec <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	2b11      	cmp	r3, #17
 801c88c:	d10e      	bne.n	801c8ac <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c88e:	2301      	movs	r3, #1
 801c890:	2200      	movs	r2, #0
 801c892:	2103      	movs	r1, #3
 801c894:	2002      	movs	r0, #2
 801c896:	f7ff fe8d 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c89a:	79ba      	ldrb	r2, [r7, #6]
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	b2db      	uxtb	r3, r3
 801c8a0:	1ad3      	subs	r3, r2, r3
 801c8a2:	b2db      	uxtb	r3, r3
 801c8a4:	3316      	adds	r3, #22
 801c8a6:	b2db      	uxtb	r3, r3
 801c8a8:	71bb      	strb	r3, [r7, #6]
 801c8aa:	e01f      	b.n	801c8ec <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2b0e      	cmp	r3, #14
 801c8b0:	d10e      	bne.n	801c8d0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c8b2:	2301      	movs	r3, #1
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	2102      	movs	r1, #2
 801c8b8:	2002      	movs	r0, #2
 801c8ba:	f7ff fe7b 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c8be:	79ba      	ldrb	r2, [r7, #6]
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	b2db      	uxtb	r3, r3
 801c8c4:	1ad3      	subs	r3, r2, r3
 801c8c6:	b2db      	uxtb	r3, r3
 801c8c8:	330e      	adds	r3, #14
 801c8ca:	b2db      	uxtb	r3, r3
 801c8cc:	71bb      	strb	r3, [r7, #6]
 801c8ce:	e00d      	b.n	801c8ec <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c8d0:	2301      	movs	r3, #1
 801c8d2:	2200      	movs	r2, #0
 801c8d4:	2107      	movs	r1, #7
 801c8d6:	2004      	movs	r0, #4
 801c8d8:	f7ff fe6c 	bl	801c5b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c8dc:	79ba      	ldrb	r2, [r7, #6]
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	b2db      	uxtb	r3, r3
 801c8e2:	1ad3      	subs	r3, r2, r3
 801c8e4:	b2db      	uxtb	r3, r3
 801c8e6:	3316      	adds	r3, #22
 801c8e8:	b2db      	uxtb	r3, r3
 801c8ea:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c8ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c8f0:	f113 0f09 	cmn.w	r3, #9
 801c8f4:	da01      	bge.n	801c8fa <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c8f6:	23f7      	movs	r3, #247	; 0xf7
 801c8f8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c8fa:	2138      	movs	r1, #56	; 0x38
 801c8fc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c900:	f000 fa2a 	bl	801cd58 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c904:	79bb      	ldrb	r3, [r7, #6]
 801c906:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c908:	797b      	ldrb	r3, [r7, #5]
 801c90a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c90c:	f107 0308 	add.w	r3, r7, #8
 801c910:	2202      	movs	r2, #2
 801c912:	4619      	mov	r1, r3
 801c914:	208e      	movs	r0, #142	; 0x8e
 801c916:	f000 facf 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801c91a:	bf00      	nop
 801c91c:	3710      	adds	r7, #16
 801c91e:	46bd      	mov	sp, r7
 801c920:	bd80      	pop	{r7, pc}
	...

0801c924 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c928:	b086      	sub	sp, #24
 801c92a:	af00      	add	r7, sp, #0
 801c92c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c92e:	2300      	movs	r3, #0
 801c930:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c932:	4a61      	ldr	r2, [pc, #388]	; (801cab8 <SUBGRF_SetModulationParams+0x194>)
 801c934:	f107 0308 	add.w	r3, r7, #8
 801c938:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c93c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	781a      	ldrb	r2, [r3, #0]
 801c944:	4b5d      	ldr	r3, [pc, #372]	; (801cabc <SUBGRF_SetModulationParams+0x198>)
 801c946:	781b      	ldrb	r3, [r3, #0]
 801c948:	429a      	cmp	r2, r3
 801c94a:	d004      	beq.n	801c956 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	781b      	ldrb	r3, [r3, #0]
 801c950:	4618      	mov	r0, r3
 801c952:	f7ff fef3 	bl	801c73c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	781b      	ldrb	r3, [r3, #0]
 801c95a:	2b03      	cmp	r3, #3
 801c95c:	f200 80a5 	bhi.w	801caaa <SUBGRF_SetModulationParams+0x186>
 801c960:	a201      	add	r2, pc, #4	; (adr r2, 801c968 <SUBGRF_SetModulationParams+0x44>)
 801c962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c966:	bf00      	nop
 801c968:	0801c979 	.word	0x0801c979
 801c96c:	0801ca39 	.word	0x0801ca39
 801c970:	0801c9fb 	.word	0x0801c9fb
 801c974:	0801ca67 	.word	0x0801ca67
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c978:	2308      	movs	r3, #8
 801c97a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	685b      	ldr	r3, [r3, #4]
 801c980:	4a4f      	ldr	r2, [pc, #316]	; (801cac0 <SUBGRF_SetModulationParams+0x19c>)
 801c982:	fbb2 f3f3 	udiv	r3, r2, r3
 801c986:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	0c1b      	lsrs	r3, r3, #16
 801c98c:	b2db      	uxtb	r3, r3
 801c98e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c990:	697b      	ldr	r3, [r7, #20]
 801c992:	0a1b      	lsrs	r3, r3, #8
 801c994:	b2db      	uxtb	r3, r3
 801c996:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c998:	697b      	ldr	r3, [r7, #20]
 801c99a:	b2db      	uxtb	r3, r3
 801c99c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	7b1b      	ldrb	r3, [r3, #12]
 801c9a2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	7b5b      	ldrb	r3, [r3, #13]
 801c9a8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	689b      	ldr	r3, [r3, #8]
 801c9ae:	2200      	movs	r2, #0
 801c9b0:	461c      	mov	r4, r3
 801c9b2:	4615      	mov	r5, r2
 801c9b4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c9b8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c9bc:	4a41      	ldr	r2, [pc, #260]	; (801cac4 <SUBGRF_SetModulationParams+0x1a0>)
 801c9be:	f04f 0300 	mov.w	r3, #0
 801c9c2:	4640      	mov	r0, r8
 801c9c4:	4649      	mov	r1, r9
 801c9c6:	f7e4 f9e1 	bl	8000d8c <__aeabi_uldivmod>
 801c9ca:	4602      	mov	r2, r0
 801c9cc:	460b      	mov	r3, r1
 801c9ce:	4613      	mov	r3, r2
 801c9d0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c9d2:	697b      	ldr	r3, [r7, #20]
 801c9d4:	0c1b      	lsrs	r3, r3, #16
 801c9d6:	b2db      	uxtb	r3, r3
 801c9d8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c9da:	697b      	ldr	r3, [r7, #20]
 801c9dc:	0a1b      	lsrs	r3, r3, #8
 801c9de:	b2db      	uxtb	r3, r3
 801c9e0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c9e2:	697b      	ldr	r3, [r7, #20]
 801c9e4:	b2db      	uxtb	r3, r3
 801c9e6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9e8:	7cfb      	ldrb	r3, [r7, #19]
 801c9ea:	b29a      	uxth	r2, r3
 801c9ec:	f107 0308 	add.w	r3, r7, #8
 801c9f0:	4619      	mov	r1, r3
 801c9f2:	208b      	movs	r0, #139	; 0x8b
 801c9f4:	f000 fa60 	bl	801ceb8 <SUBGRF_WriteCommand>
        break;
 801c9f8:	e058      	b.n	801caac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c9fa:	2304      	movs	r3, #4
 801c9fc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	691b      	ldr	r3, [r3, #16]
 801ca02:	4a2f      	ldr	r2, [pc, #188]	; (801cac0 <SUBGRF_SetModulationParams+0x19c>)
 801ca04:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca08:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca0a:	697b      	ldr	r3, [r7, #20]
 801ca0c:	0c1b      	lsrs	r3, r3, #16
 801ca0e:	b2db      	uxtb	r3, r3
 801ca10:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca12:	697b      	ldr	r3, [r7, #20]
 801ca14:	0a1b      	lsrs	r3, r3, #8
 801ca16:	b2db      	uxtb	r3, r3
 801ca18:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca1a:	697b      	ldr	r3, [r7, #20]
 801ca1c:	b2db      	uxtb	r3, r3
 801ca1e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	7d1b      	ldrb	r3, [r3, #20]
 801ca24:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca26:	7cfb      	ldrb	r3, [r7, #19]
 801ca28:	b29a      	uxth	r2, r3
 801ca2a:	f107 0308 	add.w	r3, r7, #8
 801ca2e:	4619      	mov	r1, r3
 801ca30:	208b      	movs	r0, #139	; 0x8b
 801ca32:	f000 fa41 	bl	801ceb8 <SUBGRF_WriteCommand>
        break;
 801ca36:	e039      	b.n	801caac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ca38:	2304      	movs	r3, #4
 801ca3a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	7e1b      	ldrb	r3, [r3, #24]
 801ca40:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	7e5b      	ldrb	r3, [r3, #25]
 801ca46:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	7e9b      	ldrb	r3, [r3, #26]
 801ca4c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	7edb      	ldrb	r3, [r3, #27]
 801ca52:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca54:	7cfb      	ldrb	r3, [r7, #19]
 801ca56:	b29a      	uxth	r2, r3
 801ca58:	f107 0308 	add.w	r3, r7, #8
 801ca5c:	4619      	mov	r1, r3
 801ca5e:	208b      	movs	r0, #139	; 0x8b
 801ca60:	f000 fa2a 	bl	801ceb8 <SUBGRF_WriteCommand>

        break;
 801ca64:	e022      	b.n	801caac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ca66:	2305      	movs	r3, #5
 801ca68:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	685b      	ldr	r3, [r3, #4]
 801ca6e:	4a14      	ldr	r2, [pc, #80]	; (801cac0 <SUBGRF_SetModulationParams+0x19c>)
 801ca70:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca74:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	0c1b      	lsrs	r3, r3, #16
 801ca7a:	b2db      	uxtb	r3, r3
 801ca7c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca7e:	697b      	ldr	r3, [r7, #20]
 801ca80:	0a1b      	lsrs	r3, r3, #8
 801ca82:	b2db      	uxtb	r3, r3
 801ca84:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca86:	697b      	ldr	r3, [r7, #20]
 801ca88:	b2db      	uxtb	r3, r3
 801ca8a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	7b1b      	ldrb	r3, [r3, #12]
 801ca90:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	7b5b      	ldrb	r3, [r3, #13]
 801ca96:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca98:	7cfb      	ldrb	r3, [r7, #19]
 801ca9a:	b29a      	uxth	r2, r3
 801ca9c:	f107 0308 	add.w	r3, r7, #8
 801caa0:	4619      	mov	r1, r3
 801caa2:	208b      	movs	r0, #139	; 0x8b
 801caa4:	f000 fa08 	bl	801ceb8 <SUBGRF_WriteCommand>
        break;
 801caa8:	e000      	b.n	801caac <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801caaa:	bf00      	nop
    }
}
 801caac:	bf00      	nop
 801caae:	3718      	adds	r7, #24
 801cab0:	46bd      	mov	sp, r7
 801cab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801cab6:	bf00      	nop
 801cab8:	0801f558 	.word	0x0801f558
 801cabc:	2000242d 	.word	0x2000242d
 801cac0:	3d090000 	.word	0x3d090000
 801cac4:	01e84800 	.word	0x01e84800

0801cac8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b086      	sub	sp, #24
 801cacc:	af00      	add	r7, sp, #0
 801cace:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801cad0:	2300      	movs	r3, #0
 801cad2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cad4:	4a48      	ldr	r2, [pc, #288]	; (801cbf8 <SUBGRF_SetPacketParams+0x130>)
 801cad6:	f107 030c 	add.w	r3, r7, #12
 801cada:	ca07      	ldmia	r2, {r0, r1, r2}
 801cadc:	c303      	stmia	r3!, {r0, r1}
 801cade:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	781a      	ldrb	r2, [r3, #0]
 801cae4:	4b45      	ldr	r3, [pc, #276]	; (801cbfc <SUBGRF_SetPacketParams+0x134>)
 801cae6:	781b      	ldrb	r3, [r3, #0]
 801cae8:	429a      	cmp	r2, r3
 801caea:	d004      	beq.n	801caf6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	781b      	ldrb	r3, [r3, #0]
 801caf0:	4618      	mov	r0, r3
 801caf2:	f7ff fe23 	bl	801c73c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	781b      	ldrb	r3, [r3, #0]
 801cafa:	2b03      	cmp	r3, #3
 801cafc:	d878      	bhi.n	801cbf0 <SUBGRF_SetPacketParams+0x128>
 801cafe:	a201      	add	r2, pc, #4	; (adr r2, 801cb04 <SUBGRF_SetPacketParams+0x3c>)
 801cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb04:	0801cb15 	.word	0x0801cb15
 801cb08:	0801cba5 	.word	0x0801cba5
 801cb0c:	0801cb99 	.word	0x0801cb99
 801cb10:	0801cb15 	.word	0x0801cb15
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	7a5b      	ldrb	r3, [r3, #9]
 801cb18:	2bf1      	cmp	r3, #241	; 0xf1
 801cb1a:	d10a      	bne.n	801cb32 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cb1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cb20:	f7ff faae 	bl	801c080 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cb24:	f248 0005 	movw	r0, #32773	; 0x8005
 801cb28:	f7ff faca 	bl	801c0c0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cb2c:	2302      	movs	r3, #2
 801cb2e:	75bb      	strb	r3, [r7, #22]
 801cb30:	e011      	b.n	801cb56 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	7a5b      	ldrb	r3, [r3, #9]
 801cb36:	2bf2      	cmp	r3, #242	; 0xf2
 801cb38:	d10a      	bne.n	801cb50 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801cb3a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801cb3e:	f7ff fa9f 	bl	801c080 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cb42:	f241 0021 	movw	r0, #4129	; 0x1021
 801cb46:	f7ff fabb 	bl	801c0c0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cb4a:	2306      	movs	r3, #6
 801cb4c:	75bb      	strb	r3, [r7, #22]
 801cb4e:	e002      	b.n	801cb56 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	7a5b      	ldrb	r3, [r3, #9]
 801cb54:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cb56:	2309      	movs	r3, #9
 801cb58:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	885b      	ldrh	r3, [r3, #2]
 801cb5e:	0a1b      	lsrs	r3, r3, #8
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	b2db      	uxtb	r3, r3
 801cb64:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	885b      	ldrh	r3, [r3, #2]
 801cb6a:	b2db      	uxtb	r3, r3
 801cb6c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	791b      	ldrb	r3, [r3, #4]
 801cb72:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	795b      	ldrb	r3, [r3, #5]
 801cb78:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	799b      	ldrb	r3, [r3, #6]
 801cb7e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	79db      	ldrb	r3, [r3, #7]
 801cb84:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	7a1b      	ldrb	r3, [r3, #8]
 801cb8a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cb8c:	7dbb      	ldrb	r3, [r7, #22]
 801cb8e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	7a9b      	ldrb	r3, [r3, #10]
 801cb94:	753b      	strb	r3, [r7, #20]
        break;
 801cb96:	e022      	b.n	801cbde <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cb98:	2301      	movs	r3, #1
 801cb9a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	7b1b      	ldrb	r3, [r3, #12]
 801cba0:	733b      	strb	r3, [r7, #12]
        break;
 801cba2:	e01c      	b.n	801cbde <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cba4:	2306      	movs	r3, #6
 801cba6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	89db      	ldrh	r3, [r3, #14]
 801cbac:	0a1b      	lsrs	r3, r3, #8
 801cbae:	b29b      	uxth	r3, r3
 801cbb0:	b2db      	uxtb	r3, r3
 801cbb2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	89db      	ldrh	r3, [r3, #14]
 801cbb8:	b2db      	uxtb	r3, r3
 801cbba:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	7c1a      	ldrb	r2, [r3, #16]
 801cbc0:	4b0f      	ldr	r3, [pc, #60]	; (801cc00 <SUBGRF_SetPacketParams+0x138>)
 801cbc2:	4611      	mov	r1, r2
 801cbc4:	7019      	strb	r1, [r3, #0]
 801cbc6:	4613      	mov	r3, r2
 801cbc8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	7c5b      	ldrb	r3, [r3, #17]
 801cbce:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	7c9b      	ldrb	r3, [r3, #18]
 801cbd4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	7cdb      	ldrb	r3, [r3, #19]
 801cbda:	747b      	strb	r3, [r7, #17]
        break;
 801cbdc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cbde:	7dfb      	ldrb	r3, [r7, #23]
 801cbe0:	b29a      	uxth	r2, r3
 801cbe2:	f107 030c 	add.w	r3, r7, #12
 801cbe6:	4619      	mov	r1, r3
 801cbe8:	208c      	movs	r0, #140	; 0x8c
 801cbea:	f000 f965 	bl	801ceb8 <SUBGRF_WriteCommand>
 801cbee:	e000      	b.n	801cbf2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801cbf0:	bf00      	nop
}
 801cbf2:	3718      	adds	r7, #24
 801cbf4:	46bd      	mov	sp, r7
 801cbf6:	bd80      	pop	{r7, pc}
 801cbf8:	0801f560 	.word	0x0801f560
 801cbfc:	2000242d 	.word	0x2000242d
 801cc00:	2000242e 	.word	0x2000242e

0801cc04 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b084      	sub	sp, #16
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	4603      	mov	r3, r0
 801cc0c:	460a      	mov	r2, r1
 801cc0e:	71fb      	strb	r3, [r7, #7]
 801cc10:	4613      	mov	r3, r2
 801cc12:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cc14:	79fb      	ldrb	r3, [r7, #7]
 801cc16:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cc18:	79bb      	ldrb	r3, [r7, #6]
 801cc1a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cc1c:	f107 030c 	add.w	r3, r7, #12
 801cc20:	2202      	movs	r2, #2
 801cc22:	4619      	mov	r1, r3
 801cc24:	208f      	movs	r0, #143	; 0x8f
 801cc26:	f000 f947 	bl	801ceb8 <SUBGRF_WriteCommand>
}
 801cc2a:	bf00      	nop
 801cc2c:	3710      	adds	r7, #16
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	bd80      	pop	{r7, pc}

0801cc32 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cc32:	b580      	push	{r7, lr}
 801cc34:	b082      	sub	sp, #8
 801cc36:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cc38:	2300      	movs	r3, #0
 801cc3a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cc3c:	1d3b      	adds	r3, r7, #4
 801cc3e:	2201      	movs	r2, #1
 801cc40:	4619      	mov	r1, r3
 801cc42:	2015      	movs	r0, #21
 801cc44:	f000 f95a 	bl	801cefc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cc48:	793b      	ldrb	r3, [r7, #4]
 801cc4a:	425b      	negs	r3, r3
 801cc4c:	105b      	asrs	r3, r3, #1
 801cc4e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cc50:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cc54:	4618      	mov	r0, r3
 801cc56:	3708      	adds	r7, #8
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	bd80      	pop	{r7, pc}

0801cc5c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b084      	sub	sp, #16
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]
 801cc64:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cc66:	f107 030c 	add.w	r3, r7, #12
 801cc6a:	2202      	movs	r2, #2
 801cc6c:	4619      	mov	r1, r3
 801cc6e:	2013      	movs	r0, #19
 801cc70:	f000 f944 	bl	801cefc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cc74:	f7ff fd7e 	bl	801c774 <SUBGRF_GetPacketType>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	2b01      	cmp	r3, #1
 801cc7c:	d10d      	bne.n	801cc9a <SUBGRF_GetRxBufferStatus+0x3e>
 801cc7e:	4b0c      	ldr	r3, [pc, #48]	; (801ccb0 <SUBGRF_GetRxBufferStatus+0x54>)
 801cc80:	781b      	ldrb	r3, [r3, #0]
 801cc82:	b2db      	uxtb	r3, r3
 801cc84:	2b01      	cmp	r3, #1
 801cc86:	d108      	bne.n	801cc9a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cc88:	f240 7002 	movw	r0, #1794	; 0x702
 801cc8c:	f000 f878 	bl	801cd80 <SUBGRF_ReadRegister>
 801cc90:	4603      	mov	r3, r0
 801cc92:	461a      	mov	r2, r3
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	701a      	strb	r2, [r3, #0]
 801cc98:	e002      	b.n	801cca0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cc9a:	7b3a      	ldrb	r2, [r7, #12]
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cca0:	7b7a      	ldrb	r2, [r7, #13]
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	701a      	strb	r2, [r3, #0]
}
 801cca6:	bf00      	nop
 801cca8:	3710      	adds	r7, #16
 801ccaa:	46bd      	mov	sp, r7
 801ccac:	bd80      	pop	{r7, pc}
 801ccae:	bf00      	nop
 801ccb0:	2000242e 	.word	0x2000242e

0801ccb4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b084      	sub	sp, #16
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801ccbc:	f107 030c 	add.w	r3, r7, #12
 801ccc0:	2203      	movs	r2, #3
 801ccc2:	4619      	mov	r1, r3
 801ccc4:	2014      	movs	r0, #20
 801ccc6:	f000 f919 	bl	801cefc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801ccca:	f7ff fd53 	bl	801c774 <SUBGRF_GetPacketType>
 801ccce:	4603      	mov	r3, r0
 801ccd0:	461a      	mov	r2, r3
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	781b      	ldrb	r3, [r3, #0]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d002      	beq.n	801cce4 <SUBGRF_GetPacketStatus+0x30>
 801ccde:	2b01      	cmp	r3, #1
 801cce0:	d013      	beq.n	801cd0a <SUBGRF_GetPacketStatus+0x56>
 801cce2:	e02a      	b.n	801cd3a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cce4:	7b3a      	ldrb	r2, [r7, #12]
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ccea:	7b7b      	ldrb	r3, [r7, #13]
 801ccec:	425b      	negs	r3, r3
 801ccee:	105b      	asrs	r3, r3, #1
 801ccf0:	b25a      	sxtb	r2, r3
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ccf6:	7bbb      	ldrb	r3, [r7, #14]
 801ccf8:	425b      	negs	r3, r3
 801ccfa:	105b      	asrs	r3, r3, #1
 801ccfc:	b25a      	sxtb	r2, r3
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	2200      	movs	r2, #0
 801cd06:	609a      	str	r2, [r3, #8]
            break;
 801cd08:	e020      	b.n	801cd4c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801cd0a:	7b3b      	ldrb	r3, [r7, #12]
 801cd0c:	425b      	negs	r3, r3
 801cd0e:	105b      	asrs	r3, r3, #1
 801cd10:	b25a      	sxtb	r2, r3
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801cd16:	7b7b      	ldrb	r3, [r7, #13]
 801cd18:	b25b      	sxtb	r3, r3
 801cd1a:	3302      	adds	r3, #2
 801cd1c:	109b      	asrs	r3, r3, #2
 801cd1e:	b25a      	sxtb	r2, r3
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801cd24:	7bbb      	ldrb	r3, [r7, #14]
 801cd26:	425b      	negs	r3, r3
 801cd28:	105b      	asrs	r3, r3, #1
 801cd2a:	b25a      	sxtb	r2, r3
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801cd30:	4b08      	ldr	r3, [pc, #32]	; (801cd54 <SUBGRF_GetPacketStatus+0xa0>)
 801cd32:	681a      	ldr	r2, [r3, #0]
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	611a      	str	r2, [r3, #16]
            break;
 801cd38:	e008      	b.n	801cd4c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801cd3a:	2214      	movs	r2, #20
 801cd3c:	2100      	movs	r1, #0
 801cd3e:	6878      	ldr	r0, [r7, #4]
 801cd40:	f000 fbf3 	bl	801d52a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	220f      	movs	r2, #15
 801cd48:	701a      	strb	r2, [r3, #0]
            break;
 801cd4a:	bf00      	nop
    }
}
 801cd4c:	bf00      	nop
 801cd4e:	3710      	adds	r7, #16
 801cd50:	46bd      	mov	sp, r7
 801cd52:	bd80      	pop	{r7, pc}
 801cd54:	20002430 	.word	0x20002430

0801cd58 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b082      	sub	sp, #8
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	4603      	mov	r3, r0
 801cd60:	460a      	mov	r2, r1
 801cd62:	80fb      	strh	r3, [r7, #6]
 801cd64:	4613      	mov	r3, r2
 801cd66:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cd68:	1d7a      	adds	r2, r7, #5
 801cd6a:	88f9      	ldrh	r1, [r7, #6]
 801cd6c:	2301      	movs	r3, #1
 801cd6e:	4803      	ldr	r0, [pc, #12]	; (801cd7c <SUBGRF_WriteRegister+0x24>)
 801cd70:	f7ed f93e 	bl	8009ff0 <HAL_SUBGHZ_WriteRegisters>
}
 801cd74:	bf00      	nop
 801cd76:	3708      	adds	r7, #8
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}
 801cd7c:	200007ec 	.word	0x200007ec

0801cd80 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b084      	sub	sp, #16
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	4603      	mov	r3, r0
 801cd88:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cd8a:	f107 020f 	add.w	r2, r7, #15
 801cd8e:	88f9      	ldrh	r1, [r7, #6]
 801cd90:	2301      	movs	r3, #1
 801cd92:	4804      	ldr	r0, [pc, #16]	; (801cda4 <SUBGRF_ReadRegister+0x24>)
 801cd94:	f7ed f98b 	bl	800a0ae <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	3710      	adds	r7, #16
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
 801cda2:	bf00      	nop
 801cda4:	200007ec 	.word	0x200007ec

0801cda8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b086      	sub	sp, #24
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	4603      	mov	r3, r0
 801cdb0:	6039      	str	r1, [r7, #0]
 801cdb2:	80fb      	strh	r3, [r7, #6]
 801cdb4:	4613      	mov	r3, r2
 801cdb6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdb8:	f3ef 8310 	mrs	r3, PRIMASK
 801cdbc:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdc2:	b672      	cpsid	i
}
 801cdc4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cdc6:	88bb      	ldrh	r3, [r7, #4]
 801cdc8:	88f9      	ldrh	r1, [r7, #6]
 801cdca:	683a      	ldr	r2, [r7, #0]
 801cdcc:	4806      	ldr	r0, [pc, #24]	; (801cde8 <SUBGRF_WriteRegisters+0x40>)
 801cdce:	f7ed f90f 	bl	8009ff0 <HAL_SUBGHZ_WriteRegisters>
 801cdd2:	697b      	ldr	r3, [r7, #20]
 801cdd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdd6:	693b      	ldr	r3, [r7, #16]
 801cdd8:	f383 8810 	msr	PRIMASK, r3
}
 801cddc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cdde:	bf00      	nop
 801cde0:	3718      	adds	r7, #24
 801cde2:	46bd      	mov	sp, r7
 801cde4:	bd80      	pop	{r7, pc}
 801cde6:	bf00      	nop
 801cde8:	200007ec 	.word	0x200007ec

0801cdec <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b086      	sub	sp, #24
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	4603      	mov	r3, r0
 801cdf4:	6039      	str	r1, [r7, #0]
 801cdf6:	80fb      	strh	r3, [r7, #6]
 801cdf8:	4613      	mov	r3, r2
 801cdfa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdfc:	f3ef 8310 	mrs	r3, PRIMASK
 801ce00:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce06:	b672      	cpsid	i
}
 801ce08:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801ce0a:	88bb      	ldrh	r3, [r7, #4]
 801ce0c:	88f9      	ldrh	r1, [r7, #6]
 801ce0e:	683a      	ldr	r2, [r7, #0]
 801ce10:	4806      	ldr	r0, [pc, #24]	; (801ce2c <SUBGRF_ReadRegisters+0x40>)
 801ce12:	f7ed f94c 	bl	800a0ae <HAL_SUBGHZ_ReadRegisters>
 801ce16:	697b      	ldr	r3, [r7, #20]
 801ce18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce1a:	693b      	ldr	r3, [r7, #16]
 801ce1c:	f383 8810 	msr	PRIMASK, r3
}
 801ce20:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce22:	bf00      	nop
 801ce24:	3718      	adds	r7, #24
 801ce26:	46bd      	mov	sp, r7
 801ce28:	bd80      	pop	{r7, pc}
 801ce2a:	bf00      	nop
 801ce2c:	200007ec 	.word	0x200007ec

0801ce30 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b086      	sub	sp, #24
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	4603      	mov	r3, r0
 801ce38:	6039      	str	r1, [r7, #0]
 801ce3a:	71fb      	strb	r3, [r7, #7]
 801ce3c:	4613      	mov	r3, r2
 801ce3e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce40:	f3ef 8310 	mrs	r3, PRIMASK
 801ce44:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce4a:	b672      	cpsid	i
}
 801ce4c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ce4e:	79bb      	ldrb	r3, [r7, #6]
 801ce50:	b29b      	uxth	r3, r3
 801ce52:	79f9      	ldrb	r1, [r7, #7]
 801ce54:	683a      	ldr	r2, [r7, #0]
 801ce56:	4806      	ldr	r0, [pc, #24]	; (801ce70 <SUBGRF_WriteBuffer+0x40>)
 801ce58:	f7ed fa3d 	bl	800a2d6 <HAL_SUBGHZ_WriteBuffer>
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce60:	693b      	ldr	r3, [r7, #16]
 801ce62:	f383 8810 	msr	PRIMASK, r3
}
 801ce66:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce68:	bf00      	nop
 801ce6a:	3718      	adds	r7, #24
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}
 801ce70:	200007ec 	.word	0x200007ec

0801ce74 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce74:	b580      	push	{r7, lr}
 801ce76:	b086      	sub	sp, #24
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	6039      	str	r1, [r7, #0]
 801ce7e:	71fb      	strb	r3, [r7, #7]
 801ce80:	4613      	mov	r3, r2
 801ce82:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce84:	f3ef 8310 	mrs	r3, PRIMASK
 801ce88:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce8e:	b672      	cpsid	i
}
 801ce90:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ce92:	79bb      	ldrb	r3, [r7, #6]
 801ce94:	b29b      	uxth	r3, r3
 801ce96:	79f9      	ldrb	r1, [r7, #7]
 801ce98:	683a      	ldr	r2, [r7, #0]
 801ce9a:	4806      	ldr	r0, [pc, #24]	; (801ceb4 <SUBGRF_ReadBuffer+0x40>)
 801ce9c:	f7ed fa6e 	bl	800a37c <HAL_SUBGHZ_ReadBuffer>
 801cea0:	697b      	ldr	r3, [r7, #20]
 801cea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cea4:	693b      	ldr	r3, [r7, #16]
 801cea6:	f383 8810 	msr	PRIMASK, r3
}
 801ceaa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ceac:	bf00      	nop
 801ceae:	3718      	adds	r7, #24
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd80      	pop	{r7, pc}
 801ceb4:	200007ec 	.word	0x200007ec

0801ceb8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b086      	sub	sp, #24
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	4603      	mov	r3, r0
 801cec0:	6039      	str	r1, [r7, #0]
 801cec2:	71fb      	strb	r3, [r7, #7]
 801cec4:	4613      	mov	r3, r2
 801cec6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cec8:	f3ef 8310 	mrs	r3, PRIMASK
 801cecc:	60fb      	str	r3, [r7, #12]
  return(result);
 801cece:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ced0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ced2:	b672      	cpsid	i
}
 801ced4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ced6:	88bb      	ldrh	r3, [r7, #4]
 801ced8:	79f9      	ldrb	r1, [r7, #7]
 801ceda:	683a      	ldr	r2, [r7, #0]
 801cedc:	4806      	ldr	r0, [pc, #24]	; (801cef8 <SUBGRF_WriteCommand+0x40>)
 801cede:	f7ed f947 	bl	800a170 <HAL_SUBGHZ_ExecSetCmd>
 801cee2:	697b      	ldr	r3, [r7, #20]
 801cee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cee6:	693b      	ldr	r3, [r7, #16]
 801cee8:	f383 8810 	msr	PRIMASK, r3
}
 801ceec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ceee:	bf00      	nop
 801cef0:	3718      	adds	r7, #24
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
 801cef6:	bf00      	nop
 801cef8:	200007ec 	.word	0x200007ec

0801cefc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b086      	sub	sp, #24
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	4603      	mov	r3, r0
 801cf04:	6039      	str	r1, [r7, #0]
 801cf06:	71fb      	strb	r3, [r7, #7]
 801cf08:	4613      	mov	r3, r2
 801cf0a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf0c:	f3ef 8310 	mrs	r3, PRIMASK
 801cf10:	60fb      	str	r3, [r7, #12]
  return(result);
 801cf12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cf14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf16:	b672      	cpsid	i
}
 801cf18:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801cf1a:	88bb      	ldrh	r3, [r7, #4]
 801cf1c:	79f9      	ldrb	r1, [r7, #7]
 801cf1e:	683a      	ldr	r2, [r7, #0]
 801cf20:	4806      	ldr	r0, [pc, #24]	; (801cf3c <SUBGRF_ReadCommand+0x40>)
 801cf22:	f7ed f984 	bl	800a22e <HAL_SUBGHZ_ExecGetCmd>
 801cf26:	697b      	ldr	r3, [r7, #20]
 801cf28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf2a:	693b      	ldr	r3, [r7, #16]
 801cf2c:	f383 8810 	msr	PRIMASK, r3
}
 801cf30:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cf32:	bf00      	nop
 801cf34:	3718      	adds	r7, #24
 801cf36:	46bd      	mov	sp, r7
 801cf38:	bd80      	pop	{r7, pc}
 801cf3a:	bf00      	nop
 801cf3c:	200007ec 	.word	0x200007ec

0801cf40 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b084      	sub	sp, #16
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	4603      	mov	r3, r0
 801cf48:	460a      	mov	r2, r1
 801cf4a:	71fb      	strb	r3, [r7, #7]
 801cf4c:	4613      	mov	r3, r2
 801cf4e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801cf50:	2301      	movs	r3, #1
 801cf52:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801cf54:	79bb      	ldrb	r3, [r7, #6]
 801cf56:	2b01      	cmp	r3, #1
 801cf58:	d10d      	bne.n	801cf76 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801cf5a:	79fb      	ldrb	r3, [r7, #7]
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	d104      	bne.n	801cf6a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801cf60:	2302      	movs	r3, #2
 801cf62:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cf64:	2004      	movs	r0, #4
 801cf66:	f000 f8df 	bl	801d128 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cf6a:	79fb      	ldrb	r3, [r7, #7]
 801cf6c:	2b02      	cmp	r3, #2
 801cf6e:	d107      	bne.n	801cf80 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cf70:	2303      	movs	r3, #3
 801cf72:	73fb      	strb	r3, [r7, #15]
 801cf74:	e004      	b.n	801cf80 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801cf76:	79bb      	ldrb	r3, [r7, #6]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d101      	bne.n	801cf80 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cf7c:	2301      	movs	r3, #1
 801cf7e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cf80:	7bfb      	ldrb	r3, [r7, #15]
 801cf82:	4618      	mov	r0, r3
 801cf84:	f7f1 f825 	bl	800dfd2 <RBI_ConfigRFSwitch>
}
 801cf88:	bf00      	nop
 801cf8a:	3710      	adds	r7, #16
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	bd80      	pop	{r7, pc}

0801cf90 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cf90:	b580      	push	{r7, lr}
 801cf92:	b084      	sub	sp, #16
 801cf94:	af00      	add	r7, sp, #0
 801cf96:	4603      	mov	r3, r0
 801cf98:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cf9a:	2301      	movs	r3, #1
 801cf9c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cf9e:	f7f1 f826 	bl	800dfee <RBI_GetTxConfig>
 801cfa2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cfa4:	68bb      	ldr	r3, [r7, #8]
 801cfa6:	2b02      	cmp	r3, #2
 801cfa8:	d016      	beq.n	801cfd8 <SUBGRF_SetRfTxPower+0x48>
 801cfaa:	68bb      	ldr	r3, [r7, #8]
 801cfac:	2b02      	cmp	r3, #2
 801cfae:	dc16      	bgt.n	801cfde <SUBGRF_SetRfTxPower+0x4e>
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d003      	beq.n	801cfbe <SUBGRF_SetRfTxPower+0x2e>
 801cfb6:	68bb      	ldr	r3, [r7, #8]
 801cfb8:	2b01      	cmp	r3, #1
 801cfba:	d00a      	beq.n	801cfd2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cfbc:	e00f      	b.n	801cfde <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cfbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cfc2:	2b0f      	cmp	r3, #15
 801cfc4:	dd02      	ble.n	801cfcc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cfc6:	2302      	movs	r3, #2
 801cfc8:	73fb      	strb	r3, [r7, #15]
            break;
 801cfca:	e009      	b.n	801cfe0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cfcc:	2301      	movs	r3, #1
 801cfce:	73fb      	strb	r3, [r7, #15]
            break;
 801cfd0:	e006      	b.n	801cfe0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cfd2:	2301      	movs	r3, #1
 801cfd4:	73fb      	strb	r3, [r7, #15]
            break;
 801cfd6:	e003      	b.n	801cfe0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cfd8:	2302      	movs	r3, #2
 801cfda:	73fb      	strb	r3, [r7, #15]
            break;
 801cfdc:	e000      	b.n	801cfe0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801cfde:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cfe0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cfe4:	7bfb      	ldrb	r3, [r7, #15]
 801cfe6:	2202      	movs	r2, #2
 801cfe8:	4618      	mov	r0, r3
 801cfea:	f7ff fbcd 	bl	801c788 <SUBGRF_SetTxParams>

    return paSelect;
 801cfee:	7bfb      	ldrb	r3, [r7, #15]
}
 801cff0:	4618      	mov	r0, r3
 801cff2:	3710      	adds	r7, #16
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}

0801cff8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cff8:	b480      	push	{r7}
 801cffa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cffc:	2301      	movs	r3, #1
}
 801cffe:	4618      	mov	r0, r3
 801d000:	46bd      	mov	sp, r7
 801d002:	bc80      	pop	{r7}
 801d004:	4770      	bx	lr
	...

0801d008 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b082      	sub	sp, #8
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801d010:	4b03      	ldr	r3, [pc, #12]	; (801d020 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	2001      	movs	r0, #1
 801d016:	4798      	blx	r3
}
 801d018:	bf00      	nop
 801d01a:	3708      	adds	r7, #8
 801d01c:	46bd      	mov	sp, r7
 801d01e:	bd80      	pop	{r7, pc}
 801d020:	20002438 	.word	0x20002438

0801d024 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b082      	sub	sp, #8
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801d02c:	4b03      	ldr	r3, [pc, #12]	; (801d03c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	2002      	movs	r0, #2
 801d032:	4798      	blx	r3
}
 801d034:	bf00      	nop
 801d036:	3708      	adds	r7, #8
 801d038:	46bd      	mov	sp, r7
 801d03a:	bd80      	pop	{r7, pc}
 801d03c:	20002438 	.word	0x20002438

0801d040 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d048:	4b03      	ldr	r3, [pc, #12]	; (801d058 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	2040      	movs	r0, #64	; 0x40
 801d04e:	4798      	blx	r3
}
 801d050:	bf00      	nop
 801d052:	3708      	adds	r7, #8
 801d054:	46bd      	mov	sp, r7
 801d056:	bd80      	pop	{r7, pc}
 801d058:	20002438 	.word	0x20002438

0801d05c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b082      	sub	sp, #8
 801d060:	af00      	add	r7, sp, #0
 801d062:	6078      	str	r0, [r7, #4]
 801d064:	460b      	mov	r3, r1
 801d066:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d068:	78fb      	ldrb	r3, [r7, #3]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d002      	beq.n	801d074 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d06e:	2b01      	cmp	r3, #1
 801d070:	d005      	beq.n	801d07e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d072:	e00a      	b.n	801d08a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d074:	4b07      	ldr	r3, [pc, #28]	; (801d094 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	2080      	movs	r0, #128	; 0x80
 801d07a:	4798      	blx	r3
            break;
 801d07c:	e005      	b.n	801d08a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d07e:	4b05      	ldr	r3, [pc, #20]	; (801d094 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d086:	4798      	blx	r3
            break;
 801d088:	bf00      	nop
    }
}
 801d08a:	bf00      	nop
 801d08c:	3708      	adds	r7, #8
 801d08e:	46bd      	mov	sp, r7
 801d090:	bd80      	pop	{r7, pc}
 801d092:	bf00      	nop
 801d094:	20002438 	.word	0x20002438

0801d098 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b082      	sub	sp, #8
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d0a0:	4b04      	ldr	r3, [pc, #16]	; (801d0b4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d0a8:	4798      	blx	r3
}
 801d0aa:	bf00      	nop
 801d0ac:	3708      	adds	r7, #8
 801d0ae:	46bd      	mov	sp, r7
 801d0b0:	bd80      	pop	{r7, pc}
 801d0b2:	bf00      	nop
 801d0b4:	20002438 	.word	0x20002438

0801d0b8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	b082      	sub	sp, #8
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d0c0:	4b03      	ldr	r3, [pc, #12]	; (801d0d0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	2020      	movs	r0, #32
 801d0c6:	4798      	blx	r3
}
 801d0c8:	bf00      	nop
 801d0ca:	3708      	adds	r7, #8
 801d0cc:	46bd      	mov	sp, r7
 801d0ce:	bd80      	pop	{r7, pc}
 801d0d0:	20002438 	.word	0x20002438

0801d0d4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b082      	sub	sp, #8
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d0dc:	4b03      	ldr	r3, [pc, #12]	; (801d0ec <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	2004      	movs	r0, #4
 801d0e2:	4798      	blx	r3
}
 801d0e4:	bf00      	nop
 801d0e6:	3708      	adds	r7, #8
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	20002438 	.word	0x20002438

0801d0f0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b082      	sub	sp, #8
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d0f8:	4b03      	ldr	r3, [pc, #12]	; (801d108 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	2008      	movs	r0, #8
 801d0fe:	4798      	blx	r3
}
 801d100:	bf00      	nop
 801d102:	3708      	adds	r7, #8
 801d104:	46bd      	mov	sp, r7
 801d106:	bd80      	pop	{r7, pc}
 801d108:	20002438 	.word	0x20002438

0801d10c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b082      	sub	sp, #8
 801d110:	af00      	add	r7, sp, #0
 801d112:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d114:	4b03      	ldr	r3, [pc, #12]	; (801d124 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	2010      	movs	r0, #16
 801d11a:	4798      	blx	r3
}
 801d11c:	bf00      	nop
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}
 801d124:	20002438 	.word	0x20002438

0801d128 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d128:	b580      	push	{r7, lr}
 801d12a:	b084      	sub	sp, #16
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	4603      	mov	r3, r0
 801d130:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d132:	f7f0 ff6a 	bl	800e00a <RBI_IsDCDC>
 801d136:	4603      	mov	r3, r0
 801d138:	2b01      	cmp	r3, #1
 801d13a:	d112      	bne.n	801d162 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d13c:	f640 1023 	movw	r0, #2339	; 0x923
 801d140:	f7ff fe1e 	bl	801cd80 <SUBGRF_ReadRegister>
 801d144:	4603      	mov	r3, r0
 801d146:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d148:	7bfb      	ldrb	r3, [r7, #15]
 801d14a:	f023 0306 	bic.w	r3, r3, #6
 801d14e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d150:	7bfa      	ldrb	r2, [r7, #15]
 801d152:	79fb      	ldrb	r3, [r7, #7]
 801d154:	4313      	orrs	r3, r2
 801d156:	b2db      	uxtb	r3, r3
 801d158:	4619      	mov	r1, r3
 801d15a:	f640 1023 	movw	r0, #2339	; 0x923
 801d15e:	f7ff fdfb 	bl	801cd58 <SUBGRF_WriteRegister>
  }
}
 801d162:	bf00      	nop
 801d164:	3710      	adds	r7, #16
 801d166:	46bd      	mov	sp, r7
 801d168:	bd80      	pop	{r7, pc}
	...

0801d16c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d16c:	b480      	push	{r7}
 801d16e:	b085      	sub	sp, #20
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	2b00      	cmp	r3, #0
 801d178:	d101      	bne.n	801d17e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d17a:	231f      	movs	r3, #31
 801d17c:	e016      	b.n	801d1ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d17e:	2300      	movs	r3, #0
 801d180:	73fb      	strb	r3, [r7, #15]
 801d182:	e00f      	b.n	801d1a4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d184:	7bfb      	ldrb	r3, [r7, #15]
 801d186:	4a0c      	ldr	r2, [pc, #48]	; (801d1b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d18c:	687a      	ldr	r2, [r7, #4]
 801d18e:	429a      	cmp	r2, r3
 801d190:	d205      	bcs.n	801d19e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d192:	7bfb      	ldrb	r3, [r7, #15]
 801d194:	4a08      	ldr	r2, [pc, #32]	; (801d1b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d196:	00db      	lsls	r3, r3, #3
 801d198:	4413      	add	r3, r2
 801d19a:	791b      	ldrb	r3, [r3, #4]
 801d19c:	e006      	b.n	801d1ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d19e:	7bfb      	ldrb	r3, [r7, #15]
 801d1a0:	3301      	adds	r3, #1
 801d1a2:	73fb      	strb	r3, [r7, #15]
 801d1a4:	7bfb      	ldrb	r3, [r7, #15]
 801d1a6:	2b15      	cmp	r3, #21
 801d1a8:	d9ec      	bls.n	801d184 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801d1aa:	e7fe      	b.n	801d1aa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	3714      	adds	r7, #20
 801d1b0:	46bd      	mov	sp, r7
 801d1b2:	bc80      	pop	{r7}
 801d1b4:	4770      	bx	lr
 801d1b6:	bf00      	nop
 801d1b8:	0801fac4 	.word	0x0801fac4

0801d1bc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d1bc:	b580      	push	{r7, lr}
 801d1be:	b08a      	sub	sp, #40	; 0x28
 801d1c0:	af00      	add	r7, sp, #0
 801d1c2:	6078      	str	r0, [r7, #4]
 801d1c4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d1c6:	4b35      	ldr	r3, [pc, #212]	; (801d29c <SUBGRF_GetCFO+0xe0>)
 801d1c8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d1ca:	f640 0007 	movw	r0, #2055	; 0x807
 801d1ce:	f7ff fdd7 	bl	801cd80 <SUBGRF_ReadRegister>
 801d1d2:	4603      	mov	r3, r0
 801d1d4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d1d6:	7ffb      	ldrb	r3, [r7, #31]
 801d1d8:	08db      	lsrs	r3, r3, #3
 801d1da:	b2db      	uxtb	r3, r3
 801d1dc:	f003 0303 	and.w	r3, r3, #3
 801d1e0:	3328      	adds	r3, #40	; 0x28
 801d1e2:	443b      	add	r3, r7
 801d1e4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d1e8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d1ea:	7ffb      	ldrb	r3, [r7, #31]
 801d1ec:	f003 0307 	and.w	r3, r3, #7
 801d1f0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801d1f2:	7fba      	ldrb	r2, [r7, #30]
 801d1f4:	7f7b      	ldrb	r3, [r7, #29]
 801d1f6:	3b01      	subs	r3, #1
 801d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 801d1fc:	461a      	mov	r2, r3
 801d1fe:	4b28      	ldr	r3, [pc, #160]	; (801d2a0 <SUBGRF_GetCFO+0xe4>)
 801d200:	fbb3 f3f2 	udiv	r3, r3, r2
 801d204:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d206:	69ba      	ldr	r2, [r7, #24]
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	fbb2 f3f3 	udiv	r3, r2, r3
 801d20e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d210:	2301      	movs	r3, #1
 801d212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d21a:	697a      	ldr	r2, [r7, #20]
 801d21c:	fb02 f303 	mul.w	r3, r2, r3
 801d220:	2b07      	cmp	r3, #7
 801d222:	d802      	bhi.n	801d22a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d224:	2302      	movs	r3, #2
 801d226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d22e:	697a      	ldr	r2, [r7, #20]
 801d230:	fb02 f303 	mul.w	r3, r2, r3
 801d234:	2b03      	cmp	r3, #3
 801d236:	d802      	bhi.n	801d23e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d238:	2304      	movs	r3, #4
 801d23a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d23e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d242:	69bb      	ldr	r3, [r7, #24]
 801d244:	fb02 f303 	mul.w	r3, r2, r3
 801d248:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d24a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d24e:	f7ff fd97 	bl	801cd80 <SUBGRF_ReadRegister>
 801d252:	4603      	mov	r3, r0
 801d254:	021b      	lsls	r3, r3, #8
 801d256:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d25a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d25c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d260:	f7ff fd8e 	bl	801cd80 <SUBGRF_ReadRegister>
 801d264:	4603      	mov	r3, r0
 801d266:	461a      	mov	r2, r3
 801d268:	6a3b      	ldr	r3, [r7, #32]
 801d26a:	4313      	orrs	r3, r2
 801d26c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d26e:	6a3b      	ldr	r3, [r7, #32]
 801d270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d274:	2b00      	cmp	r3, #0
 801d276:	d005      	beq.n	801d284 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d278:	6a3b      	ldr	r3, [r7, #32]
 801d27a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d27e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d282:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d284:	693b      	ldr	r3, [r7, #16]
 801d286:	095b      	lsrs	r3, r3, #5
 801d288:	6a3a      	ldr	r2, [r7, #32]
 801d28a:	fb02 f303 	mul.w	r3, r2, r3
 801d28e:	11da      	asrs	r2, r3, #7
 801d290:	683b      	ldr	r3, [r7, #0]
 801d292:	601a      	str	r2, [r3, #0]
}
 801d294:	bf00      	nop
 801d296:	3728      	adds	r7, #40	; 0x28
 801d298:	46bd      	mov	sp, r7
 801d29a:	bd80      	pop	{r7, pc}
 801d29c:	0c0a0804 	.word	0x0c0a0804
 801d2a0:	01e84800 	.word	0x01e84800

0801d2a4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801d2a4:	b480      	push	{r7}
 801d2a6:	b087      	sub	sp, #28
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	60b9      	str	r1, [r7, #8]
 801d2ae:	607a      	str	r2, [r7, #4]
 801d2b0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801d2b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d2ba:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801d2bc:	697b      	ldr	r3, [r7, #20]
}
 801d2be:	4618      	mov	r0, r3
 801d2c0:	371c      	adds	r7, #28
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	bc80      	pop	{r7}
 801d2c6:	4770      	bx	lr

0801d2c8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801d2c8:	b480      	push	{r7}
 801d2ca:	b087      	sub	sp, #28
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	60b9      	str	r1, [r7, #8]
 801d2d2:	607a      	str	r2, [r7, #4]
 801d2d4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801d2da:	f04f 33ff 	mov.w	r3, #4294967295
 801d2de:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801d2e0:	697b      	ldr	r3, [r7, #20]
}
 801d2e2:	4618      	mov	r0, r3
 801d2e4:	371c      	adds	r7, #28
 801d2e6:	46bd      	mov	sp, r7
 801d2e8:	bc80      	pop	{r7}
 801d2ea:	4770      	bx	lr

0801d2ec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801d2ec:	b480      	push	{r7}
 801d2ee:	b085      	sub	sp, #20
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	60f8      	str	r0, [r7, #12]
 801d2f4:	60b9      	str	r1, [r7, #8]
 801d2f6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801d2f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	3714      	adds	r7, #20
 801d300:	46bd      	mov	sp, r7
 801d302:	bc80      	pop	{r7}
 801d304:	4770      	bx	lr

0801d306 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801d306:	b480      	push	{r7}
 801d308:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801d30a:	bf00      	nop
 801d30c:	46bd      	mov	sp, r7
 801d30e:	bc80      	pop	{r7}
 801d310:	4770      	bx	lr

0801d312 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801d312:	b480      	push	{r7}
 801d314:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801d316:	2300      	movs	r3, #0
#endif
}
 801d318:	4618      	mov	r0, r3
 801d31a:	46bd      	mov	sp, r7
 801d31c:	bc80      	pop	{r7}
 801d31e:	4770      	bx	lr

0801d320 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801d320:	b480      	push	{r7}
 801d322:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801d324:	2300      	movs	r3, #0
#endif
}
 801d326:	4618      	mov	r0, r3
 801d328:	46bd      	mov	sp, r7
 801d32a:	bc80      	pop	{r7}
 801d32c:	4770      	bx	lr

0801d32e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801d32e:	b480      	push	{r7}
 801d330:	b083      	sub	sp, #12
 801d332:	af00      	add	r7, sp, #0
 801d334:	4603      	mov	r3, r0
 801d336:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801d338:	bf00      	nop
 801d33a:	370c      	adds	r7, #12
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bc80      	pop	{r7}
 801d340:	4770      	bx	lr

0801d342 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801d342:	b480      	push	{r7}
 801d344:	b087      	sub	sp, #28
 801d346:	af00      	add	r7, sp, #0
 801d348:	60f8      	str	r0, [r7, #12]
 801d34a:	460b      	mov	r3, r1
 801d34c:	607a      	str	r2, [r7, #4]
 801d34e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801d350:	f04f 33ff 	mov.w	r3, #4294967295
 801d354:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801d356:	697b      	ldr	r3, [r7, #20]
}
 801d358:	4618      	mov	r0, r3
 801d35a:	371c      	adds	r7, #28
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bc80      	pop	{r7}
 801d360:	4770      	bx	lr

0801d362 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d362:	b480      	push	{r7}
 801d364:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801d366:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bc80      	pop	{r7}
 801d370:	4770      	bx	lr

0801d372 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801d372:	b480      	push	{r7}
 801d374:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801d376:	bf00      	nop
 801d378:	46bd      	mov	sp, r7
 801d37a:	bc80      	pop	{r7}
 801d37c:	4770      	bx	lr

0801d37e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d37e:	b480      	push	{r7}
 801d380:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801d382:	bf00      	nop
 801d384:	46bd      	mov	sp, r7
 801d386:	bc80      	pop	{r7}
 801d388:	4770      	bx	lr

0801d38a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801d38a:	b480      	push	{r7}
 801d38c:	b083      	sub	sp, #12
 801d38e:	af00      	add	r7, sp, #0
 801d390:	4603      	mov	r3, r0
 801d392:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801d394:	bf00      	nop
 801d396:	370c      	adds	r7, #12
 801d398:	46bd      	mov	sp, r7
 801d39a:	bc80      	pop	{r7}
 801d39c:	4770      	bx	lr
	...

0801d3a0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d3a0:	b480      	push	{r7}
 801d3a2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d3a4:	4b04      	ldr	r3, [pc, #16]	; (801d3b8 <UTIL_LPM_Init+0x18>)
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d3aa:	4b04      	ldr	r3, [pc, #16]	; (801d3bc <UTIL_LPM_Init+0x1c>)
 801d3ac:	2200      	movs	r2, #0
 801d3ae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d3b0:	bf00      	nop
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	bc80      	pop	{r7}
 801d3b6:	4770      	bx	lr
 801d3b8:	2000243c 	.word	0x2000243c
 801d3bc:	20002440 	.word	0x20002440

0801d3c0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d3c0:	b480      	push	{r7}
 801d3c2:	b087      	sub	sp, #28
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
 801d3c8:	460b      	mov	r3, r1
 801d3ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3cc:	f3ef 8310 	mrs	r3, PRIMASK
 801d3d0:	613b      	str	r3, [r7, #16]
  return(result);
 801d3d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d3d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3d6:	b672      	cpsid	i
}
 801d3d8:	bf00      	nop
  
  switch( state )
 801d3da:	78fb      	ldrb	r3, [r7, #3]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d008      	beq.n	801d3f2 <UTIL_LPM_SetStopMode+0x32>
 801d3e0:	2b01      	cmp	r3, #1
 801d3e2:	d10e      	bne.n	801d402 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d3e4:	4b0d      	ldr	r3, [pc, #52]	; (801d41c <UTIL_LPM_SetStopMode+0x5c>)
 801d3e6:	681a      	ldr	r2, [r3, #0]
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	4313      	orrs	r3, r2
 801d3ec:	4a0b      	ldr	r2, [pc, #44]	; (801d41c <UTIL_LPM_SetStopMode+0x5c>)
 801d3ee:	6013      	str	r3, [r2, #0]
      break;
 801d3f0:	e008      	b.n	801d404 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	43da      	mvns	r2, r3
 801d3f6:	4b09      	ldr	r3, [pc, #36]	; (801d41c <UTIL_LPM_SetStopMode+0x5c>)
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	4013      	ands	r3, r2
 801d3fc:	4a07      	ldr	r2, [pc, #28]	; (801d41c <UTIL_LPM_SetStopMode+0x5c>)
 801d3fe:	6013      	str	r3, [r2, #0]
      break;
 801d400:	e000      	b.n	801d404 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d402:	bf00      	nop
 801d404:	697b      	ldr	r3, [r7, #20]
 801d406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	f383 8810 	msr	PRIMASK, r3
}
 801d40e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d410:	bf00      	nop
 801d412:	371c      	adds	r7, #28
 801d414:	46bd      	mov	sp, r7
 801d416:	bc80      	pop	{r7}
 801d418:	4770      	bx	lr
 801d41a:	bf00      	nop
 801d41c:	2000243c 	.word	0x2000243c

0801d420 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d420:	b480      	push	{r7}
 801d422:	b087      	sub	sp, #28
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	460b      	mov	r3, r1
 801d42a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d42c:	f3ef 8310 	mrs	r3, PRIMASK
 801d430:	613b      	str	r3, [r7, #16]
  return(result);
 801d432:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d436:	b672      	cpsid	i
}
 801d438:	bf00      	nop
  
  switch(state)
 801d43a:	78fb      	ldrb	r3, [r7, #3]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d008      	beq.n	801d452 <UTIL_LPM_SetOffMode+0x32>
 801d440:	2b01      	cmp	r3, #1
 801d442:	d10e      	bne.n	801d462 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d444:	4b0d      	ldr	r3, [pc, #52]	; (801d47c <UTIL_LPM_SetOffMode+0x5c>)
 801d446:	681a      	ldr	r2, [r3, #0]
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	4313      	orrs	r3, r2
 801d44c:	4a0b      	ldr	r2, [pc, #44]	; (801d47c <UTIL_LPM_SetOffMode+0x5c>)
 801d44e:	6013      	str	r3, [r2, #0]
      break;
 801d450:	e008      	b.n	801d464 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	43da      	mvns	r2, r3
 801d456:	4b09      	ldr	r3, [pc, #36]	; (801d47c <UTIL_LPM_SetOffMode+0x5c>)
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	4013      	ands	r3, r2
 801d45c:	4a07      	ldr	r2, [pc, #28]	; (801d47c <UTIL_LPM_SetOffMode+0x5c>)
 801d45e:	6013      	str	r3, [r2, #0]
      break;
 801d460:	e000      	b.n	801d464 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d462:	bf00      	nop
 801d464:	697b      	ldr	r3, [r7, #20]
 801d466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	f383 8810 	msr	PRIMASK, r3
}
 801d46e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d470:	bf00      	nop
 801d472:	371c      	adds	r7, #28
 801d474:	46bd      	mov	sp, r7
 801d476:	bc80      	pop	{r7}
 801d478:	4770      	bx	lr
 801d47a:	bf00      	nop
 801d47c:	20002440 	.word	0x20002440

0801d480 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b084      	sub	sp, #16
 801d484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d486:	f3ef 8310 	mrs	r3, PRIMASK
 801d48a:	60bb      	str	r3, [r7, #8]
  return(result);
 801d48c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d48e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d490:	b672      	cpsid	i
}
 801d492:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d494:	4b12      	ldr	r3, [pc, #72]	; (801d4e0 <UTIL_LPM_EnterLowPower+0x60>)
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d006      	beq.n	801d4aa <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d49c:	4b11      	ldr	r3, [pc, #68]	; (801d4e4 <UTIL_LPM_EnterLowPower+0x64>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d4a2:	4b10      	ldr	r3, [pc, #64]	; (801d4e4 <UTIL_LPM_EnterLowPower+0x64>)
 801d4a4:	685b      	ldr	r3, [r3, #4]
 801d4a6:	4798      	blx	r3
 801d4a8:	e010      	b.n	801d4cc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d4aa:	4b0f      	ldr	r3, [pc, #60]	; (801d4e8 <UTIL_LPM_EnterLowPower+0x68>)
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d006      	beq.n	801d4c0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d4b2:	4b0c      	ldr	r3, [pc, #48]	; (801d4e4 <UTIL_LPM_EnterLowPower+0x64>)
 801d4b4:	689b      	ldr	r3, [r3, #8]
 801d4b6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d4b8:	4b0a      	ldr	r3, [pc, #40]	; (801d4e4 <UTIL_LPM_EnterLowPower+0x64>)
 801d4ba:	68db      	ldr	r3, [r3, #12]
 801d4bc:	4798      	blx	r3
 801d4be:	e005      	b.n	801d4cc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d4c0:	4b08      	ldr	r3, [pc, #32]	; (801d4e4 <UTIL_LPM_EnterLowPower+0x64>)
 801d4c2:	691b      	ldr	r3, [r3, #16]
 801d4c4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d4c6:	4b07      	ldr	r3, [pc, #28]	; (801d4e4 <UTIL_LPM_EnterLowPower+0x64>)
 801d4c8:	695b      	ldr	r3, [r3, #20]
 801d4ca:	4798      	blx	r3
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	f383 8810 	msr	PRIMASK, r3
}
 801d4d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d4d8:	bf00      	nop
 801d4da:	3710      	adds	r7, #16
 801d4dc:	46bd      	mov	sp, r7
 801d4de:	bd80      	pop	{r7, pc}
 801d4e0:	2000243c 	.word	0x2000243c
 801d4e4:	0801f5c4 	.word	0x0801f5c4
 801d4e8:	20002440 	.word	0x20002440

0801d4ec <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d4ec:	b480      	push	{r7}
 801d4ee:	b087      	sub	sp, #28
 801d4f0:	af00      	add	r7, sp, #0
 801d4f2:	60f8      	str	r0, [r7, #12]
 801d4f4:	60b9      	str	r1, [r7, #8]
 801d4f6:	4613      	mov	r3, r2
 801d4f8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d4fe:	68bb      	ldr	r3, [r7, #8]
 801d500:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d502:	e007      	b.n	801d514 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d504:	693a      	ldr	r2, [r7, #16]
 801d506:	1c53      	adds	r3, r2, #1
 801d508:	613b      	str	r3, [r7, #16]
 801d50a:	697b      	ldr	r3, [r7, #20]
 801d50c:	1c59      	adds	r1, r3, #1
 801d50e:	6179      	str	r1, [r7, #20]
 801d510:	7812      	ldrb	r2, [r2, #0]
 801d512:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d514:	88fb      	ldrh	r3, [r7, #6]
 801d516:	1e5a      	subs	r2, r3, #1
 801d518:	80fa      	strh	r2, [r7, #6]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d1f2      	bne.n	801d504 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d51e:	bf00      	nop
 801d520:	bf00      	nop
 801d522:	371c      	adds	r7, #28
 801d524:	46bd      	mov	sp, r7
 801d526:	bc80      	pop	{r7}
 801d528:	4770      	bx	lr

0801d52a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d52a:	b480      	push	{r7}
 801d52c:	b085      	sub	sp, #20
 801d52e:	af00      	add	r7, sp, #0
 801d530:	6078      	str	r0, [r7, #4]
 801d532:	460b      	mov	r3, r1
 801d534:	70fb      	strb	r3, [r7, #3]
 801d536:	4613      	mov	r3, r2
 801d538:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d53e:	e004      	b.n	801d54a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	1c5a      	adds	r2, r3, #1
 801d544:	60fa      	str	r2, [r7, #12]
 801d546:	78fa      	ldrb	r2, [r7, #3]
 801d548:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d54a:	883b      	ldrh	r3, [r7, #0]
 801d54c:	1e5a      	subs	r2, r3, #1
 801d54e:	803a      	strh	r2, [r7, #0]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d1f5      	bne.n	801d540 <UTIL_MEM_set_8+0x16>
  }
}
 801d554:	bf00      	nop
 801d556:	bf00      	nop
 801d558:	3714      	adds	r7, #20
 801d55a:	46bd      	mov	sp, r7
 801d55c:	bc80      	pop	{r7}
 801d55e:	4770      	bx	lr

0801d560 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d560:	b082      	sub	sp, #8
 801d562:	b480      	push	{r7}
 801d564:	b087      	sub	sp, #28
 801d566:	af00      	add	r7, sp, #0
 801d568:	60f8      	str	r0, [r7, #12]
 801d56a:	1d38      	adds	r0, r7, #4
 801d56c:	e880 0006 	stmia.w	r0, {r1, r2}
 801d570:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d572:	2300      	movs	r3, #0
 801d574:	613b      	str	r3, [r7, #16]
 801d576:	2300      	movs	r3, #0
 801d578:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d57a:	687a      	ldr	r2, [r7, #4]
 801d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d57e:	4413      	add	r3, r2
 801d580:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d582:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d586:	b29a      	uxth	r2, r3
 801d588:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	4413      	add	r3, r2
 801d590:	b29b      	uxth	r3, r3
 801d592:	b21b      	sxth	r3, r3
 801d594:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d596:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d59a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d59e:	db0a      	blt.n	801d5b6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d5a0:	693b      	ldr	r3, [r7, #16]
 801d5a2:	3301      	adds	r3, #1
 801d5a4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d5a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5aa:	b29b      	uxth	r3, r3
 801d5ac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d5b0:	b29b      	uxth	r3, r3
 801d5b2:	b21b      	sxth	r3, r3
 801d5b4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	461a      	mov	r2, r3
 801d5ba:	f107 0310 	add.w	r3, r7, #16
 801d5be:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d5c6:	68f8      	ldr	r0, [r7, #12]
 801d5c8:	371c      	adds	r7, #28
 801d5ca:	46bd      	mov	sp, r7
 801d5cc:	bc80      	pop	{r7}
 801d5ce:	b002      	add	sp, #8
 801d5d0:	4770      	bx	lr

0801d5d2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d5d2:	b082      	sub	sp, #8
 801d5d4:	b480      	push	{r7}
 801d5d6:	b087      	sub	sp, #28
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	60f8      	str	r0, [r7, #12]
 801d5dc:	1d38      	adds	r0, r7, #4
 801d5de:	e880 0006 	stmia.w	r0, {r1, r2}
 801d5e2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	613b      	str	r3, [r7, #16]
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d5ec:	687a      	ldr	r2, [r7, #4]
 801d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5f0:	1ad3      	subs	r3, r2, r3
 801d5f2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d5f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d5f8:	b29a      	uxth	r2, r3
 801d5fa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d5fe:	b29b      	uxth	r3, r3
 801d600:	1ad3      	subs	r3, r2, r3
 801d602:	b29b      	uxth	r3, r3
 801d604:	b21b      	sxth	r3, r3
 801d606:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d608:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	da0a      	bge.n	801d626 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d610:	693b      	ldr	r3, [r7, #16]
 801d612:	3b01      	subs	r3, #1
 801d614:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d616:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d61a:	b29b      	uxth	r3, r3
 801d61c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d620:	b29b      	uxth	r3, r3
 801d622:	b21b      	sxth	r3, r3
 801d624:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	461a      	mov	r2, r3
 801d62a:	f107 0310 	add.w	r3, r7, #16
 801d62e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d632:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d636:	68f8      	ldr	r0, [r7, #12]
 801d638:	371c      	adds	r7, #28
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bc80      	pop	{r7}
 801d63e:	b002      	add	sp, #8
 801d640:	4770      	bx	lr
	...

0801d644 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d644:	b580      	push	{r7, lr}
 801d646:	b088      	sub	sp, #32
 801d648:	af02      	add	r7, sp, #8
 801d64a:	463b      	mov	r3, r7
 801d64c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d650:	2300      	movs	r3, #0
 801d652:	60bb      	str	r3, [r7, #8]
 801d654:	2300      	movs	r3, #0
 801d656:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d658:	4b10      	ldr	r3, [pc, #64]	; (801d69c <SysTimeSet+0x58>)
 801d65a:	691b      	ldr	r3, [r3, #16]
 801d65c:	f107 0208 	add.w	r2, r7, #8
 801d660:	3204      	adds	r2, #4
 801d662:	4610      	mov	r0, r2
 801d664:	4798      	blx	r3
 801d666:	4603      	mov	r3, r0
 801d668:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d66a:	f107 0010 	add.w	r0, r7, #16
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	9300      	str	r3, [sp, #0]
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	463a      	mov	r2, r7
 801d676:	ca06      	ldmia	r2, {r1, r2}
 801d678:	f7ff ffab 	bl	801d5d2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d67c:	4b07      	ldr	r3, [pc, #28]	; (801d69c <SysTimeSet+0x58>)
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	693a      	ldr	r2, [r7, #16]
 801d682:	4610      	mov	r0, r2
 801d684:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d686:	4b05      	ldr	r3, [pc, #20]	; (801d69c <SysTimeSet+0x58>)
 801d688:	689b      	ldr	r3, [r3, #8]
 801d68a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d68e:	4610      	mov	r0, r2
 801d690:	4798      	blx	r3
}
 801d692:	bf00      	nop
 801d694:	3718      	adds	r7, #24
 801d696:	46bd      	mov	sp, r7
 801d698:	bd80      	pop	{r7, pc}
 801d69a:	bf00      	nop
 801d69c:	0801f6a8 	.word	0x0801f6a8

0801d6a0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b08a      	sub	sp, #40	; 0x28
 801d6a4:	af02      	add	r7, sp, #8
 801d6a6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	61bb      	str	r3, [r7, #24]
 801d6ac:	2300      	movs	r3, #0
 801d6ae:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	613b      	str	r3, [r7, #16]
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d6b8:	4b14      	ldr	r3, [pc, #80]	; (801d70c <SysTimeGet+0x6c>)
 801d6ba:	691b      	ldr	r3, [r3, #16]
 801d6bc:	f107 0218 	add.w	r2, r7, #24
 801d6c0:	3204      	adds	r2, #4
 801d6c2:	4610      	mov	r0, r2
 801d6c4:	4798      	blx	r3
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d6ca:	4b10      	ldr	r3, [pc, #64]	; (801d70c <SysTimeGet+0x6c>)
 801d6cc:	68db      	ldr	r3, [r3, #12]
 801d6ce:	4798      	blx	r3
 801d6d0:	4603      	mov	r3, r0
 801d6d2:	b21b      	sxth	r3, r3
 801d6d4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d6d6:	4b0d      	ldr	r3, [pc, #52]	; (801d70c <SysTimeGet+0x6c>)
 801d6d8:	685b      	ldr	r3, [r3, #4]
 801d6da:	4798      	blx	r3
 801d6dc:	4603      	mov	r3, r0
 801d6de:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d6e0:	f107 0010 	add.w	r0, r7, #16
 801d6e4:	69fb      	ldr	r3, [r7, #28]
 801d6e6:	9300      	str	r3, [sp, #0]
 801d6e8:	69bb      	ldr	r3, [r7, #24]
 801d6ea:	f107 0208 	add.w	r2, r7, #8
 801d6ee:	ca06      	ldmia	r2, {r1, r2}
 801d6f0:	f7ff ff36 	bl	801d560 <SysTimeAdd>

  return sysTime;
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	461a      	mov	r2, r3
 801d6f8:	f107 0310 	add.w	r3, r7, #16
 801d6fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d700:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d704:	6878      	ldr	r0, [r7, #4]
 801d706:	3720      	adds	r7, #32
 801d708:	46bd      	mov	sp, r7
 801d70a:	bd80      	pop	{r7, pc}
 801d70c:	0801f6a8 	.word	0x0801f6a8

0801d710 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d710:	b580      	push	{r7, lr}
 801d712:	b084      	sub	sp, #16
 801d714:	af00      	add	r7, sp, #0
 801d716:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d718:	2300      	movs	r3, #0
 801d71a:	60bb      	str	r3, [r7, #8]
 801d71c:	2300      	movs	r3, #0
 801d71e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d720:	4b0a      	ldr	r3, [pc, #40]	; (801d74c <SysTimeGetMcuTime+0x3c>)
 801d722:	691b      	ldr	r3, [r3, #16]
 801d724:	f107 0208 	add.w	r2, r7, #8
 801d728:	3204      	adds	r2, #4
 801d72a:	4610      	mov	r0, r2
 801d72c:	4798      	blx	r3
 801d72e:	4603      	mov	r3, r0
 801d730:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	461a      	mov	r2, r3
 801d736:	f107 0308 	add.w	r3, r7, #8
 801d73a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d73e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d742:	6878      	ldr	r0, [r7, #4]
 801d744:	3710      	adds	r7, #16
 801d746:	46bd      	mov	sp, r7
 801d748:	bd80      	pop	{r7, pc}
 801d74a:	bf00      	nop
 801d74c:	0801f6a8 	.word	0x0801f6a8

0801d750 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d750:	b580      	push	{r7, lr}
 801d752:	b088      	sub	sp, #32
 801d754:	af02      	add	r7, sp, #8
 801d756:	463b      	mov	r3, r7
 801d758:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d75c:	4b0f      	ldr	r3, [pc, #60]	; (801d79c <SysTimeToMs+0x4c>)
 801d75e:	68db      	ldr	r3, [r3, #12]
 801d760:	4798      	blx	r3
 801d762:	4603      	mov	r3, r0
 801d764:	b21b      	sxth	r3, r3
 801d766:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d768:	4b0c      	ldr	r3, [pc, #48]	; (801d79c <SysTimeToMs+0x4c>)
 801d76a:	685b      	ldr	r3, [r3, #4]
 801d76c:	4798      	blx	r3
 801d76e:	4603      	mov	r3, r0
 801d770:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d772:	f107 0008 	add.w	r0, r7, #8
 801d776:	697b      	ldr	r3, [r7, #20]
 801d778:	9300      	str	r3, [sp, #0]
 801d77a:	693b      	ldr	r3, [r7, #16]
 801d77c:	463a      	mov	r2, r7
 801d77e:	ca06      	ldmia	r2, {r1, r2}
 801d780:	f7ff ff27 	bl	801d5d2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d78a:	fb02 f303 	mul.w	r3, r2, r3
 801d78e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d792:	4413      	add	r3, r2
}
 801d794:	4618      	mov	r0, r3
 801d796:	3718      	adds	r7, #24
 801d798:	46bd      	mov	sp, r7
 801d79a:	bd80      	pop	{r7, pc}
 801d79c:	0801f6a8 	.word	0x0801f6a8

0801d7a0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	b08a      	sub	sp, #40	; 0x28
 801d7a4:	af02      	add	r7, sp, #8
 801d7a6:	6078      	str	r0, [r7, #4]
 801d7a8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d7aa:	683b      	ldr	r3, [r7, #0]
 801d7ac:	4a19      	ldr	r2, [pc, #100]	; (801d814 <SysTimeFromMs+0x74>)
 801d7ae:	fba2 2303 	umull	r2, r3, r2, r3
 801d7b2:	099b      	lsrs	r3, r3, #6
 801d7b4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d7b6:	69fb      	ldr	r3, [r7, #28]
 801d7b8:	617b      	str	r3, [r7, #20]
 801d7ba:	683b      	ldr	r3, [r7, #0]
 801d7bc:	b29a      	uxth	r2, r3
 801d7be:	69fb      	ldr	r3, [r7, #28]
 801d7c0:	b29b      	uxth	r3, r3
 801d7c2:	4619      	mov	r1, r3
 801d7c4:	0149      	lsls	r1, r1, #5
 801d7c6:	1ac9      	subs	r1, r1, r3
 801d7c8:	0089      	lsls	r1, r1, #2
 801d7ca:	440b      	add	r3, r1
 801d7cc:	00db      	lsls	r3, r3, #3
 801d7ce:	b29b      	uxth	r3, r3
 801d7d0:	1ad3      	subs	r3, r2, r3
 801d7d2:	b29b      	uxth	r3, r3
 801d7d4:	b21b      	sxth	r3, r3
 801d7d6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d7d8:	f107 030c 	add.w	r3, r7, #12
 801d7dc:	2200      	movs	r2, #0
 801d7de:	601a      	str	r2, [r3, #0]
 801d7e0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d7e2:	4b0d      	ldr	r3, [pc, #52]	; (801d818 <SysTimeFromMs+0x78>)
 801d7e4:	68db      	ldr	r3, [r3, #12]
 801d7e6:	4798      	blx	r3
 801d7e8:	4603      	mov	r3, r0
 801d7ea:	b21b      	sxth	r3, r3
 801d7ec:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d7ee:	4b0a      	ldr	r3, [pc, #40]	; (801d818 <SysTimeFromMs+0x78>)
 801d7f0:	685b      	ldr	r3, [r3, #4]
 801d7f2:	4798      	blx	r3
 801d7f4:	4603      	mov	r3, r0
 801d7f6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d7f8:	6878      	ldr	r0, [r7, #4]
 801d7fa:	693b      	ldr	r3, [r7, #16]
 801d7fc:	9300      	str	r3, [sp, #0]
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	f107 0214 	add.w	r2, r7, #20
 801d804:	ca06      	ldmia	r2, {r1, r2}
 801d806:	f7ff feab 	bl	801d560 <SysTimeAdd>
}
 801d80a:	6878      	ldr	r0, [r7, #4]
 801d80c:	3720      	adds	r7, #32
 801d80e:	46bd      	mov	sp, r7
 801d810:	bd80      	pop	{r7, pc}
 801d812:	bf00      	nop
 801d814:	10624dd3 	.word	0x10624dd3
 801d818:	0801f6a8 	.word	0x0801f6a8

0801d81c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d81c:	b480      	push	{r7}
 801d81e:	b085      	sub	sp, #20
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d824:	2300      	movs	r3, #0
 801d826:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d828:	e00e      	b.n	801d848 <ee_skip_atoi+0x2c>
 801d82a:	68fa      	ldr	r2, [r7, #12]
 801d82c:	4613      	mov	r3, r2
 801d82e:	009b      	lsls	r3, r3, #2
 801d830:	4413      	add	r3, r2
 801d832:	005b      	lsls	r3, r3, #1
 801d834:	4618      	mov	r0, r3
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	1c59      	adds	r1, r3, #1
 801d83c:	687a      	ldr	r2, [r7, #4]
 801d83e:	6011      	str	r1, [r2, #0]
 801d840:	781b      	ldrb	r3, [r3, #0]
 801d842:	4403      	add	r3, r0
 801d844:	3b30      	subs	r3, #48	; 0x30
 801d846:	60fb      	str	r3, [r7, #12]
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	781b      	ldrb	r3, [r3, #0]
 801d84e:	2b2f      	cmp	r3, #47	; 0x2f
 801d850:	d904      	bls.n	801d85c <ee_skip_atoi+0x40>
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	781b      	ldrb	r3, [r3, #0]
 801d858:	2b39      	cmp	r3, #57	; 0x39
 801d85a:	d9e6      	bls.n	801d82a <ee_skip_atoi+0xe>
  return i;
 801d85c:	68fb      	ldr	r3, [r7, #12]
}
 801d85e:	4618      	mov	r0, r3
 801d860:	3714      	adds	r7, #20
 801d862:	46bd      	mov	sp, r7
 801d864:	bc80      	pop	{r7}
 801d866:	4770      	bx	lr

0801d868 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d868:	b480      	push	{r7}
 801d86a:	b099      	sub	sp, #100	; 0x64
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	60f8      	str	r0, [r7, #12]
 801d870:	60b9      	str	r1, [r7, #8]
 801d872:	607a      	str	r2, [r7, #4]
 801d874:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d876:	4b71      	ldr	r3, [pc, #452]	; (801da3c <ee_number+0x1d4>)
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d882:	2b00      	cmp	r3, #0
 801d884:	d002      	beq.n	801d88c <ee_number+0x24>
 801d886:	4b6e      	ldr	r3, [pc, #440]	; (801da40 <ee_number+0x1d8>)
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d88c:	683b      	ldr	r3, [r7, #0]
 801d88e:	2b01      	cmp	r3, #1
 801d890:	dd02      	ble.n	801d898 <ee_number+0x30>
 801d892:	683b      	ldr	r3, [r7, #0]
 801d894:	2b24      	cmp	r3, #36	; 0x24
 801d896:	dd01      	ble.n	801d89c <ee_number+0x34>
 801d898:	2300      	movs	r3, #0
 801d89a:	e0ca      	b.n	801da32 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d89c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d89e:	f003 0301 	and.w	r3, r3, #1
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d001      	beq.n	801d8aa <ee_number+0x42>
 801d8a6:	2330      	movs	r3, #48	; 0x30
 801d8a8:	e000      	b.n	801d8ac <ee_number+0x44>
 801d8aa:	2320      	movs	r3, #32
 801d8ac:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d8b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8b8:	f003 0302 	and.w	r3, r3, #2
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d00b      	beq.n	801d8d8 <ee_number+0x70>
  {
    if (num < 0)
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	da08      	bge.n	801d8d8 <ee_number+0x70>
    {
      sign = '-';
 801d8c6:	232d      	movs	r3, #45	; 0x2d
 801d8c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	425b      	negs	r3, r3
 801d8d0:	607b      	str	r3, [r7, #4]
      size--;
 801d8d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8d4:	3b01      	subs	r3, #1
 801d8d6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d8d8:	2300      	movs	r3, #0
 801d8da:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	d11e      	bne.n	801d920 <ee_number+0xb8>
    tmp[i++] = '0';
 801d8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8e4:	1c5a      	adds	r2, r3, #1
 801d8e6:	657a      	str	r2, [r7, #84]	; 0x54
 801d8e8:	3360      	adds	r3, #96	; 0x60
 801d8ea:	443b      	add	r3, r7
 801d8ec:	2230      	movs	r2, #48	; 0x30
 801d8ee:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d8f2:	e018      	b.n	801d926 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	683a      	ldr	r2, [r7, #0]
 801d8f8:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8fc:	fb01 f202 	mul.w	r2, r1, r2
 801d900:	1a9b      	subs	r3, r3, r2
 801d902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d904:	441a      	add	r2, r3
 801d906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d908:	1c59      	adds	r1, r3, #1
 801d90a:	6579      	str	r1, [r7, #84]	; 0x54
 801d90c:	7812      	ldrb	r2, [r2, #0]
 801d90e:	3360      	adds	r3, #96	; 0x60
 801d910:	443b      	add	r3, r7
 801d912:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d916:	687a      	ldr	r2, [r7, #4]
 801d918:	683b      	ldr	r3, [r7, #0]
 801d91a:	fbb2 f3f3 	udiv	r3, r2, r3
 801d91e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d1e6      	bne.n	801d8f4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d92a:	429a      	cmp	r2, r3
 801d92c:	dd01      	ble.n	801d932 <ee_number+0xca>
 801d92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d930:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d936:	1ad3      	subs	r3, r2, r3
 801d938:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d93a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d93c:	f003 0301 	and.w	r3, r3, #1
 801d940:	2b00      	cmp	r3, #0
 801d942:	d112      	bne.n	801d96a <ee_number+0x102>
 801d944:	e00c      	b.n	801d960 <ee_number+0xf8>
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	1c5a      	adds	r2, r3, #1
 801d94a:	60fa      	str	r2, [r7, #12]
 801d94c:	2220      	movs	r2, #32
 801d94e:	701a      	strb	r2, [r3, #0]
 801d950:	68bb      	ldr	r3, [r7, #8]
 801d952:	3b01      	subs	r3, #1
 801d954:	60bb      	str	r3, [r7, #8]
 801d956:	68bb      	ldr	r3, [r7, #8]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d101      	bne.n	801d960 <ee_number+0xf8>
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	e068      	b.n	801da32 <ee_number+0x1ca>
 801d960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d962:	1e5a      	subs	r2, r3, #1
 801d964:	66ba      	str	r2, [r7, #104]	; 0x68
 801d966:	2b00      	cmp	r3, #0
 801d968:	dced      	bgt.n	801d946 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d96a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d01b      	beq.n	801d9aa <ee_number+0x142>
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	1c5a      	adds	r2, r3, #1
 801d976:	60fa      	str	r2, [r7, #12]
 801d978:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d97c:	701a      	strb	r2, [r3, #0]
 801d97e:	68bb      	ldr	r3, [r7, #8]
 801d980:	3b01      	subs	r3, #1
 801d982:	60bb      	str	r3, [r7, #8]
 801d984:	68bb      	ldr	r3, [r7, #8]
 801d986:	2b00      	cmp	r3, #0
 801d988:	d10f      	bne.n	801d9aa <ee_number+0x142>
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	e051      	b.n	801da32 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	1c5a      	adds	r2, r3, #1
 801d992:	60fa      	str	r2, [r7, #12]
 801d994:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d998:	701a      	strb	r2, [r3, #0]
 801d99a:	68bb      	ldr	r3, [r7, #8]
 801d99c:	3b01      	subs	r3, #1
 801d99e:	60bb      	str	r3, [r7, #8]
 801d9a0:	68bb      	ldr	r3, [r7, #8]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d101      	bne.n	801d9aa <ee_number+0x142>
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	e043      	b.n	801da32 <ee_number+0x1ca>
 801d9aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d9ac:	1e5a      	subs	r2, r3, #1
 801d9ae:	66ba      	str	r2, [r7, #104]	; 0x68
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	dcec      	bgt.n	801d98e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d9b4:	e00c      	b.n	801d9d0 <ee_number+0x168>
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	1c5a      	adds	r2, r3, #1
 801d9ba:	60fa      	str	r2, [r7, #12]
 801d9bc:	2230      	movs	r2, #48	; 0x30
 801d9be:	701a      	strb	r2, [r3, #0]
 801d9c0:	68bb      	ldr	r3, [r7, #8]
 801d9c2:	3b01      	subs	r3, #1
 801d9c4:	60bb      	str	r3, [r7, #8]
 801d9c6:	68bb      	ldr	r3, [r7, #8]
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d101      	bne.n	801d9d0 <ee_number+0x168>
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	e030      	b.n	801da32 <ee_number+0x1ca>
 801d9d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9d2:	1e5a      	subs	r2, r3, #1
 801d9d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d9d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9d8:	429a      	cmp	r2, r3
 801d9da:	dbec      	blt.n	801d9b6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d9dc:	e010      	b.n	801da00 <ee_number+0x198>
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	1c5a      	adds	r2, r3, #1
 801d9e2:	60fa      	str	r2, [r7, #12]
 801d9e4:	f107 0110 	add.w	r1, r7, #16
 801d9e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9ea:	440a      	add	r2, r1
 801d9ec:	7812      	ldrb	r2, [r2, #0]
 801d9ee:	701a      	strb	r2, [r3, #0]
 801d9f0:	68bb      	ldr	r3, [r7, #8]
 801d9f2:	3b01      	subs	r3, #1
 801d9f4:	60bb      	str	r3, [r7, #8]
 801d9f6:	68bb      	ldr	r3, [r7, #8]
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d101      	bne.n	801da00 <ee_number+0x198>
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	e018      	b.n	801da32 <ee_number+0x1ca>
 801da00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da02:	1e5a      	subs	r2, r3, #1
 801da04:	657a      	str	r2, [r7, #84]	; 0x54
 801da06:	2b00      	cmp	r3, #0
 801da08:	dce9      	bgt.n	801d9de <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801da0a:	e00c      	b.n	801da26 <ee_number+0x1be>
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	1c5a      	adds	r2, r3, #1
 801da10:	60fa      	str	r2, [r7, #12]
 801da12:	2220      	movs	r2, #32
 801da14:	701a      	strb	r2, [r3, #0]
 801da16:	68bb      	ldr	r3, [r7, #8]
 801da18:	3b01      	subs	r3, #1
 801da1a:	60bb      	str	r3, [r7, #8]
 801da1c:	68bb      	ldr	r3, [r7, #8]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d101      	bne.n	801da26 <ee_number+0x1be>
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	e005      	b.n	801da32 <ee_number+0x1ca>
 801da26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da28:	1e5a      	subs	r2, r3, #1
 801da2a:	66ba      	str	r2, [r7, #104]	; 0x68
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	dced      	bgt.n	801da0c <ee_number+0x1a4>

  return str;
 801da30:	68fb      	ldr	r3, [r7, #12]
}
 801da32:	4618      	mov	r0, r3
 801da34:	3764      	adds	r7, #100	; 0x64
 801da36:	46bd      	mov	sp, r7
 801da38:	bc80      	pop	{r7}
 801da3a:	4770      	bx	lr
 801da3c:	20000164 	.word	0x20000164
 801da40:	20000168 	.word	0x20000168

0801da44 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801da44:	b580      	push	{r7, lr}
 801da46:	b092      	sub	sp, #72	; 0x48
 801da48:	af04      	add	r7, sp, #16
 801da4a:	60f8      	str	r0, [r7, #12]
 801da4c:	60b9      	str	r1, [r7, #8]
 801da4e:	607a      	str	r2, [r7, #4]
 801da50:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801da52:	68bb      	ldr	r3, [r7, #8]
 801da54:	2b00      	cmp	r3, #0
 801da56:	dc01      	bgt.n	801da5c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801da58:	2300      	movs	r3, #0
 801da5a:	e142      	b.n	801dce2 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da60:	e12a      	b.n	801dcb8 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801da62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	1ad2      	subs	r2, r2, r3
 801da68:	68bb      	ldr	r3, [r7, #8]
 801da6a:	3b01      	subs	r3, #1
 801da6c:	429a      	cmp	r2, r3
 801da6e:	f280 8131 	bge.w	801dcd4 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	781b      	ldrb	r3, [r3, #0]
 801da76:	2b25      	cmp	r3, #37	; 0x25
 801da78:	d006      	beq.n	801da88 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801da7a:	687a      	ldr	r2, [r7, #4]
 801da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da7e:	1c59      	adds	r1, r3, #1
 801da80:	62f9      	str	r1, [r7, #44]	; 0x2c
 801da82:	7812      	ldrb	r2, [r2, #0]
 801da84:	701a      	strb	r2, [r3, #0]
      continue;
 801da86:	e114      	b.n	801dcb2 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801da88:	2300      	movs	r3, #0
 801da8a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	3301      	adds	r3, #1
 801da90:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	781b      	ldrb	r3, [r3, #0]
 801da96:	2b30      	cmp	r3, #48	; 0x30
 801da98:	d103      	bne.n	801daa2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801da9a:	6a3b      	ldr	r3, [r7, #32]
 801da9c:	f043 0301 	orr.w	r3, r3, #1
 801daa0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801daa2:	f04f 33ff 	mov.w	r3, #4294967295
 801daa6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	781b      	ldrb	r3, [r3, #0]
 801daac:	2b2f      	cmp	r3, #47	; 0x2f
 801daae:	d908      	bls.n	801dac2 <tiny_vsnprintf_like+0x7e>
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	781b      	ldrb	r3, [r3, #0]
 801dab4:	2b39      	cmp	r3, #57	; 0x39
 801dab6:	d804      	bhi.n	801dac2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801dab8:	1d3b      	adds	r3, r7, #4
 801daba:	4618      	mov	r0, r3
 801dabc:	f7ff feae 	bl	801d81c <ee_skip_atoi>
 801dac0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801dac2:	f04f 33ff 	mov.w	r3, #4294967295
 801dac6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801dac8:	f04f 33ff 	mov.w	r3, #4294967295
 801dacc:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801dace:	230a      	movs	r3, #10
 801dad0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	781b      	ldrb	r3, [r3, #0]
 801dad6:	3b58      	subs	r3, #88	; 0x58
 801dad8:	2b20      	cmp	r3, #32
 801dada:	f200 8094 	bhi.w	801dc06 <tiny_vsnprintf_like+0x1c2>
 801dade:	a201      	add	r2, pc, #4	; (adr r2, 801dae4 <tiny_vsnprintf_like+0xa0>)
 801dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dae4:	0801dbef 	.word	0x0801dbef
 801dae8:	0801dc07 	.word	0x0801dc07
 801daec:	0801dc07 	.word	0x0801dc07
 801daf0:	0801dc07 	.word	0x0801dc07
 801daf4:	0801dc07 	.word	0x0801dc07
 801daf8:	0801dc07 	.word	0x0801dc07
 801dafc:	0801dc07 	.word	0x0801dc07
 801db00:	0801dc07 	.word	0x0801dc07
 801db04:	0801dc07 	.word	0x0801dc07
 801db08:	0801dc07 	.word	0x0801dc07
 801db0c:	0801dc07 	.word	0x0801dc07
 801db10:	0801db73 	.word	0x0801db73
 801db14:	0801dbfd 	.word	0x0801dbfd
 801db18:	0801dc07 	.word	0x0801dc07
 801db1c:	0801dc07 	.word	0x0801dc07
 801db20:	0801dc07 	.word	0x0801dc07
 801db24:	0801dc07 	.word	0x0801dc07
 801db28:	0801dbfd 	.word	0x0801dbfd
 801db2c:	0801dc07 	.word	0x0801dc07
 801db30:	0801dc07 	.word	0x0801dc07
 801db34:	0801dc07 	.word	0x0801dc07
 801db38:	0801dc07 	.word	0x0801dc07
 801db3c:	0801dc07 	.word	0x0801dc07
 801db40:	0801dc07 	.word	0x0801dc07
 801db44:	0801dc07 	.word	0x0801dc07
 801db48:	0801dc07 	.word	0x0801dc07
 801db4c:	0801dc07 	.word	0x0801dc07
 801db50:	0801db93 	.word	0x0801db93
 801db54:	0801dc07 	.word	0x0801dc07
 801db58:	0801dc53 	.word	0x0801dc53
 801db5c:	0801dc07 	.word	0x0801dc07
 801db60:	0801dc07 	.word	0x0801dc07
 801db64:	0801dbf7 	.word	0x0801dbf7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db6a:	1c5a      	adds	r2, r3, #1
 801db6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db6e:	2220      	movs	r2, #32
 801db70:	701a      	strb	r2, [r3, #0]
 801db72:	69fb      	ldr	r3, [r7, #28]
 801db74:	3b01      	subs	r3, #1
 801db76:	61fb      	str	r3, [r7, #28]
 801db78:	69fb      	ldr	r3, [r7, #28]
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	dcf4      	bgt.n	801db68 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801db7e:	683b      	ldr	r3, [r7, #0]
 801db80:	1d1a      	adds	r2, r3, #4
 801db82:	603a      	str	r2, [r7, #0]
 801db84:	6819      	ldr	r1, [r3, #0]
 801db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db88:	1c5a      	adds	r2, r3, #1
 801db8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db8c:	b2ca      	uxtb	r2, r1
 801db8e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801db90:	e08f      	b.n	801dcb2 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801db92:	683b      	ldr	r3, [r7, #0]
 801db94:	1d1a      	adds	r2, r3, #4
 801db96:	603a      	str	r2, [r7, #0]
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d101      	bne.n	801dba6 <tiny_vsnprintf_like+0x162>
 801dba2:	4b52      	ldr	r3, [pc, #328]	; (801dcec <tiny_vsnprintf_like+0x2a8>)
 801dba4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801dba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dba8:	f7e2 fae6 	bl	8000178 <strlen>
 801dbac:	4603      	mov	r3, r0
 801dbae:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801dbb0:	e004      	b.n	801dbbc <tiny_vsnprintf_like+0x178>
 801dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbb4:	1c5a      	adds	r2, r3, #1
 801dbb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dbb8:	2220      	movs	r2, #32
 801dbba:	701a      	strb	r2, [r3, #0]
 801dbbc:	69fb      	ldr	r3, [r7, #28]
 801dbbe:	1e5a      	subs	r2, r3, #1
 801dbc0:	61fa      	str	r2, [r7, #28]
 801dbc2:	693a      	ldr	r2, [r7, #16]
 801dbc4:	429a      	cmp	r2, r3
 801dbc6:	dbf4      	blt.n	801dbb2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801dbc8:	2300      	movs	r3, #0
 801dbca:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbcc:	e00a      	b.n	801dbe4 <tiny_vsnprintf_like+0x1a0>
 801dbce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbd0:	1c53      	adds	r3, r2, #1
 801dbd2:	627b      	str	r3, [r7, #36]	; 0x24
 801dbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbd6:	1c59      	adds	r1, r3, #1
 801dbd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dbda:	7812      	ldrb	r2, [r2, #0]
 801dbdc:	701a      	strb	r2, [r3, #0]
 801dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe0:	3301      	adds	r3, #1
 801dbe2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbe6:	693b      	ldr	r3, [r7, #16]
 801dbe8:	429a      	cmp	r2, r3
 801dbea:	dbf0      	blt.n	801dbce <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801dbec:	e061      	b.n	801dcb2 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801dbee:	6a3b      	ldr	r3, [r7, #32]
 801dbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbf4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801dbf6:	2310      	movs	r3, #16
 801dbf8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801dbfa:	e02d      	b.n	801dc58 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801dbfc:	6a3b      	ldr	r3, [r7, #32]
 801dbfe:	f043 0302 	orr.w	r3, r3, #2
 801dc02:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801dc04:	e025      	b.n	801dc52 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	781b      	ldrb	r3, [r3, #0]
 801dc0a:	2b25      	cmp	r3, #37	; 0x25
 801dc0c:	d004      	beq.n	801dc18 <tiny_vsnprintf_like+0x1d4>
 801dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc10:	1c5a      	adds	r2, r3, #1
 801dc12:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dc14:	2225      	movs	r2, #37	; 0x25
 801dc16:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801dc18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	1ad2      	subs	r2, r2, r3
 801dc1e:	68bb      	ldr	r3, [r7, #8]
 801dc20:	3b01      	subs	r3, #1
 801dc22:	429a      	cmp	r2, r3
 801dc24:	da17      	bge.n	801dc56 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	781b      	ldrb	r3, [r3, #0]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d006      	beq.n	801dc3c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dc2e:	687a      	ldr	r2, [r7, #4]
 801dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc32:	1c59      	adds	r1, r3, #1
 801dc34:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dc36:	7812      	ldrb	r2, [r2, #0]
 801dc38:	701a      	strb	r2, [r3, #0]
 801dc3a:	e002      	b.n	801dc42 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	3b01      	subs	r3, #1
 801dc40:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801dc42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	1ad2      	subs	r2, r2, r3
 801dc48:	68bb      	ldr	r3, [r7, #8]
 801dc4a:	3b01      	subs	r3, #1
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	db2f      	blt.n	801dcb0 <tiny_vsnprintf_like+0x26c>
 801dc50:	e002      	b.n	801dc58 <tiny_vsnprintf_like+0x214>
        break;
 801dc52:	bf00      	nop
 801dc54:	e000      	b.n	801dc58 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801dc56:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dc58:	697b      	ldr	r3, [r7, #20]
 801dc5a:	2b6c      	cmp	r3, #108	; 0x6c
 801dc5c:	d105      	bne.n	801dc6a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801dc5e:	683b      	ldr	r3, [r7, #0]
 801dc60:	1d1a      	adds	r2, r3, #4
 801dc62:	603a      	str	r2, [r7, #0]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	637b      	str	r3, [r7, #52]	; 0x34
 801dc68:	e00f      	b.n	801dc8a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801dc6a:	6a3b      	ldr	r3, [r7, #32]
 801dc6c:	f003 0302 	and.w	r3, r3, #2
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d005      	beq.n	801dc80 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801dc74:	683b      	ldr	r3, [r7, #0]
 801dc76:	1d1a      	adds	r2, r3, #4
 801dc78:	603a      	str	r2, [r7, #0]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	637b      	str	r3, [r7, #52]	; 0x34
 801dc7e:	e004      	b.n	801dc8a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801dc80:	683b      	ldr	r3, [r7, #0]
 801dc82:	1d1a      	adds	r2, r3, #4
 801dc84:	603a      	str	r2, [r7, #0]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dc8a:	68bb      	ldr	r3, [r7, #8]
 801dc8c:	1e5a      	subs	r2, r3, #1
 801dc8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc90:	68fb      	ldr	r3, [r7, #12]
 801dc92:	1acb      	subs	r3, r1, r3
 801dc94:	1ad1      	subs	r1, r2, r3
 801dc96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc98:	6a3b      	ldr	r3, [r7, #32]
 801dc9a:	9302      	str	r3, [sp, #8]
 801dc9c:	69bb      	ldr	r3, [r7, #24]
 801dc9e:	9301      	str	r3, [sp, #4]
 801dca0:	69fb      	ldr	r3, [r7, #28]
 801dca2:	9300      	str	r3, [sp, #0]
 801dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dca8:	f7ff fdde 	bl	801d868 <ee_number>
 801dcac:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dcae:	e000      	b.n	801dcb2 <tiny_vsnprintf_like+0x26e>
        continue;
 801dcb0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	3301      	adds	r3, #1
 801dcb6:	607b      	str	r3, [r7, #4]
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	781b      	ldrb	r3, [r3, #0]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	f47f aed0 	bne.w	801da62 <tiny_vsnprintf_like+0x1e>
 801dcc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	1ad2      	subs	r2, r2, r3
 801dcc8:	68bb      	ldr	r3, [r7, #8]
 801dcca:	3b01      	subs	r3, #1
 801dccc:	429a      	cmp	r2, r3
 801dcce:	f6bf aec8 	bge.w	801da62 <tiny_vsnprintf_like+0x1e>
 801dcd2:	e000      	b.n	801dcd6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801dcd4:	bf00      	nop
  }

  *str = '\0';
 801dcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcd8:	2200      	movs	r2, #0
 801dcda:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dcdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	1ad3      	subs	r3, r2, r3
}
 801dce2:	4618      	mov	r0, r3
 801dce4:	3738      	adds	r7, #56	; 0x38
 801dce6:	46bd      	mov	sp, r7
 801dce8:	bd80      	pop	{r7, pc}
 801dcea:	bf00      	nop
 801dcec:	0801f5bc 	.word	0x0801f5bc

0801dcf0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dcf0:	b580      	push	{r7, lr}
 801dcf2:	b090      	sub	sp, #64	; 0x40
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dcf8:	4b73      	ldr	r3, [pc, #460]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dcfe:	4b72      	ldr	r3, [pc, #456]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd00:	681a      	ldr	r2, [r3, #0]
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	4013      	ands	r3, r2
 801dd06:	4a70      	ldr	r2, [pc, #448]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd08:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dd0a:	4b70      	ldr	r3, [pc, #448]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dd10:	4b6f      	ldr	r3, [pc, #444]	; (801ded0 <UTIL_SEQ_Run+0x1e0>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dd16:	4b6f      	ldr	r3, [pc, #444]	; (801ded4 <UTIL_SEQ_Run+0x1e4>)
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dd1c:	4b6e      	ldr	r3, [pc, #440]	; (801ded8 <UTIL_SEQ_Run+0x1e8>)
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dd22:	e08d      	b.n	801de40 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dd24:	2300      	movs	r3, #0
 801dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd28:	e002      	b.n	801dd30 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd2c:	3301      	adds	r3, #1
 801dd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd30:	4a6a      	ldr	r2, [pc, #424]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd3a:	401a      	ands	r2, r3
 801dd3c:	4b62      	ldr	r3, [pc, #392]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	4013      	ands	r3, r2
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d0f1      	beq.n	801dd2a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dd46:	4a65      	ldr	r2, [pc, #404]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd50:	401a      	ands	r2, r3
 801dd52:	4b5d      	ldr	r3, [pc, #372]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	4013      	ands	r3, r2
 801dd58:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dd5a:	4a60      	ldr	r2, [pc, #384]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd5e:	00db      	lsls	r3, r3, #3
 801dd60:	4413      	add	r3, r2
 801dd62:	685a      	ldr	r2, [r3, #4]
 801dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd66:	4013      	ands	r3, r2
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d106      	bne.n	801dd7a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dd6c:	4a5b      	ldr	r2, [pc, #364]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd70:	00db      	lsls	r3, r3, #3
 801dd72:	4413      	add	r3, r2
 801dd74:	f04f 32ff 	mov.w	r2, #4294967295
 801dd78:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dd7a:	4a58      	ldr	r2, [pc, #352]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd7e:	00db      	lsls	r3, r3, #3
 801dd80:	4413      	add	r3, r2
 801dd82:	685a      	ldr	r2, [r3, #4]
 801dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd86:	4013      	ands	r3, r2
 801dd88:	4618      	mov	r0, r3
 801dd8a:	f000 f907 	bl	801df9c <SEQ_BitPosition>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	461a      	mov	r2, r3
 801dd92:	4b53      	ldr	r3, [pc, #332]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801dd94:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dd96:	4a51      	ldr	r2, [pc, #324]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd9a:	00db      	lsls	r3, r3, #3
 801dd9c:	4413      	add	r3, r2
 801dd9e:	685a      	ldr	r2, [r3, #4]
 801dda0:	4b4f      	ldr	r3, [pc, #316]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	2101      	movs	r1, #1
 801dda6:	fa01 f303 	lsl.w	r3, r1, r3
 801ddaa:	43db      	mvns	r3, r3
 801ddac:	401a      	ands	r2, r3
 801ddae:	494b      	ldr	r1, [pc, #300]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801ddb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddb2:	00db      	lsls	r3, r3, #3
 801ddb4:	440b      	add	r3, r1
 801ddb6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddb8:	f3ef 8310 	mrs	r3, PRIMASK
 801ddbc:	61bb      	str	r3, [r7, #24]
  return(result);
 801ddbe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ddc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ddc2:	b672      	cpsid	i
}
 801ddc4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ddc6:	4b46      	ldr	r3, [pc, #280]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	2201      	movs	r2, #1
 801ddcc:	fa02 f303 	lsl.w	r3, r2, r3
 801ddd0:	43da      	mvns	r2, r3
 801ddd2:	4b3e      	ldr	r3, [pc, #248]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	4013      	ands	r3, r2
 801ddd8:	4a3c      	ldr	r2, [pc, #240]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801ddda:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801dddc:	2301      	movs	r3, #1
 801ddde:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dde0:	e013      	b.n	801de0a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801dde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dde4:	3b01      	subs	r3, #1
 801dde6:	4a3d      	ldr	r2, [pc, #244]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801dde8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ddec:	4b3c      	ldr	r3, [pc, #240]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	2201      	movs	r2, #1
 801ddf2:	fa02 f303 	lsl.w	r3, r2, r3
 801ddf6:	43da      	mvns	r2, r3
 801ddf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddfa:	3b01      	subs	r3, #1
 801ddfc:	400a      	ands	r2, r1
 801ddfe:	4937      	ldr	r1, [pc, #220]	; (801dedc <UTIL_SEQ_Run+0x1ec>)
 801de00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801de04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de06:	3b01      	subs	r3, #1
 801de08:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d1e8      	bne.n	801dde2 <UTIL_SEQ_Run+0xf2>
 801de10:	6a3b      	ldr	r3, [r7, #32]
 801de12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de14:	697b      	ldr	r3, [r7, #20]
 801de16:	f383 8810 	msr	PRIMASK, r3
}
 801de1a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801de1c:	4b30      	ldr	r3, [pc, #192]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	4a30      	ldr	r2, [pc, #192]	; (801dee4 <UTIL_SEQ_Run+0x1f4>)
 801de22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de26:	4798      	blx	r3

    local_taskset = TaskSet;
 801de28:	4b28      	ldr	r3, [pc, #160]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801de2e:	4b28      	ldr	r3, [pc, #160]	; (801ded0 <UTIL_SEQ_Run+0x1e0>)
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801de34:	4b27      	ldr	r3, [pc, #156]	; (801ded4 <UTIL_SEQ_Run+0x1e4>)
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801de3a:	4b27      	ldr	r3, [pc, #156]	; (801ded8 <UTIL_SEQ_Run+0x1e8>)
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801de40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de44:	401a      	ands	r2, r3
 801de46:	4b20      	ldr	r3, [pc, #128]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801de48:	681b      	ldr	r3, [r3, #0]
 801de4a:	4013      	ands	r3, r2
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d005      	beq.n	801de5c <UTIL_SEQ_Run+0x16c>
 801de50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de54:	4013      	ands	r3, r2
 801de56:	2b00      	cmp	r3, #0
 801de58:	f43f af64 	beq.w	801dd24 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801de5c:	4b20      	ldr	r3, [pc, #128]	; (801dee0 <UTIL_SEQ_Run+0x1f0>)
 801de5e:	f04f 32ff 	mov.w	r2, #4294967295
 801de62:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801de64:	f000 f88e 	bl	801df84 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de68:	f3ef 8310 	mrs	r3, PRIMASK
 801de6c:	613b      	str	r3, [r7, #16]
  return(result);
 801de6e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801de70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de72:	b672      	cpsid	i
}
 801de74:	bf00      	nop
  local_taskset = TaskSet;
 801de76:	4b15      	ldr	r3, [pc, #84]	; (801decc <UTIL_SEQ_Run+0x1dc>)
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801de7c:	4b14      	ldr	r3, [pc, #80]	; (801ded0 <UTIL_SEQ_Run+0x1e0>)
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801de82:	4b14      	ldr	r3, [pc, #80]	; (801ded4 <UTIL_SEQ_Run+0x1e4>)
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801de88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de8c:	401a      	ands	r2, r3
 801de8e:	4b0e      	ldr	r3, [pc, #56]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801de90:	681b      	ldr	r3, [r3, #0]
 801de92:	4013      	ands	r3, r2
 801de94:	2b00      	cmp	r3, #0
 801de96:	d107      	bne.n	801dea8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801de98:	4b0f      	ldr	r3, [pc, #60]	; (801ded8 <UTIL_SEQ_Run+0x1e8>)
 801de9a:	681a      	ldr	r2, [r3, #0]
 801de9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de9e:	4013      	ands	r3, r2
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d101      	bne.n	801dea8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801dea4:	f7e4 fd90 	bl	80029c8 <UTIL_SEQ_Idle>
 801dea8:	69fb      	ldr	r3, [r7, #28]
 801deaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	f383 8810 	msr	PRIMASK, r3
}
 801deb2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801deb4:	f000 f86c 	bl	801df90 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801deb8:	4a03      	ldr	r2, [pc, #12]	; (801dec8 <UTIL_SEQ_Run+0x1d8>)
 801deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801debc:	6013      	str	r3, [r2, #0]

  return;
 801debe:	bf00      	nop
}
 801dec0:	3740      	adds	r7, #64	; 0x40
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd80      	pop	{r7, pc}
 801dec6:	bf00      	nop
 801dec8:	20000170 	.word	0x20000170
 801decc:	20002444 	.word	0x20002444
 801ded0:	20002448 	.word	0x20002448
 801ded4:	2000016c 	.word	0x2000016c
 801ded8:	2000244c 	.word	0x2000244c
 801dedc:	20002464 	.word	0x20002464
 801dee0:	20002450 	.word	0x20002450
 801dee4:	20002454 	.word	0x20002454

0801dee8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b088      	sub	sp, #32
 801deec:	af00      	add	r7, sp, #0
 801deee:	60f8      	str	r0, [r7, #12]
 801def0:	60b9      	str	r1, [r7, #8]
 801def2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801def4:	f3ef 8310 	mrs	r3, PRIMASK
 801def8:	617b      	str	r3, [r7, #20]
  return(result);
 801defa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801defc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801defe:	b672      	cpsid	i
}
 801df00:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801df02:	68f8      	ldr	r0, [r7, #12]
 801df04:	f000 f84a 	bl	801df9c <SEQ_BitPosition>
 801df08:	4603      	mov	r3, r0
 801df0a:	4619      	mov	r1, r3
 801df0c:	4a06      	ldr	r2, [pc, #24]	; (801df28 <UTIL_SEQ_RegTask+0x40>)
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801df14:	69fb      	ldr	r3, [r7, #28]
 801df16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df18:	69bb      	ldr	r3, [r7, #24]
 801df1a:	f383 8810 	msr	PRIMASK, r3
}
 801df1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801df20:	bf00      	nop
}
 801df22:	3720      	adds	r7, #32
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}
 801df28:	20002454 	.word	0x20002454

0801df2c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801df2c:	b480      	push	{r7}
 801df2e:	b087      	sub	sp, #28
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
 801df34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df36:	f3ef 8310 	mrs	r3, PRIMASK
 801df3a:	60fb      	str	r3, [r7, #12]
  return(result);
 801df3c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801df3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801df40:	b672      	cpsid	i
}
 801df42:	bf00      	nop

  TaskSet |= TaskId_bm;
 801df44:	4b0d      	ldr	r3, [pc, #52]	; (801df7c <UTIL_SEQ_SetTask+0x50>)
 801df46:	681a      	ldr	r2, [r3, #0]
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	4313      	orrs	r3, r2
 801df4c:	4a0b      	ldr	r2, [pc, #44]	; (801df7c <UTIL_SEQ_SetTask+0x50>)
 801df4e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801df50:	4a0b      	ldr	r2, [pc, #44]	; (801df80 <UTIL_SEQ_SetTask+0x54>)
 801df52:	683b      	ldr	r3, [r7, #0]
 801df54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	431a      	orrs	r2, r3
 801df5c:	4908      	ldr	r1, [pc, #32]	; (801df80 <UTIL_SEQ_SetTask+0x54>)
 801df5e:	683b      	ldr	r3, [r7, #0]
 801df60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df68:	693b      	ldr	r3, [r7, #16]
 801df6a:	f383 8810 	msr	PRIMASK, r3
}
 801df6e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801df70:	bf00      	nop
}
 801df72:	371c      	adds	r7, #28
 801df74:	46bd      	mov	sp, r7
 801df76:	bc80      	pop	{r7}
 801df78:	4770      	bx	lr
 801df7a:	bf00      	nop
 801df7c:	20002444 	.word	0x20002444
 801df80:	20002464 	.word	0x20002464

0801df84 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801df84:	b480      	push	{r7}
 801df86:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df88:	bf00      	nop
}
 801df8a:	46bd      	mov	sp, r7
 801df8c:	bc80      	pop	{r7}
 801df8e:	4770      	bx	lr

0801df90 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801df90:	b480      	push	{r7}
 801df92:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df94:	bf00      	nop
}
 801df96:	46bd      	mov	sp, r7
 801df98:	bc80      	pop	{r7}
 801df9a:	4770      	bx	lr

0801df9c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801df9c:	b480      	push	{r7}
 801df9e:	b085      	sub	sp, #20
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801dfac:	68bb      	ldr	r3, [r7, #8]
 801dfae:	0c1b      	lsrs	r3, r3, #16
 801dfb0:	041b      	lsls	r3, r3, #16
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d104      	bne.n	801dfc0 <SEQ_BitPosition+0x24>
 801dfb6:	2310      	movs	r3, #16
 801dfb8:	73fb      	strb	r3, [r7, #15]
 801dfba:	68bb      	ldr	r3, [r7, #8]
 801dfbc:	041b      	lsls	r3, r3, #16
 801dfbe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801dfc0:	68bb      	ldr	r3, [r7, #8]
 801dfc2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d105      	bne.n	801dfd6 <SEQ_BitPosition+0x3a>
 801dfca:	7bfb      	ldrb	r3, [r7, #15]
 801dfcc:	3308      	adds	r3, #8
 801dfce:	73fb      	strb	r3, [r7, #15]
 801dfd0:	68bb      	ldr	r3, [r7, #8]
 801dfd2:	021b      	lsls	r3, r3, #8
 801dfd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801dfd6:	68bb      	ldr	r3, [r7, #8]
 801dfd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d105      	bne.n	801dfec <SEQ_BitPosition+0x50>
 801dfe0:	7bfb      	ldrb	r3, [r7, #15]
 801dfe2:	3304      	adds	r3, #4
 801dfe4:	73fb      	strb	r3, [r7, #15]
 801dfe6:	68bb      	ldr	r3, [r7, #8]
 801dfe8:	011b      	lsls	r3, r3, #4
 801dfea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801dfec:	68bb      	ldr	r3, [r7, #8]
 801dfee:	0f1b      	lsrs	r3, r3, #28
 801dff0:	4a06      	ldr	r2, [pc, #24]	; (801e00c <SEQ_BitPosition+0x70>)
 801dff2:	5cd2      	ldrb	r2, [r2, r3]
 801dff4:	7bfb      	ldrb	r3, [r7, #15]
 801dff6:	4413      	add	r3, r2
 801dff8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801dffa:	7bfb      	ldrb	r3, [r7, #15]
 801dffc:	f1c3 031f 	rsb	r3, r3, #31
 801e000:	b2db      	uxtb	r3, r3
}
 801e002:	4618      	mov	r0, r3
 801e004:	3714      	adds	r7, #20
 801e006:	46bd      	mov	sp, r7
 801e008:	bc80      	pop	{r7}
 801e00a:	4770      	bx	lr
 801e00c:	0801fb74 	.word	0x0801fb74

0801e010 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801e014:	4b04      	ldr	r3, [pc, #16]	; (801e028 <UTIL_TIMER_Init+0x18>)
 801e016:	2200      	movs	r2, #0
 801e018:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801e01a:	4b04      	ldr	r3, [pc, #16]	; (801e02c <UTIL_TIMER_Init+0x1c>)
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	4798      	blx	r3
 801e020:	4603      	mov	r3, r0
}
 801e022:	4618      	mov	r0, r3
 801e024:	bd80      	pop	{r7, pc}
 801e026:	bf00      	nop
 801e028:	2000246c 	.word	0x2000246c
 801e02c:	0801f67c 	.word	0x0801f67c

0801e030 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e030:	b580      	push	{r7, lr}
 801e032:	b084      	sub	sp, #16
 801e034:	af00      	add	r7, sp, #0
 801e036:	60f8      	str	r0, [r7, #12]
 801e038:	60b9      	str	r1, [r7, #8]
 801e03a:	603b      	str	r3, [r7, #0]
 801e03c:	4613      	mov	r3, r2
 801e03e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d023      	beq.n	801e08e <UTIL_TIMER_Create+0x5e>
 801e046:	683b      	ldr	r3, [r7, #0]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d020      	beq.n	801e08e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	2200      	movs	r2, #0
 801e050:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e052:	4b11      	ldr	r3, [pc, #68]	; (801e098 <UTIL_TIMER_Create+0x68>)
 801e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e056:	68b8      	ldr	r0, [r7, #8]
 801e058:	4798      	blx	r3
 801e05a:	4602      	mov	r2, r0
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	2200      	movs	r2, #0
 801e064:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	2200      	movs	r2, #0
 801e06a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	2200      	movs	r2, #0
 801e070:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	683a      	ldr	r2, [r7, #0]
 801e076:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	69ba      	ldr	r2, [r7, #24]
 801e07c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	79fa      	ldrb	r2, [r7, #7]
 801e082:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	2200      	movs	r2, #0
 801e088:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e08a:	2300      	movs	r3, #0
 801e08c:	e000      	b.n	801e090 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e08e:	2301      	movs	r3, #1
  }
}
 801e090:	4618      	mov	r0, r3
 801e092:	3710      	adds	r7, #16
 801e094:	46bd      	mov	sp, r7
 801e096:	bd80      	pop	{r7, pc}
 801e098:	0801f67c 	.word	0x0801f67c

0801e09c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b08a      	sub	sp, #40	; 0x28
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d056      	beq.n	801e15e <UTIL_TIMER_Start+0xc2>
 801e0b0:	6878      	ldr	r0, [r7, #4]
 801e0b2:	f000 f9a9 	bl	801e408 <TimerExists>
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	f083 0301 	eor.w	r3, r3, #1
 801e0bc:	b2db      	uxtb	r3, r3
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d04d      	beq.n	801e15e <UTIL_TIMER_Start+0xc2>
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	7a5b      	ldrb	r3, [r3, #9]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d149      	bne.n	801e15e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0ca:	f3ef 8310 	mrs	r3, PRIMASK
 801e0ce:	613b      	str	r3, [r7, #16]
  return(result);
 801e0d0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e0d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0d4:	b672      	cpsid	i
}
 801e0d6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	685b      	ldr	r3, [r3, #4]
 801e0dc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e0de:	4b24      	ldr	r3, [pc, #144]	; (801e170 <UTIL_TIMER_Start+0xd4>)
 801e0e0:	6a1b      	ldr	r3, [r3, #32]
 801e0e2:	4798      	blx	r3
 801e0e4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e0e6:	6a3a      	ldr	r2, [r7, #32]
 801e0e8:	69bb      	ldr	r3, [r7, #24]
 801e0ea:	429a      	cmp	r2, r3
 801e0ec:	d201      	bcs.n	801e0f2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e0ee:	69bb      	ldr	r3, [r7, #24]
 801e0f0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6a3a      	ldr	r2, [r7, #32]
 801e0f6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	2200      	movs	r2, #0
 801e0fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	2201      	movs	r2, #1
 801e102:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	2200      	movs	r2, #0
 801e108:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e10a:	4b1a      	ldr	r3, [pc, #104]	; (801e174 <UTIL_TIMER_Start+0xd8>)
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d106      	bne.n	801e120 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e112:	4b17      	ldr	r3, [pc, #92]	; (801e170 <UTIL_TIMER_Start+0xd4>)
 801e114:	691b      	ldr	r3, [r3, #16]
 801e116:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e118:	6878      	ldr	r0, [r7, #4]
 801e11a:	f000 f9eb 	bl	801e4f4 <TimerInsertNewHeadTimer>
 801e11e:	e017      	b.n	801e150 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e120:	4b13      	ldr	r3, [pc, #76]	; (801e170 <UTIL_TIMER_Start+0xd4>)
 801e122:	699b      	ldr	r3, [r3, #24]
 801e124:	4798      	blx	r3
 801e126:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	681a      	ldr	r2, [r3, #0]
 801e12c:	697b      	ldr	r3, [r7, #20]
 801e12e:	441a      	add	r2, r3
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681a      	ldr	r2, [r3, #0]
 801e138:	4b0e      	ldr	r3, [pc, #56]	; (801e174 <UTIL_TIMER_Start+0xd8>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	429a      	cmp	r2, r3
 801e140:	d203      	bcs.n	801e14a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e142:	6878      	ldr	r0, [r7, #4]
 801e144:	f000 f9d6 	bl	801e4f4 <TimerInsertNewHeadTimer>
 801e148:	e002      	b.n	801e150 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e14a:	6878      	ldr	r0, [r7, #4]
 801e14c:	f000 f9a2 	bl	801e494 <TimerInsertTimer>
 801e150:	69fb      	ldr	r3, [r7, #28]
 801e152:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	f383 8810 	msr	PRIMASK, r3
}
 801e15a:	bf00      	nop
  {
 801e15c:	e002      	b.n	801e164 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e15e:	2301      	movs	r3, #1
 801e160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e168:	4618      	mov	r0, r3
 801e16a:	3728      	adds	r7, #40	; 0x28
 801e16c:	46bd      	mov	sp, r7
 801e16e:	bd80      	pop	{r7, pc}
 801e170:	0801f67c 	.word	0x0801f67c
 801e174:	2000246c 	.word	0x2000246c

0801e178 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e178:	b580      	push	{r7, lr}
 801e17a:	b088      	sub	sp, #32
 801e17c:	af00      	add	r7, sp, #0
 801e17e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e180:	2300      	movs	r3, #0
 801e182:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	2b00      	cmp	r3, #0
 801e188:	d05b      	beq.n	801e242 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e18a:	f3ef 8310 	mrs	r3, PRIMASK
 801e18e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e190:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e194:	b672      	cpsid	i
}
 801e196:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e198:	4b2d      	ldr	r3, [pc, #180]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e19e:	4b2c      	ldr	r3, [pc, #176]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	2201      	movs	r2, #1
 801e1a8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e1aa:	4b29      	ldr	r3, [pc, #164]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d041      	beq.n	801e236 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e1b8:	4b25      	ldr	r3, [pc, #148]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	687a      	ldr	r2, [r7, #4]
 801e1be:	429a      	cmp	r2, r3
 801e1c0:	d134      	bne.n	801e22c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e1c2:	4b23      	ldr	r3, [pc, #140]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e1ca:	4b21      	ldr	r3, [pc, #132]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1cc:	681b      	ldr	r3, [r3, #0]
 801e1ce:	695b      	ldr	r3, [r3, #20]
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d00a      	beq.n	801e1ea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e1d4:	4b1e      	ldr	r3, [pc, #120]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	695b      	ldr	r3, [r3, #20]
 801e1da:	4a1d      	ldr	r2, [pc, #116]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1dc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e1de:	4b1c      	ldr	r3, [pc, #112]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	4618      	mov	r0, r3
 801e1e4:	f000 f92c 	bl	801e440 <TimerSetTimeout>
 801e1e8:	e023      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e1ea:	4b1a      	ldr	r3, [pc, #104]	; (801e254 <UTIL_TIMER_Stop+0xdc>)
 801e1ec:	68db      	ldr	r3, [r3, #12]
 801e1ee:	4798      	blx	r3
            TimerListHead = NULL;
 801e1f0:	4b17      	ldr	r3, [pc, #92]	; (801e250 <UTIL_TIMER_Stop+0xd8>)
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	601a      	str	r2, [r3, #0]
 801e1f6:	e01c      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e1f8:	697a      	ldr	r2, [r7, #20]
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	429a      	cmp	r2, r3
 801e1fe:	d110      	bne.n	801e222 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e200:	697b      	ldr	r3, [r7, #20]
 801e202:	695b      	ldr	r3, [r3, #20]
 801e204:	2b00      	cmp	r3, #0
 801e206:	d006      	beq.n	801e216 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e208:	697b      	ldr	r3, [r7, #20]
 801e20a:	695b      	ldr	r3, [r3, #20]
 801e20c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e20e:	69bb      	ldr	r3, [r7, #24]
 801e210:	697a      	ldr	r2, [r7, #20]
 801e212:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e214:	e00d      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e216:	2300      	movs	r3, #0
 801e218:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e21a:	69bb      	ldr	r3, [r7, #24]
 801e21c:	697a      	ldr	r2, [r7, #20]
 801e21e:	615a      	str	r2, [r3, #20]
            break;
 801e220:	e007      	b.n	801e232 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e222:	697b      	ldr	r3, [r7, #20]
 801e224:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e226:	697b      	ldr	r3, [r7, #20]
 801e228:	695b      	ldr	r3, [r3, #20]
 801e22a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e22c:	697b      	ldr	r3, [r7, #20]
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d1e2      	bne.n	801e1f8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e232:	2300      	movs	r3, #0
 801e234:	77fb      	strb	r3, [r7, #31]
 801e236:	693b      	ldr	r3, [r7, #16]
 801e238:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e23a:	68bb      	ldr	r3, [r7, #8]
 801e23c:	f383 8810 	msr	PRIMASK, r3
}
 801e240:	e001      	b.n	801e246 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e242:	2301      	movs	r3, #1
 801e244:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e246:	7ffb      	ldrb	r3, [r7, #31]
}
 801e248:	4618      	mov	r0, r3
 801e24a:	3720      	adds	r7, #32
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}
 801e250:	2000246c 	.word	0x2000246c
 801e254:	0801f67c 	.word	0x0801f67c

0801e258 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	6078      	str	r0, [r7, #4]
 801e260:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e262:	2300      	movs	r3, #0
 801e264:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	2b00      	cmp	r3, #0
 801e26a:	d102      	bne.n	801e272 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e26c:	2301      	movs	r3, #1
 801e26e:	73fb      	strb	r3, [r7, #15]
 801e270:	e014      	b.n	801e29c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e272:	4b0d      	ldr	r3, [pc, #52]	; (801e2a8 <UTIL_TIMER_SetPeriod+0x50>)
 801e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e276:	6838      	ldr	r0, [r7, #0]
 801e278:	4798      	blx	r3
 801e27a:	4602      	mov	r2, r0
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e280:	6878      	ldr	r0, [r7, #4]
 801e282:	f000 f8c1 	bl	801e408 <TimerExists>
 801e286:	4603      	mov	r3, r0
 801e288:	2b00      	cmp	r3, #0
 801e28a:	d007      	beq.n	801e29c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e28c:	6878      	ldr	r0, [r7, #4]
 801e28e:	f7ff ff73 	bl	801e178 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e292:	6878      	ldr	r0, [r7, #4]
 801e294:	f7ff ff02 	bl	801e09c <UTIL_TIMER_Start>
 801e298:	4603      	mov	r3, r0
 801e29a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e29c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e29e:	4618      	mov	r0, r3
 801e2a0:	3710      	adds	r7, #16
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	bd80      	pop	{r7, pc}
 801e2a6:	bf00      	nop
 801e2a8:	0801f67c 	.word	0x0801f67c

0801e2ac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e2ac:	b590      	push	{r4, r7, lr}
 801e2ae:	b089      	sub	sp, #36	; 0x24
 801e2b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801e2b6:	60bb      	str	r3, [r7, #8]
  return(result);
 801e2b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e2ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e2bc:	b672      	cpsid	i
}
 801e2be:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e2c0:	4b38      	ldr	r3, [pc, #224]	; (801e3a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2c2:	695b      	ldr	r3, [r3, #20]
 801e2c4:	4798      	blx	r3
 801e2c6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e2c8:	4b36      	ldr	r3, [pc, #216]	; (801e3a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e2ca:	691b      	ldr	r3, [r3, #16]
 801e2cc:	4798      	blx	r3
 801e2ce:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e2d0:	693a      	ldr	r2, [r7, #16]
 801e2d2:	697b      	ldr	r3, [r7, #20]
 801e2d4:	1ad3      	subs	r3, r2, r3
 801e2d6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e2d8:	4b33      	ldr	r3, [pc, #204]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d037      	beq.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e2e0:	4b31      	ldr	r3, [pc, #196]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e2e6:	69fb      	ldr	r3, [r7, #28]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	68fa      	ldr	r2, [r7, #12]
 801e2ec:	429a      	cmp	r2, r3
 801e2ee:	d206      	bcs.n	801e2fe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e2f0:	69fb      	ldr	r3, [r7, #28]
 801e2f2:	681a      	ldr	r2, [r3, #0]
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	1ad2      	subs	r2, r2, r3
 801e2f8:	69fb      	ldr	r3, [r7, #28]
 801e2fa:	601a      	str	r2, [r3, #0]
 801e2fc:	e002      	b.n	801e304 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e2fe:	69fb      	ldr	r3, [r7, #28]
 801e300:	2200      	movs	r2, #0
 801e302:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e304:	69fb      	ldr	r3, [r7, #28]
 801e306:	695b      	ldr	r3, [r3, #20]
 801e308:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e30a:	69fb      	ldr	r3, [r7, #28]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d1ea      	bne.n	801e2e6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e310:	e01e      	b.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e312:	4b25      	ldr	r3, [pc, #148]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e318:	4b23      	ldr	r3, [pc, #140]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	695b      	ldr	r3, [r3, #20]
 801e31e:	4a22      	ldr	r2, [pc, #136]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e320:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e322:	69fb      	ldr	r3, [r7, #28]
 801e324:	2200      	movs	r2, #0
 801e326:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e328:	69fb      	ldr	r3, [r7, #28]
 801e32a:	2200      	movs	r2, #0
 801e32c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e32e:	69fb      	ldr	r3, [r7, #28]
 801e330:	68db      	ldr	r3, [r3, #12]
 801e332:	69fa      	ldr	r2, [r7, #28]
 801e334:	6912      	ldr	r2, [r2, #16]
 801e336:	4610      	mov	r0, r2
 801e338:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e33a:	69fb      	ldr	r3, [r7, #28]
 801e33c:	7adb      	ldrb	r3, [r3, #11]
 801e33e:	2b01      	cmp	r3, #1
 801e340:	d106      	bne.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e342:	69fb      	ldr	r3, [r7, #28]
 801e344:	7a9b      	ldrb	r3, [r3, #10]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d102      	bne.n	801e350 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e34a:	69f8      	ldr	r0, [r7, #28]
 801e34c:	f7ff fea6 	bl	801e09c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e350:	4b15      	ldr	r3, [pc, #84]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d00d      	beq.n	801e374 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e358:	4b13      	ldr	r3, [pc, #76]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d0d7      	beq.n	801e312 <UTIL_TIMER_IRQ_Handler+0x66>
 801e362:	4b11      	ldr	r3, [pc, #68]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	681c      	ldr	r4, [r3, #0]
 801e368:	4b0e      	ldr	r3, [pc, #56]	; (801e3a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e36a:	699b      	ldr	r3, [r3, #24]
 801e36c:	4798      	blx	r3
 801e36e:	4603      	mov	r3, r0
 801e370:	429c      	cmp	r4, r3
 801e372:	d3ce      	bcc.n	801e312 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e374:	4b0c      	ldr	r3, [pc, #48]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d009      	beq.n	801e390 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e37c:	4b0a      	ldr	r3, [pc, #40]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	7a1b      	ldrb	r3, [r3, #8]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d104      	bne.n	801e390 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e386:	4b08      	ldr	r3, [pc, #32]	; (801e3a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	4618      	mov	r0, r3
 801e38c:	f000 f858 	bl	801e440 <TimerSetTimeout>
 801e390:	69bb      	ldr	r3, [r7, #24]
 801e392:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	f383 8810 	msr	PRIMASK, r3
}
 801e39a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e39c:	bf00      	nop
 801e39e:	3724      	adds	r7, #36	; 0x24
 801e3a0:	46bd      	mov	sp, r7
 801e3a2:	bd90      	pop	{r4, r7, pc}
 801e3a4:	0801f67c 	.word	0x0801f67c
 801e3a8:	2000246c 	.word	0x2000246c

0801e3ac <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e3ac:	b580      	push	{r7, lr}
 801e3ae:	b082      	sub	sp, #8
 801e3b0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e3b2:	4b06      	ldr	r3, [pc, #24]	; (801e3cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801e3b4:	69db      	ldr	r3, [r3, #28]
 801e3b6:	4798      	blx	r3
 801e3b8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e3ba:	4b04      	ldr	r3, [pc, #16]	; (801e3cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801e3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	4798      	blx	r3
 801e3c2:	4603      	mov	r3, r0
}
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	3708      	adds	r7, #8
 801e3c8:	46bd      	mov	sp, r7
 801e3ca:	bd80      	pop	{r7, pc}
 801e3cc:	0801f67c 	.word	0x0801f67c

0801e3d0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b084      	sub	sp, #16
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e3d8:	4b0a      	ldr	r3, [pc, #40]	; (801e404 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3da:	69db      	ldr	r3, [r3, #28]
 801e3dc:	4798      	blx	r3
 801e3de:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e3e0:	4b08      	ldr	r3, [pc, #32]	; (801e404 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3e4:	6878      	ldr	r0, [r7, #4]
 801e3e6:	4798      	blx	r3
 801e3e8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e3ea:	4b06      	ldr	r3, [pc, #24]	; (801e404 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3ee:	68f9      	ldr	r1, [r7, #12]
 801e3f0:	68ba      	ldr	r2, [r7, #8]
 801e3f2:	1a8a      	subs	r2, r1, r2
 801e3f4:	4610      	mov	r0, r2
 801e3f6:	4798      	blx	r3
 801e3f8:	4603      	mov	r3, r0
}
 801e3fa:	4618      	mov	r0, r3
 801e3fc:	3710      	adds	r7, #16
 801e3fe:	46bd      	mov	sp, r7
 801e400:	bd80      	pop	{r7, pc}
 801e402:	bf00      	nop
 801e404:	0801f67c 	.word	0x0801f67c

0801e408 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e408:	b480      	push	{r7}
 801e40a:	b085      	sub	sp, #20
 801e40c:	af00      	add	r7, sp, #0
 801e40e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e410:	4b0a      	ldr	r3, [pc, #40]	; (801e43c <TimerExists+0x34>)
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e416:	e008      	b.n	801e42a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e418:	68fa      	ldr	r2, [r7, #12]
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d101      	bne.n	801e424 <TimerExists+0x1c>
    {
      return true;
 801e420:	2301      	movs	r3, #1
 801e422:	e006      	b.n	801e432 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e424:	68fb      	ldr	r3, [r7, #12]
 801e426:	695b      	ldr	r3, [r3, #20]
 801e428:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d1f3      	bne.n	801e418 <TimerExists+0x10>
  }
  return false;
 801e430:	2300      	movs	r3, #0
}
 801e432:	4618      	mov	r0, r3
 801e434:	3714      	adds	r7, #20
 801e436:	46bd      	mov	sp, r7
 801e438:	bc80      	pop	{r7}
 801e43a:	4770      	bx	lr
 801e43c:	2000246c 	.word	0x2000246c

0801e440 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e440:	b590      	push	{r4, r7, lr}
 801e442:	b085      	sub	sp, #20
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e448:	4b11      	ldr	r3, [pc, #68]	; (801e490 <TimerSetTimeout+0x50>)
 801e44a:	6a1b      	ldr	r3, [r3, #32]
 801e44c:	4798      	blx	r3
 801e44e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	2201      	movs	r2, #1
 801e454:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	681c      	ldr	r4, [r3, #0]
 801e45a:	4b0d      	ldr	r3, [pc, #52]	; (801e490 <TimerSetTimeout+0x50>)
 801e45c:	699b      	ldr	r3, [r3, #24]
 801e45e:	4798      	blx	r3
 801e460:	4602      	mov	r2, r0
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	4413      	add	r3, r2
 801e466:	429c      	cmp	r4, r3
 801e468:	d207      	bcs.n	801e47a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e46a:	4b09      	ldr	r3, [pc, #36]	; (801e490 <TimerSetTimeout+0x50>)
 801e46c:	699b      	ldr	r3, [r3, #24]
 801e46e:	4798      	blx	r3
 801e470:	4602      	mov	r2, r0
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	441a      	add	r2, r3
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e47a:	4b05      	ldr	r3, [pc, #20]	; (801e490 <TimerSetTimeout+0x50>)
 801e47c:	689b      	ldr	r3, [r3, #8]
 801e47e:	687a      	ldr	r2, [r7, #4]
 801e480:	6812      	ldr	r2, [r2, #0]
 801e482:	4610      	mov	r0, r2
 801e484:	4798      	blx	r3
}
 801e486:	bf00      	nop
 801e488:	3714      	adds	r7, #20
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd90      	pop	{r4, r7, pc}
 801e48e:	bf00      	nop
 801e490:	0801f67c 	.word	0x0801f67c

0801e494 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e494:	b480      	push	{r7}
 801e496:	b085      	sub	sp, #20
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e49c:	4b14      	ldr	r3, [pc, #80]	; (801e4f0 <TimerInsertTimer+0x5c>)
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e4a2:	4b13      	ldr	r3, [pc, #76]	; (801e4f0 <TimerInsertTimer+0x5c>)
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	695b      	ldr	r3, [r3, #20]
 801e4a8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e4aa:	e012      	b.n	801e4d2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681a      	ldr	r2, [r3, #0]
 801e4b0:	68bb      	ldr	r3, [r7, #8]
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d905      	bls.n	801e4c4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e4b8:	68bb      	ldr	r3, [r7, #8]
 801e4ba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e4bc:	68bb      	ldr	r3, [r7, #8]
 801e4be:	695b      	ldr	r3, [r3, #20]
 801e4c0:	60bb      	str	r3, [r7, #8]
 801e4c2:	e006      	b.n	801e4d2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	687a      	ldr	r2, [r7, #4]
 801e4c8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	68ba      	ldr	r2, [r7, #8]
 801e4ce:	615a      	str	r2, [r3, #20]
        return;
 801e4d0:	e009      	b.n	801e4e6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	695b      	ldr	r3, [r3, #20]
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d1e8      	bne.n	801e4ac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e4da:	68fb      	ldr	r3, [r7, #12]
 801e4dc:	687a      	ldr	r2, [r7, #4]
 801e4de:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2200      	movs	r2, #0
 801e4e4:	615a      	str	r2, [r3, #20]
}
 801e4e6:	3714      	adds	r7, #20
 801e4e8:	46bd      	mov	sp, r7
 801e4ea:	bc80      	pop	{r7}
 801e4ec:	4770      	bx	lr
 801e4ee:	bf00      	nop
 801e4f0:	2000246c 	.word	0x2000246c

0801e4f4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e4f4:	b580      	push	{r7, lr}
 801e4f6:	b084      	sub	sp, #16
 801e4f8:	af00      	add	r7, sp, #0
 801e4fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e4fc:	4b0b      	ldr	r3, [pc, #44]	; (801e52c <TimerInsertNewHeadTimer+0x38>)
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	2b00      	cmp	r3, #0
 801e506:	d002      	beq.n	801e50e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	2200      	movs	r2, #0
 801e50c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	68fa      	ldr	r2, [r7, #12]
 801e512:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e514:	4a05      	ldr	r2, [pc, #20]	; (801e52c <TimerInsertNewHeadTimer+0x38>)
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e51a:	4b04      	ldr	r3, [pc, #16]	; (801e52c <TimerInsertNewHeadTimer+0x38>)
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	4618      	mov	r0, r3
 801e520:	f7ff ff8e 	bl	801e440 <TimerSetTimeout>
}
 801e524:	bf00      	nop
 801e526:	3710      	adds	r7, #16
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}
 801e52c:	2000246c 	.word	0x2000246c

0801e530 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e534:	2218      	movs	r2, #24
 801e536:	2100      	movs	r1, #0
 801e538:	4807      	ldr	r0, [pc, #28]	; (801e558 <UTIL_ADV_TRACE_Init+0x28>)
 801e53a:	f7fe fff6 	bl	801d52a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e53e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e542:	2100      	movs	r1, #0
 801e544:	4805      	ldr	r0, [pc, #20]	; (801e55c <UTIL_ADV_TRACE_Init+0x2c>)
 801e546:	f7fe fff0 	bl	801d52a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e54a:	4b05      	ldr	r3, [pc, #20]	; (801e560 <UTIL_ADV_TRACE_Init+0x30>)
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	4805      	ldr	r0, [pc, #20]	; (801e564 <UTIL_ADV_TRACE_Init+0x34>)
 801e550:	4798      	blx	r3
 801e552:	4603      	mov	r3, r0
}
 801e554:	4618      	mov	r0, r3
 801e556:	bd80      	pop	{r7, pc}
 801e558:	20002470 	.word	0x20002470
 801e55c:	20002488 	.word	0x20002488
 801e560:	0801f6bc 	.word	0x0801f6bc
 801e564:	0801e7d1 	.word	0x0801e7d1

0801e568 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e568:	b480      	push	{r7}
 801e56a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e56c:	4b06      	ldr	r3, [pc, #24]	; (801e588 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e56e:	8a5a      	ldrh	r2, [r3, #18]
 801e570:	4b05      	ldr	r3, [pc, #20]	; (801e588 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e572:	8a1b      	ldrh	r3, [r3, #16]
 801e574:	429a      	cmp	r2, r3
 801e576:	d101      	bne.n	801e57c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e578:	2301      	movs	r3, #1
 801e57a:	e000      	b.n	801e57e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e57c:	2300      	movs	r3, #0
}
 801e57e:	4618      	mov	r0, r3
 801e580:	46bd      	mov	sp, r7
 801e582:	bc80      	pop	{r7}
 801e584:	4770      	bx	lr
 801e586:	bf00      	nop
 801e588:	20002470 	.word	0x20002470

0801e58c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e58c:	b408      	push	{r3}
 801e58e:	b580      	push	{r7, lr}
 801e590:	b08d      	sub	sp, #52	; 0x34
 801e592:	af00      	add	r7, sp, #0
 801e594:	60f8      	str	r0, [r7, #12]
 801e596:	60b9      	str	r1, [r7, #8]
 801e598:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e59a:	2300      	movs	r3, #0
 801e59c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e59e:	2300      	movs	r3, #0
 801e5a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e5a2:	4b37      	ldr	r3, [pc, #220]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5a4:	7a1b      	ldrb	r3, [r3, #8]
 801e5a6:	461a      	mov	r2, r3
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	4293      	cmp	r3, r2
 801e5ac:	d902      	bls.n	801e5b4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e5ae:	f06f 0304 	mvn.w	r3, #4
 801e5b2:	e05e      	b.n	801e672 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e5b4:	4b32      	ldr	r3, [pc, #200]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5b6:	68da      	ldr	r2, [r3, #12]
 801e5b8:	68bb      	ldr	r3, [r7, #8]
 801e5ba:	4013      	ands	r3, r2
 801e5bc:	68ba      	ldr	r2, [r7, #8]
 801e5be:	429a      	cmp	r2, r3
 801e5c0:	d002      	beq.n	801e5c8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e5c2:	f06f 0305 	mvn.w	r3, #5
 801e5c6:	e054      	b.n	801e672 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e5c8:	4b2d      	ldr	r3, [pc, #180]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5ca:	685b      	ldr	r3, [r3, #4]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d00a      	beq.n	801e5e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d007      	beq.n	801e5e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e5d6:	4b2a      	ldr	r3, [pc, #168]	; (801e680 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5d8:	685b      	ldr	r3, [r3, #4]
 801e5da:	f107 0116 	add.w	r1, r7, #22
 801e5de:	f107 0218 	add.w	r2, r7, #24
 801e5e2:	4610      	mov	r0, r2
 801e5e4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e5e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5ea:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5f4:	4823      	ldr	r0, [pc, #140]	; (801e684 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e5f6:	f7ff fa25 	bl	801da44 <tiny_vsnprintf_like>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e5fe:	f000 f9f1 	bl	801e9e4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e602:	8afa      	ldrh	r2, [r7, #22]
 801e604:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e606:	4413      	add	r3, r2
 801e608:	b29b      	uxth	r3, r3
 801e60a:	f107 0214 	add.w	r2, r7, #20
 801e60e:	4611      	mov	r1, r2
 801e610:	4618      	mov	r0, r3
 801e612:	f000 f969 	bl	801e8e8 <TRACE_AllocateBufer>
 801e616:	4603      	mov	r3, r0
 801e618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e61c:	d025      	beq.n	801e66a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e61e:	2300      	movs	r3, #0
 801e620:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e622:	e00e      	b.n	801e642 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e626:	8aba      	ldrh	r2, [r7, #20]
 801e628:	3330      	adds	r3, #48	; 0x30
 801e62a:	443b      	add	r3, r7
 801e62c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e630:	4b15      	ldr	r3, [pc, #84]	; (801e688 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e632:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e634:	8abb      	ldrh	r3, [r7, #20]
 801e636:	3301      	adds	r3, #1
 801e638:	b29b      	uxth	r3, r3
 801e63a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e63c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e63e:	3301      	adds	r3, #1
 801e640:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e642:	8afb      	ldrh	r3, [r7, #22]
 801e644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e646:	429a      	cmp	r2, r3
 801e648:	d3ec      	bcc.n	801e624 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e64a:	8abb      	ldrh	r3, [r7, #20]
 801e64c:	461a      	mov	r2, r3
 801e64e:	4b0e      	ldr	r3, [pc, #56]	; (801e688 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e650:	18d0      	adds	r0, r2, r3
 801e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e656:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e65a:	f7ff f9f3 	bl	801da44 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e65e:	f000 f9df 	bl	801ea20 <TRACE_UnLock>

    return TRACE_Send();
 801e662:	f000 f831 	bl	801e6c8 <TRACE_Send>
 801e666:	4603      	mov	r3, r0
 801e668:	e003      	b.n	801e672 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e66a:	f000 f9d9 	bl	801ea20 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e66e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e672:	4618      	mov	r0, r3
 801e674:	3734      	adds	r7, #52	; 0x34
 801e676:	46bd      	mov	sp, r7
 801e678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e67c:	b001      	add	sp, #4
 801e67e:	4770      	bx	lr
 801e680:	20002470 	.word	0x20002470
 801e684:	20002888 	.word	0x20002888
 801e688:	20002488 	.word	0x20002488

0801e68c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e68c:	b480      	push	{r7}
 801e68e:	b083      	sub	sp, #12
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e694:	4a03      	ldr	r2, [pc, #12]	; (801e6a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	6053      	str	r3, [r2, #4]
}
 801e69a:	bf00      	nop
 801e69c:	370c      	adds	r7, #12
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	bc80      	pop	{r7}
 801e6a2:	4770      	bx	lr
 801e6a4:	20002470 	.word	0x20002470

0801e6a8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e6a8:	b480      	push	{r7}
 801e6aa:	b083      	sub	sp, #12
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	4603      	mov	r3, r0
 801e6b0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e6b2:	4a04      	ldr	r2, [pc, #16]	; (801e6c4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e6b4:	79fb      	ldrb	r3, [r7, #7]
 801e6b6:	7213      	strb	r3, [r2, #8]
}
 801e6b8:	bf00      	nop
 801e6ba:	370c      	adds	r7, #12
 801e6bc:	46bd      	mov	sp, r7
 801e6be:	bc80      	pop	{r7}
 801e6c0:	4770      	bx	lr
 801e6c2:	bf00      	nop
 801e6c4:	20002470 	.word	0x20002470

0801e6c8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b088      	sub	sp, #32
 801e6cc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e6d2:	2300      	movs	r3, #0
 801e6d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6d6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6da:	613b      	str	r3, [r7, #16]
  return(result);
 801e6dc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e6de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6e0:	b672      	cpsid	i
}
 801e6e2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e6e4:	f000 f9ba 	bl	801ea5c <TRACE_IsLocked>
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d15d      	bne.n	801e7aa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e6ee:	f000 f979 	bl	801e9e4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e6f2:	4b34      	ldr	r3, [pc, #208]	; (801e7c4 <TRACE_Send+0xfc>)
 801e6f4:	8a1a      	ldrh	r2, [r3, #16]
 801e6f6:	4b33      	ldr	r3, [pc, #204]	; (801e7c4 <TRACE_Send+0xfc>)
 801e6f8:	8a5b      	ldrh	r3, [r3, #18]
 801e6fa:	429a      	cmp	r2, r3
 801e6fc:	d04d      	beq.n	801e79a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e6fe:	4b31      	ldr	r3, [pc, #196]	; (801e7c4 <TRACE_Send+0xfc>)
 801e700:	789b      	ldrb	r3, [r3, #2]
 801e702:	2b01      	cmp	r3, #1
 801e704:	d117      	bne.n	801e736 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e706:	4b2f      	ldr	r3, [pc, #188]	; (801e7c4 <TRACE_Send+0xfc>)
 801e708:	881a      	ldrh	r2, [r3, #0]
 801e70a:	4b2e      	ldr	r3, [pc, #184]	; (801e7c4 <TRACE_Send+0xfc>)
 801e70c:	8a1b      	ldrh	r3, [r3, #16]
 801e70e:	1ad3      	subs	r3, r2, r3
 801e710:	b29a      	uxth	r2, r3
 801e712:	4b2c      	ldr	r3, [pc, #176]	; (801e7c4 <TRACE_Send+0xfc>)
 801e714:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e716:	4b2b      	ldr	r3, [pc, #172]	; (801e7c4 <TRACE_Send+0xfc>)
 801e718:	2202      	movs	r2, #2
 801e71a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e71c:	4b29      	ldr	r3, [pc, #164]	; (801e7c4 <TRACE_Send+0xfc>)
 801e71e:	2200      	movs	r2, #0
 801e720:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e722:	4b28      	ldr	r3, [pc, #160]	; (801e7c4 <TRACE_Send+0xfc>)
 801e724:	8a9b      	ldrh	r3, [r3, #20]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d105      	bne.n	801e736 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e72a:	4b26      	ldr	r3, [pc, #152]	; (801e7c4 <TRACE_Send+0xfc>)
 801e72c:	2200      	movs	r2, #0
 801e72e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e730:	4b24      	ldr	r3, [pc, #144]	; (801e7c4 <TRACE_Send+0xfc>)
 801e732:	2200      	movs	r2, #0
 801e734:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e736:	4b23      	ldr	r3, [pc, #140]	; (801e7c4 <TRACE_Send+0xfc>)
 801e738:	789b      	ldrb	r3, [r3, #2]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d115      	bne.n	801e76a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e73e:	4b21      	ldr	r3, [pc, #132]	; (801e7c4 <TRACE_Send+0xfc>)
 801e740:	8a5a      	ldrh	r2, [r3, #18]
 801e742:	4b20      	ldr	r3, [pc, #128]	; (801e7c4 <TRACE_Send+0xfc>)
 801e744:	8a1b      	ldrh	r3, [r3, #16]
 801e746:	429a      	cmp	r2, r3
 801e748:	d908      	bls.n	801e75c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e74a:	4b1e      	ldr	r3, [pc, #120]	; (801e7c4 <TRACE_Send+0xfc>)
 801e74c:	8a5a      	ldrh	r2, [r3, #18]
 801e74e:	4b1d      	ldr	r3, [pc, #116]	; (801e7c4 <TRACE_Send+0xfc>)
 801e750:	8a1b      	ldrh	r3, [r3, #16]
 801e752:	1ad3      	subs	r3, r2, r3
 801e754:	b29a      	uxth	r2, r3
 801e756:	4b1b      	ldr	r3, [pc, #108]	; (801e7c4 <TRACE_Send+0xfc>)
 801e758:	829a      	strh	r2, [r3, #20]
 801e75a:	e006      	b.n	801e76a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e75c:	4b19      	ldr	r3, [pc, #100]	; (801e7c4 <TRACE_Send+0xfc>)
 801e75e:	8a1b      	ldrh	r3, [r3, #16]
 801e760:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e764:	b29a      	uxth	r2, r3
 801e766:	4b17      	ldr	r3, [pc, #92]	; (801e7c4 <TRACE_Send+0xfc>)
 801e768:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e76a:	4b16      	ldr	r3, [pc, #88]	; (801e7c4 <TRACE_Send+0xfc>)
 801e76c:	8a1b      	ldrh	r3, [r3, #16]
 801e76e:	461a      	mov	r2, r3
 801e770:	4b15      	ldr	r3, [pc, #84]	; (801e7c8 <TRACE_Send+0x100>)
 801e772:	4413      	add	r3, r2
 801e774:	61bb      	str	r3, [r7, #24]
 801e776:	697b      	ldr	r3, [r7, #20]
 801e778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e77a:	68fb      	ldr	r3, [r7, #12]
 801e77c:	f383 8810 	msr	PRIMASK, r3
}
 801e780:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e782:	f7e4 fa23 	bl	8002bcc <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e786:	4b11      	ldr	r3, [pc, #68]	; (801e7cc <TRACE_Send+0x104>)
 801e788:	68db      	ldr	r3, [r3, #12]
 801e78a:	4a0e      	ldr	r2, [pc, #56]	; (801e7c4 <TRACE_Send+0xfc>)
 801e78c:	8a92      	ldrh	r2, [r2, #20]
 801e78e:	4611      	mov	r1, r2
 801e790:	69b8      	ldr	r0, [r7, #24]
 801e792:	4798      	blx	r3
 801e794:	4603      	mov	r3, r0
 801e796:	77fb      	strb	r3, [r7, #31]
 801e798:	e00d      	b.n	801e7b6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e79a:	f000 f941 	bl	801ea20 <TRACE_UnLock>
 801e79e:	697b      	ldr	r3, [r7, #20]
 801e7a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7a2:	68bb      	ldr	r3, [r7, #8]
 801e7a4:	f383 8810 	msr	PRIMASK, r3
}
 801e7a8:	e005      	b.n	801e7b6 <TRACE_Send+0xee>
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	f383 8810 	msr	PRIMASK, r3
}
 801e7b4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	3720      	adds	r7, #32
 801e7be:	46bd      	mov	sp, r7
 801e7c0:	bd80      	pop	{r7, pc}
 801e7c2:	bf00      	nop
 801e7c4:	20002470 	.word	0x20002470
 801e7c8:	20002488 	.word	0x20002488
 801e7cc:	0801f6bc 	.word	0x0801f6bc

0801e7d0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b088      	sub	sp, #32
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e7d8:	2300      	movs	r3, #0
 801e7da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7dc:	f3ef 8310 	mrs	r3, PRIMASK
 801e7e0:	617b      	str	r3, [r7, #20]
  return(result);
 801e7e2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e7e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7e6:	b672      	cpsid	i
}
 801e7e8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e7ea:	4b3c      	ldr	r3, [pc, #240]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e7ec:	789b      	ldrb	r3, [r3, #2]
 801e7ee:	2b02      	cmp	r3, #2
 801e7f0:	d106      	bne.n	801e800 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7f2:	4b3a      	ldr	r3, [pc, #232]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e7f4:	2200      	movs	r2, #0
 801e7f6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7f8:	4b38      	ldr	r3, [pc, #224]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	821a      	strh	r2, [r3, #16]
 801e7fe:	e00a      	b.n	801e816 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e800:	4b36      	ldr	r3, [pc, #216]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e802:	8a1a      	ldrh	r2, [r3, #16]
 801e804:	4b35      	ldr	r3, [pc, #212]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e806:	8a9b      	ldrh	r3, [r3, #20]
 801e808:	4413      	add	r3, r2
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e810:	b29a      	uxth	r2, r3
 801e812:	4b32      	ldr	r3, [pc, #200]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e814:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e816:	4b31      	ldr	r3, [pc, #196]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e818:	8a1a      	ldrh	r2, [r3, #16]
 801e81a:	4b30      	ldr	r3, [pc, #192]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e81c:	8a5b      	ldrh	r3, [r3, #18]
 801e81e:	429a      	cmp	r2, r3
 801e820:	d04d      	beq.n	801e8be <TRACE_TxCpltCallback+0xee>
 801e822:	4b2e      	ldr	r3, [pc, #184]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e824:	8adb      	ldrh	r3, [r3, #22]
 801e826:	2b01      	cmp	r3, #1
 801e828:	d149      	bne.n	801e8be <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e82a:	4b2c      	ldr	r3, [pc, #176]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e82c:	789b      	ldrb	r3, [r3, #2]
 801e82e:	2b01      	cmp	r3, #1
 801e830:	d117      	bne.n	801e862 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e832:	4b2a      	ldr	r3, [pc, #168]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e834:	881a      	ldrh	r2, [r3, #0]
 801e836:	4b29      	ldr	r3, [pc, #164]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e838:	8a1b      	ldrh	r3, [r3, #16]
 801e83a:	1ad3      	subs	r3, r2, r3
 801e83c:	b29a      	uxth	r2, r3
 801e83e:	4b27      	ldr	r3, [pc, #156]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e840:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e842:	4b26      	ldr	r3, [pc, #152]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e844:	2202      	movs	r2, #2
 801e846:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e848:	4b24      	ldr	r3, [pc, #144]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e84a:	2200      	movs	r2, #0
 801e84c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e84e:	4b23      	ldr	r3, [pc, #140]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e850:	8a9b      	ldrh	r3, [r3, #20]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d105      	bne.n	801e862 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e856:	4b21      	ldr	r3, [pc, #132]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e858:	2200      	movs	r2, #0
 801e85a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e85c:	4b1f      	ldr	r3, [pc, #124]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e85e:	2200      	movs	r2, #0
 801e860:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e862:	4b1e      	ldr	r3, [pc, #120]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e864:	789b      	ldrb	r3, [r3, #2]
 801e866:	2b00      	cmp	r3, #0
 801e868:	d115      	bne.n	801e896 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e86a:	4b1c      	ldr	r3, [pc, #112]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e86c:	8a5a      	ldrh	r2, [r3, #18]
 801e86e:	4b1b      	ldr	r3, [pc, #108]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e870:	8a1b      	ldrh	r3, [r3, #16]
 801e872:	429a      	cmp	r2, r3
 801e874:	d908      	bls.n	801e888 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e876:	4b19      	ldr	r3, [pc, #100]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e878:	8a5a      	ldrh	r2, [r3, #18]
 801e87a:	4b18      	ldr	r3, [pc, #96]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e87c:	8a1b      	ldrh	r3, [r3, #16]
 801e87e:	1ad3      	subs	r3, r2, r3
 801e880:	b29a      	uxth	r2, r3
 801e882:	4b16      	ldr	r3, [pc, #88]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e884:	829a      	strh	r2, [r3, #20]
 801e886:	e006      	b.n	801e896 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e888:	4b14      	ldr	r3, [pc, #80]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e88a:	8a1b      	ldrh	r3, [r3, #16]
 801e88c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e890:	b29a      	uxth	r2, r3
 801e892:	4b12      	ldr	r3, [pc, #72]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e894:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e896:	4b11      	ldr	r3, [pc, #68]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e898:	8a1b      	ldrh	r3, [r3, #16]
 801e89a:	461a      	mov	r2, r3
 801e89c:	4b10      	ldr	r3, [pc, #64]	; (801e8e0 <TRACE_TxCpltCallback+0x110>)
 801e89e:	4413      	add	r3, r2
 801e8a0:	61fb      	str	r3, [r7, #28]
 801e8a2:	69bb      	ldr	r3, [r7, #24]
 801e8a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8a6:	693b      	ldr	r3, [r7, #16]
 801e8a8:	f383 8810 	msr	PRIMASK, r3
}
 801e8ac:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e8ae:	4b0d      	ldr	r3, [pc, #52]	; (801e8e4 <TRACE_TxCpltCallback+0x114>)
 801e8b0:	68db      	ldr	r3, [r3, #12]
 801e8b2:	4a0a      	ldr	r2, [pc, #40]	; (801e8dc <TRACE_TxCpltCallback+0x10c>)
 801e8b4:	8a92      	ldrh	r2, [r2, #20]
 801e8b6:	4611      	mov	r1, r2
 801e8b8:	69f8      	ldr	r0, [r7, #28]
 801e8ba:	4798      	blx	r3
 801e8bc:	e00a      	b.n	801e8d4 <TRACE_TxCpltCallback+0x104>
 801e8be:	69bb      	ldr	r3, [r7, #24]
 801e8c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	f383 8810 	msr	PRIMASK, r3
}
 801e8c8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e8ca:	f7e4 f987 	bl	8002bdc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e8ce:	f000 f8a7 	bl	801ea20 <TRACE_UnLock>
  }
}
 801e8d2:	bf00      	nop
 801e8d4:	bf00      	nop
 801e8d6:	3720      	adds	r7, #32
 801e8d8:	46bd      	mov	sp, r7
 801e8da:	bd80      	pop	{r7, pc}
 801e8dc:	20002470 	.word	0x20002470
 801e8e0:	20002488 	.word	0x20002488
 801e8e4:	0801f6bc 	.word	0x0801f6bc

0801e8e8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e8e8:	b480      	push	{r7}
 801e8ea:	b087      	sub	sp, #28
 801e8ec:	af00      	add	r7, sp, #0
 801e8ee:	4603      	mov	r3, r0
 801e8f0:	6039      	str	r1, [r7, #0]
 801e8f2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e8f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8f8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8fa:	f3ef 8310 	mrs	r3, PRIMASK
 801e8fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801e900:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e904:	b672      	cpsid	i
}
 801e906:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e908:	4b35      	ldr	r3, [pc, #212]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e90a:	8a5a      	ldrh	r2, [r3, #18]
 801e90c:	4b34      	ldr	r3, [pc, #208]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e90e:	8a1b      	ldrh	r3, [r3, #16]
 801e910:	429a      	cmp	r2, r3
 801e912:	d11b      	bne.n	801e94c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e914:	4b32      	ldr	r3, [pc, #200]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e916:	8a5b      	ldrh	r3, [r3, #18]
 801e918:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e91c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e91e:	88fa      	ldrh	r2, [r7, #6]
 801e920:	8afb      	ldrh	r3, [r7, #22]
 801e922:	429a      	cmp	r2, r3
 801e924:	d33a      	bcc.n	801e99c <TRACE_AllocateBufer+0xb4>
 801e926:	4b2e      	ldr	r3, [pc, #184]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e928:	8a1b      	ldrh	r3, [r3, #16]
 801e92a:	88fa      	ldrh	r2, [r7, #6]
 801e92c:	429a      	cmp	r2, r3
 801e92e:	d235      	bcs.n	801e99c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e930:	4b2b      	ldr	r3, [pc, #172]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e932:	2201      	movs	r2, #1
 801e934:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e936:	4b2a      	ldr	r3, [pc, #168]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e938:	8a5a      	ldrh	r2, [r3, #18]
 801e93a:	4b29      	ldr	r3, [pc, #164]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e93c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e93e:	4b28      	ldr	r3, [pc, #160]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e940:	8a1b      	ldrh	r3, [r3, #16]
 801e942:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e944:	4b26      	ldr	r3, [pc, #152]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e946:	2200      	movs	r2, #0
 801e948:	825a      	strh	r2, [r3, #18]
 801e94a:	e027      	b.n	801e99c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e94c:	4b24      	ldr	r3, [pc, #144]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e94e:	8a5a      	ldrh	r2, [r3, #18]
 801e950:	4b23      	ldr	r3, [pc, #140]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e952:	8a1b      	ldrh	r3, [r3, #16]
 801e954:	429a      	cmp	r2, r3
 801e956:	d91b      	bls.n	801e990 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e958:	4b21      	ldr	r3, [pc, #132]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e95a:	8a5b      	ldrh	r3, [r3, #18]
 801e95c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e960:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e962:	88fa      	ldrh	r2, [r7, #6]
 801e964:	8afb      	ldrh	r3, [r7, #22]
 801e966:	429a      	cmp	r2, r3
 801e968:	d318      	bcc.n	801e99c <TRACE_AllocateBufer+0xb4>
 801e96a:	4b1d      	ldr	r3, [pc, #116]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e96c:	8a1b      	ldrh	r3, [r3, #16]
 801e96e:	88fa      	ldrh	r2, [r7, #6]
 801e970:	429a      	cmp	r2, r3
 801e972:	d213      	bcs.n	801e99c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e974:	4b1a      	ldr	r3, [pc, #104]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e976:	2201      	movs	r2, #1
 801e978:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e97a:	4b19      	ldr	r3, [pc, #100]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e97c:	8a5a      	ldrh	r2, [r3, #18]
 801e97e:	4b18      	ldr	r3, [pc, #96]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e980:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e982:	4b17      	ldr	r3, [pc, #92]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e984:	8a1b      	ldrh	r3, [r3, #16]
 801e986:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e988:	4b15      	ldr	r3, [pc, #84]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e98a:	2200      	movs	r2, #0
 801e98c:	825a      	strh	r2, [r3, #18]
 801e98e:	e005      	b.n	801e99c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e990:	4b13      	ldr	r3, [pc, #76]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e992:	8a1a      	ldrh	r2, [r3, #16]
 801e994:	4b12      	ldr	r3, [pc, #72]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e996:	8a5b      	ldrh	r3, [r3, #18]
 801e998:	1ad3      	subs	r3, r2, r3
 801e99a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e99c:	8afa      	ldrh	r2, [r7, #22]
 801e99e:	88fb      	ldrh	r3, [r7, #6]
 801e9a0:	429a      	cmp	r2, r3
 801e9a2:	d90f      	bls.n	801e9c4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e9a4:	4b0e      	ldr	r3, [pc, #56]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e9a6:	8a5a      	ldrh	r2, [r3, #18]
 801e9a8:	683b      	ldr	r3, [r7, #0]
 801e9aa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e9ac:	4b0c      	ldr	r3, [pc, #48]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e9ae:	8a5a      	ldrh	r2, [r3, #18]
 801e9b0:	88fb      	ldrh	r3, [r7, #6]
 801e9b2:	4413      	add	r3, r2
 801e9b4:	b29b      	uxth	r3, r3
 801e9b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e9ba:	b29a      	uxth	r2, r3
 801e9bc:	4b08      	ldr	r3, [pc, #32]	; (801e9e0 <TRACE_AllocateBufer+0xf8>)
 801e9be:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	82bb      	strh	r3, [r7, #20]
 801e9c4:	693b      	ldr	r3, [r7, #16]
 801e9c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9c8:	68bb      	ldr	r3, [r7, #8]
 801e9ca:	f383 8810 	msr	PRIMASK, r3
}
 801e9ce:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e9d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e9d4:	4618      	mov	r0, r3
 801e9d6:	371c      	adds	r7, #28
 801e9d8:	46bd      	mov	sp, r7
 801e9da:	bc80      	pop	{r7}
 801e9dc:	4770      	bx	lr
 801e9de:	bf00      	nop
 801e9e0:	20002470 	.word	0x20002470

0801e9e4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e9e4:	b480      	push	{r7}
 801e9e6:	b085      	sub	sp, #20
 801e9e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9ea:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ee:	607b      	str	r3, [r7, #4]
  return(result);
 801e9f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9f4:	b672      	cpsid	i
}
 801e9f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e9f8:	4b08      	ldr	r3, [pc, #32]	; (801ea1c <TRACE_Lock+0x38>)
 801e9fa:	8adb      	ldrh	r3, [r3, #22]
 801e9fc:	3301      	adds	r3, #1
 801e9fe:	b29a      	uxth	r2, r3
 801ea00:	4b06      	ldr	r3, [pc, #24]	; (801ea1c <TRACE_Lock+0x38>)
 801ea02:	82da      	strh	r2, [r3, #22]
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea08:	68bb      	ldr	r3, [r7, #8]
 801ea0a:	f383 8810 	msr	PRIMASK, r3
}
 801ea0e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea10:	bf00      	nop
 801ea12:	3714      	adds	r7, #20
 801ea14:	46bd      	mov	sp, r7
 801ea16:	bc80      	pop	{r7}
 801ea18:	4770      	bx	lr
 801ea1a:	bf00      	nop
 801ea1c:	20002470 	.word	0x20002470

0801ea20 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ea20:	b480      	push	{r7}
 801ea22:	b085      	sub	sp, #20
 801ea24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea26:	f3ef 8310 	mrs	r3, PRIMASK
 801ea2a:	607b      	str	r3, [r7, #4]
  return(result);
 801ea2c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea30:	b672      	cpsid	i
}
 801ea32:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ea34:	4b08      	ldr	r3, [pc, #32]	; (801ea58 <TRACE_UnLock+0x38>)
 801ea36:	8adb      	ldrh	r3, [r3, #22]
 801ea38:	3b01      	subs	r3, #1
 801ea3a:	b29a      	uxth	r2, r3
 801ea3c:	4b06      	ldr	r3, [pc, #24]	; (801ea58 <TRACE_UnLock+0x38>)
 801ea3e:	82da      	strh	r2, [r3, #22]
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea44:	68bb      	ldr	r3, [r7, #8]
 801ea46:	f383 8810 	msr	PRIMASK, r3
}
 801ea4a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea4c:	bf00      	nop
 801ea4e:	3714      	adds	r7, #20
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bc80      	pop	{r7}
 801ea54:	4770      	bx	lr
 801ea56:	bf00      	nop
 801ea58:	20002470 	.word	0x20002470

0801ea5c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ea5c:	b480      	push	{r7}
 801ea5e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ea60:	4b05      	ldr	r3, [pc, #20]	; (801ea78 <TRACE_IsLocked+0x1c>)
 801ea62:	8adb      	ldrh	r3, [r3, #22]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	bf14      	ite	ne
 801ea68:	2301      	movne	r3, #1
 801ea6a:	2300      	moveq	r3, #0
 801ea6c:	b2db      	uxtb	r3, r3
}
 801ea6e:	4618      	mov	r0, r3
 801ea70:	46bd      	mov	sp, r7
 801ea72:	bc80      	pop	{r7}
 801ea74:	4770      	bx	lr
 801ea76:	bf00      	nop
 801ea78:	20002470 	.word	0x20002470

0801ea7c <__libc_init_array>:
 801ea7c:	b570      	push	{r4, r5, r6, lr}
 801ea7e:	4d0d      	ldr	r5, [pc, #52]	; (801eab4 <__libc_init_array+0x38>)
 801ea80:	4c0d      	ldr	r4, [pc, #52]	; (801eab8 <__libc_init_array+0x3c>)
 801ea82:	1b64      	subs	r4, r4, r5
 801ea84:	10a4      	asrs	r4, r4, #2
 801ea86:	2600      	movs	r6, #0
 801ea88:	42a6      	cmp	r6, r4
 801ea8a:	d109      	bne.n	801eaa0 <__libc_init_array+0x24>
 801ea8c:	4d0b      	ldr	r5, [pc, #44]	; (801eabc <__libc_init_array+0x40>)
 801ea8e:	4c0c      	ldr	r4, [pc, #48]	; (801eac0 <__libc_init_array+0x44>)
 801ea90:	f000 f90a 	bl	801eca8 <_init>
 801ea94:	1b64      	subs	r4, r4, r5
 801ea96:	10a4      	asrs	r4, r4, #2
 801ea98:	2600      	movs	r6, #0
 801ea9a:	42a6      	cmp	r6, r4
 801ea9c:	d105      	bne.n	801eaaa <__libc_init_array+0x2e>
 801ea9e:	bd70      	pop	{r4, r5, r6, pc}
 801eaa0:	f855 3b04 	ldr.w	r3, [r5], #4
 801eaa4:	4798      	blx	r3
 801eaa6:	3601      	adds	r6, #1
 801eaa8:	e7ee      	b.n	801ea88 <__libc_init_array+0xc>
 801eaaa:	f855 3b04 	ldr.w	r3, [r5], #4
 801eaae:	4798      	blx	r3
 801eab0:	3601      	adds	r6, #1
 801eab2:	e7f2      	b.n	801ea9a <__libc_init_array+0x1e>
 801eab4:	0801fc50 	.word	0x0801fc50
 801eab8:	0801fc50 	.word	0x0801fc50
 801eabc:	0801fc50 	.word	0x0801fc50
 801eac0:	0801fc58 	.word	0x0801fc58

0801eac4 <memset>:
 801eac4:	4402      	add	r2, r0
 801eac6:	4603      	mov	r3, r0
 801eac8:	4293      	cmp	r3, r2
 801eaca:	d100      	bne.n	801eace <memset+0xa>
 801eacc:	4770      	bx	lr
 801eace:	f803 1b01 	strb.w	r1, [r3], #1
 801ead2:	e7f9      	b.n	801eac8 <memset+0x4>

0801ead4 <register_fini>:
 801ead4:	4b02      	ldr	r3, [pc, #8]	; (801eae0 <register_fini+0xc>)
 801ead6:	b113      	cbz	r3, 801eade <register_fini+0xa>
 801ead8:	4802      	ldr	r0, [pc, #8]	; (801eae4 <register_fini+0x10>)
 801eada:	f000 b805 	b.w	801eae8 <atexit>
 801eade:	4770      	bx	lr
 801eae0:	00000000 	.word	0x00000000
 801eae4:	0801eaf5 	.word	0x0801eaf5

0801eae8 <atexit>:
 801eae8:	2300      	movs	r3, #0
 801eaea:	4601      	mov	r1, r0
 801eaec:	461a      	mov	r2, r3
 801eaee:	4618      	mov	r0, r3
 801eaf0:	f000 b816 	b.w	801eb20 <__register_exitproc>

0801eaf4 <__libc_fini_array>:
 801eaf4:	b538      	push	{r3, r4, r5, lr}
 801eaf6:	4d07      	ldr	r5, [pc, #28]	; (801eb14 <__libc_fini_array+0x20>)
 801eaf8:	4c07      	ldr	r4, [pc, #28]	; (801eb18 <__libc_fini_array+0x24>)
 801eafa:	1b64      	subs	r4, r4, r5
 801eafc:	10a4      	asrs	r4, r4, #2
 801eafe:	b91c      	cbnz	r4, 801eb08 <__libc_fini_array+0x14>
 801eb00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb04:	f000 b8d6 	b.w	801ecb4 <_fini>
 801eb08:	3c01      	subs	r4, #1
 801eb0a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801eb0e:	4798      	blx	r3
 801eb10:	e7f5      	b.n	801eafe <__libc_fini_array+0xa>
 801eb12:	bf00      	nop
 801eb14:	0801fc58 	.word	0x0801fc58
 801eb18:	0801fc5c 	.word	0x0801fc5c

0801eb1c <__retarget_lock_acquire_recursive>:
 801eb1c:	4770      	bx	lr

0801eb1e <__retarget_lock_release_recursive>:
 801eb1e:	4770      	bx	lr

0801eb20 <__register_exitproc>:
 801eb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb24:	f8df a074 	ldr.w	sl, [pc, #116]	; 801eb9c <__register_exitproc+0x7c>
 801eb28:	4606      	mov	r6, r0
 801eb2a:	f8da 0000 	ldr.w	r0, [sl]
 801eb2e:	4698      	mov	r8, r3
 801eb30:	460f      	mov	r7, r1
 801eb32:	4691      	mov	r9, r2
 801eb34:	f7ff fff2 	bl	801eb1c <__retarget_lock_acquire_recursive>
 801eb38:	4b19      	ldr	r3, [pc, #100]	; (801eba0 <__register_exitproc+0x80>)
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801eb40:	b91c      	cbnz	r4, 801eb4a <__register_exitproc+0x2a>
 801eb42:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801eb46:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801eb4a:	6865      	ldr	r5, [r4, #4]
 801eb4c:	f8da 0000 	ldr.w	r0, [sl]
 801eb50:	2d1f      	cmp	r5, #31
 801eb52:	dd05      	ble.n	801eb60 <__register_exitproc+0x40>
 801eb54:	f7ff ffe3 	bl	801eb1e <__retarget_lock_release_recursive>
 801eb58:	f04f 30ff 	mov.w	r0, #4294967295
 801eb5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb60:	b19e      	cbz	r6, 801eb8a <__register_exitproc+0x6a>
 801eb62:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eb66:	2201      	movs	r2, #1
 801eb68:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eb6c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eb70:	40aa      	lsls	r2, r5
 801eb72:	4313      	orrs	r3, r2
 801eb74:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eb78:	2e02      	cmp	r6, #2
 801eb7a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eb7e:	bf02      	ittt	eq
 801eb80:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801eb84:	4313      	orreq	r3, r2
 801eb86:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801eb8a:	1c6b      	adds	r3, r5, #1
 801eb8c:	3502      	adds	r5, #2
 801eb8e:	6063      	str	r3, [r4, #4]
 801eb90:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eb94:	f7ff ffc3 	bl	801eb1e <__retarget_lock_release_recursive>
 801eb98:	2000      	movs	r0, #0
 801eb9a:	e7df      	b.n	801eb5c <__register_exitproc+0x3c>
 801eb9c:	200005a0 	.word	0x200005a0
 801eba0:	0801fb84 	.word	0x0801fb84
 801eba4:	00000000 	.word	0x00000000

0801eba8 <floor>:
 801eba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ebb0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ebb4:	2e13      	cmp	r6, #19
 801ebb6:	4602      	mov	r2, r0
 801ebb8:	460b      	mov	r3, r1
 801ebba:	4607      	mov	r7, r0
 801ebbc:	460c      	mov	r4, r1
 801ebbe:	4605      	mov	r5, r0
 801ebc0:	dc33      	bgt.n	801ec2a <floor+0x82>
 801ebc2:	2e00      	cmp	r6, #0
 801ebc4:	da14      	bge.n	801ebf0 <floor+0x48>
 801ebc6:	a334      	add	r3, pc, #208	; (adr r3, 801ec98 <floor+0xf0>)
 801ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebcc:	f7e1 fae2 	bl	8000194 <__adddf3>
 801ebd0:	2200      	movs	r2, #0
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	f7e1 ff24 	bl	8000a20 <__aeabi_dcmpgt>
 801ebd8:	b138      	cbz	r0, 801ebea <floor+0x42>
 801ebda:	2c00      	cmp	r4, #0
 801ebdc:	da58      	bge.n	801ec90 <floor+0xe8>
 801ebde:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ebe2:	431d      	orrs	r5, r3
 801ebe4:	d001      	beq.n	801ebea <floor+0x42>
 801ebe6:	4c2e      	ldr	r4, [pc, #184]	; (801eca0 <floor+0xf8>)
 801ebe8:	2500      	movs	r5, #0
 801ebea:	4623      	mov	r3, r4
 801ebec:	462f      	mov	r7, r5
 801ebee:	e025      	b.n	801ec3c <floor+0x94>
 801ebf0:	4a2c      	ldr	r2, [pc, #176]	; (801eca4 <floor+0xfc>)
 801ebf2:	fa42 f806 	asr.w	r8, r2, r6
 801ebf6:	ea01 0208 	and.w	r2, r1, r8
 801ebfa:	4302      	orrs	r2, r0
 801ebfc:	d01e      	beq.n	801ec3c <floor+0x94>
 801ebfe:	a326      	add	r3, pc, #152	; (adr r3, 801ec98 <floor+0xf0>)
 801ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec04:	f7e1 fac6 	bl	8000194 <__adddf3>
 801ec08:	2200      	movs	r2, #0
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	f7e1 ff08 	bl	8000a20 <__aeabi_dcmpgt>
 801ec10:	2800      	cmp	r0, #0
 801ec12:	d0ea      	beq.n	801ebea <floor+0x42>
 801ec14:	2c00      	cmp	r4, #0
 801ec16:	bfbe      	ittt	lt
 801ec18:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ec1c:	fa43 f606 	asrlt.w	r6, r3, r6
 801ec20:	19a4      	addlt	r4, r4, r6
 801ec22:	ea24 0408 	bic.w	r4, r4, r8
 801ec26:	2500      	movs	r5, #0
 801ec28:	e7df      	b.n	801ebea <floor+0x42>
 801ec2a:	2e33      	cmp	r6, #51	; 0x33
 801ec2c:	dd0a      	ble.n	801ec44 <floor+0x9c>
 801ec2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ec32:	d103      	bne.n	801ec3c <floor+0x94>
 801ec34:	f7e1 faae 	bl	8000194 <__adddf3>
 801ec38:	4607      	mov	r7, r0
 801ec3a:	460b      	mov	r3, r1
 801ec3c:	4638      	mov	r0, r7
 801ec3e:	4619      	mov	r1, r3
 801ec40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec44:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ec48:	f04f 32ff 	mov.w	r2, #4294967295
 801ec4c:	fa22 f808 	lsr.w	r8, r2, r8
 801ec50:	ea18 0f00 	tst.w	r8, r0
 801ec54:	d0f2      	beq.n	801ec3c <floor+0x94>
 801ec56:	a310      	add	r3, pc, #64	; (adr r3, 801ec98 <floor+0xf0>)
 801ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec5c:	f7e1 fa9a 	bl	8000194 <__adddf3>
 801ec60:	2200      	movs	r2, #0
 801ec62:	2300      	movs	r3, #0
 801ec64:	f7e1 fedc 	bl	8000a20 <__aeabi_dcmpgt>
 801ec68:	2800      	cmp	r0, #0
 801ec6a:	d0be      	beq.n	801ebea <floor+0x42>
 801ec6c:	2c00      	cmp	r4, #0
 801ec6e:	da02      	bge.n	801ec76 <floor+0xce>
 801ec70:	2e14      	cmp	r6, #20
 801ec72:	d103      	bne.n	801ec7c <floor+0xd4>
 801ec74:	3401      	adds	r4, #1
 801ec76:	ea25 0508 	bic.w	r5, r5, r8
 801ec7a:	e7b6      	b.n	801ebea <floor+0x42>
 801ec7c:	2301      	movs	r3, #1
 801ec7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec82:	fa03 f606 	lsl.w	r6, r3, r6
 801ec86:	4435      	add	r5, r6
 801ec88:	42bd      	cmp	r5, r7
 801ec8a:	bf38      	it	cc
 801ec8c:	18e4      	addcc	r4, r4, r3
 801ec8e:	e7f2      	b.n	801ec76 <floor+0xce>
 801ec90:	2500      	movs	r5, #0
 801ec92:	462c      	mov	r4, r5
 801ec94:	e7a9      	b.n	801ebea <floor+0x42>
 801ec96:	bf00      	nop
 801ec98:	8800759c 	.word	0x8800759c
 801ec9c:	7e37e43c 	.word	0x7e37e43c
 801eca0:	bff00000 	.word	0xbff00000
 801eca4:	000fffff 	.word	0x000fffff

0801eca8 <_init>:
 801eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecaa:	bf00      	nop
 801ecac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ecae:	bc08      	pop	{r3}
 801ecb0:	469e      	mov	lr, r3
 801ecb2:	4770      	bx	lr

0801ecb4 <_fini>:
 801ecb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecb6:	bf00      	nop
 801ecb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ecba:	bc08      	pop	{r3}
 801ecbc:	469e      	mov	lr, r3
 801ecbe:	4770      	bx	lr
